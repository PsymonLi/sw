// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
 /*
 * Package cmd is a auto generated package.
 * Input file: {{.Name}}
 */
 {{$pkgName := .Package}}
package cmd
import (
	"fmt"

	"github.com/spf13/cobra"
)

var name string
 {{$msgs := .Messages}}
 {{range $msgs}}
    {{if (HasSuffix .GetName "Metrics")}}
	var {{ToLower .GetName}}ShowCmd = &cobra.Command{
		Use:   "{{ToLower .GetName}}",
		Short: "Show {{.GetName}} from Naples",
		Long:  "\n---------------------------------\n Show {{.GetName}} From Naples \n---------------------------------\n",
		Run:   {{ToLower .GetName}}ShowCmdHandler,
	}

	func {{ToLower .GetName}}ShowCmdHandler(cmd *cobra.Command, args []string) {
		var resp []byte
		if cmd.Flags().Changed("name") {
			resp, _ = restGet(revProxyPort, "telemetry/v1/metrics/{{ToLower .GetName}}/default/"+name+"/")
		} else {
			resp, _ = restGet(revProxyPort, "telemetry/v1/metrics/{{ToLower .GetName}}/")
		}
		fmt.Println(string(resp))
		if jsonFormat {
			fmt.Println("JSON not supported for this command")
		}
		if yamlFormat {
			fmt.Println("YAML not supported for this command")
		}
	}
    {{end}}
 {{end}}
        func init() {
 {{range $msgs}}
    {{if (HasSuffix .GetName "Metrics")}}
                metricsShowCmd.AddCommand({{ToLower .GetName}}ShowCmd)
		{{ToLower .GetName}}ShowCmd.Flags().StringVarP(&name, "name", "n", "", "Name/Key for metrics object")
    {{end}}
 {{end}}
        }
