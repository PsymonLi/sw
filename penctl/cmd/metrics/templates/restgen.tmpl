// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
 /*
 * Package cmd is a auto generated package.
 * Input file: {{.Name}}
 */
 {{$pkgName := .Package}}
package cmd
import (
	"fmt"

	"github.com/spf13/cobra"
)

 {{$msgs := .Messages}}
 {{range $msgs}}
 {{$name := .GetName}}
    {{if (HasSuffix .GetName "PenctlRootCmd")}}
      {{if (hasExtension "venice.penctlParentCmd" .) }}
        {{$params := (getPenctlParentCmdOptions .)}}
        {{range $params}}
          {{$cmd := .Cmd}}
          {{$rootCmd := .RootCmd}}
          {{$longHelpStr:= .HelpStr}}
          {{$shortHelpStr:= .ShortHelpStr}}
//cmd - {{$cmd}}
//rootCmd = {{$rootCmd}}
//longHelpStr = {{$longHelpStr}}
//shortHelpStr = {{$shortHelpStr}}
        var {{ToLower $cmd}}ShowCmd = &cobra.Command{
                Use:   "{{ToLower $cmd}}",
                Short: "{{$shortHelpStr}}",
                Long:  "\n---------------------------------\n {{$longHelpStr}}\n---------------------------------\n",
        }
        {{end}}
      {{end}}
    {{else if (HasSuffix .GetName "Metrics")}}
      {{if (hasExtension "venice.penctlCmd" .) }}
        {{$param := (getPenctlCmdOptions .)}}
        {{$cmd := $param.Cmd}}
        {{$rootCmd := $param.RootCmd}}
        {{$longHelpStr:= $param.HelpStr}}
        {{$shortHelpStr:= $param.ShortHelpStr}}
//cmd - {{$cmd}}
//rootCmd = {{$rootCmd}}
//longHelpStr = {{$longHelpStr}}
//shortHelpStr = {{$shortHelpStr}}
        var {{ToLower $cmd}}{{$rootCmd}}ShowCmd = &cobra.Command{
                Use:   "{{ToLower $cmd}}",
                Short: "{{$shortHelpStr}}",
                Long:  "\n---------------------------------\n {{$longHelpStr}}\n---------------------------------\n",
                RunE:  {{ToLower $cmd}}{{$rootCmd}}ShowCmdHandler,
        }

        func {{ToLower $cmd}}{{$rootCmd}}ShowCmdHandler(cmd *cobra.Command, args []string) error {
                jsonFormat = true
                bodyBytes, err := restGet("telemetry/v1/metrics/{{ToLower .GetName}}/")
                if err != nil {
                        fmt.Println(err)
                        return err
                }
                if bodyBytes == nil {
                        fmt.Println("No {{ToLower .GetName}} object(s) found")
                }
                return nil
        }
      {{end}}
    {{end}}
 {{end}}
        func init() {
 {{range $msgs}}
 {{$name := .GetName}}
    {{if (HasSuffix .GetName "PenctlRootCmd")}}
      {{if (hasExtension "venice.penctlParentCmd" .) }}
          {{$params := (getPenctlParentCmdOptions .)}}
          {{range $params}}
            {{$cmd := .Cmd}}
            {{$rootCmd := .RootCmd}}
            {{$longHelpStr:= .HelpStr}}
            {{$shortHelpStr:= .ShortHelpStr}}
//cmd - {{$cmd}}
//rootCmd = {{$rootCmd}}
//longHelpStr = {{$longHelpStr}}
//shortHelpStr = {{$shortHelpStr}}
            {{if strEq $rootCmd ""}}
               metricsShowCmd.AddCommand({{ToLower $cmd}}ShowCmd)
            {{else}}
              {{ToLower $rootCmd}}ShowCmd.AddCommand({{ToLower $cmd}}ShowCmd)
            {{end}}
          {{end}}
      {{end}}
    {{else if (HasSuffix .GetName "Metrics")}}
      {{if (hasExtension "venice.penctlCmd" .) }}
        {{$param := (getPenctlCmdOptions .)}}
        {{$cmd := $param.Cmd}}
        {{$rootCmd := $param.RootCmd}}
        {{$longHelpStr:= $param.HelpStr}}
        {{$shortHelpStr:= $param.ShortHelpStr}}
        {{ToLower $rootCmd}}ShowCmd.AddCommand({{ToLower $cmd}}{{$rootCmd}}ShowCmd)
       {{end}}
    {{end}}
 {{end}}
        }
