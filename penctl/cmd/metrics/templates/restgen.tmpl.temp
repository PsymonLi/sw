// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
 /*
 * Package cmd is a auto generated package.
 * Input file: {{.Name}}
 */
 {{$pkgName := .Package}}
package cmd
import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
)

 {{$msgs := .Messages}}
 {{range $msgs}}
	var {{.GetName}}Name string

    {{if (HasSuffix .GetName "Metrics")}}
	var {{ToLower .GetName}}ShowCmd = &cobra.Command{
		Use:   "{{ToLower .GetName}}",
		Short: "Show {{.GetName}} from Naples",
		Long:  "\n---------------------------------\n Show {{.GetName}} From Naples \n---------------------------------\n",
		Run:   {{ToLower .GetName}}ShowCmdHandler,
	}

	func {{ToLower .GetName}}ShowCmdHandler(cmd *cobra.Command, args []string) {
		var resp []byte
		if cmd.Flags().Changed("{{ToLower .GetName}}") {
			resp, _ = restGet(revProxyPort, "telemetry/v1/metrics/{{ToLower .GetName}}/default/"+{{.GetName}}Name+"/")
	                myvar := goproto.{{.GetName}}{}
        	        json.Unmarshal(resp, &myvar)
                        	{{$fields := .Fields}}{{range $fields}}
				{{if and (not (eq .GetName "Meta"))  (not (eq .GetName "Key"))}}
        	                        fmt.Println("{{.GetName}}: ", myvar.{{.GetName}})
                	        {{end}} {{end}}
	                }
		} else {
			resp, _ = restGet(revProxyPort, "telemetry/v1/metrics/{{ToLower .GetName}}/")
			myvars := []goproto.{{.GetName}}{}
			json.Unmarshal(resp, &myvars)
				for _, myvar := range myvars {
					{{$fields := .Fields}}{{range $fields}}
					{{if and (not (eq .GetName "Meta"))  (not (eq .GetName "Key"))}}
						fmt.Println("{{.GetName}}: ", myvar.{{.GetName}})
					{{end}} {{end}}
				}
			}
		}
	}
    {{end}}
 {{end}}
        func init() {
 {{range $msgs}}
    {{if (HasSuffix .GetName "Metrics")}}
                metricsShowCmd.AddCommand({{ToLower .GetName}}ShowCmd)
		{{ToLower .GetName}}ShowCmd.Flags().StringVarP(&{{.GetName}}Name, "name", "n", "", "Name/Key for metrics object")
    {{end}}
 {{end}}
        }
