// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package cmd is a auto generated package.
 * Input file: sysmond.proto
 */

package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
)

//cmd - power
//rootCmd = system
//helpStr = System power information:\n\n\nValue Description:\n\npin: Input power to the system.\npout1: Core output power.\npout2: Arm output power.\nThe power is milli Watt\n
var powersystemShowCmd = &cobra.Command{
	Use:   "power",
	Short: "System power information:\n\n\nValue Description:\n\npin: Input power to the system.\npout1: Core output power.\npout2: Arm output power.\nThe power is milli Watt\n",
	Long:  "\n---------------------------------\n System power information:\n\n\nValue Description:\n\npin: Input power to the system.\npout1: Core output power.\npout2: Arm output power.\nThe power is milli Watt\n\n---------------------------------\n",
	RunE:  powersystemShowCmdHandler,
}

func powersystemShowCmdHandler(cmd *cobra.Command, args []string) error {
	jsonFormat = true
	bodyBytes, err := restGet("telemetry/v1/metrics/asicpowermetrics/")
	if err != nil {
		fmt.Println(err)
		return err
	}
	if bodyBytes == nil {
		fmt.Println("No asicpowermetrics object(s) found")
	}
	return nil
}

//cmd - temp
//rootCmd = system
//helpStr = System temperature information:\n\n\nValue Description:\n\nlocal_temperature: Temperature of the board.\ndie_temperature: Temperature of the die.\nhbm_temperature: Temperature of the hbm.\nThe temperature is degree Celcius\n
var tempsystemShowCmd = &cobra.Command{
	Use:   "temp",
	Short: "System temperature information:\n\n\nValue Description:\n\nlocal_temperature: Temperature of the board.\ndie_temperature: Temperature of the die.\nhbm_temperature: Temperature of the hbm.\nThe temperature is degree Celcius\n",
	Long:  "\n---------------------------------\n System temperature information:\n\n\nValue Description:\n\nlocal_temperature: Temperature of the board.\ndie_temperature: Temperature of the die.\nhbm_temperature: Temperature of the hbm.\nThe temperature is degree Celcius\n\n---------------------------------\n",
	RunE:  tempsystemShowCmdHandler,
}

func tempsystemShowCmdHandler(cmd *cobra.Command, args []string) error {
	jsonFormat = true
	bodyBytes, err := restGet("telemetry/v1/metrics/asictemperaturemetrics/")
	if err != nil {
		fmt.Println(err)
		return err
	}
	if bodyBytes == nil {
		fmt.Println("No asictemperaturemetrics object(s) found")
	}
	return nil
}

//cmd - system
//rootCmd =
//helpStr = Metrics for system monitors
var systemShowCmd = &cobra.Command{
	Use:   "system",
	Short: "Metrics for system monitors",
	Long:  "\n---------------------------------\n Metrics for system monitors\n---------------------------------\n",
}

func init() {

	systemShowCmd.AddCommand(powersystemShowCmd)

	systemShowCmd.AddCommand(tempsystemShowCmd)

	//cmd - system
	//rootCmd =
	//helpStr = Metrics for system monitors

	metricsShowCmd.AddCommand(systemShowCmd)

}
