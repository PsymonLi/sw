// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package cmd is a auto generated package.
 * Input file: pciemgr.proto
 */

package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
)

//cmd - pciemgr
//rootCmd = pcie
//longHelpStr = Pcie Mgr Metrics information:\nValue Description:\nnot_intr : notify total intrs.\nnot_spurious : notify spurious intrs.\nnot_cnt : notify total txns.\nnot_max : notify max txns per intr.\nnot_cfgrd : notify config reads.\nnot_cfgwr : notify config writes.\nnot_memrd : notify memory reads.\nnot_memwr : notify memory writes.\nnot_iord : notify io reads.\nnot_iowr : notify io writes.\nnot_unknown : notify unknown type.\nnot_rsrv0 : notify rsrv0.\nnot_rsrv1 : notify rsrv1.\nnot_msg : notify pcie message.\nnot_unsupported : notify unsupported.\nnot_pmv : notify pgm model violation.\nnot_dbpmv : notify doorbell pmv.\nnot_atomic : notify atomic trans.\nnot_pmtmiss : notify PMT miss.\nnot_pmrmiss : notify PMR miss.\nnot_prtmiss : notify PRT miss.\nnot_bdf2vfidmiss : notify bdf2vfid table miss.\nnot_prtoor : notify PRT out-of-range.\nnot_vfidoor : notify vfid out-of-range.\nnot_bdfoor : notify bdf out-of-range.\nnot_pmrind : notify PMR force indirect.\nnot_prtind : notify PRT force indirect.\nnot_pmrecc : notify PMR ECC error.\nnot_prtecc : notify PRT ECC error.\nind_intr : indirect total intrs.\nind_spurious : indirect spurious intrs.\nind_cfgrd : indirect config reads.\nind_cfgwr : indirect config writes.\nind_memrd : indirect memory reads.\nind_memwr : indirect memory writes.\nind_iord : indirect io reads.\nind_iowr : indirect io writes.\nind_unknown : indirect unknown type.\nhealthlog : health log events.\n
//shortHelpStr = Pcie Mgr Metrics information
var pciemgrpcieShowCmd = &cobra.Command{
	Use:   "pciemgr",
	Short: "Pcie Mgr Metrics information",
	Long:  "\n---------------------------------\n Pcie Mgr Metrics information:\nValue Description:\nnot_intr : notify total intrs.\nnot_spurious : notify spurious intrs.\nnot_cnt : notify total txns.\nnot_max : notify max txns per intr.\nnot_cfgrd : notify config reads.\nnot_cfgwr : notify config writes.\nnot_memrd : notify memory reads.\nnot_memwr : notify memory writes.\nnot_iord : notify io reads.\nnot_iowr : notify io writes.\nnot_unknown : notify unknown type.\nnot_rsrv0 : notify rsrv0.\nnot_rsrv1 : notify rsrv1.\nnot_msg : notify pcie message.\nnot_unsupported : notify unsupported.\nnot_pmv : notify pgm model violation.\nnot_dbpmv : notify doorbell pmv.\nnot_atomic : notify atomic trans.\nnot_pmtmiss : notify PMT miss.\nnot_pmrmiss : notify PMR miss.\nnot_prtmiss : notify PRT miss.\nnot_bdf2vfidmiss : notify bdf2vfid table miss.\nnot_prtoor : notify PRT out-of-range.\nnot_vfidoor : notify vfid out-of-range.\nnot_bdfoor : notify bdf out-of-range.\nnot_pmrind : notify PMR force indirect.\nnot_prtind : notify PRT force indirect.\nnot_pmrecc : notify PMR ECC error.\nnot_prtecc : notify PRT ECC error.\nind_intr : indirect total intrs.\nind_spurious : indirect spurious intrs.\nind_cfgrd : indirect config reads.\nind_cfgwr : indirect config writes.\nind_memrd : indirect memory reads.\nind_memwr : indirect memory writes.\nind_iord : indirect io reads.\nind_iowr : indirect io writes.\nind_unknown : indirect unknown type.\nhealthlog : health log events.\n\n---------------------------------\n",
	Args:  cobra.NoArgs,
	RunE:  pciemgrpcieShowCmdHandler,
}

func pciemgrpcieShowCmdHandler(cmd *cobra.Command, args []string) error {
	jsonFormat = true
	bodyBytes, err := restGet("telemetry/v1/metrics/pciemgrmetrics/")
	if err != nil {
		fmt.Println(err)
		return err
	}
	if bodyBytes == nil {
		fmt.Println("No pciemgrmetrics object(s) found")
	}
	return nil
}

//cmd - port
//rootCmd = pcie
//longHelpStr = Pcie Port Metrics information:\nValue Description:\nintr_total : total port intrs.\nintr_polled : total port intrs polled.\nintr_perstn : pcie out of reset.\nintr_ltssmst_early : link train before linkup.\nintr_ltssmst : link train after linkup.\nintr_linkup2dn : link down.\nintr_linkdn2up : link up.\nintr_rstup2dn : mac up.\nintr_rstdn2up : mac down.\nintr_secbus : secondary bus set.\nlinkup : link is up.\nhostup : host is up (secbus).\nphypolllast : phy poll count (last).\nphypollmax : phy poll count (max).\nphypollperstn : phy poll lost perstn.\nphypollfail : phy poll failed.\ngatepolllast : gate poll count (last).\ngatepollmax : gate poll count (max).\nmarkerpolllast : marker poll count (last).\nmarkerpollmax : marker poll count (max).\naxipendpolllast : axipend poll count (last).\naxipendpollmax : axipend poll count (max).\nfaults : link faults.\npowerdown: powerdown count.\nlink_dn2up_int : link_dn2up_int.\nlink_up2dn_int : link_up2dn_int.\nsec_bus_rst_int : sec_bus_rst_int.\nrst_up2dn_int : rst_up2dn_int.\nrst_dn2up_int : rst_dn2up_int.\nportgate_open2close_int : portgate_open2close_int.\nltssm_st_changed_int : ltssm_st_changed_int.\nsec_busnum_changed_int : sec_busnum_changed_int.\nrc_pme_int : rc_pme_int.\nrc_aerr_int : rc_aerr_int.\nrc_serr_int : rc_serr_int. \nrc_hpe_int : rc_hpe_int.\nrc_eq_req_int : rc_eq_req_int.\nrc_dpc_int : rc_dpc_int.\npm_turnoff_int : pm_turnoff_int.\ntxbfr_overflow_int : txbfr_overflow_int.\nrxtlp_err_int : rxtlp_err_int.\ntl_flr_req_int : tl_flr_req_int.\nrc_legacy_intpin_changed_int : rc_legacy_intpin_changed_int.\nppsd_sbe_interrupt : ppsd_sbe_interrupt.\nppsd_dbe_interrupt : ppsd_dbe_interrupt.\nsbus_err_interrupt : sbus_err_interrupt.\npoweron_retries : poweron_retries.\n
//shortHelpStr = Pcie Port Metrics information
var portpcieShowCmd = &cobra.Command{
	Use:   "port",
	Short: "Pcie Port Metrics information",
	Long:  "\n---------------------------------\n Pcie Port Metrics information:\nValue Description:\nintr_total : total port intrs.\nintr_polled : total port intrs polled.\nintr_perstn : pcie out of reset.\nintr_ltssmst_early : link train before linkup.\nintr_ltssmst : link train after linkup.\nintr_linkup2dn : link down.\nintr_linkdn2up : link up.\nintr_rstup2dn : mac up.\nintr_rstdn2up : mac down.\nintr_secbus : secondary bus set.\nlinkup : link is up.\nhostup : host is up (secbus).\nphypolllast : phy poll count (last).\nphypollmax : phy poll count (max).\nphypollperstn : phy poll lost perstn.\nphypollfail : phy poll failed.\ngatepolllast : gate poll count (last).\ngatepollmax : gate poll count (max).\nmarkerpolllast : marker poll count (last).\nmarkerpollmax : marker poll count (max).\naxipendpolllast : axipend poll count (last).\naxipendpollmax : axipend poll count (max).\nfaults : link faults.\npowerdown: powerdown count.\nlink_dn2up_int : link_dn2up_int.\nlink_up2dn_int : link_up2dn_int.\nsec_bus_rst_int : sec_bus_rst_int.\nrst_up2dn_int : rst_up2dn_int.\nrst_dn2up_int : rst_dn2up_int.\nportgate_open2close_int : portgate_open2close_int.\nltssm_st_changed_int : ltssm_st_changed_int.\nsec_busnum_changed_int : sec_busnum_changed_int.\nrc_pme_int : rc_pme_int.\nrc_aerr_int : rc_aerr_int.\nrc_serr_int : rc_serr_int. \nrc_hpe_int : rc_hpe_int.\nrc_eq_req_int : rc_eq_req_int.\nrc_dpc_int : rc_dpc_int.\npm_turnoff_int : pm_turnoff_int.\ntxbfr_overflow_int : txbfr_overflow_int.\nrxtlp_err_int : rxtlp_err_int.\ntl_flr_req_int : tl_flr_req_int.\nrc_legacy_intpin_changed_int : rc_legacy_intpin_changed_int.\nppsd_sbe_interrupt : ppsd_sbe_interrupt.\nppsd_dbe_interrupt : ppsd_dbe_interrupt.\nsbus_err_interrupt : sbus_err_interrupt.\npoweron_retries : poweron_retries.\n\n---------------------------------\n",
	Args:  cobra.NoArgs,
	RunE:  portpcieShowCmdHandler,
}

func portpcieShowCmdHandler(cmd *cobra.Command, args []string) error {
	jsonFormat = true
	bodyBytes, err := restGet("telemetry/v1/metrics/pcieportmetrics/")
	if err != nil {
		fmt.Println(err)
		return err
	}
	if bodyBytes == nil {
		fmt.Println("No pcieportmetrics object(s) found")
	}
	return nil
}

//cmd - pcie
//rootCmd =
//longHelpStr = Metrics for Pcie Subsystem
//shortHelpStr = Metrics for Pcie Subsystem
var pcieShowCmd = &cobra.Command{
	Use:   "pcie",
	Short: "Metrics for Pcie Subsystem",
	Long:  "\n---------------------------------\n Metrics for Pcie Subsystem\n---------------------------------\n",
	Args:  cobra.NoArgs,
}

func init() {

	pcieShowCmd.AddCommand(pciemgrpcieShowCmd)

	pcieShowCmd.AddCommand(portpcieShowCmd)

	//cmd - pcie
	//rootCmd =
	//longHelpStr = Metrics for Pcie Subsystem
	//shortHelpStr = Metrics for Pcie Subsystem

	metricsShowCmd.AddCommand(pcieShowCmd)

}
