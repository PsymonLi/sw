// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package cmd is a auto generated package.
 * Input file: accel_metrics.proto
 */

package cmd

import (
	"fmt"

	"github.com/spf13/cobra"
)

//cmd - hw_ring
//rootCmd = sonic
//longHelpStr = Metrics for hardware rings\n Key indices - RId: ring ID, SubRId: sub-ring ID\n\n\nRing ID:\n\n  cp     : compression\n  cp_hot : compression (priority)\n  dc     : decompression\n  dc_hot : decompression (priority)\n  xts_enc: XTS encryption\n  xts_dec: XTS decryption\n  gcm_enc: GCM encryption\n  gcm_dec: GCM decryption\n\n\nValue Description:\n\nPIndex     : ring producer index\nCIndex     : ring consumer index\nInputBytes : total input bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\nOutputBytes: total output bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\nSoftResets : number of soft resets executed\nPIndex	: ring producer index\nCIndex	: ring consumer index\nInputBytes	: total input bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\nOutputBytes	: total output bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\nSoftResets	: number of soft resets executed\n
//shortHelpStr = Metrics for hardware rings
var hw_ringsonicShowCmd = &cobra.Command{
	Use:   "hw_ring",
	Short: "Metrics for hardware rings",
	Long: "\n---------------------------------\n Metrics for hardware rings\n Key indices - RId: ring ID, SubRId: sub-ring ID\n\n\nRing ID:\n\n  cp     : compression\n  cp_hot : compression (priority)\n  dc     : decompression\n  dc_hot : decompression (priority)\n  xts_enc: XTS encryption\n  xts_dec: XTS decryption\n  gcm_enc: GCM encryption\n  gcm_dec: GCM decryption\n\n\nValue Description:\n\nPIndex     : ring producer index\nCIndex     : ring consumer index\nInputBytes : total input bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\nOutputBytes: total output bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\nSoftResets : number of soft resets executed\nPIndex	: ring producer index\nCIndex	: ring consumer index\nInputBytes	: total input bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\nOutputBytes	: total output bytes (not available for cp_hot, dc_hot, xts_enc/dec, gcm_enc/dec)\nSoftResets	: number of soft resets executed\n\n---------------------------------\n",
	RunE: hw_ringsonicShowCmdHandler,
}

func hw_ringsonicShowCmdHandler(cmd *cobra.Command, args []string) error {
	jsonFormat = true
	bodyBytes, err := restGet("telemetry/v1/metrics/accelhwringmetrics/")
	if err != nil {
		fmt.Println(err)
		return err
	}
	if bodyBytes == nil {
		fmt.Println("No accelhwringmetrics object(s) found")
	}
	return nil
}

//cmd - sonic
//rootCmd =
//longHelpStr = Metrics for Storage Offload DSC
//shortHelpStr = Metrics for Storage Offload DSC
var sonicShowCmd = &cobra.Command{
	Use:   "sonic",
	Short: "Metrics for Storage Offload DSC",
	Long:  "\n---------------------------------\n Metrics for Storage Offload DSC\n---------------------------------\n",
}

//cmd - sequencer_info
//rootCmd = sonic
//longHelpStr = Sequencer queues information:\n Key indices - LifId: logical interface ID, QId: queue ID\n\n\nValue Description:\n\n\nQStateAddr	: queue state memory address\nQGroup	: queue group\n           : 0 - compress/decompress\n           : 1 - compress/decompress status\n           : 2 - crypto\n           : 3 - crypto status\n\nCoreId	: CPU core ID (not available currently\n
//shortHelpStr = Sequencer queues information
var sequencer_infosonicShowCmd = &cobra.Command{
	Use:   "sequencer_info",
	Short: "Sequencer queues information",
	Long: "\n---------------------------------\n Sequencer queues information:\n Key indices - LifId: logical interface ID, QId: queue ID\n\n\nValue Description:\n\n\nQStateAddr	: queue state memory address\nQGroup	: queue group\n           : 0 - compress/decompress\n           : 1 - compress/decompress status\n           : 2 - crypto\n           : 3 - crypto status\n\nCoreId	: CPU core ID (not available currently\n\n---------------------------------\n",
	RunE: sequencer_infosonicShowCmdHandler,
}

func sequencer_infosonicShowCmdHandler(cmd *cobra.Command, args []string) error {
	jsonFormat = true
	bodyBytes, err := restGet("telemetry/v1/metrics/accelseqqueueinfometrics/")
	if err != nil {
		fmt.Println(err)
		return err
	}
	if bodyBytes == nil {
		fmt.Println("No accelseqqueueinfometrics object(s) found")
	}
	return nil
}

//cmd - sequencer_metrics
//rootCmd = sonic
//longHelpStr = Metrics for sequencer queues:\n Key indices - LifId: logical interface ID, QId: queue ID\n\n\nValue Description:\n\n\nInterruptsRaised	: CPU interrupts raised\nNextDBsRung	: chaining doorbells rung\nSeqDescsProcessed	: sequencer descriptors processed\nSeqDescsAborted	: sequencer descriptors aborted (due to reset)\nStatusPdmaXfers	: status descriptors copied\nHwDescXfers	: descriptors transferred to hardware\nHwBatchErrors	: hardware batch (length) errors\nHwOpErrors	: hardware operation errors\nAolUpdateReqs	: AOL list updates requested\nSglUpdateReqs	: scatter/gather list updates requested\nSglPdmaXfers	: payload DMA transfers executed\nSglPdmaErrors	: payload DMA errors encountered\nSglPadOnlyXfers	: pad-data-only DMA transfers executed\nSglPadOnlyErrors	: pad-data-only DMA errors encountered\nAltDescsTaken	: alternate (bypass-onfail) descriptors executed\nAltBufsTaken	: alternate buffers taken\nLenUpdateReqs	: length updates requested\nCpHeaderUpdates	: compression header updates requested\nSeqHwBytes	: bytes processed\n
//shortHelpStr = Metrics for sequencer queues
var sequencer_metricssonicShowCmd = &cobra.Command{
	Use:   "sequencer_metrics",
	Short: "Metrics for sequencer queues",
	Long: "\n---------------------------------\n Metrics for sequencer queues:\n Key indices - LifId: logical interface ID, QId: queue ID\n\n\nValue Description:\n\n\nInterruptsRaised	: CPU interrupts raised\nNextDBsRung	: chaining doorbells rung\nSeqDescsProcessed	: sequencer descriptors processed\nSeqDescsAborted	: sequencer descriptors aborted (due to reset)\nStatusPdmaXfers	: status descriptors copied\nHwDescXfers	: descriptors transferred to hardware\nHwBatchErrors	: hardware batch (length) errors\nHwOpErrors	: hardware operation errors\nAolUpdateReqs	: AOL list updates requested\nSglUpdateReqs	: scatter/gather list updates requested\nSglPdmaXfers	: payload DMA transfers executed\nSglPdmaErrors	: payload DMA errors encountered\nSglPadOnlyXfers	: pad-data-only DMA transfers executed\nSglPadOnlyErrors	: pad-data-only DMA errors encountered\nAltDescsTaken	: alternate (bypass-onfail) descriptors executed\nAltBufsTaken	: alternate buffers taken\nLenUpdateReqs	: length updates requested\nCpHeaderUpdates	: compression header updates requested\nSeqHwBytes	: bytes processed\n\n---------------------------------\n",
	RunE: sequencer_metricssonicShowCmdHandler,
}

func sequencer_metricssonicShowCmdHandler(cmd *cobra.Command, args []string) error {
	jsonFormat = true
	bodyBytes, err := restGet("telemetry/v1/metrics/accelseqqueuemetrics/")
	if err != nil {
		fmt.Println(err)
		return err
	}
	if bodyBytes == nil {
		fmt.Println("No accelseqqueuemetrics object(s) found")
	}
	return nil
}

func init() {

	sonicShowCmd.AddCommand(hw_ringsonicShowCmd)

	//cmd - sonic
	//rootCmd =
	//longHelpStr = Metrics for Storage Offload DSC
	//shortHelpStr = Metrics for Storage Offload DSC

	metricsShowCmd.AddCommand(sonicShowCmd)

	sonicShowCmd.AddCommand(sequencer_infosonicShowCmd)

	sonicShowCmd.AddCommand(sequencer_metricssonicShowCmd)

}
