// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cluster.proto

/*
	Package grpc is a generated protocol buffer package.

	It is generated from these files:
		cluster.proto

	It has these top-level messages:
		ClusterPreJoinReq
		ClusterPreJoinResp
		QuorumMember
		QuorumConfig
		ClusterJoinReq
		ClusterJoinResp
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Cluster PreJoin request
type ClusterPreJoinReq struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VirtualIp string `protobuf:"bytes,3,opt,name=virtual_ip,json=virtualIp,proto3" json:"virtual_ip,omitempty"`
}

func (m *ClusterPreJoinReq) Reset()                    { *m = ClusterPreJoinReq{} }
func (m *ClusterPreJoinReq) String() string            { return proto.CompactTextString(m) }
func (*ClusterPreJoinReq) ProtoMessage()               {}
func (*ClusterPreJoinReq) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{0} }

func (m *ClusterPreJoinReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterPreJoinReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ClusterPreJoinReq) GetVirtualIp() string {
	if m != nil {
		return m.VirtualIp
	}
	return ""
}

// Cluster PreJoin response
type ClusterPreJoinResp struct {
	SwVersion string `protobuf:"bytes,1,opt,name=sw_version,json=swVersion,proto3" json:"sw_version,omitempty"`
}

func (m *ClusterPreJoinResp) Reset()                    { *m = ClusterPreJoinResp{} }
func (m *ClusterPreJoinResp) String() string            { return proto.CompactTextString(m) }
func (*ClusterPreJoinResp) ProtoMessage()               {}
func (*ClusterPreJoinResp) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{1} }

func (m *ClusterPreJoinResp) GetSwVersion() string {
	if m != nil {
		return m.SwVersion
	}
	return ""
}

// Quorum member
type QuorumMember struct {
	Id         uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PeerUrls   []string `protobuf:"bytes,3,rep,name=peer_urls,json=peerUrls" json:"peer_urls,omitempty"`
	ClientUrls []string `protobuf:"bytes,4,rep,name=client_urls,json=clientUrls" json:"client_urls,omitempty"`
}

func (m *QuorumMember) Reset()                    { *m = QuorumMember{} }
func (m *QuorumMember) String() string            { return proto.CompactTextString(m) }
func (*QuorumMember) ProtoMessage()               {}
func (*QuorumMember) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{2} }

func (m *QuorumMember) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QuorumMember) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QuorumMember) GetPeerUrls() []string {
	if m != nil {
		return m.PeerUrls
	}
	return nil
}

func (m *QuorumMember) GetClientUrls() []string {
	if m != nil {
		return m.ClientUrls
	}
	return nil
}

// Quorum configuration
type QuorumConfig struct {
	Id            string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QuorumMembers []*QuorumMember `protobuf:"bytes,2,rep,name=quorum_members,json=quorumMembers" json:"quorum_members,omitempty"`
}

func (m *QuorumConfig) Reset()                    { *m = QuorumConfig{} }
func (m *QuorumConfig) String() string            { return proto.CompactTextString(m) }
func (*QuorumConfig) ProtoMessage()               {}
func (*QuorumConfig) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{3} }

func (m *QuorumConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QuorumConfig) GetQuorumMembers() []*QuorumMember {
	if m != nil {
		return m.QuorumMembers
	}
	return nil
}

// Cluster Join request
type ClusterJoinReq struct {
	Name         string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid         string        `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	VirtualIp    string        `protobuf:"bytes,3,opt,name=virtual_ip,json=virtualIp,proto3" json:"virtual_ip,omitempty"`
	QuorumConfig *QuorumConfig `protobuf:"bytes,4,opt,name=quorum_config,json=quorumConfig" json:"quorum_config,omitempty"`
	NTPServers   []string      `protobuf:"bytes,5,rep,name=NTPServers" json:"NTPServers,omitempty"`
}

func (m *ClusterJoinReq) Reset()                    { *m = ClusterJoinReq{} }
func (m *ClusterJoinReq) String() string            { return proto.CompactTextString(m) }
func (*ClusterJoinReq) ProtoMessage()               {}
func (*ClusterJoinReq) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{4} }

func (m *ClusterJoinReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterJoinReq) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ClusterJoinReq) GetVirtualIp() string {
	if m != nil {
		return m.VirtualIp
	}
	return ""
}

func (m *ClusterJoinReq) GetQuorumConfig() *QuorumConfig {
	if m != nil {
		return m.QuorumConfig
	}
	return nil
}

func (m *ClusterJoinReq) GetNTPServers() []string {
	if m != nil {
		return m.NTPServers
	}
	return nil
}

// Cluster Join response
type ClusterJoinResp struct {
}

func (m *ClusterJoinResp) Reset()                    { *m = ClusterJoinResp{} }
func (m *ClusterJoinResp) String() string            { return proto.CompactTextString(m) }
func (*ClusterJoinResp) ProtoMessage()               {}
func (*ClusterJoinResp) Descriptor() ([]byte, []int) { return fileDescriptorCluster, []int{5} }

func init() {
	proto.RegisterType((*ClusterPreJoinReq)(nil), "grpc.ClusterPreJoinReq")
	proto.RegisterType((*ClusterPreJoinResp)(nil), "grpc.ClusterPreJoinResp")
	proto.RegisterType((*QuorumMember)(nil), "grpc.QuorumMember")
	proto.RegisterType((*QuorumConfig)(nil), "grpc.QuorumConfig")
	proto.RegisterType((*ClusterJoinReq)(nil), "grpc.ClusterJoinReq")
	proto.RegisterType((*ClusterJoinResp)(nil), "grpc.ClusterJoinResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	PreJoin(ctx context.Context, in *ClusterPreJoinReq, opts ...grpc1.CallOption) (*ClusterPreJoinResp, error)
	Join(ctx context.Context, in *ClusterJoinReq, opts ...grpc1.CallOption) (*ClusterJoinResp, error)
}

type clusterClient struct {
	cc *grpc1.ClientConn
}

func NewClusterClient(cc *grpc1.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) PreJoin(ctx context.Context, in *ClusterPreJoinReq, opts ...grpc1.CallOption) (*ClusterPreJoinResp, error) {
	out := new(ClusterPreJoinResp)
	err := grpc1.Invoke(ctx, "/grpc.Cluster/PreJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Join(ctx context.Context, in *ClusterJoinReq, opts ...grpc1.CallOption) (*ClusterJoinResp, error) {
	out := new(ClusterJoinResp)
	err := grpc1.Invoke(ctx, "/grpc.Cluster/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	PreJoin(context.Context, *ClusterPreJoinReq) (*ClusterPreJoinResp, error)
	Join(context.Context, *ClusterJoinReq) (*ClusterJoinResp, error)
}

func RegisterClusterServer(s *grpc1.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_PreJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterPreJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PreJoin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Cluster/PreJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PreJoin(ctx, req.(*ClusterPreJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Join(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Cluster/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Join(ctx, req.(*ClusterJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "PreJoin",
			Handler:    _Cluster_PreJoin_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Cluster_Join_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "cluster.proto",
}

func (m *ClusterPreJoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterPreJoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.VirtualIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.VirtualIp)))
		i += copy(dAtA[i:], m.VirtualIp)
	}
	return i, nil
}

func (m *ClusterPreJoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterPreJoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SwVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.SwVersion)))
		i += copy(dAtA[i:], m.SwVersion)
	}
	return i, nil
}

func (m *QuorumMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PeerUrls) > 0 {
		for _, s := range m.PeerUrls {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ClientUrls) > 0 {
		for _, s := range m.ClientUrls {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *QuorumConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.QuorumMembers) > 0 {
		for _, msg := range m.QuorumMembers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClusterJoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterJoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if len(m.VirtualIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.VirtualIp)))
		i += copy(dAtA[i:], m.VirtualIp)
	}
	if m.QuorumConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.QuorumConfig.Size()))
		n1, err := m.QuorumConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.NTPServers) > 0 {
		for _, s := range m.NTPServers {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ClusterJoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterJoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Cluster(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Cluster(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCluster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ClusterPreJoinReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.VirtualIp)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *ClusterPreJoinResp) Size() (n int) {
	var l int
	_ = l
	l = len(m.SwVersion)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *QuorumMember) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCluster(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.PeerUrls) > 0 {
		for _, s := range m.PeerUrls {
			l = len(s)
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	if len(m.ClientUrls) > 0 {
		for _, s := range m.ClientUrls {
			l = len(s)
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	return n
}

func (m *QuorumConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.QuorumMembers) > 0 {
		for _, e := range m.QuorumMembers {
			l = e.Size()
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	return n
}

func (m *ClusterJoinReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.VirtualIp)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.QuorumConfig != nil {
		l = m.QuorumConfig.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.NTPServers) > 0 {
		for _, s := range m.NTPServers {
			l = len(s)
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	return n
}

func (m *ClusterJoinResp) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovCluster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCluster(x uint64) (n int) {
	return sovCluster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClusterPreJoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterPreJoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterPreJoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterPreJoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterPreJoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterPreJoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerUrls = append(m.PeerUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientUrls = append(m.ClientUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuorumMembers = append(m.QuorumMembers, &QuorumMember{})
			if err := m.QuorumMembers[len(m.QuorumMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterJoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterJoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterJoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VirtualIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuorumConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuorumConfig == nil {
				m.QuorumConfig = &QuorumConfig{}
			}
			if err := m.QuorumConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NTPServers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NTPServers = append(m.NTPServers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterJoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterJoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterJoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCluster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCluster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCluster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCluster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCluster   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cluster.proto", fileDescriptorCluster) }

var fileDescriptorCluster = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xbb, 0x6e, 0xdb, 0x30,
	0x14, 0x86, 0x4d, 0x49, 0xad, 0xab, 0xe3, 0x4b, 0x6b, 0xa2, 0x45, 0x89, 0x16, 0x55, 0x05, 0x4d,
	0x9e, 0x3c, 0xd8, 0x28, 0x8a, 0x2e, 0x1d, 0xea, 0xa9, 0x05, 0x5a, 0xb8, 0xea, 0x05, 0x48, 0x16,
	0xc1, 0x96, 0x19, 0x83, 0x80, 0x2e, 0x14, 0x29, 0xd9, 0x6b, 0x1e, 0x23, 0x8f, 0x91, 0xc7, 0xc8,
	0x98, 0x47, 0x08, 0x9c, 0x17, 0x09, 0x48, 0xca, 0x89, 0xec, 0x78, 0xcc, 0x46, 0x7d, 0xff, 0x39,
	0xfa, 0x7f, 0x1e, 0x1e, 0xe8, 0xc5, 0x49, 0x25, 0x4b, 0x2a, 0x46, 0x5c, 0xe4, 0x65, 0x8e, 0x9d,
	0x95, 0xe0, 0x71, 0x70, 0x0a, 0x83, 0xa9, 0xc1, 0x33, 0x41, 0x7f, 0xe4, 0x2c, 0x0b, 0x69, 0x81,
	0x31, 0x38, 0xd9, 0x3c, 0xa5, 0x04, 0xf9, 0x68, 0xe8, 0x86, 0xfa, 0xac, 0x58, 0x55, 0xb1, 0x25,
	0xb1, 0x0c, 0x53, 0x67, 0xfc, 0x01, 0x60, 0xcd, 0x44, 0x59, 0xcd, 0x93, 0x88, 0x71, 0x62, 0x6b,
	0xc5, 0xad, 0xc9, 0x77, 0x1e, 0x4c, 0x00, 0x1f, 0xfe, 0x5b, 0x72, 0xd5, 0x24, 0x37, 0xd1, 0x9a,
	0x0a, 0xc9, 0xf2, 0xac, 0xb6, 0x70, 0xe5, 0xe6, 0xbf, 0x01, 0x01, 0x87, 0xee, 0xef, 0x2a, 0x17,
	0x55, 0xfa, 0x93, 0xa6, 0x0b, 0x2a, 0x70, 0x1f, 0x2c, 0xb6, 0xd4, 0x65, 0x4e, 0x68, 0xb1, 0xe5,
	0x7d, 0x36, 0xab, 0x91, 0xed, 0x3d, 0xb8, 0x9c, 0x52, 0x11, 0x55, 0x22, 0x91, 0xc4, 0xf6, 0xed,
	0xa1, 0x1b, 0xbe, 0x50, 0xe0, 0x9f, 0x48, 0x24, 0xfe, 0x08, 0x9d, 0x38, 0x61, 0x34, 0x2b, 0x8d,
	0xec, 0x68, 0x19, 0x0c, 0x52, 0x05, 0xc1, 0xc9, 0xce, 0x71, 0x9a, 0x67, 0x67, 0x6c, 0xd5, 0x70,
	0x74, 0xb5, 0xe3, 0x17, 0xe8, 0x17, 0x5a, 0x8f, 0x52, 0x1d, 0x49, 0x12, 0xcb, 0xb7, 0x87, 0x9d,
	0x31, 0x1e, 0xa9, 0x09, 0x8e, 0x9a, 0x69, 0xc3, 0x5e, 0xd1, 0xf8, 0x92, 0xc1, 0x25, 0x82, 0x7e,
	0x3d, 0x82, 0xa7, 0x9d, 0x2d, 0xfe, 0x0c, 0xb5, 0x55, 0x14, 0xeb, 0xd4, 0xc4, 0xf1, 0xd1, 0x61,
	0x26, 0x73, 0x9f, 0xb0, 0x5b, 0x34, 0x6f, 0xe7, 0x01, 0xfc, 0xfa, 0x3b, 0xfb, 0x43, 0x85, 0x7a,
	0x01, 0xf2, 0xcc, 0x4c, 0xe3, 0x81, 0x04, 0x03, 0x78, 0xb9, 0x97, 0x58, 0xf2, 0xf1, 0x39, 0x82,
	0x76, 0xcd, 0xf0, 0x57, 0x68, 0xd7, 0x8f, 0x89, 0xdf, 0x1a, 0xaf, 0x47, 0xeb, 0xf3, 0x8e, 0x1c,
	0x17, 0x24, 0x0f, 0x5a, 0xf8, 0x13, 0x38, 0xba, 0xf9, 0xf5, 0x5e, 0xcd, 0xae, 0xf3, 0xcd, 0x11,
	0xaa, 0xda, 0xbe, 0xbd, 0xba, 0xda, 0x7a, 0xe8, 0x7a, 0xeb, 0xa1, 0x9b, 0xad, 0x87, 0x2e, 0x6e,
	0xbd, 0xd6, 0xe2, 0xb9, 0xde, 0xe2, 0xc9, 0x5d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x44, 0xb4, 0x6b,
	0x96, 0xd6, 0x02, 0x00, 0x00,
}
