// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/pensando/sw/api"
import api1 "github.com/pensando/sw/api"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// EventType contains the type of service instance event.
type ServiceInstanceEvent_EventType int32

const (
	ServiceInstanceEvent_Added   ServiceInstanceEvent_EventType = 0
	ServiceInstanceEvent_Deleted ServiceInstanceEvent_EventType = 1
)

var ServiceInstanceEvent_EventType_name = map[int32]string{
	0: "Added",
	1: "Deleted",
}
var ServiceInstanceEvent_EventType_value = map[string]int32{
	"Added":   0,
	"Deleted": 1,
}

func (x ServiceInstanceEvent_EventType) String() string {
	return proto.EnumName(ServiceInstanceEvent_EventType_name, int32(x))
}
func (ServiceInstanceEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorService, []int{5, 0}
}

// ServiceInstance contains the information about a single service
// instance.
type ServiceInstance struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Service contains the name of the service that this instance belongs to.
	Service string `protobuf:"bytes,3,opt,name=Service,proto3" json:"Service,omitempty"`
	// Image contains the image that the service instance is deployed
	// with. In case of rolling upgrades, this may be different between
	// instances.
	Image string `protobuf:"bytes,4,opt,name=Image,proto3" json:"Image,omitempty"`
	// Node contains the IP address or hostname where the service
	// instance is deployed.
	Node string `protobuf:"bytes,5,opt,name=Node,proto3" json:"Node,omitempty"`
	// URL contains the <IP Address:Port> of the service instance.
	URL string `protobuf:"bytes,6,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (m *ServiceInstance) Reset()                    { *m = ServiceInstance{} }
func (m *ServiceInstance) String() string            { return proto.CompactTextString(m) }
func (*ServiceInstance) ProtoMessage()               {}
func (*ServiceInstance) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

func (m *ServiceInstance) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ServiceInstance) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ServiceInstance) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *ServiceInstance) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

// ServiceInstanceReq is used to query a service instance.
type ServiceInstanceReq struct {
	// Service identifies the service name.
	Service string `protobuf:"bytes,1,opt,name=Service,proto3" json:"Service,omitempty"`
	// Instance identifies the instance name.
	Instance string `protobuf:"bytes,2,opt,name=Instance,proto3" json:"Instance,omitempty"`
}

func (m *ServiceInstanceReq) Reset()                    { *m = ServiceInstanceReq{} }
func (m *ServiceInstanceReq) String() string            { return proto.CompactTextString(m) }
func (*ServiceInstanceReq) ProtoMessage()               {}
func (*ServiceInstanceReq) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *ServiceInstanceReq) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ServiceInstanceReq) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

// Service contains information about a single cluster service.
type Service struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	// Instances contains the list of instances of this service.
	Instances []*ServiceInstance `protobuf:"bytes,3,rep,name=Instances" json:"Instances,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{2} }

func (m *Service) GetInstances() []*ServiceInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

// ServiceList contains list of Services.
type ServiceList struct {
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,2,opt,name=L,embedded=L" json:"meta,omitempty"`
	// Items contains list of Services.
	Items []*Service `protobuf:"bytes,3,rep,name=Items" json:"Items,omitempty"`
}

func (m *ServiceList) Reset()                    { *m = ServiceList{} }
func (m *ServiceList) String() string            { return proto.CompactTextString(m) }
func (*ServiceList) ProtoMessage()               {}
func (*ServiceList) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{3} }

func (m *ServiceList) GetItems() []*Service {
	if m != nil {
		return m.Items
	}
	return nil
}

// ServiceInstanceList contains list of Service instances.
type ServiceInstanceList struct {
	api.TypeMeta `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ListMeta `protobuf:"bytes,2,opt,name=L,embedded=L" json:"meta,omitempty"`
	// Items contains list of Service instances.
	Items []*ServiceInstance `protobuf:"bytes,3,rep,name=Items" json:"Items,omitempty"`
}

func (m *ServiceInstanceList) Reset()                    { *m = ServiceInstanceList{} }
func (m *ServiceInstanceList) String() string            { return proto.CompactTextString(m) }
func (*ServiceInstanceList) ProtoMessage()               {}
func (*ServiceInstanceList) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{4} }

func (m *ServiceInstanceList) GetItems() []*ServiceInstance {
	if m != nil {
		return m.Items
	}
	return nil
}

// ServiceInstanceEvent contains a single service instance event.
type ServiceInstanceEvent struct {
	Type ServiceInstanceEvent_EventType `protobuf:"varint,1,opt,name=type,proto3,enum=types.ServiceInstanceEvent_EventType" json:"type,omitempty"`
	// Instance is a single service instance.
	Instance *ServiceInstance `protobuf:"bytes,2,opt,name=Instance" json:"Instance,omitempty"`
}

func (m *ServiceInstanceEvent) Reset()                    { *m = ServiceInstanceEvent{} }
func (m *ServiceInstanceEvent) String() string            { return proto.CompactTextString(m) }
func (*ServiceInstanceEvent) ProtoMessage()               {}
func (*ServiceInstanceEvent) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{5} }

func (m *ServiceInstanceEvent) GetType() ServiceInstanceEvent_EventType {
	if m != nil {
		return m.Type
	}
	return ServiceInstanceEvent_Added
}

func (m *ServiceInstanceEvent) GetInstance() *ServiceInstance {
	if m != nil {
		return m.Instance
	}
	return nil
}

// ServiceInstanceEventList contains a list of service instance events.
type ServiceInstanceEventList struct {
	// Items contains a list of service instance events.
	Items []*ServiceInstanceEvent `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`
}

func (m *ServiceInstanceEventList) Reset()                    { *m = ServiceInstanceEventList{} }
func (m *ServiceInstanceEventList) String() string            { return proto.CompactTextString(m) }
func (*ServiceInstanceEventList) ProtoMessage()               {}
func (*ServiceInstanceEventList) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{6} }

func (m *ServiceInstanceEventList) GetItems() []*ServiceInstanceEvent {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceInstance)(nil), "types.ServiceInstance")
	proto.RegisterType((*ServiceInstanceReq)(nil), "types.ServiceInstanceReq")
	proto.RegisterType((*Service)(nil), "types.Service")
	proto.RegisterType((*ServiceList)(nil), "types.ServiceList")
	proto.RegisterType((*ServiceInstanceList)(nil), "types.ServiceInstanceList")
	proto.RegisterType((*ServiceInstanceEvent)(nil), "types.ServiceInstanceEvent")
	proto.RegisterType((*ServiceInstanceEventList)(nil), "types.ServiceInstanceEventList")
	proto.RegisterEnum("types.ServiceInstanceEvent_EventType", ServiceInstanceEvent_EventType_name, ServiceInstanceEvent_EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceAPI service

type ServiceAPIClient interface {
	// List all Services
	ListServices(ctx context.Context, in *api1.Empty, opts ...grpc.CallOption) (*ServiceList, error)
	// Get a Service
	GetService(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Service, error)
	// List all Service instances
	ListServiceInstances(ctx context.Context, in *api1.Empty, opts ...grpc.CallOption) (*ServiceInstanceList, error)
	// Get a Service instance
	GetServiceInstance(ctx context.Context, in *ServiceInstanceReq, opts ...grpc.CallOption) (*ServiceInstance, error)
	// Watch Service instances
	WatchServiceInstances(ctx context.Context, in *api1.Empty, opts ...grpc.CallOption) (ServiceAPI_WatchServiceInstancesClient, error)
}

type serviceAPIClient struct {
	cc *grpc.ClientConn
}

func NewServiceAPIClient(cc *grpc.ClientConn) ServiceAPIClient {
	return &serviceAPIClient{cc}
}

func (c *serviceAPIClient) ListServices(ctx context.Context, in *api1.Empty, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := grpc.Invoke(ctx, "/types.ServiceAPI/ListServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) GetService(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/types.ServiceAPI/GetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) ListServiceInstances(ctx context.Context, in *api1.Empty, opts ...grpc.CallOption) (*ServiceInstanceList, error) {
	out := new(ServiceInstanceList)
	err := grpc.Invoke(ctx, "/types.ServiceAPI/ListServiceInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) GetServiceInstance(ctx context.Context, in *ServiceInstanceReq, opts ...grpc.CallOption) (*ServiceInstance, error) {
	out := new(ServiceInstance)
	err := grpc.Invoke(ctx, "/types.ServiceAPI/GetServiceInstance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAPIClient) WatchServiceInstances(ctx context.Context, in *api1.Empty, opts ...grpc.CallOption) (ServiceAPI_WatchServiceInstancesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ServiceAPI_serviceDesc.Streams[0], c.cc, "/types.ServiceAPI/WatchServiceInstances", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceAPIWatchServiceInstancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceAPI_WatchServiceInstancesClient interface {
	Recv() (*ServiceInstanceEventList, error)
	grpc.ClientStream
}

type serviceAPIWatchServiceInstancesClient struct {
	grpc.ClientStream
}

func (x *serviceAPIWatchServiceInstancesClient) Recv() (*ServiceInstanceEventList, error) {
	m := new(ServiceInstanceEventList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ServiceAPI service

type ServiceAPIServer interface {
	// List all Services
	ListServices(context.Context, *api1.Empty) (*ServiceList, error)
	// Get a Service
	GetService(context.Context, *api.ObjectMeta) (*Service, error)
	// List all Service instances
	ListServiceInstances(context.Context, *api1.Empty) (*ServiceInstanceList, error)
	// Get a Service instance
	GetServiceInstance(context.Context, *ServiceInstanceReq) (*ServiceInstance, error)
	// Watch Service instances
	WatchServiceInstances(*api1.Empty, ServiceAPI_WatchServiceInstancesServer) error
}

func RegisterServiceAPIServer(s *grpc.Server, srv ServiceAPIServer) {
	s.RegisterService(&_ServiceAPI_serviceDesc, srv)
}

func _ServiceAPI_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.ServiceAPI/ListServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).ListServices(ctx, req.(*api1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.ServiceAPI/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).GetService(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_ListServiceInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).ListServiceInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.ServiceAPI/ListServiceInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).ListServiceInstances(ctx, req.(*api1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_GetServiceInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInstanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAPIServer).GetServiceInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.ServiceAPI/GetServiceInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAPIServer).GetServiceInstance(ctx, req.(*ServiceInstanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAPI_WatchServiceInstances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceAPIServer).WatchServiceInstances(m, &serviceAPIWatchServiceInstancesServer{stream})
}

type ServiceAPI_WatchServiceInstancesServer interface {
	Send(*ServiceInstanceEventList) error
	grpc.ServerStream
}

type serviceAPIWatchServiceInstancesServer struct {
	grpc.ServerStream
}

func (x *serviceAPIWatchServiceInstancesServer) Send(m *ServiceInstanceEventList) error {
	return x.ServerStream.SendMsg(m)
}

var _ServiceAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.ServiceAPI",
	HandlerType: (*ServiceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _ServiceAPI_ListServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ServiceAPI_GetService_Handler,
		},
		{
			MethodName: "ListServiceInstances",
			Handler:    _ServiceAPI_ListServiceInstances_Handler,
		},
		{
			MethodName: "GetServiceInstance",
			Handler:    _ServiceAPI_GetServiceInstance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchServiceInstances",
			Handler:       _ServiceAPI_WatchServiceInstances_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

func (m *ServiceInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInstance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintService(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintService(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Service) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.Node) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Node)))
		i += copy(dAtA[i:], m.Node)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	return i, nil
}

func (m *ServiceInstanceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInstanceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Instance) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Instance)))
		i += copy(dAtA[i:], m.Instance)
	}
	return i, nil
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintService(dAtA, i, uint64(m.TypeMeta.Size()))
	n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintService(dAtA, i, uint64(m.ObjectMeta.Size()))
	n4, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Instances) > 0 {
		for _, msg := range m.Instances {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintService(dAtA, i, uint64(m.TypeMeta.Size()))
	n5, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintService(dAtA, i, uint64(m.ListMeta.Size()))
	n6, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceInstanceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInstanceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintService(dAtA, i, uint64(m.TypeMeta.Size()))
	n7, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintService(dAtA, i, uint64(m.ListMeta.Size()))
	n8, err := m.ListMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ServiceInstanceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInstanceEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Type))
	}
	if m.Instance != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Instance.Size()))
		n9, err := m.Instance.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *ServiceInstanceEventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInstanceEventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Service(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Service(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServiceInstance) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovService(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovService(uint64(l))
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Node)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ServiceInstanceReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *Service) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovService(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovService(uint64(l))
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ServiceList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovService(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovService(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ServiceInstanceList) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovService(uint64(l))
	l = m.ListMeta.Size()
	n += 1 + l + sovService(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ServiceInstanceEvent) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovService(uint64(m.Type))
	}
	if m.Instance != nil {
		l = m.Instance.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ServiceInstanceEventList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInstanceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInstanceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInstanceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &ServiceInstance{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Service{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInstanceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInstanceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInstanceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ServiceInstance{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInstanceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInstanceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInstanceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ServiceInstanceEvent_EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instance == nil {
				m.Instance = &ServiceInstance{}
			}
			if err := m.Instance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInstanceEventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInstanceEventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInstanceEventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ServiceInstanceEvent{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xbd, 0x4d, 0xd3, 0x92, 0x09, 0x6d, 0xa3, 0x69, 0x41, 0xc6, 0x48, 0x49, 0x64, 0xa8,
	0xc8, 0x21, 0xd8, 0x21, 0x20, 0xa1, 0xde, 0x68, 0x45, 0x05, 0x41, 0x29, 0x41, 0x26, 0x88, 0xb3,
	0x63, 0x0f, 0xa9, 0x51, 0xfd, 0xd1, 0x7a, 0x5b, 0x94, 0x37, 0xe1, 0xc4, 0x03, 0x20, 0xc4, 0x63,
	0xa0, 0x1e, 0x7b, 0xe0, 0x1c, 0xa1, 0x70, 0xe3, 0x29, 0x90, 0xd7, 0x76, 0x3e, 0xac, 0x24, 0x48,
	0x1c, 0x7a, 0x89, 0x76, 0x67, 0xff, 0xff, 0x99, 0xdf, 0x8c, 0x26, 0x86, 0x8d, 0x90, 0xce, 0x2e,
	0x1c, 0x8b, 0xb4, 0xe0, 0xcc, 0xe7, 0x3e, 0xe6, 0xf9, 0x20, 0xa0, 0x50, 0xd9, 0xed, 0x3b, 0xfc,
	0xf8, 0xbc, 0xa7, 0x59, 0xbe, 0xab, 0x07, 0xe4, 0x85, 0xa6, 0x67, 0xfb, 0x7a, 0xf8, 0x49, 0x37,
	0x03, 0x47, 0x77, 0x89, 0x9b, 0xb1, 0x5a, 0x79, 0xb0, 0x44, 0x66, 0xf9, 0xae, 0xeb, 0x7b, 0x89,
	0xf0, 0xe1, 0x94, 0xb0, 0xef, 0xf7, 0x7d, 0x5d, 0x84, 0x7b, 0xe7, 0x1f, 0xc4, 0x4d, 0x5c, 0xc4,
	0x29, 0x96, 0xab, 0x3f, 0x19, 0x6c, 0xbd, 0x8d, 0xb9, 0x5a, 0x5e, 0xc8, 0x4d, 0xcf, 0x22, 0x6c,
	0x00, 0xeb, 0xca, 0xac, 0xca, 0x6a, 0xc5, 0xe6, 0x86, 0x66, 0x06, 0x8e, 0xd6, 0x1d, 0x04, 0x74,
	0x44, 0xdc, 0x3c, 0xd8, 0xbe, 0x1c, 0x56, 0xa4, 0xab, 0x61, 0x85, 0xfd, 0x19, 0x56, 0xd6, 0xeb,
	0x8e, 0x77, 0xe2, 0x78, 0x64, 0xb0, 0x2e, 0xee, 0x01, 0xeb, 0xc8, 0x2b, 0xc2, 0xb1, 0x25, 0x1c,
	0x9d, 0xde, 0x47, 0xb2, 0xb8, 0xf0, 0x28, 0x53, 0x9e, 0xcd, 0xa8, 0xa3, 0xba, 0xef, 0x3a, 0x9c,
	0xdc, 0x80, 0x0f, 0x0c, 0xd6, 0x41, 0x19, 0xd6, 0x93, 0xfa, 0x72, 0xae, 0xca, 0x6a, 0x05, 0x23,
	0xbd, 0xe2, 0x0e, 0xe4, 0x5b, 0xae, 0xd9, 0x27, 0x79, 0x55, 0xc4, 0xe3, 0x0b, 0x22, 0xac, 0xbe,
	0xf6, 0x6d, 0x92, 0xf3, 0x22, 0x28, 0xce, 0x58, 0x82, 0xdc, 0x3b, 0xa3, 0x2d, 0xaf, 0x89, 0x50,
	0x74, 0x54, 0x5f, 0x01, 0x66, 0xba, 0x32, 0xe8, 0x74, 0xba, 0x16, 0x9b, 0xad, 0xa5, 0xc0, 0x8d,
	0x54, 0x28, 0xfa, 0x28, 0x18, 0xe3, 0xbb, 0xfa, 0x8d, 0x8d, 0x6d, 0xd7, 0x3b, 0x9a, 0x27, 0x50,
	0x48, 0x21, 0x42, 0x39, 0x57, 0xcd, 0xd5, 0x8a, 0xcd, 0xdb, 0x9a, 0xd8, 0x1a, 0x2d, 0xdb, 0xdc,
	0x44, 0xa8, 0x7e, 0x61, 0x50, 0x4c, 0x9e, 0xdb, 0x4e, 0xc8, 0xff, 0x03, 0xf9, 0x29, 0xb0, 0x76,
	0x82, 0x1c, 0x3b, 0xa2, 0x3c, 0xff, 0x06, 0x6e, 0xe3, 0x7d, 0xc8, 0xb7, 0x38, 0xb9, 0x29, 0xec,
	0xe6, 0x2c, 0xac, 0x11, 0x3f, 0xaa, 0xdf, 0x19, 0x6c, 0x67, 0xf8, 0xaf, 0x1b, 0xb4, 0x3e, 0x0b,
	0xba, 0x68, 0xaa, 0x09, 0xf0, 0x57, 0x06, 0x3b, 0x99, 0xa7, 0xc3, 0x0b, 0xf2, 0x38, 0xee, 0xc1,
	0x6a, 0x64, 0x14, 0xd0, 0x9b, 0xcd, 0xdd, 0xf9, 0x59, 0x84, 0x54, 0x13, 0xbf, 0x51, 0x43, 0x86,
	0xb0, 0x60, 0x33, 0xb3, 0x70, 0x8b, 0x21, 0x26, 0x8b, 0x78, 0x0f, 0x0a, 0xe3, 0x34, 0x58, 0x80,
	0xfc, 0xbe, 0x6d, 0x93, 0x5d, 0x92, 0xb0, 0x08, 0xeb, 0xcf, 0xe9, 0x84, 0x38, 0xd9, 0x25, 0xa6,
	0x1e, 0x81, 0x3c, 0x0f, 0x40, 0x4c, 0xf8, 0x51, 0xda, 0x36, 0x13, 0x6d, 0xdf, 0x5d, 0x02, 0x9c,
	0xf4, 0xde, 0xfc, 0xb1, 0x02, 0x90, 0xbc, 0xef, 0xbf, 0x69, 0x61, 0x03, 0x6e, 0x46, 0x99, 0x92,
	0x48, 0x88, 0x20, 0xc6, 0x7e, 0x18, 0xcd, 0x55, 0xc1, 0xd9, 0x74, 0x91, 0x4e, 0x95, 0x50, 0x07,
	0x78, 0x41, 0xa9, 0x01, 0xb3, 0x7f, 0x01, 0x25, 0xb3, 0x23, 0xaa, 0x84, 0xcf, 0x60, 0x67, 0xaa,
	0xc4, 0x78, 0xaf, 0x67, 0x4a, 0x29, 0xf3, 0xc9, 0x93, 0x92, 0x2d, 0xc0, 0x49, 0xc9, 0xf1, 0x57,
	0xed, 0xce, 0x82, 0xf9, 0xd2, 0xa9, 0xb2, 0x60, 0xf4, 0xaa, 0x84, 0x2f, 0xe1, 0xd6, 0x7b, 0x93,
	0x5b, 0xc7, 0x4b, 0x69, 0x2a, 0x4b, 0xe6, 0x18, 0x23, 0x35, 0xd8, 0x41, 0xe9, 0x72, 0x54, 0x66,
	0x57, 0xa3, 0x32, 0xfb, 0x35, 0x2a, 0xb3, 0xcf, 0xbf, 0xcb, 0x52, 0x6f, 0x4d, 0x7c, 0x81, 0x1f,
	0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x00, 0xa6, 0x3d, 0x53, 0x18, 0x06, 0x00, 0x00,
}
