diff -uprN a/Makefile.target b/Makefile.target
--- a/Makefile.target	2017-04-20 07:57:00.000000000 -0700
+++ b/Makefile.target	2017-09-24 01:50:28.035004000 -0700
@@ -205,7 +205,7 @@ COMMON_LDADDS = $(trace-obj-y) ../libqem
 
 # build either PROG or PROGW
 $(QEMU_PROG_BUILD): $(all-obj-y) $(COMMON_LDADDS)
-	$(call LINK, $(filter-out %.mak, $^))
+	$(call LINK, $(filter-out %.mak, $^ $(XLDADDS)))
 ifdef CONFIG_DARWIN
 	$(call quiet-command,Rez -append $(SRC_PATH)/pc-bios/qemu.rsrc -o $@,"REZ","$(TARGET_DIR)$@")
 	$(call quiet-command,SetFile -a C $@,"SETFILE","$(TARGET_DIR)$@")
diff -uprN a/hw/pci-bridge/Makefile.objs b/hw/pci-bridge/Makefile.objs
--- a/hw/pci-bridge/Makefile.objs	2017-04-20 07:57:00.000000000 -0700
+++ b/hw/pci-bridge/Makefile.objs	2017-10-01 15:30:51.927498000 -0700
@@ -4,5 +4,14 @@ common-obj-$(CONFIG_PXB) += pci_expander
 common-obj-$(CONFIG_XIO3130) += xio3130_upstream.o xio3130_downstream.o
 common-obj-$(CONFIG_IOH3420) += ioh3420.o
 common-obj-$(CONFIG_I82801B11) += i82801b11.o
+common-obj-$(CONFIG_SIMBRIDGE) += simbridge.o
+ifdef CONFIG_SIMBRIDGE
+# expect PEN_TOP absolute path to top of sw build tree
+PEN_TOP ?= path-to-pensando-topdir
+PEN_SIM = $(PEN_TOP)/src/sim
+SIMLIB = $(PEN_SIM)/libsimlib
+QEMU_CFLAGS += -I$(SIMLIB)/include
+XLDADDS += -L $(PEN_TOP)/gen/x86_64/lib -lsimlib
+endif
 # NewWorld PowerMac
 common-obj-$(CONFIG_DEC_PCI) += dec.o
diff -uprN a/default-configs/x86_64-softmmu.mak b/default-configs/x86_64-softmmu.mak
--- a/default-configs/x86_64-softmmu.mak	2017-04-20 07:57:00.000000000 -0700
+++ b/default-configs/x86_64-softmmu.mak	2017-09-24 01:50:28.009004000 -0700
@@ -60,3 +60,4 @@ CONFIG_SMBIOS=y
 CONFIG_HYPERV_TESTDEV=$(CONFIG_KVM)
 CONFIG_PXB=y
 CONFIG_ACPI_VMGENID=y
+CONFIG_SIMBRIDGE=y
diff -uprN a/hw/pci-bridge/simbridge.c b/hw/pci-bridge/simbridge.c
--- a/hw/pci-bridge/simbridge.c	1969-12-31 16:00:00.000000000 -0800
+++ b/hw/pci-bridge/simbridge.c	2017-10-06 10:16:39.816848000 -0700
@@ -0,0 +1,902 @@
+/*
+ * simbridge.c
+ */
+
+#include "qemu/osdep.h"
+#include "qemu-common.h"
+#include "qemu/config-file.h"
+#include "qemu/main-loop.h"
+#include "monitor/qdev.h"
+#include "qapi/qmp/qbool.h"
+#include "qapi/qmp/qint.h"
+#include "qapi/qmp/qstring.h"
+#include "qapi/error.h"
+#include "hw/pci/pci_ids.h"
+#include "hw/pci/msi.h"
+#include "hw/pci/pcie.h"
+#include "hw/pci/pcie_port.h"
+#include "simclient.h"
+
+#define PCI_VENDOR_ID_PENSANDO                  0x1dd8
+#define PCI_DEVICE_ID_PENSANDO_CAPRI            0x0001
+
+#define XIO3130_MSI_OFFSET              0x70
+#define XIO3130_MSI_SUPPORTED_FLAGS     PCI_MSI_FLAGS_64BIT
+#define XIO3130_MSI_NR_VECTOR           1
+#define XIO3130_SSVID_OFFSET            0x80
+#define XIO3130_SSVID_SVID              0
+#define XIO3130_SSVID_SSID              0
+#define XIO3130_EXP_OFFSET              0x90
+#define XIO3130_AER_OFFSET              0x100
+
+typedef struct SimBridge {
+    PCIEPort parent;
+
+    int simfd;
+    int chassis;
+    int port;
+} SimBridge;
+
+typedef struct SimBridgeDn {
+    PCIESlot parent;
+
+    SimBridge *sb;
+    int simbdf;
+} SimBridgeDn;
+
+struct SimDevice;
+typedef struct SimDevice SimDevice;
+
+typedef struct SimBar {
+    int baridx;
+    SimDevice *sd;
+} SimBar;
+
+typedef struct SimDevice {
+    PCIDevice parent;
+
+    SimBridge *sb;
+    u_int16_t simbdf;
+    MemoryRegion bar[6];
+    SimBar simbar[6];
+    QTAILQ_ENTRY(SimDevice) list;
+} SimDevice;
+
+static QTAILQ_HEAD(, SimDevice) simdevices;
+static QemuMutex simdevices_lock;
+
+#define TYPE_SIM_BRIDGE "simbridge"
+#define SIM_BRIDGE(obj) \
+    OBJECT_CHECK(SimBridge, (obj), TYPE_SIM_BRIDGE)
+
+#define TYPE_SIM_BRIDGEDN "simbridgedn"
+#define SIM_BRIDGEDN(obj) \
+    OBJECT_CHECK(SimBridgeDn, (obj), TYPE_SIM_BRIDGEDN)
+
+#define TYPE_SIM_DEVICE "simdevice"
+#define SIM_DEVICE(obj) \
+    OBJECT_CHECK(SimDevice, (obj), TYPE_SIM_DEVICE)
+
+static void
+dbgprintf(const char *fmt, ...) __attribute__((format (printf, 1, 2)));
+static void
+dbgprintf(const char *fmt, ...)
+{
+    static int dbgprintf_init;
+    static int dbgprintf_enabled;
+    va_list arg;
+
+    if (!dbgprintf_init) {
+        dbgprintf_init = 1;
+        if (getenv("SIMBRIDGE_DEBUG") != NULL) {
+            dbgprintf_enabled = 1;
+        }
+    }
+
+    if (dbgprintf_enabled) {
+        va_start(arg, fmt);
+        vprintf(fmt, arg);
+        va_end(arg);
+    }
+}
+
+static inline int
+bdf_make(const int b, const int d, const int f)
+{
+    return ((b & 0xff) << 8) | ((d & 0x1f) << 3) | (f & 0x7);
+}
+
+/*
+ * ================================================================
+ * simdevices
+ * ----------------------------------------------------------------
+ */
+
+static void
+simdevices_add(SimDevice *sd)
+{
+    qemu_mutex_lock(&simdevices_lock);
+    QTAILQ_INSERT_TAIL(&simdevices, sd, list);
+    qemu_mutex_unlock(&simdevices_lock);
+}
+
+#if 0
+static void
+simdevices_remove(SimDevice *sd)
+{
+    qemu_mutex_lock(&simdevices_lock);
+    QTAILQ_REMOVE(&simdevices, sd, list);
+    qemu_mutex_unlock(&simdevices_lock);
+}
+#endif
+
+static SimDevice *
+simdevices_find_bdf(u_int16_t bdf)
+{
+    SimDevice *sd = NULL;
+
+    qemu_mutex_lock(&simdevices_lock);
+    QTAILQ_FOREACH(sd, &simdevices, list) {
+        if (sd->simbdf == bdf) break;
+    }
+    qemu_mutex_unlock(&simdevices_lock);
+    return sd;
+}
+
+/*
+ * ================================================================
+ * simdevice
+ * ----------------------------------------------------------------
+ */
+
+static uint32_t simdevice_cfgrd(PCIDevice *pd, uint32_t addr, int len)
+{
+    SimDevice *sd = (SimDevice *)pd;
+    u_int64_t val;
+
+    if (simc_cfgrd(sd->simbdf, addr, len, &val) == 0) {
+        dbgprintf("simdevice_cfgrd(0x%04x, 0x%x, %d) = 0x%"PRIx64"\n",
+                  sd->simbdf, addr, len, val);
+        return val;
+    }
+    dbgprintf("simdevice_cfgrd(0x%04x, 0x%x, %d) failed\n",
+              sd->simbdf, addr, len);
+    return 0xffffffff;
+}
+
+static void simdevice_cfgwr(PCIDevice *pd,
+                            uint32_t addr, u_int32_t data, int len)
+{
+    SimDevice *sd = (SimDevice *)pd;
+    u_int64_t val = data;
+
+    /*
+     * Send this write down to pci layer to update
+     * bar addresses when they come.
+     */
+    pci_default_write_config(pd, addr, data, len);
+
+    if (simc_cfgwr(sd->simbdf, addr, len, val) < 0) {
+        dbgprintf("simdevice_cfgwr(0x%04x, 0x%x, %d) = 0x%"PRIx64" failed\n",
+                  sd->simbdf, addr, len, val);
+    } else {
+        dbgprintf("simdevice_cfgwr(0x%04x, 0x%x, %d) = 0x%"PRIx64"\n",
+                  sd->simbdf, addr, len, val);
+    }
+}
+
+static uint64_t
+simdevice_memrd(void *opaque, hwaddr addr, unsigned size)
+{
+    SimBar *simbar = opaque;
+    int bdf = simbar->sd->simbdf;
+    int baridx = simbar->baridx;
+    u_int64_t val;
+
+    if (simc_memrd(bdf, baridx, addr, size, &val) < 0) {
+        dbgprintf("simdevice_memrd(0x%"PRIx64", 0x%x) failed\n", 
+                  addr, size);
+        val = 0xffffffffffffffffULL;
+    } else {
+        dbgprintf("simdevice_memrd(0x%"PRIx64", 0x%x) = 0x%"PRIx64"\n",
+                  addr, size, val);
+    }
+    return val;
+}
+
+static void
+simdevice_memwr(void *opaque, hwaddr addr, uint64_t val, unsigned size)
+{
+    SimBar *simbar = opaque;
+    int bdf = simbar->sd->simbdf;
+    int baridx = simbar->baridx;
+ 
+    if (simc_memwr(bdf, baridx, addr, size, val) < 0) {
+        dbgprintf("simdevice_memwr(0x%"PRIx64", 0x%x, 0x%"PRIx64") failed\n",
+                  addr, size, val);
+    } else {
+        dbgprintf("simdevice_memwr(0x%"PRIx64", 0x%x, 0x%"PRIx64")\n",
+                  addr, size, val);
+    }
+}
+
+static uint64_t
+simdevice_iord(void *opaque, hwaddr addr, unsigned size)
+{
+    SimBar *simbar = opaque;
+    int bdf = simbar->sd->simbdf;
+    int baridx = simbar->baridx;
+    u_int64_t val;
+
+    if (simc_iord(bdf, baridx, addr, size, &val) < 0) {
+        dbgprintf("simdevice_iord(0x%"PRIx64", 0x%x) failed\n", addr, size);
+        val = 0xffffffff;
+    } else {
+        dbgprintf("simdevice_iord(0x%"PRIx64", 0x%x)\n", addr, size);
+    }
+    return val;
+}
+
+static void
+simdevice_iowr(void *opaque, hwaddr addr, uint64_t val, unsigned size)
+{
+    SimBar *simbar = opaque;
+    int bdf = simbar->sd->simbdf;
+    int baridx = simbar->baridx;
+
+    if (simc_iowr(bdf, baridx, addr, size, val) < 0) {
+        dbgprintf("simdevice_iowr(0x%"PRIx64", 0x%x, 0x%"PRIx64") failed\n",
+                  addr, size, val);
+    } else {
+        dbgprintf("simdevice_iowr(0x%"PRIx64", 0x%x, 0x%"PRIx64")\n",
+                  addr, size, val);
+    }
+}
+
+static const MemoryRegionOps mem_ops = {
+    .read  = simdevice_memrd,
+    .write = simdevice_memwr,
+    .endianness = DEVICE_LITTLE_ENDIAN,
+    .impl = {
+        .min_access_size = 1,
+        .max_access_size = 8,
+    },
+};
+
+static const MemoryRegionOps io_ops = {
+    .read  = simdevice_iord,
+    .write = simdevice_iowr,
+    .endianness = DEVICE_LITTLE_ENDIAN,
+    .impl = {
+        .min_access_size = 1,
+        .max_access_size = 4,
+    },
+};
+
+static int simdevice_register_bar(SimDevice *sd, int baridx)
+{
+    PCIDevice *pd = PCI_DEVICE(sd);
+    const u_int16_t addr = 0x10 + (baridx * 4);
+    const u_int8_t size = 4;
+    const u_int16_t bdf = sd->simbdf;
+    u_int64_t v0, v1;
+    u_int32_t regtype;
+    u_int64_t regsize;
+    uint32_t v;
+    int n;
+
+    v0 = v1 = 0;
+    simc_cfgwr(bdf, addr, size, 0xffffffff);
+    if (simc_cfgrd(bdf, addr, size, &v0) < 0) {
+        dbgprintf("simc_cfgrd addr 0x%x size %d failed\n", addr, size);
+        return 0;
+    }
+    simc_cfgwr(bdf, addr, size, 0);
+
+    /* no bits set?  no bar here. */
+    if (v0 == 0) {
+        return 0;
+    }
+
+    n = 0;
+    if ((v0 & 0x1) == 0) {
+        /* Memory space */
+        if ((v0 & 0x7) == 0x0) {
+            /* 32-bit */
+            regtype = PCI_BASE_ADDRESS_SPACE_MEMORY;
+            v = v0;
+            regsize = ~(v & ~0xf) + 1;
+            n = 1;
+        } else if ((v0 & 0x7) == 0x4 && baridx < 5) {
+            /* 64-bit */
+            regtype = PCI_BASE_ADDRESS_MEM_TYPE_64;
+            simc_cfgwr(bdf, addr + 4, size, 0xffffffff);
+            simc_cfgrd(bdf, addr + 4, size, &v1);
+            simc_cfgwr(bdf, addr + 4, size, 0);
+            regsize = ~((v1 << 32) | (v0 & ~0xf)) + 1;
+            n = 2;
+        } else {
+            dbgprintf("register_bar: bad mem bar type: "
+                      "baridx %d v0 0x%"PRIx64"\n",
+                      baridx, v0);
+        }
+    } else {
+        /* I/O space */
+        regtype = PCI_BASE_ADDRESS_SPACE_IO;
+        v = v0;
+        regsize = ~(v & ~0x3) + 1;
+        n = 1;
+    }
+
+    if (n) {
+        SimBar *simbar = &sd->simbar[baridx];
+
+        simbar->sd = sd;
+        simbar->baridx = baridx;
+
+        if (regtype == PCI_BASE_ADDRESS_SPACE_IO) {
+            memory_region_init_io(&sd->bar[baridx],
+                                  OBJECT(sd), &io_ops,
+                                  simbar,
+                                  "simdevice-io", regsize);
+        } else {
+            memory_region_init_io(&sd->bar[baridx],
+                                  OBJECT(sd), &mem_ops,
+                                  simbar,
+                                  "simdevice-mem", regsize);
+        }
+        pci_register_bar(pd, baridx, regtype, &sd->bar[baridx]);
+
+        dbgprintf("register_bar: baridx %d n %d\n"
+                  "    v0 0x%"PRIx64" v1 0x%"PRIx64"\n"
+                  "    regsize 0x%"PRIx64" regtype %d\n",
+                  baridx, n,
+                  v0, v1,
+                  regsize, regtype);
+    }
+    return n;
+}
+
+static void simdevice_register_bars(SimDevice *sd)
+{
+    int i;
+
+    for (i = 0; i < 6; i++) {
+        const int nslots = simdevice_register_bar(sd, i);
+        /* skip a slot if this one consumed 2 */
+        if (nslots == 2) {
+            i++;
+        }
+    }
+}
+
+static void simdevice_realize(PCIDevice *pd, Error **errp)
+{
+    SimDevice *sd = (SimDevice *)pd;
+
+    simdevice_register_bars(sd);
+}
+
+static void simdevice_class_init(ObjectClass *klass, void *data)
+{
+    PCIDeviceClass *pdc = PCI_DEVICE_CLASS(klass);
+
+    pdc->is_express = 1;
+    pdc->config_read  = simdevice_cfgrd;
+    pdc->config_write = simdevice_cfgwr;
+    pdc->realize = simdevice_realize;
+}
+
+static SimDevice *simbridge_register_dev(SimBridgeDn *sbdn, int simbdf)
+{
+    Object *obj;
+    DeviceState *dev;
+    BusState *bus;
+    SimDevice *sd;
+
+    dbgprintf("register_dev %04x\n", simbdf);
+
+    obj = object_new(TYPE_SIM_DEVICE);
+    sd = SIM_DEVICE(obj);
+    dev = DEVICE(obj);
+
+    sd->sb = sbdn->sb;
+    sd->simbdf = simbdf;
+
+    qdev_set_id(dev, "simdevice");
+    bus = QLIST_FIRST(&(DEVICE(sbdn)->child_bus));
+    qdev_set_parent_bus(dev, bus);
+    object_property_set_bool(obj, true, "realized", NULL);
+
+    simdevices_add(sd);
+
+    return sd;
+}
+
+static SimBridgeDn *simbridge_register_bridge(SimBridge *sb, int simbdf)
+{
+    Object *obj;
+    DeviceState *dev;
+    BusState *bus;
+    SimBridgeDn *sbdn;
+
+    dbgprintf("register_bridge %04x\n", simbdf);
+
+    obj = object_new(TYPE_SIM_BRIDGEDN);
+    sbdn = SIM_BRIDGEDN(obj);
+    dev = DEVICE(obj);
+
+    sbdn->sb = sb;
+    sbdn->simbdf = simbdf;
+
+    qdev_set_id(dev, "simbridgedn");
+    qdev_prop_set_uint8(dev, "chassis", sb->chassis);
+    qdev_prop_set_uint8(dev, "port", sb->port++);
+    bus = QLIST_FIRST(&(DEVICE(sb)->child_bus));
+    qdev_set_parent_bus(dev, bus);
+    object_property_set_bool(obj, true, "realized", NULL);
+    return sbdn;
+}
+
+static int simbridge_scan_devices(SimBridge *sb, SimBridgeDn *sbdn, int bus)
+{
+    int dev, bdf;
+    u_int64_t val;
+
+    for (dev = 0; dev < 32; dev++) {
+        bdf = bdf_make(bus, dev, 0);
+
+        /* read vendor/device id to check if a device exists at bdf */
+        if (simc_cfgrd(bdf, 0, 4, &val) != 0) {
+            continue;
+        }
+        if (val == 0 || val == 0xffffffff) {
+            continue;
+        }
+
+        /* read header type register */
+        if (simc_cfgrd(bdf, 0xe, 1, &val) != 0) {
+            continue;
+        }
+        /* bridge header type? */
+        if (val == 1) {
+            SimBridgeDn *sbdn_child;
+
+            sbdn_child = simbridge_register_bridge(sb, bdf);
+
+            /* read secondary bus number */
+            if (simc_cfgrd(bdf, 0x19, 1, &val) == 0) {
+                int secbus = val;
+                if (secbus != 0) { /* avoid loops if not set */
+                    /* scan secondary bus */
+                    simbridge_scan_devices(sb, sbdn_child, secbus);
+                }
+            }
+        } else {
+            /* add endpoint */
+            assert(sbdn != NULL);
+            simbridge_register_dev(sbdn, bdf);
+        }
+    }
+    return 0;
+}
+
+/*
+ * ================================================================
+ * simbridgedn
+ * ----------------------------------------------------------------
+ */
+
+static uint32_t simbridgedn_cfgrd(PCIDevice *pd, uint32_t addr, int len)
+{
+    SimBridgeDn *sbdn = (SimBridgeDn *)pd;
+    u_int64_t val;
+
+    if (simc_cfgrd(sbdn->simbdf, addr, len, &val) == 0) {
+        dbgprintf("simbridgedn_cfgrd(0x%04x, 0x%x, %d) = 0x%"PRIx64"\n",
+                  sbdn->simbdf, addr, len, val);
+        return val;
+    }
+    dbgprintf("simbridgedn_cfgrd(0x%04x, 0x%x, %d) failed\n",
+              sbdn->simbdf, addr, len);
+    return 0xffffffff;
+}
+
+static void simbridgedn_cfgwr(PCIDevice *pd,
+                              uint32_t addr, uint32_t data, int len)
+{
+    SimBridgeDn *sbdn = (SimBridgeDn *)pd;
+    u_int64_t val = data;
+
+    dbgprintf("simbridgedn_cfgwr(0x%04x, 0x%x, %d) = 0x%"PRIx64"\n",
+              sbdn->simbdf, addr, len, val);
+    simc_cfgwr(sbdn->simbdf, addr, len, val);
+
+    /* is this necessary now that we are simulating this? */
+    pci_bridge_write_config(pd, addr, data, len);
+    pcie_cap_flr_write_config(pd, addr, data, len);
+    pcie_cap_slot_write_config(pd, addr, data, len);
+    pcie_aer_write_config(pd, addr, data, len);
+}
+
+static int simbridgedn_initfn(PCIDevice *d)
+{
+    PCIEPort *p = PCIE_PORT(d);
+    PCIESlot *s = PCIE_SLOT(d);
+    int rc;
+    Error *err = NULL;
+
+    pci_bridge_initfn(d, TYPE_PCIE_BUS);
+    pcie_port_init_reg(d);
+
+    rc = pcie_cap_init(d, 0x40, PCI_EXP_TYPE_DOWNSTREAM, p->port);
+    if (rc < 0) {
+        goto err_msi;
+    }
+    pcie_cap_flr_init(d);
+    pcie_cap_deverr_init(d);
+    pcie_cap_slot_init(d, s->slot);
+    pcie_cap_arifwd_init(d);
+
+    pcie_chassis_create(s->chassis);
+    rc = pcie_chassis_add_slot(s);
+    if (rc < 0) {
+        goto err_pcie_cap;
+    }
+
+    rc = pcie_aer_init(d, PCI_ERR_VER, 0x100, PCI_ERR_SIZEOF, &err);
+    if (rc < 0) {
+        error_report_err(err);
+        goto err;
+    }
+
+    return 0;
+
+err:
+    pcie_chassis_del_slot(s);
+err_pcie_cap:
+    pcie_cap_exit(d);
+err_msi:
+    pci_bridge_exitfn(d);
+    return rc;
+}
+
+static void simbridgedn_exitfn(PCIDevice *d)
+{
+    PCIESlot *s = PCIE_SLOT(d);
+    SimBridge *sb = SIM_BRIDGE(d);
+
+    pcie_aer_exit(d);
+    pcie_chassis_del_slot(s);
+    pcie_cap_exit(d);
+    pci_bridge_exitfn(d);
+    if (sb->simfd >= 0) simc_close();
+}
+
+static void simbridgedn_class_init(ObjectClass *oc, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(oc);
+    PCIDeviceClass *pdc = PCI_DEVICE_CLASS(oc);
+
+    pdc->is_express = 1;
+    pdc->is_bridge = 1;
+    pdc->config_read  = simbridgedn_cfgrd;
+    pdc->config_write = simbridgedn_cfgwr;
+    pdc->init = simbridgedn_initfn;
+    pdc->exit = simbridgedn_exitfn;
+    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
+    dc->desc = "Pensando Downstream Port Simbridge";
+}
+
+/*
+ * ================================================================
+ * message handling
+ * ----------------------------------------------------------------
+ */
+
+static int
+process_memrd(int fd, simmsg_t *m)
+{
+    const u_int16_t bdf = m->u.read.bdf;
+    const u_int64_t addr = m->u.read.addr;
+    const u_int32_t size = m->u.read.size;
+    SimDevice *sd = simdevices_find_bdf(bdf);
+    PCIDevice *pd;
+    char buf[4096];
+
+    dbgprintf("memrd: bdf %04x addr 0x%"PRIx64" size 0x%x\n",
+              bdf, addr, size);
+
+    if (sd == NULL) {
+        dbgprintf("process_memrd: bdf %04x not found\n", bdf);
+        simc_readres(fd, bdf, size, NULL, ENODEV);
+        return -1;
+    }
+    if (size > sizeof(buf)) {
+        dbgprintf("process_memrd: read size too large: 0x%x\n", size);
+        simc_readres(fd, bdf, size, NULL, E2BIG);
+        return -1;
+    }
+
+    pd = PCI_DEVICE(sd);
+    if (pci_dma_read(pd, addr, buf, size) < 0) {
+        dbgprintf("process_memrd: pci_dma_read 0x%"PRIx64" 0x%x failed\n",
+                  addr, size);
+        simc_readres(fd, bdf, size, NULL, EFAULT);
+        return -1;
+    }
+    dbgprintf("    %02x %02x %02x %02x %02x %02x %02x %02x\n",
+              buf[0], buf[1], buf[2], buf[3],
+              buf[4], buf[5], buf[6], buf[7]);
+    return simc_readres(fd, bdf, size, buf, 0);
+}
+
+static void
+process_memwr(int fd, simmsg_t *m)
+{
+    const u_int16_t bdf = m->u.write.bdf;
+    const u_int64_t addr = m->u.write.addr;
+    const u_int32_t size = m->u.write.size;
+    SimDevice *sd = simdevices_find_bdf(bdf);
+    PCIDevice *pd;
+    char buf[4096];
+
+    dbgprintf("memwr: bdf %04x addr 0x%"PRIx64" size 0x%x\n",
+              bdf, addr, size);
+
+    if (sd == NULL) {
+        dbgprintf("process_memwr: bdf %04x not found\n", bdf);
+        simc_discard(size);
+        return;
+    }
+    if (size > sizeof(buf)) {
+        dbgprintf("process_memwr: write size too large: 0x%x\n", size);
+        simc_discard(size);
+        return;
+    }
+
+    pd = PCI_DEVICE(sd);
+    simc_readn(buf, size);
+    dbgprintf("    %02x %02x %02x %02x %02x %02x %02x %02x\n",
+              buf[0], buf[1], buf[2], buf[3],
+              buf[4], buf[5], buf[6], buf[7]);
+    pci_dma_write(pd, addr, buf, size);
+}
+
+static void
+msg_handler(int fd, simmsg_t *m)
+{
+    switch (m->msgtype) {
+    case SIMMSG_MEMRD:
+        process_memrd(fd, m);
+        break;
+    case SIMMSG_MEMWR:
+        process_memwr(fd, m);
+        break;
+    default:
+        dbgprintf("unknown msg type %d\n", m->msgtype);
+        break;
+    }
+}
+
+static void simbridge_read_msg(void *opaque);
+
+static void
+simbridge_poll_for_server(void *opaque)
+{
+    SimBridge *sb = opaque;
+    static QEMUTimer *server_poll_timer;
+
+    sb->simfd = simc_open("qemu", NULL, msg_handler);
+    if (sb->simfd >= 0) {
+        dbgprintf("SimBridge: reconnected to server...\n");
+        qemu_set_fd_handler(sb->simfd, simbridge_read_msg, NULL, sb);
+        return;
+    }
+
+    /* allocate a timer */
+    if (server_poll_timer == NULL) {
+        server_poll_timer = timer_new_ms(QEMU_CLOCK_REALTIME,
+                                         simbridge_poll_for_server, sb);
+        if (server_poll_timer == NULL) {
+            return;
+        }
+    }
+
+    /* poll again in 1s */
+    timer_mod(server_poll_timer, 
+              qemu_clock_get_ms(QEMU_CLOCK_REALTIME) + 1000);
+}
+
+static void
+simbridge_read_msg(void *opaque)
+{
+    SimBridge *sb = opaque;
+    fd_set rfds;
+    struct timeval tv;
+    int r;
+
+    FD_ZERO(&rfds);
+    FD_SET(sb->simfd, &rfds);
+
+    tv.tv_sec = 0;
+    tv.tv_usec = 0;
+
+    /*
+     * We get called sometimes because of other activity
+     * on simfd, so check again here to see if there is
+     * really something for us to read/handle now.
+     */
+    r = select(sb->simfd + 1, &rfds, NULL, NULL, &tv);
+    if (r < 0 || !FD_ISSET(sb->simfd, &rfds)) {
+        return;
+    }
+
+    if (simc_recv_and_handle() == 0) {
+        dbgprintf("SimBridge: lost connection to server, reconnecting...\n");
+        /* deregister fd */
+        qemu_set_fd_handler(sb->simfd, NULL, NULL, NULL);
+        simc_close();
+        sb->simfd = -1;
+        simbridge_poll_for_server(sb);
+    }
+}
+
+static void simbridge_write_config(PCIDevice *d,
+                                   uint32_t address, uint32_t val, int len)
+{
+    pci_bridge_write_config(d, address, val, len);
+    pcie_cap_flr_write_config(d, address, val, len);
+    pcie_aer_write_config(d, address, val, len);
+}
+
+static void simbridge_reset(DeviceState *qdev)
+{
+    PCIDevice *d = PCI_DEVICE(qdev);
+
+    pci_bridge_reset(qdev);
+    pcie_cap_deverr_reset(d);
+}
+
+static void simbridge_init(SimBridge *sb)
+{
+    sb->chassis = 1;
+    sb->simfd = simc_open("qemu", NULL, msg_handler);
+    if (sb->simfd >= 0) {
+        /*
+         * Start at bus 1 to skip upstream port bridge.
+         * We are taking the role of upstream port bridge in
+         * this simbridge device.
+         */
+        simbridge_scan_devices(sb, NULL, 1);
+
+        /*
+         * Arrange for us to handle any unsolicited messages.
+         * Memory read/write and legacy interrupt assert/deassert
+         * messages will arrive unsolicited.
+         */
+        qemu_set_fd_handler(sb->simfd, simbridge_read_msg, NULL, sb);
+    } else {
+        fprintf(stderr,
+                "SimBridge: No server detected. " 
+                "Continuing without simulated devices\n");
+    }
+}
+
+static int simbridge_initfn(PCIDevice *d)
+{
+    PCIEPort *p = PCIE_PORT(d);
+    int rc;
+    Error *err = NULL;
+
+    pci_bridge_initfn(d, TYPE_PCIE_BUS);
+    pcie_port_init_reg(d);
+
+    rc = msi_init(d, XIO3130_MSI_OFFSET, XIO3130_MSI_NR_VECTOR,
+                  XIO3130_MSI_SUPPORTED_FLAGS & PCI_MSI_FLAGS_64BIT,
+                  XIO3130_MSI_SUPPORTED_FLAGS & PCI_MSI_FLAGS_MASKBIT, &err);
+    if (rc < 0) {
+        assert(rc == -ENOTSUP);
+        error_report_err(err);
+        goto err_bridge;
+    }
+
+    rc = pci_bridge_ssvid_init(d, XIO3130_SSVID_OFFSET,
+                               XIO3130_SSVID_SVID, XIO3130_SSVID_SSID);
+    if (rc < 0) {
+        goto err_bridge;
+    }
+
+    rc = pcie_cap_init(d, XIO3130_EXP_OFFSET, PCI_EXP_TYPE_UPSTREAM, p->port);
+    if (rc < 0) {
+        goto err_msi;
+    }
+    pcie_cap_flr_init(d);
+    pcie_cap_deverr_init(d);
+
+    rc = pcie_aer_init(d, PCI_ERR_VER, XIO3130_AER_OFFSET,
+                       PCI_ERR_SIZEOF, &err);
+    if (rc < 0) {
+        error_report_err(err);
+        goto err;
+    }
+
+    simbridge_init(SIM_BRIDGE(d));
+
+    return 0;
+
+err:
+    pcie_cap_exit(d);
+err_msi:
+    msi_uninit(d);
+err_bridge:
+    pci_bridge_exitfn(d);
+    return rc;
+}
+
+static void simbridge_exitfn(PCIDevice *d)
+{
+    pcie_aer_exit(d);
+    pcie_cap_exit(d);
+    msi_uninit(d);
+    pci_bridge_exitfn(d);
+}
+
+static void simbridge_instance_init(Object *obj)
+{
+    qdev_set_id(DEVICE(obj), "simbridge");
+}
+
+static void simbridge_class_init(ObjectClass *oc, void *data)
+{
+    PCIDeviceClass *pdc = PCI_DEVICE_CLASS(oc);
+    DeviceClass *dc = DEVICE_CLASS(oc);
+
+    pdc->is_express = 1;
+    pdc->is_bridge = 1;
+    pdc->config_write = simbridge_write_config;
+    pdc->init = simbridge_initfn;
+    pdc->exit = simbridge_exitfn;
+    pdc->vendor_id = PCI_VENDOR_ID_PENSANDO;
+    pdc->device_id = PCI_DEVICE_ID_PENSANDO_CAPRI;
+
+    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);
+    dc->desc = "Pensando PCIe bridge to simulator";
+    dc->reset = simbridge_reset;
+}
+
+/* ================================================================ */
+
+static const TypeInfo simbridge_info = {
+    .name          = TYPE_SIM_BRIDGE,
+    .parent        = TYPE_PCIE_PORT,
+    .class_init    = simbridge_class_init,
+    .instance_init = simbridge_instance_init,
+    .instance_size = sizeof(SimBridge),
+};
+
+static const TypeInfo simbridgedn_info = {
+    .name          = TYPE_SIM_BRIDGEDN,
+    .parent        = TYPE_PCIE_SLOT,
+    .class_init    = simbridgedn_class_init,
+    .instance_size = sizeof(SimBridgeDn),
+};
+
+static const TypeInfo simdevice_info = {
+    .name          = TYPE_SIM_DEVICE,
+    .parent        = TYPE_PCI_DEVICE,
+    .class_init    = simdevice_class_init,
+    .instance_size = sizeof(SimDevice),
+};
+
+static void simbridge_register_types(void)
+{
+    QTAILQ_INIT(&simdevices);
+    qemu_mutex_init(&simdevices_lock);
+
+    type_register_static(&simbridge_info);
+    type_register_static(&simbridgedn_info);
+    type_register_static(&simdevice_info);
+}
+
+type_init(simbridge_register_types)
