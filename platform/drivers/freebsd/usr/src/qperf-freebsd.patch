diff -ur3 a/src/qperf.c b/src/qperf.c
--- a/src/qperf.c
+++ b/src/qperf.c
@@ -257,7 +257,9 @@
 static STAT     IStat;
 static int      ListenFD;
 static LOOP    *Loops;
+#ifdef LINUX
 static int      ProcStatFD;
+#endif
 static STAT     RStat;
 static int      ShowIndex;
 static SHOW     ShowTable[256];
@@ -619,9 +621,11 @@
     for (i = 0; i < P_N; ++i)
         if (ParInfo[i].index != i)
             error(BUG, "initialize: ParInfo: out of order: %d", i);
+#ifdef LINUX
     ProcStatFD = open("/proc/stat", 0);
     if (ProcStatFD < 0)
         error(SYS, "cannot open /proc/stat");
+#endif
     IStat.no_cpus = sysconf(_SC_NPROCESSORS_ONLN);
     IStat.no_ticks = sysconf(_SC_CLK_TCK);
 }
@@ -1991,7 +1995,7 @@
             cpu += stat->time_e[i] - stat->time_s[i];
     resn->time_cpu = (float) cpu / stat->no_ticks;
 
-    resn->cpu_user = (stat->time_e[T_USER] - stat->time_s[T_USER]
+    resn->cpu_user = (stat->time_e[T_USR] - stat->time_s[T_USR]
                    + stat->time_e[T_NICE] - stat->time_s[T_NICE]) / s;
 
     resn->cpu_intr = (stat->time_e[T_IRQ] - stat->time_s[T_IRQ]
@@ -2202,7 +2206,7 @@
         CLOCK *s = LStat.time_s;
         CLOCK *e = LStat.time_e;
         double real    = (e[T_REAL]    - s[T_REAL])    / t;
-        double user    = (e[T_USER]    - s[T_USER])    / t;
+        double user    = (e[T_USR]     - s[T_USR])     / t;
         double nice    = (e[T_NICE]    - s[T_NICE])    / t;
         double system  = (e[T_KERNEL]  - s[T_KERNEL])  / t;
         double idle    = (e[T_IDLE]    - s[T_IDLE])    / t;
@@ -2616,6 +2620,7 @@
 static void
 set_affinity(void)
 {
+#ifdef LINUX
     cpu_set_t set;
     int a = Req.affinity;
 
@@ -2625,6 +2630,7 @@
     CPU_SET(a-1, &set);
     if (sched_setaffinity(0, sizeof(set), &set) < 0)
         error(SYS, "cannot set processor affinity (cpu %d)", a-1);
+#endif
 }
 
 
@@ -2775,12 +2781,15 @@
 static void
 get_times(CLOCK timex[T_N])
 {
+#ifdef LINUX
     int n;
     char *p;
     char buf[BUFSIZE];
+#endif
     struct tms tms;
 
     timex[0] = times(&tms);
+#ifdef LINUX
     if (lseek(ProcStatFD, 0, 0) < 0)
         error(SYS, "failed to seek /proc/stat");
     n = read(ProcStatFD, buf, sizeof(buf)-1);
@@ -2802,6 +2811,7 @@
     }
     while (n < T_N)
         timex[n++] = 0;
+#endif
 }
 
 
diff -ur3 a/src/qperf.h b/src/qperf.h
--- a/src/qperf.h
+++ b/src/qperf.h
@@ -35,6 +35,11 @@
 #define _GNU_SOURCE
 #include <netdb.h>
 
+#ifndef LINUX
+#include <sys/socket.h>
+#include <netinet/in.h>
+#define s6_addr32 __u6_addr.__u6_addr32
+#endif
 
 /*
  * Parameters.
@@ -76,7 +81,7 @@
  */
 typedef enum {
     T_REAL,
-    T_USER,
+    T_USR,
     T_NICE,
     T_KERNEL,
     T_IDLE,
diff -ur3 a/src/rds.c b/src/rds.c
--- a/src/rds.c
+++ b/src/rds.c
@@ -69,7 +69,7 @@
 
 			n = fscanf(fp, "%d", &val);
 			fclose(fp);
-			if ((n == 1)) {
+			if (n == 1) {
 				/* success */
 				af_rds = val;
 			} else {
diff -ur3 a/src/socket.c b/src/socket.c
--- a/src/socket.c
+++ b/src/socket.c
@@ -44,7 +44,9 @@
 /*
  * Parameters.
  */
+#ifdef LINUX
 #define AF_INET_SDP 27                  /* Family for SDP */
+#endif
 
 
 /*
