// Code generated by protoc-gen-go.
// source: nwsec.proto
// DO NOT EDIT!

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/pensando/sw/agent/netagent/datapath/halproto/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// normalization feature actions upon detecting malformed packets
type NormalizationAction int32

const (
	NormalizationAction_NORM_ACTION_NONE  NormalizationAction = 0
	NormalizationAction_NORM_ACTION_ALLOW NormalizationAction = 1
	NormalizationAction_NORM_ACTION_DROP  NormalizationAction = 2
	NormalizationAction_NORM_ACTION_EDIT  NormalizationAction = 3
)

var NormalizationAction_name = map[int32]string{
	0: "NORM_ACTION_NONE",
	1: "NORM_ACTION_ALLOW",
	2: "NORM_ACTION_DROP",
	3: "NORM_ACTION_EDIT",
}
var NormalizationAction_value = map[string]int32{
	"NORM_ACTION_NONE":  0,
	"NORM_ACTION_ALLOW": 1,
	"NORM_ACTION_DROP":  2,
	"NORM_ACTION_EDIT":  3,
}

func (x NormalizationAction) String() string {
	return proto.EnumName(NormalizationAction_name, int32(x))
}
func (NormalizationAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

// security policy actions
type Action int32

const (
	Action_SECURITY_POLICY_ACTION_NONE   Action = 0
	Action_SECURITY_POLICY_ACTION_ALLOW  Action = 1
	Action_SECURITY_POLICY_ACTION_DENY   Action = 2
	Action_SECURITY_POLICY_ACTION_REJECT Action = 3
)

var Action_name = map[int32]string{
	0: "SECURITY_POLICY_ACTION_NONE",
	1: "SECURITY_POLICY_ACTION_ALLOW",
	2: "SECURITY_POLICY_ACTION_DENY",
	3: "SECURITY_POLICY_ACTION_REJECT",
}
var Action_value = map[string]int32{
	"SECURITY_POLICY_ACTION_NONE":   0,
	"SECURITY_POLICY_ACTION_ALLOW":  1,
	"SECURITY_POLICY_ACTION_DENY":   2,
	"SECURITY_POLICY_ACTION_REJECT": 3,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

// SecurityProfileKeyHandle is used to operate on a security profile
// either by its id or HAL allocated handle
type SecurityProfileKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*SecurityProfileKeyHandle_ProfileId
	//	*SecurityProfileKeyHandle_ProfileHandle
	KeyOrHandle isSecurityProfileKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *SecurityProfileKeyHandle) Reset()                    { *m = SecurityProfileKeyHandle{} }
func (m *SecurityProfileKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileKeyHandle) ProtoMessage()               {}
func (*SecurityProfileKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

type isSecurityProfileKeyHandle_KeyOrHandle interface {
	isSecurityProfileKeyHandle_KeyOrHandle()
}

type SecurityProfileKeyHandle_ProfileId struct {
	ProfileId uint32 `protobuf:"varint,1,opt,name=profile_id,json=profileId,oneof"`
}
type SecurityProfileKeyHandle_ProfileHandle struct {
	ProfileHandle uint64 `protobuf:"fixed64,2,opt,name=profile_handle,json=profileHandle,oneof"`
}

func (*SecurityProfileKeyHandle_ProfileId) isSecurityProfileKeyHandle_KeyOrHandle()     {}
func (*SecurityProfileKeyHandle_ProfileHandle) isSecurityProfileKeyHandle_KeyOrHandle() {}

func (m *SecurityProfileKeyHandle) GetKeyOrHandle() isSecurityProfileKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityProfileKeyHandle) GetProfileId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*SecurityProfileKeyHandle_ProfileId); ok {
		return x.ProfileId
	}
	return 0
}

func (m *SecurityProfileKeyHandle) GetProfileHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*SecurityProfileKeyHandle_ProfileHandle); ok {
		return x.ProfileHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecurityProfileKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecurityProfileKeyHandle_OneofMarshaler, _SecurityProfileKeyHandle_OneofUnmarshaler, _SecurityProfileKeyHandle_OneofSizer, []interface{}{
		(*SecurityProfileKeyHandle_ProfileId)(nil),
		(*SecurityProfileKeyHandle_ProfileHandle)(nil),
	}
}

func _SecurityProfileKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecurityProfileKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityProfileKeyHandle_ProfileId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ProfileId))
	case *SecurityProfileKeyHandle_ProfileHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.ProfileHandle))
	case nil:
	default:
		return fmt.Errorf("SecurityProfileKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _SecurityProfileKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecurityProfileKeyHandle)
	switch tag {
	case 1: // key_or_handle.profile_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &SecurityProfileKeyHandle_ProfileId{uint32(x)}
		return true, err
	case 2: // key_or_handle.profile_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &SecurityProfileKeyHandle_ProfileHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _SecurityProfileKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecurityProfileKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityProfileKeyHandle_ProfileId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProfileId))
	case *SecurityProfileKeyHandle_ProfileHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SecurityProfileSpec object captures feature knobs that are most likely
// shareable across L2 segments, tenants, or even interfaces and most of the
// time operates on defaults. It is possible that there is only object of this
// kind in the system.
// NOTE: user is not expected to fill in all the fields explicitly, that job is
//       done by the agent. Agent will be exposing user visible knobs and fill
//       in the defaults when interacting with HAL.
type SecurityProfileSpec struct {
	Meta                *types.ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle         *SecurityProfileKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	CnxnTrackingEn      bool                      `protobuf:"varint,3,opt,name=cnxn_tracking_en,json=cnxnTrackingEn" json:"cnxn_tracking_en,omitempty"`
	SessionIdleTimeout  uint32                    `protobuf:"varint,4,opt,name=session_idle_timeout,json=sessionIdleTimeout" json:"session_idle_timeout,omitempty"`
	TcpCnxnSetupTimeout uint32                    `protobuf:"varint,5,opt,name=tcp_cnxn_setup_timeout,json=tcpCnxnSetupTimeout" json:"tcp_cnxn_setup_timeout,omitempty"`
	TcpCloseTimeout     uint32                    `protobuf:"varint,6,opt,name=tcp_close_timeout,json=tcpCloseTimeout" json:"tcp_close_timeout,omitempty"`
	TcpCloseWaitTimeout uint32                    `protobuf:"varint,7,opt,name=tcp_close_wait_timeout,json=tcpCloseWaitTimeout" json:"tcp_close_wait_timeout,omitempty"`
	IpNormalizationEn   bool                      `protobuf:"varint,8,opt,name=ip_normalization_en,json=ipNormalizationEn" json:"ip_normalization_en,omitempty"`
	TcpNormalizationEn  bool                      `protobuf:"varint,9,opt,name=tcp_normalization_en,json=tcpNormalizationEn" json:"tcp_normalization_en,omitempty"`
	IcmpNormalizationEn bool                      `protobuf:"varint,10,opt,name=icmp_normalization_en,json=icmpNormalizationEn" json:"icmp_normalization_en,omitempty"`
	// IP normalization knobs
	IpSmallFragDrop    bool                `protobuf:"varint,11,opt,name=ip_small_frag_drop,json=ipSmallFragDrop" json:"ip_small_frag_drop,omitempty"`
	IpRsvdFlagsAction  NormalizationAction `protobuf:"varint,12,opt,name=ip_rsvd_flags_action,json=ipRsvdFlagsAction,enum=halproto.NormalizationAction" json:"ip_rsvd_flags_action,omitempty"`
	IpDfAction         NormalizationAction `protobuf:"varint,13,opt,name=ip_df_action,json=ipDfAction,enum=halproto.NormalizationAction" json:"ip_df_action,omitempty"`
	IpOptionsAction    NormalizationAction `protobuf:"varint,14,opt,name=ip_options_action,json=ipOptionsAction,enum=halproto.NormalizationAction" json:"ip_options_action,omitempty"`
	IpInvalidLenAction NormalizationAction `protobuf:"varint,15,opt,name=ip_invalid_len_action,json=ipInvalidLenAction,enum=halproto.NormalizationAction" json:"ip_invalid_len_action,omitempty"`
	// ICMP/ICMPv6 normalization knobs
	IcmpSrcQuenchMsgAction    NormalizationAction `protobuf:"varint,16,opt,name=icmp_src_quench_msg_action,json=icmpSrcQuenchMsgAction,enum=halproto.NormalizationAction" json:"icmp_src_quench_msg_action,omitempty"`
	IcmpRedirectMsgAction     NormalizationAction `protobuf:"varint,17,opt,name=icmp_redirect_msg_action,json=icmpRedirectMsgAction,enum=halproto.NormalizationAction" json:"icmp_redirect_msg_action,omitempty"`
	IcmpInfoReqMsgAction      NormalizationAction `protobuf:"varint,18,opt,name=icmp_info_req_msg_action,json=icmpInfoReqMsgAction,enum=halproto.NormalizationAction" json:"icmp_info_req_msg_action,omitempty"`
	IcmpAddrReqMsgAction      NormalizationAction `protobuf:"varint,19,opt,name=icmp_addr_req_msg_action,json=icmpAddrReqMsgAction,enum=halproto.NormalizationAction" json:"icmp_addr_req_msg_action,omitempty"`
	IcmpTracerouteMsgAction   NormalizationAction `protobuf:"varint,20,opt,name=icmp_traceroute_msg_action,json=icmpTracerouteMsgAction,enum=halproto.NormalizationAction" json:"icmp_traceroute_msg_action,omitempty"`
	IcmpRsvdTypeMsgAction     NormalizationAction `protobuf:"varint,21,opt,name=icmp_rsvd_type_msg_action,json=icmpRsvdTypeMsgAction,enum=halproto.NormalizationAction" json:"icmp_rsvd_type_msg_action,omitempty"`
	IcmpBadRequestAction      NormalizationAction `protobuf:"varint,22,opt,name=icmp_bad_request_action,json=icmpBadRequestAction,enum=halproto.NormalizationAction" json:"icmp_bad_request_action,omitempty"`
	IcmpRequestResponseAction NormalizationAction `protobuf:"varint,23,opt,name=icmp_request_response_action,json=icmpRequestResponseAction,enum=halproto.NormalizationAction" json:"icmp_request_response_action,omitempty"`
	IcmpRedirectAction        NormalizationAction `protobuf:"varint,24,opt,name=icmp_redirect_action,json=icmpRedirectAction,enum=halproto.NormalizationAction" json:"icmp_redirect_action,omitempty"`
	IcmpCodeNonZeroAction     NormalizationAction `protobuf:"varint,25,opt,name=icmp_code_non_zero_action,json=icmpCodeNonZeroAction,enum=halproto.NormalizationAction" json:"icmp_code_non_zero_action,omitempty"`
	Ipv4PingOfDeathDropAction NormalizationAction `protobuf:"varint,26,opt,name=ipv4_ping_of_death_drop_action,json=ipv4PingOfDeathDropAction,enum=halproto.NormalizationAction" json:"ipv4_ping_of_death_drop_action,omitempty"`
	// TCP normalization knobs
	TcpNonSynFirstPktDrop       bool                `protobuf:"varint,27,opt,name=tcp_non_syn_first_pkt_drop,json=tcpNonSynFirstPktDrop" json:"tcp_non_syn_first_pkt_drop,omitempty"`
	TcpSyncookieEn              bool                `protobuf:"varint,28,opt,name=tcp_syncookie_en,json=tcpSyncookieEn" json:"tcp_syncookie_en,omitempty"`
	TcpSplitHandshakeDetectEn   bool                `protobuf:"varint,29,opt,name=tcp_split_handshake_detect_en,json=tcpSplitHandshakeDetectEn" json:"tcp_split_handshake_detect_en,omitempty"`
	TcpSplitHandshakeDrop       bool                `protobuf:"varint,30,opt,name=tcp_split_handshake_drop,json=tcpSplitHandshakeDrop" json:"tcp_split_handshake_drop,omitempty"`
	TcpRsvdFlagsAction          NormalizationAction `protobuf:"varint,31,opt,name=tcp_rsvd_flags_action,json=tcpRsvdFlagsAction,enum=halproto.NormalizationAction" json:"tcp_rsvd_flags_action,omitempty"`
	TcpUnexpectedMssAction      NormalizationAction `protobuf:"varint,32,opt,name=tcp_unexpected_mss_action,json=tcpUnexpectedMssAction,enum=halproto.NormalizationAction" json:"tcp_unexpected_mss_action,omitempty"`
	TcpUnexpectedWinScaleAction NormalizationAction `protobuf:"varint,33,opt,name=tcp_unexpected_win_scale_action,json=tcpUnexpectedWinScaleAction,enum=halproto.NormalizationAction" json:"tcp_unexpected_win_scale_action,omitempty"`
	TcpUrgPtrNotSetAction       NormalizationAction `protobuf:"varint,34,opt,name=tcp_urg_ptr_not_set_action,json=tcpUrgPtrNotSetAction,enum=halproto.NormalizationAction" json:"tcp_urg_ptr_not_set_action,omitempty"`
	TcpUrgFlagNotSetAction      NormalizationAction `protobuf:"varint,35,opt,name=tcp_urg_flag_not_set_action,json=tcpUrgFlagNotSetAction,enum=halproto.NormalizationAction" json:"tcp_urg_flag_not_set_action,omitempty"`
	TcpUrgPayloadMissingAction  NormalizationAction `protobuf:"varint,36,opt,name=tcp_urg_payload_missing_action,json=tcpUrgPayloadMissingAction,enum=halproto.NormalizationAction" json:"tcp_urg_payload_missing_action,omitempty"`
	TcpRstWithDataAction        NormalizationAction `protobuf:"varint,37,opt,name=tcp_rst_with_data_action,json=tcpRstWithDataAction,enum=halproto.NormalizationAction" json:"tcp_rst_with_data_action,omitempty"`
	TcpDataLenGtMssAction       NormalizationAction `protobuf:"varint,38,opt,name=tcp_data_len_gt_mss_action,json=tcpDataLenGtMssAction,enum=halproto.NormalizationAction" json:"tcp_data_len_gt_mss_action,omitempty"`
	TcpDataLenGtWinSizeAction   NormalizationAction `protobuf:"varint,39,opt,name=tcp_data_len_gt_win_size_action,json=tcpDataLenGtWinSizeAction,enum=halproto.NormalizationAction" json:"tcp_data_len_gt_win_size_action,omitempty"`
	TcpUnexpectedTsOptionAction NormalizationAction `protobuf:"varint,40,opt,name=tcp_unexpected_ts_option_action,json=tcpUnexpectedTsOptionAction,enum=halproto.NormalizationAction" json:"tcp_unexpected_ts_option_action,omitempty"`
	TcpTsNotPresentAction       NormalizationAction `protobuf:"varint,41,opt,name=tcp_ts_not_present_action,json=tcpTsNotPresentAction,enum=halproto.NormalizationAction" json:"tcp_ts_not_present_action,omitempty"`
	TcpInvalidFlagsAction       NormalizationAction `protobuf:"varint,42,opt,name=tcp_invalid_flags_action,json=tcpInvalidFlagsAction,enum=halproto.NormalizationAction" json:"tcp_invalid_flags_action,omitempty"`
	TcpAckFlagNotPresentAction  NormalizationAction `protobuf:"varint,43,opt,name=tcp_ack_flag_not_present_action,json=tcpAckFlagNotPresentAction,enum=halproto.NormalizationAction" json:"tcp_ack_flag_not_present_action,omitempty"`
}

func (m *SecurityProfileSpec) Reset()                    { *m = SecurityProfileSpec{} }
func (m *SecurityProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileSpec) ProtoMessage()               {}
func (*SecurityProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *SecurityProfileSpec) GetMeta() *types.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityProfileSpec) GetKeyOrHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityProfileSpec) GetCnxnTrackingEn() bool {
	if m != nil {
		return m.CnxnTrackingEn
	}
	return false
}

func (m *SecurityProfileSpec) GetSessionIdleTimeout() uint32 {
	if m != nil {
		return m.SessionIdleTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpCnxnSetupTimeout() uint32 {
	if m != nil {
		return m.TcpCnxnSetupTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpCloseTimeout() uint32 {
	if m != nil {
		return m.TcpCloseTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpCloseWaitTimeout() uint32 {
	if m != nil {
		return m.TcpCloseWaitTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetIpNormalizationEn() bool {
	if m != nil {
		return m.IpNormalizationEn
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpNormalizationEn() bool {
	if m != nil {
		return m.TcpNormalizationEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpNormalizationEn() bool {
	if m != nil {
		return m.IcmpNormalizationEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpSmallFragDrop() bool {
	if m != nil {
		return m.IpSmallFragDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIpRsvdFlagsAction() NormalizationAction {
	if m != nil {
		return m.IpRsvdFlagsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpDfAction() NormalizationAction {
	if m != nil {
		return m.IpDfAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpOptionsAction() NormalizationAction {
	if m != nil {
		return m.IpOptionsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpInvalidLenAction() NormalizationAction {
	if m != nil {
		return m.IpInvalidLenAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpSrcQuenchMsgAction() NormalizationAction {
	if m != nil {
		return m.IcmpSrcQuenchMsgAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpRedirectMsgAction() NormalizationAction {
	if m != nil {
		return m.IcmpRedirectMsgAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpInfoReqMsgAction() NormalizationAction {
	if m != nil {
		return m.IcmpInfoReqMsgAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpAddrReqMsgAction() NormalizationAction {
	if m != nil {
		return m.IcmpAddrReqMsgAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpTracerouteMsgAction() NormalizationAction {
	if m != nil {
		return m.IcmpTracerouteMsgAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpRsvdTypeMsgAction() NormalizationAction {
	if m != nil {
		return m.IcmpRsvdTypeMsgAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpBadRequestAction() NormalizationAction {
	if m != nil {
		return m.IcmpBadRequestAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpRequestResponseAction() NormalizationAction {
	if m != nil {
		return m.IcmpRequestResponseAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpRedirectAction() NormalizationAction {
	if m != nil {
		return m.IcmpRedirectAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpCodeNonZeroAction() NormalizationAction {
	if m != nil {
		return m.IcmpCodeNonZeroAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpv4PingOfDeathDropAction() NormalizationAction {
	if m != nil {
		return m.Ipv4PingOfDeathDropAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpNonSynFirstPktDrop() bool {
	if m != nil {
		return m.TcpNonSynFirstPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpSyncookieEn() bool {
	if m != nil {
		return m.TcpSyncookieEn
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpSplitHandshakeDetectEn() bool {
	if m != nil {
		return m.TcpSplitHandshakeDetectEn
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpSplitHandshakeDrop() bool {
	if m != nil {
		return m.TcpSplitHandshakeDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpRsvdFlagsAction() NormalizationAction {
	if m != nil {
		return m.TcpRsvdFlagsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedMssAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedMssAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedWinScaleAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedWinScaleAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUrgPtrNotSetAction() NormalizationAction {
	if m != nil {
		return m.TcpUrgPtrNotSetAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUrgFlagNotSetAction() NormalizationAction {
	if m != nil {
		return m.TcpUrgFlagNotSetAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUrgPayloadMissingAction() NormalizationAction {
	if m != nil {
		return m.TcpUrgPayloadMissingAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpRstWithDataAction() NormalizationAction {
	if m != nil {
		return m.TcpRstWithDataAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpDataLenGtMssAction() NormalizationAction {
	if m != nil {
		return m.TcpDataLenGtMssAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpDataLenGtWinSizeAction() NormalizationAction {
	if m != nil {
		return m.TcpDataLenGtWinSizeAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedTsOptionAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedTsOptionAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpTsNotPresentAction() NormalizationAction {
	if m != nil {
		return m.TcpTsNotPresentAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpInvalidFlagsAction() NormalizationAction {
	if m != nil {
		return m.TcpInvalidFlagsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpAckFlagNotPresentAction() NormalizationAction {
	if m != nil {
		return m.TcpAckFlagNotPresentAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

// SecurityProfileRequestMsg is batched add or modify profile request
type SecurityProfileRequestMsg struct {
	Request []*SecurityProfileSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityProfileRequestMsg) Reset()                    { *m = SecurityProfileRequestMsg{} }
func (m *SecurityProfileRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileRequestMsg) ProtoMessage()               {}
func (*SecurityProfileRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *SecurityProfileRequestMsg) GetRequest() []*SecurityProfileSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityProfile operational status
type SecurityProfileStatus struct {
	ProfileHandle uint64 `protobuf:"fixed64,1,opt,name=profile_handle,json=profileHandle" json:"profile_handle,omitempty"`
}

func (m *SecurityProfileStatus) Reset()                    { *m = SecurityProfileStatus{} }
func (m *SecurityProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileStatus) ProtoMessage()               {}
func (*SecurityProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *SecurityProfileStatus) GetProfileHandle() uint64 {
	if m != nil {
		return m.ProfileHandle
	}
	return 0
}

// SecurityProfileResponse is response to SecurityProfileSpec
type SecurityProfileResponse struct {
	ApiStatus     types.ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProfileStatus *SecurityProfileStatus `protobuf:"bytes,2,opt,name=profile_status,json=profileStatus" json:"profile_status,omitempty"`
}

func (m *SecurityProfileResponse) Reset()                    { *m = SecurityProfileResponse{} }
func (m *SecurityProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileResponse) ProtoMessage()               {}
func (*SecurityProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *SecurityProfileResponse) GetApiStatus() types.ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return types.ApiStatus_API_STATUS_OK
}

func (m *SecurityProfileResponse) GetProfileStatus() *SecurityProfileStatus {
	if m != nil {
		return m.ProfileStatus
	}
	return nil
}

// SecurityProfileResponseMsg is batched response to SecurityProfileRequestMsg
type SecurityProfileResponseMsg struct {
	Response []*SecurityProfileResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityProfileResponseMsg) Reset()                    { *m = SecurityProfileResponseMsg{} }
func (m *SecurityProfileResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileResponseMsg) ProtoMessage()               {}
func (*SecurityProfileResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *SecurityProfileResponseMsg) GetResponse() []*SecurityProfileResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityProfileDeleteRequest is used to delete a SecurityProfile profile
type SecurityProfileDeleteRequest struct {
	Meta        *types.ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *SecurityProfileKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityProfileDeleteRequest) Reset()                    { *m = SecurityProfileDeleteRequest{} }
func (m *SecurityProfileDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteRequest) ProtoMessage()               {}
func (*SecurityProfileDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *SecurityProfileDeleteRequest) GetMeta() *types.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityProfileDeleteRequest) GetKeyOrHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityProfileDeleteRequestMsg is used to delete a batch of SecurityProfile profiles
type SecurityProfileDeleteRequestMsg struct {
	Request []*SecurityProfileDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityProfileDeleteRequestMsg) Reset()                    { *m = SecurityProfileDeleteRequestMsg{} }
func (m *SecurityProfileDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteRequestMsg) ProtoMessage()               {}
func (*SecurityProfileDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *SecurityProfileDeleteRequestMsg) GetRequest() []*SecurityProfileDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityProfileDeleteResponseMsg is batched response to SecurityProfileDeleteRequestMsg
type SecurityProfileDeleteResponseMsg struct {
	ApiStatus []types.ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SecurityProfileDeleteResponseMsg) Reset()         { *m = SecurityProfileDeleteResponseMsg{} }
func (m *SecurityProfileDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteResponseMsg) ProtoMessage()    {}
func (*SecurityProfileDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{8}
}

func (m *SecurityProfileDeleteResponseMsg) GetApiStatus() []types.ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// SecurityProfileGetRequest is used to get information about a L2 Segment
type SecurityProfileGetRequest struct {
	Meta        *types.ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *SecurityProfileKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityProfileGetRequest) Reset()                    { *m = SecurityProfileGetRequest{} }
func (m *SecurityProfileGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetRequest) ProtoMessage()               {}
func (*SecurityProfileGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *SecurityProfileGetRequest) GetMeta() *types.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityProfileGetRequest) GetKeyOrHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityProfileGetRequestMsg is batched GET request for SecurityProfile profiles
type SecurityProfileGetRequestMsg struct {
	Request []*SecurityProfileGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityProfileGetRequestMsg) Reset()                    { *m = SecurityProfileGetRequestMsg{} }
func (m *SecurityProfileGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetRequestMsg) ProtoMessage()               {}
func (*SecurityProfileGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *SecurityProfileGetRequestMsg) GetRequest() []*SecurityProfileGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityProfileStats is the statistics object for each SecurityProfile profile
type SecurityProfileStats struct {
}

func (m *SecurityProfileStats) Reset()                    { *m = SecurityProfileStats{} }
func (m *SecurityProfileStats) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileStats) ProtoMessage()               {}
func (*SecurityProfileStats) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

// SecurityProfileGetResponse captures all the information about a SecurityProfile profile
type SecurityProfileGetResponse struct {
	Spec   *SecurityProfileSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *SecurityProfileStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats  *SecurityProfileStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *SecurityProfileGetResponse) Reset()                    { *m = SecurityProfileGetResponse{} }
func (m *SecurityProfileGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetResponse) ProtoMessage()               {}
func (*SecurityProfileGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *SecurityProfileGetResponse) GetSpec() *SecurityProfileSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SecurityProfileGetResponse) GetStatus() *SecurityProfileStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecurityProfileGetResponse) GetStats() *SecurityProfileStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SecurityProfileGetResponseMsg is the batched response to SecurityProfileGetRequestMsg
type SecurityProfileGetResponseMsg struct {
	Response []*SecurityProfileGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityProfileGetResponseMsg) Reset()                    { *m = SecurityProfileGetResponseMsg{} }
func (m *SecurityProfileGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetResponseMsg) ProtoMessage()               {}
func (*SecurityProfileGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *SecurityProfileGetResponseMsg) GetResponse() []*SecurityProfileGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityGroupSpec captures the configuration parameters for a security group
type SecurityGroupSpec struct {
	Meta *types.ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	SgId uint32            `protobuf:"fixed32,2,opt,name=sg_id,json=sgId" json:"sg_id,omitempty"`
}

func (m *SecurityGroupSpec) Reset()                    { *m = SecurityGroupSpec{} }
func (m *SecurityGroupSpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupSpec) ProtoMessage()               {}
func (*SecurityGroupSpec) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *SecurityGroupSpec) GetMeta() *types.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityGroupSpec) GetSgId() uint32 {
	if m != nil {
		return m.SgId
	}
	return 0
}

// SecurityGroupMsg is batched add or modify security group request
type SecurityGroupMsg struct {
	Request []*SecurityGroupSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupMsg) Reset()                    { *m = SecurityGroupMsg{} }
func (m *SecurityGroupMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupMsg) ProtoMessage()               {}
func (*SecurityGroupMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *SecurityGroupMsg) GetRequest() []*SecurityGroupSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// security group operational status
type SecurityGroupStatus struct {
	SgHandle uint64 `protobuf:"fixed64,1,opt,name=sg_handle,json=sgHandle" json:"sg_handle,omitempty"`
}

func (m *SecurityGroupStatus) Reset()                    { *m = SecurityGroupStatus{} }
func (m *SecurityGroupStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupStatus) ProtoMessage()               {}
func (*SecurityGroupStatus) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *SecurityGroupStatus) GetSgHandle() uint64 {
	if m != nil {
		return m.SgHandle
	}
	return 0
}

// SecurityGroupResponse is the response to SecurityGroupSpec
type SecurityGroupResponse struct {
	ApiStatus types.ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SecurityGroupStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SecurityGroupResponse) Reset()                    { *m = SecurityGroupResponse{} }
func (m *SecurityGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupResponse) ProtoMessage()               {}
func (*SecurityGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *SecurityGroupResponse) GetApiStatus() types.ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return types.ApiStatus_API_STATUS_OK
}

func (m *SecurityGroupResponse) GetStatus() *SecurityGroupStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SecurityGroupResponseMsg is batched response to SecurityGroupMsg
type SecurityGroupResponseMsg struct {
	Response []*SecurityGroupResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityGroupResponseMsg) Reset()                    { *m = SecurityGroupResponseMsg{} }
func (m *SecurityGroupResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupResponseMsg) ProtoMessage()               {}
func (*SecurityGroupResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{18} }

func (m *SecurityGroupResponseMsg) GetResponse() []*SecurityGroupResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Service represents an application service defined in terms of protocol and port
type Service struct {
	IpProtocol types.IPProtocol `protobuf:"varint,1,opt,name=ip_protocol,json=ipProtocol,enum=types.IPProtocol" json:"ip_protocol,omitempty"`
	Port       uint32           `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

func (m *Service) GetIpProtocol() types.IPProtocol {
	if m != nil {
		return m.IpProtocol
	}
	return types.IPProtocol_IP_PROTO_NONE
}

func (m *Service) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// SecurityPolicyRule defines a rule between a pair of security groups
// A rule can contain multiple services to match against
type SecurityPolicyRuleSpec struct {
	Meta      *types.ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	SrcSgId   uint32            `protobuf:"fixed32,2,opt,name=src_sg_id,json=srcSgId" json:"src_sg_id,omitempty"`
	DstSgId   uint32            `protobuf:"fixed32,3,opt,name=dst_sg_id,json=dstSgId" json:"dst_sg_id,omitempty"`
	Svc       []*Service        `protobuf:"bytes,4,rep,name=svc" json:"svc,omitempty"`
	Action    Action            `protobuf:"varint,5,opt,name=action,enum=halproto.Action" json:"action,omitempty"`
	RuleLogEn bool              `protobuf:"varint,6,opt,name=rule_log_en,json=ruleLogEn" json:"rule_log_en,omitempty"`
}

func (m *SecurityPolicyRuleSpec) Reset()                    { *m = SecurityPolicyRuleSpec{} }
func (m *SecurityPolicyRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyRuleSpec) ProtoMessage()               {}
func (*SecurityPolicyRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{20} }

func (m *SecurityPolicyRuleSpec) GetMeta() *types.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityPolicyRuleSpec) GetSrcSgId() uint32 {
	if m != nil {
		return m.SrcSgId
	}
	return 0
}

func (m *SecurityPolicyRuleSpec) GetDstSgId() uint32 {
	if m != nil {
		return m.DstSgId
	}
	return 0
}

func (m *SecurityPolicyRuleSpec) GetSvc() []*Service {
	if m != nil {
		return m.Svc
	}
	return nil
}

func (m *SecurityPolicyRuleSpec) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_SECURITY_POLICY_ACTION_NONE
}

func (m *SecurityPolicyRuleSpec) GetRuleLogEn() bool {
	if m != nil {
		return m.RuleLogEn
	}
	return false
}

// SecurityPolicyRuleMsg is batched add or modify security policy request
type SecurityPolicyRuleMsg struct {
	Request []*SecurityPolicyRuleSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityPolicyRuleMsg) Reset()                    { *m = SecurityPolicyRuleMsg{} }
func (m *SecurityPolicyRuleMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyRuleMsg) ProtoMessage()               {}
func (*SecurityPolicyRuleMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{21} }

func (m *SecurityPolicyRuleMsg) GetRequest() []*SecurityPolicyRuleSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityPolicyRuleStatus is the operational state of a rule
type SecurityPolicyRuleStatus struct {
	RuleHandle uint64 `protobuf:"fixed64,1,opt,name=rule_handle,json=ruleHandle" json:"rule_handle,omitempty"`
}

func (m *SecurityPolicyRuleStatus) Reset()                    { *m = SecurityPolicyRuleStatus{} }
func (m *SecurityPolicyRuleStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyRuleStatus) ProtoMessage()               {}
func (*SecurityPolicyRuleStatus) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{22} }

func (m *SecurityPolicyRuleStatus) GetRuleHandle() uint64 {
	if m != nil {
		return m.RuleHandle
	}
	return 0
}

// SecurityPolicyRuleResponse is the response to SecurityPolicyRuleSpec
type SecurityPolicyRuleResponse struct {
	ApiStatus types.ApiStatus           `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SecurityPolicyRuleStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SecurityPolicyRuleResponse) Reset()                    { *m = SecurityPolicyRuleResponse{} }
func (m *SecurityPolicyRuleResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyRuleResponse) ProtoMessage()               {}
func (*SecurityPolicyRuleResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{23} }

func (m *SecurityPolicyRuleResponse) GetApiStatus() types.ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return types.ApiStatus_API_STATUS_OK
}

func (m *SecurityPolicyRuleResponse) GetStatus() *SecurityPolicyRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SecurityPolicyRuleResponseMsg is batched response to SecurityPolicyRuleMsg
type SecurityPolicyRuleResponseMsg struct {
	Response []*SecurityPolicyRuleResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityPolicyRuleResponseMsg) Reset()                    { *m = SecurityPolicyRuleResponseMsg{} }
func (m *SecurityPolicyRuleResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityPolicyRuleResponseMsg) ProtoMessage()               {}
func (*SecurityPolicyRuleResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{24} }

func (m *SecurityPolicyRuleResponseMsg) GetResponse() []*SecurityPolicyRuleResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*SecurityProfileKeyHandle)(nil), "halproto.SecurityProfileKeyHandle")
	proto.RegisterType((*SecurityProfileSpec)(nil), "halproto.SecurityProfileSpec")
	proto.RegisterType((*SecurityProfileRequestMsg)(nil), "halproto.SecurityProfileRequestMsg")
	proto.RegisterType((*SecurityProfileStatus)(nil), "halproto.SecurityProfileStatus")
	proto.RegisterType((*SecurityProfileResponse)(nil), "halproto.SecurityProfileResponse")
	proto.RegisterType((*SecurityProfileResponseMsg)(nil), "halproto.SecurityProfileResponseMsg")
	proto.RegisterType((*SecurityProfileDeleteRequest)(nil), "halproto.SecurityProfileDeleteRequest")
	proto.RegisterType((*SecurityProfileDeleteRequestMsg)(nil), "halproto.SecurityProfileDeleteRequestMsg")
	proto.RegisterType((*SecurityProfileDeleteResponseMsg)(nil), "halproto.SecurityProfileDeleteResponseMsg")
	proto.RegisterType((*SecurityProfileGetRequest)(nil), "halproto.SecurityProfileGetRequest")
	proto.RegisterType((*SecurityProfileGetRequestMsg)(nil), "halproto.SecurityProfileGetRequestMsg")
	proto.RegisterType((*SecurityProfileStats)(nil), "halproto.SecurityProfileStats")
	proto.RegisterType((*SecurityProfileGetResponse)(nil), "halproto.SecurityProfileGetResponse")
	proto.RegisterType((*SecurityProfileGetResponseMsg)(nil), "halproto.SecurityProfileGetResponseMsg")
	proto.RegisterType((*SecurityGroupSpec)(nil), "halproto.SecurityGroupSpec")
	proto.RegisterType((*SecurityGroupMsg)(nil), "halproto.SecurityGroupMsg")
	proto.RegisterType((*SecurityGroupStatus)(nil), "halproto.SecurityGroupStatus")
	proto.RegisterType((*SecurityGroupResponse)(nil), "halproto.SecurityGroupResponse")
	proto.RegisterType((*SecurityGroupResponseMsg)(nil), "halproto.SecurityGroupResponseMsg")
	proto.RegisterType((*Service)(nil), "halproto.Service")
	proto.RegisterType((*SecurityPolicyRuleSpec)(nil), "halproto.SecurityPolicyRuleSpec")
	proto.RegisterType((*SecurityPolicyRuleMsg)(nil), "halproto.SecurityPolicyRuleMsg")
	proto.RegisterType((*SecurityPolicyRuleStatus)(nil), "halproto.SecurityPolicyRuleStatus")
	proto.RegisterType((*SecurityPolicyRuleResponse)(nil), "halproto.SecurityPolicyRuleResponse")
	proto.RegisterType((*SecurityPolicyRuleResponseMsg)(nil), "halproto.SecurityPolicyRuleResponseMsg")
	proto.RegisterEnum("halproto.NormalizationAction", NormalizationAction_name, NormalizationAction_value)
	proto.RegisterEnum("halproto.Action", Action_name, Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NwSecurity service

type NwSecurityClient interface {
	SecurityProfileCreate(ctx context.Context, in *SecurityProfileRequestMsg, opts ...grpc.CallOption) (*SecurityProfileResponseMsg, error)
	SecurityProfileUpdate(ctx context.Context, in *SecurityProfileRequestMsg, opts ...grpc.CallOption) (*SecurityProfileResponseMsg, error)
	SecurityProfileDelete(ctx context.Context, in *SecurityProfileDeleteRequestMsg, opts ...grpc.CallOption) (*SecurityProfileDeleteResponseMsg, error)
	SecurityProfileGet(ctx context.Context, in *SecurityProfileGetRequestMsg, opts ...grpc.CallOption) (*SecurityProfileGetResponseMsg, error)
	SecurityGroupCreate(ctx context.Context, in *SecurityGroupMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error)
	SecurityGroupUpdate(ctx context.Context, in *SecurityGroupMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error)
	SecurityGroupDelete(ctx context.Context, in *SecurityGroupMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error)
	SecurityPolicyRuleCreate(ctx context.Context, in *SecurityPolicyRuleMsg, opts ...grpc.CallOption) (*SecurityPolicyRuleResponseMsg, error)
	SecurityPolicyRuleUpdate(ctx context.Context, in *SecurityPolicyRuleMsg, opts ...grpc.CallOption) (*SecurityPolicyRuleResponseMsg, error)
	SecurityPolicyRuleDelete(ctx context.Context, in *SecurityPolicyRuleMsg, opts ...grpc.CallOption) (*SecurityPolicyRuleResponseMsg, error)
}

type nwSecurityClient struct {
	cc *grpc.ClientConn
}

func NewNwSecurityClient(cc *grpc.ClientConn) NwSecurityClient {
	return &nwSecurityClient{cc}
}

func (c *nwSecurityClient) SecurityProfileCreate(ctx context.Context, in *SecurityProfileRequestMsg, opts ...grpc.CallOption) (*SecurityProfileResponseMsg, error) {
	out := new(SecurityProfileResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityProfileCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityProfileUpdate(ctx context.Context, in *SecurityProfileRequestMsg, opts ...grpc.CallOption) (*SecurityProfileResponseMsg, error) {
	out := new(SecurityProfileResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityProfileUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityProfileDelete(ctx context.Context, in *SecurityProfileDeleteRequestMsg, opts ...grpc.CallOption) (*SecurityProfileDeleteResponseMsg, error) {
	out := new(SecurityProfileDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityProfileDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityProfileGet(ctx context.Context, in *SecurityProfileGetRequestMsg, opts ...grpc.CallOption) (*SecurityProfileGetResponseMsg, error) {
	out := new(SecurityProfileGetResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityProfileGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityGroupCreate(ctx context.Context, in *SecurityGroupMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error) {
	out := new(SecurityGroupResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityGroupCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityGroupUpdate(ctx context.Context, in *SecurityGroupMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error) {
	out := new(SecurityGroupResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityGroupUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityGroupDelete(ctx context.Context, in *SecurityGroupMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error) {
	out := new(SecurityGroupResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityGroupDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityPolicyRuleCreate(ctx context.Context, in *SecurityPolicyRuleMsg, opts ...grpc.CallOption) (*SecurityPolicyRuleResponseMsg, error) {
	out := new(SecurityPolicyRuleResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityPolicyRuleCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityPolicyRuleUpdate(ctx context.Context, in *SecurityPolicyRuleMsg, opts ...grpc.CallOption) (*SecurityPolicyRuleResponseMsg, error) {
	out := new(SecurityPolicyRuleResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityPolicyRuleUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityPolicyRuleDelete(ctx context.Context, in *SecurityPolicyRuleMsg, opts ...grpc.CallOption) (*SecurityPolicyRuleResponseMsg, error) {
	out := new(SecurityPolicyRuleResponseMsg)
	err := grpc.Invoke(ctx, "/halproto.NwSecurity/SecurityPolicyRuleDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NwSecurity service

type NwSecurityServer interface {
	SecurityProfileCreate(context.Context, *SecurityProfileRequestMsg) (*SecurityProfileResponseMsg, error)
	SecurityProfileUpdate(context.Context, *SecurityProfileRequestMsg) (*SecurityProfileResponseMsg, error)
	SecurityProfileDelete(context.Context, *SecurityProfileDeleteRequestMsg) (*SecurityProfileDeleteResponseMsg, error)
	SecurityProfileGet(context.Context, *SecurityProfileGetRequestMsg) (*SecurityProfileGetResponseMsg, error)
	SecurityGroupCreate(context.Context, *SecurityGroupMsg) (*SecurityGroupResponseMsg, error)
	SecurityGroupUpdate(context.Context, *SecurityGroupMsg) (*SecurityGroupResponseMsg, error)
	SecurityGroupDelete(context.Context, *SecurityGroupMsg) (*SecurityGroupResponseMsg, error)
	SecurityPolicyRuleCreate(context.Context, *SecurityPolicyRuleMsg) (*SecurityPolicyRuleResponseMsg, error)
	SecurityPolicyRuleUpdate(context.Context, *SecurityPolicyRuleMsg) (*SecurityPolicyRuleResponseMsg, error)
	SecurityPolicyRuleDelete(context.Context, *SecurityPolicyRuleMsg) (*SecurityPolicyRuleResponseMsg, error)
}

func RegisterNwSecurityServer(s *grpc.Server, srv NwSecurityServer) {
	s.RegisterService(&_NwSecurity_serviceDesc, srv)
}

func _NwSecurity_SecurityProfileCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityProfileCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityProfileCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityProfileCreate(ctx, req.(*SecurityProfileRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityProfileUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityProfileUpdate(ctx, req.(*SecurityProfileRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityProfileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityProfileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityProfileDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityProfileDelete(ctx, req.(*SecurityProfileDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityProfileGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityProfileGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityProfileGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityProfileGet(ctx, req.(*SecurityProfileGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityGroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityGroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityGroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityGroupCreate(ctx, req.(*SecurityGroupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityGroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityGroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityGroupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityGroupUpdate(ctx, req.(*SecurityGroupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityGroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroupMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityGroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityGroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityGroupDelete(ctx, req.(*SecurityGroupMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityPolicyRuleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityPolicyRuleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityPolicyRuleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityPolicyRuleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityPolicyRuleCreate(ctx, req.(*SecurityPolicyRuleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityPolicyRuleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityPolicyRuleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityPolicyRuleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityPolicyRuleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityPolicyRuleUpdate(ctx, req.(*SecurityPolicyRuleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityPolicyRuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityPolicyRuleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityPolicyRuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/halproto.NwSecurity/SecurityPolicyRuleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityPolicyRuleDelete(ctx, req.(*SecurityPolicyRuleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _NwSecurity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "halproto.NwSecurity",
	HandlerType: (*NwSecurityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SecurityProfileCreate",
			Handler:    _NwSecurity_SecurityProfileCreate_Handler,
		},
		{
			MethodName: "SecurityProfileUpdate",
			Handler:    _NwSecurity_SecurityProfileUpdate_Handler,
		},
		{
			MethodName: "SecurityProfileDelete",
			Handler:    _NwSecurity_SecurityProfileDelete_Handler,
		},
		{
			MethodName: "SecurityProfileGet",
			Handler:    _NwSecurity_SecurityProfileGet_Handler,
		},
		{
			MethodName: "SecurityGroupCreate",
			Handler:    _NwSecurity_SecurityGroupCreate_Handler,
		},
		{
			MethodName: "SecurityGroupUpdate",
			Handler:    _NwSecurity_SecurityGroupUpdate_Handler,
		},
		{
			MethodName: "SecurityGroupDelete",
			Handler:    _NwSecurity_SecurityGroupDelete_Handler,
		},
		{
			MethodName: "SecurityPolicyRuleCreate",
			Handler:    _NwSecurity_SecurityPolicyRuleCreate_Handler,
		},
		{
			MethodName: "SecurityPolicyRuleUpdate",
			Handler:    _NwSecurity_SecurityPolicyRuleUpdate_Handler,
		},
		{
			MethodName: "SecurityPolicyRuleDelete",
			Handler:    _NwSecurity_SecurityPolicyRuleDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nwsec.proto",
}

func init() { proto.RegisterFile("nwsec.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 2019 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x58, 0x6d, 0x53, 0x1b, 0xc9,
	0x11, 0xb6, 0x0c, 0x06, 0xd3, 0x1c, 0x20, 0x96, 0x17, 0x0b, 0x30, 0x2f, 0x5e, 0xbf, 0x71, 0x5c,
	0x15, 0x97, 0x70, 0xbe, 0x72, 0xe5, 0xae, 0x92, 0x1c, 0x07, 0xc2, 0x56, 0x02, 0x92, 0x6e, 0x25,
	0x87, 0xf8, 0x52, 0xc9, 0x64, 0xbd, 0x3b, 0x5a, 0x26, 0x2c, 0xb3, 0xe3, 0x9d, 0x11, 0x58, 0xfe,
	0x92, 0xcf, 0x49, 0x55, 0x2a, 0x55, 0xf9, 0x41, 0xf9, 0x1b, 0xf9, 0x07, 0xf9, 0x09, 0xf9, 0x9c,
	0x9a, 0xd9, 0xd9, 0x17, 0xad, 0x24, 0x58, 0x5f, 0x9c, 0xe4, 0x0b, 0x25, 0xa6, 0xfb, 0x79, 0xba,
	0xa7, 0xfb, 0xd9, 0x9e, 0xd9, 0x85, 0x69, 0x7a, 0xc5, 0xb1, 0xb3, 0xcb, 0xc2, 0x40, 0x04, 0xc6,
	0xdd, 0x33, 0xdb, 0x57, 0xbf, 0x56, 0xe7, 0x45, 0x8f, 0x61, 0xfe, 0xb9, 0xfa, 0x1b, 0x19, 0xcd,
	0x2e, 0x54, 0x5a, 0xd8, 0xe9, 0x86, 0x44, 0xf4, 0x9a, 0x61, 0xd0, 0x21, 0x3e, 0xfe, 0x25, 0xee,
	0xbd, 0xb4, 0xa9, 0xeb, 0x63, 0x63, 0x13, 0x80, 0x45, 0x6b, 0x88, 0xb8, 0x95, 0xd2, 0x56, 0x69,
	0x7b, 0xe6, 0xe5, 0x2d, 0x6b, 0x4a, 0xaf, 0xd5, 0x5c, 0xe3, 0x29, 0xcc, 0xc6, 0x0e, 0x67, 0x0a,
	0x52, 0xb9, 0xbd, 0x55, 0xda, 0x9e, 0x78, 0x79, 0xcb, 0x9a, 0xd1, 0xeb, 0x11, 0xd3, 0xb7, 0x73,
	0x30, 0x73, 0x8e, 0x7b, 0x28, 0x08, 0xb5, 0x9f, 0xf9, 0x8f, 0x15, 0x58, 0xc8, 0xc5, 0x6d, 0x31,
	0xec, 0x18, 0x8f, 0x61, 0xfc, 0x02, 0x0b, 0x5b, 0x05, 0x9b, 0xde, 0x9b, 0xdf, 0x8d, 0x52, 0x6d,
	0xbc, 0xf9, 0x03, 0x76, 0xc4, 0x09, 0x16, 0xb6, 0xa5, 0xcc, 0xc6, 0x51, 0x8e, 0x4f, 0xc5, 0x9d,
	0xde, 0x33, 0x77, 0xe3, 0xad, 0xee, 0x8e, 0xda, 0x94, 0x35, 0x7d, 0x8e, 0x7b, 0x8d, 0x50, 0xef,
	0x70, 0x1b, 0xca, 0x0e, 0x7d, 0x47, 0x91, 0x08, 0x6d, 0xe7, 0x9c, 0x50, 0x0f, 0x61, 0x5a, 0x19,
	0xdb, 0x2a, 0x6d, 0xdf, 0xb5, 0x66, 0xe5, 0x7a, 0x5b, 0x2f, 0x57, 0xa9, 0xf1, 0x23, 0x58, 0xe4,
	0x98, 0x73, 0x12, 0x50, 0x44, 0x5c, 0x1f, 0x23, 0x41, 0x2e, 0x70, 0xd0, 0x15, 0x95, 0x71, 0x59,
	0x15, 0xcb, 0xd0, 0xb6, 0x9a, 0xeb, 0xe3, 0x76, 0x64, 0x31, 0xbe, 0x80, 0x65, 0xe1, 0x30, 0xa4,
	0xf8, 0x39, 0x16, 0x5d, 0x96, 0x60, 0xee, 0x28, 0xcc, 0x82, 0x70, 0xd8, 0x01, 0x7d, 0x47, 0x5b,
	0xd2, 0x16, 0x83, 0x76, 0x60, 0x5e, 0x81, 0xfc, 0x80, 0xa7, 0x31, 0x26, 0x94, 0xff, 0x9c, 0xf4,
	0x97, 0xeb, 0xf9, 0x00, 0xca, 0xf7, 0xca, 0x26, 0x22, 0x01, 0x4c, 0xa6, 0x01, 0xa4, 0xf1, 0xd4,
	0x26, 0x22, 0x06, 0xed, 0xc2, 0x02, 0x61, 0x88, 0x06, 0xe1, 0x85, 0xed, 0x93, 0xf7, 0xb6, 0x90,
	0x1b, 0xc2, 0xb4, 0x72, 0x57, 0x6d, 0x7a, 0x9e, 0xb0, 0x7a, 0xd6, 0x12, 0xed, 0x5b, 0x06, 0x19,
	0x00, 0x4c, 0x29, 0x80, 0x21, 0x9c, 0x01, 0xc4, 0x1e, 0x2c, 0x11, 0xe7, 0x62, 0x08, 0x04, 0x14,
	0x64, 0x41, 0x1a, 0xf3, 0x98, 0xcf, 0xc0, 0x20, 0x0c, 0xf1, 0x0b, 0xdb, 0xf7, 0x51, 0x27, 0xb4,
	0x3d, 0xe4, 0x86, 0x01, 0xab, 0x4c, 0x2b, 0xc0, 0x1c, 0x61, 0x2d, 0x69, 0x38, 0x0a, 0x6d, 0xef,
	0x30, 0x0c, 0x98, 0x51, 0x87, 0x45, 0xc2, 0x50, 0xc8, 0x2f, 0x5d, 0xd4, 0xf1, 0x6d, 0x8f, 0x23,
	0xdb, 0x91, 0x34, 0x95, 0x4f, 0xb6, 0x4a, 0xdb, 0xb3, 0x7b, 0xeb, 0xa9, 0x06, 0xfa, 0xa2, 0xec,
	0x2b, 0x27, 0xb9, 0x45, 0x8b, 0x5f, 0xba, 0x47, 0x12, 0x18, 0x2d, 0x19, 0x3f, 0x87, 0x4f, 0x08,
	0x43, 0x6e, 0x27, 0xe6, 0x99, 0x29, 0xc2, 0x03, 0x84, 0x1d, 0x76, 0x34, 0x41, 0x0d, 0xe6, 0x09,
	0x43, 0x01, 0x93, 0xff, 0x24, 0xd9, 0xcc, 0x16, 0x61, 0x99, 0x23, 0xac, 0x11, 0xc1, 0x34, 0x55,
	0x13, 0x96, 0x08, 0x43, 0x84, 0x5e, 0xda, 0x3e, 0x71, 0x91, 0x8f, 0x69, 0x4c, 0x37, 0x57, 0x84,
	0xce, 0x20, 0xac, 0x16, 0x41, 0x8f, 0xb1, 0x5e, 0x33, 0x5e, 0xc3, 0xaa, 0x6a, 0x07, 0x0f, 0x1d,
	0xf4, 0xb6, 0x8b, 0xa9, 0x73, 0x86, 0x2e, 0xb8, 0x17, 0xd3, 0x96, 0x8b, 0xd0, 0x2e, 0x4b, 0x82,
	0x56, 0xe8, 0x7c, 0xa7, 0xe0, 0x27, 0xdc, 0xd3, 0xd4, 0xbf, 0x82, 0x8a, 0xa2, 0x0e, 0xb1, 0x4b,
	0x42, 0xec, 0x88, 0x2c, 0xf1, 0x7c, 0x11, 0x62, 0x25, 0x14, 0x4b, 0xa3, 0x53, 0xde, 0x57, 0x9a,
	0x97, 0xd0, 0x4e, 0x80, 0x42, 0xfc, 0x36, 0xcb, 0x6b, 0x14, 0xe1, 0x5d, 0x94, 0xf0, 0x1a, 0xed,
	0x04, 0x16, 0x7e, 0x3b, 0x48, 0x6b, 0xbb, 0x6e, 0x98, 0xa7, 0x5d, 0x28, 0x4c, 0xbb, 0xef, 0xba,
	0x61, 0x1f, 0xed, 0xf7, 0xba, 0xc0, 0x72, 0x86, 0xe0, 0x30, 0xe8, 0x0a, 0x9c, 0x25, 0x5e, 0x2c,
	0x42, 0x7c, 0x4f, 0x12, 0xb4, 0x13, 0x7c, 0xca, 0x7d, 0x0a, 0x2b, 0x51, 0x85, 0xa5, 0xd8, 0xe5,
	0x2c, 0xcc, 0x52, 0x2f, 0x15, 0x2f, 0x31, 0xbf, 0x74, 0xdb, 0x3d, 0x96, 0x21, 0x6e, 0x83, 0x8a,
	0x89, 0xde, 0xd8, 0xae, 0x2c, 0x45, 0x17, 0x73, 0x11, 0xd3, 0x2e, 0x17, 0x2e, 0xc5, 0xb7, 0xb6,
	0x6b, 0x45, 0x58, 0xcd, 0xfa, 0x3b, 0xb8, 0xaf, 0x05, 0x11, 0x31, 0x86, 0x98, 0xb3, 0x80, 0x72,
	0x1c, 0x53, 0xdf, 0x2b, 0x42, 0xbd, 0x12, 0x89, 0x42, 0x31, 0x58, 0x9a, 0x40, 0xf3, 0x37, 0x60,
	0xb1, 0x5f, 0x70, 0x9a, 0xb7, 0x52, 0xec, 0xe1, 0xc8, 0x88, 0x2d, 0x57, 0x5f, 0x27, 0x70, 0x31,
	0xa2, 0x01, 0x45, 0xef, 0x71, 0x18, 0xc4, 0xac, 0x2b, 0x85, 0xeb, 0x7b, 0x10, 0xb8, 0xb8, 0x1e,
	0xd0, 0xef, 0x71, 0x18, 0x68, 0xe2, 0xdf, 0xc3, 0x06, 0x61, 0x97, 0xcf, 0x10, 0x93, 0x87, 0x4a,
	0xd0, 0x41, 0x2e, 0xb6, 0xc5, 0x99, 0x9a, 0x6a, 0x31, 0xfb, 0x6a, 0xb1, 0x5a, 0xb0, 0xcb, 0x67,
	0x4d, 0x42, 0xbd, 0x46, 0xe7, 0x50, 0x32, 0xc8, 0xf9, 0xa7, 0x23, 0xfc, 0x04, 0x56, 0xa3, 0xc1,
	0x4c, 0x11, 0xef, 0x51, 0xd4, 0x21, 0x21, 0x17, 0x88, 0x9d, 0x8b, 0x68, 0x74, 0xae, 0xa9, 0xd1,
	0xb9, 0xa4, 0xc6, 0x33, 0x6d, 0xf5, 0xe8, 0x91, 0x34, 0x37, 0xcf, 0x85, 0x1a, 0xa0, 0xdb, 0x50,
	0x96, 0x50, 0xde, 0xa3, 0x4e, 0x10, 0x9c, 0x13, 0x2c, 0x87, 0xf3, 0xfd, 0xe8, 0xd4, 0x13, 0x0e,
	0x6b, 0xc5, 0xcb, 0x55, 0x6a, 0x7c, 0x03, 0xeb, 0xca, 0x93, 0xf9, 0x44, 0xa8, 0xa3, 0x96, 0x9f,
	0xd9, 0xe7, 0x18, 0xb9, 0x58, 0xc8, 0xea, 0x63, 0x5a, 0x59, 0x57, 0xb0, 0x15, 0x09, 0x93, 0x3e,
	0x2f, 0x63, 0x97, 0x43, 0xe5, 0x51, 0xa5, 0xc6, 0x73, 0xa8, 0x0c, 0x65, 0x90, 0x49, 0x6e, 0x24,
	0x49, 0xe6, 0xc0, 0x32, 0xc9, 0x26, 0x48, 0xc3, 0x90, 0x31, 0xbf, 0x59, 0xa8, 0xd9, 0xc2, 0x19,
	0x98, 0xf3, 0xbf, 0x06, 0x99, 0x27, 0xea, 0x52, 0xfc, 0x8e, 0x61, 0x47, 0x60, 0x17, 0x5d, 0xf0,
	0x84, 0x75, 0xab, 0xd0, 0x20, 0x14, 0x0e, 0x7b, 0x95, 0xc0, 0x4f, 0x78, 0xcc, 0xec, 0xc0, 0x66,
	0x8e, 0xf9, 0x8a, 0x50, 0xc4, 0x1d, 0xdb, 0x4f, 0xa4, 0xff, 0xa0, 0x08, 0xff, 0x5a, 0x1f, 0xff,
	0x29, 0xa1, 0x2d, 0x49, 0x91, 0xa4, 0xaf, 0x1a, 0xde, 0x0d, 0x3d, 0xc4, 0x44, 0x88, 0x68, 0x20,
	0xe4, 0xb5, 0x22, 0xe6, 0x37, 0x0b, 0x89, 0x55, 0xf2, 0x87, 0x5e, 0x53, 0x84, 0xf5, 0x40, 0xb4,
	0xb0, 0x48, 0x26, 0xd8, 0x5a, 0xcc, 0x2c, 0x2b, 0x9d, 0xa7, 0x7e, 0x58, 0xb8, 0x34, 0xa1, 0x27,
	0xeb, 0xdd, 0xc7, 0x6d, 0xc3, 0x46, 0x92, 0xb5, 0xdd, 0xf3, 0x03, 0xdb, 0x45, 0x17, 0x84, 0x73,
	0xf9, 0x58, 0x68, 0xfa, 0x47, 0x45, 0xe8, 0x57, 0x75, 0xe6, 0x11, 0xc5, 0x49, 0xc4, 0x90, 0xce,
	0xf5, 0x48, 0x29, 0x02, 0x5d, 0x11, 0xf9, 0x94, 0xd9, 0xc2, 0x8e, 0xc9, 0x1f, 0x17, 0x1a, 0x66,
	0x4a, 0x2c, 0xe2, 0x94, 0x88, 0xb3, 0x43, 0x5b, 0xd8, 0xfd, 0xf5, 0x56, 0x6c, 0xf2, 0x20, 0xf6,
	0x44, 0x56, 0x2f, 0x4f, 0x8a, 0xd6, 0x5b, 0x32, 0x1e, 0x63, 0xfa, 0x42, 0xa4, 0x72, 0xb1, 0x23,
	0xb9, 0x64, 0x99, 0x95, 0x5e, 0xc8, 0xfb, 0x44, 0x2e, 0x4f, 0x0b, 0x4d, 0x87, 0x2c, 0xbd, 0x54,
	0x0b, 0x79, 0x8f, 0x47, 0x2a, 0x52, 0x70, 0x7d, 0x43, 0x89, 0x43, 0x6c, 0x7f, 0xb8, 0x22, 0xdb,
	0x3c, 0xba, 0xad, 0xa4, 0xd3, 0x53, 0x06, 0x11, 0x5c, 0x29, 0x86, 0x85, 0x98, 0x63, 0x9a, 0xa8,
	0xe6, 0xd3, 0xa2, 0x05, 0x6a, 0xf3, 0x7a, 0x20, 0x9a, 0x11, 0x38, 0xbd, 0x58, 0x48, 0xe2, 0xf8,
	0x1a, 0xd4, 0xf7, 0xf8, 0xef, 0x14, 0xe5, 0xd5, 0x37, 0xa1, 0xec, 0x04, 0x78, 0x13, 0x55, 0xc5,
	0x76, 0xce, 0x53, 0xa1, 0xe7, 0xd2, 0xfe, 0xac, 0xa8, 0x1a, 0xf7, 0x9d, 0x73, 0x2d, 0xf6, 0xbe,
	0xdc, 0xcd, 0x36, 0xac, 0xe4, 0xde, 0x3d, 0xf4, 0x59, 0x76, 0xc2, 0x3d, 0xe3, 0x39, 0x4c, 0xea,
	0xb3, 0xb1, 0x52, 0xda, 0x1a, 0xdb, 0x9e, 0xce, 0x06, 0x1a, 0xf2, 0x3a, 0x64, 0xc5, 0xde, 0xe6,
	0xcf, 0x60, 0x29, 0x6f, 0x17, 0xb6, 0xe8, 0x72, 0xe3, 0xf1, 0xc0, 0x2b, 0x98, 0x7c, 0x75, 0x9a,
	0xc8, 0xbd, 0x80, 0x99, 0x7f, 0x2b, 0xc1, 0xbd, 0x81, 0xb4, 0xa2, 0xb3, 0xd5, 0xf8, 0x1c, 0xc0,
	0x66, 0x04, 0x71, 0x45, 0xa8, 0xe0, 0xb3, 0x7b, 0x65, 0xfd, 0xe6, 0xb5, 0xcf, 0x48, 0x14, 0xc8,
	0x9a, 0xb2, 0xe3, 0x9f, 0xc6, 0x51, 0x1a, 0x53, 0x83, 0xa2, 0xd7, 0xaf, 0xcd, 0xd1, 0x9b, 0x89,
	0x38, 0xe2, 0xa4, 0xa2, 0x7f, 0xcd, 0xdf, 0xc0, 0xea, 0x88, 0x9c, 0x64, 0xad, 0x7e, 0x0a, 0x77,
	0xe3, 0xfb, 0x83, 0x2e, 0xd6, 0x83, 0x91, 0xfc, 0x31, 0xce, 0x4a, 0x20, 0xe6, 0x5f, 0x4a, 0x70,
	0x3f, 0xe7, 0x75, 0x88, 0x7d, 0x2c, 0xe2, 0x76, 0xfc, 0x8f, 0x5f, 0x35, 0x4d, 0x07, 0x36, 0xaf,
	0x4b, 0x47, 0xee, 0xf8, 0x9b, 0xbc, 0x3a, 0x9e, 0x8c, 0x0c, 0xd2, 0x87, 0x4d, 0x65, 0xd2, 0x82,
	0xad, 0x11, 0x8e, 0x69, 0x5d, 0xf3, 0xed, 0x1e, 0xbb, 0xa1, 0xdd, 0xe6, 0x9f, 0x4b, 0x03, 0x92,
	0x7e, 0x81, 0xc5, 0xff, 0xa9, 0x8c, 0xbf, 0x1d, 0xe8, 0x6a, 0x9a, 0x4b, 0xa4, 0x9a, 0x5c, 0x0d,
	0x1f, 0x8e, 0x8c, 0x90, 0x02, 0xd3, 0x02, 0x2e, 0xc3, 0xe2, 0x10, 0xe9, 0x72, 0xf3, 0xef, 0xa5,
	0x01, 0xad, 0x2a, 0xb8, 0x7e, 0x84, 0x7e, 0x0c, 0xe3, 0x9c, 0x61, 0x47, 0x17, 0xe1, 0x86, 0x87,
	0x5a, 0xb9, 0x1a, 0xcf, 0x61, 0xe2, 0xc3, 0x1e, 0x1e, 0xed, 0x6e, 0x3c, 0x83, 0x3b, 0xf2, 0x17,
	0x57, 0x1f, 0x2a, 0xa6, 0xf7, 0x36, 0xae, 0xc5, 0x71, 0x2b, 0x72, 0x36, 0x6d, 0x58, 0x1f, 0x9d,
	0x7f, 0x24, 0xbe, 0xfc, 0xe3, 0xf6, 0xe8, 0xfa, 0xca, 0x0d, 0x3c, 0x71, 0x0d, 0x98, 0x8f, 0xfd,
	0x5e, 0x84, 0x41, 0x97, 0x7d, 0xc8, 0x07, 0x9d, 0x05, 0xb8, 0xc3, 0x3d, 0x44, 0x5c, 0x55, 0x8c,
	0x49, 0x6b, 0x9c, 0x7b, 0x35, 0xd7, 0xac, 0x41, 0xb9, 0x8f, 0x50, 0xa6, 0xf9, 0x65, 0xbe, 0xbf,
	0x6b, 0x83, 0x59, 0x26, 0xd1, 0xd3, 0xbe, 0xee, 0xa5, 0x9f, 0x9b, 0x22, 0x6b, 0x54, 0xcb, 0x35,
	0x98, 0xe2, 0x5e, 0xff, 0xe0, 0xbc, 0xcb, 0x3d, 0x2d, 0xb5, 0x3f, 0xa6, 0x33, 0x57, 0x61, 0x7e,
	0xf8, 0xc0, 0xfc, 0x32, 0xd7, 0xeb, 0xf5, 0x51, 0x39, 0xf7, 0x75, 0xda, 0x3c, 0x4d, 0xbf, 0xcd,
	0xf5, 0x25, 0x20, 0xeb, 0xf0, 0xf5, 0x40, 0xbb, 0x36, 0x47, 0x90, 0x0e, 0xe9, 0xd4, 0x77, 0x30,
	0xd9, 0xc2, 0xe1, 0x25, 0x71, 0xb0, 0xb1, 0x07, 0xd3, 0x84, 0x21, 0x05, 0x73, 0x02, 0x5f, 0x6f,
	0x26, 0x6e, 0x53, 0xad, 0xd9, 0xd4, 0x06, 0x0b, 0x08, 0x8b, 0x7f, 0x1b, 0x06, 0x8c, 0xb3, 0x20,
	0x14, 0x6a, 0x33, 0x33, 0x96, 0xfa, 0x6d, 0xfe, 0xb3, 0x04, 0xcb, 0x89, 0x4a, 0x02, 0x9f, 0x38,
	0x3d, 0xab, 0xfb, 0x61, 0xdf, 0xf4, 0x56, 0x61, 0x8a, 0x87, 0x0e, 0xca, 0xca, 0x60, 0x92, 0x87,
	0x4e, 0xcb, 0xab, 0xb9, 0xd2, 0xe6, 0x72, 0xa1, 0x6d, 0x63, 0x91, 0xcd, 0xe5, 0x42, 0xd9, 0x1e,
	0xc2, 0x18, 0xbf, 0x74, 0x2a, 0xe3, 0xaa, 0x08, 0xf3, 0xd9, 0x22, 0xa8, 0x1d, 0x5a, 0xd2, 0x6a,
	0x6c, 0xc3, 0x84, 0x3e, 0xe0, 0xef, 0xe8, 0x76, 0x25, 0x7e, 0xfa, 0x4c, 0xd7, 0x76, 0x63, 0x03,
	0xa6, 0xc3, 0xae, 0x8f, 0x91, 0x1f, 0xa8, 0xaf, 0x81, 0x13, 0xea, 0x1d, 0x65, 0x4a, 0x2e, 0x1d,
	0x07, 0x5e, 0x95, 0x9a, 0xad, 0xcc, 0x49, 0x9c, 0xec, 0x53, 0x76, 0xe4, 0xab, 0xbc, 0x32, 0xb7,
	0x86, 0x3c, 0x3f, 0x7d, 0x95, 0x49, 0xe5, 0xf9, 0x75, 0xe6, 0x2b, 0x6c, 0xea, 0x12, 0x89, 0x67,
	0x53, 0x27, 0xd4, 0xa7, 0x52, 0x90, 0x4b, 0x5a, 0xa7, 0x7f, 0xca, 0xce, 0xa6, 0x04, 0xfd, 0xc3,
	0xd5, 0xfa, 0x55, 0x4e, 0xad, 0xe6, 0xb5, 0xfb, 0xe8, 0x97, 0x6c, 0x76, 0xcc, 0x0c, 0xa4, 0x52,
	0x7c, 0xcc, 0x0c, 0x40, 0x53, 0xf1, 0xee, 0x50, 0x58, 0x18, 0x72, 0x27, 0x33, 0x16, 0xa1, 0x5c,
	0x6f, 0x58, 0x27, 0x68, 0xff, 0xa0, 0x5d, 0x6b, 0xd4, 0x51, 0xbd, 0x51, 0xaf, 0x96, 0x6f, 0x19,
	0x4b, 0x30, 0x9f, 0x5d, 0xdd, 0x3f, 0x3e, 0x6e, 0x9c, 0x96, 0x4b, 0x79, 0xe7, 0x43, 0xab, 0xd1,
	0x2c, 0xdf, 0xce, 0xaf, 0x56, 0x0f, 0x6b, 0xed, 0xf2, 0xd8, 0xce, 0x5f, 0x4b, 0x30, 0xa1, 0x63,
	0x6c, 0xc2, 0x5a, 0xab, 0x7a, 0xf0, 0xca, 0xaa, 0xb5, 0x5f, 0xa3, 0x66, 0xe3, 0xb8, 0x76, 0xf0,
	0x3a, 0x17, 0x6e, 0x0b, 0xee, 0x8f, 0x70, 0x88, 0x23, 0x8f, 0xa6, 0x38, 0xac, 0xd6, 0x5f, 0x97,
	0x6f, 0x1b, 0x0f, 0x60, 0x7d, 0x84, 0x83, 0x55, 0xfd, 0x45, 0xf5, 0xa0, 0x5d, 0x1e, 0xdb, 0xfb,
	0xd7, 0x24, 0x40, 0xfd, 0x2a, 0x2e, 0x96, 0xe1, 0x0e, 0xdc, 0x0d, 0x0f, 0x42, 0x6c, 0x0b, 0x6c,
	0x3c, 0xbc, 0xe6, 0xbe, 0x14, 0x1f, 0x98, 0xab, 0x8f, 0x6e, 0xbc, 0x54, 0x9d, 0x70, 0xcf, 0xbc,
	0x35, 0x24, 0xca, 0x2b, 0xe6, 0x7e, 0xf4, 0x28, 0x6c, 0x20, 0x4a, 0x74, 0x81, 0x31, 0x3e, 0x2d,
	0x76, 0x15, 0x92, 0xb1, 0x76, 0x6e, 0x74, 0xcd, 0x46, 0xf4, 0xc0, 0x18, 0x3c, 0xdd, 0x8c, 0x27,
	0x05, 0x6e, 0x0d, 0x32, 0xd6, 0xd3, 0x22, 0x67, 0x64, 0x14, 0xe8, 0x34, 0x77, 0x04, 0xe9, 0x26,
	0xad, 0x8e, 0x18, 0xdb, 0x92, 0xdd, 0xbc, 0x61, 0xa4, 0x0f, 0x27, 0xd6, 0x7d, 0xf9, 0xf8, 0xc4,
	0xba, 0x15, 0xff, 0x39, 0x71, 0x67, 0xd8, 0xb8, 0xd3, 0xf5, 0xd8, 0xbc, 0x6e, 0x1c, 0x8c, 0x2a,
	0xf9, 0xb0, 0x51, 0x33, 0x2a, 0x8e, 0x2e, 0xcf, 0x7f, 0x3d, 0x8e, 0xae, 0xd6, 0x47, 0x8c, 0xf3,
	0x66, 0x42, 0xb9, 0x7d, 0xf1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0xda, 0xd9, 0xdd, 0xdf,
	0x1b, 0x00, 0x00,
}
