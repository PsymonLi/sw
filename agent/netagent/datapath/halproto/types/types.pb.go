// Code generated by protoc-gen-go.
// source: types/types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types/types.proto

It has these top-level messages:
	ObjectMeta
	EncapInfo
	IPAddress
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// IP protocol numbers
type IPProtocol int32

const (
	IPProtocol_IP_PROTO_NONE   IPProtocol = 0
	IPProtocol_IP_PROTO_ICMP   IPProtocol = 1
	IPProtocol_IP_PROTO_IPV4   IPProtocol = 4
	IPProtocol_IP_PROTO_TCP    IPProtocol = 6
	IPProtocol_IP_PROTO_UDP    IPProtocol = 17
	IPProtocol_IP_PROTO_GRE    IPProtocol = 47
	IPProtocol_IP_PROTO_ESP    IPProtocol = 50
	IPProtocol_IP_PROTO_AH     IPProtocol = 51
	IPProtocol_IP_PROTO_ICMPV6 IPProtocol = 58
)

var IPProtocol_name = map[int32]string{
	0:  "IP_PROTO_NONE",
	1:  "IP_PROTO_ICMP",
	4:  "IP_PROTO_IPV4",
	6:  "IP_PROTO_TCP",
	17: "IP_PROTO_UDP",
	47: "IP_PROTO_GRE",
	50: "IP_PROTO_ESP",
	51: "IP_PROTO_AH",
	58: "IP_PROTO_ICMPV6",
}
var IPProtocol_value = map[string]int32{
	"IP_PROTO_NONE":   0,
	"IP_PROTO_ICMP":   1,
	"IP_PROTO_IPV4":   4,
	"IP_PROTO_TCP":    6,
	"IP_PROTO_UDP":    17,
	"IP_PROTO_GRE":    47,
	"IP_PROTO_ESP":    50,
	"IP_PROTO_AH":     51,
	"IP_PROTO_ICMPV6": 58,
}

func (x IPProtocol) String() string {
	return proto.EnumName(IPProtocol_name, int32(x))
}
func (IPProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// API return codes (more descriptive than protobuf enums)
type ApiStatus int32

const (
	ApiStatus_API_STATUS_OK                       ApiStatus = 0
	ApiStatus_API_STATUS_ERR                      ApiStatus = 1
	ApiStatus_API_STATUS_INVALID_ARG              ApiStatus = 2
	ApiStatus_API_STATUS_EXISTS_ALREADY           ApiStatus = 3
	ApiStatus_API_STATUS_OUT_OF_MEM               ApiStatus = 4
	ApiStatus_API_STATUS_NOT_FOUND                ApiStatus = 5
	ApiStatus_API_STATUS_OUT_OF_RESOURCE          ApiStatus = 6
	ApiStatus_API_STATUS_ENCAP_INVALID            ApiStatus = 7
	ApiStatus_API_STATUS_TENANT_ID_INVALID        ApiStatus = 8
	ApiStatus_API_STATUS_TENANT_NOT_FOUND         ApiStatus = 9
	ApiStatus_API_STATUS_L2_SEGMENT_ID_INVALID    ApiStatus = 10
	ApiStatus_API_STATUS_L2_SEGMENT_NOT_FOUND     ApiStatus = 11
	ApiStatus_API_STATUS_INTERFACE_ID_INVALID     ApiStatus = 12
	ApiStatus_API_STATUS_INTERFACE_NOT_FOUND      ApiStatus = 13
	ApiStatus_API_STATUS_IF_TYPE_INVALID          ApiStatus = 14
	ApiStatus_API_STATUS_IF_INFO_INVALID          ApiStatus = 15
	ApiStatus_API_STATUS_IF_L2SEGMENT_INVALID     ApiStatus = 16
	ApiStatus_API_STATUS_IF_ENIC_INFO_INVALID     ApiStatus = 17
	ApiStatus_API_STATUS_IF_ENIC_TYPE_INVALID     ApiStatus = 18
	ApiStatus_API_STATUS_IF_LIF_INFO_NOT_INVALID  ApiStatus = 19
	ApiStatus_API_STATUS_IF_LIFQ_INFO_NOT_INVALID ApiStatus = 20
	ApiStatus_API_STATUS_ENDPOINT_NOT_FOUND       ApiStatus = 21
	ApiStatus_API_STATUS_FLOW_KEY_INVALID         ApiStatus = 22
	ApiStatus_API_STATUS_FLOW_INFO_INVALID        ApiStatus = 23
	ApiStatus_API_STATUS_FLOW_NOT_FOUND           ApiStatus = 24
	ApiStatus_API_STATUS_SESSION_NOT_FOUND        ApiStatus = 25
	ApiStatus_API_STATUS_HANDLE_INVALID           ApiStatus = 26
	ApiStatus_API_STATUS_HW_PROG_ERR              ApiStatus = 27
	ApiStatus_API_STATUS_LIF_ID_INVALID           ApiStatus = 28
	ApiStatus_API_STATUS_LIF_NOT_FOUND            ApiStatus = 29
)

var ApiStatus_name = map[int32]string{
	0:  "API_STATUS_OK",
	1:  "API_STATUS_ERR",
	2:  "API_STATUS_INVALID_ARG",
	3:  "API_STATUS_EXISTS_ALREADY",
	4:  "API_STATUS_OUT_OF_MEM",
	5:  "API_STATUS_NOT_FOUND",
	6:  "API_STATUS_OUT_OF_RESOURCE",
	7:  "API_STATUS_ENCAP_INVALID",
	8:  "API_STATUS_TENANT_ID_INVALID",
	9:  "API_STATUS_TENANT_NOT_FOUND",
	10: "API_STATUS_L2_SEGMENT_ID_INVALID",
	11: "API_STATUS_L2_SEGMENT_NOT_FOUND",
	12: "API_STATUS_INTERFACE_ID_INVALID",
	13: "API_STATUS_INTERFACE_NOT_FOUND",
	14: "API_STATUS_IF_TYPE_INVALID",
	15: "API_STATUS_IF_INFO_INVALID",
	16: "API_STATUS_IF_L2SEGMENT_INVALID",
	17: "API_STATUS_IF_ENIC_INFO_INVALID",
	18: "API_STATUS_IF_ENIC_TYPE_INVALID",
	19: "API_STATUS_IF_LIF_INFO_NOT_INVALID",
	20: "API_STATUS_IF_LIFQ_INFO_NOT_INVALID",
	21: "API_STATUS_ENDPOINT_NOT_FOUND",
	22: "API_STATUS_FLOW_KEY_INVALID",
	23: "API_STATUS_FLOW_INFO_INVALID",
	24: "API_STATUS_FLOW_NOT_FOUND",
	25: "API_STATUS_SESSION_NOT_FOUND",
	26: "API_STATUS_HANDLE_INVALID",
	27: "API_STATUS_HW_PROG_ERR",
	28: "API_STATUS_LIF_ID_INVALID",
	29: "API_STATUS_LIF_NOT_FOUND",
}
var ApiStatus_value = map[string]int32{
	"API_STATUS_OK":                       0,
	"API_STATUS_ERR":                      1,
	"API_STATUS_INVALID_ARG":              2,
	"API_STATUS_EXISTS_ALREADY":           3,
	"API_STATUS_OUT_OF_MEM":               4,
	"API_STATUS_NOT_FOUND":                5,
	"API_STATUS_OUT_OF_RESOURCE":          6,
	"API_STATUS_ENCAP_INVALID":            7,
	"API_STATUS_TENANT_ID_INVALID":        8,
	"API_STATUS_TENANT_NOT_FOUND":         9,
	"API_STATUS_L2_SEGMENT_ID_INVALID":    10,
	"API_STATUS_L2_SEGMENT_NOT_FOUND":     11,
	"API_STATUS_INTERFACE_ID_INVALID":     12,
	"API_STATUS_INTERFACE_NOT_FOUND":      13,
	"API_STATUS_IF_TYPE_INVALID":          14,
	"API_STATUS_IF_INFO_INVALID":          15,
	"API_STATUS_IF_L2SEGMENT_INVALID":     16,
	"API_STATUS_IF_ENIC_INFO_INVALID":     17,
	"API_STATUS_IF_ENIC_TYPE_INVALID":     18,
	"API_STATUS_IF_LIF_INFO_NOT_INVALID":  19,
	"API_STATUS_IF_LIFQ_INFO_NOT_INVALID": 20,
	"API_STATUS_ENDPOINT_NOT_FOUND":       21,
	"API_STATUS_FLOW_KEY_INVALID":         22,
	"API_STATUS_FLOW_INFO_INVALID":        23,
	"API_STATUS_FLOW_NOT_FOUND":           24,
	"API_STATUS_SESSION_NOT_FOUND":        25,
	"API_STATUS_HANDLE_INVALID":           26,
	"API_STATUS_HW_PROG_ERR":              27,
	"API_STATUS_LIF_ID_INVALID":           28,
	"API_STATUS_LIF_NOT_FOUND":            29,
}

func (x ApiStatus) String() string {
	return proto.EnumName(ApiStatus_name, int32(x))
}
func (ApiStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Types of L2 segments
type L2SegmentType int32

const (
	L2SegmentType_L2_SEGMENT_TYPE_NONE   L2SegmentType = 0
	L2SegmentType_L2_SEGMENT_TYPE_TENANT L2SegmentType = 1
	L2SegmentType_L2_SEGMENT_TYPE_MGMT   L2SegmentType = 2
	L2SegmentType_L2_SEGMENT_TYPE_INFRA  L2SegmentType = 3
	L2SegmentType_L2_SEGMENT_PRIMARY     L2SegmentType = 4
	L2SegmentType_L2_SEGMENT_ISOLATED    L2SegmentType = 5
)

var L2SegmentType_name = map[int32]string{
	0: "L2_SEGMENT_TYPE_NONE",
	1: "L2_SEGMENT_TYPE_TENANT",
	2: "L2_SEGMENT_TYPE_MGMT",
	3: "L2_SEGMENT_TYPE_INFRA",
	4: "L2_SEGMENT_PRIMARY",
	5: "L2_SEGMENT_ISOLATED",
}
var L2SegmentType_value = map[string]int32{
	"L2_SEGMENT_TYPE_NONE":   0,
	"L2_SEGMENT_TYPE_TENANT": 1,
	"L2_SEGMENT_TYPE_MGMT":   2,
	"L2_SEGMENT_TYPE_INFRA":  3,
	"L2_SEGMENT_PRIMARY":     4,
	"L2_SEGMENT_ISOLATED":    5,
}

func (x L2SegmentType) String() string {
	return proto.EnumName(L2SegmentType_name, int32(x))
}
func (L2SegmentType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Supported wire encaps for the L2 segments
type EncapType int32

const (
	EncapType_ENCAP_TYPE_NONE     EncapType = 0
	EncapType_ENCAP_TYPE_DOT1Q    EncapType = 1
	EncapType_ENCAP_TYPE_VXLAN    EncapType = 2
	EncapType_ENCAP_TYPE_IP_IN_IP EncapType = 3
	EncapType_ENCAP_TYPE_GRE      EncapType = 4
)

var EncapType_name = map[int32]string{
	0: "ENCAP_TYPE_NONE",
	1: "ENCAP_TYPE_DOT1Q",
	2: "ENCAP_TYPE_VXLAN",
	3: "ENCAP_TYPE_IP_IN_IP",
	4: "ENCAP_TYPE_GRE",
}
var EncapType_value = map[string]int32{
	"ENCAP_TYPE_NONE":     0,
	"ENCAP_TYPE_DOT1Q":    1,
	"ENCAP_TYPE_VXLAN":    2,
	"ENCAP_TYPE_IP_IN_IP": 3,
	"ENCAP_TYPE_GRE":      4,
}

func (x EncapType) String() string {
	return proto.EnumName(EncapType_name, int32(x))
}
func (EncapType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// IP address families
type IPAddressFamily int32

const (
	IPAddressFamily_IP_AF_NONE  IPAddressFamily = 0
	IPAddressFamily_IP_AF_INET  IPAddressFamily = 1
	IPAddressFamily_IP_AF_INET6 IPAddressFamily = 2
)

var IPAddressFamily_name = map[int32]string{
	0: "IP_AF_NONE",
	1: "IP_AF_INET",
	2: "IP_AF_INET6",
}
var IPAddressFamily_value = map[string]int32{
	"IP_AF_NONE":  0,
	"IP_AF_INET":  1,
	"IP_AF_INET6": 2,
}

func (x IPAddressFamily) String() string {
	return proto.EnumName(IPAddressFamily_name, int32(x))
}
func (IPAddressFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// common meta object that is part of all other top level objects
// TODO: should we add last updated timestamp, revision etc. here ?
type ObjectMeta struct {
	TenantId uint32 `protobuf:"fixed32,1,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ObjectMeta) GetTenantId() uint32 {
	if m != nil {
		return m.TenantId
	}
	return 0
}

// EncapInfo captures wire encap information
type EncapInfo struct {
	EncapType  EncapType `protobuf:"varint,1,opt,name=encap_type,json=encapType,enum=types.EncapType" json:"encap_type,omitempty"`
	EncapValue uint32    `protobuf:"varint,2,opt,name=encap_value,json=encapValue" json:"encap_value,omitempty"`
}

func (m *EncapInfo) Reset()                    { *m = EncapInfo{} }
func (m *EncapInfo) String() string            { return proto.CompactTextString(m) }
func (*EncapInfo) ProtoMessage()               {}
func (*EncapInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EncapInfo) GetEncapType() EncapType {
	if m != nil {
		return m.EncapType
	}
	return EncapType_ENCAP_TYPE_NONE
}

func (m *EncapInfo) GetEncapValue() uint32 {
	if m != nil {
		return m.EncapValue
	}
	return 0
}

// IP address structure
type IPAddress struct {
	IpAf IPAddressFamily `protobuf:"varint,1,opt,name=ip_af,json=ipAf,enum=types.IPAddressFamily" json:"ip_af,omitempty"`
	// Types that are valid to be assigned to V4OrV6:
	//	*IPAddress_V4Addr
	//	*IPAddress_V6Addr
	V4OrV6 isIPAddress_V4OrV6 `protobuf_oneof:"v4_or_v6"`
}

func (m *IPAddress) Reset()                    { *m = IPAddress{} }
func (m *IPAddress) String() string            { return proto.CompactTextString(m) }
func (*IPAddress) ProtoMessage()               {}
func (*IPAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isIPAddress_V4OrV6 interface {
	isIPAddress_V4OrV6()
}

type IPAddress_V4Addr struct {
	V4Addr uint32 `protobuf:"fixed32,2,opt,name=v4_addr,json=v4Addr,oneof"`
}
type IPAddress_V6Addr struct {
	V6Addr []byte `protobuf:"bytes,3,opt,name=v6_addr,json=v6Addr,proto3,oneof"`
}

func (*IPAddress_V4Addr) isIPAddress_V4OrV6() {}
func (*IPAddress_V6Addr) isIPAddress_V4OrV6() {}

func (m *IPAddress) GetV4OrV6() isIPAddress_V4OrV6 {
	if m != nil {
		return m.V4OrV6
	}
	return nil
}

func (m *IPAddress) GetIpAf() IPAddressFamily {
	if m != nil {
		return m.IpAf
	}
	return IPAddressFamily_IP_AF_NONE
}

func (m *IPAddress) GetV4Addr() uint32 {
	if x, ok := m.GetV4OrV6().(*IPAddress_V4Addr); ok {
		return x.V4Addr
	}
	return 0
}

func (m *IPAddress) GetV6Addr() []byte {
	if x, ok := m.GetV4OrV6().(*IPAddress_V6Addr); ok {
		return x.V6Addr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IPAddress) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IPAddress_OneofMarshaler, _IPAddress_OneofUnmarshaler, _IPAddress_OneofSizer, []interface{}{
		(*IPAddress_V4Addr)(nil),
		(*IPAddress_V6Addr)(nil),
	}
}

func _IPAddress_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IPAddress)
	// v4_or_v6
	switch x := m.V4OrV6.(type) {
	case *IPAddress_V4Addr:
		b.EncodeVarint(2<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(x.V4Addr))
	case *IPAddress_V6Addr:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.V6Addr)
	case nil:
	default:
		return fmt.Errorf("IPAddress.V4OrV6 has unexpected type %T", x)
	}
	return nil
}

func _IPAddress_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IPAddress)
	switch tag {
	case 2: // v4_or_v6.v4_addr
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.V4OrV6 = &IPAddress_V4Addr{uint32(x)}
		return true, err
	case 3: // v4_or_v6.v6_addr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.V4OrV6 = &IPAddress_V6Addr{x}
		return true, err
	default:
		return false, nil
	}
}

func _IPAddress_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IPAddress)
	// v4_or_v6
	switch x := m.V4OrV6.(type) {
	case *IPAddress_V4Addr:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *IPAddress_V6Addr:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.V6Addr)))
		n += len(x.V6Addr)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ObjectMeta)(nil), "types.ObjectMeta")
	proto.RegisterType((*EncapInfo)(nil), "types.EncapInfo")
	proto.RegisterType((*IPAddress)(nil), "types.IPAddress")
	proto.RegisterEnum("types.IPProtocol", IPProtocol_name, IPProtocol_value)
	proto.RegisterEnum("types.ApiStatus", ApiStatus_name, ApiStatus_value)
	proto.RegisterEnum("types.L2SegmentType", L2SegmentType_name, L2SegmentType_value)
	proto.RegisterEnum("types.EncapType", EncapType_name, EncapType_value)
	proto.RegisterEnum("types.IPAddressFamily", IPAddressFamily_name, IPAddressFamily_value)
}

func init() { proto.RegisterFile("types/types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 817 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x55, 0x5d, 0x6f, 0xdb, 0x36,
	0x14, 0x8d, 0x1c, 0x27, 0x8e, 0x6f, 0xbe, 0x18, 0x26, 0x75, 0x9d, 0xaf, 0xc6, 0x73, 0x87, 0x2d,
	0xf3, 0x80, 0x06, 0x73, 0x03, 0x3f, 0xec, 0x8d, 0xb5, 0x28, 0x87, 0xa8, 0x4c, 0xb1, 0x94, 0xec,
	0x36, 0x0f, 0x03, 0xe1, 0xc6, 0xca, 0xe0, 0x21, 0xb5, 0x8d, 0x44, 0x31, 0x90, 0xfd, 0xa5, 0x3d,
	0xee, 0xbf, 0xec, 0xf7, 0x0c, 0x94, 0x1c, 0x99, 0x92, 0xd3, 0x17, 0xc3, 0x3c, 0xe7, 0xf0, 0xdc,
	0xcb, 0x4b, 0xde, 0x2b, 0xd8, 0x8b, 0x9e, 0xa6, 0xe1, 0xc3, 0x45, 0xfc, 0xfb, 0x6e, 0x7a, 0x3f,
	0x89, 0x26, 0x78, 0x2d, 0x5e, 0xd4, 0x7f, 0x01, 0xf0, 0xbe, 0xfe, 0x15, 0xde, 0x44, 0xdd, 0x30,
	0x1a, 0xe0, 0x63, 0x28, 0x47, 0xe1, 0x78, 0x30, 0x8e, 0xd4, 0x68, 0x58, 0xb5, 0x6a, 0xd6, 0x79,
	0x49, 0x6e, 0x24, 0x00, 0x1b, 0xd6, 0xff, 0x80, 0x32, 0x1d, 0xdf, 0x0c, 0xa6, 0x6c, 0x7c, 0x3b,
	0xc1, 0x17, 0x00, 0xa1, 0x5e, 0x28, 0x6d, 0x13, 0x4b, 0x77, 0x9a, 0xe8, 0x5d, 0x12, 0x20, 0x26,
	0x82, 0xa7, 0x69, 0x28, 0xcb, 0xe9, 0x5f, 0x7c, 0x06, 0x9b, 0xc9, 0x86, 0xd9, 0xe0, 0xee, 0x31,
	0xac, 0x16, 0x6a, 0xd6, 0xf9, 0xb6, 0x4c, 0x3c, 0xfa, 0x1a, 0xa9, 0xff, 0x0d, 0x65, 0x26, 0xc8,
	0x70, 0x78, 0x1f, 0x3e, 0x3c, 0xe0, 0x5f, 0x61, 0x6d, 0x34, 0x55, 0x83, 0xdb, 0xb9, 0x73, 0x65,
	0xee, 0x9c, 0x0a, 0x9c, 0xc1, 0xb7, 0xd1, 0xdd, 0x93, 0x2c, 0x8e, 0xa6, 0xe4, 0x16, 0x1f, 0x42,
	0x69, 0x76, 0xa9, 0x06, 0xc3, 0xe1, 0x7d, 0x6c, 0x5b, 0xba, 0x5a, 0x91, 0xeb, 0xb3, 0x4b, 0xad,
	0x8c, 0xa9, 0x56, 0x42, 0xad, 0xd6, 0xac, 0xf3, 0xad, 0x98, 0x6a, 0x69, 0xea, 0x03, 0xc0, 0xc6,
	0xec, 0x52, 0x4d, 0xee, 0xd5, 0xac, 0xd5, 0xf8, 0xd7, 0x02, 0x60, 0x42, 0xe8, 0xc2, 0xdc, 0x4c,
	0xee, 0xf0, 0x1e, 0x6c, 0x33, 0xa1, 0x84, 0xf4, 0x02, 0x4f, 0x71, 0x8f, 0x53, 0xb4, 0x92, 0x81,
	0x58, 0xbb, 0x2b, 0x90, 0x95, 0x85, 0x44, 0xff, 0x12, 0x15, 0x31, 0x82, 0xad, 0x14, 0x0a, 0xda,
	0x02, 0xad, 0x67, 0x90, 0x9e, 0x2d, 0xd0, 0x5e, 0x06, 0xe9, 0x48, 0x8a, 0x2e, 0x32, 0x08, 0xf5,
	0x05, 0x6a, 0xe2, 0x5d, 0xd8, 0x4c, 0x11, 0x72, 0x85, 0xde, 0xe3, 0x7d, 0xd8, 0xcd, 0x84, 0xef,
	0xb7, 0xd0, 0xef, 0x8d, 0xff, 0x4a, 0x50, 0x26, 0xd3, 0x91, 0x1f, 0x0d, 0xa2, 0xc7, 0x07, 0x9d,
	0x0e, 0x11, 0x4c, 0xf9, 0x01, 0x09, 0x7a, 0xbe, 0xf2, 0x3e, 0xa2, 0x15, 0x8c, 0x61, 0xc7, 0x80,
	0xa8, 0x94, 0xc8, 0xc2, 0x47, 0x50, 0x31, 0x30, 0xc6, 0xfb, 0xc4, 0x65, 0xb6, 0x22, 0xb2, 0x83,
	0x0a, 0xf8, 0x14, 0x0e, 0x4d, 0xfd, 0x17, 0xe6, 0x07, 0xbe, 0x22, 0xae, 0xa4, 0xc4, 0xbe, 0x46,
	0xab, 0xf8, 0x10, 0x5e, 0x99, 0x11, 0x7a, 0x81, 0xf2, 0x1c, 0xd5, 0xa5, 0x5d, 0x54, 0xc4, 0x55,
	0x38, 0x30, 0x28, 0xee, 0x05, 0xca, 0xf1, 0x7a, 0xdc, 0x46, 0x6b, 0xf8, 0x0d, 0x1c, 0x2d, 0x6f,
	0x92, 0xd4, 0xf7, 0x7a, 0xb2, 0x4d, 0xd1, 0x3a, 0x3e, 0x81, 0xaa, 0x19, 0x93, 0xb7, 0x89, 0x78,
	0xce, 0x0a, 0x95, 0x70, 0x0d, 0x4e, 0x0c, 0x36, 0xa0, 0x9c, 0xf0, 0x40, 0x31, 0x3b, 0x55, 0x6c,
	0xe0, 0x33, 0x38, 0x5e, 0x56, 0x2c, 0x12, 0x28, 0xe3, 0x1f, 0xa1, 0x66, 0x08, 0xdc, 0xa6, 0xf2,
	0x69, 0xa7, 0x4b, 0xb3, 0x36, 0x80, 0xdf, 0xc2, 0xd9, 0xcb, 0xaa, 0x85, 0xd5, 0x66, 0x4e, 0xc4,
	0x78, 0x40, 0xa5, 0x43, 0xda, 0xd4, 0x74, 0xda, 0xc2, 0x75, 0x78, 0xf3, 0xa2, 0x68, 0x61, 0xb4,
	0x9d, 0x2b, 0x0a, 0x73, 0x54, 0x70, 0x2d, 0x68, 0xea, 0xb1, 0xb3, 0xcc, 0x33, 0xee, 0x78, 0x29,
	0xbf, 0x9b, 0x4f, 0xc4, 0x51, 0x6e, 0x33, 0x3d, 0xd5, 0x5c, 0x84, 0x96, 0x45, 0x94, 0xb3, 0x76,
	0xd6, 0x69, 0xef, 0x3b, 0xa2, 0x4c, 0x3a, 0x18, 0xff, 0x04, 0xf5, 0x5c, 0xb8, 0xe7, 0x94, 0xf4,
	0xa1, 0x9e, 0x75, 0xfb, 0xf8, 0x67, 0x78, 0xbb, 0xa4, 0xfb, 0xb4, 0x2c, 0x3c, 0xc0, 0x3f, 0xc0,
	0x69, 0xe6, 0xd2, 0x6d, 0xe1, 0xb1, 0x4c, 0xad, 0x5f, 0xe5, 0xee, 0xd5, 0x71, 0xbd, 0xcf, 0xea,
	0x23, 0xbd, 0x4e, 0x3d, 0x2a, 0xb9, 0xa7, 0x11, 0x0b, 0x32, 0x67, 0x7b, 0x9d, 0x7b, 0xce, 0xb1,
	0x62, 0x11, 0xa1, 0x9a, 0x33, 0xf0, 0xa9, 0xef, 0x33, 0x8f, 0x1b, 0x8a, 0xc3, 0x9c, 0xc1, 0x15,
	0xe1, 0xb6, 0xbb, 0x28, 0xcb, 0x51, 0xae, 0x95, 0xae, 0x3e, 0xeb, 0xfe, 0xec, 0xc4, 0x6d, 0x76,
	0x9c, 0xdb, 0x1a, 0xd7, 0x6b, 0xf1, 0x48, 0x4e, 0x72, 0xaf, 0x5e, 0xd3, 0x8b, 0xb8, 0xa7, 0x8d,
	0x7f, 0x2c, 0xd8, 0x76, 0x9b, 0x7e, 0xf8, 0xe7, 0xb7, 0x70, 0x1c, 0xc5, 0xd3, 0xb3, 0x0a, 0x07,
	0xc6, 0x9b, 0x8c, 0xaf, 0x67, 0x3e, 0x98, 0x8e, 0xa0, 0x92, 0x67, 0x92, 0x26, 0x40, 0xd6, 0x4b,
	0xbb, 0xba, 0x9d, 0x6e, 0x80, 0x0a, 0xba, 0x95, 0xf3, 0x0c, 0xe3, 0x8e, 0x24, 0x68, 0x15, 0x57,
	0x00, 0x1b, 0x94, 0x90, 0xac, 0x4b, 0xe4, 0x35, 0x2a, 0xe2, 0xd7, 0xb0, 0x6f, 0x36, 0x8f, 0xef,
	0xb9, 0x24, 0xa0, 0x36, 0x5a, 0x6b, 0x3c, 0x81, 0x31, 0xe6, 0xf7, 0x61, 0x37, 0xe9, 0x61, 0x33,
	0xc7, 0x03, 0x40, 0x06, 0x68, 0x7b, 0xc1, 0x6f, 0x9f, 0x90, 0x95, 0x43, 0xfb, 0x5f, 0x5c, 0xc2,
	0x51, 0x41, 0x87, 0x31, 0x50, 0xa6, 0x87, 0x81, 0x62, 0x02, 0xad, 0xea, 0x61, 0x66, 0x10, 0x7a,
	0x72, 0x16, 0x1b, 0x1f, 0xf4, 0x58, 0xcc, 0x7c, 0x12, 0xf0, 0x8e, 0x9e, 0xe4, 0x8a, 0x38, 0xcf,
	0xb1, 0xd3, 0x35, 0xe3, 0x54, 0xd7, 0x24, 0x19, 0xad, 0xf3, 0x75, 0x0b, 0x15, 0xbe, 0xae, 0xc7,
	0xdf, 0xc3, 0xf7, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xb5, 0x0b, 0x53, 0x24, 0x07, 0x00,
	0x00,
}
