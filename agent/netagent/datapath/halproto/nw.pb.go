// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nw.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NetworkKeyHandle uniquely identifies a Network
type NetworkKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*NetworkKeyHandle_IpPrefix
	//	*NetworkKeyHandle_NwHandle
	KeyOrHandle isNetworkKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *NetworkKeyHandle) Reset()                    { *m = NetworkKeyHandle{} }
func (m *NetworkKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*NetworkKeyHandle) ProtoMessage()               {}
func (*NetworkKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type isNetworkKeyHandle_KeyOrHandle interface {
	isNetworkKeyHandle_KeyOrHandle()
}

type NetworkKeyHandle_IpPrefix struct {
	IpPrefix *IPPrefix `protobuf:"bytes,1,opt,name=ip_prefix,json=ipPrefix,oneof"`
}
type NetworkKeyHandle_NwHandle struct {
	NwHandle uint64 `protobuf:"fixed64,2,opt,name=nw_handle,json=nwHandle,oneof"`
}

func (*NetworkKeyHandle_IpPrefix) isNetworkKeyHandle_KeyOrHandle() {}
func (*NetworkKeyHandle_NwHandle) isNetworkKeyHandle_KeyOrHandle() {}

func (m *NetworkKeyHandle) GetKeyOrHandle() isNetworkKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NetworkKeyHandle) GetIpPrefix() *IPPrefix {
	if x, ok := m.GetKeyOrHandle().(*NetworkKeyHandle_IpPrefix); ok {
		return x.IpPrefix
	}
	return nil
}

func (m *NetworkKeyHandle) GetNwHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*NetworkKeyHandle_NwHandle); ok {
		return x.NwHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NetworkKeyHandle_OneofMarshaler, _NetworkKeyHandle_OneofUnmarshaler, _NetworkKeyHandle_OneofSizer, []interface{}{
		(*NetworkKeyHandle_IpPrefix)(nil),
		(*NetworkKeyHandle_NwHandle)(nil),
	}
}

func _NetworkKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NetworkKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *NetworkKeyHandle_IpPrefix:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpPrefix); err != nil {
			return err
		}
	case *NetworkKeyHandle_NwHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.NwHandle))
	case nil:
	default:
		return fmt.Errorf("NetworkKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _NetworkKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NetworkKeyHandle)
	switch tag {
	case 1: // key_or_handle.ip_prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IPPrefix)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &NetworkKeyHandle_IpPrefix{msg}
		return true, err
	case 2: // key_or_handle.nw_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &NetworkKeyHandle_NwHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NetworkKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *NetworkKeyHandle_IpPrefix:
		s := proto.Size(x.IpPrefix)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkKeyHandle_NwHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// NetworkSpec is used to add or modify a network object
type NetworkSpec struct {
	Meta          *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle   *NetworkKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Rmac          uint64            `protobuf:"varint,3,opt,name=rmac" json:"rmac,omitempty"`
	SecurityGroup []uint32          `protobuf:"varint,4,rep,packed,name=security_group,json=securityGroup" json:"security_group,omitempty"`
}

func (m *NetworkSpec) Reset()                    { *m = NetworkSpec{} }
func (m *NetworkSpec) String() string            { return proto.CompactTextString(m) }
func (*NetworkSpec) ProtoMessage()               {}
func (*NetworkSpec) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *NetworkSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NetworkSpec) GetKeyOrHandle() *NetworkKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NetworkSpec) GetRmac() uint64 {
	if m != nil {
		return m.Rmac
	}
	return 0
}

func (m *NetworkSpec) GetSecurityGroup() []uint32 {
	if m != nil {
		return m.SecurityGroup
	}
	return nil
}

// NetworkRequestMsg is batched request message used to create/update network
// objects
type NetworkRequestMsg struct {
	Request []*NetworkSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NetworkRequestMsg) Reset()                    { *m = NetworkRequestMsg{} }
func (m *NetworkRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkRequestMsg) ProtoMessage()               {}
func (*NetworkRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *NetworkRequestMsg) GetRequest() []*NetworkSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// NetworkStatus represents the current status of the network policy object
type NetworkStatus struct {
	NwHandle uint64 `protobuf:"fixed64,1,opt,name=nw_handle,json=nwHandle" json:"nw_handle,omitempty"`
}

func (m *NetworkStatus) Reset()                    { *m = NetworkStatus{} }
func (m *NetworkStatus) String() string            { return proto.CompactTextString(m) }
func (*NetworkStatus) ProtoMessage()               {}
func (*NetworkStatus) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *NetworkStatus) GetNwHandle() uint64 {
	if m != nil {
		return m.NwHandle
	}
	return 0
}

// NetworkResponse is response to one NetworkSpec
type NetworkResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *NetworkStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *NetworkResponse) Reset()                    { *m = NetworkResponse{} }
func (m *NetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkResponse) ProtoMessage()               {}
func (*NetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *NetworkResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NetworkResponse) GetStatus() *NetworkStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// NetworkResponseMsg is response to NetworkRequestMsg
type NetworkResponseMsg struct {
	Response []*NetworkResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NetworkResponseMsg) Reset()                    { *m = NetworkResponseMsg{} }
func (m *NetworkResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkResponseMsg) ProtoMessage()               {}
func (*NetworkResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *NetworkResponseMsg) GetResponse() []*NetworkResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NetworkDeleteRequest is used to delete a network policy object
type NetworkDeleteRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NetworkKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NetworkDeleteRequest) Reset()                    { *m = NetworkDeleteRequest{} }
func (m *NetworkDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkDeleteRequest) ProtoMessage()               {}
func (*NetworkDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *NetworkDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NetworkDeleteRequest) GetKeyOrHandle() *NetworkKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NetworkDeleteRequestMsg is used to delete a batch of network policy objects
type NetworkDeleteRequestMsg struct {
	Request []*NetworkDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NetworkDeleteRequestMsg) Reset()                    { *m = NetworkDeleteRequestMsg{} }
func (m *NetworkDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkDeleteRequestMsg) ProtoMessage()               {}
func (*NetworkDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *NetworkDeleteRequestMsg) GetRequest() []*NetworkDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NetworkDeleteResponseMsg is batched response to NetworkDeleteRequestMsg
type NetworkDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *NetworkDeleteResponseMsg) Reset()                    { *m = NetworkDeleteResponseMsg{} }
func (m *NetworkDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkDeleteResponseMsg) ProtoMessage()               {}
func (*NetworkDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *NetworkDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// NetworkStats captures all the statistics of given network
type NetworkStats struct {
}

func (m *NetworkStats) Reset()                    { *m = NetworkStats{} }
func (m *NetworkStats) String() string            { return proto.CompactTextString(m) }
func (*NetworkStats) ProtoMessage()               {}
func (*NetworkStats) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{9} }

// NetworkGetRequest is used to get information about a network
type NetworkGetRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NetworkKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NetworkGetRequest) Reset()                    { *m = NetworkGetRequest{} }
func (m *NetworkGetRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkGetRequest) ProtoMessage()               {}
func (*NetworkGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{10} }

func (m *NetworkGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NetworkGetRequest) GetKeyOrHandle() *NetworkKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NetworkGetRequestMsg is batched GET request for networks
type NetworkGetRequestMsg struct {
	Request []*NetworkGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NetworkGetRequestMsg) Reset()                    { *m = NetworkGetRequestMsg{} }
func (m *NetworkGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkGetRequestMsg) ProtoMessage()               {}
func (*NetworkGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{11} }

func (m *NetworkGetRequestMsg) GetRequest() []*NetworkGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NetworkGetResponse captures all the information about a network
type NetworkGetResponse struct {
	Spec   *NetworkSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *NetworkStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats  *NetworkStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *NetworkGetResponse) Reset()                    { *m = NetworkGetResponse{} }
func (m *NetworkGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkGetResponse) ProtoMessage()               {}
func (*NetworkGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{12} }

func (m *NetworkGetResponse) GetSpec() *NetworkSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NetworkGetResponse) GetStatus() *NetworkStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NetworkGetResponse) GetStats() *NetworkStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NetworkGetResponseMsg is response to NetworkGetRequestMsg
type NetworkGetResponseMsg struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*NetworkGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *NetworkGetResponseMsg) Reset()                    { *m = NetworkGetResponseMsg{} }
func (m *NetworkGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NetworkGetResponseMsg) ProtoMessage()               {}
func (*NetworkGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{13} }

func (m *NetworkGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NetworkGetResponseMsg) GetResponse() []*NetworkGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkKeyHandle)(nil), "nw.NetworkKeyHandle")
	proto.RegisterType((*NetworkSpec)(nil), "nw.NetworkSpec")
	proto.RegisterType((*NetworkRequestMsg)(nil), "nw.NetworkRequestMsg")
	proto.RegisterType((*NetworkStatus)(nil), "nw.NetworkStatus")
	proto.RegisterType((*NetworkResponse)(nil), "nw.NetworkResponse")
	proto.RegisterType((*NetworkResponseMsg)(nil), "nw.NetworkResponseMsg")
	proto.RegisterType((*NetworkDeleteRequest)(nil), "nw.NetworkDeleteRequest")
	proto.RegisterType((*NetworkDeleteRequestMsg)(nil), "nw.NetworkDeleteRequestMsg")
	proto.RegisterType((*NetworkDeleteResponseMsg)(nil), "nw.NetworkDeleteResponseMsg")
	proto.RegisterType((*NetworkStats)(nil), "nw.NetworkStats")
	proto.RegisterType((*NetworkGetRequest)(nil), "nw.NetworkGetRequest")
	proto.RegisterType((*NetworkGetRequestMsg)(nil), "nw.NetworkGetRequestMsg")
	proto.RegisterType((*NetworkGetResponse)(nil), "nw.NetworkGetResponse")
	proto.RegisterType((*NetworkGetResponseMsg)(nil), "nw.NetworkGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Network service

type NetworkClient interface {
	NetworkCreate(ctx context.Context, in *NetworkRequestMsg, opts ...grpc.CallOption) (*NetworkResponseMsg, error)
	NetworkUpdate(ctx context.Context, in *NetworkRequestMsg, opts ...grpc.CallOption) (*NetworkResponseMsg, error)
	NetworkDelete(ctx context.Context, in *NetworkDeleteRequestMsg, opts ...grpc.CallOption) (*NetworkDeleteResponseMsg, error)
	NetworkGet(ctx context.Context, in *NetworkGetRequestMsg, opts ...grpc.CallOption) (*NetworkGetResponseMsg, error)
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) NetworkCreate(ctx context.Context, in *NetworkRequestMsg, opts ...grpc.CallOption) (*NetworkResponseMsg, error) {
	out := new(NetworkResponseMsg)
	err := grpc.Invoke(ctx, "/nw.Network/NetworkCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) NetworkUpdate(ctx context.Context, in *NetworkRequestMsg, opts ...grpc.CallOption) (*NetworkResponseMsg, error) {
	out := new(NetworkResponseMsg)
	err := grpc.Invoke(ctx, "/nw.Network/NetworkUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) NetworkDelete(ctx context.Context, in *NetworkDeleteRequestMsg, opts ...grpc.CallOption) (*NetworkDeleteResponseMsg, error) {
	out := new(NetworkDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/nw.Network/NetworkDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) NetworkGet(ctx context.Context, in *NetworkGetRequestMsg, opts ...grpc.CallOption) (*NetworkGetResponseMsg, error) {
	out := new(NetworkGetResponseMsg)
	err := grpc.Invoke(ctx, "/nw.Network/NetworkGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Network service

type NetworkServer interface {
	NetworkCreate(context.Context, *NetworkRequestMsg) (*NetworkResponseMsg, error)
	NetworkUpdate(context.Context, *NetworkRequestMsg) (*NetworkResponseMsg, error)
	NetworkDelete(context.Context, *NetworkDeleteRequestMsg) (*NetworkDeleteResponseMsg, error)
	NetworkGet(context.Context, *NetworkGetRequestMsg) (*NetworkGetResponseMsg, error)
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

func _Network_NetworkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).NetworkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nw.Network/NetworkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).NetworkCreate(ctx, req.(*NetworkRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_NetworkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).NetworkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nw.Network/NetworkUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).NetworkUpdate(ctx, req.(*NetworkRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_NetworkDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).NetworkDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nw.Network/NetworkDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).NetworkDelete(ctx, req.(*NetworkDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_NetworkGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).NetworkGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nw.Network/NetworkGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).NetworkGet(ctx, req.(*NetworkGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nw.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NetworkCreate",
			Handler:    _Network_NetworkCreate_Handler,
		},
		{
			MethodName: "NetworkUpdate",
			Handler:    _Network_NetworkUpdate_Handler,
		},
		{
			MethodName: "NetworkDelete",
			Handler:    _Network_NetworkDelete_Handler,
		},
		{
			MethodName: "NetworkGet",
			Handler:    _Network_NetworkGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nw.proto",
}

func init() { proto.RegisterFile("nw.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x93, 0x90, 0xa6, 0x63, 0xf2, 0xd1, 0xa5, 0x29, 0xa6, 0x05, 0x29, 0x5a, 0x54, 0x94,
	0x4a, 0x28, 0x95, 0xcc, 0x85, 0x13, 0x82, 0x16, 0x94, 0xa2, 0x12, 0x5a, 0x19, 0x71, 0xe1, 0x12,
	0xb9, 0xe9, 0x90, 0x9a, 0x24, 0xf6, 0xb2, 0xbb, 0x91, 0x89, 0xc4, 0x4f, 0xe0, 0x47, 0x70, 0xe5,
	0x5f, 0x22, 0xaf, 0xd7, 0x1f, 0x31, 0x46, 0x15, 0x48, 0x70, 0xea, 0x7a, 0xe6, 0xed, 0x9b, 0x9d,
	0x37, 0x6f, 0x1a, 0x68, 0xf8, 0xe1, 0x80, 0xf1, 0x40, 0x06, 0xa4, 0xe2, 0x87, 0x7b, 0xa6, 0x5c,
	0x31, 0x14, 0x71, 0x80, 0x72, 0xe8, 0xbc, 0x45, 0x19, 0x06, 0x7c, 0x76, 0x86, 0xab, 0x53, 0xd7,
	0xbf, 0x9a, 0x23, 0x19, 0xc0, 0x96, 0xc7, 0xc6, 0x8c, 0xe3, 0x47, 0xef, 0x8b, 0x65, 0xf4, 0x8c,
	0xbe, 0x69, 0xb7, 0x07, 0xf1, 0xa5, 0xd7, 0x17, 0x17, 0x2a, 0x7c, 0xba, 0xe1, 0x34, 0x3c, 0x16,
	0x9f, 0xc9, 0x03, 0xd8, 0xf2, 0xc3, 0xf1, 0xb5, 0xba, 0x6c, 0x55, 0x7a, 0x46, 0xbf, 0x1e, 0xa5,
	0xfd, 0x30, 0xa6, 0x3b, 0x6e, 0x43, 0x73, 0x86, 0xab, 0x71, 0xc0, 0x35, 0x84, 0xfe, 0x30, 0xc0,
	0xd4, 0x45, 0xdf, 0x31, 0x9c, 0x90, 0x03, 0xa8, 0x2d, 0x50, 0xba, 0xba, 0xd4, 0xb6, 0x2e, 0x75,
	0x7e, 0xf9, 0x09, 0x27, 0x72, 0x84, 0xd2, 0x75, 0x54, 0x9a, 0x3c, 0x2d, 0xf0, 0xa8, 0x52, 0xa6,
	0xbd, 0x33, 0xf0, 0xc3, 0x41, 0xb1, 0x07, 0xc7, 0x9c, 0xe1, 0xea, 0x9c, 0xeb, 0x86, 0x08, 0xd4,
	0xf8, 0xc2, 0x9d, 0x58, 0xd5, 0x9e, 0xd1, 0xaf, 0x39, 0xea, 0x4c, 0x0e, 0xa0, 0x25, 0x70, 0xb2,
	0xe4, 0x9e, 0x5c, 0x8d, 0xa7, 0x3c, 0x58, 0x32, 0xab, 0xd6, 0xab, 0xf6, 0x9b, 0x4e, 0x33, 0x89,
	0x0e, 0xa3, 0x20, 0x7d, 0x06, 0xdb, 0x9a, 0xdb, 0xc1, 0xcf, 0x4b, 0x14, 0x72, 0x24, 0xa6, 0xe4,
	0x10, 0x36, 0x79, 0xfc, 0x65, 0x19, 0xbd, 0xaa, 0x92, 0x27, 0x7b, 0x43, 0xd4, 0x92, 0x93, 0xe4,
	0xe9, 0x63, 0x68, 0x26, 0x71, 0xe9, 0xca, 0xa5, 0x20, 0xfb, 0x79, 0xb1, 0xa2, 0x8e, 0xeb, 0x99,
	0x54, 0x74, 0x01, 0xed, 0xb4, 0x9a, 0x60, 0x81, 0x2f, 0x90, 0x1c, 0x01, 0xb8, 0xcc, 0x1b, 0x0b,
	0x75, 0x5b, 0x5d, 0x68, 0xd9, 0x1d, 0x2d, 0xd1, 0x0b, 0xe6, 0xc5, 0xac, 0xce, 0x96, 0x9b, 0x1c,
	0xc9, 0x21, 0xd4, 0x35, 0xb8, 0xa2, 0xf5, 0xcc, 0xbd, 0x2d, 0x46, 0x6b, 0x00, 0x7d, 0x05, 0xa4,
	0x50, 0x2e, 0xea, 0xee, 0x08, 0x1a, 0x5c, 0x7f, 0xea, 0xf6, 0xee, 0xe4, 0x28, 0x12, 0xa4, 0x93,
	0x82, 0x68, 0x08, 0x3b, 0x3a, 0xf9, 0x12, 0xe7, 0x28, 0x51, 0x2b, 0xf5, 0xcf, 0xe7, 0x4a, 0x47,
	0x70, 0xb7, 0xac, 0x70, 0xd4, 0x84, 0x5d, 0x1c, 0x91, 0x95, 0xa3, 0x5b, 0x43, 0x67, 0xb3, 0x3a,
	0x03, 0xab, 0x00, 0xc8, 0x8b, 0xb2, 0x3e, 0x86, 0xea, 0x0d, 0x63, 0xa0, 0x2d, 0xb8, 0x9d, 0x13,
	0x5d, 0x50, 0x99, 0x1a, 0x69, 0x88, 0xf2, 0xbf, 0x29, 0x34, 0x4c, 0x47, 0x93, 0x55, 0x8d, 0xdb,
	0x29, 0xc8, 0xd3, 0xcd, 0x71, 0x65, 0xd0, 0x4c, 0x9b, 0x6f, 0x46, 0xea, 0x15, 0x95, 0xd6, 0xee,
	0x7c, 0x08, 0x35, 0xc1, 0x70, 0x92, 0xfe, 0x97, 0x28, 0xac, 0x81, 0x4a, 0xfe, 0x81, 0x23, 0xc9,
	0x23, 0xb8, 0x15, 0x9d, 0x84, 0x5a, 0x55, 0xd3, 0xee, 0x14, 0x90, 0xc2, 0x89, 0xd3, 0xf4, 0x2b,
	0x74, 0x7f, 0x7d, 0x4d, 0xd9, 0x9c, 0x6e, 0x5c, 0x17, 0x3b, 0xe7, 0xf6, 0x8a, 0x92, 0x62, 0xb7,
	0x28, 0x45, 0xd1, 0xf0, 0xf6, 0xf7, 0x0a, 0x6c, 0x6a, 0x00, 0x79, 0x9e, 0x2e, 0xf8, 0x09, 0x47,
	0x57, 0x22, 0xe9, 0xae, 0x2d, 0x4b, 0xa2, 0xf8, 0xde, 0x6e, 0xc9, 0x0e, 0x8d, 0xc4, 0x94, 0x6e,
	0xe4, 0x18, 0xde, 0xb3, 0xab, 0xbf, 0x62, 0x78, 0x93, 0x32, 0xc4, 0xc6, 0x25, 0xfb, 0xbf, 0x33,
	0x7b, 0xc4, 0x73, 0xbf, 0x24, 0x99, 0x67, 0x3b, 0x01, 0xc8, 0xba, 0x27, 0x56, 0xa9, 0x31, 0x22,
	0x9e, 0x7b, 0xe5, 0x3a, 0x29, 0x92, 0x63, 0xf8, 0xd0, 0xb8, 0x76, 0xe7, 0xea, 0x37, 0xe6, 0xb2,
	0xae, 0xfe, 0x3c, 0xf9, 0x19, 0x00, 0x00, 0xff, 0xff, 0xce, 0x85, 0xf2, 0x25, 0x87, 0x06, 0x00,
	0x00,
}
