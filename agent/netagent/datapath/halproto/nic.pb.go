// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NIC boots in classic mode first and may later transition to flow mode
type OperatingMode int32

const (
	OperatingMode_OPERATING_MODE_NONE    OperatingMode = 0
	OperatingMode_OPERATING_MODE_CLASSIC OperatingMode = 1
	OperatingMode_OPERATING_MODE_SMART   OperatingMode = 2
)

var OperatingMode_name = map[int32]string{
	0: "OPERATING_MODE_NONE",
	1: "OPERATING_MODE_CLASSIC",
	2: "OPERATING_MODE_SMART",
}
var OperatingMode_value = map[string]int32{
	"OPERATING_MODE_NONE":    0,
	"OPERATING_MODE_CLASSIC": 1,
	"OPERATING_MODE_SMART":   2,
}

func (x OperatingMode) String() string {
	return proto.EnumName(OperatingMode_name, int32(x))
}
func (OperatingMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

// Global config object for NIC
type RootConfig struct {
	NicMode OperatingMode `protobuf:"varint,1,opt,name=nic_mode,json=nicMode,enum=nic.OperatingMode" json:"nic_mode,omitempty"`
}

func (m *RootConfig) Reset()                    { *m = RootConfig{} }
func (m *RootConfig) String() string            { return proto.CompactTextString(m) }
func (*RootConfig) ProtoMessage()               {}
func (*RootConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *RootConfig) GetNicMode() OperatingMode {
	if m != nil {
		return m.NicMode
	}
	return OperatingMode_OPERATING_MODE_NONE
}

func init() {
	proto.RegisterType((*RootConfig)(nil), "nic.RootConfig")
	proto.RegisterEnum("nic.OperatingMode", OperatingMode_name, OperatingMode_value)
}

func init() { proto.RegisterFile("nic.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xcb, 0x4c, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0xcb, 0x4c, 0x56, 0xb2, 0xe6, 0xe2, 0x0a, 0xca,
	0xcf, 0x2f, 0x71, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x17, 0xd2, 0xe5, 0xe2, 0xc8, 0xcb, 0x4c, 0x8e,
	0xcf, 0xcd, 0x4f, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0x12, 0xd2, 0x03, 0x69, 0xf0,
	0x2f, 0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0x4b, 0xf7, 0xcd, 0x4f, 0x49, 0x0d, 0x62, 0xcf, 0xcb,
	0x4c, 0x06, 0x31, 0xb4, 0xe2, 0xb8, 0x78, 0x51, 0x64, 0x84, 0xc4, 0xb9, 0x84, 0xfd, 0x03, 0x5c,
	0x83, 0x1c, 0x43, 0x3c, 0xfd, 0xdc, 0xe3, 0x7d, 0xfd, 0x5d, 0x5c, 0xe3, 0xfd, 0xfc, 0xfd, 0x5c,
	0x05, 0x18, 0x84, 0xa4, 0xb8, 0xc4, 0xd0, 0x24, 0x9c, 0x7d, 0x1c, 0x83, 0x83, 0x3d, 0x9d, 0x05,
	0x18, 0x85, 0x24, 0xb8, 0x44, 0xd0, 0xe4, 0x82, 0x7d, 0x1d, 0x83, 0x42, 0x04, 0x98, 0x9c, 0xb8,
	0xa2, 0x38, 0x32, 0x12, 0x73, 0xc0, 0xae, 0x4d, 0x62, 0x03, 0x53, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x67, 0x66, 0x4a, 0x53, 0xc1, 0x00, 0x00, 0x00,
}
