// Code generated by protoc-gen-go. DO NOT EDIT.
// source: agent.proto

/*
Package agentproto is a generated protocol buffer package.

It is generated from these files:
	agent.proto

It has these top-level messages:
	PingMessage
	Entity
	NodeConfig
	NodeConfigStatus
	AppConfig
	AppStatus
	Interface
	VlanInterface
	InterfaceStatus
	Command
	CommandStatus
	NaplesSimConfig
	NaplesStatus
	HntapConfig
	QemuConfig
	QemuStatus
*/
package agentproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ApiStatus int32

const (
	ApiStatus_API_STATUS_OK            ApiStatus = 0
	ApiStatus_API_STATUS_FAILED        ApiStatus = 1
	ApiStatus_API_STATUS_APP_NOT_FOUND ApiStatus = 2
)

var ApiStatus_name = map[int32]string{
	0: "API_STATUS_OK",
	1: "API_STATUS_FAILED",
	2: "API_STATUS_APP_NOT_FOUND",
}
var ApiStatus_value = map[string]int32{
	"API_STATUS_OK":            0,
	"API_STATUS_FAILED":        1,
	"API_STATUS_APP_NOT_FOUND": 2,
}

func (x ApiStatus) String() string {
	return proto.EnumName(ApiStatus_name, int32(x))
}
func (ApiStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EntityType int32

const (
	EntityType_EntityNone      EntityType = 0
	EntityType_EntityNaples    EntityType = 1
	EntityType_EntityContainer EntityType = 2
	EntityType_EntityApp       EntityType = 3
	EntityType_EntitySwitch    EntityType = 4
	EntityType_EntityVM        EntityType = 5
)

var EntityType_name = map[int32]string{
	0: "EntityNone",
	1: "EntityNaples",
	2: "EntityContainer",
	3: "EntityApp",
	4: "EntitySwitch",
	5: "EntityVM",
}
var EntityType_value = map[string]int32{
	"EntityNone":      0,
	"EntityNaples":    1,
	"EntityContainer": 2,
	"EntityApp":       3,
	"EntitySwitch":    4,
	"EntityVM":        5,
}

func (x EntityType) String() string {
	return proto.EnumName(EntityType_name, int32(x))
}
func (EntityType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PingMessage struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PingMessage) Reset()                    { *m = PingMessage{} }
func (m *PingMessage) String() string            { return proto.CompactTextString(m) }
func (*PingMessage) ProtoMessage()               {}
func (*PingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Entity struct {
	Name string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type EntityType `protobuf:"varint,2,opt,name=type,enum=agentproto.EntityType" json:"type,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Entity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Entity) GetType() EntityType {
	if m != nil {
		return m.Type
	}
	return EntityType_EntityNone
}

type NodeConfig struct {
	Entity *Entity `protobuf:"bytes,1,opt,name=entity" json:"entity,omitempty"`
	Config string  `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NodeConfig) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *NodeConfig) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type NodeConfigStatus struct {
	Status   ApiStatus `protobuf:"varint,1,opt,name=status,enum=agentproto.ApiStatus" json:"status,omitempty"`
	Response string    `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *NodeConfigStatus) Reset()                    { *m = NodeConfigStatus{} }
func (m *NodeConfigStatus) String() string            { return proto.CompactTextString(m) }
func (*NodeConfigStatus) ProtoMessage()               {}
func (*NodeConfigStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NodeConfigStatus) GetStatus() ApiStatus {
	if m != nil {
		return m.Status
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NodeConfigStatus) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type AppConfig struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Registry string `protobuf:"bytes,2,opt,name=registry" json:"registry,omitempty"`
	OnQemu   bool   `protobuf:"varint,3,opt,name=onQemu" json:"onQemu,omitempty"`
}

func (m *AppConfig) Reset()                    { *m = AppConfig{} }
func (m *AppConfig) String() string            { return proto.CompactTextString(m) }
func (*AppConfig) ProtoMessage()               {}
func (*AppConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppConfig) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *AppConfig) GetOnQemu() bool {
	if m != nil {
		return m.OnQemu
	}
	return false
}

type AppStatus struct {
	Status   ApiStatus `protobuf:"varint,1,opt,name=status,enum=agentproto.ApiStatus" json:"status,omitempty"`
	Response string    `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *AppStatus) Reset()                    { *m = AppStatus{} }
func (m *AppStatus) String() string            { return proto.CompactTextString(m) }
func (*AppStatus) ProtoMessage()               {}
func (*AppStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppStatus) GetStatus() ApiStatus {
	if m != nil {
		return m.Status
	}
	return ApiStatus_API_STATUS_OK
}

func (m *AppStatus) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type Interface struct {
	App        string `protobuf:"bytes,1,opt,name=app" json:"app,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MacAddress string `protobuf:"bytes,3,opt,name=macAddress" json:"macAddress,omitempty"`
	IpAddress  string `protobuf:"bytes,4,opt,name=ipAddress" json:"ipAddress,omitempty"`
	PrefixLen  uint32 `protobuf:"varint,5,opt,name=prefixLen" json:"prefixLen,omitempty"`
}

func (m *Interface) Reset()                    { *m = Interface{} }
func (m *Interface) String() string            { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()               {}
func (*Interface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Interface) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *Interface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Interface) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Interface) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Interface) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

type VlanInterface struct {
	App              string `protobuf:"bytes,1,opt,name=app" json:"app,omitempty"`
	ParentIntfName   string `protobuf:"bytes,2,opt,name=parentIntfName" json:"parentIntfName,omitempty"`
	ParentMacAddress string `protobuf:"bytes,3,opt,name=parentMacAddress" json:"parentMacAddress,omitempty"`
	MacAddress       string `protobuf:"bytes,4,opt,name=macAddress" json:"macAddress,omitempty"`
	Vlan             uint32 `protobuf:"varint,5,opt,name=vlan" json:"vlan,omitempty"`
	IpAddress        string `protobuf:"bytes,6,opt,name=ipAddress" json:"ipAddress,omitempty"`
	PrefixLen        uint32 `protobuf:"varint,7,opt,name=prefixLen" json:"prefixLen,omitempty"`
}

func (m *VlanInterface) Reset()                    { *m = VlanInterface{} }
func (m *VlanInterface) String() string            { return proto.CompactTextString(m) }
func (*VlanInterface) ProtoMessage()               {}
func (*VlanInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VlanInterface) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *VlanInterface) GetParentIntfName() string {
	if m != nil {
		return m.ParentIntfName
	}
	return ""
}

func (m *VlanInterface) GetParentMacAddress() string {
	if m != nil {
		return m.ParentMacAddress
	}
	return ""
}

func (m *VlanInterface) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *VlanInterface) GetVlan() uint32 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *VlanInterface) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *VlanInterface) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

type InterfaceStatus struct {
	Status   ApiStatus `protobuf:"varint,1,opt,name=status,enum=agentproto.ApiStatus" json:"status,omitempty"`
	Response string    `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *InterfaceStatus) Reset()                    { *m = InterfaceStatus{} }
func (m *InterfaceStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStatus) ProtoMessage()               {}
func (*InterfaceStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InterfaceStatus) GetStatus() ApiStatus {
	if m != nil {
		return m.Status
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceStatus) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type Command struct {
	App        string `protobuf:"bytes,1,opt,name=app" json:"app,omitempty"`
	Cmd        string `protobuf:"bytes,2,opt,name=cmd" json:"cmd,omitempty"`
	Background bool   `protobuf:"varint,3,opt,name=background" json:"background,omitempty"`
	Timeout    uint32 `protobuf:"varint,4,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Command) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *Command) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *Command) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *Command) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type CommandStatus struct {
	Status  ApiStatus `protobuf:"varint,1,opt,name=status,enum=agentproto.ApiStatus" json:"status,omitempty"`
	RetCode int32     `protobuf:"varint,2,opt,name=retCode" json:"retCode,omitempty"`
	Stdout  string    `protobuf:"bytes,3,opt,name=stdout" json:"stdout,omitempty"`
	Stderr  string    `protobuf:"bytes,4,opt,name=stderr" json:"stderr,omitempty"`
}

func (m *CommandStatus) Reset()                    { *m = CommandStatus{} }
func (m *CommandStatus) String() string            { return proto.CompactTextString(m) }
func (*CommandStatus) ProtoMessage()               {}
func (*CommandStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CommandStatus) GetStatus() ApiStatus {
	if m != nil {
		return m.Status
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CommandStatus) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *CommandStatus) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *CommandStatus) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

type NaplesSimConfig struct {
	Name            string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NodeID          uint32 `protobuf:"varint,2,opt,name=nodeID" json:"nodeID,omitempty"`
	CtrlNwIpRange   string `protobuf:"bytes,3,opt,name=ctrlNwIpRange" json:"ctrlNwIpRange,omitempty"`
	TunnelIpStart   string `protobuf:"bytes,4,opt,name=tunnelIpStart" json:"tunnelIpStart,omitempty"`
	TunnelInterface string `protobuf:"bytes,5,opt,name=tunnelInterface" json:"tunnelInterface,omitempty"`
	TunnelIpAddress string `protobuf:"bytes,6,opt,name=tunnelIpAddress" json:"tunnelIpAddress,omitempty"`
	WithQemu        bool   `protobuf:"varint,7,opt,name=withQemu" json:"withQemu,omitempty"`
}

func (m *NaplesSimConfig) Reset()                    { *m = NaplesSimConfig{} }
func (m *NaplesSimConfig) String() string            { return proto.CompactTextString(m) }
func (*NaplesSimConfig) ProtoMessage()               {}
func (*NaplesSimConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NaplesSimConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NaplesSimConfig) GetNodeID() uint32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NaplesSimConfig) GetCtrlNwIpRange() string {
	if m != nil {
		return m.CtrlNwIpRange
	}
	return ""
}

func (m *NaplesSimConfig) GetTunnelIpStart() string {
	if m != nil {
		return m.TunnelIpStart
	}
	return ""
}

func (m *NaplesSimConfig) GetTunnelInterface() string {
	if m != nil {
		return m.TunnelInterface
	}
	return ""
}

func (m *NaplesSimConfig) GetTunnelIpAddress() string {
	if m != nil {
		return m.TunnelIpAddress
	}
	return ""
}

func (m *NaplesSimConfig) GetWithQemu() bool {
	if m != nil {
		return m.WithQemu
	}
	return false
}

type NaplesStatus struct {
	Status   ApiStatus `protobuf:"varint,1,opt,name=status,enum=agentproto.ApiStatus" json:"status,omitempty"`
	Response string    `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *NaplesStatus) Reset()                    { *m = NaplesStatus{} }
func (m *NaplesStatus) String() string            { return proto.CompactTextString(m) }
func (*NaplesStatus) ProtoMessage()               {}
func (*NaplesStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NaplesStatus) GetStatus() ApiStatus {
	if m != nil {
		return m.Status
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NaplesStatus) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type HntapConfig struct {
	Config string `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *HntapConfig) Reset()                    { *m = HntapConfig{} }
func (m *HntapConfig) String() string            { return proto.CompactTextString(m) }
func (*HntapConfig) ProtoMessage()               {}
func (*HntapConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *HntapConfig) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type QemuConfig struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
}

func (m *QemuConfig) Reset()                    { *m = QemuConfig{} }
func (m *QemuConfig) String() string            { return proto.CompactTextString(m) }
func (*QemuConfig) ProtoMessage()               {}
func (*QemuConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *QemuConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QemuConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type QemuStatus struct {
	Status   ApiStatus `protobuf:"varint,1,opt,name=status,enum=agentproto.ApiStatus" json:"status,omitempty"`
	Response string    `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *QemuStatus) Reset()                    { *m = QemuStatus{} }
func (m *QemuStatus) String() string            { return proto.CompactTextString(m) }
func (*QemuStatus) ProtoMessage()               {}
func (*QemuStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *QemuStatus) GetStatus() ApiStatus {
	if m != nil {
		return m.Status
	}
	return ApiStatus_API_STATUS_OK
}

func (m *QemuStatus) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*PingMessage)(nil), "agentproto.PingMessage")
	proto.RegisterType((*Entity)(nil), "agentproto.Entity")
	proto.RegisterType((*NodeConfig)(nil), "agentproto.NodeConfig")
	proto.RegisterType((*NodeConfigStatus)(nil), "agentproto.NodeConfigStatus")
	proto.RegisterType((*AppConfig)(nil), "agentproto.AppConfig")
	proto.RegisterType((*AppStatus)(nil), "agentproto.AppStatus")
	proto.RegisterType((*Interface)(nil), "agentproto.Interface")
	proto.RegisterType((*VlanInterface)(nil), "agentproto.VlanInterface")
	proto.RegisterType((*InterfaceStatus)(nil), "agentproto.InterfaceStatus")
	proto.RegisterType((*Command)(nil), "agentproto.Command")
	proto.RegisterType((*CommandStatus)(nil), "agentproto.CommandStatus")
	proto.RegisterType((*NaplesSimConfig)(nil), "agentproto.NaplesSimConfig")
	proto.RegisterType((*NaplesStatus)(nil), "agentproto.NaplesStatus")
	proto.RegisterType((*HntapConfig)(nil), "agentproto.HntapConfig")
	proto.RegisterType((*QemuConfig)(nil), "agentproto.QemuConfig")
	proto.RegisterType((*QemuStatus)(nil), "agentproto.QemuStatus")
	proto.RegisterEnum("agentproto.ApiStatus", ApiStatus_name, ApiStatus_value)
	proto.RegisterEnum("agentproto.EntityType", EntityType_name, EntityType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Agent service

type AgentClient interface {
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

// Server API for Agent service

type AgentServer interface {
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentproto.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "agent.proto",
}

// Client API for AppAgent service

type AppAgentClient interface {
	BringUp(ctx context.Context, in *AppConfig, opts ...grpc.CallOption) (*AppStatus, error)
	Teardown(ctx context.Context, in *AppConfig, opts ...grpc.CallOption) (*AppStatus, error)
	AttachInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*InterfaceStatus, error)
	AddVlanInterface(ctx context.Context, in *VlanInterface, opts ...grpc.CallOption) (*InterfaceStatus, error)
	RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandStatus, error)
}

type appAgentClient struct {
	cc *grpc.ClientConn
}

func NewAppAgentClient(cc *grpc.ClientConn) AppAgentClient {
	return &appAgentClient{cc}
}

func (c *appAgentClient) BringUp(ctx context.Context, in *AppConfig, opts ...grpc.CallOption) (*AppStatus, error) {
	out := new(AppStatus)
	err := grpc.Invoke(ctx, "/agentproto.AppAgent/BringUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAgentClient) Teardown(ctx context.Context, in *AppConfig, opts ...grpc.CallOption) (*AppStatus, error) {
	out := new(AppStatus)
	err := grpc.Invoke(ctx, "/agentproto.AppAgent/Teardown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAgentClient) AttachInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*InterfaceStatus, error) {
	out := new(InterfaceStatus)
	err := grpc.Invoke(ctx, "/agentproto.AppAgent/AttachInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAgentClient) AddVlanInterface(ctx context.Context, in *VlanInterface, opts ...grpc.CallOption) (*InterfaceStatus, error) {
	out := new(InterfaceStatus)
	err := grpc.Invoke(ctx, "/agentproto.AppAgent/AddVlanInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAgentClient) RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandStatus, error) {
	out := new(CommandStatus)
	err := grpc.Invoke(ctx, "/agentproto.AppAgent/RunCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppAgent service

type AppAgentServer interface {
	BringUp(context.Context, *AppConfig) (*AppStatus, error)
	Teardown(context.Context, *AppConfig) (*AppStatus, error)
	AttachInterface(context.Context, *Interface) (*InterfaceStatus, error)
	AddVlanInterface(context.Context, *VlanInterface) (*InterfaceStatus, error)
	RunCommand(context.Context, *Command) (*CommandStatus, error)
}

func RegisterAppAgentServer(s *grpc.Server, srv AppAgentServer) {
	s.RegisterService(&_AppAgent_serviceDesc, srv)
}

func _AppAgent_BringUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAgentServer).BringUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.AppAgent/BringUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAgentServer).BringUp(ctx, req.(*AppConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAgent_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAgentServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.AppAgent/Teardown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAgentServer).Teardown(ctx, req.(*AppConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAgent_AttachInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAgentServer).AttachInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.AppAgent/AttachInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAgentServer).AttachInterface(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAgent_AddVlanInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanInterface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAgentServer).AddVlanInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.AppAgent/AddVlanInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAgentServer).AddVlanInterface(ctx, req.(*VlanInterface))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAgent_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAgentServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.AppAgent/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAgentServer).RunCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentproto.AppAgent",
	HandlerType: (*AppAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BringUp",
			Handler:    _AppAgent_BringUp_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _AppAgent_Teardown_Handler,
		},
		{
			MethodName: "AttachInterface",
			Handler:    _AppAgent_AttachInterface_Handler,
		},
		{
			MethodName: "AddVlanInterface",
			Handler:    _AppAgent_AddVlanInterface_Handler,
		},
		{
			MethodName: "RunCommand",
			Handler:    _AppAgent_RunCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}

// Client API for NaplesSim service

type NaplesSimClient interface {
	BringUp(ctx context.Context, in *NaplesSimConfig, opts ...grpc.CallOption) (*NaplesStatus, error)
	Teardown(ctx context.Context, in *NaplesSimConfig, opts ...grpc.CallOption) (*NaplesStatus, error)
	ConfigureHntap(ctx context.Context, in *HntapConfig, opts ...grpc.CallOption) (*NaplesStatus, error)
	RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandStatus, error)
}

type naplesSimClient struct {
	cc *grpc.ClientConn
}

func NewNaplesSimClient(cc *grpc.ClientConn) NaplesSimClient {
	return &naplesSimClient{cc}
}

func (c *naplesSimClient) BringUp(ctx context.Context, in *NaplesSimConfig, opts ...grpc.CallOption) (*NaplesStatus, error) {
	out := new(NaplesStatus)
	err := grpc.Invoke(ctx, "/agentproto.NaplesSim/BringUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naplesSimClient) Teardown(ctx context.Context, in *NaplesSimConfig, opts ...grpc.CallOption) (*NaplesStatus, error) {
	out := new(NaplesStatus)
	err := grpc.Invoke(ctx, "/agentproto.NaplesSim/Teardown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naplesSimClient) ConfigureHntap(ctx context.Context, in *HntapConfig, opts ...grpc.CallOption) (*NaplesStatus, error) {
	out := new(NaplesStatus)
	err := grpc.Invoke(ctx, "/agentproto.NaplesSim/ConfigureHntap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *naplesSimClient) RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandStatus, error) {
	out := new(CommandStatus)
	err := grpc.Invoke(ctx, "/agentproto.NaplesSim/RunCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NaplesSim service

type NaplesSimServer interface {
	BringUp(context.Context, *NaplesSimConfig) (*NaplesStatus, error)
	Teardown(context.Context, *NaplesSimConfig) (*NaplesStatus, error)
	ConfigureHntap(context.Context, *HntapConfig) (*NaplesStatus, error)
	RunCommand(context.Context, *Command) (*CommandStatus, error)
}

func RegisterNaplesSimServer(s *grpc.Server, srv NaplesSimServer) {
	s.RegisterService(&_NaplesSim_serviceDesc, srv)
}

func _NaplesSim_BringUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaplesSimConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaplesSimServer).BringUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.NaplesSim/BringUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaplesSimServer).BringUp(ctx, req.(*NaplesSimConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaplesSim_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaplesSimConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaplesSimServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.NaplesSim/Teardown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaplesSimServer).Teardown(ctx, req.(*NaplesSimConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaplesSim_ConfigureHntap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HntapConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaplesSimServer).ConfigureHntap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.NaplesSim/ConfigureHntap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaplesSimServer).ConfigureHntap(ctx, req.(*HntapConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NaplesSim_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NaplesSimServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.NaplesSim/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NaplesSimServer).RunCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _NaplesSim_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentproto.NaplesSim",
	HandlerType: (*NaplesSimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BringUp",
			Handler:    _NaplesSim_BringUp_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _NaplesSim_Teardown_Handler,
		},
		{
			MethodName: "ConfigureHntap",
			Handler:    _NaplesSim_ConfigureHntap_Handler,
		},
		{
			MethodName: "RunCommand",
			Handler:    _NaplesSim_RunCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}

// Client API for Qemu service

type QemuClient interface {
	BringUp(ctx context.Context, in *QemuConfig, opts ...grpc.CallOption) (*QemuStatus, error)
	Teardown(ctx context.Context, in *QemuConfig, opts ...grpc.CallOption) (*QemuStatus, error)
	RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandStatus, error)
}

type qemuClient struct {
	cc *grpc.ClientConn
}

func NewQemuClient(cc *grpc.ClientConn) QemuClient {
	return &qemuClient{cc}
}

func (c *qemuClient) BringUp(ctx context.Context, in *QemuConfig, opts ...grpc.CallOption) (*QemuStatus, error) {
	out := new(QemuStatus)
	err := grpc.Invoke(ctx, "/agentproto.Qemu/BringUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qemuClient) Teardown(ctx context.Context, in *QemuConfig, opts ...grpc.CallOption) (*QemuStatus, error) {
	out := new(QemuStatus)
	err := grpc.Invoke(ctx, "/agentproto.Qemu/Teardown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qemuClient) RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandStatus, error) {
	out := new(CommandStatus)
	err := grpc.Invoke(ctx, "/agentproto.Qemu/RunCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Qemu service

type QemuServer interface {
	BringUp(context.Context, *QemuConfig) (*QemuStatus, error)
	Teardown(context.Context, *QemuConfig) (*QemuStatus, error)
	RunCommand(context.Context, *Command) (*CommandStatus, error)
}

func RegisterQemuServer(s *grpc.Server, srv QemuServer) {
	s.RegisterService(&_Qemu_serviceDesc, srv)
}

func _Qemu_BringUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QemuConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QemuServer).BringUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.Qemu/BringUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QemuServer).BringUp(ctx, req.(*QemuConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qemu_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QemuConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QemuServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.Qemu/Teardown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QemuServer).Teardown(ctx, req.(*QemuConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qemu_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QemuServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentproto.Qemu/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QemuServer).RunCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _Qemu_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agentproto.Qemu",
	HandlerType: (*QemuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BringUp",
			Handler:    _Qemu_BringUp_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _Qemu_Teardown_Handler,
		},
		{
			MethodName: "RunCommand",
			Handler:    _Qemu_RunCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}

func init() { proto.RegisterFile("agent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 917 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x35, 0x65, 0xdd, 0x38, 0xb6, 0x24, 0x66, 0xd3, 0xb8, 0x8a, 0x1a, 0x14, 0x06, 0xd1, 0x8b,
	0x20, 0xa0, 0x7e, 0x50, 0x81, 0x02, 0xbd, 0xa0, 0x00, 0x23, 0x3b, 0x8d, 0x50, 0x5b, 0x56, 0x29,
	0xd9, 0x45, 0x81, 0x16, 0xc6, 0x86, 0x5c, 0xd3, 0x44, 0xc5, 0xe5, 0x62, 0xb9, 0xaa, 0xeb, 0x3f,
	0xe8, 0x4b, 0xbf, 0xa0, 0x5f, 0xd3, 0xbf, 0xe8, 0x0f, 0xf4, 0x23, 0xfa, 0x56, 0x70, 0xb9, 0xbc,
	0x5a, 0x50, 0x90, 0xc4, 0x6f, 0x7b, 0x0e, 0x67, 0x66, 0xcf, 0xcc, 0xec, 0x8c, 0x04, 0x7b, 0xd8,
	0x23, 0x54, 0x1c, 0x31, 0x1e, 0x8a, 0x10, 0x81, 0x04, 0xf2, 0x6c, 0x7e, 0x0a, 0x7b, 0x73, 0x9f,
	0x7a, 0x67, 0x24, 0x8a, 0xb0, 0x47, 0x50, 0x1f, 0x5a, 0x41, 0x72, 0xec, 0x6b, 0x87, 0xda, 0x50,
	0xb7, 0x53, 0x68, 0xbe, 0x84, 0xe6, 0x09, 0x15, 0xbe, 0xb8, 0x43, 0x08, 0xea, 0x14, 0x07, 0xa9,
	0x81, 0x3c, 0xa3, 0x11, 0xd4, 0xc5, 0x1d, 0x23, 0xfd, 0xda, 0xa1, 0x36, 0xec, 0x8e, 0x0f, 0x8e,
	0xf2, 0x1b, 0x8e, 0x12, 0xaf, 0xe5, 0x1d, 0x23, 0xb6, 0xb4, 0x31, 0xe7, 0x00, 0xb3, 0xd0, 0x25,
	0x93, 0x90, 0x5e, 0xfb, 0x1e, 0x1a, 0x41, 0x93, 0x48, 0x0b, 0x19, 0x6f, 0x6f, 0x8c, 0xee, 0xfb,
	0xda, 0xca, 0x02, 0x1d, 0x40, 0xd3, 0x91, 0x5e, 0xf2, 0x1e, 0xdd, 0x56, 0xc8, 0xfc, 0x05, 0x8c,
	0x3c, 0xe2, 0x42, 0x60, 0xb1, 0x8e, 0xd0, 0x67, 0xd0, 0x8c, 0xe4, 0x49, 0xc6, 0xed, 0x8e, 0x9f,
	0x14, 0xe3, 0x5a, 0xcc, 0x4f, 0xcc, 0x6c, 0x65, 0x84, 0x06, 0xd0, 0xe6, 0x24, 0x62, 0x21, 0x8d,
	0x88, 0x0a, 0x9e, 0x61, 0x73, 0x01, 0xba, 0xc5, 0x98, 0xd2, 0xbb, 0x29, 0x7b, 0xe9, 0xec, 0xf9,
	0x91, 0xe0, 0x77, 0xb9, 0x73, 0x82, 0x63, 0xcd, 0x21, 0xfd, 0x81, 0x04, 0xeb, 0xfe, 0xee, 0xa1,
	0x36, 0x6c, 0xdb, 0x0a, 0x99, 0x97, 0x32, 0xe8, 0xc3, 0x8b, 0xfd, 0x53, 0x03, 0x7d, 0x4a, 0x05,
	0xe1, 0xd7, 0xd8, 0x21, 0xc8, 0x80, 0x5d, 0xcc, 0x98, 0x12, 0x1b, 0x1f, 0x33, 0xfd, 0xb5, 0x82,
	0xfe, 0x0f, 0x01, 0x02, 0xec, 0x58, 0xae, 0xcb, 0x49, 0x14, 0x49, 0x9d, 0xba, 0x5d, 0x60, 0xd0,
	0x33, 0xd0, 0x7d, 0x96, 0x7e, 0xae, 0xcb, 0xcf, 0x39, 0x11, 0x7f, 0x65, 0x9c, 0x5c, 0xfb, 0xbf,
	0x9f, 0x12, 0xda, 0x6f, 0x1c, 0x6a, 0xc3, 0x8e, 0x9d, 0x13, 0xe6, 0xbf, 0x1a, 0x74, 0x2e, 0x57,
	0x98, 0x6e, 0xd3, 0xf4, 0x09, 0x74, 0x19, 0xe6, 0x84, 0x8a, 0x29, 0x15, 0xd7, 0xb3, 0x5c, 0x5d,
	0x85, 0x45, 0x23, 0x30, 0x12, 0xe6, 0xac, 0xaa, 0xf6, 0x1e, 0x5f, 0xc9, 0xa9, 0x7e, 0x2f, 0x27,
	0x04, 0xf5, 0xdf, 0x56, 0x38, 0x15, 0x2c, 0xcf, 0xe5, 0x3c, 0x9b, 0x5b, 0xf3, 0x6c, 0x55, 0xf3,
	0xfc, 0x19, 0x7a, 0x59, 0x8a, 0x0f, 0xdf, 0x55, 0x0f, 0x5a, 0x93, 0x30, 0x08, 0x30, 0x75, 0x37,
	0x94, 0xcf, 0x80, 0x5d, 0x27, 0x70, 0x95, 0x4f, 0x7c, 0x8c, 0x93, 0x7f, 0x85, 0x9d, 0x5f, 0x3d,
	0x1e, 0xae, 0xa9, 0xab, 0x1e, 0x5e, 0x81, 0x89, 0xc7, 0x5c, 0xf8, 0x01, 0x09, 0xd7, 0x42, 0x56,
	0xa6, 0x63, 0xa7, 0xd0, 0xfc, 0x43, 0x83, 0x8e, 0xba, 0xe9, 0xed, 0xb2, 0xe8, 0x43, 0x8b, 0x13,
	0x31, 0x09, 0xdd, 0x24, 0x89, 0x86, 0x9d, 0xc2, 0x78, 0x12, 0x22, 0xe1, 0xc6, 0x77, 0x26, 0x3d,
	0x53, 0x48, 0xf1, 0x84, 0x73, 0xd5, 0x25, 0x85, 0xcc, 0xff, 0x34, 0xe8, 0xcd, 0x30, 0x5b, 0x91,
	0x68, 0xe1, 0x07, 0x5b, 0xa6, 0xef, 0x00, 0x9a, 0x34, 0x74, 0xc9, 0xf4, 0x58, 0x5e, 0xd8, 0xb1,
	0x15, 0x42, 0x1f, 0x41, 0xc7, 0x11, 0x7c, 0x35, 0xbb, 0x9d, 0x32, 0x1b, 0x53, 0x8f, 0xa8, 0x6b,
	0xcb, 0x64, 0x6c, 0x25, 0xd6, 0x94, 0x92, 0xd5, 0x34, 0x1e, 0x46, 0x2e, 0x94, 0x88, 0x32, 0x89,
	0x86, 0xd0, 0x53, 0x44, 0xda, 0x63, 0xf9, 0x70, 0x74, 0xbb, 0x4a, 0x17, 0x2c, 0x2b, 0x2f, 0xa9,
	0x4a, 0xc7, 0xfd, 0xbe, 0xf5, 0xc5, 0x8d, 0xdc, 0x0d, 0x2d, 0xd9, 0xa2, 0x0c, 0x9b, 0x3f, 0xc1,
	0xbe, 0x4a, 0xfd, 0xc1, 0x9f, 0xd2, 0xc7, 0xb0, 0xf7, 0x92, 0x0a, 0x9c, 0xee, 0xb3, 0x7c, 0xa7,
	0x6a, 0xa5, 0x9d, 0xfa, 0x05, 0x40, 0xac, 0x64, 0x4b, 0xdd, 0xdf, 0x83, 0x86, 0x1f, 0xc4, 0xbf,
	0x14, 0xc9, 0x0d, 0x09, 0x30, 0x7f, 0x4c, 0xfc, 0x1e, 0x5c, 0xf7, 0x48, 0x6e, 0x61, 0xe5, 0x80,
	0x1e, 0x41, 0xc7, 0x9a, 0x4f, 0xaf, 0x16, 0x4b, 0x6b, 0x79, 0xb1, 0xb8, 0x3a, 0xff, 0xde, 0xd8,
	0x41, 0x4f, 0xe0, 0x51, 0x81, 0x7a, 0x61, 0x4d, 0x4f, 0x4f, 0x8e, 0x0d, 0x0d, 0x3d, 0x83, 0x7e,
	0x81, 0xb6, 0xe6, 0xf3, 0xab, 0xd9, 0xf9, 0xf2, 0xea, 0xc5, 0xf9, 0xc5, 0xec, 0xd8, 0xa8, 0x8d,
	0x38, 0x40, 0xfe, 0xfb, 0x84, 0xba, 0x29, 0x9a, 0x85, 0x94, 0x18, 0x3b, 0xc8, 0x80, 0x7d, 0x85,
	0x65, 0x2f, 0x0c, 0x0d, 0x3d, 0x86, 0x5e, 0xc2, 0x4c, 0x42, 0x2a, 0xb0, 0x4f, 0x09, 0x37, 0x6a,
	0xa8, 0x03, 0x7a, 0x42, 0x5a, 0x8c, 0x19, 0xbb, 0xb9, 0xd7, 0xe2, 0xd6, 0x17, 0xce, 0x8d, 0x51,
	0x47, 0xfb, 0xd0, 0x4e, 0x98, 0xcb, 0x33, 0xa3, 0x31, 0x6e, 0x41, 0xc3, 0x8a, 0x8b, 0x30, 0xfe,
	0xa7, 0x06, 0x6d, 0x8b, 0x31, 0x09, 0xd0, 0x97, 0xd0, 0x7a, 0xce, 0x7d, 0xea, 0x5d, 0x30, 0x54,
	0x29, 0x92, 0xea, 0xd4, 0xa0, 0x4a, 0x27, 0xa5, 0x30, 0x77, 0xd0, 0x57, 0xd0, 0x5e, 0x12, 0xcc,
	0xdd, 0xf0, 0x96, 0xbe, 0xb1, 0xef, 0x77, 0xd0, 0xb3, 0x84, 0xc0, 0xce, 0x4d, 0xfe, 0x82, 0x4b,
	0xb6, 0x19, 0x3d, 0xf8, 0x60, 0x23, 0x9d, 0x05, 0x3a, 0x05, 0xc3, 0x72, 0xdd, 0xf2, 0xa6, 0x7f,
	0x5a, 0x74, 0x29, 0x7d, 0x7a, 0x5d, 0xb4, 0x6f, 0x01, 0xec, 0x35, 0x4d, 0x57, 0xde, 0xe3, 0xa2,
	0xb1, 0x22, 0x07, 0x4f, 0x37, 0x90, 0xa9, 0xff, 0xf8, 0xaf, 0x1a, 0xe8, 0xd9, 0xee, 0x40, 0xcf,
	0xf3, 0xda, 0x96, 0xee, 0xad, 0x6c, 0x97, 0x41, 0x7f, 0xc3, 0xc7, 0x54, 0xd1, 0xa4, 0x50, 0xe4,
	0xb7, 0x0e, 0x72, 0x02, 0xdd, 0xc4, 0x6a, 0xcd, 0x89, 0x1c, 0x42, 0xf4, 0x7e, 0xd1, 0xba, 0x30,
	0x97, 0x5b, 0xc3, 0xbc, 0x6b, 0x75, 0xfe, 0xd6, 0xa0, 0x1e, 0x0f, 0x29, 0xfa, 0x3a, 0x2f, 0x4c,
	0xe9, 0x3f, 0x5b, 0x3e, 0xf9, 0x83, 0x7b, 0x7c, 0xa6, 0xe2, 0x9b, 0x42, 0x45, 0xde, 0xdc, 0xfb,
	0x1d, 0x73, 0x78, 0xd5, 0x94, 0xf4, 0xe7, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x03, 0xf1,
	0xb0, 0xda, 0x0a, 0x00, 0x00,
}
