// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/
package restapi
import (
    evtsmgrprotos "github.com/pensando/sw/venice/ctrler/evtsmgr/rpcserver/protos"
    "github.com/pensando/sw/api"
    "github.com/pensando/sw/api/generated/monitoring"
    . "github.com/pensando/sw/venice/utils/testutils"
)

var (
	agentRestURL = ""
)

func TestMain(m *testing.M) {
	name := "evtsproxy-api-test"

	// 1. setup
	eps, policyMgr, eventsProxyDir, agentStorePath, logger, err := setup(name)
	if err != nil {
		log.Fatalf("failed to setup test, err: %v", err)
	}

	restServer, err := NewRestServer("127.0.0.1:0", policyMgr, logger)
	if err!=nil {
		log.Fatalf("failed to setup test, err: %v", err)
	}
	agentRestURL = restServer.GetListenURL()

	// 2. run tests
	testCode := m.Run()

	// 3. teardown
	restServer.Stop()
	policyMgr.Stop()
	eps.Stop()
	os.RemoveAll(eventsProxyDir)
	os.Remove(agentStorePath)

	os.Exit(testCode)
}

{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}

       {{range $params}}
           {{$crudObject := .CrudObject}}
           {{$pattern := .Pattern}}
           {{$methods := .Methods}}
           {{range $methods}}
                {{if strEq . "list"}}
                    // Test{{title $crudObject}}{{title .}} tests LIST endpoint
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var {{lower $crudObject}}{{title .}} []*evtsmgrprotos.{{title $crudObject}}
                        err := netutils.HTTPGet("http://"+agentRestURL+"/api/eventpolicies/", &{{lower $crudObject}}{{title .}} )
                        AssertOk(t, err, "error getting event policies from the REST Server")
                    }
                {{else if strEq . "post"}}
                    // Test{{title $crudObject}}{{title .}} tests POST and GET endpoints
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        var resp Response
                        var {{lower $crudObject}}Get evtsmgrprotos.{{title $crudObject}}
                        policy1 := &evtsmgrprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   monitoring.{{title $crudObject}}Spec{
                                Format: monitoring.MonitoringExportFormat_name[int32(monitoring.MonitoringExportFormat_SYSLOG_BSD)],
                                Targets: []*monitoring.ExportConfig{
                                    {
                                        Destination: "10.1.1.0",
                                        Transport: "udp/2055",
                                    },
                                    {
                                        Destination: "10.1.1.0",
                                        Transport: "udp/2056",
                                    },
                                },
                            },
                        }

                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/eventpolicies/", policy1, &resp)
                        AssertOk(t, err, "error posting event policy to REST Server, err: %v", err)
                        getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/eventpolicies/default/default/"+"test{{title .}}{{title $crudObject}}/", &{{lower $crudObject}}Get)
                        AssertOk(t, getErr, "error getting event policies from the REST Server, err: %v", err)
                        defer netutils.HTTPDelete("http://"+agentRestURL+"/api/eventpolicies/default/default/"+"test{{title .}}{{title $crudObject}}", policy1, &resp)
                    }
                {{else if strEq . "delete"}}
                    // Test{{title $crudObject}}{{title .}} tests DELETE endpoint
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        var resp Response
                        policy1 := &evtsmgrprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   monitoring.{{title $crudObject}}Spec{
                                Format: monitoring.MonitoringExportFormat_name[int32(monitoring.MonitoringExportFormat_SYSLOG_BSD)],
                                Targets: []*monitoring.ExportConfig{
                                    {
                                        Destination: "10.1.1.0",
                                        Transport: "udp/2055",
                                    },
                                    {
                                      Destination: "10.1.1.0",
                                      Transport: "udp/2056",
                                    },
                                },
                            },
                        }

                         {{lower .}}Meta := evtsmgrprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                          }
                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/eventpolicies/", policy1, &resp)
                        AssertOk(t, err, "error posting event policy to REST Server, err: %v", err)
                        delErr := netutils.HTTPDelete("http://"+agentRestURL+"/api/eventpolicies/default/default/"+"test{{title .}}{{title $crudObject}}", &{{lower .}}Meta, &resp)
                        AssertOk(t, delErr, "error deleting event policies from the REST Server, err: %v", err)
                    }
                {{else if strEq . "put"}}
                    // Test{{title $crudObject}}{{title .}} tests PUT endpoint
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        var resp Response
                        var policyFromDb evtsmgrprotos.EventPolicy
                        policy1 := &evtsmgrprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   monitoring.{{title $crudObject}}Spec{
                                Format: monitoring.MonitoringExportFormat_name[int32(monitoring.MonitoringExportFormat_SYSLOG_BSD)],
                                Targets: []*monitoring.ExportConfig{
                                    {
                                        Destination: "10.1.1.0",
                                        Transport: "udp/2055",
                                    },
                                    {
                                      Destination: "10.1.1.0",
                                      Transport: "udp/2056",
                                    },
                                },
                            },
                        }

                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/eventpolicies/", policy1, &resp)
                        AssertOk(t, err, "error posting event policy to REST Server, err: %v", err)
                        getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/eventpolicies/default/default/"+"test{{title .}}{{title $crudObject}}", &policyFromDb)
                        AssertOk(t, getErr, "error getting event policies from the REST Server, err: %v", err)
                        Assert(t, reflect.DeepEqual(policy1.GetSpec(), policyFromDb.GetSpec()), "spec mismatched, expected: %v, got: %v", policy1.GetSpec(), policyFromDb.GetSpec())

                        // update the policy
                        policy1 = &policyFromDb
                        policy1.Spec.Targets[0].Transport = "udp/2057"
                        err = netutils.HTTPPut("http://"+agentRestURL+"/api/eventpolicies/default/default/"+"test{{title .}}{{title $crudObject}}", policy1, &resp)
                        AssertOk(t, err, "error update event policy to REST Server, err: %v", err)

                        getErr = netutils.HTTPGet("http://"+agentRestURL+"/api/eventpolicies/default/default/"+"test{{title .}}{{title $crudObject}}", &policyFromDb)
                        AssertOk(t, getErr, "error getting event policies from the REST Server, err: %v", err)
                        Assert(t, reflect.DeepEqual(policy1.GetSpec(), policyFromDb.GetSpec()), "spec mismatched, expected: %v, got: %v", policy1.GetSpec(), policyFromDb.GetSpec())
                        defer netutils.HTTPDelete("http://"+agentRestURL+"/api/eventpolicies/default/default/"+"test{{title .}}{{title $crudObject}}", policy1, &resp)
                    }
                {{end}}
           {{end}}


      {{end}}
   {{end}}
{{end}}