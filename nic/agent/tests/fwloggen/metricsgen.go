// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * This file is a auto generated.
 * Input file: *_apigen.go
 */

package main

import (
	"fmt"

	"github.com/pensando/sw/nic/delphi/proto/goproto"
)

func metricsInit() {

	if it, err := goproto.NewAccelHwRingMetricsIterator(); err == nil {
		n := &goproto.AccelHwRingMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init AccelHwRingMetrics")
	}

	if it, err := goproto.NewAccelSeqQueueInfoMetricsIterator(); err == nil {
		n := &goproto.AccelSeqQueueInfoMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init AccelSeqQueueInfoMetrics")
	}

	if it, err := goproto.NewAccelSeqQueueMetricsIterator(); err == nil {
		n := &goproto.AccelSeqQueueMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init AccelSeqQueueMetrics")
	}

	if it, err := goproto.NewAsicFrequencyMetricsIterator(); err == nil {
		n := &goproto.AsicFrequencyMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init AsicFrequencyMetrics")
	}

	if it, err := goproto.NewAsicMemoryMetricsIterator(); err == nil {
		n := &goproto.AsicMemoryMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init AsicMemoryMetrics")
	}

	if it, err := goproto.NewAsicPowerMetricsIterator(); err == nil {
		n := &goproto.AsicPowerMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init AsicPowerMetrics")
	}

	if it, err := goproto.NewAsicTemperatureMetricsIterator(); err == nil {
		n := &goproto.AsicTemperatureMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init AsicTemperatureMetrics")
	}

	if it, err := goproto.NewDbwaintdbMetricsIterator(); err == nil {
		n := &goproto.DbwaintdbMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DbwaintdbMetrics")
	}

	if it, err := goproto.NewDbwaintlifqstatemapMetricsIterator(); err == nil {
		n := &goproto.DbwaintlifqstatemapMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DbwaintlifqstatemapMetrics")
	}

	if it, err := goproto.NewDppintcreditMetricsIterator(); err == nil {
		n := &goproto.DppintcreditMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DppintcreditMetrics")
	}

	if it, err := goproto.NewDppintfifoMetricsIterator(); err == nil {
		n := &goproto.DppintfifoMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DppintfifoMetrics")
	}

	if it, err := goproto.NewDppintreg1MetricsIterator(); err == nil {
		n := &goproto.Dppintreg1Metrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init Dppintreg1Metrics")
	}

	if it, err := goproto.NewDppintreg2MetricsIterator(); err == nil {
		n := &goproto.Dppintreg2Metrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init Dppintreg2Metrics")
	}

	if it, err := goproto.NewDppintsramseccMetricsIterator(); err == nil {
		n := &goproto.DppintsramseccMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DppintsramseccMetrics")
	}

	if it, err := goproto.NewDprintcreditMetricsIterator(); err == nil {
		n := &goproto.DprintcreditMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DprintcreditMetrics")
	}

	if it, err := goproto.NewDprintfifoMetricsIterator(); err == nil {
		n := &goproto.DprintfifoMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DprintfifoMetrics")
	}

	if it, err := goproto.NewDprintflopfifoMetricsIterator(); err == nil {
		n := &goproto.DprintflopfifoMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DprintflopfifoMetrics")
	}

	if it, err := goproto.NewDprintreg1MetricsIterator(); err == nil {
		n := &goproto.Dprintreg1Metrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init Dprintreg1Metrics")
	}

	if it, err := goproto.NewDprintreg2MetricsIterator(); err == nil {
		n := &goproto.Dprintreg2Metrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init Dprintreg2Metrics")
	}

	if it, err := goproto.NewDprintsramseccMetricsIterator(); err == nil {
		n := &goproto.DprintsramseccMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DprintsramseccMetrics")
	}

	if it, err := goproto.NewDropMetricsIterator(); err == nil {
		n := &goproto.DropMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init DropMetrics")
	}

	if it, err := goproto.NewEgressDropMetricsIterator(); err == nil {
		n := &goproto.EgressDropMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init EgressDropMetrics")
	}

	if it, err := goproto.NewFteCPSMetricsIterator(); err == nil {
		n := &goproto.FteCPSMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init FteCPSMetrics")
	}

	if it, err := goproto.NewFteLifQMetricsIterator(); err == nil {
		n := &goproto.FteLifQMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init FteLifQMetrics")
	}

	if it, err := goproto.NewInteccdescMetricsIterator(); err == nil {
		n := &goproto.InteccdescMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init InteccdescMetrics")
	}

	if it, err := goproto.NewIntspareMetricsIterator(); err == nil {
		n := &goproto.IntspareMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init IntspareMetrics")
	}

	if it, err := goproto.NewLifMetricsIterator(); err == nil {
		n := &goproto.LifMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init LifMetrics")
	}

	if it, err := goproto.NewMacMetricsIterator(); err == nil {
		n := &goproto.MacMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init MacMetrics")
	}

	if it, err := goproto.NewMcmchintmcMetricsIterator(); err == nil {
		n := &goproto.McmchintmcMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init McmchintmcMetrics")
	}

	if it, err := goproto.NewMdhensintaxierrMetricsIterator(); err == nil {
		n := &goproto.MdhensintaxierrMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init MdhensintaxierrMetrics")
	}

	if it, err := goproto.NewMdhensinteccMetricsIterator(); err == nil {
		n := &goproto.MdhensinteccMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init MdhensinteccMetrics")
	}

	if it, err := goproto.NewMdhensintipcoreMetricsIterator(); err == nil {
		n := &goproto.MdhensintipcoreMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init MdhensintipcoreMetrics")
	}

	if it, err := goproto.NewMgmtMacMetricsIterator(); err == nil {
		n := &goproto.MgmtMacMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init MgmtMacMetrics")
	}

	if it, err := goproto.NewMpmpnsintcryptoMetricsIterator(); err == nil {
		n := &goproto.MpmpnsintcryptoMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init MpmpnsintcryptoMetrics")
	}

	if it, err := goproto.NewPbpbchbmintecchbmrbMetricsIterator(); err == nil {
		n := &goproto.PbpbchbmintecchbmrbMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PbpbchbmintecchbmrbMetrics")
	}

	if it, err := goproto.NewPbpbchbminthbmaxierrrspMetricsIterator(); err == nil {
		n := &goproto.PbpbchbminthbmaxierrrspMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PbpbchbminthbmaxierrrspMetrics")
	}

	if it, err := goproto.NewPbpbchbminthbmdropMetricsIterator(); err == nil {
		n := &goproto.PbpbchbminthbmdropMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PbpbchbminthbmdropMetrics")
	}

	if it, err := goproto.NewPbpbchbminthbmpbusviolationMetricsIterator(); err == nil {
		n := &goproto.PbpbchbminthbmpbusviolationMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PbpbchbminthbmpbusviolationMetrics")
	}

	if it, err := goproto.NewPbpbchbminthbmxoffMetricsIterator(); err == nil {
		n := &goproto.PbpbchbminthbmxoffMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PbpbchbminthbmxoffMetrics")
	}

	if it, err := goproto.NewPbpbcintcreditunderflowMetricsIterator(); err == nil {
		n := &goproto.PbpbcintcreditunderflowMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PbpbcintcreditunderflowMetrics")
	}

	if it, err := goproto.NewPbpbcintpbusviolationMetricsIterator(); err == nil {
		n := &goproto.PbpbcintpbusviolationMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PbpbcintpbusviolationMetrics")
	}

	if it, err := goproto.NewPbpbcintrplMetricsIterator(); err == nil {
		n := &goproto.PbpbcintrplMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PbpbcintrplMetrics")
	}

	if it, err := goproto.NewPbpbcintwriteMetricsIterator(); err == nil {
		n := &goproto.PbpbcintwriteMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PbpbcintwriteMetrics")
	}

	if it, err := goproto.NewPcieMgrMetricsIterator(); err == nil {
		n := &goproto.PcieMgrMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PcieMgrMetrics")
	}

	if it, err := goproto.NewPciePortMetricsIterator(); err == nil {
		n := &goproto.PciePortMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init PciePortMetrics")
	}

	if it, err := goproto.NewRuleMetricsIterator(); err == nil {
		n := &goproto.RuleMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init RuleMetrics")
	}

	if it, err := goproto.NewSessionSummaryMetricsIterator(); err == nil {
		n := &goproto.SessionSummaryMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init SessionSummaryMetrics")
	}

	if it, err := goproto.NewSgempuinterrMetricsIterator(); err == nil {
		n := &goproto.SgempuinterrMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init SgempuinterrMetrics")
	}

	if it, err := goproto.NewSgempuintinfoMetricsIterator(); err == nil {
		n := &goproto.SgempuintinfoMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init SgempuintinfoMetrics")
	}

	if it, err := goproto.NewSgeteinterrMetricsIterator(); err == nil {
		n := &goproto.SgeteinterrMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init SgeteinterrMetrics")
	}

	if it, err := goproto.NewSgeteintinfoMetricsIterator(); err == nil {
		n := &goproto.SgeteintinfoMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init SgeteintinfoMetrics")
	}

	if it, err := goproto.NewSsepicsintbadaddrMetricsIterator(); err == nil {
		n := &goproto.SsepicsintbadaddrMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init SsepicsintbadaddrMetrics")
	}

	if it, err := goproto.NewSsepicsintbgMetricsIterator(); err == nil {
		n := &goproto.SsepicsintbgMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init SsepicsintbgMetrics")
	}

	if it, err := goproto.NewSsepicsintpicsMetricsIterator(); err == nil {
		n := &goproto.SsepicsintpicsMetrics{}
		if fillKey(n.GetKey()) == true {
			it.Create(n.GetKey())
		}
	} else {
		fmt.Printf("failed to init SsepicsintpicsMetrics")
	}

}

func fillKey(val interface{}) bool {
	switch v := val.(type) {
	case int:
		return true
	case uint64:
		return true
	case uint32:
		return true
	case int32:
		return true
	default:
		fmt.Printf("invalid %v", v)
		return false
	}
}
