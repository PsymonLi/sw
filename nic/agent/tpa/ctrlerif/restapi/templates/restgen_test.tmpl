// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/
package restapi
import (
"github.com/pensando/sw/venice/ctrler/tpm/rpcserver/protos"
. "github.com/pensando/sw/venice/utils/testutils"
)

{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}

       {{range $params}}
           {{$crudObject := .CrudObject}}
           {{$pattern := .Pattern}}
           {{$methods := .Methods}}
           {{range $methods}}
                {{if strEq . "list"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var {{lower $crudObject}}{{title .}} []*tpmprotos.{{title $crudObject}}
                        err := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/flowexports/", &{{lower $crudObject}}{{title .}} )
                        AssertOk(t, err, "Error getting {{lower $crudObject}}s from the REST Server")
                    }
                {{else if strEq . "post"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        var resp Response
                        var {{lower $crudObject}}Get tpmprotos.{{title $crudObject}}
                        {{lower .}}Data := tpmprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   tpmprotos.{{title $crudObject}}Spec{
                                Targets: []monitoring.FlowExportTarget{ {
                                    Interval: "15s",
                                    Format:"IPFIX",
                                    Exports: []monitoring.ExportConfig{
                                        {
                                        Destination: "10.1.1.0",
                                        Transport: "UDP/2055",
                                        },
                                   },
                                },
                              },
                           },
                        }
                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/flowexports/", &{{lower .}}Data, &resp)
                        AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                        getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/"+"test{{title .}}{{title $crudObject}}/", &{{lower $crudObject}}Get)
                        AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")

                    }

                {{else if strEq . "delete"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        var resp Response
                        {{lower .}}Data := tpmprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                             Spec:   tpmprotos.{{title $crudObject}}Spec{
                                Targets: []monitoring.FlowExportTarget{ {
                                    Interval: "15s",
                                    Format:"IPFIX",
                                    Exports: []monitoring.ExportConfig{
                                        {
                                        Destination: "10.1.1.0",
                                        Transport: "UDP/2055",
                                        },
                                   },
                                },
                              },
                           },
                        }

                         {{lower .}}Meta := tpmprotos.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                          }
                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/flowexports/", &{{lower .}}Data, &resp)
                        AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                        delErr := netutils.HTTPDelete("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/"+"test{{title .}}{{title $crudObject}}", &{{lower .}}Meta, &resp)
                        AssertOk(t, delErr, "Error deleting {{lower $crudObject}}s from the REST Server")
                    }
                {{end}}
           {{end}}


      {{end}}
   {{end}}
{{end}}
