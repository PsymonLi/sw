// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: state.proto

/*
	Package tpaprotos is a generated protocol buffer package.

	It is generated from these files:
		state.proto

	It has these top-level messages:
		FlowExportPolicyObj
		FlowMonitorObj
*/
package tpaprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/pensando/sw/api"
import tpmprotos "github.com/pensando/sw/venice/ctrler/tpm/rpcserver/protos"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowExportPolicyObj struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=T,embedded=T" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=O,embedded=O" json:"meta,omitempty"`
	P              *tpmprotos.FlowExportPolicy `protobuf:"bytes,3,opt,name=P" json:"flow-export-policy,inline"`
	FlowMonObj     []*FlowMonitorObj           `protobuf:"bytes,4,rep,name=FlowMonObj" json:"flow-monitor"`
}

func (m *FlowExportPolicyObj) Reset()                    { *m = FlowExportPolicyObj{} }
func (m *FlowExportPolicyObj) String() string            { return proto.CompactTextString(m) }
func (*FlowExportPolicyObj) ProtoMessage()               {}
func (*FlowExportPolicyObj) Descriptor() ([]byte, []int) { return fileDescriptorState, []int{0} }

func (m *FlowExportPolicyObj) GetP() *tpmprotos.FlowExportPolicy {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *FlowExportPolicyObj) GetFlowMonObj() []*FlowMonitorObj {
	if m != nil {
		return m.FlowMonObj
	}
	return nil
}

type FlowMonitorObj struct {
	Key          uint64   `protobuf:"varint,1,opt,name=Key,proto3" json:"key,omitempty"`
	CollectorKey []uint64 `protobuf:"varint,2,rep,packed,name=CollectorKey" json:"collector,omitempty"`
}

func (m *FlowMonitorObj) Reset()                    { *m = FlowMonitorObj{} }
func (m *FlowMonitorObj) String() string            { return proto.CompactTextString(m) }
func (*FlowMonitorObj) ProtoMessage()               {}
func (*FlowMonitorObj) Descriptor() ([]byte, []int) { return fileDescriptorState, []int{1} }

func (m *FlowMonitorObj) GetKey() uint64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *FlowMonitorObj) GetCollectorKey() []uint64 {
	if m != nil {
		return m.CollectorKey
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowExportPolicyObj)(nil), "tpaprotos.FlowExportPolicyObj")
	proto.RegisterType((*FlowMonitorObj)(nil), "tpaprotos.FlowMonitorObj")
}
func (m *FlowExportPolicyObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowExportPolicyObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintState(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintState(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.P != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintState(dAtA, i, uint64(m.P.Size()))
		n3, err := m.P.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.FlowMonObj) > 0 {
		for _, msg := range m.FlowMonObj {
			dAtA[i] = 0x22
			i++
			i = encodeVarintState(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowMonitorObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowMonitorObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintState(dAtA, i, uint64(m.Key))
	}
	if len(m.CollectorKey) > 0 {
		dAtA5 := make([]byte, len(m.CollectorKey)*10)
		var j4 int
		for _, num := range m.CollectorKey {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintState(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	return i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FlowExportPolicyObj) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovState(uint64(l))
	if m.P != nil {
		l = m.P.Size()
		n += 1 + l + sovState(uint64(l))
	}
	if len(m.FlowMonObj) > 0 {
		for _, e := range m.FlowMonObj {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func (m *FlowMonitorObj) Size() (n int) {
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovState(uint64(m.Key))
	}
	if len(m.CollectorKey) > 0 {
		l = 0
		for _, e := range m.CollectorKey {
			l += sovState(uint64(e))
		}
		n += 1 + sovState(uint64(l)) + l
	}
	return n
}

func sovState(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowExportPolicyObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowExportPolicyObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowExportPolicyObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P == nil {
				m.P = &tpmprotos.FlowExportPolicy{}
			}
			if err := m.P.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowMonObj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowMonObj = append(m.FlowMonObj, &FlowMonitorObj{})
			if err := m.FlowMonObj[len(m.FlowMonObj)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowMonitorObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowMonitorObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowMonitorObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CollectorKey = append(m.CollectorKey, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthState
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CollectorKey = append(m.CollectorKey, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorKey", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowState
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipState(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthState = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("state.proto", fileDescriptorState) }

var fileDescriptorState = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xbb, 0x71, 0x04, 0x62, 0xd3, 0x96, 0xe2, 0x1c, 0x70, 0x83, 0xb0, 0xa3, 0x22, 0xa4,
	0x1c, 0x9a, 0x5d, 0x54, 0x4e, 0x88, 0x9b, 0x2b, 0x10, 0x52, 0x55, 0x39, 0x8a, 0xf2, 0x02, 0xf6,
	0x32, 0x0d, 0x6b, 0x6c, 0xef, 0x6a, 0x3d, 0x6d, 0xf0, 0x9b, 0xc0, 0x1b, 0xf5, 0xd8, 0x27, 0xb0,
	0x50, 0xb8, 0xf9, 0x29, 0x90, 0xd7, 0xa5, 0x72, 0x90, 0x7a, 0x9b, 0xf9, 0xe7, 0xff, 0xc6, 0xf3,
	0x7b, 0xe9, 0xa8, 0xc4, 0x18, 0x81, 0x69, 0xa3, 0x50, 0xb9, 0xcf, 0x50, 0xc7, 0xb6, 0x2a, 0x27,
	0x6f, 0xd7, 0x12, 0xbf, 0x5d, 0x27, 0x4c, 0xa8, 0x9c, 0x6b, 0x28, 0xca, 0xb8, 0xf8, 0xaa, 0x78,
	0xb9, 0xe1, 0xb1, 0x96, 0x3c, 0x07, 0x8c, 0x3b, 0x62, 0x72, 0xfe, 0x88, 0xed, 0x06, 0x0a, 0x29,
	0x80, 0x0b, 0x34, 0x19, 0x18, 0x8e, 0x3a, 0xe7, 0x46, 0x8b, 0x12, 0xcc, 0x0d, 0x18, 0xde, 0x7d,
	0xa1, 0x15, 0xef, 0x97, 0xcc, 0x7b, 0x4b, 0xd6, 0x6a, 0xad, 0x3a, 0x47, 0x72, 0x7d, 0x65, 0x3b,
	0xdb, 0xd8, 0xaa, 0xb3, 0x9f, 0xfc, 0x1a, 0xd0, 0xf1, 0xe7, 0x4c, 0x6d, 0x3e, 0xfd, 0xd0, 0xca,
	0xe0, 0x42, 0x65, 0x52, 0x54, 0x51, 0x92, 0xba, 0xef, 0x28, 0x59, 0x79, 0x64, 0x4a, 0x66, 0xa3,
	0xb3, 0x03, 0x16, 0x6b, 0xc9, 0x56, 0x95, 0x86, 0x4b, 0xc0, 0x38, 0x1c, 0xdf, 0xd6, 0xc1, 0xde,
	0x5d, 0x1d, 0x90, 0xa6, 0x0e, 0x9e, 0x9e, 0xca, 0x22, 0x93, 0x05, 0x2c, 0xc9, 0xca, 0xfd, 0x40,
	0x49, 0xe4, 0x0d, 0x2c, 0xf1, 0xdc, 0x12, 0x51, 0x92, 0x82, 0x40, 0xcb, 0x4c, 0x7a, 0xcc, 0x61,
	0x9b, 0xf8, 0x54, 0xe5, 0x12, 0x21, 0xd7, 0x58, 0x2d, 0x49, 0xe4, 0x7e, 0xa1, 0x64, 0xe1, 0x39,
	0x16, 0x7d, 0xc5, 0x50, 0xe7, 0x5d, 0x28, 0xf6, 0xff, 0x5d, 0xe1, 0xeb, 0xa6, 0x0e, 0x8e, 0xaf,
	0x32, 0xb5, 0x99, 0x83, 0x95, 0xe7, 0xda, 0xea, 0x0f, 0x47, 0x2c, 0xdc, 0x0b, 0x4a, 0x5b, 0xea,
	0x52, 0x15, 0x51, 0x92, 0x7a, 0xc3, 0xa9, 0x33, 0x1b, 0x9d, 0x1d, 0xb3, 0x87, 0x97, 0x60, 0xf7,
	0x43, 0x89, 0xca, 0x44, 0x49, 0x1a, 0x1e, 0x35, 0x75, 0xb0, 0x6f, 0x17, 0xe6, 0x9d, 0xb8, 0xec,
	0xe1, 0x27, 0x86, 0x1e, 0xee, 0xfa, 0xdd, 0x37, 0xd4, 0xb9, 0x80, 0xca, 0xfe, 0x97, 0x61, 0xf8,
	0xa2, 0xa9, 0x83, 0x83, 0xef, 0x50, 0xf5, 0xb2, 0xb4, 0x53, 0xf7, 0x23, 0xdd, 0x3f, 0x57, 0x59,
	0x06, 0x02, 0x95, 0x69, 0xdd, 0x83, 0xa9, 0x33, 0x1b, 0x86, 0x2f, 0x9b, 0x3a, 0x18, 0x8b, 0x7f,
	0x7a, 0x8f, 0xd9, 0x31, 0x87, 0x47, 0xb7, 0x5b, 0x9f, 0xdc, 0x6d, 0x7d, 0xf2, 0x7b, 0xeb, 0x93,
	0x9f, 0x7f, 0xfc, 0xbd, 0xe4, 0x89, 0x3d, 0xfd, 0xfd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65,
	0x0a, 0x96, 0x3f, 0x5d, 0x02, 0x00, 0x00,
}
