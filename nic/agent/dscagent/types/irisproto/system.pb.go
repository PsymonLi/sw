// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: system.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ApiCounter int32

const (
	ApiCounter_API_COUNTER_NONE                                    ApiCounter = 0
	ApiCounter_API_COUNTER_VRF_CREATE                              ApiCounter = 1
	ApiCounter_API_COUNTER_VRF_UPDATE                              ApiCounter = 2
	ApiCounter_API_COUNTER_VRF_DELETE                              ApiCounter = 3
	ApiCounter_API_COUNTER_VRF_GET                                 ApiCounter = 4
	ApiCounter_API_COUNTER_ACL_CREATE                              ApiCounter = 5
	ApiCounter_API_COUNTER_ACL_UPDATE                              ApiCounter = 6
	ApiCounter_API_COUNTER_ACL_DELETE                              ApiCounter = 7
	ApiCounter_API_COUNTER_ACL_GET                                 ApiCounter = 8
	ApiCounter_API_COUNTER_CPUCB_CREATE                            ApiCounter = 9
	ApiCounter_API_COUNTER_CPUCB_UPDATE                            ApiCounter = 10
	ApiCounter_API_COUNTER_CPUCB_DELETE                            ApiCounter = 11
	ApiCounter_API_COUNTER_CPUCB_GET                               ApiCounter = 12
	ApiCounter_API_COUNTER_CRYPTOAPI_INVOKE                        ApiCounter = 13
	ApiCounter_API_COUNTER_CRYPTOKEY_CREATE                        ApiCounter = 14
	ApiCounter_API_COUNTER_CRYPTOKEY_UPDATE                        ApiCounter = 15
	ApiCounter_API_COUNTER_CRYPTOKEY_DELETE                        ApiCounter = 16
	ApiCounter_API_COUNTER_CRYPTOKEY_READ                          ApiCounter = 17
	ApiCounter_API_COUNTER_DESCRAOL_GET                            ApiCounter = 18
	ApiCounter_API_COUNTER_ENDPOINT_CREATE                         ApiCounter = 19
	ApiCounter_API_COUNTER_ENDPOINT_UPDATE                         ApiCounter = 20
	ApiCounter_API_COUNTER_ENDPOINT_DELETE                         ApiCounter = 21
	ApiCounter_API_COUNTER_ENDPOINT_GET                            ApiCounter = 22
	ApiCounter_API_COUNTER_GFT_EXACT_MATCH_PROFILE_CREATE          ApiCounter = 23
	ApiCounter_API_COUNTER_GFT_HEADER_TRANSPOSITION_PROFILE_CREATE ApiCounter = 24
	ApiCounter_API_COUNTER_GFT_EXACT_MATCH_FLOW_ENTRY_CREATE       ApiCounter = 25
	ApiCounter_API_COUNTER_GETPROGRAM_ADDRESS                      ApiCounter = 26
	ApiCounter_API_COUNTER_ALLOCHBM_ADDRESS                        ApiCounter = 27
	ApiCounter_API_COUNTER_CONFIGURELIF_BDF                        ApiCounter = 28
	ApiCounter_API_COUNTER_IPSECCB_CREATE                          ApiCounter = 29
	ApiCounter_API_COUNTER_IPSECCB_UPDATE                          ApiCounter = 30
	ApiCounter_API_COUNTER_IPSECCB_DELETE                          ApiCounter = 31
	ApiCounter_API_COUNTER_IPSECCB_GET                             ApiCounter = 32
	ApiCounter_API_COUNTER_L2SEGMENT_CREATE                        ApiCounter = 33
	ApiCounter_API_COUNTER_L2SEGMENT_UPDATE                        ApiCounter = 34
	ApiCounter_API_COUNTER_L2SEGMENT_DELETE                        ApiCounter = 35
	ApiCounter_API_COUNTER_L2SEGMENT_GET                           ApiCounter = 36
	ApiCounter_API_COUNTER_L4LBSERVICE_CREATE                      ApiCounter = 37
	ApiCounter_API_COUNTER_MULTICASTENTRY_CREATE                   ApiCounter = 38
	ApiCounter_API_COUNTER_MULTICASTENTRY_UPDATE                   ApiCounter = 39
	ApiCounter_API_COUNTER_MULTICASTENTRY_DELETE                   ApiCounter = 40
	ApiCounter_API_COUNTER_MULTICASTENTRY_GET                      ApiCounter = 41
	ApiCounter_API_COUNTER_SECURITYPROFILE_CREATE                  ApiCounter = 42
	ApiCounter_API_COUNTER_SECURITYPROFILE_UPDATE                  ApiCounter = 43
	ApiCounter_API_COUNTER_SECURITYPROFILE_DELETE                  ApiCounter = 44
	ApiCounter_API_COUNTER_SECURITYPROFILE_GET                     ApiCounter = 45
	ApiCounter_API_COUNTER_SECURITYGROUPPOLICY_CREATE              ApiCounter = 46
	ApiCounter_API_COUNTER_SECURITYGROUPPOLICY_UPDATE              ApiCounter = 47
	ApiCounter_API_COUNTER_SECURITYGROUPPOLICY_DELETE              ApiCounter = 48
	ApiCounter_API_COUNTER_SECURITYGROUPPOLICY_GET                 ApiCounter = 49
	ApiCounter_API_COUNTER_SECURITYGROUP_CREATE                    ApiCounter = 50
	ApiCounter_API_COUNTER_SECURITYGROUP_UPDATE                    ApiCounter = 51
	ApiCounter_API_COUNTER_SECURITYGROUP_DELETE                    ApiCounter = 52
	ApiCounter_API_COUNTER_SECURITYGROUP_GET                       ApiCounter = 53
	ApiCounter_API_COUNTER_DOSPOLICY_CREATE                        ApiCounter = 54
	ApiCounter_API_COUNTER_DOSPOLICY_UPDATE                        ApiCounter = 55
	ApiCounter_API_COUNTER_DOSPOLICY_DELETE                        ApiCounter = 56
	ApiCounter_API_COUNTER_DOSPOLICY_GET                           ApiCounter = 57
	ApiCounter_API_COUNTER_PROXYCCB_CREATE                         ApiCounter = 58
	ApiCounter_API_COUNTER_PROXYCCB_UPDATE                         ApiCounter = 59
	ApiCounter_API_COUNTER_PROXYCCB_DELETE                         ApiCounter = 60
	ApiCounter_API_COUNTER_PROXYCCB_GET                            ApiCounter = 61
	ApiCounter_API_COUNTER_PROXYRCB_CREATE                         ApiCounter = 62
	ApiCounter_API_COUNTER_PROXYRCB_UPDATE                         ApiCounter = 63
	ApiCounter_API_COUNTER_PROXYRCB_DELETE                         ApiCounter = 64
	ApiCounter_API_COUNTER_PROXYRCB_GET                            ApiCounter = 65
	ApiCounter_API_COUNTER_QOSCLASS_CREATE                         ApiCounter = 66
	ApiCounter_API_COUNTER_QOSCLASS_UPDATE                         ApiCounter = 67
	ApiCounter_API_COUNTER_QOSCLASS_DELETE                         ApiCounter = 68
	ApiCounter_API_COUNTER_QOSCLASS_GET                            ApiCounter = 69
	ApiCounter_API_COUNTER_COPP_UPDATE                             ApiCounter = 70
	ApiCounter_API_COUNTER_COPP_GET                                ApiCounter = 71
	ApiCounter_API_COUNTER_RAWCCB_CREATE                           ApiCounter = 72
	ApiCounter_API_COUNTER_RAWCCB_UPDATE                           ApiCounter = 73
	ApiCounter_API_COUNTER_RAWCCB_DELETE                           ApiCounter = 74
	ApiCounter_API_COUNTER_RAWCCB_GET                              ApiCounter = 75
	ApiCounter_API_COUNTER_TCPCB_CREATE                            ApiCounter = 76
	ApiCounter_API_COUNTER_TCPCB_UPDATE                            ApiCounter = 77
	ApiCounter_API_COUNTER_TCPCB_DELETE                            ApiCounter = 78
	ApiCounter_API_COUNTER_TCPCB_GET                               ApiCounter = 79
	ApiCounter_API_COUNTER_TLSCB_CREATE                            ApiCounter = 80
	ApiCounter_API_COUNTER_TLSCB_UPDATE                            ApiCounter = 81
	ApiCounter_API_COUNTER_TLSCB_DELETE                            ApiCounter = 82
	ApiCounter_API_COUNTER_TLSCB_GET                               ApiCounter = 83
	ApiCounter_API_COUNTER_MAX                                     ApiCounter = 84
)

var ApiCounter_name = map[int32]string{
	0:  "API_COUNTER_NONE",
	1:  "API_COUNTER_VRF_CREATE",
	2:  "API_COUNTER_VRF_UPDATE",
	3:  "API_COUNTER_VRF_DELETE",
	4:  "API_COUNTER_VRF_GET",
	5:  "API_COUNTER_ACL_CREATE",
	6:  "API_COUNTER_ACL_UPDATE",
	7:  "API_COUNTER_ACL_DELETE",
	8:  "API_COUNTER_ACL_GET",
	9:  "API_COUNTER_CPUCB_CREATE",
	10: "API_COUNTER_CPUCB_UPDATE",
	11: "API_COUNTER_CPUCB_DELETE",
	12: "API_COUNTER_CPUCB_GET",
	13: "API_COUNTER_CRYPTOAPI_INVOKE",
	14: "API_COUNTER_CRYPTOKEY_CREATE",
	15: "API_COUNTER_CRYPTOKEY_UPDATE",
	16: "API_COUNTER_CRYPTOKEY_DELETE",
	17: "API_COUNTER_CRYPTOKEY_READ",
	18: "API_COUNTER_DESCRAOL_GET",
	19: "API_COUNTER_ENDPOINT_CREATE",
	20: "API_COUNTER_ENDPOINT_UPDATE",
	21: "API_COUNTER_ENDPOINT_DELETE",
	22: "API_COUNTER_ENDPOINT_GET",
	23: "API_COUNTER_GFT_EXACT_MATCH_PROFILE_CREATE",
	24: "API_COUNTER_GFT_HEADER_TRANSPOSITION_PROFILE_CREATE",
	25: "API_COUNTER_GFT_EXACT_MATCH_FLOW_ENTRY_CREATE",
	26: "API_COUNTER_GETPROGRAM_ADDRESS",
	27: "API_COUNTER_ALLOCHBM_ADDRESS",
	28: "API_COUNTER_CONFIGURELIF_BDF",
	29: "API_COUNTER_IPSECCB_CREATE",
	30: "API_COUNTER_IPSECCB_UPDATE",
	31: "API_COUNTER_IPSECCB_DELETE",
	32: "API_COUNTER_IPSECCB_GET",
	33: "API_COUNTER_L2SEGMENT_CREATE",
	34: "API_COUNTER_L2SEGMENT_UPDATE",
	35: "API_COUNTER_L2SEGMENT_DELETE",
	36: "API_COUNTER_L2SEGMENT_GET",
	37: "API_COUNTER_L4LBSERVICE_CREATE",
	38: "API_COUNTER_MULTICASTENTRY_CREATE",
	39: "API_COUNTER_MULTICASTENTRY_UPDATE",
	40: "API_COUNTER_MULTICASTENTRY_DELETE",
	41: "API_COUNTER_MULTICASTENTRY_GET",
	42: "API_COUNTER_SECURITYPROFILE_CREATE",
	43: "API_COUNTER_SECURITYPROFILE_UPDATE",
	44: "API_COUNTER_SECURITYPROFILE_DELETE",
	45: "API_COUNTER_SECURITYPROFILE_GET",
	46: "API_COUNTER_SECURITYGROUPPOLICY_CREATE",
	47: "API_COUNTER_SECURITYGROUPPOLICY_UPDATE",
	48: "API_COUNTER_SECURITYGROUPPOLICY_DELETE",
	49: "API_COUNTER_SECURITYGROUPPOLICY_GET",
	50: "API_COUNTER_SECURITYGROUP_CREATE",
	51: "API_COUNTER_SECURITYGROUP_UPDATE",
	52: "API_COUNTER_SECURITYGROUP_DELETE",
	53: "API_COUNTER_SECURITYGROUP_GET",
	54: "API_COUNTER_DOSPOLICY_CREATE",
	55: "API_COUNTER_DOSPOLICY_UPDATE",
	56: "API_COUNTER_DOSPOLICY_DELETE",
	57: "API_COUNTER_DOSPOLICY_GET",
	58: "API_COUNTER_PROXYCCB_CREATE",
	59: "API_COUNTER_PROXYCCB_UPDATE",
	60: "API_COUNTER_PROXYCCB_DELETE",
	61: "API_COUNTER_PROXYCCB_GET",
	62: "API_COUNTER_PROXYRCB_CREATE",
	63: "API_COUNTER_PROXYRCB_UPDATE",
	64: "API_COUNTER_PROXYRCB_DELETE",
	65: "API_COUNTER_PROXYRCB_GET",
	66: "API_COUNTER_QOSCLASS_CREATE",
	67: "API_COUNTER_QOSCLASS_UPDATE",
	68: "API_COUNTER_QOSCLASS_DELETE",
	69: "API_COUNTER_QOSCLASS_GET",
	70: "API_COUNTER_COPP_UPDATE",
	71: "API_COUNTER_COPP_GET",
	72: "API_COUNTER_RAWCCB_CREATE",
	73: "API_COUNTER_RAWCCB_UPDATE",
	74: "API_COUNTER_RAWCCB_DELETE",
	75: "API_COUNTER_RAWCCB_GET",
	76: "API_COUNTER_TCPCB_CREATE",
	77: "API_COUNTER_TCPCB_UPDATE",
	78: "API_COUNTER_TCPCB_DELETE",
	79: "API_COUNTER_TCPCB_GET",
	80: "API_COUNTER_TLSCB_CREATE",
	81: "API_COUNTER_TLSCB_UPDATE",
	82: "API_COUNTER_TLSCB_DELETE",
	83: "API_COUNTER_TLSCB_GET",
	84: "API_COUNTER_MAX",
}
var ApiCounter_value = map[string]int32{
	"API_COUNTER_NONE":                                    0,
	"API_COUNTER_VRF_CREATE":                              1,
	"API_COUNTER_VRF_UPDATE":                              2,
	"API_COUNTER_VRF_DELETE":                              3,
	"API_COUNTER_VRF_GET":                                 4,
	"API_COUNTER_ACL_CREATE":                              5,
	"API_COUNTER_ACL_UPDATE":                              6,
	"API_COUNTER_ACL_DELETE":                              7,
	"API_COUNTER_ACL_GET":                                 8,
	"API_COUNTER_CPUCB_CREATE":                            9,
	"API_COUNTER_CPUCB_UPDATE":                            10,
	"API_COUNTER_CPUCB_DELETE":                            11,
	"API_COUNTER_CPUCB_GET":                               12,
	"API_COUNTER_CRYPTOAPI_INVOKE":                        13,
	"API_COUNTER_CRYPTOKEY_CREATE":                        14,
	"API_COUNTER_CRYPTOKEY_UPDATE":                        15,
	"API_COUNTER_CRYPTOKEY_DELETE":                        16,
	"API_COUNTER_CRYPTOKEY_READ":                          17,
	"API_COUNTER_DESCRAOL_GET":                            18,
	"API_COUNTER_ENDPOINT_CREATE":                         19,
	"API_COUNTER_ENDPOINT_UPDATE":                         20,
	"API_COUNTER_ENDPOINT_DELETE":                         21,
	"API_COUNTER_ENDPOINT_GET":                            22,
	"API_COUNTER_GFT_EXACT_MATCH_PROFILE_CREATE":          23,
	"API_COUNTER_GFT_HEADER_TRANSPOSITION_PROFILE_CREATE": 24,
	"API_COUNTER_GFT_EXACT_MATCH_FLOW_ENTRY_CREATE":       25,
	"API_COUNTER_GETPROGRAM_ADDRESS":                      26,
	"API_COUNTER_ALLOCHBM_ADDRESS":                        27,
	"API_COUNTER_CONFIGURELIF_BDF":                        28,
	"API_COUNTER_IPSECCB_CREATE":                          29,
	"API_COUNTER_IPSECCB_UPDATE":                          30,
	"API_COUNTER_IPSECCB_DELETE":                          31,
	"API_COUNTER_IPSECCB_GET":                             32,
	"API_COUNTER_L2SEGMENT_CREATE":                        33,
	"API_COUNTER_L2SEGMENT_UPDATE":                        34,
	"API_COUNTER_L2SEGMENT_DELETE":                        35,
	"API_COUNTER_L2SEGMENT_GET":                           36,
	"API_COUNTER_L4LBSERVICE_CREATE":                      37,
	"API_COUNTER_MULTICASTENTRY_CREATE":                   38,
	"API_COUNTER_MULTICASTENTRY_UPDATE":                   39,
	"API_COUNTER_MULTICASTENTRY_DELETE":                   40,
	"API_COUNTER_MULTICASTENTRY_GET":                      41,
	"API_COUNTER_SECURITYPROFILE_CREATE":                  42,
	"API_COUNTER_SECURITYPROFILE_UPDATE":                  43,
	"API_COUNTER_SECURITYPROFILE_DELETE":                  44,
	"API_COUNTER_SECURITYPROFILE_GET":                     45,
	"API_COUNTER_SECURITYGROUPPOLICY_CREATE":              46,
	"API_COUNTER_SECURITYGROUPPOLICY_UPDATE":              47,
	"API_COUNTER_SECURITYGROUPPOLICY_DELETE":              48,
	"API_COUNTER_SECURITYGROUPPOLICY_GET":                 49,
	"API_COUNTER_SECURITYGROUP_CREATE":                    50,
	"API_COUNTER_SECURITYGROUP_UPDATE":                    51,
	"API_COUNTER_SECURITYGROUP_DELETE":                    52,
	"API_COUNTER_SECURITYGROUP_GET":                       53,
	"API_COUNTER_DOSPOLICY_CREATE":                        54,
	"API_COUNTER_DOSPOLICY_UPDATE":                        55,
	"API_COUNTER_DOSPOLICY_DELETE":                        56,
	"API_COUNTER_DOSPOLICY_GET":                           57,
	"API_COUNTER_PROXYCCB_CREATE":                         58,
	"API_COUNTER_PROXYCCB_UPDATE":                         59,
	"API_COUNTER_PROXYCCB_DELETE":                         60,
	"API_COUNTER_PROXYCCB_GET":                            61,
	"API_COUNTER_PROXYRCB_CREATE":                         62,
	"API_COUNTER_PROXYRCB_UPDATE":                         63,
	"API_COUNTER_PROXYRCB_DELETE":                         64,
	"API_COUNTER_PROXYRCB_GET":                            65,
	"API_COUNTER_QOSCLASS_CREATE":                         66,
	"API_COUNTER_QOSCLASS_UPDATE":                         67,
	"API_COUNTER_QOSCLASS_DELETE":                         68,
	"API_COUNTER_QOSCLASS_GET":                            69,
	"API_COUNTER_COPP_UPDATE":                             70,
	"API_COUNTER_COPP_GET":                                71,
	"API_COUNTER_RAWCCB_CREATE":                           72,
	"API_COUNTER_RAWCCB_UPDATE":                           73,
	"API_COUNTER_RAWCCB_DELETE":                           74,
	"API_COUNTER_RAWCCB_GET":                              75,
	"API_COUNTER_TCPCB_CREATE":                            76,
	"API_COUNTER_TCPCB_UPDATE":                            77,
	"API_COUNTER_TCPCB_DELETE":                            78,
	"API_COUNTER_TCPCB_GET":                               79,
	"API_COUNTER_TLSCB_CREATE":                            80,
	"API_COUNTER_TLSCB_UPDATE":                            81,
	"API_COUNTER_TLSCB_DELETE":                            82,
	"API_COUNTER_TLSCB_GET":                               83,
	"API_COUNTER_MAX":                                     84,
}

func (x ApiCounter) String() string {
	return proto.EnumName(ApiCounter_name, int32(x))
}
func (ApiCounter) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{0} }

// BufferDropStats captures instantaneous drop counts due to buffering drops
type BufferDropReasons int32

const (
	BufferDropReasons_INTRINSIC_DROP            BufferDropReasons = 0
	BufferDropReasons_DISCARDED                 BufferDropReasons = 1
	BufferDropReasons_ADMITTED                  BufferDropReasons = 2
	BufferDropReasons_OUT_OF_CELLS_DROP         BufferDropReasons = 3
	BufferDropReasons_OUT_OF_CELLS_DROP_2       BufferDropReasons = 4
	BufferDropReasons_OUT_OF_CREDIT_DROP        BufferDropReasons = 5
	BufferDropReasons_TRUNCATION_DROP           BufferDropReasons = 6
	BufferDropReasons_PORT_DISABLED_DROP        BufferDropReasons = 7
	BufferDropReasons_COPY_TO_CPU_TAIL_DROP     BufferDropReasons = 8
	BufferDropReasons_SPAN_TAIL_DROP            BufferDropReasons = 9
	BufferDropReasons_MIN_SIZE_VIOLATION_DROP   BufferDropReasons = 10
	BufferDropReasons_ENQUEUE_ERROR_DROP        BufferDropReasons = 11
	BufferDropReasons_INVALID_PORT_DROP         BufferDropReasons = 12
	BufferDropReasons_INVALID_OUTPUT_QUEUE_DROP BufferDropReasons = 13
)

var BufferDropReasons_name = map[int32]string{
	0:  "INTRINSIC_DROP",
	1:  "DISCARDED",
	2:  "ADMITTED",
	3:  "OUT_OF_CELLS_DROP",
	4:  "OUT_OF_CELLS_DROP_2",
	5:  "OUT_OF_CREDIT_DROP",
	6:  "TRUNCATION_DROP",
	7:  "PORT_DISABLED_DROP",
	8:  "COPY_TO_CPU_TAIL_DROP",
	9:  "SPAN_TAIL_DROP",
	10: "MIN_SIZE_VIOLATION_DROP",
	11: "ENQUEUE_ERROR_DROP",
	12: "INVALID_PORT_DROP",
	13: "INVALID_OUTPUT_QUEUE_DROP",
}
var BufferDropReasons_value = map[string]int32{
	"INTRINSIC_DROP":            0,
	"DISCARDED":                 1,
	"ADMITTED":                  2,
	"OUT_OF_CELLS_DROP":         3,
	"OUT_OF_CELLS_DROP_2":       4,
	"OUT_OF_CREDIT_DROP":        5,
	"TRUNCATION_DROP":           6,
	"PORT_DISABLED_DROP":        7,
	"COPY_TO_CPU_TAIL_DROP":     8,
	"SPAN_TAIL_DROP":            9,
	"MIN_SIZE_VIOLATION_DROP":   10,
	"ENQUEUE_ERROR_DROP":        11,
	"INVALID_PORT_DROP":         12,
	"INVALID_OUTPUT_QUEUE_DROP": 13,
}

func (x BufferDropReasons) String() string {
	return proto.EnumName(BufferDropReasons_name, int32(x))
}
func (BufferDropReasons) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{1} }

// Table types
type TableType int32

const (
	TableType_TABLE_TYPE_NONE      TableType = 0
	TableType_TABLE_TYPE_INDEX     TableType = 1
	TableType_TABLE_TYPE_HASH      TableType = 2
	TableType_TABLE_TYPE_HASH_TCAM TableType = 3
	TableType_TABLE_TYPE_TCAM      TableType = 4
)

var TableType_name = map[int32]string{
	0: "TABLE_TYPE_NONE",
	1: "TABLE_TYPE_INDEX",
	2: "TABLE_TYPE_HASH",
	3: "TABLE_TYPE_HASH_TCAM",
	4: "TABLE_TYPE_TCAM",
}
var TableType_value = map[string]int32{
	"TABLE_TYPE_NONE":      0,
	"TABLE_TYPE_INDEX":     1,
	"TABLE_TYPE_HASH":      2,
	"TABLE_TYPE_HASH_TCAM": 3,
	"TABLE_TYPE_TCAM":      4,
}

func (x TableType) String() string {
	return proto.EnumName(TableType_name, int32(x))
}
func (TableType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{2} }

// OflowFifoDropStats captures instantaneous drop counts at the overflow fifo interface
type OflowFifoDropType int32

const (
	OflowFifoDropType_OCCUPANCY_DROP                OflowFifoDropType = 0
	OflowFifoDropType_EMERGENCY_STOP_DROP           OflowFifoDropType = 1
	OflowFifoDropType_WRITE_BUFFER_ACK_FILL_UP_DROP OflowFifoDropType = 2
	OflowFifoDropType_WRITE_BUFFER_ACK_FULL_DROP    OflowFifoDropType = 3
	OflowFifoDropType_WRITE_BUFFER_FULL_DROP        OflowFifoDropType = 4
	OflowFifoDropType_CONTROL_FIFO_FULL_DROP        OflowFifoDropType = 5
)

var OflowFifoDropType_name = map[int32]string{
	0: "OCCUPANCY_DROP",
	1: "EMERGENCY_STOP_DROP",
	2: "WRITE_BUFFER_ACK_FILL_UP_DROP",
	3: "WRITE_BUFFER_ACK_FULL_DROP",
	4: "WRITE_BUFFER_FULL_DROP",
	5: "CONTROL_FIFO_FULL_DROP",
}
var OflowFifoDropType_value = map[string]int32{
	"OCCUPANCY_DROP":                0,
	"EMERGENCY_STOP_DROP":           1,
	"WRITE_BUFFER_ACK_FILL_UP_DROP": 2,
	"WRITE_BUFFER_ACK_FULL_DROP":    3,
	"WRITE_BUFFER_FULL_DROP":        4,
	"CONTROL_FIFO_FULL_DROP":        5,
}

func (x OflowFifoDropType) String() string {
	return proto.EnumName(OflowFifoDropType_name, int32(x))
}
func (OflowFifoDropType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{3} }

type SystemGetType int32

const (
	SystemGetType_SYSTEM_GET_FTE_STATS      SystemGetType = 0
	SystemGetType_SYSTEM_GET_FTE_TXRX_STATS SystemGetType = 1
	SystemGetType_SYSTEM_GET_TABLE_STATS    SystemGetType = 2
	SystemGetType_SYSTEM_GET_PB_STATS       SystemGetType = 3
	SystemGetType_SYSTEM_GET_DROP_STATS     SystemGetType = 4
	SystemGetType_SYSTEM_GET_ALL_STATS      SystemGetType = 5
	SystemGetType_SYSTEM_GET_INB_MGMT_IF    SystemGetType = 6
	SystemGetType_SYSTEM_GET_FTE_DBG_STATS  SystemGetType = 7
	SystemGetType_SYSTEM_GET_ALL_DBG_STATS  SystemGetType = 8
)

var SystemGetType_name = map[int32]string{
	0: "SYSTEM_GET_FTE_STATS",
	1: "SYSTEM_GET_FTE_TXRX_STATS",
	2: "SYSTEM_GET_TABLE_STATS",
	3: "SYSTEM_GET_PB_STATS",
	4: "SYSTEM_GET_DROP_STATS",
	5: "SYSTEM_GET_ALL_STATS",
	6: "SYSTEM_GET_INB_MGMT_IF",
	7: "SYSTEM_GET_FTE_DBG_STATS",
	8: "SYSTEM_GET_ALL_DBG_STATS",
}
var SystemGetType_value = map[string]int32{
	"SYSTEM_GET_FTE_STATS":      0,
	"SYSTEM_GET_FTE_TXRX_STATS": 1,
	"SYSTEM_GET_TABLE_STATS":    2,
	"SYSTEM_GET_PB_STATS":       3,
	"SYSTEM_GET_DROP_STATS":     4,
	"SYSTEM_GET_ALL_STATS":      5,
	"SYSTEM_GET_INB_MGMT_IF":    6,
	"SYSTEM_GET_FTE_DBG_STATS":  7,
	"SYSTEM_GET_ALL_DBG_STATS":  8,
}

func (x SystemGetType) String() string {
	return proto.EnumName(SystemGetType_name, int32(x))
}
func (SystemGetType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{4} }

type FTEDebugStatsType int32

const (
	FTEDebugStatsType_PACKET_PARSING_ERROR                FTEDebugStatsType = 0
	FTEDebugStatsType_SESSION_ALREADY_EXISTS              FTEDebugStatsType = 1
	FTEDebugStatsType_MAX_HEADER_UPDATES_EXCEEDED         FTEDebugStatsType = 2
	FTEDebugStatsType_INVALID_ENCAP_MODE_IN_HEADER_UPDATE FTEDebugStatsType = 3
	FTEDebugStatsType_CPU_PACKET_RX_FAILURE               FTEDebugStatsType = 4
	FTEDebugStatsType_PACKET_SEND_FAILURE                 FTEDebugStatsType = 5
	FTEDebugStatsType_FLOW_LOOKUP_FAILURE                 FTEDebugStatsType = 6
	FTEDebugStatsType_UNSUPPORTED_PACKET_LOOKUP_TYPE      FTEDebugStatsType = 7
	FTEDebugStatsType_LOGGER_BUFFER_FAILURE               FTEDebugStatsType = 8
	FTEDebugStatsType_LOGGER_BUFFER_SERIALIZATION_FAILURE FTEDebugStatsType = 9
	FTEDebugStatsType_SESSION_CREATE_FAILURE              FTEDebugStatsType = 10
	FTEDebugStatsType_SESSION_UPDATE_FAILURE              FTEDebugStatsType = 11
	FTEDebugStatsType_SESSION_DELETE_FAILURE              FTEDebugStatsType = 12
	FTEDebugStatsType_INVALID_DVRF                        FTEDebugStatsType = 13
	FTEDebugStatsType_INVALID_SVRF                        FTEDebugStatsType = 14
)

var FTEDebugStatsType_name = map[int32]string{
	0:  "PACKET_PARSING_ERROR",
	1:  "SESSION_ALREADY_EXISTS",
	2:  "MAX_HEADER_UPDATES_EXCEEDED",
	3:  "INVALID_ENCAP_MODE_IN_HEADER_UPDATE",
	4:  "CPU_PACKET_RX_FAILURE",
	5:  "PACKET_SEND_FAILURE",
	6:  "FLOW_LOOKUP_FAILURE",
	7:  "UNSUPPORTED_PACKET_LOOKUP_TYPE",
	8:  "LOGGER_BUFFER_FAILURE",
	9:  "LOGGER_BUFFER_SERIALIZATION_FAILURE",
	10: "SESSION_CREATE_FAILURE",
	11: "SESSION_UPDATE_FAILURE",
	12: "SESSION_DELETE_FAILURE",
	13: "INVALID_DVRF",
	14: "INVALID_SVRF",
}
var FTEDebugStatsType_value = map[string]int32{
	"PACKET_PARSING_ERROR":                0,
	"SESSION_ALREADY_EXISTS":              1,
	"MAX_HEADER_UPDATES_EXCEEDED":         2,
	"INVALID_ENCAP_MODE_IN_HEADER_UPDATE": 3,
	"CPU_PACKET_RX_FAILURE":               4,
	"PACKET_SEND_FAILURE":                 5,
	"FLOW_LOOKUP_FAILURE":                 6,
	"UNSUPPORTED_PACKET_LOOKUP_TYPE":      7,
	"LOGGER_BUFFER_FAILURE":               8,
	"LOGGER_BUFFER_SERIALIZATION_FAILURE": 9,
	"SESSION_CREATE_FAILURE":              10,
	"SESSION_UPDATE_FAILURE":              11,
	"SESSION_DELETE_FAILURE":              12,
	"INVALID_DVRF":                        13,
	"INVALID_SVRF":                        14,
}

func (x FTEDebugStatsType) String() string {
	return proto.EnumName(FTEDebugStatsType_name, int32(x))
}
func (FTEDebugStatsType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{5} }

type ForwardingMode int32

const (
	ForwardingMode_FORWARDING_MODE_NONE              ForwardingMode = 0
	ForwardingMode_FORWARDING_MODE_CLASSIC           ForwardingMode = 1
	ForwardingMode_FORWARDING_MODE_SMART_SWITCH      ForwardingMode = 2
	ForwardingMode_FORWARDING_MODE_SMART_HOST_PINNED ForwardingMode = 3
)

var ForwardingMode_name = map[int32]string{
	0: "FORWARDING_MODE_NONE",
	1: "FORWARDING_MODE_CLASSIC",
	2: "FORWARDING_MODE_SMART_SWITCH",
	3: "FORWARDING_MODE_SMART_HOST_PINNED",
}
var ForwardingMode_value = map[string]int32{
	"FORWARDING_MODE_NONE":              0,
	"FORWARDING_MODE_CLASSIC":           1,
	"FORWARDING_MODE_SMART_SWITCH":      2,
	"FORWARDING_MODE_SMART_HOST_PINNED": 3,
}

func (x ForwardingMode) String() string {
	return proto.EnumName(ForwardingMode_name, int32(x))
}
func (ForwardingMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{6} }

type FeatureProfile int32

const (
	FeatureProfile_FEATURE_PROFILE_NONE        FeatureProfile = 0
	FeatureProfile_FEATURE_PROFILE_BASE        FeatureProfile = 1
	FeatureProfile_FEATURE_PROFILE_STORAGE     FeatureProfile = 2
	FeatureProfile_FEATURE_PROFILE_SRIOV       FeatureProfile = 3
	FeatureProfile_FEATURE_PROFILE_VIRTUALIZED FeatureProfile = 4
	FeatureProfile_FEATURE_PROFILE_PROXY       FeatureProfile = 5
	FeatureProfile_FEATURE_PROFILE_DEVELOPER   FeatureProfile = 6
)

var FeatureProfile_name = map[int32]string{
	0: "FEATURE_PROFILE_NONE",
	1: "FEATURE_PROFILE_BASE",
	2: "FEATURE_PROFILE_STORAGE",
	3: "FEATURE_PROFILE_SRIOV",
	4: "FEATURE_PROFILE_VIRTUALIZED",
	5: "FEATURE_PROFILE_PROXY",
	6: "FEATURE_PROFILE_DEVELOPER",
}
var FeatureProfile_value = map[string]int32{
	"FEATURE_PROFILE_NONE":        0,
	"FEATURE_PROFILE_BASE":        1,
	"FEATURE_PROFILE_STORAGE":     2,
	"FEATURE_PROFILE_SRIOV":       3,
	"FEATURE_PROFILE_VIRTUALIZED": 4,
	"FEATURE_PROFILE_PROXY":       5,
	"FEATURE_PROFILE_DEVELOPER":   6,
}

func (x FeatureProfile) String() string {
	return proto.EnumName(FeatureProfile_name, int32(x))
}
func (FeatureProfile) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{7} }

type MicroSegMode int32

const (
	MicroSegMode_MICRO_SEG_DISABLE MicroSegMode = 0
	MicroSegMode_MICRO_SEG_ENABLE  MicroSegMode = 1
)

var MicroSegMode_name = map[int32]string{
	0: "MICRO_SEG_DISABLE",
	1: "MICRO_SEG_ENABLE",
}
var MicroSegMode_value = map[string]int32{
	"MICRO_SEG_DISABLE": 0,
	"MICRO_SEG_ENABLE":  1,
}

func (x MicroSegMode) String() string {
	return proto.EnumName(MicroSegMode_name, int32(x))
}
func (MicroSegMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{8} }

type MicroSegStatus int32

const (
	MicroSegStatus_MICRO_SEG_STATUS_NONE    MicroSegStatus = 0
	MicroSegStatus_MICRO_SEG_STATUS_SUCCESS MicroSegStatus = 1
	MicroSegStatus_MICRO_SEG_STATUS_FAIL    MicroSegStatus = 2
)

var MicroSegStatus_name = map[int32]string{
	0: "MICRO_SEG_STATUS_NONE",
	1: "MICRO_SEG_STATUS_SUCCESS",
	2: "MICRO_SEG_STATUS_FAIL",
}
var MicroSegStatus_value = map[string]int32{
	"MICRO_SEG_STATUS_NONE":    0,
	"MICRO_SEG_STATUS_SUCCESS": 1,
	"MICRO_SEG_STATUS_FAIL":    2,
}

func (x MicroSegStatus) String() string {
	return proto.EnumName(MicroSegStatus_name, int32(x))
}
func (MicroSegStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{9} }

// Forwarding Mode
type ForwardMode int32

const (
	ForwardMode_FWD_MODE_NONE        ForwardMode = 0
	ForwardMode_FWD_MODE_TRANSPARENT ForwardMode = 1
	ForwardMode_FWD_MODE_MICROSEG    ForwardMode = 2
	ForwardMode_FWD_MODE_ANY         ForwardMode = 3
)

var ForwardMode_name = map[int32]string{
	0: "FWD_MODE_NONE",
	1: "FWD_MODE_TRANSPARENT",
	2: "FWD_MODE_MICROSEG",
	3: "FWD_MODE_ANY",
}
var ForwardMode_value = map[string]int32{
	"FWD_MODE_NONE":        0,
	"FWD_MODE_TRANSPARENT": 1,
	"FWD_MODE_MICROSEG":    2,
	"FWD_MODE_ANY":         3,
}

func (x ForwardMode) String() string {
	return proto.EnumName(ForwardMode_name, int32(x))
}
func (ForwardMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{10} }

// Policy Mode
type PolicyMode int32

const (
	PolicyMode_POLICY_MODE_NONE       PolicyMode = 0
	PolicyMode_POLICY_MODE_BASE_NET   PolicyMode = 1
	PolicyMode_POLICY_MODE_FLOW_AWARE PolicyMode = 2
	PolicyMode_POLICY_MODE_ENFORCE    PolicyMode = 3
)

var PolicyMode_name = map[int32]string{
	0: "POLICY_MODE_NONE",
	1: "POLICY_MODE_BASE_NET",
	2: "POLICY_MODE_FLOW_AWARE",
	3: "POLICY_MODE_ENFORCE",
}
var PolicyMode_value = map[string]int32{
	"POLICY_MODE_NONE":       0,
	"POLICY_MODE_BASE_NET":   1,
	"POLICY_MODE_FLOW_AWARE": 2,
	"POLICY_MODE_ENFORCE":    3,
}

func (x PolicyMode) String() string {
	return proto.EnumName(PolicyMode_name, int32(x))
}
func (PolicyMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{11} }

type ApiStatsEntry struct {
	ApiType       ApiCounter `protobuf:"varint,1,opt,name=api_type,json=apiType,proto3,enum=sys.ApiCounter" json:"api_type,omitempty"`
	NumApiCall    uint32     `protobuf:"varint,2,opt,name=num_api_call,json=numApiCall,proto3" json:"num_api_call,omitempty"`
	NumApiSuccess uint32     `protobuf:"varint,3,opt,name=num_api_success,json=numApiSuccess,proto3" json:"num_api_success,omitempty"`
	NumApiFail    uint32     `protobuf:"varint,4,opt,name=num_api_fail,json=numApiFail,proto3" json:"num_api_fail,omitempty"`
}

func (m *ApiStatsEntry) Reset()                    { *m = ApiStatsEntry{} }
func (m *ApiStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*ApiStatsEntry) ProtoMessage()               {}
func (*ApiStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{0} }

func (m *ApiStatsEntry) GetApiType() ApiCounter {
	if m != nil {
		return m.ApiType
	}
	return ApiCounter_API_COUNTER_NONE
}

func (m *ApiStatsEntry) GetNumApiCall() uint32 {
	if m != nil {
		return m.NumApiCall
	}
	return 0
}

func (m *ApiStatsEntry) GetNumApiSuccess() uint32 {
	if m != nil {
		return m.NumApiSuccess
	}
	return 0
}

func (m *ApiStatsEntry) GetNumApiFail() uint32 {
	if m != nil {
		return m.NumApiFail
	}
	return 0
}

// API Stats object
type ApiStatsResponse struct {
	ApiEntries []*ApiStatsEntry `protobuf:"bytes,1,rep,name=api_entries,json=apiEntries" json:"api_entries,omitempty"`
}

func (m *ApiStatsResponse) Reset()                    { *m = ApiStatsResponse{} }
func (m *ApiStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*ApiStatsResponse) ProtoMessage()               {}
func (*ApiStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{1} }

func (m *ApiStatsResponse) GetApiEntries() []*ApiStatsEntry {
	if m != nil {
		return m.ApiEntries
	}
	return nil
}

type DropStatsEntry struct {
	Reasons   *DropReasons `protobuf:"bytes,1,opt,name=reasons" json:"reasons,omitempty"`
	DropCount uint64       `protobuf:"varint,2,opt,name=drop_count,json=dropCount,proto3" json:"drop_count,omitempty"`
}

func (m *DropStatsEntry) Reset()                    { *m = DropStatsEntry{} }
func (m *DropStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*DropStatsEntry) ProtoMessage()               {}
func (*DropStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{2} }

func (m *DropStatsEntry) GetReasons() *DropReasons {
	if m != nil {
		return m.Reasons
	}
	return nil
}

func (m *DropStatsEntry) GetDropCount() uint64 {
	if m != nil {
		return m.DropCount
	}
	return 0
}

type EgressDropStatsEntry struct {
	Reasons   *EgressDropReasons `protobuf:"bytes,1,opt,name=reasons" json:"reasons,omitempty"`
	DropCount uint64             `protobuf:"varint,2,opt,name=drop_count,json=dropCount,proto3" json:"drop_count,omitempty"`
}

func (m *EgressDropStatsEntry) Reset()                    { *m = EgressDropStatsEntry{} }
func (m *EgressDropStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*EgressDropStatsEntry) ProtoMessage()               {}
func (*EgressDropStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{3} }

func (m *EgressDropStatsEntry) GetReasons() *EgressDropReasons {
	if m != nil {
		return m.Reasons
	}
	return nil
}

func (m *EgressDropStatsEntry) GetDropCount() uint64 {
	if m != nil {
		return m.DropCount
	}
	return 0
}

type BufferDropStatsEntry struct {
	Reasons   BufferDropReasons `protobuf:"varint,1,opt,name=reasons,proto3,enum=sys.BufferDropReasons" json:"reasons,omitempty"`
	DropCount uint32            `protobuf:"varint,2,opt,name=drop_count,json=dropCount,proto3" json:"drop_count,omitempty"`
}

func (m *BufferDropStatsEntry) Reset()                    { *m = BufferDropStatsEntry{} }
func (m *BufferDropStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*BufferDropStatsEntry) ProtoMessage()               {}
func (*BufferDropStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{4} }

func (m *BufferDropStatsEntry) GetReasons() BufferDropReasons {
	if m != nil {
		return m.Reasons
	}
	return BufferDropReasons_INTRINSIC_DROP
}

func (m *BufferDropStatsEntry) GetDropCount() uint32 {
	if m != nil {
		return m.DropCount
	}
	return 0
}

type BufferDropStats struct {
	StatsEntries []*BufferDropStatsEntry `protobuf:"bytes,1,rep,name=stats_entries,json=statsEntries" json:"stats_entries,omitempty"`
}

func (m *BufferDropStats) Reset()                    { *m = BufferDropStats{} }
func (m *BufferDropStats) String() string            { return proto.CompactTextString(m) }
func (*BufferDropStats) ProtoMessage()               {}
func (*BufferDropStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{5} }

func (m *BufferDropStats) GetStatsEntries() []*BufferDropStatsEntry {
	if m != nil {
		return m.StatsEntries
	}
	return nil
}

// TableStatsEntry captures table specific stats for h/w table health monitoring
type TableStatsEntry struct {
	TableType            TableType `protobuf:"varint,1,opt,name=table_type,json=tableType,proto3,enum=sys.TableType" json:"table_type,omitempty"`
	TableName            string    `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TableSize            uint32    `protobuf:"varint,3,opt,name=table_size,json=tableSize,proto3" json:"table_size,omitempty"`
	OverflowTableSize    uint32    `protobuf:"varint,4,opt,name=overflow_table_size,json=overflowTableSize,proto3" json:"overflow_table_size,omitempty"`
	EntriesInUse         uint32    `protobuf:"varint,5,opt,name=entries_in_use,json=entriesInUse,proto3" json:"entries_in_use,omitempty"`
	OverflowEntriesInUse uint32    `protobuf:"varint,6,opt,name=overflow_entries_in_use,json=overflowEntriesInUse,proto3" json:"overflow_entries_in_use,omitempty"`
	NumInserts           uint32    `protobuf:"varint,7,opt,name=num_inserts,json=numInserts,proto3" json:"num_inserts,omitempty"`
	NumInsertErrors      uint32    `protobuf:"varint,8,opt,name=num_insert_errors,json=numInsertErrors,proto3" json:"num_insert_errors,omitempty"`
	NumDeletes           uint32    `protobuf:"varint,9,opt,name=num_deletes,json=numDeletes,proto3" json:"num_deletes,omitempty"`
	NumDeleteErrors      uint32    `protobuf:"varint,10,opt,name=num_delete_errors,json=numDeleteErrors,proto3" json:"num_delete_errors,omitempty"`
}

func (m *TableStatsEntry) Reset()                    { *m = TableStatsEntry{} }
func (m *TableStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*TableStatsEntry) ProtoMessage()               {}
func (*TableStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{6} }

func (m *TableStatsEntry) GetTableType() TableType {
	if m != nil {
		return m.TableType
	}
	return TableType_TABLE_TYPE_NONE
}

func (m *TableStatsEntry) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *TableStatsEntry) GetTableSize() uint32 {
	if m != nil {
		return m.TableSize
	}
	return 0
}

func (m *TableStatsEntry) GetOverflowTableSize() uint32 {
	if m != nil {
		return m.OverflowTableSize
	}
	return 0
}

func (m *TableStatsEntry) GetEntriesInUse() uint32 {
	if m != nil {
		return m.EntriesInUse
	}
	return 0
}

func (m *TableStatsEntry) GetOverflowEntriesInUse() uint32 {
	if m != nil {
		return m.OverflowEntriesInUse
	}
	return 0
}

func (m *TableStatsEntry) GetNumInserts() uint32 {
	if m != nil {
		return m.NumInserts
	}
	return 0
}

func (m *TableStatsEntry) GetNumInsertErrors() uint32 {
	if m != nil {
		return m.NumInsertErrors
	}
	return 0
}

func (m *TableStatsEntry) GetNumDeletes() uint32 {
	if m != nil {
		return m.NumDeletes
	}
	return 0
}

func (m *TableStatsEntry) GetNumDeleteErrors() uint32 {
	if m != nil {
		return m.NumDeleteErrors
	}
	return 0
}

// TableStats is container for statistics of all tables in the data path
type TableStats struct {
	TableStats []*TableStatsEntry `protobuf:"bytes,1,rep,name=table_stats,json=tableStats" json:"table_stats,omitempty"`
}

func (m *TableStats) Reset()                    { *m = TableStats{} }
func (m *TableStats) String() string            { return proto.CompactTextString(m) }
func (*TableStats) ProtoMessage()               {}
func (*TableStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{7} }

func (m *TableStats) GetTableStats() []*TableStatsEntry {
	if m != nil {
		return m.TableStats
	}
	return nil
}

// BufferStats captures instantaneous counters of the buffering module
type BufferStats struct {
	SopCountIn  uint32           `protobuf:"varint,1,opt,name=sop_count_in,json=sopCountIn,proto3" json:"sop_count_in,omitempty"`
	EopCountIn  uint32           `protobuf:"varint,2,opt,name=eop_count_in,json=eopCountIn,proto3" json:"eop_count_in,omitempty"`
	SopCountOut uint32           `protobuf:"varint,3,opt,name=sop_count_out,json=sopCountOut,proto3" json:"sop_count_out,omitempty"`
	EopCountOut uint32           `protobuf:"varint,4,opt,name=eop_count_out,json=eopCountOut,proto3" json:"eop_count_out,omitempty"`
	DropCounts  *BufferDropStats `protobuf:"bytes,5,opt,name=drop_counts,json=dropCounts" json:"drop_counts,omitempty"`
}

func (m *BufferStats) Reset()                    { *m = BufferStats{} }
func (m *BufferStats) String() string            { return proto.CompactTextString(m) }
func (*BufferStats) ProtoMessage()               {}
func (*BufferStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{8} }

func (m *BufferStats) GetSopCountIn() uint32 {
	if m != nil {
		return m.SopCountIn
	}
	return 0
}

func (m *BufferStats) GetEopCountIn() uint32 {
	if m != nil {
		return m.EopCountIn
	}
	return 0
}

func (m *BufferStats) GetSopCountOut() uint32 {
	if m != nil {
		return m.SopCountOut
	}
	return 0
}

func (m *BufferStats) GetEopCountOut() uint32 {
	if m != nil {
		return m.EopCountOut
	}
	return 0
}

func (m *BufferStats) GetDropCounts() *BufferDropStats {
	if m != nil {
		return m.DropCounts
	}
	return nil
}

type OflowFifoDropStatsEntry struct {
	Type  OflowFifoDropType `protobuf:"varint,1,opt,name=type,proto3,enum=sys.OflowFifoDropType" json:"type,omitempty"`
	Count uint32            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *OflowFifoDropStatsEntry) Reset()                    { *m = OflowFifoDropStatsEntry{} }
func (m *OflowFifoDropStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*OflowFifoDropStatsEntry) ProtoMessage()               {}
func (*OflowFifoDropStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{9} }

func (m *OflowFifoDropStatsEntry) GetType() OflowFifoDropType {
	if m != nil {
		return m.Type
	}
	return OflowFifoDropType_OCCUPANCY_DROP
}

func (m *OflowFifoDropStatsEntry) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type OflowFifoDropStats struct {
	Entry []*OflowFifoDropStatsEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *OflowFifoDropStats) Reset()                    { *m = OflowFifoDropStats{} }
func (m *OflowFifoDropStats) String() string            { return proto.CompactTextString(m) }
func (*OflowFifoDropStats) ProtoMessage()               {}
func (*OflowFifoDropStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{10} }

func (m *OflowFifoDropStats) GetEntry() []*OflowFifoDropStatsEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// OflowFifoStats captures instantaneous counters at the overflow fifo interface
type OflowFifoStats struct {
	SopCountIn  uint32              `protobuf:"varint,1,opt,name=sop_count_in,json=sopCountIn,proto3" json:"sop_count_in,omitempty"`
	EopCountIn  uint32              `protobuf:"varint,2,opt,name=eop_count_in,json=eopCountIn,proto3" json:"eop_count_in,omitempty"`
	SopCountOut uint32              `protobuf:"varint,3,opt,name=sop_count_out,json=sopCountOut,proto3" json:"sop_count_out,omitempty"`
	EopCountOut uint32              `protobuf:"varint,4,opt,name=eop_count_out,json=eopCountOut,proto3" json:"eop_count_out,omitempty"`
	DropCounts  *OflowFifoDropStats `protobuf:"bytes,5,opt,name=drop_counts,json=dropCounts" json:"drop_counts,omitempty"`
}

func (m *OflowFifoStats) Reset()                    { *m = OflowFifoStats{} }
func (m *OflowFifoStats) String() string            { return proto.CompactTextString(m) }
func (*OflowFifoStats) ProtoMessage()               {}
func (*OflowFifoStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{11} }

func (m *OflowFifoStats) GetSopCountIn() uint32 {
	if m != nil {
		return m.SopCountIn
	}
	return 0
}

func (m *OflowFifoStats) GetEopCountIn() uint32 {
	if m != nil {
		return m.EopCountIn
	}
	return 0
}

func (m *OflowFifoStats) GetSopCountOut() uint32 {
	if m != nil {
		return m.SopCountOut
	}
	return 0
}

func (m *OflowFifoStats) GetEopCountOut() uint32 {
	if m != nil {
		return m.EopCountOut
	}
	return 0
}

func (m *OflowFifoStats) GetDropCounts() *OflowFifoDropStats {
	if m != nil {
		return m.DropCounts
	}
	return nil
}

// PacketBufferPortStats is container to capture all counters exposed by the buffering
// module at the port level
type PacketBufferPortStats struct {
	PacketBufferPort *PacketBufferPort   `protobuf:"bytes,1,opt,name=packet_buffer_port,json=packetBufferPort" json:"packet_buffer_port,omitempty"`
	BufferStats      *BufferStats        `protobuf:"bytes,2,opt,name=buffer_stats,json=bufferStats" json:"buffer_stats,omitempty"`
	OflowFifoStats   *OflowFifoStats     `protobuf:"bytes,3,opt,name=oflow_fifo_stats,json=oflowFifoStats" json:"oflow_fifo_stats,omitempty"`
	QosQueueStats    *QosClassQueueStats `protobuf:"bytes,4,opt,name=qos_queue_stats,json=qosQueueStats" json:"qos_queue_stats,omitempty"`
}

func (m *PacketBufferPortStats) Reset()                    { *m = PacketBufferPortStats{} }
func (m *PacketBufferPortStats) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferPortStats) ProtoMessage()               {}
func (*PacketBufferPortStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{12} }

func (m *PacketBufferPortStats) GetPacketBufferPort() *PacketBufferPort {
	if m != nil {
		return m.PacketBufferPort
	}
	return nil
}

func (m *PacketBufferPortStats) GetBufferStats() *BufferStats {
	if m != nil {
		return m.BufferStats
	}
	return nil
}

func (m *PacketBufferPortStats) GetOflowFifoStats() *OflowFifoStats {
	if m != nil {
		return m.OflowFifoStats
	}
	return nil
}

func (m *PacketBufferPortStats) GetQosQueueStats() *QosClassQueueStats {
	if m != nil {
		return m.QosQueueStats
	}
	return nil
}

// PacketBufferStats captures all the statistics of the packet buffering module
type PacketBufferStats struct {
	PortStats []*PacketBufferPortStats `protobuf:"bytes,1,rep,name=port_stats,json=portStats" json:"port_stats,omitempty"`
}

func (m *PacketBufferStats) Reset()                    { *m = PacketBufferStats{} }
func (m *PacketBufferStats) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferStats) ProtoMessage()               {}
func (*PacketBufferStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{13} }

func (m *PacketBufferStats) GetPortStats() []*PacketBufferPortStats {
	if m != nil {
		return m.PortStats
	}
	return nil
}

// Status captures the operating status of various components in the HAL
// including "ready" status, thread health etc.
type Status struct {
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{14} }

type SystemGetRequest struct {
	Request SystemGetType `protobuf:"varint,1,opt,name=request,proto3,enum=sys.SystemGetType" json:"request,omitempty"`
}

func (m *SystemGetRequest) Reset()                    { *m = SystemGetRequest{} }
func (m *SystemGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SystemGetRequest) ProtoMessage()               {}
func (*SystemGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{15} }

func (m *SystemGetRequest) GetRequest() SystemGetType {
	if m != nil {
		return m.Request
	}
	return SystemGetType_SYSTEM_GET_FTE_STATS
}

// Global system object
type SystemResponse struct {
	ApiStatus   ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Stats       *Stats    `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	Status      *Status   `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Uuid        string    `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	InbMgmtIfId uint64    `protobuf:"fixed64,5,opt,name=inb_mgmt_if_id,json=inbMgmtIfId,proto3" json:"inb_mgmt_if_id,omitempty"`
}

func (m *SystemResponse) Reset()                    { *m = SystemResponse{} }
func (m *SystemResponse) String() string            { return proto.CompactTextString(m) }
func (*SystemResponse) ProtoMessage()               {}
func (*SystemResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{16} }

func (m *SystemResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SystemResponse) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *SystemResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SystemResponse) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *SystemResponse) GetInbMgmtIfId() uint64 {
	if m != nil {
		return m.InbMgmtIfId
	}
	return 0
}

// Stats object
type Stats struct {
	DropStats         *DropStats           `protobuf:"bytes,1,opt,name=drop_stats,json=dropStats" json:"drop_stats,omitempty"`
	EgressDropStats   *EgressDropStats     `protobuf:"bytes,2,opt,name=egress_drop_stats,json=egressDropStats" json:"egress_drop_stats,omitempty"`
	TableStats        *TableStats          `protobuf:"bytes,3,opt,name=table_stats,json=tableStats" json:"table_stats,omitempty"`
	PacketBufferStats *PacketBufferStats   `protobuf:"bytes,4,opt,name=packet_buffer_stats,json=packetBufferStats" json:"packet_buffer_stats,omitempty"`
	FteStats          *FTEStats            `protobuf:"bytes,5,opt,name=fte_stats,json=fteStats" json:"fte_stats,omitempty"`
	SessionStats      *SessionSummaryStats `protobuf:"bytes,6,opt,name=session_stats,json=sessionStats" json:"session_stats,omitempty"`
	PmdStats          *PMDStats            `protobuf:"bytes,7,opt,name=pmd_stats,json=pmdStats" json:"pmd_stats,omitempty"`
	FteDebugStats     *FTEDebugStats       `protobuf:"bytes,8,opt,name=fte_debug_stats,json=fteDebugStats" json:"fte_debug_stats,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{17} }

func (m *Stats) GetDropStats() *DropStats {
	if m != nil {
		return m.DropStats
	}
	return nil
}

func (m *Stats) GetEgressDropStats() *EgressDropStats {
	if m != nil {
		return m.EgressDropStats
	}
	return nil
}

func (m *Stats) GetTableStats() *TableStats {
	if m != nil {
		return m.TableStats
	}
	return nil
}

func (m *Stats) GetPacketBufferStats() *PacketBufferStats {
	if m != nil {
		return m.PacketBufferStats
	}
	return nil
}

func (m *Stats) GetFteStats() *FTEStats {
	if m != nil {
		return m.FteStats
	}
	return nil
}

func (m *Stats) GetSessionStats() *SessionSummaryStats {
	if m != nil {
		return m.SessionStats
	}
	return nil
}

func (m *Stats) GetPmdStats() *PMDStats {
	if m != nil {
		return m.PmdStats
	}
	return nil
}

func (m *Stats) GetFteDebugStats() *FTEDebugStats {
	if m != nil {
		return m.FteDebugStats
	}
	return nil
}

// Drop Stats object
type DropStats struct {
	DropEntries []*DropStatsEntry `protobuf:"bytes,1,rep,name=drop_entries,json=dropEntries" json:"drop_entries,omitempty"`
}

func (m *DropStats) Reset()                    { *m = DropStats{} }
func (m *DropStats) String() string            { return proto.CompactTextString(m) }
func (*DropStats) ProtoMessage()               {}
func (*DropStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{18} }

func (m *DropStats) GetDropEntries() []*DropStatsEntry {
	if m != nil {
		return m.DropEntries
	}
	return nil
}

type EgressDropStats struct {
	DropEntries []*EgressDropStatsEntry `protobuf:"bytes,1,rep,name=drop_entries,json=dropEntries" json:"drop_entries,omitempty"`
}

func (m *EgressDropStats) Reset()                    { *m = EgressDropStats{} }
func (m *EgressDropStats) String() string            { return proto.CompactTextString(m) }
func (*EgressDropStats) ProtoMessage()               {}
func (*EgressDropStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{19} }

func (m *EgressDropStats) GetDropEntries() []*EgressDropStatsEntry {
	if m != nil {
		return m.DropEntries
	}
	return nil
}

type FTEError struct {
	FteError string `protobuf:"bytes,1,opt,name=fte_error,json=fteError,proto3" json:"fte_error,omitempty"`
	Count    uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *FTEError) Reset()                    { *m = FTEError{} }
func (m *FTEError) String() string            { return proto.CompactTextString(m) }
func (*FTEError) ProtoMessage()               {}
func (*FTEError) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{20} }

func (m *FTEError) GetFteError() string {
	if m != nil {
		return m.FteError
	}
	return ""
}

func (m *FTEError) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type FTEFeatureStats struct {
	FeatureName string      `protobuf:"bytes,1,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
	DropPkts    uint64      `protobuf:"varint,2,opt,name=drop_pkts,json=dropPkts,proto3" json:"drop_pkts,omitempty"`
	DropReason  []*FTEError `protobuf:"bytes,3,rep,name=drop_reason,json=dropReason" json:"drop_reason,omitempty"`
}

func (m *FTEFeatureStats) Reset()                    { *m = FTEFeatureStats{} }
func (m *FTEFeatureStats) String() string            { return proto.CompactTextString(m) }
func (*FTEFeatureStats) ProtoMessage()               {}
func (*FTEFeatureStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{21} }

func (m *FTEFeatureStats) GetFeatureName() string {
	if m != nil {
		return m.FeatureName
	}
	return ""
}

func (m *FTEFeatureStats) GetDropPkts() uint64 {
	if m != nil {
		return m.DropPkts
	}
	return 0
}

func (m *FTEFeatureStats) GetDropReason() []*FTEError {
	if m != nil {
		return m.DropReason
	}
	return nil
}

// per FTE Stats
type FTEStatsInfo struct {
	ConnPerSecond       uint64             `protobuf:"varint,1,opt,name=conn_per_second,json=connPerSecond,proto3" json:"conn_per_second,omitempty"`
	FlowMissPkts        uint64             `protobuf:"varint,2,opt,name=flow_miss_pkts,json=flowMissPkts,proto3" json:"flow_miss_pkts,omitempty"`
	RetransmitPkts      uint64             `protobuf:"varint,3,opt,name=retransmit_pkts,json=retransmitPkts,proto3" json:"retransmit_pkts,omitempty"`
	RedirPkts           uint64             `protobuf:"varint,4,opt,name=redir_pkts,json=redirPkts,proto3" json:"redir_pkts,omitempty"`
	CflowPkts           uint64             `protobuf:"varint,5,opt,name=cflow_pkts,json=cflowPkts,proto3" json:"cflow_pkts,omitempty"`
	TcpClosePkts        uint64             `protobuf:"varint,6,opt,name=tcp_close_pkts,json=tcpClosePkts,proto3" json:"tcp_close_pkts,omitempty"`
	TlsProxyPkts        uint64             `protobuf:"varint,7,opt,name=tls_proxy_pkts,json=tlsProxyPkts,proto3" json:"tls_proxy_pkts,omitempty"`
	SoftqReqs           uint64             `protobuf:"varint,8,opt,name=softq_reqs,json=softqReqs,proto3" json:"softq_reqs,omitempty"`
	QueuedTxPkts        uint64             `protobuf:"varint,9,opt,name=queued_tx_pkts,json=queuedTxPkts,proto3" json:"queued_tx_pkts,omitempty"`
	MaxConnPerSecond    uint64             `protobuf:"varint,10,opt,name=max_conn_per_second,json=maxConnPerSecond,proto3" json:"max_conn_per_second,omitempty"`
	PacketsPerSecond    uint64             `protobuf:"varint,11,opt,name=packets_per_second,json=packetsPerSecond,proto3" json:"packets_per_second,omitempty"`
	MaxPacketsPerSecond uint64             `protobuf:"varint,12,opt,name=max_packets_per_second,json=maxPacketsPerSecond,proto3" json:"max_packets_per_second,omitempty"`
	SoftqLen            uint64             `protobuf:"varint,13,opt,name=softq_len,json=softqLen,proto3" json:"softq_len,omitempty"`
	MaxSessionPktDrops  uint64             `protobuf:"varint,14,opt,name=max_session_pkt_drops,json=maxSessionPktDrops,proto3" json:"max_session_pkt_drops,omitempty"`
	FteErrors           []*FTEError        `protobuf:"bytes,15,rep,name=fte_errors,json=fteErrors" json:"fte_errors,omitempty"`
	FeatureStats        []*FTEFeatureStats `protobuf:"bytes,16,rep,name=feature_stats,json=featureStats" json:"feature_stats,omitempty"`
}

func (m *FTEStatsInfo) Reset()                    { *m = FTEStatsInfo{} }
func (m *FTEStatsInfo) String() string            { return proto.CompactTextString(m) }
func (*FTEStatsInfo) ProtoMessage()               {}
func (*FTEStatsInfo) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{22} }

func (m *FTEStatsInfo) GetConnPerSecond() uint64 {
	if m != nil {
		return m.ConnPerSecond
	}
	return 0
}

func (m *FTEStatsInfo) GetFlowMissPkts() uint64 {
	if m != nil {
		return m.FlowMissPkts
	}
	return 0
}

func (m *FTEStatsInfo) GetRetransmitPkts() uint64 {
	if m != nil {
		return m.RetransmitPkts
	}
	return 0
}

func (m *FTEStatsInfo) GetRedirPkts() uint64 {
	if m != nil {
		return m.RedirPkts
	}
	return 0
}

func (m *FTEStatsInfo) GetCflowPkts() uint64 {
	if m != nil {
		return m.CflowPkts
	}
	return 0
}

func (m *FTEStatsInfo) GetTcpClosePkts() uint64 {
	if m != nil {
		return m.TcpClosePkts
	}
	return 0
}

func (m *FTEStatsInfo) GetTlsProxyPkts() uint64 {
	if m != nil {
		return m.TlsProxyPkts
	}
	return 0
}

func (m *FTEStatsInfo) GetSoftqReqs() uint64 {
	if m != nil {
		return m.SoftqReqs
	}
	return 0
}

func (m *FTEStatsInfo) GetQueuedTxPkts() uint64 {
	if m != nil {
		return m.QueuedTxPkts
	}
	return 0
}

func (m *FTEStatsInfo) GetMaxConnPerSecond() uint64 {
	if m != nil {
		return m.MaxConnPerSecond
	}
	return 0
}

func (m *FTEStatsInfo) GetPacketsPerSecond() uint64 {
	if m != nil {
		return m.PacketsPerSecond
	}
	return 0
}

func (m *FTEStatsInfo) GetMaxPacketsPerSecond() uint64 {
	if m != nil {
		return m.MaxPacketsPerSecond
	}
	return 0
}

func (m *FTEStatsInfo) GetSoftqLen() uint64 {
	if m != nil {
		return m.SoftqLen
	}
	return 0
}

func (m *FTEStatsInfo) GetMaxSessionPktDrops() uint64 {
	if m != nil {
		return m.MaxSessionPktDrops
	}
	return 0
}

func (m *FTEStatsInfo) GetFteErrors() []*FTEError {
	if m != nil {
		return m.FteErrors
	}
	return nil
}

func (m *FTEStatsInfo) GetFeatureStats() []*FTEFeatureStats {
	if m != nil {
		return m.FeatureStats
	}
	return nil
}

// FTE Global Stats
type FTEStats struct {
	ApiStatus    ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	FteStatsInfo []*FTEStatsInfo `protobuf:"bytes,2,rep,name=fte_stats_info,json=fteStatsInfo" json:"fte_stats_info,omitempty"`
}

func (m *FTEStats) Reset()                    { *m = FTEStats{} }
func (m *FTEStats) String() string            { return proto.CompactTextString(m) }
func (*FTEStats) ProtoMessage()               {}
func (*FTEStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{23} }

func (m *FTEStats) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FTEStats) GetFteStatsInfo() []*FTEStatsInfo {
	if m != nil {
		return m.FteStatsInfo
	}
	return nil
}

// Session Summary Stats
type SessionSummaryStats struct {
	TotalActiveSessions          uint64 `protobuf:"varint,1,opt,name=total_active_sessions,json=totalActiveSessions,proto3" json:"total_active_sessions,omitempty"`
	L2Sessions                   uint64 `protobuf:"varint,2,opt,name=l2_sessions,json=l2Sessions,proto3" json:"l2_sessions,omitempty"`
	TcpSessions                  uint64 `protobuf:"varint,3,opt,name=tcp_sessions,json=tcpSessions,proto3" json:"tcp_sessions,omitempty"`
	TcpEstablishedSessions       uint64 `protobuf:"varint,4,opt,name=tcp_established_sessions,json=tcpEstablishedSessions,proto3" json:"tcp_established_sessions,omitempty"`
	TcpClosedSessions            uint64 `protobuf:"varint,5,opt,name=tcp_closed_sessions,json=tcpClosedSessions,proto3" json:"tcp_closed_sessions,omitempty"`
	UdpSessions                  uint64 `protobuf:"varint,6,opt,name=udp_sessions,json=udpSessions,proto3" json:"udp_sessions,omitempty"`
	IcmpSessions                 uint64 `protobuf:"varint,7,opt,name=icmp_sessions,json=icmpSessions,proto3" json:"icmp_sessions,omitempty"`
	DropSessions                 uint64 `protobuf:"varint,8,opt,name=drop_sessions,json=dropSessions,proto3" json:"drop_sessions,omitempty"`
	AgedSessions                 uint64 `protobuf:"varint,9,opt,name=aged_sessions,json=agedSessions,proto3" json:"aged_sessions,omitempty"`
	NumTcpResetSent              uint64 `protobuf:"varint,10,opt,name=num_tcp_reset_sent,json=numTcpResetSent,proto3" json:"num_tcp_reset_sent,omitempty"`
	NumIcmpErrorSent             uint64 `protobuf:"varint,11,opt,name=num_icmp_error_sent,json=numIcmpErrorSent,proto3" json:"num_icmp_error_sent,omitempty"`
	NumConnectionTimeoutSessions uint64 `protobuf:"varint,12,opt,name=num_connection_timeout_sessions,json=numConnectionTimeoutSessions,proto3" json:"num_connection_timeout_sessions,omitempty"`
	NumSessionCreateErrors       uint64 `protobuf:"varint,13,opt,name=num_session_create_errors,json=numSessionCreateErrors,proto3" json:"num_session_create_errors,omitempty"`
	TcpHalfOpenSessions          uint64 `protobuf:"varint,14,opt,name=tcp_half_open_sessions,json=tcpHalfOpenSessions,proto3" json:"tcp_half_open_sessions,omitempty"`
	OtherActiveSessions          uint64 `protobuf:"varint,15,opt,name=other_active_sessions,json=otherActiveSessions,proto3" json:"other_active_sessions,omitempty"`
	TcpSessionDropCount          uint64 `protobuf:"varint,16,opt,name=tcp_session_drop_count,json=tcpSessionDropCount,proto3" json:"tcp_session_drop_count,omitempty"`
	UdpSessionDropCount          uint64 `protobuf:"varint,17,opt,name=udp_session_drop_count,json=udpSessionDropCount,proto3" json:"udp_session_drop_count,omitempty"`
	IcmpSessionDropCount         uint64 `protobuf:"varint,18,opt,name=icmp_session_drop_count,json=icmpSessionDropCount,proto3" json:"icmp_session_drop_count,omitempty"`
	OtherSessionDropCount        uint64 `protobuf:"varint,19,opt,name=other_session_drop_count,json=otherSessionDropCount,proto3" json:"other_session_drop_count,omitempty"`
	DscSessionLimitDropCount     uint64 `protobuf:"varint,20,opt,name=dsc_session_limit_drop_count,json=dscSessionLimitDropCount,proto3" json:"dsc_session_limit_drop_count,omitempty"`
}

func (m *SessionSummaryStats) Reset()                    { *m = SessionSummaryStats{} }
func (m *SessionSummaryStats) String() string            { return proto.CompactTextString(m) }
func (*SessionSummaryStats) ProtoMessage()               {}
func (*SessionSummaryStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{24} }

func (m *SessionSummaryStats) GetTotalActiveSessions() uint64 {
	if m != nil {
		return m.TotalActiveSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetL2Sessions() uint64 {
	if m != nil {
		return m.L2Sessions
	}
	return 0
}

func (m *SessionSummaryStats) GetTcpSessions() uint64 {
	if m != nil {
		return m.TcpSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetTcpEstablishedSessions() uint64 {
	if m != nil {
		return m.TcpEstablishedSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetTcpClosedSessions() uint64 {
	if m != nil {
		return m.TcpClosedSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetUdpSessions() uint64 {
	if m != nil {
		return m.UdpSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetIcmpSessions() uint64 {
	if m != nil {
		return m.IcmpSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetDropSessions() uint64 {
	if m != nil {
		return m.DropSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetAgedSessions() uint64 {
	if m != nil {
		return m.AgedSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetNumTcpResetSent() uint64 {
	if m != nil {
		return m.NumTcpResetSent
	}
	return 0
}

func (m *SessionSummaryStats) GetNumIcmpErrorSent() uint64 {
	if m != nil {
		return m.NumIcmpErrorSent
	}
	return 0
}

func (m *SessionSummaryStats) GetNumConnectionTimeoutSessions() uint64 {
	if m != nil {
		return m.NumConnectionTimeoutSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetNumSessionCreateErrors() uint64 {
	if m != nil {
		return m.NumSessionCreateErrors
	}
	return 0
}

func (m *SessionSummaryStats) GetTcpHalfOpenSessions() uint64 {
	if m != nil {
		return m.TcpHalfOpenSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetOtherActiveSessions() uint64 {
	if m != nil {
		return m.OtherActiveSessions
	}
	return 0
}

func (m *SessionSummaryStats) GetTcpSessionDropCount() uint64 {
	if m != nil {
		return m.TcpSessionDropCount
	}
	return 0
}

func (m *SessionSummaryStats) GetUdpSessionDropCount() uint64 {
	if m != nil {
		return m.UdpSessionDropCount
	}
	return 0
}

func (m *SessionSummaryStats) GetIcmpSessionDropCount() uint64 {
	if m != nil {
		return m.IcmpSessionDropCount
	}
	return 0
}

func (m *SessionSummaryStats) GetOtherSessionDropCount() uint64 {
	if m != nil {
		return m.OtherSessionDropCount
	}
	return 0
}

func (m *SessionSummaryStats) GetDscSessionLimitDropCount() uint64 {
	if m != nil {
		return m.DscSessionLimitDropCount
	}
	return 0
}

type QCtr struct {
	SendPkts           uint64 `protobuf:"varint,1,opt,name=send_pkts,json=sendPkts,proto3" json:"send_pkts,omitempty"`
	RecvPkts           uint64 `protobuf:"varint,2,opt,name=recv_pkts,json=recvPkts,proto3" json:"recv_pkts,omitempty"`
	RxSemWrErr         uint32 `protobuf:"varint,3,opt,name=rx_sem_wr_err,json=rxSemWrErr,proto3" json:"rx_sem_wr_err,omitempty"`
	RxSlotValueReadErr uint32 `protobuf:"varint,4,opt,name=rx_slot_value_read_err,json=rxSlotValueReadErr,proto3" json:"rx_slot_value_read_err,omitempty"`
	RxDescrReadErr     uint32 `protobuf:"varint,5,opt,name=rx_descr_read_err,json=rxDescrReadErr,proto3" json:"rx_descr_read_err,omitempty"`
	RxDescrToHdrErr    uint32 `protobuf:"varint,6,opt,name=rx_descr_to_hdr_err,json=rxDescrToHdrErr,proto3" json:"rx_descr_to_hdr_err,omitempty"`
	RxDescrFreeErr     uint32 `protobuf:"varint,7,opt,name=rx_descr_free_err,json=rxDescrFreeErr,proto3" json:"rx_descr_free_err,omitempty"`
	TxDescrFreeErr     uint32 `protobuf:"varint,8,opt,name=tx_descr_free_err,json=txDescrFreeErr,proto3" json:"tx_descr_free_err,omitempty"`
	TxPageAllocErr     uint32 `protobuf:"varint,9,opt,name=tx_page_alloc_err,json=txPageAllocErr,proto3" json:"tx_page_alloc_err,omitempty"`
	TxPageCopyErr      uint32 `protobuf:"varint,10,opt,name=tx_page_copy_err,json=txPageCopyErr,proto3" json:"tx_page_copy_err,omitempty"`
	TxDescrPgmErr      uint32 `protobuf:"varint,11,opt,name=tx_descr_pgm_err,json=txDescrPgmErr,proto3" json:"tx_descr_pgm_err,omitempty"`
	TxSendErr          uint32 `protobuf:"varint,12,opt,name=tx_send_err,json=txSendErr,proto3" json:"tx_send_err,omitempty"`
	RxDescrAddrOob     uint32 `protobuf:"varint,13,opt,name=rx_descr_addr_oob,json=rxDescrAddrOob,proto3" json:"rx_descr_addr_oob,omitempty"`
	PollCount          uint64 `protobuf:"varint,14,opt,name=poll_count,json=pollCount,proto3" json:"poll_count,omitempty"`
	TxDoorbellErr      uint32 `protobuf:"varint,15,opt,name=tx_doorbell_err,json=txDoorbellErr,proto3" json:"tx_doorbell_err,omitempty"`
}

func (m *QCtr) Reset()                    { *m = QCtr{} }
func (m *QCtr) String() string            { return proto.CompactTextString(m) }
func (*QCtr) ProtoMessage()               {}
func (*QCtr) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{25} }

func (m *QCtr) GetSendPkts() uint64 {
	if m != nil {
		return m.SendPkts
	}
	return 0
}

func (m *QCtr) GetRecvPkts() uint64 {
	if m != nil {
		return m.RecvPkts
	}
	return 0
}

func (m *QCtr) GetRxSemWrErr() uint32 {
	if m != nil {
		return m.RxSemWrErr
	}
	return 0
}

func (m *QCtr) GetRxSlotValueReadErr() uint32 {
	if m != nil {
		return m.RxSlotValueReadErr
	}
	return 0
}

func (m *QCtr) GetRxDescrReadErr() uint32 {
	if m != nil {
		return m.RxDescrReadErr
	}
	return 0
}

func (m *QCtr) GetRxDescrToHdrErr() uint32 {
	if m != nil {
		return m.RxDescrToHdrErr
	}
	return 0
}

func (m *QCtr) GetRxDescrFreeErr() uint32 {
	if m != nil {
		return m.RxDescrFreeErr
	}
	return 0
}

func (m *QCtr) GetTxDescrFreeErr() uint32 {
	if m != nil {
		return m.TxDescrFreeErr
	}
	return 0
}

func (m *QCtr) GetTxPageAllocErr() uint32 {
	if m != nil {
		return m.TxPageAllocErr
	}
	return 0
}

func (m *QCtr) GetTxPageCopyErr() uint32 {
	if m != nil {
		return m.TxPageCopyErr
	}
	return 0
}

func (m *QCtr) GetTxDescrPgmErr() uint32 {
	if m != nil {
		return m.TxDescrPgmErr
	}
	return 0
}

func (m *QCtr) GetTxSendErr() uint32 {
	if m != nil {
		return m.TxSendErr
	}
	return 0
}

func (m *QCtr) GetRxDescrAddrOob() uint32 {
	if m != nil {
		return m.RxDescrAddrOob
	}
	return 0
}

func (m *QCtr) GetPollCount() uint64 {
	if m != nil {
		return m.PollCount
	}
	return 0
}

func (m *QCtr) GetTxDoorbellErr() uint32 {
	if m != nil {
		return m.TxDoorbellErr
	}
	return 0
}

type QGlobalInfo struct {
	GcPindex                    uint32 `protobuf:"varint,1,opt,name=gc_pindex,json=gcPindex,proto3" json:"gc_pindex,omitempty"`
	CpuTxPagePindex             uint32 `protobuf:"varint,2,opt,name=cpu_tx_page_pindex,json=cpuTxPagePindex,proto3" json:"cpu_tx_page_pindex,omitempty"`
	CpuTxPageCindex             uint32 `protobuf:"varint,3,opt,name=cpu_tx_page_cindex,json=cpuTxPageCindex,proto3" json:"cpu_tx_page_cindex,omitempty"`
	CpuTxDescrPindex            uint32 `protobuf:"varint,4,opt,name=cpu_tx_descr_pindex,json=cpuTxDescrPindex,proto3" json:"cpu_tx_descr_pindex,omitempty"`
	CpuTxDescrCindex            uint32 `protobuf:"varint,5,opt,name=cpu_tx_descr_cindex,json=cpuTxDescrCindex,proto3" json:"cpu_tx_descr_cindex,omitempty"`
	CpuRxDprCindex              uint32 `protobuf:"varint,6,opt,name=cpu_rx_dpr_cindex,json=cpuRxDprCindex,proto3" json:"cpu_rx_dpr_cindex,omitempty"`
	CpuRxDprSemCindex           uint32 `protobuf:"varint,7,opt,name=cpu_rx_dpr_sem_cindex,json=cpuRxDprSemCindex,proto3" json:"cpu_rx_dpr_sem_cindex,omitempty"`
	CpuRxDprDescrFreeErr        uint32 `protobuf:"varint,8,opt,name=cpu_rx_dpr_descr_free_err,json=cpuRxDprDescrFreeErr,proto3" json:"cpu_rx_dpr_descr_free_err,omitempty"`
	CpuRxDprSemFreeErr          uint32 `protobuf:"varint,9,opt,name=cpu_rx_dpr_sem_free_err,json=cpuRxDprSemFreeErr,proto3" json:"cpu_rx_dpr_sem_free_err,omitempty"`
	CpuRxDprDescrInvalidFreeErr uint32 `protobuf:"varint,10,opt,name=cpu_rx_dpr_descr_invalid_free_err,json=cpuRxDprDescrInvalidFreeErr,proto3" json:"cpu_rx_dpr_descr_invalid_free_err,omitempty"`
	CpuTxPageFullErr            uint32 `protobuf:"varint,11,opt,name=cpu_tx_page_full_err,json=cpuTxPageFullErr,proto3" json:"cpu_tx_page_full_err,omitempty"`
	CpuTxDescrFullErr           uint32 `protobuf:"varint,12,opt,name=cpu_tx_descr_full_err,json=cpuTxDescrFullErr,proto3" json:"cpu_tx_descr_full_err,omitempty"`
}

func (m *QGlobalInfo) Reset()                    { *m = QGlobalInfo{} }
func (m *QGlobalInfo) String() string            { return proto.CompactTextString(m) }
func (*QGlobalInfo) ProtoMessage()               {}
func (*QGlobalInfo) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{26} }

func (m *QGlobalInfo) GetGcPindex() uint32 {
	if m != nil {
		return m.GcPindex
	}
	return 0
}

func (m *QGlobalInfo) GetCpuTxPagePindex() uint32 {
	if m != nil {
		return m.CpuTxPagePindex
	}
	return 0
}

func (m *QGlobalInfo) GetCpuTxPageCindex() uint32 {
	if m != nil {
		return m.CpuTxPageCindex
	}
	return 0
}

func (m *QGlobalInfo) GetCpuTxDescrPindex() uint32 {
	if m != nil {
		return m.CpuTxDescrPindex
	}
	return 0
}

func (m *QGlobalInfo) GetCpuTxDescrCindex() uint32 {
	if m != nil {
		return m.CpuTxDescrCindex
	}
	return 0
}

func (m *QGlobalInfo) GetCpuRxDprCindex() uint32 {
	if m != nil {
		return m.CpuRxDprCindex
	}
	return 0
}

func (m *QGlobalInfo) GetCpuRxDprSemCindex() uint32 {
	if m != nil {
		return m.CpuRxDprSemCindex
	}
	return 0
}

func (m *QGlobalInfo) GetCpuRxDprDescrFreeErr() uint32 {
	if m != nil {
		return m.CpuRxDprDescrFreeErr
	}
	return 0
}

func (m *QGlobalInfo) GetCpuRxDprSemFreeErr() uint32 {
	if m != nil {
		return m.CpuRxDprSemFreeErr
	}
	return 0
}

func (m *QGlobalInfo) GetCpuRxDprDescrInvalidFreeErr() uint32 {
	if m != nil {
		return m.CpuRxDprDescrInvalidFreeErr
	}
	return 0
}

func (m *QGlobalInfo) GetCpuTxPageFullErr() uint32 {
	if m != nil {
		return m.CpuTxPageFullErr
	}
	return 0
}

func (m *QGlobalInfo) GetCpuTxDescrFullErr() uint32 {
	if m != nil {
		return m.CpuTxDescrFullErr
	}
	return 0
}

type QInfo struct {
	QueueId       uint32 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	BaseAddr      uint64 `protobuf:"varint,2,opt,name=base_addr,json=baseAddr,proto3" json:"base_addr,omitempty"`
	PcIndex       uint32 `protobuf:"varint,3,opt,name=pc_index,json=pcIndex,proto3" json:"pc_index,omitempty"`
	PcIndexAddr   uint32 `protobuf:"varint,4,opt,name=pc_index_addr,json=pcIndexAddr,proto3" json:"pc_index_addr,omitempty"`
	ValidBitValue uint64 `protobuf:"varint,5,opt,name=valid_bit_value,json=validBitValue,proto3" json:"valid_bit_value,omitempty"`
	QueueType     uint32 `protobuf:"varint,6,opt,name=queue_type,json=queueType,proto3" json:"queue_type,omitempty"`
	Ctr           *QCtr  `protobuf:"bytes,7,opt,name=ctr" json:"ctr,omitempty"`
}

func (m *QInfo) Reset()                    { *m = QInfo{} }
func (m *QInfo) String() string            { return proto.CompactTextString(m) }
func (*QInfo) ProtoMessage()               {}
func (*QInfo) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{27} }

func (m *QInfo) GetQueueId() uint32 {
	if m != nil {
		return m.QueueId
	}
	return 0
}

func (m *QInfo) GetBaseAddr() uint64 {
	if m != nil {
		return m.BaseAddr
	}
	return 0
}

func (m *QInfo) GetPcIndex() uint32 {
	if m != nil {
		return m.PcIndex
	}
	return 0
}

func (m *QInfo) GetPcIndexAddr() uint32 {
	if m != nil {
		return m.PcIndexAddr
	}
	return 0
}

func (m *QInfo) GetValidBitValue() uint64 {
	if m != nil {
		return m.ValidBitValue
	}
	return 0
}

func (m *QInfo) GetQueueType() uint32 {
	if m != nil {
		return m.QueueType
	}
	return 0
}

func (m *QInfo) GetCtr() *QCtr {
	if m != nil {
		return m.Ctr
	}
	return nil
}

type FTEInfo struct {
	QueueId uint32       `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Glbal   *QGlobalInfo `protobuf:"bytes,2,opt,name=glbal" json:"glbal,omitempty"`
	Qinfo   []*QInfo     `protobuf:"bytes,3,rep,name=qinfo" json:"qinfo,omitempty"`
}

func (m *FTEInfo) Reset()                    { *m = FTEInfo{} }
func (m *FTEInfo) String() string            { return proto.CompactTextString(m) }
func (*FTEInfo) ProtoMessage()               {}
func (*FTEInfo) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{28} }

func (m *FTEInfo) GetQueueId() uint32 {
	if m != nil {
		return m.QueueId
	}
	return 0
}

func (m *FTEInfo) GetGlbal() *QGlobalInfo {
	if m != nil {
		return m.Glbal
	}
	return nil
}

func (m *FTEInfo) GetQinfo() []*QInfo {
	if m != nil {
		return m.Qinfo
	}
	return nil
}

type PMDStats struct {
	FteInfo []*FTEInfo `protobuf:"bytes,1,rep,name=fte_info,json=fteInfo" json:"fte_info,omitempty"`
}

func (m *PMDStats) Reset()                    { *m = PMDStats{} }
func (m *PMDStats) String() string            { return proto.CompactTextString(m) }
func (*PMDStats) ProtoMessage()               {}
func (*PMDStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{29} }

func (m *PMDStats) GetFteInfo() []*FTEInfo {
	if m != nil {
		return m.FteInfo
	}
	return nil
}

type FTEDebugStatsInfo struct {
	Type  FTEDebugStatsType `protobuf:"varint,1,opt,name=type,proto3,enum=sys.FTEDebugStatsType" json:"type,omitempty"`
	Count uint64            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *FTEDebugStatsInfo) Reset()                    { *m = FTEDebugStatsInfo{} }
func (m *FTEDebugStatsInfo) String() string            { return proto.CompactTextString(m) }
func (*FTEDebugStatsInfo) ProtoMessage()               {}
func (*FTEDebugStatsInfo) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{30} }

func (m *FTEDebugStatsInfo) GetType() FTEDebugStatsType {
	if m != nil {
		return m.Type
	}
	return FTEDebugStatsType_PACKET_PARSING_ERROR
}

func (m *FTEDebugStatsInfo) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type FTEInstDebugStats struct {
	Instance          uint32               `protobuf:"varint,1,opt,name=instance,proto3" json:"instance,omitempty"`
	FteDebugStatsInfo []*FTEDebugStatsInfo `protobuf:"bytes,2,rep,name=fte_debug_stats_info,json=fteDebugStatsInfo" json:"fte_debug_stats_info,omitempty"`
}

func (m *FTEInstDebugStats) Reset()                    { *m = FTEInstDebugStats{} }
func (m *FTEInstDebugStats) String() string            { return proto.CompactTextString(m) }
func (*FTEInstDebugStats) ProtoMessage()               {}
func (*FTEInstDebugStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{31} }

func (m *FTEInstDebugStats) GetInstance() uint32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *FTEInstDebugStats) GetFteDebugStatsInfo() []*FTEDebugStatsInfo {
	if m != nil {
		return m.FteDebugStatsInfo
	}
	return nil
}

type FTEDebugStats struct {
	FteInstDebugStats []*FTEInstDebugStats `protobuf:"bytes,2,rep,name=fte_inst_debug_stats,json=fteInstDebugStats" json:"fte_inst_debug_stats,omitempty"`
}

func (m *FTEDebugStats) Reset()                    { *m = FTEDebugStats{} }
func (m *FTEDebugStats) String() string            { return proto.CompactTextString(m) }
func (*FTEDebugStats) ProtoMessage()               {}
func (*FTEDebugStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{32} }

func (m *FTEDebugStats) GetFteInstDebugStats() []*FTEInstDebugStats {
	if m != nil {
		return m.FteInstDebugStats
	}
	return nil
}

type FeatureProfileResponse struct {
	ApiStatus      ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	FeatureProfile FeatureProfile `protobuf:"varint,2,opt,name=feature_profile,json=featureProfile,proto3,enum=sys.FeatureProfile" json:"feature_profile,omitempty"`
}

func (m *FeatureProfileResponse) Reset()                    { *m = FeatureProfileResponse{} }
func (m *FeatureProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*FeatureProfileResponse) ProtoMessage()               {}
func (*FeatureProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{33} }

func (m *FeatureProfileResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FeatureProfileResponse) GetFeatureProfile() FeatureProfile {
	if m != nil {
		return m.FeatureProfile
	}
	return FeatureProfile_FEATURE_PROFILE_NONE
}

// Event from HAL -> Agent
type MicroSegEvent struct {
	Status MicroSegStatus `protobuf:"varint,1,opt,name=status,proto3,enum=sys.MicroSegStatus" json:"status,omitempty"`
}

func (m *MicroSegEvent) Reset()                    { *m = MicroSegEvent{} }
func (m *MicroSegEvent) String() string            { return proto.CompactTextString(m) }
func (*MicroSegEvent) ProtoMessage()               {}
func (*MicroSegEvent) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{34} }

func (m *MicroSegEvent) GetStatus() MicroSegStatus {
	if m != nil {
		return m.Status
	}
	return MicroSegStatus_MICRO_SEG_STATUS_NONE
}

// Spec from Nicmgr -> HAL
type MicroSegSpec struct {
	MicroSegMode MicroSegMode   `protobuf:"varint,1,opt,name=micro_seg_mode,json=microSegMode,proto3,enum=sys.MicroSegMode" json:"micro_seg_mode,omitempty"`
	Status       MicroSegStatus `protobuf:"varint,2,opt,name=status,proto3,enum=sys.MicroSegStatus" json:"status,omitempty"`
}

func (m *MicroSegSpec) Reset()                    { *m = MicroSegSpec{} }
func (m *MicroSegSpec) String() string            { return proto.CompactTextString(m) }
func (*MicroSegSpec) ProtoMessage()               {}
func (*MicroSegSpec) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{35} }

func (m *MicroSegSpec) GetMicroSegMode() MicroSegMode {
	if m != nil {
		return m.MicroSegMode
	}
	return MicroSegMode_MICRO_SEG_DISABLE
}

func (m *MicroSegSpec) GetStatus() MicroSegStatus {
	if m != nil {
		return m.Status
	}
	return MicroSegStatus_MICRO_SEG_STATUS_NONE
}

// MicroSeg Message Nicmgr -> HAL
type MicroSegRequestMsg struct {
	Request []*MicroSegSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MicroSegRequestMsg) Reset()                    { *m = MicroSegRequestMsg{} }
func (m *MicroSegRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MicroSegRequestMsg) ProtoMessage()               {}
func (*MicroSegRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{36} }

func (m *MicroSegRequestMsg) GetRequest() []*MicroSegSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type MicroSegResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    MicroSegStatus `protobuf:"varint,2,opt,name=status,proto3,enum=sys.MicroSegStatus" json:"status,omitempty"`
}

func (m *MicroSegResponse) Reset()                    { *m = MicroSegResponse{} }
func (m *MicroSegResponse) String() string            { return proto.CompactTextString(m) }
func (*MicroSegResponse) ProtoMessage()               {}
func (*MicroSegResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{37} }

func (m *MicroSegResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MicroSegResponse) GetStatus() MicroSegStatus {
	if m != nil {
		return m.Status
	}
	return MicroSegStatus_MICRO_SEG_STATUS_NONE
}

type MicroSegResponseMsg struct {
	Response []*MicroSegResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MicroSegResponseMsg) Reset()                    { *m = MicroSegResponseMsg{} }
func (m *MicroSegResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MicroSegResponseMsg) ProtoMessage()               {}
func (*MicroSegResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{38} }

func (m *MicroSegResponseMsg) GetResponse() []*MicroSegResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MicroSegUpdateRequest struct {
	MicroSegMode MicroSegMode `protobuf:"varint,1,opt,name=micro_seg_mode,json=microSegMode,proto3,enum=sys.MicroSegMode" json:"micro_seg_mode,omitempty"`
}

func (m *MicroSegUpdateRequest) Reset()                    { *m = MicroSegUpdateRequest{} }
func (m *MicroSegUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*MicroSegUpdateRequest) ProtoMessage()               {}
func (*MicroSegUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{39} }

func (m *MicroSegUpdateRequest) GetMicroSegMode() MicroSegMode {
	if m != nil {
		return m.MicroSegMode
	}
	return MicroSegMode_MICRO_SEG_DISABLE
}

type MicroSegUpdateRequestMsg struct {
	Request []*MicroSegUpdateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MicroSegUpdateRequestMsg) Reset()                    { *m = MicroSegUpdateRequestMsg{} }
func (m *MicroSegUpdateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MicroSegUpdateRequestMsg) ProtoMessage()               {}
func (*MicroSegUpdateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{40} }

func (m *MicroSegUpdateRequestMsg) GetRequest() []*MicroSegUpdateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MicroSegUpdateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *MicroSegUpdateResponse) Reset()                    { *m = MicroSegUpdateResponse{} }
func (m *MicroSegUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*MicroSegUpdateResponse) ProtoMessage()               {}
func (*MicroSegUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{41} }

func (m *MicroSegUpdateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type MicroSegUpdateResponseMsg struct {
	Response []*MicroSegUpdateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MicroSegUpdateResponseMsg) Reset()                    { *m = MicroSegUpdateResponseMsg{} }
func (m *MicroSegUpdateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MicroSegUpdateResponseMsg) ProtoMessage()               {}
func (*MicroSegUpdateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{42} }

func (m *MicroSegUpdateResponseMsg) GetResponse() []*MicroSegUpdateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// System Spec
type SysSpec struct {
	FwdMode    ForwardMode `protobuf:"varint,1,opt,name=fwd_mode,json=fwdMode,proto3,enum=sys.ForwardMode" json:"fwd_mode,omitempty"`
	PolicyMode PolicyMode  `protobuf:"varint,2,opt,name=policy_mode,json=policyMode,proto3,enum=sys.PolicyMode" json:"policy_mode,omitempty"`
}

func (m *SysSpec) Reset()                    { *m = SysSpec{} }
func (m *SysSpec) String() string            { return proto.CompactTextString(m) }
func (*SysSpec) ProtoMessage()               {}
func (*SysSpec) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{43} }

func (m *SysSpec) GetFwdMode() ForwardMode {
	if m != nil {
		return m.FwdMode
	}
	return ForwardMode_FWD_MODE_NONE
}

func (m *SysSpec) GetPolicyMode() PolicyMode {
	if m != nil {
		return m.PolicyMode
	}
	return PolicyMode_POLICY_MODE_NONE
}

type SysSpecCreateUpdateRequest struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *SysSpec  `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *SysSpecCreateUpdateRequest) Reset()         { *m = SysSpecCreateUpdateRequest{} }
func (m *SysSpecCreateUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*SysSpecCreateUpdateRequest) ProtoMessage()    {}
func (*SysSpecCreateUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorSystem, []int{44}
}

func (m *SysSpecCreateUpdateRequest) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SysSpecCreateUpdateRequest) GetSpec() *SysSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// System Spec Response Status
type SysSpecStatus struct {
}

func (m *SysSpecStatus) Reset()                    { *m = SysSpecStatus{} }
func (m *SysSpecStatus) String() string            { return proto.CompactTextString(m) }
func (*SysSpecStatus) ProtoMessage()               {}
func (*SysSpecStatus) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{45} }

// System Spec Response
type SysSpecResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *SysSpecStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SysSpecResponse) Reset()                    { *m = SysSpecResponse{} }
func (m *SysSpecResponse) String() string            { return proto.CompactTextString(m) }
func (*SysSpecResponse) ProtoMessage()               {}
func (*SysSpecResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{46} }

func (m *SysSpecResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SysSpecResponse) GetStatus() *SysSpecStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// System spec get response
type SysSpecGetResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *SysSpec  `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *SysSpecGetResponse) Reset()                    { *m = SysSpecGetResponse{} }
func (m *SysSpecGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SysSpecGetResponse) ProtoMessage()               {}
func (*SysSpecGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{47} }

func (m *SysSpecGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SysSpecGetResponse) GetSpec() *SysSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type SysSpecGetRequest struct {
}

func (m *SysSpecGetRequest) Reset()                    { *m = SysSpecGetRequest{} }
func (m *SysSpecGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SysSpecGetRequest) ProtoMessage()               {}
func (*SysSpecGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{48} }

func init() {
	proto.RegisterType((*ApiStatsEntry)(nil), "sys.ApiStatsEntry")
	proto.RegisterType((*ApiStatsResponse)(nil), "sys.ApiStatsResponse")
	proto.RegisterType((*DropStatsEntry)(nil), "sys.DropStatsEntry")
	proto.RegisterType((*EgressDropStatsEntry)(nil), "sys.EgressDropStatsEntry")
	proto.RegisterType((*BufferDropStatsEntry)(nil), "sys.BufferDropStatsEntry")
	proto.RegisterType((*BufferDropStats)(nil), "sys.BufferDropStats")
	proto.RegisterType((*TableStatsEntry)(nil), "sys.TableStatsEntry")
	proto.RegisterType((*TableStats)(nil), "sys.TableStats")
	proto.RegisterType((*BufferStats)(nil), "sys.BufferStats")
	proto.RegisterType((*OflowFifoDropStatsEntry)(nil), "sys.OflowFifoDropStatsEntry")
	proto.RegisterType((*OflowFifoDropStats)(nil), "sys.OflowFifoDropStats")
	proto.RegisterType((*OflowFifoStats)(nil), "sys.OflowFifoStats")
	proto.RegisterType((*PacketBufferPortStats)(nil), "sys.PacketBufferPortStats")
	proto.RegisterType((*PacketBufferStats)(nil), "sys.PacketBufferStats")
	proto.RegisterType((*Status)(nil), "sys.Status")
	proto.RegisterType((*SystemGetRequest)(nil), "sys.SystemGetRequest")
	proto.RegisterType((*SystemResponse)(nil), "sys.SystemResponse")
	proto.RegisterType((*Stats)(nil), "sys.Stats")
	proto.RegisterType((*DropStats)(nil), "sys.DropStats")
	proto.RegisterType((*EgressDropStats)(nil), "sys.EgressDropStats")
	proto.RegisterType((*FTEError)(nil), "sys.FTEError")
	proto.RegisterType((*FTEFeatureStats)(nil), "sys.FTEFeatureStats")
	proto.RegisterType((*FTEStatsInfo)(nil), "sys.FTEStatsInfo")
	proto.RegisterType((*FTEStats)(nil), "sys.FTEStats")
	proto.RegisterType((*SessionSummaryStats)(nil), "sys.SessionSummaryStats")
	proto.RegisterType((*QCtr)(nil), "sys.QCtr")
	proto.RegisterType((*QGlobalInfo)(nil), "sys.QGlobalInfo")
	proto.RegisterType((*QInfo)(nil), "sys.QInfo")
	proto.RegisterType((*FTEInfo)(nil), "sys.FTEInfo")
	proto.RegisterType((*PMDStats)(nil), "sys.PMDStats")
	proto.RegisterType((*FTEDebugStatsInfo)(nil), "sys.FTEDebugStatsInfo")
	proto.RegisterType((*FTEInstDebugStats)(nil), "sys.FTEInstDebugStats")
	proto.RegisterType((*FTEDebugStats)(nil), "sys.FTEDebugStats")
	proto.RegisterType((*FeatureProfileResponse)(nil), "sys.FeatureProfileResponse")
	proto.RegisterType((*MicroSegEvent)(nil), "sys.MicroSegEvent")
	proto.RegisterType((*MicroSegSpec)(nil), "sys.MicroSegSpec")
	proto.RegisterType((*MicroSegRequestMsg)(nil), "sys.MicroSegRequestMsg")
	proto.RegisterType((*MicroSegResponse)(nil), "sys.MicroSegResponse")
	proto.RegisterType((*MicroSegResponseMsg)(nil), "sys.MicroSegResponseMsg")
	proto.RegisterType((*MicroSegUpdateRequest)(nil), "sys.MicroSegUpdateRequest")
	proto.RegisterType((*MicroSegUpdateRequestMsg)(nil), "sys.MicroSegUpdateRequestMsg")
	proto.RegisterType((*MicroSegUpdateResponse)(nil), "sys.MicroSegUpdateResponse")
	proto.RegisterType((*MicroSegUpdateResponseMsg)(nil), "sys.MicroSegUpdateResponseMsg")
	proto.RegisterType((*SysSpec)(nil), "sys.SysSpec")
	proto.RegisterType((*SysSpecCreateUpdateRequest)(nil), "sys.SysSpecCreateUpdateRequest")
	proto.RegisterType((*SysSpecStatus)(nil), "sys.SysSpecStatus")
	proto.RegisterType((*SysSpecResponse)(nil), "sys.SysSpecResponse")
	proto.RegisterType((*SysSpecGetResponse)(nil), "sys.SysSpecGetResponse")
	proto.RegisterType((*SysSpecGetRequest)(nil), "sys.SysSpecGetRequest")
	proto.RegisterEnum("sys.ApiCounter", ApiCounter_name, ApiCounter_value)
	proto.RegisterEnum("sys.BufferDropReasons", BufferDropReasons_name, BufferDropReasons_value)
	proto.RegisterEnum("sys.TableType", TableType_name, TableType_value)
	proto.RegisterEnum("sys.OflowFifoDropType", OflowFifoDropType_name, OflowFifoDropType_value)
	proto.RegisterEnum("sys.SystemGetType", SystemGetType_name, SystemGetType_value)
	proto.RegisterEnum("sys.FTEDebugStatsType", FTEDebugStatsType_name, FTEDebugStatsType_value)
	proto.RegisterEnum("sys.ForwardingMode", ForwardingMode_name, ForwardingMode_value)
	proto.RegisterEnum("sys.FeatureProfile", FeatureProfile_name, FeatureProfile_value)
	proto.RegisterEnum("sys.MicroSegMode", MicroSegMode_name, MicroSegMode_value)
	proto.RegisterEnum("sys.MicroSegStatus", MicroSegStatus_name, MicroSegStatus_value)
	proto.RegisterEnum("sys.ForwardMode", ForwardMode_name, ForwardMode_value)
	proto.RegisterEnum("sys.PolicyMode", PolicyMode_name, PolicyMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for System service

type SystemClient interface {
	// System related APIs
	APIStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ApiStatsResponse, error)
	SystemGet(ctx context.Context, in *SystemGetRequest, opts ...grpc.CallOption) (*SystemResponse, error)
	SystemUUIDGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemResponse, error)
	ClearIngressDropStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ClearEgressDropStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ClearPbDropStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ClearFteStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ClearFteTxRxStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ClearTableStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ClearPbStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	FeatureProfileGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FeatureProfileResponse, error)
	MicroSegUpdate(ctx context.Context, in *MicroSegUpdateRequestMsg, opts ...grpc.CallOption) (*MicroSegUpdateResponseMsg, error)
	// Nicmgr -> HAL micro seg status
	MicroSegStatusUpdate(ctx context.Context, in *MicroSegRequestMsg, opts ...grpc.CallOption) (*MicroSegResponseMsg, error)
	SysSpecUpdate(ctx context.Context, in *SysSpec, opts ...grpc.CallOption) (*SysSpecResponse, error)
	SysSpecGet(ctx context.Context, in *SysSpecGetRequest, opts ...grpc.CallOption) (*SysSpecGetResponse, error)
}

type systemClient struct {
	cc *grpc.ClientConn
}

func NewSystemClient(cc *grpc.ClientConn) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) APIStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ApiStatsResponse, error) {
	out := new(ApiStatsResponse)
	err := grpc.Invoke(ctx, "/sys.System/APIStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SystemGet(ctx context.Context, in *SystemGetRequest, opts ...grpc.CallOption) (*SystemResponse, error) {
	out := new(SystemResponse)
	err := grpc.Invoke(ctx, "/sys.System/SystemGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SystemUUIDGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemResponse, error) {
	out := new(SystemResponse)
	err := grpc.Invoke(ctx, "/sys.System/SystemUUIDGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ClearIngressDropStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sys.System/ClearIngressDropStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ClearEgressDropStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sys.System/ClearEgressDropStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ClearPbDropStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sys.System/ClearPbDropStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ClearFteStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sys.System/ClearFteStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ClearFteTxRxStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sys.System/ClearFteTxRxStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ClearTableStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sys.System/ClearTableStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ClearPbStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/sys.System/ClearPbStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) FeatureProfileGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FeatureProfileResponse, error) {
	out := new(FeatureProfileResponse)
	err := grpc.Invoke(ctx, "/sys.System/FeatureProfileGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) MicroSegUpdate(ctx context.Context, in *MicroSegUpdateRequestMsg, opts ...grpc.CallOption) (*MicroSegUpdateResponseMsg, error) {
	out := new(MicroSegUpdateResponseMsg)
	err := grpc.Invoke(ctx, "/sys.System/MicroSegUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) MicroSegStatusUpdate(ctx context.Context, in *MicroSegRequestMsg, opts ...grpc.CallOption) (*MicroSegResponseMsg, error) {
	out := new(MicroSegResponseMsg)
	err := grpc.Invoke(ctx, "/sys.System/MicroSegStatusUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SysSpecUpdate(ctx context.Context, in *SysSpec, opts ...grpc.CallOption) (*SysSpecResponse, error) {
	out := new(SysSpecResponse)
	err := grpc.Invoke(ctx, "/sys.System/SysSpecUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SysSpecGet(ctx context.Context, in *SysSpecGetRequest, opts ...grpc.CallOption) (*SysSpecGetResponse, error) {
	out := new(SysSpecGetResponse)
	err := grpc.Invoke(ctx, "/sys.System/SysSpecGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for System service

type SystemServer interface {
	// System related APIs
	APIStatsGet(context.Context, *Empty) (*ApiStatsResponse, error)
	SystemGet(context.Context, *SystemGetRequest) (*SystemResponse, error)
	SystemUUIDGet(context.Context, *Empty) (*SystemResponse, error)
	ClearIngressDropStats(context.Context, *Empty) (*Empty, error)
	ClearEgressDropStats(context.Context, *Empty) (*Empty, error)
	ClearPbDropStats(context.Context, *Empty) (*Empty, error)
	ClearFteStats(context.Context, *Empty) (*Empty, error)
	ClearFteTxRxStats(context.Context, *Empty) (*Empty, error)
	ClearTableStats(context.Context, *Empty) (*Empty, error)
	ClearPbStats(context.Context, *Empty) (*Empty, error)
	FeatureProfileGet(context.Context, *Empty) (*FeatureProfileResponse, error)
	MicroSegUpdate(context.Context, *MicroSegUpdateRequestMsg) (*MicroSegUpdateResponseMsg, error)
	// Nicmgr -> HAL micro seg status
	MicroSegStatusUpdate(context.Context, *MicroSegRequestMsg) (*MicroSegResponseMsg, error)
	SysSpecUpdate(context.Context, *SysSpec) (*SysSpecResponse, error)
	SysSpecGet(context.Context, *SysSpecGetRequest) (*SysSpecGetResponse, error)
}

func RegisterSystemServer(s *grpc.Server, srv SystemServer) {
	s.RegisterService(&_System_serviceDesc, srv)
}

func _System_APIStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).APIStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/APIStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).APIStatsGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SystemGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SystemGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/SystemGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SystemGet(ctx, req.(*SystemGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SystemUUIDGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SystemUUIDGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/SystemUUIDGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SystemUUIDGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ClearIngressDropStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ClearIngressDropStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/ClearIngressDropStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ClearIngressDropStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ClearEgressDropStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ClearEgressDropStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/ClearEgressDropStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ClearEgressDropStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ClearPbDropStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ClearPbDropStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/ClearPbDropStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ClearPbDropStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ClearFteStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ClearFteStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/ClearFteStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ClearFteStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ClearFteTxRxStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ClearFteTxRxStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/ClearFteTxRxStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ClearFteTxRxStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ClearTableStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ClearTableStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/ClearTableStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ClearTableStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ClearPbStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ClearPbStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/ClearPbStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ClearPbStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_FeatureProfileGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).FeatureProfileGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/FeatureProfileGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).FeatureProfileGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_MicroSegUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MicroSegUpdateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).MicroSegUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/MicroSegUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).MicroSegUpdate(ctx, req.(*MicroSegUpdateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_MicroSegStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MicroSegRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).MicroSegStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/MicroSegStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).MicroSegStatusUpdate(ctx, req.(*MicroSegRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SysSpecUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SysSpecUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/SysSpecUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SysSpecUpdate(ctx, req.(*SysSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SysSpecGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysSpecGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SysSpecGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/SysSpecGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SysSpecGet(ctx, req.(*SysSpecGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _System_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sys.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "APIStatsGet",
			Handler:    _System_APIStatsGet_Handler,
		},
		{
			MethodName: "SystemGet",
			Handler:    _System_SystemGet_Handler,
		},
		{
			MethodName: "SystemUUIDGet",
			Handler:    _System_SystemUUIDGet_Handler,
		},
		{
			MethodName: "ClearIngressDropStats",
			Handler:    _System_ClearIngressDropStats_Handler,
		},
		{
			MethodName: "ClearEgressDropStats",
			Handler:    _System_ClearEgressDropStats_Handler,
		},
		{
			MethodName: "ClearPbDropStats",
			Handler:    _System_ClearPbDropStats_Handler,
		},
		{
			MethodName: "ClearFteStats",
			Handler:    _System_ClearFteStats_Handler,
		},
		{
			MethodName: "ClearFteTxRxStats",
			Handler:    _System_ClearFteTxRxStats_Handler,
		},
		{
			MethodName: "ClearTableStats",
			Handler:    _System_ClearTableStats_Handler,
		},
		{
			MethodName: "ClearPbStats",
			Handler:    _System_ClearPbStats_Handler,
		},
		{
			MethodName: "FeatureProfileGet",
			Handler:    _System_FeatureProfileGet_Handler,
		},
		{
			MethodName: "MicroSegUpdate",
			Handler:    _System_MicroSegUpdate_Handler,
		},
		{
			MethodName: "MicroSegStatusUpdate",
			Handler:    _System_MicroSegStatusUpdate_Handler,
		},
		{
			MethodName: "SysSpecUpdate",
			Handler:    _System_SysSpecUpdate_Handler,
		},
		{
			MethodName: "SysSpecGet",
			Handler:    _System_SysSpecGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}

func (m *ApiStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiType))
	}
	if m.NumApiCall != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumApiCall))
	}
	if m.NumApiSuccess != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumApiSuccess))
	}
	if m.NumApiFail != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumApiFail))
	}
	return i, nil
}

func (m *ApiStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiEntries) > 0 {
		for _, msg := range m.ApiEntries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DropStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reasons != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Reasons.Size()))
		n1, err := m.Reasons.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DropCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropCount))
	}
	return i, nil
}

func (m *EgressDropStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EgressDropStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reasons != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Reasons.Size()))
		n2, err := m.Reasons.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DropCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropCount))
	}
	return i, nil
}

func (m *BufferDropStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferDropStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reasons != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Reasons))
	}
	if m.DropCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropCount))
	}
	return i, nil
}

func (m *BufferDropStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferDropStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StatsEntries) > 0 {
		for _, msg := range m.StatsEntries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TableStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TableType))
	}
	if len(m.TableName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(len(m.TableName)))
		i += copy(dAtA[i:], m.TableName)
	}
	if m.TableSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TableSize))
	}
	if m.OverflowTableSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.OverflowTableSize))
	}
	if m.EntriesInUse != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.EntriesInUse))
	}
	if m.OverflowEntriesInUse != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.OverflowEntriesInUse))
	}
	if m.NumInserts != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumInserts))
	}
	if m.NumInsertErrors != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumInsertErrors))
	}
	if m.NumDeletes != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumDeletes))
	}
	if m.NumDeleteErrors != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumDeleteErrors))
	}
	return i, nil
}

func (m *TableStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TableStats) > 0 {
		for _, msg := range m.TableStats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BufferStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BufferStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SopCountIn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.SopCountIn))
	}
	if m.EopCountIn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.EopCountIn))
	}
	if m.SopCountOut != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.SopCountOut))
	}
	if m.EopCountOut != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.EopCountOut))
	}
	if m.DropCounts != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropCounts.Size()))
		n3, err := m.DropCounts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *OflowFifoDropStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OflowFifoDropStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Type))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *OflowFifoDropStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OflowFifoDropStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entry) > 0 {
		for _, msg := range m.Entry {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OflowFifoStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OflowFifoStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SopCountIn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.SopCountIn))
	}
	if m.EopCountIn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.EopCountIn))
	}
	if m.SopCountOut != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.SopCountOut))
	}
	if m.EopCountOut != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.EopCountOut))
	}
	if m.DropCounts != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropCounts.Size()))
		n4, err := m.DropCounts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *PacketBufferPortStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBufferPortStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PacketBufferPort != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.PacketBufferPort.Size()))
		n5, err := m.PacketBufferPort.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.BufferStats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.BufferStats.Size()))
		n6, err := m.BufferStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.OflowFifoStats != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.OflowFifoStats.Size()))
		n7, err := m.OflowFifoStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.QosQueueStats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.QosQueueStats.Size()))
		n8, err := m.QosQueueStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *PacketBufferStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBufferStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PortStats) > 0 {
		for _, msg := range m.PortStats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SystemGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Request))
	}
	return i, nil
}

func (m *SystemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Stats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Stats.Size()))
		n9, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Status.Size()))
		n10, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSystem(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if m.InbMgmtIfId != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.InbMgmtIfId))
		i += 8
	}
	return i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DropStats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropStats.Size()))
		n11, err := m.DropStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.EgressDropStats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.EgressDropStats.Size()))
		n12, err := m.EgressDropStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.TableStats != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TableStats.Size()))
		n13, err := m.TableStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.PacketBufferStats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.PacketBufferStats.Size()))
		n14, err := m.PacketBufferStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.FteStats != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.FteStats.Size()))
		n15, err := m.FteStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.SessionStats != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.SessionStats.Size()))
		n16, err := m.SessionStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.PmdStats != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.PmdStats.Size()))
		n17, err := m.PmdStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.FteDebugStats != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.FteDebugStats.Size()))
		n18, err := m.FteDebugStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *DropStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DropEntries) > 0 {
		for _, msg := range m.DropEntries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EgressDropStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EgressDropStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DropEntries) > 0 {
		for _, msg := range m.DropEntries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FTEError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FTEError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FteError) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSystem(dAtA, i, uint64(len(m.FteError)))
		i += copy(dAtA[i:], m.FteError)
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *FTEFeatureStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FTEFeatureStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FeatureName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSystem(dAtA, i, uint64(len(m.FeatureName)))
		i += copy(dAtA[i:], m.FeatureName)
	}
	if m.DropPkts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropPkts))
	}
	if len(m.DropReason) > 0 {
		for _, msg := range m.DropReason {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FTEStatsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FTEStatsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConnPerSecond != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ConnPerSecond))
	}
	if m.FlowMissPkts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.FlowMissPkts))
	}
	if m.RetransmitPkts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.RetransmitPkts))
	}
	if m.RedirPkts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.RedirPkts))
	}
	if m.CflowPkts != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CflowPkts))
	}
	if m.TcpClosePkts != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TcpClosePkts))
	}
	if m.TlsProxyPkts != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TlsProxyPkts))
	}
	if m.SoftqReqs != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.SoftqReqs))
	}
	if m.QueuedTxPkts != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.QueuedTxPkts))
	}
	if m.MaxConnPerSecond != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.MaxConnPerSecond))
	}
	if m.PacketsPerSecond != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.PacketsPerSecond))
	}
	if m.MaxPacketsPerSecond != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.MaxPacketsPerSecond))
	}
	if m.SoftqLen != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.SoftqLen))
	}
	if m.MaxSessionPktDrops != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.MaxSessionPktDrops))
	}
	if len(m.FteErrors) > 0 {
		for _, msg := range m.FteErrors {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FeatureStats) > 0 {
		for _, msg := range m.FeatureStats {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FTEStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FTEStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.FteStatsInfo) > 0 {
		for _, msg := range m.FteStatsInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SessionSummaryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionSummaryStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalActiveSessions != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TotalActiveSessions))
	}
	if m.L2Sessions != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.L2Sessions))
	}
	if m.TcpSessions != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TcpSessions))
	}
	if m.TcpEstablishedSessions != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TcpEstablishedSessions))
	}
	if m.TcpClosedSessions != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TcpClosedSessions))
	}
	if m.UdpSessions != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.UdpSessions))
	}
	if m.IcmpSessions != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.IcmpSessions))
	}
	if m.DropSessions != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropSessions))
	}
	if m.AgedSessions != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.AgedSessions))
	}
	if m.NumTcpResetSent != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumTcpResetSent))
	}
	if m.NumIcmpErrorSent != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumIcmpErrorSent))
	}
	if m.NumConnectionTimeoutSessions != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumConnectionTimeoutSessions))
	}
	if m.NumSessionCreateErrors != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumSessionCreateErrors))
	}
	if m.TcpHalfOpenSessions != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TcpHalfOpenSessions))
	}
	if m.OtherActiveSessions != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.OtherActiveSessions))
	}
	if m.TcpSessionDropCount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TcpSessionDropCount))
	}
	if m.UdpSessionDropCount != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.UdpSessionDropCount))
	}
	if m.IcmpSessionDropCount != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.IcmpSessionDropCount))
	}
	if m.OtherSessionDropCount != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.OtherSessionDropCount))
	}
	if m.DscSessionLimitDropCount != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DscSessionLimitDropCount))
	}
	return i, nil
}

func (m *QCtr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QCtr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SendPkts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.SendPkts))
	}
	if m.RecvPkts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.RecvPkts))
	}
	if m.RxSemWrErr != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.RxSemWrErr))
	}
	if m.RxSlotValueReadErr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.RxSlotValueReadErr))
	}
	if m.RxDescrReadErr != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.RxDescrReadErr))
	}
	if m.RxDescrToHdrErr != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.RxDescrToHdrErr))
	}
	if m.RxDescrFreeErr != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.RxDescrFreeErr))
	}
	if m.TxDescrFreeErr != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TxDescrFreeErr))
	}
	if m.TxPageAllocErr != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TxPageAllocErr))
	}
	if m.TxPageCopyErr != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TxPageCopyErr))
	}
	if m.TxDescrPgmErr != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TxDescrPgmErr))
	}
	if m.TxSendErr != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TxSendErr))
	}
	if m.RxDescrAddrOob != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.RxDescrAddrOob))
	}
	if m.PollCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.PollCount))
	}
	if m.TxDoorbellErr != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TxDoorbellErr))
	}
	return i, nil
}

func (m *QGlobalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QGlobalInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GcPindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.GcPindex))
	}
	if m.CpuTxPagePindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuTxPagePindex))
	}
	if m.CpuTxPageCindex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuTxPageCindex))
	}
	if m.CpuTxDescrPindex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuTxDescrPindex))
	}
	if m.CpuTxDescrCindex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuTxDescrCindex))
	}
	if m.CpuRxDprCindex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuRxDprCindex))
	}
	if m.CpuRxDprSemCindex != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuRxDprSemCindex))
	}
	if m.CpuRxDprDescrFreeErr != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuRxDprDescrFreeErr))
	}
	if m.CpuRxDprSemFreeErr != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuRxDprSemFreeErr))
	}
	if m.CpuRxDprDescrInvalidFreeErr != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuRxDprDescrInvalidFreeErr))
	}
	if m.CpuTxPageFullErr != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuTxPageFullErr))
	}
	if m.CpuTxDescrFullErr != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.CpuTxDescrFullErr))
	}
	return i, nil
}

func (m *QInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueueId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.QueueId))
	}
	if m.BaseAddr != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.BaseAddr))
	}
	if m.PcIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.PcIndex))
	}
	if m.PcIndexAddr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.PcIndexAddr))
	}
	if m.ValidBitValue != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ValidBitValue))
	}
	if m.QueueType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.QueueType))
	}
	if m.Ctr != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Ctr.Size()))
		n19, err := m.Ctr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *FTEInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FTEInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueueId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.QueueId))
	}
	if m.Glbal != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Glbal.Size()))
		n20, err := m.Glbal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if len(m.Qinfo) > 0 {
		for _, msg := range m.Qinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PMDStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PMDStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FteInfo) > 0 {
		for _, msg := range m.FteInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FTEDebugStatsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FTEDebugStatsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Type))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *FTEInstDebugStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FTEInstDebugStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Instance != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Instance))
	}
	if len(m.FteDebugStatsInfo) > 0 {
		for _, msg := range m.FteDebugStatsInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FTEDebugStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FTEDebugStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FteInstDebugStats) > 0 {
		for _, msg := range m.FteInstDebugStats {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FeatureProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	if m.FeatureProfile != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.FeatureProfile))
	}
	return i, nil
}

func (m *MicroSegEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroSegEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *MicroSegSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroSegSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MicroSegMode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.MicroSegMode))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *MicroSegRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroSegRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MicroSegResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroSegResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *MicroSegResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroSegResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MicroSegUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroSegUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MicroSegMode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.MicroSegMode))
	}
	return i, nil
}

func (m *MicroSegUpdateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroSegUpdateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MicroSegUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroSegUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *MicroSegUpdateResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroSegUpdateResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SysSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FwdMode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.FwdMode))
	}
	if m.PolicyMode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.PolicyMode))
	}
	return i, nil
}

func (m *SysSpecCreateUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysSpecCreateUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Spec.Size()))
		n21, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *SysSpecStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysSpecStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SysSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Status.Size()))
		n22, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *SysSpecGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysSpecGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Spec.Size()))
		n23, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *SysSpecGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysSpecGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintSystem(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ApiStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.ApiType != 0 {
		n += 1 + sovSystem(uint64(m.ApiType))
	}
	if m.NumApiCall != 0 {
		n += 1 + sovSystem(uint64(m.NumApiCall))
	}
	if m.NumApiSuccess != 0 {
		n += 1 + sovSystem(uint64(m.NumApiSuccess))
	}
	if m.NumApiFail != 0 {
		n += 1 + sovSystem(uint64(m.NumApiFail))
	}
	return n
}

func (m *ApiStatsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiEntries) > 0 {
		for _, e := range m.ApiEntries {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *DropStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.Reasons != nil {
		l = m.Reasons.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.DropCount != 0 {
		n += 1 + sovSystem(uint64(m.DropCount))
	}
	return n
}

func (m *EgressDropStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.Reasons != nil {
		l = m.Reasons.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.DropCount != 0 {
		n += 1 + sovSystem(uint64(m.DropCount))
	}
	return n
}

func (m *BufferDropStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.Reasons != 0 {
		n += 1 + sovSystem(uint64(m.Reasons))
	}
	if m.DropCount != 0 {
		n += 1 + sovSystem(uint64(m.DropCount))
	}
	return n
}

func (m *BufferDropStats) Size() (n int) {
	var l int
	_ = l
	if len(m.StatsEntries) > 0 {
		for _, e := range m.StatsEntries {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *TableStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.TableType != 0 {
		n += 1 + sovSystem(uint64(m.TableType))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.TableSize != 0 {
		n += 1 + sovSystem(uint64(m.TableSize))
	}
	if m.OverflowTableSize != 0 {
		n += 1 + sovSystem(uint64(m.OverflowTableSize))
	}
	if m.EntriesInUse != 0 {
		n += 1 + sovSystem(uint64(m.EntriesInUse))
	}
	if m.OverflowEntriesInUse != 0 {
		n += 1 + sovSystem(uint64(m.OverflowEntriesInUse))
	}
	if m.NumInserts != 0 {
		n += 1 + sovSystem(uint64(m.NumInserts))
	}
	if m.NumInsertErrors != 0 {
		n += 1 + sovSystem(uint64(m.NumInsertErrors))
	}
	if m.NumDeletes != 0 {
		n += 1 + sovSystem(uint64(m.NumDeletes))
	}
	if m.NumDeleteErrors != 0 {
		n += 1 + sovSystem(uint64(m.NumDeleteErrors))
	}
	return n
}

func (m *TableStats) Size() (n int) {
	var l int
	_ = l
	if len(m.TableStats) > 0 {
		for _, e := range m.TableStats {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *BufferStats) Size() (n int) {
	var l int
	_ = l
	if m.SopCountIn != 0 {
		n += 1 + sovSystem(uint64(m.SopCountIn))
	}
	if m.EopCountIn != 0 {
		n += 1 + sovSystem(uint64(m.EopCountIn))
	}
	if m.SopCountOut != 0 {
		n += 1 + sovSystem(uint64(m.SopCountOut))
	}
	if m.EopCountOut != 0 {
		n += 1 + sovSystem(uint64(m.EopCountOut))
	}
	if m.DropCounts != nil {
		l = m.DropCounts.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *OflowFifoDropStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSystem(uint64(m.Type))
	}
	if m.Count != 0 {
		n += 1 + sovSystem(uint64(m.Count))
	}
	return n
}

func (m *OflowFifoDropStats) Size() (n int) {
	var l int
	_ = l
	if len(m.Entry) > 0 {
		for _, e := range m.Entry {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *OflowFifoStats) Size() (n int) {
	var l int
	_ = l
	if m.SopCountIn != 0 {
		n += 1 + sovSystem(uint64(m.SopCountIn))
	}
	if m.EopCountIn != 0 {
		n += 1 + sovSystem(uint64(m.EopCountIn))
	}
	if m.SopCountOut != 0 {
		n += 1 + sovSystem(uint64(m.SopCountOut))
	}
	if m.EopCountOut != 0 {
		n += 1 + sovSystem(uint64(m.EopCountOut))
	}
	if m.DropCounts != nil {
		l = m.DropCounts.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *PacketBufferPortStats) Size() (n int) {
	var l int
	_ = l
	if m.PacketBufferPort != nil {
		l = m.PacketBufferPort.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.BufferStats != nil {
		l = m.BufferStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.OflowFifoStats != nil {
		l = m.OflowFifoStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.QosQueueStats != nil {
		l = m.QosQueueStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *PacketBufferStats) Size() (n int) {
	var l int
	_ = l
	if len(m.PortStats) > 0 {
		for _, e := range m.PortStats {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SystemGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Request != 0 {
		n += 1 + sovSystem(uint64(m.Request))
	}
	return n
}

func (m *SystemResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.InbMgmtIfId != 0 {
		n += 9
	}
	return n
}

func (m *Stats) Size() (n int) {
	var l int
	_ = l
	if m.DropStats != nil {
		l = m.DropStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.EgressDropStats != nil {
		l = m.EgressDropStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.TableStats != nil {
		l = m.TableStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.PacketBufferStats != nil {
		l = m.PacketBufferStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.FteStats != nil {
		l = m.FteStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.SessionStats != nil {
		l = m.SessionStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.PmdStats != nil {
		l = m.PmdStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.FteDebugStats != nil {
		l = m.FteDebugStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *DropStats) Size() (n int) {
	var l int
	_ = l
	if len(m.DropEntries) > 0 {
		for _, e := range m.DropEntries {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *EgressDropStats) Size() (n int) {
	var l int
	_ = l
	if len(m.DropEntries) > 0 {
		for _, e := range m.DropEntries {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *FTEError) Size() (n int) {
	var l int
	_ = l
	l = len(m.FteError)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovSystem(uint64(m.Count))
	}
	return n
}

func (m *FTEFeatureStats) Size() (n int) {
	var l int
	_ = l
	l = len(m.FeatureName)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.DropPkts != 0 {
		n += 1 + sovSystem(uint64(m.DropPkts))
	}
	if len(m.DropReason) > 0 {
		for _, e := range m.DropReason {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *FTEStatsInfo) Size() (n int) {
	var l int
	_ = l
	if m.ConnPerSecond != 0 {
		n += 1 + sovSystem(uint64(m.ConnPerSecond))
	}
	if m.FlowMissPkts != 0 {
		n += 1 + sovSystem(uint64(m.FlowMissPkts))
	}
	if m.RetransmitPkts != 0 {
		n += 1 + sovSystem(uint64(m.RetransmitPkts))
	}
	if m.RedirPkts != 0 {
		n += 1 + sovSystem(uint64(m.RedirPkts))
	}
	if m.CflowPkts != 0 {
		n += 1 + sovSystem(uint64(m.CflowPkts))
	}
	if m.TcpClosePkts != 0 {
		n += 1 + sovSystem(uint64(m.TcpClosePkts))
	}
	if m.TlsProxyPkts != 0 {
		n += 1 + sovSystem(uint64(m.TlsProxyPkts))
	}
	if m.SoftqReqs != 0 {
		n += 1 + sovSystem(uint64(m.SoftqReqs))
	}
	if m.QueuedTxPkts != 0 {
		n += 1 + sovSystem(uint64(m.QueuedTxPkts))
	}
	if m.MaxConnPerSecond != 0 {
		n += 1 + sovSystem(uint64(m.MaxConnPerSecond))
	}
	if m.PacketsPerSecond != 0 {
		n += 1 + sovSystem(uint64(m.PacketsPerSecond))
	}
	if m.MaxPacketsPerSecond != 0 {
		n += 1 + sovSystem(uint64(m.MaxPacketsPerSecond))
	}
	if m.SoftqLen != 0 {
		n += 1 + sovSystem(uint64(m.SoftqLen))
	}
	if m.MaxSessionPktDrops != 0 {
		n += 1 + sovSystem(uint64(m.MaxSessionPktDrops))
	}
	if len(m.FteErrors) > 0 {
		for _, e := range m.FteErrors {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	if len(m.FeatureStats) > 0 {
		for _, e := range m.FeatureStats {
			l = e.Size()
			n += 2 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *FTEStats) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if len(m.FteStatsInfo) > 0 {
		for _, e := range m.FteStatsInfo {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SessionSummaryStats) Size() (n int) {
	var l int
	_ = l
	if m.TotalActiveSessions != 0 {
		n += 1 + sovSystem(uint64(m.TotalActiveSessions))
	}
	if m.L2Sessions != 0 {
		n += 1 + sovSystem(uint64(m.L2Sessions))
	}
	if m.TcpSessions != 0 {
		n += 1 + sovSystem(uint64(m.TcpSessions))
	}
	if m.TcpEstablishedSessions != 0 {
		n += 1 + sovSystem(uint64(m.TcpEstablishedSessions))
	}
	if m.TcpClosedSessions != 0 {
		n += 1 + sovSystem(uint64(m.TcpClosedSessions))
	}
	if m.UdpSessions != 0 {
		n += 1 + sovSystem(uint64(m.UdpSessions))
	}
	if m.IcmpSessions != 0 {
		n += 1 + sovSystem(uint64(m.IcmpSessions))
	}
	if m.DropSessions != 0 {
		n += 1 + sovSystem(uint64(m.DropSessions))
	}
	if m.AgedSessions != 0 {
		n += 1 + sovSystem(uint64(m.AgedSessions))
	}
	if m.NumTcpResetSent != 0 {
		n += 1 + sovSystem(uint64(m.NumTcpResetSent))
	}
	if m.NumIcmpErrorSent != 0 {
		n += 1 + sovSystem(uint64(m.NumIcmpErrorSent))
	}
	if m.NumConnectionTimeoutSessions != 0 {
		n += 1 + sovSystem(uint64(m.NumConnectionTimeoutSessions))
	}
	if m.NumSessionCreateErrors != 0 {
		n += 1 + sovSystem(uint64(m.NumSessionCreateErrors))
	}
	if m.TcpHalfOpenSessions != 0 {
		n += 1 + sovSystem(uint64(m.TcpHalfOpenSessions))
	}
	if m.OtherActiveSessions != 0 {
		n += 1 + sovSystem(uint64(m.OtherActiveSessions))
	}
	if m.TcpSessionDropCount != 0 {
		n += 2 + sovSystem(uint64(m.TcpSessionDropCount))
	}
	if m.UdpSessionDropCount != 0 {
		n += 2 + sovSystem(uint64(m.UdpSessionDropCount))
	}
	if m.IcmpSessionDropCount != 0 {
		n += 2 + sovSystem(uint64(m.IcmpSessionDropCount))
	}
	if m.OtherSessionDropCount != 0 {
		n += 2 + sovSystem(uint64(m.OtherSessionDropCount))
	}
	if m.DscSessionLimitDropCount != 0 {
		n += 2 + sovSystem(uint64(m.DscSessionLimitDropCount))
	}
	return n
}

func (m *QCtr) Size() (n int) {
	var l int
	_ = l
	if m.SendPkts != 0 {
		n += 1 + sovSystem(uint64(m.SendPkts))
	}
	if m.RecvPkts != 0 {
		n += 1 + sovSystem(uint64(m.RecvPkts))
	}
	if m.RxSemWrErr != 0 {
		n += 1 + sovSystem(uint64(m.RxSemWrErr))
	}
	if m.RxSlotValueReadErr != 0 {
		n += 1 + sovSystem(uint64(m.RxSlotValueReadErr))
	}
	if m.RxDescrReadErr != 0 {
		n += 1 + sovSystem(uint64(m.RxDescrReadErr))
	}
	if m.RxDescrToHdrErr != 0 {
		n += 1 + sovSystem(uint64(m.RxDescrToHdrErr))
	}
	if m.RxDescrFreeErr != 0 {
		n += 1 + sovSystem(uint64(m.RxDescrFreeErr))
	}
	if m.TxDescrFreeErr != 0 {
		n += 1 + sovSystem(uint64(m.TxDescrFreeErr))
	}
	if m.TxPageAllocErr != 0 {
		n += 1 + sovSystem(uint64(m.TxPageAllocErr))
	}
	if m.TxPageCopyErr != 0 {
		n += 1 + sovSystem(uint64(m.TxPageCopyErr))
	}
	if m.TxDescrPgmErr != 0 {
		n += 1 + sovSystem(uint64(m.TxDescrPgmErr))
	}
	if m.TxSendErr != 0 {
		n += 1 + sovSystem(uint64(m.TxSendErr))
	}
	if m.RxDescrAddrOob != 0 {
		n += 1 + sovSystem(uint64(m.RxDescrAddrOob))
	}
	if m.PollCount != 0 {
		n += 1 + sovSystem(uint64(m.PollCount))
	}
	if m.TxDoorbellErr != 0 {
		n += 1 + sovSystem(uint64(m.TxDoorbellErr))
	}
	return n
}

func (m *QGlobalInfo) Size() (n int) {
	var l int
	_ = l
	if m.GcPindex != 0 {
		n += 1 + sovSystem(uint64(m.GcPindex))
	}
	if m.CpuTxPagePindex != 0 {
		n += 1 + sovSystem(uint64(m.CpuTxPagePindex))
	}
	if m.CpuTxPageCindex != 0 {
		n += 1 + sovSystem(uint64(m.CpuTxPageCindex))
	}
	if m.CpuTxDescrPindex != 0 {
		n += 1 + sovSystem(uint64(m.CpuTxDescrPindex))
	}
	if m.CpuTxDescrCindex != 0 {
		n += 1 + sovSystem(uint64(m.CpuTxDescrCindex))
	}
	if m.CpuRxDprCindex != 0 {
		n += 1 + sovSystem(uint64(m.CpuRxDprCindex))
	}
	if m.CpuRxDprSemCindex != 0 {
		n += 1 + sovSystem(uint64(m.CpuRxDprSemCindex))
	}
	if m.CpuRxDprDescrFreeErr != 0 {
		n += 1 + sovSystem(uint64(m.CpuRxDprDescrFreeErr))
	}
	if m.CpuRxDprSemFreeErr != 0 {
		n += 1 + sovSystem(uint64(m.CpuRxDprSemFreeErr))
	}
	if m.CpuRxDprDescrInvalidFreeErr != 0 {
		n += 1 + sovSystem(uint64(m.CpuRxDprDescrInvalidFreeErr))
	}
	if m.CpuTxPageFullErr != 0 {
		n += 1 + sovSystem(uint64(m.CpuTxPageFullErr))
	}
	if m.CpuTxDescrFullErr != 0 {
		n += 1 + sovSystem(uint64(m.CpuTxDescrFullErr))
	}
	return n
}

func (m *QInfo) Size() (n int) {
	var l int
	_ = l
	if m.QueueId != 0 {
		n += 1 + sovSystem(uint64(m.QueueId))
	}
	if m.BaseAddr != 0 {
		n += 1 + sovSystem(uint64(m.BaseAddr))
	}
	if m.PcIndex != 0 {
		n += 1 + sovSystem(uint64(m.PcIndex))
	}
	if m.PcIndexAddr != 0 {
		n += 1 + sovSystem(uint64(m.PcIndexAddr))
	}
	if m.ValidBitValue != 0 {
		n += 1 + sovSystem(uint64(m.ValidBitValue))
	}
	if m.QueueType != 0 {
		n += 1 + sovSystem(uint64(m.QueueType))
	}
	if m.Ctr != nil {
		l = m.Ctr.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *FTEInfo) Size() (n int) {
	var l int
	_ = l
	if m.QueueId != 0 {
		n += 1 + sovSystem(uint64(m.QueueId))
	}
	if m.Glbal != nil {
		l = m.Glbal.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if len(m.Qinfo) > 0 {
		for _, e := range m.Qinfo {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *PMDStats) Size() (n int) {
	var l int
	_ = l
	if len(m.FteInfo) > 0 {
		for _, e := range m.FteInfo {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *FTEDebugStatsInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSystem(uint64(m.Type))
	}
	if m.Count != 0 {
		n += 1 + sovSystem(uint64(m.Count))
	}
	return n
}

func (m *FTEInstDebugStats) Size() (n int) {
	var l int
	_ = l
	if m.Instance != 0 {
		n += 1 + sovSystem(uint64(m.Instance))
	}
	if len(m.FteDebugStatsInfo) > 0 {
		for _, e := range m.FteDebugStatsInfo {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *FTEDebugStats) Size() (n int) {
	var l int
	_ = l
	if len(m.FteInstDebugStats) > 0 {
		for _, e := range m.FteInstDebugStats {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *FeatureProfileResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.FeatureProfile != 0 {
		n += 1 + sovSystem(uint64(m.FeatureProfile))
	}
	return n
}

func (m *MicroSegEvent) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSystem(uint64(m.Status))
	}
	return n
}

func (m *MicroSegSpec) Size() (n int) {
	var l int
	_ = l
	if m.MicroSegMode != 0 {
		n += 1 + sovSystem(uint64(m.MicroSegMode))
	}
	if m.Status != 0 {
		n += 1 + sovSystem(uint64(m.Status))
	}
	return n
}

func (m *MicroSegRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *MicroSegResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.Status != 0 {
		n += 1 + sovSystem(uint64(m.Status))
	}
	return n
}

func (m *MicroSegResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *MicroSegUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.MicroSegMode != 0 {
		n += 1 + sovSystem(uint64(m.MicroSegMode))
	}
	return n
}

func (m *MicroSegUpdateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *MicroSegUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	return n
}

func (m *MicroSegUpdateResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SysSpec) Size() (n int) {
	var l int
	_ = l
	if m.FwdMode != 0 {
		n += 1 + sovSystem(uint64(m.FwdMode))
	}
	if m.PolicyMode != 0 {
		n += 1 + sovSystem(uint64(m.PolicyMode))
	}
	return n
}

func (m *SysSpecCreateUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *SysSpecStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SysSpecResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *SysSpecGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *SysSpecGetRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovSystem(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSystem(x uint64) (n int) {
	return sovSystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApiStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiType", wireType)
			}
			m.ApiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiType |= (ApiCounter(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumApiCall", wireType)
			}
			m.NumApiCall = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumApiCall |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumApiSuccess", wireType)
			}
			m.NumApiSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumApiSuccess |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumApiFail", wireType)
			}
			m.NumApiFail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumApiFail |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEntries = append(m.ApiEntries, &ApiStatsEntry{})
			if err := m.ApiEntries[len(m.ApiEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reasons == nil {
				m.Reasons = &DropReasons{}
			}
			if err := m.Reasons.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropCount", wireType)
			}
			m.DropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EgressDropStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EgressDropStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EgressDropStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reasons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reasons == nil {
				m.Reasons = &EgressDropReasons{}
			}
			if err := m.Reasons.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropCount", wireType)
			}
			m.DropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferDropStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferDropStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferDropStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reasons", wireType)
			}
			m.Reasons = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reasons |= (BufferDropReasons(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropCount", wireType)
			}
			m.DropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferDropStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferDropStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferDropStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatsEntries = append(m.StatsEntries, &BufferDropStatsEntry{})
			if err := m.StatsEntries[len(m.StatsEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableType", wireType)
			}
			m.TableType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableType |= (TableType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableSize", wireType)
			}
			m.TableSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverflowTableSize", wireType)
			}
			m.OverflowTableSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverflowTableSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntriesInUse", wireType)
			}
			m.EntriesInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntriesInUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverflowEntriesInUse", wireType)
			}
			m.OverflowEntriesInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverflowEntriesInUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInserts", wireType)
			}
			m.NumInserts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInserts |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInsertErrors", wireType)
			}
			m.NumInsertErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInsertErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeletes", wireType)
			}
			m.NumDeletes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeletes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleteErrors", wireType)
			}
			m.NumDeleteErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeleteErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableStats = append(m.TableStats, &TableStatsEntry{})
			if err := m.TableStats[len(m.TableStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BufferStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BufferStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BufferStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SopCountIn", wireType)
			}
			m.SopCountIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SopCountIn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EopCountIn", wireType)
			}
			m.EopCountIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EopCountIn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SopCountOut", wireType)
			}
			m.SopCountOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SopCountOut |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EopCountOut", wireType)
			}
			m.EopCountOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EopCountOut |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropCounts == nil {
				m.DropCounts = &BufferDropStats{}
			}
			if err := m.DropCounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OflowFifoDropStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OflowFifoDropStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OflowFifoDropStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (OflowFifoDropType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OflowFifoDropStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OflowFifoDropStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OflowFifoDropStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = append(m.Entry, &OflowFifoDropStatsEntry{})
			if err := m.Entry[len(m.Entry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OflowFifoStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OflowFifoStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OflowFifoStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SopCountIn", wireType)
			}
			m.SopCountIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SopCountIn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EopCountIn", wireType)
			}
			m.EopCountIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EopCountIn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SopCountOut", wireType)
			}
			m.SopCountOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SopCountOut |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EopCountOut", wireType)
			}
			m.EopCountOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EopCountOut |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropCounts == nil {
				m.DropCounts = &OflowFifoDropStats{}
			}
			if err := m.DropCounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBufferPortStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBufferPortStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBufferPortStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketBufferPort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketBufferPort == nil {
				m.PacketBufferPort = &PacketBufferPort{}
			}
			if err := m.PacketBufferPort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufferStats == nil {
				m.BufferStats = &BufferStats{}
			}
			if err := m.BufferStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OflowFifoStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OflowFifoStats == nil {
				m.OflowFifoStats = &OflowFifoStats{}
			}
			if err := m.OflowFifoStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosQueueStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QosQueueStats == nil {
				m.QosQueueStats = &QosClassQueueStats{}
			}
			if err := m.QosQueueStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBufferStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBufferStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBufferStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortStats = append(m.PortStats, &PacketBufferPortStats{})
			if err := m.PortStats[len(m.PortStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			m.Request = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Request |= (SystemGetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &Stats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field InbMgmtIfId", wireType)
			}
			m.InbMgmtIfId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.InbMgmtIfId = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropStats == nil {
				m.DropStats = &DropStats{}
			}
			if err := m.DropStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressDropStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EgressDropStats == nil {
				m.EgressDropStats = &EgressDropStats{}
			}
			if err := m.EgressDropStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableStats == nil {
				m.TableStats = &TableStats{}
			}
			if err := m.TableStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketBufferStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketBufferStats == nil {
				m.PacketBufferStats = &PacketBufferStats{}
			}
			if err := m.PacketBufferStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FteStats == nil {
				m.FteStats = &FTEStats{}
			}
			if err := m.FteStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionStats == nil {
				m.SessionStats = &SessionSummaryStats{}
			}
			if err := m.SessionStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmdStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PmdStats == nil {
				m.PmdStats = &PMDStats{}
			}
			if err := m.PmdStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteDebugStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FteDebugStats == nil {
				m.FteDebugStats = &FTEDebugStats{}
			}
			if err := m.FteDebugStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropEntries = append(m.DropEntries, &DropStatsEntry{})
			if err := m.DropEntries[len(m.DropEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EgressDropStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EgressDropStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EgressDropStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropEntries = append(m.DropEntries, &EgressDropStatsEntry{})
			if err := m.DropEntries[len(m.DropEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FTEError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FTEError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FTEError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FteError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FTEFeatureStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FTEFeatureStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FTEFeatureStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropPkts", wireType)
			}
			m.DropPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropReason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropReason = append(m.DropReason, &FTEError{})
			if err := m.DropReason[len(m.DropReason)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FTEStatsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FTEStatsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FTEStatsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnPerSecond", wireType)
			}
			m.ConnPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnPerSecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowMissPkts", wireType)
			}
			m.FlowMissPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowMissPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetransmitPkts", wireType)
			}
			m.RetransmitPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetransmitPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirPkts", wireType)
			}
			m.RedirPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedirPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CflowPkts", wireType)
			}
			m.CflowPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CflowPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpClosePkts", wireType)
			}
			m.TcpClosePkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpClosePkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsProxyPkts", wireType)
			}
			m.TlsProxyPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TlsProxyPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftqReqs", wireType)
			}
			m.SoftqReqs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftqReqs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedTxPkts", wireType)
			}
			m.QueuedTxPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueuedTxPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConnPerSecond", wireType)
			}
			m.MaxConnPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxConnPerSecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsPerSecond", wireType)
			}
			m.PacketsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsPerSecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPacketsPerSecond", wireType)
			}
			m.MaxPacketsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPacketsPerSecond |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftqLen", wireType)
			}
			m.SoftqLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftqLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSessionPktDrops", wireType)
			}
			m.MaxSessionPktDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSessionPktDrops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FteErrors = append(m.FteErrors, &FTEError{})
			if err := m.FteErrors[len(m.FteErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureStats = append(m.FeatureStats, &FTEFeatureStats{})
			if err := m.FeatureStats[len(m.FeatureStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FTEStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FTEStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FTEStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteStatsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FteStatsInfo = append(m.FteStatsInfo, &FTEStatsInfo{})
			if err := m.FteStatsInfo[len(m.FteStatsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionSummaryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionSummaryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionSummaryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalActiveSessions", wireType)
			}
			m.TotalActiveSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalActiveSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Sessions", wireType)
			}
			m.L2Sessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2Sessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSessions", wireType)
			}
			m.TcpSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpEstablishedSessions", wireType)
			}
			m.TcpEstablishedSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpEstablishedSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpClosedSessions", wireType)
			}
			m.TcpClosedSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpClosedSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpSessions", wireType)
			}
			m.UdpSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UdpSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpSessions", wireType)
			}
			m.IcmpSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcmpSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropSessions", wireType)
			}
			m.DropSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgedSessions", wireType)
			}
			m.AgedSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgedSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTcpResetSent", wireType)
			}
			m.NumTcpResetSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTcpResetSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIcmpErrorSent", wireType)
			}
			m.NumIcmpErrorSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumIcmpErrorSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumConnectionTimeoutSessions", wireType)
			}
			m.NumConnectionTimeoutSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumConnectionTimeoutSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSessionCreateErrors", wireType)
			}
			m.NumSessionCreateErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSessionCreateErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpHalfOpenSessions", wireType)
			}
			m.TcpHalfOpenSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpHalfOpenSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherActiveSessions", wireType)
			}
			m.OtherActiveSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherActiveSessions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSessionDropCount", wireType)
			}
			m.TcpSessionDropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpSessionDropCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpSessionDropCount", wireType)
			}
			m.UdpSessionDropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UdpSessionDropCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpSessionDropCount", wireType)
			}
			m.IcmpSessionDropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcmpSessionDropCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSessionDropCount", wireType)
			}
			m.OtherSessionDropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherSessionDropCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DscSessionLimitDropCount", wireType)
			}
			m.DscSessionLimitDropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DscSessionLimitDropCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QCtr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QCtr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QCtr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendPkts", wireType)
			}
			m.SendPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvPkts", wireType)
			}
			m.RecvPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxSemWrErr", wireType)
			}
			m.RxSemWrErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxSemWrErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxSlotValueReadErr", wireType)
			}
			m.RxSlotValueReadErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxSlotValueReadErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDescrReadErr", wireType)
			}
			m.RxDescrReadErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDescrReadErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDescrToHdrErr", wireType)
			}
			m.RxDescrToHdrErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDescrToHdrErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDescrFreeErr", wireType)
			}
			m.RxDescrFreeErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDescrFreeErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxDescrFreeErr", wireType)
			}
			m.TxDescrFreeErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxDescrFreeErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPageAllocErr", wireType)
			}
			m.TxPageAllocErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPageAllocErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPageCopyErr", wireType)
			}
			m.TxPageCopyErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPageCopyErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxDescrPgmErr", wireType)
			}
			m.TxDescrPgmErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxDescrPgmErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSendErr", wireType)
			}
			m.TxSendErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSendErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDescrAddrOob", wireType)
			}
			m.RxDescrAddrOob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDescrAddrOob |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollCount", wireType)
			}
			m.PollCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxDoorbellErr", wireType)
			}
			m.TxDoorbellErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxDoorbellErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QGlobalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QGlobalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QGlobalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcPindex", wireType)
			}
			m.GcPindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GcPindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTxPagePindex", wireType)
			}
			m.CpuTxPagePindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuTxPagePindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTxPageCindex", wireType)
			}
			m.CpuTxPageCindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuTxPageCindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTxDescrPindex", wireType)
			}
			m.CpuTxDescrPindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuTxDescrPindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTxDescrCindex", wireType)
			}
			m.CpuTxDescrCindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuTxDescrCindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuRxDprCindex", wireType)
			}
			m.CpuRxDprCindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuRxDprCindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuRxDprSemCindex", wireType)
			}
			m.CpuRxDprSemCindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuRxDprSemCindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuRxDprDescrFreeErr", wireType)
			}
			m.CpuRxDprDescrFreeErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuRxDprDescrFreeErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuRxDprSemFreeErr", wireType)
			}
			m.CpuRxDprSemFreeErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuRxDprSemFreeErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuRxDprDescrInvalidFreeErr", wireType)
			}
			m.CpuRxDprDescrInvalidFreeErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuRxDprDescrInvalidFreeErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTxPageFullErr", wireType)
			}
			m.CpuTxPageFullErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuTxPageFullErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuTxDescrFullErr", wireType)
			}
			m.CpuTxDescrFullErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuTxDescrFullErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			m.QueueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAddr", wireType)
			}
			m.BaseAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcIndex", wireType)
			}
			m.PcIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PcIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcIndexAddr", wireType)
			}
			m.PcIndexAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PcIndexAddr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidBitValue", wireType)
			}
			m.ValidBitValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidBitValue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueType", wireType)
			}
			m.QueueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ctr == nil {
				m.Ctr = &QCtr{}
			}
			if err := m.Ctr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FTEInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FTEInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FTEInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			m.QueueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glbal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Glbal == nil {
				m.Glbal = &QGlobalInfo{}
			}
			if err := m.Glbal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qinfo = append(m.Qinfo, &QInfo{})
			if err := m.Qinfo[len(m.Qinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PMDStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PMDStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PMDStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FteInfo = append(m.FteInfo, &FTEInfo{})
			if err := m.FteInfo[len(m.FteInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FTEDebugStatsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FTEDebugStatsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FTEDebugStatsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FTEDebugStatsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FTEInstDebugStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FTEInstDebugStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FTEInstDebugStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			m.Instance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Instance |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteDebugStatsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FteDebugStatsInfo = append(m.FteDebugStatsInfo, &FTEDebugStatsInfo{})
			if err := m.FteDebugStatsInfo[len(m.FteDebugStatsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FTEDebugStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FTEDebugStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FTEDebugStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteInstDebugStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FteInstDebugStats = append(m.FteInstDebugStats, &FTEInstDebugStats{})
			if err := m.FteInstDebugStats[len(m.FteInstDebugStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureProfile", wireType)
			}
			m.FeatureProfile = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeatureProfile |= (FeatureProfile(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroSegEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroSegEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroSegEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (MicroSegStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroSegSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroSegSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroSegSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MicroSegMode", wireType)
			}
			m.MicroSegMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MicroSegMode |= (MicroSegMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (MicroSegStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroSegRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroSegRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroSegRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MicroSegSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroSegResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroSegResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroSegResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (MicroSegStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroSegResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroSegResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroSegResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MicroSegResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroSegUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroSegUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroSegUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MicroSegMode", wireType)
			}
			m.MicroSegMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MicroSegMode |= (MicroSegMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroSegUpdateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroSegUpdateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroSegUpdateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MicroSegUpdateRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroSegUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroSegUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroSegUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroSegUpdateResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroSegUpdateResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroSegUpdateResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MicroSegUpdateResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdMode", wireType)
			}
			m.FwdMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FwdMode |= (ForwardMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyMode", wireType)
			}
			m.PolicyMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyMode |= (PolicyMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysSpecCreateUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysSpecCreateUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysSpecCreateUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SysSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysSpecStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysSpecStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysSpecStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SysSpecStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysSpecGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysSpecGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysSpecGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SysSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysSpecGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysSpecGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysSpecGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSystem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSystem
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSystem
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSystem(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSystem = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSystem   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("system.proto", fileDescriptorSystem) }

var fileDescriptorSystem = []byte{
	// 4892 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5b, 0x49, 0x93, 0xdb, 0xd6,
	0x76, 0x36, 0x7b, 0xe6, 0xe1, 0x04, 0xa2, 0x27, 0xaa, 0x5b, 0x23, 0xe5, 0x27, 0xd9, 0x6d, 0x49,
	0x96, 0x5b, 0xd6, 0x93, 0xed, 0xe7, 0x09, 0x0d, 0x82, 0x2d, 0x44, 0x24, 0x01, 0x01, 0xa0, 0xd4,
	0x72, 0x2a, 0x85, 0xb0, 0xc9, 0xcb, 0x16, 0xca, 0x24, 0x01, 0x01, 0xa0, 0xdc, 0xed, 0x45, 0xaa,
	0xb2, 0x48, 0x5e, 0x55, 0x56, 0x79, 0xbf, 0x20, 0xab, 0x54, 0x7e, 0x44, 0x36, 0xc9, 0x22, 0x55,
	0x59, 0xbe, 0xaa, 0x54, 0xf2, 0x76, 0xa9, 0x94, 0x77, 0xc9, 0x32, 0xbf, 0x20, 0x75, 0x27, 0x4c,
	0x24, 0x25, 0xf9, 0x95, 0x17, 0x59, 0x89, 0x3c, 0xdf, 0x77, 0x86, 0x7b, 0xee, 0x39, 0x77, 0x6a,
	0x0a, 0x8a, 0xc1, 0x45, 0x10, 0xa2, 0xf1, 0x3d, 0xcf, 0x77, 0x43, 0x57, 0x5c, 0x0e, 0x2e, 0x82,
	0xbd, 0x42, 0x78, 0xe1, 0xa1, 0x80, 0x4a, 0xf6, 0xf2, 0xaf, 0x5c, 0xf6, 0xb1, 0xfe, 0x0f, 0x39,
	0x28, 0x49, 0x9e, 0x63, 0x86, 0xbd, 0x30, 0x50, 0x26, 0xa1, 0x7f, 0x21, 0x1e, 0xc0, 0x46, 0xcf,
	0x73, 0x6c, 0xcc, 0xaf, 0xe5, 0xae, 0xe7, 0x3e, 0x28, 0x1f, 0x56, 0xee, 0x05, 0x17, 0xc1, 0x3d,
	0xc9, 0x73, 0x64, 0x77, 0x3a, 0x09, 0x91, 0x6f, 0xac, 0xf7, 0x3c, 0xc7, 0xba, 0xf0, 0x90, 0x78,
	0x1d, 0x8a, 0x93, 0xe9, 0xd8, 0xc6, 0xfc, 0x7e, 0x6f, 0x34, 0xaa, 0x2d, 0x5d, 0xcf, 0x7d, 0x50,
	0x32, 0x60, 0x32, 0x1d, 0x63, 0x76, 0x6f, 0x34, 0x12, 0x6f, 0x41, 0x85, 0x33, 0x82, 0x69, 0xbf,
	0x8f, 0x82, 0xa0, 0xb6, 0x4c, 0x48, 0x25, 0x4a, 0x32, 0xa9, 0x30, 0x69, 0x69, 0xd8, 0x73, 0x46,
	0xb5, 0x95, 0xa4, 0xa5, 0x66, 0xcf, 0x19, 0xd5, 0x8f, 0x41, 0xe0, 0x81, 0x1a, 0x28, 0xf0, 0xdc,
	0x49, 0x80, 0xc4, 0x07, 0x50, 0xc0, 0x1a, 0x68, 0x12, 0xfa, 0x0e, 0x0a, 0x6a, 0xb9, 0xeb, 0xcb,
	0x1f, 0x14, 0x0e, 0x45, 0x1e, 0x6e, 0x3c, 0x28, 0x03, 0x7a, 0x9e, 0xa3, 0x50, 0x56, 0xfd, 0xcf,
	0xa0, 0xdc, 0xf0, 0x5d, 0x2f, 0x31, 0xe4, 0x3b, 0xb0, 0xee, 0xa3, 0x5e, 0xe0, 0x4e, 0x02, 0x32,
	0x62, 0x6c, 0x82, 0xa6, 0x0b, 0xf3, 0x0c, 0x8a, 0x18, 0x9c, 0x22, 0x5e, 0x01, 0x18, 0xf8, 0xae,
	0x67, 0xf7, 0x71, 0x36, 0xc8, 0x90, 0x57, 0x8c, 0x3c, 0x96, 0x90, 0xf4, 0xd4, 0x1d, 0xd8, 0x52,
	0xce, 0x7c, 0x14, 0x04, 0x19, 0x27, 0x87, 0x59, 0x27, 0x35, 0xe6, 0x24, 0x66, 0xff, 0x5c, 0x57,
	0x67, 0xb0, 0x75, 0x34, 0x1d, 0x0e, 0x91, 0x9f, 0x71, 0x75, 0x3f, 0xed, 0xaa, 0x7c, 0xb8, 0x43,
	0x52, 0x12, 0x73, 0xdf, 0xc1, 0x51, 0x29, 0xe9, 0xe8, 0x29, 0x54, 0x32, 0x8e, 0xc4, 0xaf, 0xa1,
	0x14, 0xe0, 0x0f, 0x99, 0xe4, 0x5f, 0xca, 0x78, 0x4a, 0xcc, 0x41, 0x31, 0xe0, 0x9f, 0xf1, 0x2c,
	0xfc, 0xfd, 0x32, 0x54, 0xac, 0xde, 0xe9, 0x08, 0x25, 0xe2, 0xbe, 0x0b, 0x10, 0x62, 0x51, 0xb2,
	0xf8, 0xca, 0xc4, 0x20, 0x61, 0xe2, 0x92, 0x33, 0xf2, 0x21, 0xff, 0x88, 0x83, 0xa6, 0xf4, 0x49,
	0x6f, 0x8c, 0x48, 0xd0, 0x79, 0x06, 0x77, 0x7a, 0xe3, 0x04, 0x1c, 0x38, 0x3f, 0x22, 0x56, 0x75,
	0x14, 0x36, 0x9d, 0x1f, 0x91, 0x78, 0x0f, 0x36, 0xdd, 0xd7, 0xc8, 0x1f, 0x8e, 0xdc, 0x1f, 0xec,
	0x04, 0x8f, 0x16, 0x5e, 0x95, 0x43, 0x56, 0xc4, 0x7f, 0x1f, 0xca, 0x6c, 0xa8, 0xb6, 0x33, 0xb1,
	0xa7, 0x01, 0xaa, 0xad, 0x12, 0x6a, 0x91, 0x49, 0xd5, 0x49, 0x37, 0x40, 0xe2, 0x43, 0xd8, 0x8d,
	0xac, 0x66, 0xe8, 0x6b, 0x84, 0xbe, 0xc5, 0x61, 0x25, 0xa9, 0x76, 0x0d, 0x0a, 0xb8, 0xfc, 0x9d,
	0x49, 0x80, 0xfc, 0x30, 0xa8, 0xad, 0x47, 0xd5, 0xaf, 0x52, 0x89, 0x78, 0x00, 0xd5, 0x98, 0x60,
	0x23, 0xdf, 0x77, 0xfd, 0xa0, 0xb6, 0x41, 0x68, 0x95, 0x88, 0xa6, 0x10, 0x31, 0x37, 0x36, 0x40,
	0x23, 0x14, 0xa2, 0xa0, 0x96, 0x8f, 0x8c, 0x35, 0xa8, 0x84, 0x1b, 0xa3, 0x04, 0x6e, 0x0c, 0x22,
	0x63, 0x94, 0x46, 0x8d, 0xd5, 0x65, 0x80, 0x78, 0x9a, 0xc4, 0x87, 0x50, 0x60, 0xb9, 0xc2, 0x5f,
	0xd9, 0x9c, 0x6f, 0xc5, 0x53, 0x94, 0x6c, 0xb9, 0x30, 0x12, 0xd4, 0x7f, 0x9f, 0x83, 0x02, 0xad,
	0x09, 0x6a, 0xe6, 0x3a, 0x14, 0x03, 0x5e, 0x6d, 0xb6, 0x33, 0x21, 0x53, 0x5d, 0x32, 0x20, 0x60,
	0xf5, 0xa6, 0x4e, 0x30, 0x03, 0x25, 0x19, 0x6c, 0x65, 0x41, 0x31, 0xa3, 0x0e, 0xa5, 0xd8, 0x86,
	0x3b, 0x0d, 0xd9, 0x0c, 0x17, 0xb8, 0x11, 0x6d, 0x1a, 0x62, 0x0e, 0x4a, 0x71, 0xe8, 0xec, 0x16,
	0x50, 0x82, 0xf3, 0x10, 0x0a, 0x71, 0xe9, 0x07, 0x64, 0x52, 0xf9, 0x90, 0x32, 0x65, 0x6c, 0x40,
	0xd4, 0x11, 0x41, 0xfd, 0x4f, 0x61, 0x57, 0xc3, 0xd3, 0xd8, 0x74, 0x86, 0x6e, 0xa6, 0xfd, 0x0e,
	0x60, 0x25, 0x51, 0xc0, 0xb4, 0xf7, 0x52, 0x5c, 0x52, 0xc8, 0x84, 0x23, 0x6e, 0xc1, 0x6a, 0xb2,
	0xe7, 0xe8, 0x97, 0xfa, 0x63, 0x10, 0x67, 0x8d, 0x8b, 0x87, 0xb0, 0x8a, 0x4b, 0xea, 0x82, 0xa5,
	0xfd, 0xf2, 0xac, 0xe1, 0x44, 0xfa, 0x29, 0xb5, 0xfe, 0x1f, 0x39, 0x28, 0x47, 0x94, 0xff, 0x7f,
	0xc9, 0xff, 0x6c, 0x5e, 0xf2, 0x77, 0x17, 0x0c, 0x2c, 0x95, 0xff, 0xdf, 0x2d, 0xc1, 0xb6, 0xde,
	0xeb, 0x7f, 0x8f, 0x42, 0x3a, 0x4b, 0xba, 0xeb, 0x87, 0x74, 0x7c, 0x32, 0x88, 0x1e, 0x01, 0xec,
	0x53, 0x82, 0xd8, 0x9e, 0xeb, 0x87, 0x6c, 0xcd, 0xdd, 0xbe, 0x87, 0xb7, 0xbe, 0xac, 0x9e, 0x21,
	0x78, 0x19, 0x89, 0xf8, 0x00, 0x8a, 0x4c, 0x9b, 0x56, 0xfa, 0x12, 0x51, 0x17, 0x12, 0x65, 0x41,
	0x43, 0x2a, 0x9c, 0x26, 0xca, 0xfa, 0x2b, 0x10, 0x5c, 0xd2, 0xf9, 0x43, 0x67, 0xe8, 0x32, 0xc5,
	0x65, 0xa2, 0xb8, 0x99, 0x1e, 0x12, 0xd5, 0x2d, 0xbb, 0xe9, 0x89, 0xf9, 0x06, 0x2a, 0xaf, 0xdc,
	0xc0, 0x7e, 0x35, 0x45, 0x53, 0xde, 0x60, 0x2b, 0x2c, 0x21, 0x38, 0xea, 0xa7, 0x6e, 0x20, 0x8f,
	0x7a, 0x41, 0xf0, 0x14, 0xe3, 0xd4, 0x42, 0xe9, 0x95, 0x9b, 0xf8, 0x5a, 0xef, 0x40, 0x35, 0x39,
	0x34, 0x6a, 0xf5, 0x73, 0x00, 0x9c, 0x80, 0x54, 0xc7, 0xee, 0x91, 0x70, 0xe6, 0xa6, 0xcf, 0xc8,
	0x7b, 0xfc, 0x63, 0x7d, 0x03, 0xd6, 0xf0, 0x87, 0x69, 0x50, 0xff, 0x16, 0x04, 0x93, 0x9c, 0x29,
	0x8e, 0x51, 0x68, 0xa0, 0x57, 0x53, 0x14, 0x84, 0x74, 0xd7, 0x24, 0x1f, 0x59, 0xa5, 0xd3, 0x8d,
	0x37, 0xe2, 0x91, 0x2a, 0xe7, 0x94, 0xfa, 0x3f, 0xe7, 0xa0, 0x4c, 0xa1, 0x68, 0xf7, 0xfe, 0x18,
	0x80, 0x9c, 0x0b, 0x88, 0x0b, 0x66, 0x43, 0x60, 0x9b, 0x22, 0xdb, 0xbe, 0xa7, 0x81, 0x91, 0xef,
	0xf1, 0x8f, 0xe2, 0x75, 0x58, 0x4d, 0xce, 0x06, 0x50, 0x7f, 0x24, 0x6a, 0x0a, 0x88, 0x37, 0x61,
	0x8d, 0x99, 0xa3, 0x79, 0x2f, 0x44, 0x94, 0x69, 0x60, 0x30, 0x48, 0x14, 0x61, 0x65, 0x3a, 0x75,
	0x06, 0x24, 0xb9, 0x79, 0x83, 0x7c, 0x16, 0x6f, 0x42, 0xd9, 0x99, 0x9c, 0xda, 0xe3, 0xb3, 0x71,
	0x68, 0x3b, 0x43, 0xdb, 0x19, 0x90, 0x5a, 0x5c, 0x33, 0x0a, 0xce, 0xe4, 0xb4, 0x7d, 0x36, 0x0e,
	0xd5, 0xa1, 0x3a, 0xa8, 0xff, 0xcb, 0x32, 0xac, 0xd2, 0xa4, 0xde, 0x65, 0xfb, 0x25, 0x4f, 0x2a,
	0xf6, 0x45, 0x77, 0xaa, 0xb8, 0x5a, 0xc9, 0xfe, 0x49, 0xe9, 0xdf, 0x42, 0x15, 0x91, 0x5d, 0xde,
	0x4e, 0x68, 0x2d, 0x25, 0x56, 0x9a, 0xcc, 0x89, 0xc1, 0xa8, 0xa0, 0xb4, 0x40, 0xbc, 0x9f, 0x5e,
	0x78, 0xe9, 0xe8, 0x2a, 0x99, 0x85, 0x37, 0xb9, 0xe6, 0x8a, 0x4d, 0xd8, 0x4c, 0xb7, 0x41, 0xb2,
	0xa2, 0x76, 0x66, 0x0a, 0x80, 0x1a, 0xa8, 0x7a, 0x33, 0xf5, 0x73, 0x00, 0xf9, 0x61, 0xc8, 0xfd,
	0xd2, 0x06, 0x2d, 0x11, 0xed, 0xa6, 0xa5, 0x50, 0xa5, 0x8d, 0x61, 0x88, 0x78, 0x03, 0x94, 0x02,
	0x14, 0x04, 0x8e, 0x3b, 0x61, 0xfc, 0x35, 0x76, 0xd2, 0x21, 0xb3, 0x40, 0x11, 0x73, 0x3a, 0x1e,
	0xf7, 0xfc, 0x0b, 0xaa, 0x5a, 0x64, 0xf4, 0xc8, 0x95, 0x37, 0x1e, 0x30, 0xd5, 0xf5, 0x84, 0x2b,
	0xbd, 0xdd, 0x60, 0xae, 0xbc, 0xf1, 0x80, 0x72, 0xbf, 0x80, 0x0a, 0x0e, 0x6b, 0x80, 0x4e, 0xa7,
	0x67, 0x4c, 0x63, 0x83, 0x9d, 0xdd, 0x58, 0x70, 0x0d, 0x0c, 0xb1, 0x3e, 0x19, 0x86, 0x28, 0xfe,
	0x5a, 0x97, 0x21, 0x1f, 0x67, 0xf6, 0xd7, 0x50, 0x24, 0x93, 0x92, 0x3e, 0xc7, 0x6c, 0xa6, 0x27,
	0x93, 0xae, 0xa9, 0x64, 0xad, 0xe2, 0x07, 0x18, 0x0d, 0x2a, 0x99, 0x59, 0x13, 0xbf, 0x9c, 0x6b,
	0xea, 0xd2, 0xbc, 0x19, 0x9e, 0x63, 0xf0, 0x2b, 0xd8, 0x68, 0x5a, 0x0a, 0xd9, 0x76, 0xc5, 0x7d,
	0x9a, 0x74, 0xb2, 0x35, 0x93, 0xf2, 0xca, 0x93, 0x2c, 0x53, 0x30, 0xb5, 0x67, 0xac, 0xf0, 0x3d,
	0xe3, 0x2f, 0x73, 0x50, 0x69, 0x5a, 0x4a, 0x13, 0xf5, 0xc2, 0xa9, 0xcf, 0xe6, 0xe3, 0x06, 0x14,
	0x87, 0xf4, 0x3b, 0x3d, 0x23, 0x51, 0x4b, 0x05, 0x26, 0x23, 0xa7, 0xa4, 0x7d, 0x20, 0x75, 0x6a,
	0x7b, 0xdf, 0xb3, 0x92, 0x5c, 0x31, 0x36, 0xb0, 0x40, 0xff, 0x3e, 0x0c, 0xc4, 0x7b, 0x6c, 0x79,
	0xa6, 0xc7, 0xc4, 0xda, 0x32, 0x19, 0x4f, 0x34, 0xfb, 0x24, 0x1a, 0xba, 0x28, 0xd3, 0x03, 0x65,
	0xfd, 0xef, 0x56, 0xa1, 0xc8, 0xcb, 0x42, 0x9d, 0x0c, 0x5d, 0x7c, 0xfc, 0xef, 0xbb, 0x93, 0x89,
	0xed, 0xe1, 0xfa, 0x43, 0x7d, 0x77, 0x32, 0x20, 0x31, 0xac, 0x18, 0x25, 0x2c, 0xd6, 0x91, 0x6f,
	0x12, 0x21, 0x3e, 0x5c, 0x91, 0x85, 0x73, 0xec, 0x04, 0x41, 0x32, 0x94, 0x22, 0x96, 0xb6, 0x9d,
	0x20, 0x20, 0xe1, 0xdc, 0x86, 0x8a, 0x8f, 0x42, 0xbf, 0x37, 0x09, 0xc6, 0x4e, 0x48, 0x69, 0xcb,
	0x84, 0x56, 0x8e, 0xc5, 0x84, 0x78, 0x05, 0xc0, 0x47, 0x03, 0xc7, 0xa7, 0x9c, 0x15, 0x7a, 0x6e,
	0x26, 0x12, 0x0e, 0xf7, 0x89, 0x3b, 0x02, 0xaf, 0x52, 0x98, 0x48, 0x08, 0xfc, 0x3e, 0x94, 0xc3,
	0xbe, 0x67, 0xf7, 0x47, 0x6e, 0x80, 0x28, 0x65, 0x8d, 0x06, 0x13, 0xf6, 0x3d, 0x19, 0x0b, 0x23,
	0xd6, 0x28, 0xb0, 0x3d, 0xdf, 0x3d, 0xbf, 0xa0, 0xac, 0x75, 0xc6, 0x1a, 0x05, 0x3a, 0x16, 0x72,
	0x57, 0x81, 0x3b, 0x0c, 0x5f, 0xd9, 0x3e, 0x7a, 0x45, 0x2b, 0x74, 0xc5, 0xc8, 0x13, 0x89, 0x81,
	0x5e, 0x11, 0x23, 0x64, 0xb9, 0x1f, 0xd8, 0xe1, 0x39, 0x35, 0x92, 0xa7, 0x46, 0xa8, 0xd4, 0x3a,
	0x27, 0x46, 0xee, 0xc2, 0xe6, 0xb8, 0x77, 0x6e, 0x67, 0x33, 0x09, 0x84, 0x2a, 0x8c, 0x7b, 0xe7,
	0x72, 0x2a, 0x99, 0x77, 0xf8, 0x06, 0x18, 0x24, 0xd9, 0x05, 0xca, 0x66, 0x48, 0xcc, 0x7e, 0x00,
	0x3b, 0xd8, 0xf8, 0x1c, 0x8d, 0x22, 0xd1, 0xc0, 0xae, 0xf5, 0xac, 0xd2, 0x3e, 0xd0, 0x41, 0xd8,
	0x23, 0x34, 0xa9, 0x95, 0x68, 0xd5, 0x10, 0x41, 0x0b, 0x4d, 0xc4, 0x4f, 0x60, 0x1b, 0x5b, 0xe4,
	0x2b, 0x81, 0xf7, 0x7d, 0x48, 0x96, 0xbd, 0xa0, 0x56, 0x26, 0x44, 0x71, 0xdc, 0x3b, 0x67, 0x6b,
	0x81, 0xfe, 0x7d, 0x88, 0x3b, 0x22, 0x10, 0xef, 0x00, 0x0c, 0xe3, 0xa3, 0x68, 0x65, 0x5e, 0x9d,
	0xe5, 0x79, 0xfd, 0xe3, 0x2d, 0xad, 0xc4, 0xcb, 0x9a, 0x76, 0xbe, 0x90, 0x38, 0x87, 0x66, 0x7a,
	0xc0, 0xe0, 0x1d, 0x40, 0x5b, 0x3f, 0x24, 0x4d, 0x46, 0xbb, 0xe3, 0x67, 0xef, 0x3f, 0x8f, 0xa0,
	0x1c, 0x2d, 0x85, 0xb6, 0x33, 0x19, 0xba, 0xb5, 0x25, 0xe2, 0xb8, 0x9a, 0x5a, 0x0f, 0x71, 0xe1,
	0x1b, 0x45, 0xbe, 0x26, 0xe2, 0x6f, 0xf5, 0xff, 0x59, 0x87, 0xcd, 0x39, 0xcb, 0x9f, 0x78, 0x08,
	0xdb, 0xa1, 0x1b, 0xf6, 0x46, 0x76, 0xaf, 0x1f, 0x3a, 0xaf, 0x11, 0x4f, 0x59, 0xc0, 0x9a, 0x64,
	0x93, 0x80, 0x12, 0xc1, 0x98, 0x3a, 0x39, 0xdd, 0x8f, 0x0e, 0x63, 0x26, 0xed, 0x13, 0x18, 0x1d,
	0x46, 0x84, 0x1b, 0x80, 0x0b, 0x35, 0x66, 0xd0, 0x16, 0x29, 0x84, 0x7d, 0x2f, 0xa2, 0x7c, 0x06,
	0x35, 0x4c, 0x41, 0x01, 0xde, 0x2f, 0x9c, 0xe0, 0x25, 0x1a, 0xc4, 0x74, 0xda, 0x2d, 0x3b, 0x61,
	0xdf, 0x53, 0x62, 0x38, 0xd2, 0xbc, 0x07, 0x9b, 0x51, 0x6f, 0x24, 0x94, 0x68, 0x0f, 0x55, 0x79,
	0x83, 0x0c, 0x92, 0xc1, 0x4c, 0x07, 0x89, 0x60, 0x68, 0x27, 0x15, 0xa6, 0x83, 0x38, 0x98, 0x9b,
	0x50, 0x72, 0xfa, 0xe3, 0x04, 0x87, 0xf5, 0x11, 0x16, 0x26, 0x49, 0x74, 0xeb, 0xe4, 0x24, 0xda,
	0x4a, 0x64, 0xbd, 0x4d, 0x92, 0x7a, 0x67, 0xc9, 0xb0, 0x58, 0x33, 0x61, 0x61, 0x44, 0xfa, 0x08,
	0x44, 0x7c, 0xf9, 0xc1, 0xa3, 0xf0, 0x51, 0x80, 0x42, 0x3b, 0x40, 0x93, 0x90, 0xf5, 0x12, 0xbe,
	0xfd, 0x58, 0x7d, 0xcf, 0xc0, 0x72, 0x13, 0x4d, 0x42, 0xdc, 0x79, 0xe4, 0xda, 0x85, 0xe3, 0x23,
	0xc5, 0x49, 0xd9, 0xac, 0x97, 0xf0, 0xc5, 0xab, 0x3f, 0xf6, 0x48, 0x55, 0x12, 0xba, 0x02, 0xd7,
	0x30, 0x1d, 0x37, 0x2a, 0xea, 0x87, 0xb8, 0xf8, 0x43, 0x67, 0x8c, 0xdc, 0x69, 0x18, 0x87, 0x44,
	0x9b, 0xea, 0xf2, 0x64, 0x3a, 0x96, 0x23, 0x96, 0x45, 0x49, 0x51, 0x88, 0x9f, 0xc3, 0x25, 0x6c,
	0x86, 0x37, 0x50, 0xdf, 0x47, 0xbd, 0xb8, 0x39, 0x68, 0xb7, 0xed, 0x4c, 0xa6, 0x63, 0xc6, 0x97,
	0x09, 0xcc, 0x5a, 0xe3, 0x01, 0xe0, 0x99, 0xb3, 0x5f, 0xf6, 0x46, 0x43, 0xdb, 0xf5, 0xd0, 0x24,
	0x76, 0x5c, 0x66, 0x25, 0xd5, 0xf7, 0x1e, 0xf7, 0x46, 0x43, 0xcd, 0x43, 0x93, 0xc8, 0xdf, 0x21,
	0x6c, 0xbb, 0xe1, 0x4b, 0xe4, 0xcf, 0x94, 0x61, 0x85, 0xea, 0x10, 0x30, 0x53, 0x86, 0xcc, 0x11,
	0x8f, 0x31, 0xf1, 0x7a, 0x20, 0x44, 0x8e, 0x18, 0xb9, 0xc1, 0x4f, 0xed, 0x58, 0x29, 0x51, 0x0d,
	0x49, 0xa5, 0x2a, 0x55, 0x8a, 0xeb, 0x22, 0x56, 0x7a, 0x08, 0xbb, 0xc9, 0xfa, 0x48, 0x6a, 0x89,
	0x44, 0x6b, 0x2b, 0x51, 0x29, 0xb1, 0xda, 0x23, 0xa8, 0xd1, 0x41, 0xcd, 0xd1, 0xdb, 0x24, 0x7a,
	0x74, 0xd0, 0x33, 0x8a, 0x5f, 0xc3, 0xe5, 0x41, 0xd0, 0x8f, 0xd4, 0x46, 0x0e, 0xde, 0x6c, 0x12,
	0xca, 0x5b, 0x44, 0xb9, 0x36, 0x08, 0xfa, 0x4c, 0xb5, 0x85, 0x19, 0x91, 0x7e, 0xfd, 0xdf, 0x57,
	0x60, 0xe5, 0xa9, 0x1c, 0x92, 0x4d, 0x3c, 0x40, 0x93, 0x01, 0x5d, 0xd7, 0x73, 0x6c, 0x91, 0x44,
	0x93, 0x01, 0x59, 0xd3, 0xf7, 0x21, 0xef, 0xa3, 0xfe, 0xeb, 0xd4, 0xbe, 0x8b, 0x05, 0x04, 0xbc,
	0x01, 0x25, 0x1f, 0x2f, 0xa0, 0x63, 0xfb, 0x07, 0x1f, 0xcf, 0x3b, 0xbb, 0x5e, 0x81, 0x7f, 0x6e,
	0xa2, 0xf1, 0x73, 0x5f, 0xf1, 0x7d, 0xf1, 0x10, 0x76, 0x30, 0x65, 0xe4, 0x86, 0xf6, 0xeb, 0xde,
	0x68, 0x8a, 0xf0, 0x1e, 0x3d, 0x20, 0x5c, 0x7a, 0xcd, 0x12, 0xfd, 0x73, 0x73, 0xe4, 0x86, 0xcf,
	0x30, 0x66, 0xa0, 0xde, 0x00, 0xeb, 0x7c, 0x08, 0x55, 0xff, 0xdc, 0x1e, 0xa0, 0xa0, 0xef, 0xc7,
	0x74, 0xfa, 0x8a, 0x51, 0xf6, 0xcf, 0x1b, 0x58, 0xce, 0xa9, 0x77, 0x60, 0x33, 0xa2, 0x86, 0xae,
	0xfd, 0x72, 0x40, 0xe3, 0xa0, 0x6f, 0x18, 0x15, 0x46, 0xb6, 0xdc, 0xc7, 0x03, 0x3f, 0x6b, 0x78,
	0xe8, 0x23, 0x52, 0xab, 0xec, 0x11, 0x83, 0x1b, 0x6e, 0xfa, 0x08, 0x31, 0x6a, 0x38, 0x43, 0xa5,
	0x0f, 0x19, 0xe5, 0x70, 0x1e, 0xd5, 0xeb, 0x9d, 0x21, 0xbb, 0x37, 0x1a, 0xb9, 0x7d, 0x42, 0xcd,
	0x73, 0xaa, 0xde, 0x3b, 0x43, 0x12, 0x16, 0x63, 0xea, 0x6d, 0x10, 0x38, 0xb5, 0xef, 0x7a, 0x17,
	0x84, 0x49, 0x1f, 0x34, 0x4a, 0x94, 0x29, 0xbb, 0xde, 0x45, 0x4c, 0xa4, 0xee, 0xbd, 0xb3, 0x31,
	0x21, 0x16, 0x38, 0x91, 0x78, 0xd7, 0xcf, 0xc6, 0x98, 0x78, 0x15, 0x0a, 0x21, 0x9e, 0x82, 0x09,
	0xcd, 0x52, 0x91, 0x3d, 0x1f, 0x9d, 0x9b, 0x68, 0x32, 0x93, 0xcb, 0xde, 0x60, 0xe0, 0xdb, 0xae,
	0x7b, 0x4a, 0x7a, 0x33, 0x1e, 0xb2, 0x34, 0x18, 0xf8, 0x9a, 0x7b, 0x8a, 0xcf, 0x00, 0x9e, 0x3b,
	0x1a, 0xb1, 0xf2, 0xa1, 0x7d, 0x98, 0xc7, 0x12, 0x5a, 0x6f, 0xb7, 0xa0, 0x82, 0x43, 0x72, 0x5d,
	0xff, 0x14, 0x8d, 0x46, 0xc4, 0x5b, 0x25, 0x8a, 0x88, 0x49, 0x15, 0xdf, 0xaf, 0xff, 0x61, 0x05,
	0x0a, 0x4f, 0x8f, 0x47, 0xee, 0x69, 0x6f, 0x44, 0xce, 0x56, 0xfb, 0x90, 0x3f, 0xeb, 0xdb, 0x9e,
	0x33, 0x19, 0xa0, 0x73, 0x76, 0x89, 0xdf, 0x38, 0xeb, 0xeb, 0xe4, 0x3b, 0x5e, 0xe5, 0xfa, 0xde,
	0xd4, 0xe6, 0x49, 0x61, 0x2c, 0x7a, 0x91, 0xaf, 0xf4, 0xbd, 0xa9, 0x45, 0xb2, 0x32, 0x9f, 0xdc,
	0xa7, 0xe4, 0xe5, 0x0c, 0x59, 0xa6, 0xe4, 0xbb, 0xb0, 0xc9, 0xc8, 0x2c, 0x8b, 0x94, 0x4d, 0xab,
	0x4e, 0x20, 0x6c, 0x9a, 0xc7, 0xf9, 0x74, 0x66, 0x7c, 0x35, 0x4b, 0x67, 0xd6, 0x3f, 0x84, 0x2a,
	0xa6, 0xe3, 0xd4, 0x7a, 0x11, 0x99, 0x56, 0x5d, 0xb9, 0xef, 0x4d, 0x8d, 0xf3, 0x86, 0xc7, 0xa9,
	0xf7, 0x61, 0x3b, 0x41, 0xc5, 0xcd, 0xc2, 0xe8, 0xb4, 0xf0, 0xaa, 0x9c, 0x6e, 0xa2, 0x31, 0xd3,
	0x78, 0x04, 0x97, 0x12, 0x1a, 0x73, 0x6b, 0x70, 0x8b, 0x6b, 0xa5, 0x2a, 0xf1, 0x01, 0xec, 0x66,
	0x5c, 0x45, 0x6a, 0xb4, 0x1e, 0xc5, 0x84, 0x33, 0xae, 0xd4, 0x84, 0x1b, 0x33, 0xde, 0x9c, 0xc9,
	0xeb, 0xde, 0xc8, 0x19, 0xc4, 0xea, 0xb4, 0x48, 0xf7, 0x53, 0x5e, 0x55, 0x4a, 0xe2, 0x76, 0xee,
	0xc1, 0x56, 0x72, 0x76, 0x86, 0x53, 0x56, 0x24, 0x85, 0x44, 0x0a, 0xf1, 0xfc, 0x34, 0xa7, 0xa4,
	0x4e, 0x78, 0x5e, 0xe2, 0x2e, 0xe3, 0x0a, 0xc5, 0x28, 0x2f, 0x2c, 0xe7, 0x4c, 0xa3, 0xfe, 0x53,
	0x0e, 0x56, 0x9f, 0x92, 0x9a, 0xba, 0x04, 0x1b, 0xf4, 0xf9, 0xc1, 0x19, 0xb0, 0x92, 0x5a, 0x27,
	0xdf, 0x55, 0x72, 0xe4, 0x3b, 0xed, 0x05, 0x88, 0x14, 0x3b, 0x5f, 0xb0, 0xb0, 0x00, 0x57, 0x39,
	0xd6, 0xf3, 0xfa, 0x76, 0xb2, 0x6e, 0xd6, 0xbd, 0xbe, 0x4a, 0x92, 0x5e, 0x87, 0x12, 0x87, 0xa8,
	0x2e, 0x7b, 0x06, 0x62, 0x38, 0x51, 0xbf, 0x05, 0x15, 0x9a, 0x97, 0x53, 0x87, 0x2d, 0x67, 0xec,
	0x44, 0x51, 0x22, 0xe2, 0x23, 0x87, 0xae, 0x63, 0xb8, 0x93, 0x68, 0x78, 0xe4, 0x7d, 0x8d, 0x96,
	0x45, 0x9e, 0x48, 0xc8, 0x83, 0xf0, 0x3e, 0x2c, 0xf7, 0x43, 0x9f, 0xdd, 0x1c, 0xf3, 0xe4, 0x50,
	0x86, 0x17, 0x62, 0x03, 0x4b, 0xeb, 0x13, 0x58, 0x6f, 0x5a, 0xca, 0xdb, 0x46, 0x79, 0x0b, 0x56,
	0xcf, 0x46, 0xa7, 0xbd, 0x51, 0xea, 0xc1, 0x27, 0xd1, 0x75, 0x06, 0x85, 0xc5, 0xeb, 0xb0, 0xfa,
	0x8a, 0x9c, 0x00, 0xe9, 0x9d, 0x88, 0x3e, 0x45, 0x3c, 0xa5, 0x0c, 0x02, 0xd4, 0x1f, 0xc0, 0x06,
	0xbf, 0xb6, 0x8a, 0xb7, 0x01, 0xdf, 0xde, 0xe8, 0x91, 0x91, 0x5e, 0x0a, 0x8b, 0xfc, 0xc8, 0x48,
	0x54, 0xd6, 0x87, 0x21, 0x22, 0x07, 0xc5, 0x2e, 0x54, 0x53, 0x37, 0x57, 0x12, 0xee, 0xbc, 0xf7,
	0xc4, 0x14, 0x6b, 0xd1, 0x7b, 0x62, 0x74, 0x37, 0x3c, 0x27, 0x66, 0xd5, 0x49, 0x10, 0xc6, 0x4a,
	0xe2, 0x1e, 0x6c, 0x38, 0x93, 0x20, 0xec, 0x4d, 0xfa, 0x88, 0x2f, 0x1f, 0xfc, 0xbb, 0x78, 0x0c,
	0x5b, 0x99, 0xdb, 0x75, 0xf2, 0xbc, 0x3b, 0x27, 0x04, 0x32, 0x8c, 0x6a, 0xea, 0x9a, 0x4d, 0x06,
	0x74, 0x02, 0xa5, 0x14, 0x8f, 0x5b, 0xc6, 0x9e, 0x52, 0x97, 0xf7, 0x8c, 0xe5, 0x74, 0xac, 0xc4,
	0x72, 0x5a, 0x54, 0xff, 0x6d, 0x0e, 0x76, 0xd8, 0x41, 0x5f, 0xf7, 0xdd, 0xa1, 0x33, 0x42, 0x7f,
	0xfc, 0xc3, 0xd2, 0x97, 0x50, 0xe1, 0x17, 0x0a, 0x8f, 0xda, 0x22, 0xf9, 0x2b, 0xb3, 0x67, 0x80,
	0x8c, 0x9b, 0xf2, 0x30, 0xf5, 0xbd, 0xfe, 0x25, 0x94, 0xda, 0x4e, 0xdf, 0x77, 0x4d, 0x74, 0xa6,
	0xbc, 0xc6, 0xc7, 0xc0, 0x8f, 0xa2, 0x57, 0xa8, 0x5c, 0xc2, 0x0a, 0xe7, 0xa4, 0x5f, 0xa3, 0xea,
	0x21, 0x14, 0x23, 0xc4, 0x43, 0x7d, 0x7c, 0xc9, 0x18, 0xe3, 0xef, 0x76, 0x80, 0xce, 0xec, 0xb1,
	0x3b, 0xe0, 0xf3, 0x5e, 0x4d, 0x19, 0x69, 0xbb, 0x03, 0x64, 0x14, 0xc7, 0x89, 0x6f, 0x09, 0xaf,
	0x4b, 0x6f, 0xf7, 0x2a, 0x81, 0xc8, 0x11, 0xf6, 0x9e, 0xd7, 0x0e, 0xce, 0xc4, 0x8f, 0x92, 0x4f,
	0x7a, 0xf1, 0xcd, 0x26, 0x19, 0x5f, 0xfc, 0xa2, 0xf7, 0xdb, 0x1c, 0x08, 0xb1, 0x0d, 0x96, 0xfa,
	0xe6, 0xbb, 0xa4, 0xfe, 0x68, 0xfb, 0x7f, 0xff, 0xf3, 0x5a, 0xf5, 0x35, 0x9a, 0x38, 0x7d, 0xf4,
	0x45, 0x4c, 0x4f, 0xce, 0xc8, 0xcf, 0x1a, 0xcc, 0x63, 0xd8, 0xcc, 0x06, 0x82, 0x47, 0xf3, 0x09,
	0x6c, 0xf8, 0xec, 0x2b, 0x1b, 0xce, 0x76, 0xca, 0x0a, 0xe7, 0x1a, 0x11, 0xad, 0xae, 0xc3, 0x36,
	0x47, 0xbb, 0xde, 0xa0, 0x17, 0x22, 0xfe, 0xd8, 0xf9, 0xc7, 0xce, 0x4a, 0x5d, 0x87, 0xda, 0x5c,
	0x8b, 0x38, 0xc0, 0x4f, 0xb3, 0xe9, 0xde, 0x4b, 0x59, 0x4b, 0xf1, 0xe3, 0xbc, 0xff, 0x39, 0xec,
	0x64, 0x19, 0xbf, 0x6c, 0xf2, 0xeb, 0x16, 0x5c, 0x9a, 0xef, 0x01, 0x07, 0xfd, 0x68, 0x26, 0xab,
	0xfb, 0x73, 0xa3, 0x9e, 0xc9, 0xed, 0x4b, 0x58, 0x37, 0x2f, 0x02, 0x52, 0xe3, 0x1f, 0xc1, 0xc6,
	0xf0, 0x87, 0x41, 0x32, 0x8f, 0x74, 0xa1, 0x6d, 0xba, 0xfe, 0x0f, 0x3d, 0x7f, 0x40, 0xd2, 0xb8,
	0x3e, 0xfc, 0x81, 0x7c, 0x10, 0xef, 0x43, 0xc1, 0x73, 0x47, 0x4e, 0xff, 0x82, 0xf2, 0x97, 0x12,
	0x7f, 0x93, 0xd6, 0x89, 0x9c, 0xd0, 0xc1, 0x8b, 0x3e, 0xd7, 0xff, 0x3a, 0x07, 0x7b, 0xcc, 0x15,
	0xbd, 0x1c, 0xa5, 0xe7, 0xf2, 0x97, 0xaa, 0xd1, 0xeb, 0xb0, 0x12, 0x78, 0xa8, 0xcf, 0xb6, 0x8a,
	0x22, 0x7f, 0xfd, 0x26, 0x5d, 0x42, 0x90, 0x7a, 0x05, 0x4a, 0x4c, 0xc0, 0x32, 0xfb, 0x57, 0x39,
	0xa8, 0x70, 0xca, 0x2f, 0xdd, 0x32, 0x07, 0xa9, 0x96, 0x29, 0xc4, 0xcf, 0xf1, 0xb1, 0xff, 0xa8,
	0x63, 0xfe, 0x02, 0x44, 0x06, 0x90, 0x07, 0xfd, 0x5f, 0x38, 0x92, 0xb7, 0x27, 0x66, 0x13, 0xaa,
	0x49, 0xff, 0x64, 0x5e, 0x0e, 0x7e, 0xb7, 0x03, 0x10, 0xff, 0xca, 0x40, 0xdc, 0x02, 0x41, 0xd2,
	0x55, 0x5b, 0xd6, 0xba, 0x1d, 0x4b, 0x31, 0xec, 0x8e, 0xd6, 0x51, 0x84, 0xf7, 0xc4, 0x3d, 0xd8,
	0x49, 0x4a, 0x9f, 0x19, 0x4d, 0x5b, 0x36, 0x14, 0xc9, 0x52, 0x84, 0xdc, 0x3c, 0xac, 0xab, 0x37,
	0x30, 0xb6, 0x34, 0x0f, 0x6b, 0x28, 0x2d, 0xc5, 0x52, 0x84, 0x65, 0x71, 0x17, 0x36, 0xb3, 0xd8,
	0xb1, 0x62, 0x09, 0x2b, 0x59, 0x25, 0x49, 0x6e, 0x71, 0x67, 0xab, 0xf3, 0x30, 0xe6, 0x6c, 0x6d,
	0x1e, 0xc6, 0x9c, 0xad, 0x67, 0x9d, 0x61, 0x0c, 0x3b, 0xdb, 0x10, 0x2f, 0x43, 0x2d, 0x09, 0xc8,
	0x7a, 0x57, 0x3e, 0xe2, 0xee, 0xf2, 0xf3, 0x51, 0xe6, 0x10, 0xe6, 0xa3, 0xcc, 0x65, 0x41, 0xbc,
	0x04, 0xdb, 0xb3, 0x28, 0x76, 0x5a, 0x14, 0xaf, 0xc3, 0xe5, 0x14, 0x64, 0xbc, 0xd0, 0x2d, 0x0d,
	0x4b, 0xd4, 0xce, 0x33, 0xed, 0x89, 0x22, 0x94, 0xe6, 0x33, 0x9e, 0x28, 0x2f, 0x78, 0x68, 0xe5,
	0xc5, 0x0c, 0x16, 0x5e, 0x65, 0x31, 0x83, 0x85, 0x28, 0x88, 0x57, 0x61, 0x6f, 0x3e, 0xc3, 0x50,
	0xa4, 0x86, 0x50, 0xcd, 0x0e, 0xb0, 0xa1, 0x98, 0xb2, 0x21, 0x69, 0x34, 0x75, 0xa2, 0x78, 0x0d,
	0xf6, 0x93, 0xa8, 0xd2, 0x69, 0xe8, 0x9a, 0xda, 0xb1, 0x78, 0x88, 0x9b, 0x0b, 0x09, 0x2c, 0xc2,
	0xad, 0x85, 0x04, 0x16, 0xe0, 0x76, 0x36, 0x80, 0x88, 0x80, 0x03, 0xd8, 0x11, 0xef, 0xc1, 0x41,
	0x12, 0x3d, 0x6e, 0x5a, 0xb6, 0x72, 0x22, 0xc9, 0x96, 0xdd, 0x96, 0x2c, 0xf9, 0xb1, 0xad, 0x1b,
	0x5a, 0x53, 0x6d, 0x29, 0x3c, 0x9e, 0x5d, 0xf1, 0x11, 0x3c, 0xc8, 0xf2, 0x1f, 0x2b, 0x52, 0x43,
	0x31, 0x6c, 0xcb, 0x90, 0x3a, 0xa6, 0xae, 0x99, 0xaa, 0xa5, 0x6a, 0x9d, 0xac, 0x62, 0x4d, 0xfc,
	0x04, 0xee, 0xbe, 0xc9, 0x51, 0xb3, 0xa5, 0x3d, 0xb7, 0x95, 0x8e, 0x65, 0x44, 0xd3, 0x73, 0x49,
	0xac, 0xc3, 0xd5, 0x94, 0x8a, 0x62, 0xe9, 0x86, 0x76, 0x6c, 0x48, 0x6d, 0x5b, 0x6a, 0x34, 0x0c,
	0xc5, 0x34, 0x85, 0xbd, 0xec, 0x04, 0x49, 0xad, 0x96, 0x26, 0x3f, 0x3e, 0x8a, 0x19, 0xfb, 0x33,
	0x53, 0xa8, 0x75, 0x9a, 0xea, 0x71, 0xd7, 0x50, 0x5a, 0x6a, 0xd3, 0x3e, 0x6a, 0x34, 0x85, 0xcb,
	0xd9, 0x29, 0x54, 0x75, 0x53, 0x91, 0xe3, 0x0a, 0xbe, 0xb2, 0x08, 0x67, 0x53, 0x70, 0x75, 0x11,
	0xce, 0x66, 0xe0, 0x9a, 0xb8, 0x0f, 0xbb, 0xf3, 0x70, 0x3c, 0x01, 0xd7, 0xb3, 0xe1, 0xb5, 0x0e,
	0x4d, 0xe5, 0xb8, 0xad, 0xc4, 0x25, 0x70, 0x63, 0x31, 0x83, 0x05, 0x50, 0x5f, 0xcc, 0x60, 0x21,
	0xdc, 0x14, 0xaf, 0xc0, 0xa5, 0xf9, 0x0c, 0x1c, 0xc4, 0xfb, 0xd9, 0x4c, 0xb7, 0x3e, 0x6d, 0x1d,
	0x99, 0x8a, 0xf1, 0x4c, 0x95, 0xa3, 0x09, 0xfc, 0x95, 0xf8, 0x2b, 0xb8, 0x91, 0xe4, 0xb4, 0xbb,
	0x2d, 0x4b, 0x95, 0x25, 0xd3, 0x4a, 0x4d, 0xda, 0xad, 0xb7, 0xd0, 0x58, 0xc8, 0xb7, 0xdf, 0x42,
	0x63, 0x71, 0x7f, 0x90, 0x0d, 0x2c, 0x43, 0xc3, 0xc1, 0x7f, 0x28, 0xde, 0x82, 0x7a, 0x92, 0x63,
	0x2a, 0x72, 0xd7, 0x50, 0xad, 0x17, 0x99, 0x0a, 0x3c, 0x78, 0x1b, 0x8f, 0x85, 0xf6, 0xd1, 0xdb,
	0x78, 0x2c, 0xb6, 0x3b, 0xe2, 0x4d, 0xb8, 0xf6, 0x26, 0x1e, 0x0e, 0xee, 0xae, 0x78, 0x00, 0xb7,
	0xe6, 0x91, 0x8e, 0x0d, 0xad, 0xab, 0xeb, 0x5a, 0x4b, 0x95, 0xa3, 0xd4, 0xdd, 0x7b, 0x17, 0x2e,
	0x0b, 0xf2, 0xe3, 0x77, 0xe1, 0xb2, 0x40, 0xef, 0x8b, 0xb7, 0xe1, 0xe6, 0xdb, 0xb8, 0x38, 0xd8,
	0x4f, 0xc4, 0xf7, 0xe1, 0xfa, 0x42, 0x22, 0x0f, 0xf3, 0xf0, 0xcd, 0x2c, 0x16, 0xe0, 0x83, 0x37,
	0xb3, 0x58, 0x68, 0x9f, 0x8a, 0x37, 0xe0, 0xca, 0x62, 0x16, 0x0e, 0xea, 0x61, 0xb6, 0xb8, 0x1b,
	0x9a, 0x99, 0xce, 0xdb, 0xaf, 0x17, 0x33, 0x58, 0x30, 0x8f, 0x16, 0x33, 0x58, 0x20, 0x9f, 0x65,
	0x1b, 0x24, 0x66, 0xe0, 0x20, 0x3e, 0xcf, 0xae, 0xb2, 0xba, 0xa1, 0x9d, 0xbc, 0x48, 0xac, 0x11,
	0x5f, 0x2c, 0x24, 0xb0, 0x10, 0x7e, 0xb3, 0x90, 0xc0, 0x22, 0xf8, 0x32, 0xbb, 0x4e, 0x47, 0x04,
	0x1c, 0xc0, 0x57, 0x73, 0xd5, 0x8d, 0x38, 0x80, 0xaf, 0x17, 0x12, 0x58, 0x00, 0xdf, 0x2c, 0x24,
	0xb0, 0x00, 0xbe, 0x9d, 0x1b, 0x80, 0xc1, 0x02, 0x90, 0xb2, 0xea, 0x4f, 0x35, 0x53, 0x6e, 0x49,
	0xa6, 0xc9, 0x03, 0x38, 0x5a, 0x48, 0x60, 0x01, 0xc8, 0x0b, 0x09, 0x2c, 0x80, 0x46, 0x36, 0x80,
	0x88, 0x80, 0x03, 0x50, 0xb2, 0xab, 0xa8, 0xac, 0xe9, 0x51, 0xb5, 0x35, 0xc5, 0x1a, 0x6c, 0xcd,
	0x80, 0x58, 0xed, 0x38, 0x3b, 0xb1, 0x86, 0xf4, 0x3c, 0x31, 0x6f, 0x8f, 0x17, 0xc0, 0xcc, 0xae,
	0xba, 0x00, 0x66, 0x11, 0xff, 0x49, 0xf6, 0xb8, 0xc4, 0x60, 0xec, 0xf8, 0x49, 0x76, 0x34, 0x96,
	0xac, 0xc7, 0x7e, 0x5b, 0xf3, 0x51, 0xe6, 0xb6, 0x3d, 0x1f, 0x65, 0x5e, 0x3b, 0xd9, 0x53, 0x11,
	0x45, 0xb1, 0x53, 0x6d, 0x46, 0xb1, 0x65, 0xc6, 0x4e, 0xf5, 0xf9, 0x28, 0x73, 0xfa, 0x74, 0x3e,
	0xca, 0x9c, 0x1a, 0x33, 0x4e, 0x09, 0x8a, 0x9d, 0x9a, 0xe2, 0x26, 0x54, 0x52, 0x8b, 0xb4, 0x74,
	0x22, 0x58, 0x07, 0xff, 0xb6, 0x04, 0xd5, 0x99, 0xdf, 0x6d, 0x8a, 0x22, 0x94, 0xd5, 0x8e, 0x65,
	0xa8, 0x1d, 0x53, 0x95, 0xed, 0x86, 0xa1, 0xe9, 0xc2, 0x7b, 0x62, 0x09, 0xf2, 0x0d, 0xd5, 0x94,
	0x25, 0xa3, 0xa1, 0x34, 0x84, 0x9c, 0x58, 0x84, 0x0d, 0xa9, 0xd1, 0x56, 0x2d, 0x4b, 0x69, 0x08,
	0x4b, 0xe2, 0x36, 0x54, 0xb5, 0xae, 0x65, 0x6b, 0x4d, 0x5b, 0x56, 0x5a, 0x2d, 0x93, 0xea, 0x90,
	0x83, 0xef, 0x8c, 0xd8, 0x3e, 0x14, 0x56, 0xc4, 0x1d, 0x10, 0x39, 0x60, 0x28, 0x0d, 0xd5, 0xa2,
	0x0a, 0xab, 0x38, 0x46, 0xcb, 0xe8, 0x76, 0x64, 0x89, 0x9c, 0x4e, 0x88, 0x70, 0x0d, 0x93, 0x75,
	0xcd, 0xb0, 0xec, 0x86, 0x6a, 0x4a, 0x47, 0x2d, 0xa5, 0x41, 0xe5, 0xeb, 0x78, 0xac, 0xb2, 0xa6,
	0xbf, 0xb0, 0x2d, 0x0d, 0x1f, 0x39, 0x6d, 0x4b, 0x52, 0x5b, 0x14, 0xda, 0xc0, 0x03, 0x30, 0x75,
	0xa9, 0x93, 0x90, 0xe5, 0x71, 0x65, 0xb6, 0xd5, 0x8e, 0x6d, 0xaa, 0xdf, 0x29, 0xf6, 0x33, 0x55,
	0x6b, 0x25, 0x7c, 0x00, 0xf6, 0xa1, 0x74, 0x9e, 0x76, 0x95, 0xae, 0x62, 0x2b, 0x86, 0xa1, 0x19,
	0x54, 0x5e, 0xc0, 0x03, 0x53, 0x3b, 0xcf, 0xa4, 0x96, 0xda, 0xb0, 0x69, 0x0c, 0x58, 0x5c, 0xc4,
	0x05, 0xc7, 0xc5, 0x5a, 0xd7, 0xd2, 0xbb, 0x96, 0x4d, 0x75, 0x09, 0x5c, 0x3a, 0xf8, 0x11, 0xf2,
	0xd1, 0x2f, 0x4a, 0xc9, 0x98, 0x70, 0xdc, 0xb6, 0xf5, 0x42, 0x57, 0xf8, 0x35, 0x63, 0x0b, 0x84,
	0x84, 0x50, 0xed, 0x34, 0x94, 0x13, 0x21, 0x97, 0xa1, 0x3e, 0x96, 0xcc, 0xc7, 0xc2, 0x12, 0x6e,
	0x9a, 0x8c, 0xd0, 0xb6, 0x64, 0xa9, 0x2d, 0x2c, 0x67, 0xe8, 0x44, 0xb8, 0x72, 0xf0, 0x8f, 0x39,
	0xa8, 0xce, 0xfc, 0x1a, 0x10, 0x27, 0x44, 0x93, 0xe5, 0xae, 0x2e, 0x75, 0xf0, 0x72, 0x4a, 0x67,
	0x74, 0x17, 0x36, 0x95, 0xb6, 0x62, 0x1c, 0x2b, 0x58, 0x66, 0x5a, 0x9a, 0x4e, 0x81, 0x1c, 0x5e,
	0xee, 0x9f, 0x1b, 0xaa, 0xa5, 0xd8, 0x47, 0xdd, 0x66, 0x93, 0xdc, 0x21, 0x9e, 0xd8, 0x4d, 0xb5,
	0x85, 0x2f, 0x20, 0x94, 0xb2, 0x84, 0x0f, 0x53, 0xb3, 0x94, 0x6e, 0xab, 0xc5, 0x67, 0x7e, 0x0f,
	0x76, 0x52, 0x78, 0x8c, 0x91, 0x5b, 0x8f, 0xac, 0x75, 0x2c, 0x43, 0x6b, 0xd9, 0x4d, 0xb5, 0xa9,
	0x25, 0xb0, 0xd5, 0x83, 0xbf, 0x59, 0x22, 0x57, 0xda, 0xf8, 0x17, 0x5e, 0x78, 0xf8, 0xe6, 0x0b,
	0xd3, 0x52, 0xda, 0xb8, 0x8c, 0xed, 0xa6, 0xa5, 0xd8, 0xa6, 0x25, 0x59, 0xa6, 0xf0, 0x1e, 0x9e,
	0x84, 0x0c, 0x62, 0x9d, 0x18, 0x27, 0x0c, 0x26, 0xb7, 0xb5, 0x04, 0x4c, 0x13, 0x45, 0xb1, 0x25,
	0x3c, 0xf4, 0x04, 0xa6, 0x1f, 0x31, 0x60, 0x19, 0xd7, 0x54, 0x02, 0x20, 0xf5, 0x4a, 0xa1, 0x95,
	0x4c, 0x20, 0x52, 0xab, 0xc5, 0x90, 0xd5, 0x8c, 0x27, 0xb5, 0x73, 0x64, 0xb7, 0x8f, 0xdb, 0x96,
	0xad, 0x36, 0x85, 0x35, 0xdc, 0xae, 0x99, 0x20, 0x1b, 0x47, 0xc7, 0x4c, 0x73, 0x3d, 0x83, 0x62,
	0x9b, 0x31, 0xba, 0x71, 0xf0, 0x4f, 0xcb, 0x99, 0xe7, 0x5a, 0x9e, 0x10, 0x5d, 0x92, 0x9f, 0xe0,
	0xb8, 0x25, 0xc3, 0x54, 0x3b, 0xc7, 0xb4, 0x62, 0xe9, 0xdd, 0xd5, 0x54, 0x4c, 0x13, 0x97, 0xb5,
	0xd4, 0xc2, 0x17, 0x9b, 0x17, 0xb6, 0x72, 0xa2, 0x9a, 0x24, 0x1b, 0xd7, 0x60, 0xbf, 0x2d, 0x9d,
	0xf0, 0x5b, 0x00, 0x5d, 0x4d, 0x4c, 0x5b, 0x39, 0x91, 0x15, 0xa5, 0x41, 0x5a, 0xf8, 0x36, 0xdc,
	0xe4, 0x25, 0xad, 0x74, 0x64, 0x49, 0xb7, 0xdb, 0x5a, 0x03, 0x57, 0x66, 0x5a, 0x85, 0xa6, 0x08,
	0xb7, 0x1b, 0x8b, 0xc1, 0x38, 0xb1, 0x9b, 0x92, 0xda, 0xea, 0x1a, 0x8a, 0xb0, 0x82, 0xd3, 0xca,
	0xc4, 0xa6, 0xd2, 0x69, 0x44, 0xc0, 0x2a, 0x06, 0xc8, 0xd5, 0xa1, 0xa5, 0x69, 0x4f, 0xba, 0x7a,
	0x04, 0xac, 0xe1, 0x93, 0x63, 0xb7, 0x63, 0xe2, 0x03, 0x8e, 0x61, 0x29, 0x0d, 0x6e, 0x94, 0xd1,
	0x70, 0x59, 0xd3, 0x3e, 0x6f, 0x69, 0xc7, 0xc7, 0x8a, 0x11, 0x15, 0x13, 0x53, 0xdf, 0xc0, 0x41,
	0xa7, 0x21, 0x53, 0x31, 0x54, 0xa9, 0xa5, 0x7e, 0x47, 0x9b, 0x9b, 0x13, 0xf3, 0xc9, 0xd4, 0xd0,
	0x75, 0x36, 0xc2, 0x20, 0x89, 0xd1, 0x41, 0x46, 0x58, 0x21, 0x89, 0xd1, 0x35, 0x36, 0xc2, 0x8a,
	0xa2, 0x00, 0x45, 0x9e, 0xb1, 0xc6, 0x33, 0xa3, 0x29, 0x94, 0x92, 0x12, 0x13, 0x4b, 0xca, 0x07,
	0x7f, 0x9b, 0x83, 0x32, 0x7b, 0x75, 0x72, 0x26, 0xf4, 0x1d, 0xb5, 0x06, 0x5b, 0x4d, 0xcd, 0x78,
	0x2e, 0x19, 0x0d, 0x3c, 0x77, 0x24, 0xcb, 0x6c, 0x51, 0xd8, 0x87, 0xdd, 0x2c, 0x42, 0xb6, 0x56,
	0x55, 0x16, 0x72, 0xf8, 0x70, 0x94, 0x05, 0xcd, 0xb6, 0x64, 0x58, 0xb6, 0xf9, 0x5c, 0xb5, 0x64,
	0xbc, 0x50, 0xfc, 0x0a, 0x6e, 0xcc, 0x67, 0x3c, 0xd6, 0x4c, 0xcb, 0xd6, 0xd5, 0x4e, 0x47, 0x69,
	0x08, 0xcb, 0x07, 0x7f, 0xc0, 0x21, 0xa5, 0x5e, 0x98, 0x49, 0x48, 0x8a, 0x64, 0x75, 0x0d, 0x25,
	0xba, 0x11, 0xb2, 0x90, 0xe6, 0x20, 0x47, 0x92, 0xa9, 0x08, 0x39, 0x12, 0x6c, 0x06, 0x31, 0x2d,
	0xcd, 0x90, 0x8e, 0x15, 0x61, 0x09, 0x4f, 0xd9, 0x0c, 0x68, 0xa8, 0xda, 0x33, 0x61, 0x19, 0x17,
	0x62, 0x16, 0x7a, 0xa6, 0x1a, 0x56, 0x17, 0xcf, 0x9a, 0xd2, 0x10, 0x56, 0xe6, 0xe9, 0x92, 0x43,
	0x8e, 0xb0, 0x8a, 0x3b, 0x3e, 0x0b, 0x35, 0x94, 0x67, 0x4a, 0x4b, 0xd3, 0x15, 0x43, 0x58, 0x3b,
	0xf8, 0x4d, 0xfc, 0xd4, 0x4d, 0x32, 0xbd, 0x0d, 0xd5, 0xb6, 0x2a, 0x1b, 0x9a, 0x6d, 0x2a, 0xc7,
	0x7c, 0xf7, 0xa0, 0x6b, 0x6f, 0x2c, 0x56, 0x3a, 0x44, 0x9a, 0x3b, 0x18, 0x40, 0x39, 0xfd, 0xfc,
	0x8b, 0x03, 0x89, 0x79, 0xb8, 0x27, 0xbb, 0x26, 0x4f, 0xcb, 0x65, 0xa8, 0xcd, 0x40, 0x66, 0x57,
	0x96, 0xf1, 0x5d, 0x36, 0x37, 0x57, 0x11, 0x97, 0x8d, 0xb0, 0x74, 0xd0, 0x87, 0x42, 0xe2, 0x11,
	0x52, 0xac, 0x42, 0xa9, 0xf9, 0xbc, 0x91, 0x2a, 0x02, 0x9c, 0x71, 0x2e, 0xa2, 0x97, 0x75, 0xc9,
	0x50, 0x3a, 0x96, 0x90, 0xc3, 0xc3, 0x89, 0x10, 0x62, 0xdf, 0x54, 0x8e, 0x85, 0x25, 0x5c, 0x74,
	0x91, 0x58, 0xea, 0xbc, 0x10, 0x96, 0x0f, 0x5e, 0x01, 0xc4, 0x2f, 0x97, 0x78, 0xb8, 0xec, 0x90,
	0x9c, 0x71, 0x93, 0x94, 0xe2, 0x49, 0xb5, 0x3b, 0x8a, 0x45, 0xd7, 0xcd, 0x24, 0x42, 0xfa, 0x56,
	0x7a, 0x2e, 0x19, 0x0a, 0x5d, 0x37, 0x93, 0x98, 0xd2, 0x69, 0x6a, 0x86, 0xac, 0x08, 0xcb, 0x87,
	0xff, 0xbd, 0x06, 0x6b, 0x74, 0xdd, 0x16, 0x3f, 0x85, 0x82, 0xa4, 0xab, 0x64, 0xbd, 0x3a, 0x46,
	0xa1, 0x58, 0xe4, 0xff, 0x0d, 0x65, 0xec, 0x85, 0x17, 0x7b, 0xdb, 0xa9, 0xff, 0x3c, 0xc3, 0x5f,
	0x06, 0xeb, 0xef, 0x89, 0x9f, 0x43, 0x3e, 0x5a, 0xf7, 0xc5, 0xed, 0xf4, 0x2f, 0x7d, 0xd9, 0x03,
	0xde, 0xde, 0x66, 0x42, 0x9c, 0x50, 0xfd, 0x94, 0x6f, 0x19, 0xdd, 0xae, 0xda, 0x98, 0x75, 0xb9,
	0x40, 0xeb, 0x21, 0x6c, 0xcb, 0x23, 0xd4, 0xf3, 0xd5, 0x49, 0xe6, 0x57, 0x96, 0x69, 0xed, 0xd4,
	0x37, 0xe2, 0x6c, 0x8b, 0xa8, 0x29, 0x3f, 0x4b, 0xeb, 0x3e, 0x08, 0x44, 0x4b, 0x3f, 0x7d, 0x57,
	0x8d, 0xbb, 0x50, 0x22, 0x1a, 0x4d, 0xfe, 0xdb, 0xd7, 0x37, 0xd3, 0x3f, 0x81, 0x2a, 0xa7, 0x5b,
	0xe7, 0xc6, 0xf9, 0xbb, 0xa8, 0x7c, 0x0c, 0x15, 0xa2, 0x92, 0xf8, 0xef, 0x17, 0x6f, 0x56, 0xb8,
	0x03, 0x45, 0x36, 0x88, 0x77, 0x61, 0x7f, 0x0b, 0xd5, 0xf4, 0x2a, 0x33, 0x3b, 0x33, 0xfb, 0xf3,
	0xfe, 0xfa, 0x15, 0xcf, 0xd0, 0xd3, 0xb8, 0x23, 0xe9, 0x03, 0xbb, 0x78, 0x65, 0xf1, 0xdf, 0x2f,
	0xda, 0xc1, 0xd9, 0xde, 0xd5, 0x37, 0xfc, 0xa1, 0xa0, 0x1d, 0x9c, 0xd5, 0xdf, 0x13, 0x9f, 0xc0,
	0x56, 0xba, 0xc9, 0x99, 0xe1, 0xdd, 0xcc, 0x1f, 0x6e, 0x22, 0x93, 0xb5, 0xb9, 0x7f, 0xd1, 0xa1,
	0xc6, 0x1e, 0x46, 0xaf, 0xef, 0xcc, 0x4a, 0xea, 0x25, 0x7a, 0x6f, 0x2b, 0xf5, 0x2e, 0x1d, 0x0f,
	0xeb, 0x1b, 0x80, 0xf8, 0x6d, 0x5a, 0xdc, 0x49, 0xb2, 0x12, 0xb5, 0xbe, 0x3b, 0x23, 0xe7, 0x06,
	0x8e, 0x76, 0xfe, 0xf5, 0xa7, 0xab, 0xb9, 0xdf, 0xff, 0x74, 0x35, 0xf7, 0x5f, 0x3f, 0x5d, 0xcd,
	0x7d, 0xb7, 0xf1, 0xb2, 0x37, 0x22, 0xff, 0xd7, 0xee, 0x74, 0x8d, 0xfc, 0xf3, 0xe0, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xb7, 0xd7, 0x20, 0x17, 0x9f, 0x37, 0x00, 0x00,
}
