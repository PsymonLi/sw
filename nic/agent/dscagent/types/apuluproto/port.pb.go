// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: port.proto

package pds

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/nic/apollo/agent/gen/pds/meta/pds"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ------------------------------------------------------------------------------
// MacStats consists of MgmtMacStatsType and count
// ------------------------------------------------------------------------------
type MgmtMacStatsType int32

const (
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_OK          MgmtMacStatsType = 0
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_ALL         MgmtMacStatsType = 1
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_BAD_FCS     MgmtMacStatsType = 2
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_BAD_ALL     MgmtMacStatsType = 3
	MgmtMacStatsType_MGMT_MAC_OCTETS_RX_OK          MgmtMacStatsType = 4
	MgmtMacStatsType_MGMT_MAC_OCTETS_RX_ALL         MgmtMacStatsType = 5
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_UNICAST     MgmtMacStatsType = 6
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_MULTICAST   MgmtMacStatsType = 7
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_BROADCAST   MgmtMacStatsType = 8
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_PAUSE       MgmtMacStatsType = 9
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_BAD_LENGTH  MgmtMacStatsType = 10
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_UNDERSIZED  MgmtMacStatsType = 11
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_OVERSIZED   MgmtMacStatsType = 12
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_FRAGMENTS   MgmtMacStatsType = 13
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_JABBER      MgmtMacStatsType = 14
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_64B         MgmtMacStatsType = 15
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_65B_127B    MgmtMacStatsType = 16
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_128B_255B   MgmtMacStatsType = 17
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_256B_511B   MgmtMacStatsType = 18
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_512B_1023B  MgmtMacStatsType = 19
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_1024B_1518B MgmtMacStatsType = 20
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_GT_1518B    MgmtMacStatsType = 21
	MgmtMacStatsType_MGMT_MAC_FRAMES_RX_FIFO_FULL   MgmtMacStatsType = 22
	MgmtMacStatsType_MGMT_MAC_FRAMES_TX_OK          MgmtMacStatsType = 23
	MgmtMacStatsType_MGMT_MAC_FRAMES_TX_ALL         MgmtMacStatsType = 24
	MgmtMacStatsType_MGMT_MAC_FRAMES_TX_BAD         MgmtMacStatsType = 25
	MgmtMacStatsType_MGMT_MAC_OCTETS_TX_OK          MgmtMacStatsType = 26
	MgmtMacStatsType_MGMT_MAC_OCTETS_TX_TOTAL       MgmtMacStatsType = 27
	MgmtMacStatsType_MGMT_MAC_FRAMES_TX_UNICAST     MgmtMacStatsType = 28
	MgmtMacStatsType_MGMT_MAC_FRAMES_TX_MULTICAST   MgmtMacStatsType = 29
	MgmtMacStatsType_MGMT_MAC_FRAMES_TX_BROADCAST   MgmtMacStatsType = 30
	MgmtMacStatsType_MGMT_MAC_FRAMES_TX_PAUSE       MgmtMacStatsType = 31
)

var MgmtMacStatsType_name = map[int32]string{
	0:  "MGMT_MAC_FRAMES_RX_OK",
	1:  "MGMT_MAC_FRAMES_RX_ALL",
	2:  "MGMT_MAC_FRAMES_RX_BAD_FCS",
	3:  "MGMT_MAC_FRAMES_RX_BAD_ALL",
	4:  "MGMT_MAC_OCTETS_RX_OK",
	5:  "MGMT_MAC_OCTETS_RX_ALL",
	6:  "MGMT_MAC_FRAMES_RX_UNICAST",
	7:  "MGMT_MAC_FRAMES_RX_MULTICAST",
	8:  "MGMT_MAC_FRAMES_RX_BROADCAST",
	9:  "MGMT_MAC_FRAMES_RX_PAUSE",
	10: "MGMT_MAC_FRAMES_RX_BAD_LENGTH",
	11: "MGMT_MAC_FRAMES_RX_UNDERSIZED",
	12: "MGMT_MAC_FRAMES_RX_OVERSIZED",
	13: "MGMT_MAC_FRAMES_RX_FRAGMENTS",
	14: "MGMT_MAC_FRAMES_RX_JABBER",
	15: "MGMT_MAC_FRAMES_RX_64B",
	16: "MGMT_MAC_FRAMES_RX_65B_127B",
	17: "MGMT_MAC_FRAMES_RX_128B_255B",
	18: "MGMT_MAC_FRAMES_RX_256B_511B",
	19: "MGMT_MAC_FRAMES_RX_512B_1023B",
	20: "MGMT_MAC_FRAMES_RX_1024B_1518B",
	21: "MGMT_MAC_FRAMES_RX_GT_1518B",
	22: "MGMT_MAC_FRAMES_RX_FIFO_FULL",
	23: "MGMT_MAC_FRAMES_TX_OK",
	24: "MGMT_MAC_FRAMES_TX_ALL",
	25: "MGMT_MAC_FRAMES_TX_BAD",
	26: "MGMT_MAC_OCTETS_TX_OK",
	27: "MGMT_MAC_OCTETS_TX_TOTAL",
	28: "MGMT_MAC_FRAMES_TX_UNICAST",
	29: "MGMT_MAC_FRAMES_TX_MULTICAST",
	30: "MGMT_MAC_FRAMES_TX_BROADCAST",
	31: "MGMT_MAC_FRAMES_TX_PAUSE",
}
var MgmtMacStatsType_value = map[string]int32{
	"MGMT_MAC_FRAMES_RX_OK":          0,
	"MGMT_MAC_FRAMES_RX_ALL":         1,
	"MGMT_MAC_FRAMES_RX_BAD_FCS":     2,
	"MGMT_MAC_FRAMES_RX_BAD_ALL":     3,
	"MGMT_MAC_OCTETS_RX_OK":          4,
	"MGMT_MAC_OCTETS_RX_ALL":         5,
	"MGMT_MAC_FRAMES_RX_UNICAST":     6,
	"MGMT_MAC_FRAMES_RX_MULTICAST":   7,
	"MGMT_MAC_FRAMES_RX_BROADCAST":   8,
	"MGMT_MAC_FRAMES_RX_PAUSE":       9,
	"MGMT_MAC_FRAMES_RX_BAD_LENGTH":  10,
	"MGMT_MAC_FRAMES_RX_UNDERSIZED":  11,
	"MGMT_MAC_FRAMES_RX_OVERSIZED":   12,
	"MGMT_MAC_FRAMES_RX_FRAGMENTS":   13,
	"MGMT_MAC_FRAMES_RX_JABBER":      14,
	"MGMT_MAC_FRAMES_RX_64B":         15,
	"MGMT_MAC_FRAMES_RX_65B_127B":    16,
	"MGMT_MAC_FRAMES_RX_128B_255B":   17,
	"MGMT_MAC_FRAMES_RX_256B_511B":   18,
	"MGMT_MAC_FRAMES_RX_512B_1023B":  19,
	"MGMT_MAC_FRAMES_RX_1024B_1518B": 20,
	"MGMT_MAC_FRAMES_RX_GT_1518B":    21,
	"MGMT_MAC_FRAMES_RX_FIFO_FULL":   22,
	"MGMT_MAC_FRAMES_TX_OK":          23,
	"MGMT_MAC_FRAMES_TX_ALL":         24,
	"MGMT_MAC_FRAMES_TX_BAD":         25,
	"MGMT_MAC_OCTETS_TX_OK":          26,
	"MGMT_MAC_OCTETS_TX_TOTAL":       27,
	"MGMT_MAC_FRAMES_TX_UNICAST":     28,
	"MGMT_MAC_FRAMES_TX_MULTICAST":   29,
	"MGMT_MAC_FRAMES_TX_BROADCAST":   30,
	"MGMT_MAC_FRAMES_TX_PAUSE":       31,
}

func (x MgmtMacStatsType) String() string {
	return proto.EnumName(MgmtMacStatsType_name, int32(x))
}
func (MgmtMacStatsType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{0} }

// ------------------------------------------------------------------------------
// MacStats consists of MacStatsType and count
// ------------------------------------------------------------------------------
type MacStatsType int32

const (
	MacStatsType_FRAMES_RX_OK            MacStatsType = 0
	MacStatsType_FRAMES_RX_ALL           MacStatsType = 1
	MacStatsType_FRAMES_RX_BAD_FCS       MacStatsType = 2
	MacStatsType_FRAMES_RX_BAD_ALL       MacStatsType = 3
	MacStatsType_OCTETS_RX_OK            MacStatsType = 4
	MacStatsType_OCTETS_RX_ALL           MacStatsType = 5
	MacStatsType_FRAMES_RX_UNICAST       MacStatsType = 6
	MacStatsType_FRAMES_RX_MULTICAST     MacStatsType = 7
	MacStatsType_FRAMES_RX_BROADCAST     MacStatsType = 8
	MacStatsType_FRAMES_RX_PAUSE         MacStatsType = 9
	MacStatsType_FRAMES_RX_BAD_LENGTH    MacStatsType = 10
	MacStatsType_FRAMES_RX_UNDERSIZED    MacStatsType = 11
	MacStatsType_FRAMES_RX_OVERSIZED     MacStatsType = 12
	MacStatsType_FRAMES_RX_FRAGMENTS     MacStatsType = 13
	MacStatsType_FRAMES_RX_JABBER        MacStatsType = 14
	MacStatsType_FRAMES_RX_PRIPAUSE      MacStatsType = 15
	MacStatsType_FRAMES_RX_STOMPED_CRC   MacStatsType = 16
	MacStatsType_FRAMES_RX_TOO_LONG      MacStatsType = 17
	MacStatsType_FRAMES_RX_VLAN_GOOD     MacStatsType = 18
	MacStatsType_FRAMES_RX_DROPPED       MacStatsType = 19
	MacStatsType_FRAMES_RX_LESS_THAN_64B MacStatsType = 20
	MacStatsType_FRAMES_RX_64B           MacStatsType = 21
	MacStatsType_FRAMES_RX_65B_127B      MacStatsType = 22
	MacStatsType_FRAMES_RX_128B_255B     MacStatsType = 23
	MacStatsType_FRAMES_RX_256B_511B     MacStatsType = 24
	MacStatsType_FRAMES_RX_512B_1023B    MacStatsType = 25
	MacStatsType_FRAMES_RX_1024B_1518B   MacStatsType = 26
	MacStatsType_FRAMES_RX_1519B_2047B   MacStatsType = 27
	MacStatsType_FRAMES_RX_2048B_4095B   MacStatsType = 28
	MacStatsType_FRAMES_RX_4096B_8191B   MacStatsType = 29
	MacStatsType_FRAMES_RX_8192B_9215B   MacStatsType = 30
	MacStatsType_FRAMES_RX_OTHER         MacStatsType = 31
	MacStatsType_FRAMES_TX_OK            MacStatsType = 32
	MacStatsType_FRAMES_TX_ALL           MacStatsType = 33
	MacStatsType_FRAMES_TX_BAD           MacStatsType = 34
	MacStatsType_OCTETS_TX_OK            MacStatsType = 35
	MacStatsType_OCTETS_TX_TOTAL         MacStatsType = 36
	MacStatsType_FRAMES_TX_UNICAST       MacStatsType = 37
	MacStatsType_FRAMES_TX_MULTICAST     MacStatsType = 38
	MacStatsType_FRAMES_TX_BROADCAST     MacStatsType = 39
	MacStatsType_FRAMES_TX_PAUSE         MacStatsType = 40
	MacStatsType_FRAMES_TX_PRIPAUSE      MacStatsType = 41
	MacStatsType_FRAMES_TX_VLAN          MacStatsType = 42
	MacStatsType_FRAMES_TX_LESS_THAN_64B MacStatsType = 43
	MacStatsType_FRAMES_TX_64B           MacStatsType = 44
	MacStatsType_FRAMES_TX_65B_127B      MacStatsType = 45
	MacStatsType_FRAMES_TX_128B_255B     MacStatsType = 46
	MacStatsType_FRAMES_TX_256B_511B     MacStatsType = 47
	MacStatsType_FRAMES_TX_512B_1023B    MacStatsType = 48
	MacStatsType_FRAMES_TX_1024B_1518B   MacStatsType = 49
	MacStatsType_FRAMES_TX_1519B_2047B   MacStatsType = 50
	MacStatsType_FRAMES_TX_2048B_4095B   MacStatsType = 51
	MacStatsType_FRAMES_TX_4096B_8191B   MacStatsType = 52
	MacStatsType_FRAMES_TX_8192B_9215B   MacStatsType = 53
	MacStatsType_FRAMES_TX_OTHER         MacStatsType = 54
	MacStatsType_FRAMES_TX_PRI_0         MacStatsType = 55
	MacStatsType_FRAMES_TX_PRI_1         MacStatsType = 56
	MacStatsType_FRAMES_TX_PRI_2         MacStatsType = 57
	MacStatsType_FRAMES_TX_PRI_3         MacStatsType = 58
	MacStatsType_FRAMES_TX_PRI_4         MacStatsType = 59
	MacStatsType_FRAMES_TX_PRI_5         MacStatsType = 60
	MacStatsType_FRAMES_TX_PRI_6         MacStatsType = 61
	MacStatsType_FRAMES_TX_PRI_7         MacStatsType = 62
	MacStatsType_FRAMES_RX_PRI_0         MacStatsType = 63
	MacStatsType_FRAMES_RX_PRI_1         MacStatsType = 64
	MacStatsType_FRAMES_RX_PRI_2         MacStatsType = 65
	MacStatsType_FRAMES_RX_PRI_3         MacStatsType = 66
	MacStatsType_FRAMES_RX_PRI_4         MacStatsType = 67
	MacStatsType_FRAMES_RX_PRI_5         MacStatsType = 68
	MacStatsType_FRAMES_RX_PRI_6         MacStatsType = 69
	MacStatsType_FRAMES_RX_PRI_7         MacStatsType = 70
	MacStatsType_TX_PRIPAUSE_0_1US_COUNT MacStatsType = 71
	MacStatsType_TX_PRIPAUSE_1_1US_COUNT MacStatsType = 72
	MacStatsType_TX_PRIPAUSE_2_1US_COUNT MacStatsType = 73
	MacStatsType_TX_PRIPAUSE_3_1US_COUNT MacStatsType = 74
	MacStatsType_TX_PRIPAUSE_4_1US_COUNT MacStatsType = 75
	MacStatsType_TX_PRIPAUSE_5_1US_COUNT MacStatsType = 76
	MacStatsType_TX_PRIPAUSE_6_1US_COUNT MacStatsType = 77
	MacStatsType_TX_PRIPAUSE_7_1US_COUNT MacStatsType = 78
	MacStatsType_RX_PRIPAUSE_0_1US_COUNT MacStatsType = 79
	MacStatsType_RX_PRIPAUSE_1_1US_COUNT MacStatsType = 80
	MacStatsType_RX_PRIPAUSE_2_1US_COUNT MacStatsType = 81
	MacStatsType_RX_PRIPAUSE_3_1US_COUNT MacStatsType = 82
	MacStatsType_RX_PRIPAUSE_4_1US_COUNT MacStatsType = 83
	MacStatsType_RX_PRIPAUSE_5_1US_COUNT MacStatsType = 84
	MacStatsType_RX_PRIPAUSE_6_1US_COUNT MacStatsType = 85
	MacStatsType_RX_PRIPAUSE_7_1US_COUNT MacStatsType = 86
	MacStatsType_RX_PAUSE_1US_COUNT      MacStatsType = 87
	MacStatsType_FRAMES_TX_TRUNCATED     MacStatsType = 88
)

var MacStatsType_name = map[int32]string{
	0:  "FRAMES_RX_OK",
	1:  "FRAMES_RX_ALL",
	2:  "FRAMES_RX_BAD_FCS",
	3:  "FRAMES_RX_BAD_ALL",
	4:  "OCTETS_RX_OK",
	5:  "OCTETS_RX_ALL",
	6:  "FRAMES_RX_UNICAST",
	7:  "FRAMES_RX_MULTICAST",
	8:  "FRAMES_RX_BROADCAST",
	9:  "FRAMES_RX_PAUSE",
	10: "FRAMES_RX_BAD_LENGTH",
	11: "FRAMES_RX_UNDERSIZED",
	12: "FRAMES_RX_OVERSIZED",
	13: "FRAMES_RX_FRAGMENTS",
	14: "FRAMES_RX_JABBER",
	15: "FRAMES_RX_PRIPAUSE",
	16: "FRAMES_RX_STOMPED_CRC",
	17: "FRAMES_RX_TOO_LONG",
	18: "FRAMES_RX_VLAN_GOOD",
	19: "FRAMES_RX_DROPPED",
	20: "FRAMES_RX_LESS_THAN_64B",
	21: "FRAMES_RX_64B",
	22: "FRAMES_RX_65B_127B",
	23: "FRAMES_RX_128B_255B",
	24: "FRAMES_RX_256B_511B",
	25: "FRAMES_RX_512B_1023B",
	26: "FRAMES_RX_1024B_1518B",
	27: "FRAMES_RX_1519B_2047B",
	28: "FRAMES_RX_2048B_4095B",
	29: "FRAMES_RX_4096B_8191B",
	30: "FRAMES_RX_8192B_9215B",
	31: "FRAMES_RX_OTHER",
	32: "FRAMES_TX_OK",
	33: "FRAMES_TX_ALL",
	34: "FRAMES_TX_BAD",
	35: "OCTETS_TX_OK",
	36: "OCTETS_TX_TOTAL",
	37: "FRAMES_TX_UNICAST",
	38: "FRAMES_TX_MULTICAST",
	39: "FRAMES_TX_BROADCAST",
	40: "FRAMES_TX_PAUSE",
	41: "FRAMES_TX_PRIPAUSE",
	42: "FRAMES_TX_VLAN",
	43: "FRAMES_TX_LESS_THAN_64B",
	44: "FRAMES_TX_64B",
	45: "FRAMES_TX_65B_127B",
	46: "FRAMES_TX_128B_255B",
	47: "FRAMES_TX_256B_511B",
	48: "FRAMES_TX_512B_1023B",
	49: "FRAMES_TX_1024B_1518B",
	50: "FRAMES_TX_1519B_2047B",
	51: "FRAMES_TX_2048B_4095B",
	52: "FRAMES_TX_4096B_8191B",
	53: "FRAMES_TX_8192B_9215B",
	54: "FRAMES_TX_OTHER",
	55: "FRAMES_TX_PRI_0",
	56: "FRAMES_TX_PRI_1",
	57: "FRAMES_TX_PRI_2",
	58: "FRAMES_TX_PRI_3",
	59: "FRAMES_TX_PRI_4",
	60: "FRAMES_TX_PRI_5",
	61: "FRAMES_TX_PRI_6",
	62: "FRAMES_TX_PRI_7",
	63: "FRAMES_RX_PRI_0",
	64: "FRAMES_RX_PRI_1",
	65: "FRAMES_RX_PRI_2",
	66: "FRAMES_RX_PRI_3",
	67: "FRAMES_RX_PRI_4",
	68: "FRAMES_RX_PRI_5",
	69: "FRAMES_RX_PRI_6",
	70: "FRAMES_RX_PRI_7",
	71: "TX_PRIPAUSE_0_1US_COUNT",
	72: "TX_PRIPAUSE_1_1US_COUNT",
	73: "TX_PRIPAUSE_2_1US_COUNT",
	74: "TX_PRIPAUSE_3_1US_COUNT",
	75: "TX_PRIPAUSE_4_1US_COUNT",
	76: "TX_PRIPAUSE_5_1US_COUNT",
	77: "TX_PRIPAUSE_6_1US_COUNT",
	78: "TX_PRIPAUSE_7_1US_COUNT",
	79: "RX_PRIPAUSE_0_1US_COUNT",
	80: "RX_PRIPAUSE_1_1US_COUNT",
	81: "RX_PRIPAUSE_2_1US_COUNT",
	82: "RX_PRIPAUSE_3_1US_COUNT",
	83: "RX_PRIPAUSE_4_1US_COUNT",
	84: "RX_PRIPAUSE_5_1US_COUNT",
	85: "RX_PRIPAUSE_6_1US_COUNT",
	86: "RX_PRIPAUSE_7_1US_COUNT",
	87: "RX_PAUSE_1US_COUNT",
	88: "FRAMES_TX_TRUNCATED",
}
var MacStatsType_value = map[string]int32{
	"FRAMES_RX_OK":            0,
	"FRAMES_RX_ALL":           1,
	"FRAMES_RX_BAD_FCS":       2,
	"FRAMES_RX_BAD_ALL":       3,
	"OCTETS_RX_OK":            4,
	"OCTETS_RX_ALL":           5,
	"FRAMES_RX_UNICAST":       6,
	"FRAMES_RX_MULTICAST":     7,
	"FRAMES_RX_BROADCAST":     8,
	"FRAMES_RX_PAUSE":         9,
	"FRAMES_RX_BAD_LENGTH":    10,
	"FRAMES_RX_UNDERSIZED":    11,
	"FRAMES_RX_OVERSIZED":     12,
	"FRAMES_RX_FRAGMENTS":     13,
	"FRAMES_RX_JABBER":        14,
	"FRAMES_RX_PRIPAUSE":      15,
	"FRAMES_RX_STOMPED_CRC":   16,
	"FRAMES_RX_TOO_LONG":      17,
	"FRAMES_RX_VLAN_GOOD":     18,
	"FRAMES_RX_DROPPED":       19,
	"FRAMES_RX_LESS_THAN_64B": 20,
	"FRAMES_RX_64B":           21,
	"FRAMES_RX_65B_127B":      22,
	"FRAMES_RX_128B_255B":     23,
	"FRAMES_RX_256B_511B":     24,
	"FRAMES_RX_512B_1023B":    25,
	"FRAMES_RX_1024B_1518B":   26,
	"FRAMES_RX_1519B_2047B":   27,
	"FRAMES_RX_2048B_4095B":   28,
	"FRAMES_RX_4096B_8191B":   29,
	"FRAMES_RX_8192B_9215B":   30,
	"FRAMES_RX_OTHER":         31,
	"FRAMES_TX_OK":            32,
	"FRAMES_TX_ALL":           33,
	"FRAMES_TX_BAD":           34,
	"OCTETS_TX_OK":            35,
	"OCTETS_TX_TOTAL":         36,
	"FRAMES_TX_UNICAST":       37,
	"FRAMES_TX_MULTICAST":     38,
	"FRAMES_TX_BROADCAST":     39,
	"FRAMES_TX_PAUSE":         40,
	"FRAMES_TX_PRIPAUSE":      41,
	"FRAMES_TX_VLAN":          42,
	"FRAMES_TX_LESS_THAN_64B": 43,
	"FRAMES_TX_64B":           44,
	"FRAMES_TX_65B_127B":      45,
	"FRAMES_TX_128B_255B":     46,
	"FRAMES_TX_256B_511B":     47,
	"FRAMES_TX_512B_1023B":    48,
	"FRAMES_TX_1024B_1518B":   49,
	"FRAMES_TX_1519B_2047B":   50,
	"FRAMES_TX_2048B_4095B":   51,
	"FRAMES_TX_4096B_8191B":   52,
	"FRAMES_TX_8192B_9215B":   53,
	"FRAMES_TX_OTHER":         54,
	"FRAMES_TX_PRI_0":         55,
	"FRAMES_TX_PRI_1":         56,
	"FRAMES_TX_PRI_2":         57,
	"FRAMES_TX_PRI_3":         58,
	"FRAMES_TX_PRI_4":         59,
	"FRAMES_TX_PRI_5":         60,
	"FRAMES_TX_PRI_6":         61,
	"FRAMES_TX_PRI_7":         62,
	"FRAMES_RX_PRI_0":         63,
	"FRAMES_RX_PRI_1":         64,
	"FRAMES_RX_PRI_2":         65,
	"FRAMES_RX_PRI_3":         66,
	"FRAMES_RX_PRI_4":         67,
	"FRAMES_RX_PRI_5":         68,
	"FRAMES_RX_PRI_6":         69,
	"FRAMES_RX_PRI_7":         70,
	"TX_PRIPAUSE_0_1US_COUNT": 71,
	"TX_PRIPAUSE_1_1US_COUNT": 72,
	"TX_PRIPAUSE_2_1US_COUNT": 73,
	"TX_PRIPAUSE_3_1US_COUNT": 74,
	"TX_PRIPAUSE_4_1US_COUNT": 75,
	"TX_PRIPAUSE_5_1US_COUNT": 76,
	"TX_PRIPAUSE_6_1US_COUNT": 77,
	"TX_PRIPAUSE_7_1US_COUNT": 78,
	"RX_PRIPAUSE_0_1US_COUNT": 79,
	"RX_PRIPAUSE_1_1US_COUNT": 80,
	"RX_PRIPAUSE_2_1US_COUNT": 81,
	"RX_PRIPAUSE_3_1US_COUNT": 82,
	"RX_PRIPAUSE_4_1US_COUNT": 83,
	"RX_PRIPAUSE_5_1US_COUNT": 84,
	"RX_PRIPAUSE_6_1US_COUNT": 85,
	"RX_PRIPAUSE_7_1US_COUNT": 86,
	"RX_PAUSE_1US_COUNT":      87,
	"FRAMES_TX_TRUNCATED":     88,
}

func (x MacStatsType) String() string {
	return proto.EnumName(MacStatsType_name, int32(x))
}
func (MacStatsType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{1} }

// PortAdminState specifies if the port is enabled (admin up) or disabled (admin down)
type PortAdminState int32

const (
	PortAdminState_PORT_ADMIN_STATE_NONE PortAdminState = 0
	PortAdminState_PORT_ADMIN_STATE_DOWN PortAdminState = 1
	PortAdminState_PORT_ADMIN_STATE_UP   PortAdminState = 2
)

var PortAdminState_name = map[int32]string{
	0: "PORT_ADMIN_STATE_NONE",
	1: "PORT_ADMIN_STATE_DOWN",
	2: "PORT_ADMIN_STATE_UP",
}
var PortAdminState_value = map[string]int32{
	"PORT_ADMIN_STATE_NONE": 0,
	"PORT_ADMIN_STATE_DOWN": 1,
	"PORT_ADMIN_STATE_UP":   2,
}

func (x PortAdminState) String() string {
	return proto.EnumName(PortAdminState_name, int32(x))
}
func (PortAdminState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{2} }

type PortXcvrState int32

const (
	PortXcvrState_XCVR_STATE_REMOVED        PortXcvrState = 0
	PortXcvrState_XCVR_STATE_INSERTED       PortXcvrState = 1
	PortXcvrState_XCVR_STATE_PENDING        PortXcvrState = 2
	PortXcvrState_XCVR_STATE_SPROM_READ     PortXcvrState = 3
	PortXcvrState_XCVR_STATE_SPROM_READ_ERR PortXcvrState = 4
)

var PortXcvrState_name = map[int32]string{
	0: "XCVR_STATE_REMOVED",
	1: "XCVR_STATE_INSERTED",
	2: "XCVR_STATE_PENDING",
	3: "XCVR_STATE_SPROM_READ",
	4: "XCVR_STATE_SPROM_READ_ERR",
}
var PortXcvrState_value = map[string]int32{
	"XCVR_STATE_REMOVED":        0,
	"XCVR_STATE_INSERTED":       1,
	"XCVR_STATE_PENDING":        2,
	"XCVR_STATE_SPROM_READ":     3,
	"XCVR_STATE_SPROM_READ_ERR": 4,
}

func (x PortXcvrState) String() string {
	return proto.EnumName(PortXcvrState_name, int32(x))
}
func (PortXcvrState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{3} }

type PortXcvrPid int32

const (
	PortXcvrPid_XCVR_PID_UNKNOWN PortXcvrPid = 0
	// CU
	PortXcvrPid_XCVR_PID_QSFP_100G_CR4    PortXcvrPid = 1
	PortXcvrPid_XCVR_PID_QSFP_40GBASE_CR4 PortXcvrPid = 2
	PortXcvrPid_XCVR_PID_SFP_25GBASE_CR_S PortXcvrPid = 3
	PortXcvrPid_XCVR_PID_SFP_25GBASE_CR_L PortXcvrPid = 4
	PortXcvrPid_XCVR_PID_SFP_25GBASE_CR_N PortXcvrPid = 5
	PortXcvrPid_XCVR_PID_QSFP_50G_CR2_FC  PortXcvrPid = 6
	PortXcvrPid_XCVR_PID_QSFP_50G_CR2     PortXcvrPid = 7
	// Fiber
	PortXcvrPid_XCVR_PID_QSFP_100G_AOC    PortXcvrPid = 50
	PortXcvrPid_XCVR_PID_QSFP_100G_ACC    PortXcvrPid = 51
	PortXcvrPid_XCVR_PID_QSFP_100G_SR4    PortXcvrPid = 52
	PortXcvrPid_XCVR_PID_QSFP_100G_LR4    PortXcvrPid = 53
	PortXcvrPid_XCVR_PID_QSFP_100G_ER4    PortXcvrPid = 54
	PortXcvrPid_XCVR_PID_QSFP_40GBASE_ER4 PortXcvrPid = 55
	PortXcvrPid_XCVR_PID_QSFP_40GBASE_SR4 PortXcvrPid = 56
	PortXcvrPid_XCVR_PID_QSFP_40GBASE_LR4 PortXcvrPid = 57
	PortXcvrPid_XCVR_PID_QSFP_40GBASE_AOC PortXcvrPid = 58
	PortXcvrPid_XCVR_PID_SFP_25GBASE_SR   PortXcvrPid = 59
	PortXcvrPid_XCVR_PID_SFP_25GBASE_LR   PortXcvrPid = 60
	PortXcvrPid_XCVR_PID_SFP_25GBASE_ER   PortXcvrPid = 61
	PortXcvrPid_XCVR_PID_SFP_25GBASE_AOC  PortXcvrPid = 62
	PortXcvrPid_XCVR_PID_SFP_10GBASE_SR   PortXcvrPid = 63
	PortXcvrPid_XCVR_PID_SFP_10GBASE_LR   PortXcvrPid = 64
	PortXcvrPid_XCVR_PID_SFP_10GBASE_LRM  PortXcvrPid = 65
	PortXcvrPid_XCVR_PID_SFP_10GBASE_ER   PortXcvrPid = 66
	PortXcvrPid_XCVR_PID_SFP_10GBASE_AOC  PortXcvrPid = 67
	PortXcvrPid_XCVR_PID_SFP_10GBASE_CU   PortXcvrPid = 68
	PortXcvrPid_XCVR_PID_QSFP_100G_CWDM4  PortXcvrPid = 69
	PortXcvrPid_XCVR_PID_QSFP_100G_PSM4   PortXcvrPid = 70
	PortXcvrPid_XCVR_PID_SFP_25GBASE_ACC  PortXcvrPid = 71
)

var PortXcvrPid_name = map[int32]string{
	0:  "XCVR_PID_UNKNOWN",
	1:  "XCVR_PID_QSFP_100G_CR4",
	2:  "XCVR_PID_QSFP_40GBASE_CR4",
	3:  "XCVR_PID_SFP_25GBASE_CR_S",
	4:  "XCVR_PID_SFP_25GBASE_CR_L",
	5:  "XCVR_PID_SFP_25GBASE_CR_N",
	6:  "XCVR_PID_QSFP_50G_CR2_FC",
	7:  "XCVR_PID_QSFP_50G_CR2",
	50: "XCVR_PID_QSFP_100G_AOC",
	51: "XCVR_PID_QSFP_100G_ACC",
	52: "XCVR_PID_QSFP_100G_SR4",
	53: "XCVR_PID_QSFP_100G_LR4",
	54: "XCVR_PID_QSFP_100G_ER4",
	55: "XCVR_PID_QSFP_40GBASE_ER4",
	56: "XCVR_PID_QSFP_40GBASE_SR4",
	57: "XCVR_PID_QSFP_40GBASE_LR4",
	58: "XCVR_PID_QSFP_40GBASE_AOC",
	59: "XCVR_PID_SFP_25GBASE_SR",
	60: "XCVR_PID_SFP_25GBASE_LR",
	61: "XCVR_PID_SFP_25GBASE_ER",
	62: "XCVR_PID_SFP_25GBASE_AOC",
	63: "XCVR_PID_SFP_10GBASE_SR",
	64: "XCVR_PID_SFP_10GBASE_LR",
	65: "XCVR_PID_SFP_10GBASE_LRM",
	66: "XCVR_PID_SFP_10GBASE_ER",
	67: "XCVR_PID_SFP_10GBASE_AOC",
	68: "XCVR_PID_SFP_10GBASE_CU",
	69: "XCVR_PID_QSFP_100G_CWDM4",
	70: "XCVR_PID_QSFP_100G_PSM4",
	71: "XCVR_PID_SFP_25GBASE_ACC",
}
var PortXcvrPid_value = map[string]int32{
	"XCVR_PID_UNKNOWN":          0,
	"XCVR_PID_QSFP_100G_CR4":    1,
	"XCVR_PID_QSFP_40GBASE_CR4": 2,
	"XCVR_PID_SFP_25GBASE_CR_S": 3,
	"XCVR_PID_SFP_25GBASE_CR_L": 4,
	"XCVR_PID_SFP_25GBASE_CR_N": 5,
	"XCVR_PID_QSFP_50G_CR2_FC":  6,
	"XCVR_PID_QSFP_50G_CR2":     7,
	"XCVR_PID_QSFP_100G_AOC":    50,
	"XCVR_PID_QSFP_100G_ACC":    51,
	"XCVR_PID_QSFP_100G_SR4":    52,
	"XCVR_PID_QSFP_100G_LR4":    53,
	"XCVR_PID_QSFP_100G_ER4":    54,
	"XCVR_PID_QSFP_40GBASE_ER4": 55,
	"XCVR_PID_QSFP_40GBASE_SR4": 56,
	"XCVR_PID_QSFP_40GBASE_LR4": 57,
	"XCVR_PID_QSFP_40GBASE_AOC": 58,
	"XCVR_PID_SFP_25GBASE_SR":   59,
	"XCVR_PID_SFP_25GBASE_LR":   60,
	"XCVR_PID_SFP_25GBASE_ER":   61,
	"XCVR_PID_SFP_25GBASE_AOC":  62,
	"XCVR_PID_SFP_10GBASE_SR":   63,
	"XCVR_PID_SFP_10GBASE_LR":   64,
	"XCVR_PID_SFP_10GBASE_LRM":  65,
	"XCVR_PID_SFP_10GBASE_ER":   66,
	"XCVR_PID_SFP_10GBASE_AOC":  67,
	"XCVR_PID_SFP_10GBASE_CU":   68,
	"XCVR_PID_QSFP_100G_CWDM4":  69,
	"XCVR_PID_QSFP_100G_PSM4":   70,
	"XCVR_PID_SFP_25GBASE_ACC":  71,
}

func (x PortXcvrPid) String() string {
	return proto.EnumName(PortXcvrPid_name, int32(x))
}
func (PortXcvrPid) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{4} }

type MediaType int32

const (
	MediaType_MEDIA_TYPE_NONE   MediaType = 0
	MediaType_MEDIA_TYPE_COPPER MediaType = 1
	MediaType_MEDIA_TYPE_FIBER  MediaType = 2
)

var MediaType_name = map[int32]string{
	0: "MEDIA_TYPE_NONE",
	1: "MEDIA_TYPE_COPPER",
	2: "MEDIA_TYPE_FIBER",
}
var MediaType_value = map[string]int32{
	"MEDIA_TYPE_NONE":   0,
	"MEDIA_TYPE_COPPER": 1,
	"MEDIA_TYPE_FIBER":  2,
}

func (x MediaType) String() string {
	return proto.EnumName(MediaType_name, int32(x))
}
func (MediaType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{5} }

// PortOperState reflects the current status of the port
type PortOperState int32

const (
	PortOperState_PORT_OPER_STATUS_NONE PortOperState = 0
	PortOperState_PORT_OPER_STATUS_UP   PortOperState = 1
	PortOperState_PORT_OPER_STATUS_DOWN PortOperState = 2
)

var PortOperState_name = map[int32]string{
	0: "PORT_OPER_STATUS_NONE",
	1: "PORT_OPER_STATUS_UP",
	2: "PORT_OPER_STATUS_DOWN",
}
var PortOperState_value = map[string]int32{
	"PORT_OPER_STATUS_NONE": 0,
	"PORT_OPER_STATUS_UP":   1,
	"PORT_OPER_STATUS_DOWN": 2,
}

func (x PortOperState) String() string {
	return proto.EnumName(PortOperState_name, int32(x))
}
func (PortOperState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{6} }

type PortPauseType int32

const (
	PortPauseType_PORT_PAUSE_TYPE_NONE PortPauseType = 0
	PortPauseType_PORT_PAUSE_TYPE_LINK PortPauseType = 1
	PortPauseType_PORT_PAUSE_TYPE_PFC  PortPauseType = 2
)

var PortPauseType_name = map[int32]string{
	0: "PORT_PAUSE_TYPE_NONE",
	1: "PORT_PAUSE_TYPE_LINK",
	2: "PORT_PAUSE_TYPE_PFC",
}
var PortPauseType_value = map[string]int32{
	"PORT_PAUSE_TYPE_NONE": 0,
	"PORT_PAUSE_TYPE_LINK": 1,
	"PORT_PAUSE_TYPE_PFC":  2,
}

func (x PortPauseType) String() string {
	return proto.EnumName(PortPauseType_name, int32(x))
}
func (PortPauseType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{7} }

type PortLinkSM int32

const (
	PortLinkSM_PORT_LINK_FSM_DISABLED                PortLinkSM = 0
	PortLinkSM_PORT_LINK_FSM_ENABLED                 PortLinkSM = 1
	PortLinkSM_PORT_LINK_FSM_AN_CFG                  PortLinkSM = 2
	PortLinkSM_PORT_LINK_FSM_AN_DISABLED             PortLinkSM = 3
	PortLinkSM_PORT_LINK_FSM_AN_START                PortLinkSM = 4
	PortLinkSM_PORT_LINK_FSM_AN_WAIT_HCD             PortLinkSM = 5
	PortLinkSM_PORT_LINK_FSM_AN_COMPLETE             PortLinkSM = 6
	PortLinkSM_PORT_LINK_FSM_SERDES_CFG              PortLinkSM = 7
	PortLinkSM_PORT_LINK_FSM_WAIT_SERDES_RDY         PortLinkSM = 8
	PortLinkSM_PORT_LINK_FSM_MAC_CFG                 PortLinkSM = 9
	PortLinkSM_PORT_LINK_FSM_SIGNAL_DETECT           PortLinkSM = 10
	PortLinkSM_PORT_LINK_FSM_AN_DFE_TUNING           PortLinkSM = 11
	PortLinkSM_PORT_LINK_FSM_DFE_TUNING              PortLinkSM = 12
	PortLinkSM_PORT_LINK_FSM_DFE_DISABLED            PortLinkSM = 13
	PortLinkSM_PORT_LINK_FSM_DFE_START_ICAL          PortLinkSM = 14
	PortLinkSM_PORT_LINK_FSM_DFE_WAIT_ICAL           PortLinkSM = 15
	PortLinkSM_PORT_LINK_FSM_DFE_START_PCAL          PortLinkSM = 16
	PortLinkSM_PORT_LINK_FSM_DFE_WAIT_PCAL           PortLinkSM = 17
	PortLinkSM_PORT_LINK_FSM_DFE_PCAL_CONTINUOUS     PortLinkSM = 18
	PortLinkSM_PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS PortLinkSM = 19
	PortLinkSM_PORT_LINK_FSM_WAIT_MAC_SYNC           PortLinkSM = 20
	PortLinkSM_PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR   PortLinkSM = 21
	PortLinkSM_PORT_LINK_FSM_UP                      PortLinkSM = 22
)

var PortLinkSM_name = map[int32]string{
	0:  "PORT_LINK_FSM_DISABLED",
	1:  "PORT_LINK_FSM_ENABLED",
	2:  "PORT_LINK_FSM_AN_CFG",
	3:  "PORT_LINK_FSM_AN_DISABLED",
	4:  "PORT_LINK_FSM_AN_START",
	5:  "PORT_LINK_FSM_AN_WAIT_HCD",
	6:  "PORT_LINK_FSM_AN_COMPLETE",
	7:  "PORT_LINK_FSM_SERDES_CFG",
	8:  "PORT_LINK_FSM_WAIT_SERDES_RDY",
	9:  "PORT_LINK_FSM_MAC_CFG",
	10: "PORT_LINK_FSM_SIGNAL_DETECT",
	11: "PORT_LINK_FSM_AN_DFE_TUNING",
	12: "PORT_LINK_FSM_DFE_TUNING",
	13: "PORT_LINK_FSM_DFE_DISABLED",
	14: "PORT_LINK_FSM_DFE_START_ICAL",
	15: "PORT_LINK_FSM_DFE_WAIT_ICAL",
	16: "PORT_LINK_FSM_DFE_START_PCAL",
	17: "PORT_LINK_FSM_DFE_WAIT_PCAL",
	18: "PORT_LINK_FSM_DFE_PCAL_CONTINUOUS",
	19: "PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS",
	20: "PORT_LINK_FSM_WAIT_MAC_SYNC",
	21: "PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR",
	22: "PORT_LINK_FSM_UP",
}
var PortLinkSM_value = map[string]int32{
	"PORT_LINK_FSM_DISABLED":                0,
	"PORT_LINK_FSM_ENABLED":                 1,
	"PORT_LINK_FSM_AN_CFG":                  2,
	"PORT_LINK_FSM_AN_DISABLED":             3,
	"PORT_LINK_FSM_AN_START":                4,
	"PORT_LINK_FSM_AN_WAIT_HCD":             5,
	"PORT_LINK_FSM_AN_COMPLETE":             6,
	"PORT_LINK_FSM_SERDES_CFG":              7,
	"PORT_LINK_FSM_WAIT_SERDES_RDY":         8,
	"PORT_LINK_FSM_MAC_CFG":                 9,
	"PORT_LINK_FSM_SIGNAL_DETECT":           10,
	"PORT_LINK_FSM_AN_DFE_TUNING":           11,
	"PORT_LINK_FSM_DFE_TUNING":              12,
	"PORT_LINK_FSM_DFE_DISABLED":            13,
	"PORT_LINK_FSM_DFE_START_ICAL":          14,
	"PORT_LINK_FSM_DFE_WAIT_ICAL":           15,
	"PORT_LINK_FSM_DFE_START_PCAL":          16,
	"PORT_LINK_FSM_DFE_WAIT_PCAL":           17,
	"PORT_LINK_FSM_DFE_PCAL_CONTINUOUS":     18,
	"PORT_LINK_FSM_CLEAR_MAC_REMOTE_FAULTS": 19,
	"PORT_LINK_FSM_WAIT_MAC_SYNC":           20,
	"PORT_LINK_FSM_WAIT_MAC_FAULTS_CLEAR":   21,
	"PORT_LINK_FSM_UP":                      22,
}

func (x PortLinkSM) String() string {
	return proto.EnumName(PortLinkSM_name, int32(x))
}
func (PortLinkSM) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{8} }

type PortLoopBackMode int32

const (
	PortLoopBackMode_PORT_LOOPBACK_MODE_NONE PortLoopBackMode = 0
	PortLoopBackMode_PORT_LOOPBACK_MODE_MAC  PortLoopBackMode = 1
	PortLoopBackMode_PORT_LOOPBACK_MODE_PHY  PortLoopBackMode = 2
)

var PortLoopBackMode_name = map[int32]string{
	0: "PORT_LOOPBACK_MODE_NONE",
	1: "PORT_LOOPBACK_MODE_MAC",
	2: "PORT_LOOPBACK_MODE_PHY",
}
var PortLoopBackMode_value = map[string]int32{
	"PORT_LOOPBACK_MODE_NONE": 0,
	"PORT_LOOPBACK_MODE_MAC":  1,
	"PORT_LOOPBACK_MODE_PHY":  2,
}

func (x PortLoopBackMode) String() string {
	return proto.EnumName(PortLoopBackMode_name, int32(x))
}
func (PortLoopBackMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{9} }

type PortFecType int32

const (
	PortFecType_PORT_FEC_TYPE_NONE PortFecType = 0
	PortFecType_PORT_FEC_TYPE_FC   PortFecType = 1
	PortFecType_PORT_FEC_TYPE_RS   PortFecType = 2
)

var PortFecType_name = map[int32]string{
	0: "PORT_FEC_TYPE_NONE",
	1: "PORT_FEC_TYPE_FC",
	2: "PORT_FEC_TYPE_RS",
}
var PortFecType_value = map[string]int32{
	"PORT_FEC_TYPE_NONE": 0,
	"PORT_FEC_TYPE_FC":   1,
	"PORT_FEC_TYPE_RS":   2,
}

func (x PortFecType) String() string {
	return proto.EnumName(PortFecType_name, int32(x))
}
func (PortFecType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{10} }

type PortType int32

const (
	PortType_PORT_TYPE_NONE     PortType = 0
	PortType_PORT_TYPE_ETH      PortType = 1
	PortType_PORT_TYPE_ETH_MGMT PortType = 2
)

var PortType_name = map[int32]string{
	0: "PORT_TYPE_NONE",
	1: "PORT_TYPE_ETH",
	2: "PORT_TYPE_ETH_MGMT",
}
var PortType_value = map[string]int32{
	"PORT_TYPE_NONE":     0,
	"PORT_TYPE_ETH":      1,
	"PORT_TYPE_ETH_MGMT": 2,
}

func (x PortType) String() string {
	return proto.EnumName(PortType_name, int32(x))
}
func (PortType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{11} }

type MacStats struct {
	Type  MacStatsType `protobuf:"varint,1,opt,name=Type,proto3,enum=pds.MacStatsType" json:"Type,omitempty"`
	Count uint64       `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *MacStats) Reset()                    { *m = MacStats{} }
func (m *MacStats) String() string            { return proto.CompactTextString(m) }
func (*MacStats) ProtoMessage()               {}
func (*MacStats) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{0} }

func (m *MacStats) GetType() MacStatsType {
	if m != nil {
		return m.Type
	}
	return MacStatsType_FRAMES_RX_OK
}

func (m *MacStats) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MgmtMacStats struct {
	Type  MgmtMacStatsType `protobuf:"varint,1,opt,name=Type,proto3,enum=pds.MgmtMacStatsType" json:"Type,omitempty"`
	Count uint64           `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (m *MgmtMacStats) Reset()                    { *m = MgmtMacStats{} }
func (m *MgmtMacStats) String() string            { return proto.CompactTextString(m) }
func (*MgmtMacStats) ProtoMessage()               {}
func (*MgmtMacStats) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{1} }

func (m *MgmtMacStats) GetType() MgmtMacStatsType {
	if m != nil {
		return m.Type
	}
	return MgmtMacStatsType_MGMT_MAC_FRAMES_RX_OK
}

func (m *MgmtMacStats) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TimeDuration struct {
	Sec  uint32 `protobuf:"varint,1,opt,name=sec,proto3" json:"sec,omitempty"`
	Nsec uint64 `protobuf:"varint,2,opt,name=nsec,proto3" json:"nsec,omitempty"`
}

func (m *TimeDuration) Reset()                    { *m = TimeDuration{} }
func (m *TimeDuration) String() string            { return proto.CompactTextString(m) }
func (*TimeDuration) ProtoMessage()               {}
func (*TimeDuration) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{2} }

func (m *TimeDuration) GetSec() uint32 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func (m *TimeDuration) GetNsec() uint64 {
	if m != nil {
		return m.Nsec
	}
	return 0
}

// Port's Link timing info
type LinkTimingInfo struct {
	LastDownTimestamp string        `protobuf:"bytes,1,opt,name=last_down_timestamp,json=lastDownTimestamp,proto3" json:"last_down_timestamp,omitempty"`
	BringupDuration   *TimeDuration `protobuf:"bytes,2,opt,name=bringup_duration,json=bringupDuration" json:"bringup_duration,omitempty"`
}

func (m *LinkTimingInfo) Reset()                    { *m = LinkTimingInfo{} }
func (m *LinkTimingInfo) String() string            { return proto.CompactTextString(m) }
func (*LinkTimingInfo) ProtoMessage()               {}
func (*LinkTimingInfo) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{3} }

func (m *LinkTimingInfo) GetLastDownTimestamp() string {
	if m != nil {
		return m.LastDownTimestamp
	}
	return ""
}

func (m *LinkTimingInfo) GetBringupDuration() *TimeDuration {
	if m != nil {
		return m.BringupDuration
	}
	return nil
}

type PortStats struct {
	MacStats       []*MacStats     `protobuf:"bytes,1,rep,name=MacStats" json:"MacStats,omitempty"`
	MgmtMacStats   []*MgmtMacStats `protobuf:"bytes,2,rep,name=MgmtMacStats" json:"MgmtMacStats,omitempty"`
	NumLinkDown    uint32          `protobuf:"varint,3,opt,name=NumLinkDown,proto3" json:"NumLinkDown,omitempty"`
	LinkTimingInfo *LinkTimingInfo `protobuf:"bytes,4,opt,name=LinkTimingInfo" json:"LinkTimingInfo,omitempty"`
}

func (m *PortStats) Reset()                    { *m = PortStats{} }
func (m *PortStats) String() string            { return proto.CompactTextString(m) }
func (*PortStats) ProtoMessage()               {}
func (*PortStats) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{4} }

func (m *PortStats) GetMacStats() []*MacStats {
	if m != nil {
		return m.MacStats
	}
	return nil
}

func (m *PortStats) GetMgmtMacStats() []*MgmtMacStats {
	if m != nil {
		return m.MgmtMacStats
	}
	return nil
}

func (m *PortStats) GetNumLinkDown() uint32 {
	if m != nil {
		return m.NumLinkDown
	}
	return 0
}

func (m *PortStats) GetLinkTimingInfo() *LinkTimingInfo {
	if m != nil {
		return m.LinkTimingInfo
	}
	return nil
}

type PortSpec struct {
	// unique port id
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" meta:mandatory`
	// NOTE: currently, port ids must be in the range of [1-2]
	PortNumber uint32 `protobuf:"varint,2,opt,name=PortNumber,proto3" json:"PortNumber,omitempty" meta:mandatory,range:1-2`
	// port up|down adminstratively
	AdminState PortAdminState `protobuf:"varint,3,opt,name=AdminState,proto3,enum=pds.PortAdminState" json:"AdminState,omitempty" meta:mandatory`
	// type of the port
	Type PortType `protobuf:"varint,4,opt,name=Type,proto3,enum=pds.PortType" json:"Type,omitempty" meta:mandatory`
	// port speed
	Speed PortSpeed `protobuf:"varint,5,opt,name=Speed,proto3,enum=types.PortSpeed" json:"Speed,omitempty"`
	// FEC type
	FECType PortFecType `protobuf:"varint,6,opt,name=FECType,proto3,enum=pds.PortFecType" json:"FECType,omitempty"`
	// enable/disable auto negotiation feature
	AutoNegEn bool `protobuf:"varint,7,opt,name=AutoNegEn,proto3" json:"AutoNegEn,omitempty"`
	// link debounce timeout in msec (default = 0 ms)
	DeBounceTimeout uint32 `protobuf:"varint,8,opt,name=DeBounceTimeout,proto3" json:"DeBounceTimeout,omitempty"`
	// MTU size in bytes
	Mtu uint32 `protobuf:"varint,9,opt,name=Mtu,proto3" json:"Mtu,omitempty"`
	// Pause type (pfc or link level)
	PauseType PortPauseType `protobuf:"varint,10,opt,name=PauseType,proto3,enum=pds.PortPauseType" json:"PauseType,omitempty"`
	TxPauseEn bool          `protobuf:"varint,11,opt,name=TxPauseEn,proto3" json:"TxPauseEn,omitempty"`
	RxPauseEn bool          `protobuf:"varint,12,opt,name=RxPauseEn,proto3" json:"RxPauseEn,omitempty"`
	// Port loopback mode - MAC/PHY
	LoopbackMode PortLoopBackMode `protobuf:"varint,13,opt,name=LoopbackMode,proto3,enum=pds.PortLoopBackMode" json:"LoopbackMode,omitempty"`
	// Number of lanes for port
	NumLanes uint32 `protobuf:"varint,14,opt,name=NumLanes,proto3" json:"NumLanes,omitempty"`
}

func (m *PortSpec) Reset()                    { *m = PortSpec{} }
func (m *PortSpec) String() string            { return proto.CompactTextString(m) }
func (*PortSpec) ProtoMessage()               {}
func (*PortSpec) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{5} }

func (m *PortSpec) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PortSpec) GetPortNumber() uint32 {
	if m != nil {
		return m.PortNumber
	}
	return 0
}

func (m *PortSpec) GetAdminState() PortAdminState {
	if m != nil {
		return m.AdminState
	}
	return PortAdminState_PORT_ADMIN_STATE_NONE
}

func (m *PortSpec) GetType() PortType {
	if m != nil {
		return m.Type
	}
	return PortType_PORT_TYPE_NONE
}

func (m *PortSpec) GetSpeed() PortSpeed {
	if m != nil {
		return m.Speed
	}
	return PortSpeed_PORT_SPEED_NONE
}

func (m *PortSpec) GetFECType() PortFecType {
	if m != nil {
		return m.FECType
	}
	return PortFecType_PORT_FEC_TYPE_NONE
}

func (m *PortSpec) GetAutoNegEn() bool {
	if m != nil {
		return m.AutoNegEn
	}
	return false
}

func (m *PortSpec) GetDeBounceTimeout() uint32 {
	if m != nil {
		return m.DeBounceTimeout
	}
	return 0
}

func (m *PortSpec) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *PortSpec) GetPauseType() PortPauseType {
	if m != nil {
		return m.PauseType
	}
	return PortPauseType_PORT_PAUSE_TYPE_NONE
}

func (m *PortSpec) GetTxPauseEn() bool {
	if m != nil {
		return m.TxPauseEn
	}
	return false
}

func (m *PortSpec) GetRxPauseEn() bool {
	if m != nil {
		return m.RxPauseEn
	}
	return false
}

func (m *PortSpec) GetLoopbackMode() PortLoopBackMode {
	if m != nil {
		return m.LoopbackMode
	}
	return PortLoopBackMode_PORT_LOOPBACK_MODE_NONE
}

func (m *PortSpec) GetNumLanes() uint32 {
	if m != nil {
		return m.NumLanes
	}
	return 0
}

type PortLinkStatus struct {
	OperState PortOperState `protobuf:"varint,1,opt,name=OperState,proto3,enum=pds.PortOperState" json:"OperState,omitempty"`
	PortSpeed PortSpeed     `protobuf:"varint,2,opt,name=PortSpeed,proto3,enum=types.PortSpeed" json:"PortSpeed,omitempty"`
	AutoNegEn bool          `protobuf:"varint,3,opt,name=AutoNegEn,proto3" json:"AutoNegEn,omitempty"`
	NumLanes  uint32        `protobuf:"varint,4,opt,name=NumLanes,proto3" json:"NumLanes,omitempty"`
	FECType   PortFecType   `protobuf:"varint,5,opt,name=FECType,proto3,enum=pds.PortFecType" json:"FECType,omitempty"`
}

func (m *PortLinkStatus) Reset()                    { *m = PortLinkStatus{} }
func (m *PortLinkStatus) String() string            { return proto.CompactTextString(m) }
func (*PortLinkStatus) ProtoMessage()               {}
func (*PortLinkStatus) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{6} }

func (m *PortLinkStatus) GetOperState() PortOperState {
	if m != nil {
		return m.OperState
	}
	return PortOperState_PORT_OPER_STATUS_NONE
}

func (m *PortLinkStatus) GetPortSpeed() PortSpeed {
	if m != nil {
		return m.PortSpeed
	}
	return PortSpeed_PORT_SPEED_NONE
}

func (m *PortLinkStatus) GetAutoNegEn() bool {
	if m != nil {
		return m.AutoNegEn
	}
	return false
}

func (m *PortLinkStatus) GetNumLanes() uint32 {
	if m != nil {
		return m.NumLanes
	}
	return 0
}

func (m *PortLinkStatus) GetFECType() PortFecType {
	if m != nil {
		return m.FECType
	}
	return PortFecType_PORT_FEC_TYPE_NONE
}

type PortXcvrStatus struct {
	Port         int32         `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	State        PortXcvrState `protobuf:"varint,2,opt,name=State,proto3,enum=pds.PortXcvrState" json:"State,omitempty"`
	Pid          PortXcvrPid   `protobuf:"varint,3,opt,name=Pid,proto3,enum=pds.PortXcvrPid" json:"Pid,omitempty"`
	MediaType    MediaType     `protobuf:"varint,4,opt,name=MediaType,proto3,enum=pds.MediaType" json:"MediaType,omitempty"`
	XcvrSprom    []byte        `protobuf:"bytes,5,opt,name=XcvrSprom,proto3" json:"XcvrSprom,omitempty"`
	VendorName   string        `protobuf:"bytes,6,opt,name=VendorName,proto3" json:"VendorName,omitempty"`
	VendorOUI    string        `protobuf:"bytes,7,opt,name=VendorOUI,proto3" json:"VendorOUI,omitempty"`
	EncodingType uint32        `protobuf:"varint,8,opt,name=EncodingType,proto3" json:"EncodingType,omitempty"`
	SerialNumber string        `protobuf:"bytes,9,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	PartNumber   string        `protobuf:"bytes,10,opt,name=PartNumber,proto3" json:"PartNumber,omitempty"`
	Revision     string        `protobuf:"bytes,11,opt,name=Revision,proto3" json:"Revision,omitempty"`
}

func (m *PortXcvrStatus) Reset()                    { *m = PortXcvrStatus{} }
func (m *PortXcvrStatus) String() string            { return proto.CompactTextString(m) }
func (*PortXcvrStatus) ProtoMessage()               {}
func (*PortXcvrStatus) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{7} }

func (m *PortXcvrStatus) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortXcvrStatus) GetState() PortXcvrState {
	if m != nil {
		return m.State
	}
	return PortXcvrState_XCVR_STATE_REMOVED
}

func (m *PortXcvrStatus) GetPid() PortXcvrPid {
	if m != nil {
		return m.Pid
	}
	return PortXcvrPid_XCVR_PID_UNKNOWN
}

func (m *PortXcvrStatus) GetMediaType() MediaType {
	if m != nil {
		return m.MediaType
	}
	return MediaType_MEDIA_TYPE_NONE
}

func (m *PortXcvrStatus) GetXcvrSprom() []byte {
	if m != nil {
		return m.XcvrSprom
	}
	return nil
}

func (m *PortXcvrStatus) GetVendorName() string {
	if m != nil {
		return m.VendorName
	}
	return ""
}

func (m *PortXcvrStatus) GetVendorOUI() string {
	if m != nil {
		return m.VendorOUI
	}
	return ""
}

func (m *PortXcvrStatus) GetEncodingType() uint32 {
	if m != nil {
		return m.EncodingType
	}
	return 0
}

func (m *PortXcvrStatus) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *PortXcvrStatus) GetPartNumber() string {
	if m != nil {
		return m.PartNumber
	}
	return ""
}

func (m *PortXcvrStatus) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

type PortStatus struct {
	IfIndex    uint32          `protobuf:"varint,1,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	LinkStatus *PortLinkStatus `protobuf:"bytes,2,opt,name=LinkStatus" json:"LinkStatus,omitempty"`
	XcvrStatus *PortXcvrStatus `protobuf:"bytes,3,opt,name=XcvrStatus" json:"XcvrStatus,omitempty"`
	FSMState   PortLinkSM      `protobuf:"varint,4,opt,name=FSMState,proto3,enum=pds.PortLinkSM" json:"FSMState,omitempty"`
	MacId      uint32          `protobuf:"varint,5,opt,name=MacId,proto3" json:"MacId,omitempty"`
	MacCh      uint32          `protobuf:"varint,6,opt,name=MacCh,proto3" json:"MacCh,omitempty"`
}

func (m *PortStatus) Reset()                    { *m = PortStatus{} }
func (m *PortStatus) String() string            { return proto.CompactTextString(m) }
func (*PortStatus) ProtoMessage()               {}
func (*PortStatus) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{8} }

func (m *PortStatus) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

func (m *PortStatus) GetLinkStatus() *PortLinkStatus {
	if m != nil {
		return m.LinkStatus
	}
	return nil
}

func (m *PortStatus) GetXcvrStatus() *PortXcvrStatus {
	if m != nil {
		return m.XcvrStatus
	}
	return nil
}

func (m *PortStatus) GetFSMState() PortLinkSM {
	if m != nil {
		return m.FSMState
	}
	return PortLinkSM_PORT_LINK_FSM_DISABLED
}

func (m *PortStatus) GetMacId() uint32 {
	if m != nil {
		return m.MacId
	}
	return 0
}

func (m *PortStatus) GetMacCh() uint32 {
	if m != nil {
		return m.MacCh
	}
	return 0
}

type Port struct {
	Spec   *PortSpec   `protobuf:"bytes,1,opt,name=Spec" json:"Spec,omitempty"`
	Status *PortStatus `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
	Stats  *PortStats  `protobuf:"bytes,3,opt,name=Stats" json:"Stats,omitempty"`
}

func (m *Port) Reset()                    { *m = Port{} }
func (m *Port) String() string            { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()               {}
func (*Port) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{9} }

func (m *Port) GetSpec() *PortSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Port) GetStatus() *PortStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Port) GetStats() *PortStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type PortGetRequest struct {
	Id [][]byte `protobuf:"bytes,1,rep,name=Id" json:"Id,omitempty"`
}

func (m *PortGetRequest) Reset()                    { *m = PortGetRequest{} }
func (m *PortGetRequest) String() string            { return proto.CompactTextString(m) }
func (*PortGetRequest) ProtoMessage()               {}
func (*PortGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{10} }

func (m *PortGetRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type PortGetResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response  []*Port   `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *PortGetResponse) Reset()                    { *m = PortGetResponse{} }
func (m *PortGetResponse) String() string            { return proto.CompactTextString(m) }
func (*PortGetResponse) ProtoMessage()               {}
func (*PortGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{11} }

func (m *PortGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortGetResponse) GetResponse() []*Port {
	if m != nil {
		return m.Response
	}
	return nil
}

type PortUpdateRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt" json:"BatchCtxt,omitempty"`
	Spec      *PortSpec  `protobuf:"bytes,2,opt,name=Spec" json:"Spec,omitempty"`
}

func (m *PortUpdateRequest) Reset()                    { *m = PortUpdateRequest{} }
func (m *PortUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*PortUpdateRequest) ProtoMessage()               {}
func (*PortUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{12} }

func (m *PortUpdateRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *PortUpdateRequest) GetSpec() *PortSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type PortUpdateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
}

func (m *PortUpdateResponse) Reset()                    { *m = PortUpdateResponse{} }
func (m *PortUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*PortUpdateResponse) ProtoMessage()               {}
func (*PortUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{13} }

func (m *PortUpdateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func init() {
	proto.RegisterType((*MacStats)(nil), "pds.MacStats")
	proto.RegisterType((*MgmtMacStats)(nil), "pds.MgmtMacStats")
	proto.RegisterType((*TimeDuration)(nil), "pds.TimeDuration")
	proto.RegisterType((*LinkTimingInfo)(nil), "pds.LinkTimingInfo")
	proto.RegisterType((*PortStats)(nil), "pds.PortStats")
	proto.RegisterType((*PortSpec)(nil), "pds.PortSpec")
	proto.RegisterType((*PortLinkStatus)(nil), "pds.PortLinkStatus")
	proto.RegisterType((*PortXcvrStatus)(nil), "pds.PortXcvrStatus")
	proto.RegisterType((*PortStatus)(nil), "pds.PortStatus")
	proto.RegisterType((*Port)(nil), "pds.Port")
	proto.RegisterType((*PortGetRequest)(nil), "pds.PortGetRequest")
	proto.RegisterType((*PortGetResponse)(nil), "pds.PortGetResponse")
	proto.RegisterType((*PortUpdateRequest)(nil), "pds.PortUpdateRequest")
	proto.RegisterType((*PortUpdateResponse)(nil), "pds.PortUpdateResponse")
	proto.RegisterEnum("pds.MgmtMacStatsType", MgmtMacStatsType_name, MgmtMacStatsType_value)
	proto.RegisterEnum("pds.MacStatsType", MacStatsType_name, MacStatsType_value)
	proto.RegisterEnum("pds.PortAdminState", PortAdminState_name, PortAdminState_value)
	proto.RegisterEnum("pds.PortXcvrState", PortXcvrState_name, PortXcvrState_value)
	proto.RegisterEnum("pds.PortXcvrPid", PortXcvrPid_name, PortXcvrPid_value)
	proto.RegisterEnum("pds.MediaType", MediaType_name, MediaType_value)
	proto.RegisterEnum("pds.PortOperState", PortOperState_name, PortOperState_value)
	proto.RegisterEnum("pds.PortPauseType", PortPauseType_name, PortPauseType_value)
	proto.RegisterEnum("pds.PortLinkSM", PortLinkSM_name, PortLinkSM_value)
	proto.RegisterEnum("pds.PortLoopBackMode", PortLoopBackMode_name, PortLoopBackMode_value)
	proto.RegisterEnum("pds.PortFecType", PortFecType_name, PortFecType_value)
	proto.RegisterEnum("pds.PortType", PortType_name, PortType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PortSvc service

type PortSvcClient interface {
	PortGet(ctx context.Context, in *PortGetRequest, opts ...grpc.CallOption) (*PortGetResponse, error)
	PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*PortUpdateResponse, error)
	// given a uuid of a port, clear its stats or else clear stats of all ports
	PortStatsReset(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type portSvcClient struct {
	cc *grpc.ClientConn
}

func NewPortSvcClient(cc *grpc.ClientConn) PortSvcClient {
	return &portSvcClient{cc}
}

func (c *portSvcClient) PortGet(ctx context.Context, in *PortGetRequest, opts ...grpc.CallOption) (*PortGetResponse, error) {
	out := new(PortGetResponse)
	err := grpc.Invoke(ctx, "/pds.PortSvc/PortGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portSvcClient) PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*PortUpdateResponse, error) {
	out := new(PortUpdateResponse)
	err := grpc.Invoke(ctx, "/pds.PortSvc/PortUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portSvcClient) PortStatsReset(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pds.PortSvc/PortStatsReset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PortSvc service

type PortSvcServer interface {
	PortGet(context.Context, *PortGetRequest) (*PortGetResponse, error)
	PortUpdate(context.Context, *PortUpdateRequest) (*PortUpdateResponse, error)
	// given a uuid of a port, clear its stats or else clear stats of all ports
	PortStatsReset(context.Context, *Id) (*Empty, error)
}

func RegisterPortSvcServer(s *grpc.Server, srv PortSvcServer) {
	s.RegisterService(&_PortSvc_serviceDesc, srv)
}

func _PortSvc_PortGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortSvcServer).PortGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PortSvc/PortGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortSvcServer).PortGet(ctx, req.(*PortGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortSvc_PortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortSvcServer).PortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PortSvc/PortUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortSvcServer).PortUpdate(ctx, req.(*PortUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortSvc_PortStatsReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortSvcServer).PortStatsReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.PortSvc/PortStatsReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortSvcServer).PortStatsReset(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.PortSvc",
	HandlerType: (*PortSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PortGet",
			Handler:    _PortSvc_PortGet_Handler,
		},
		{
			MethodName: "PortUpdate",
			Handler:    _PortSvc_PortUpdate_Handler,
		},
		{
			MethodName: "PortStatsReset",
			Handler:    _PortSvc_PortStatsReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "port.proto",
}

func (m *MacStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Type))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *MgmtMacStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MgmtMacStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Type))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *TimeDuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeDuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sec != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Sec))
	}
	if m.Nsec != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Nsec))
	}
	return i, nil
}

func (m *LinkTimingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkTimingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LastDownTimestamp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(len(m.LastDownTimestamp)))
		i += copy(dAtA[i:], m.LastDownTimestamp)
	}
	if m.BringupDuration != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.BringupDuration.Size()))
		n1, err := m.BringupDuration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *PortStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MacStats) > 0 {
		for _, msg := range m.MacStats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MgmtMacStats) > 0 {
		for _, msg := range m.MgmtMacStats {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NumLinkDown != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.NumLinkDown))
	}
	if m.LinkTimingInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.LinkTimingInfo.Size()))
		n2, err := m.LinkTimingInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PortSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.PortNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.PortNumber))
	}
	if m.AdminState != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.AdminState))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Type))
	}
	if m.Speed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Speed))
	}
	if m.FECType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FECType))
	}
	if m.AutoNegEn {
		dAtA[i] = 0x38
		i++
		if m.AutoNegEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeBounceTimeout != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.DeBounceTimeout))
	}
	if m.Mtu != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Mtu))
	}
	if m.PauseType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.PauseType))
	}
	if m.TxPauseEn {
		dAtA[i] = 0x58
		i++
		if m.TxPauseEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RxPauseEn {
		dAtA[i] = 0x60
		i++
		if m.RxPauseEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LoopbackMode != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.LoopbackMode))
	}
	if m.NumLanes != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.NumLanes))
	}
	return i, nil
}

func (m *PortLinkStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortLinkStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperState != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.OperState))
	}
	if m.PortSpeed != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.PortSpeed))
	}
	if m.AutoNegEn {
		dAtA[i] = 0x18
		i++
		if m.AutoNegEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NumLanes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.NumLanes))
	}
	if m.FECType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FECType))
	}
	return i, nil
}

func (m *PortXcvrStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortXcvrStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Port))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.State))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Pid))
	}
	if m.MediaType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.MediaType))
	}
	if len(m.XcvrSprom) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPort(dAtA, i, uint64(len(m.XcvrSprom)))
		i += copy(dAtA[i:], m.XcvrSprom)
	}
	if len(m.VendorName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPort(dAtA, i, uint64(len(m.VendorName)))
		i += copy(dAtA[i:], m.VendorName)
	}
	if len(m.VendorOUI) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPort(dAtA, i, uint64(len(m.VendorOUI)))
		i += copy(dAtA[i:], m.VendorOUI)
	}
	if m.EncodingType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.EncodingType))
	}
	if len(m.SerialNumber) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPort(dAtA, i, uint64(len(m.SerialNumber)))
		i += copy(dAtA[i:], m.SerialNumber)
	}
	if len(m.PartNumber) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPort(dAtA, i, uint64(len(m.PartNumber)))
		i += copy(dAtA[i:], m.PartNumber)
	}
	if len(m.Revision) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPort(dAtA, i, uint64(len(m.Revision)))
		i += copy(dAtA[i:], m.Revision)
	}
	return i, nil
}

func (m *PortStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IfIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.IfIndex))
	}
	if m.LinkStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.LinkStatus.Size()))
		n3, err := m.LinkStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XcvrStatus != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.XcvrStatus.Size()))
		n4, err := m.XcvrStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.FSMState != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FSMState))
	}
	if m.MacId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.MacId))
	}
	if m.MacCh != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.MacCh))
	}
	return i, nil
}

func (m *Port) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Port) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Spec.Size()))
		n5, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Status.Size()))
		n6, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Stats != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Stats.Size()))
		n7, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *PortGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *PortGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BatchCtxt != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.BatchCtxt.Size()))
		n8, err := m.BatchCtxt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Spec.Size()))
		n9, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *PortUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func encodeVarintPort(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MacStats) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPort(uint64(m.Type))
	}
	if m.Count != 0 {
		n += 1 + sovPort(uint64(m.Count))
	}
	return n
}

func (m *MgmtMacStats) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPort(uint64(m.Type))
	}
	if m.Count != 0 {
		n += 1 + sovPort(uint64(m.Count))
	}
	return n
}

func (m *TimeDuration) Size() (n int) {
	var l int
	_ = l
	if m.Sec != 0 {
		n += 1 + sovPort(uint64(m.Sec))
	}
	if m.Nsec != 0 {
		n += 1 + sovPort(uint64(m.Nsec))
	}
	return n
}

func (m *LinkTimingInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.LastDownTimestamp)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	if m.BringupDuration != nil {
		l = m.BringupDuration.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortStats) Size() (n int) {
	var l int
	_ = l
	if len(m.MacStats) > 0 {
		for _, e := range m.MacStats {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	if len(m.MgmtMacStats) > 0 {
		for _, e := range m.MgmtMacStats {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	if m.NumLinkDown != 0 {
		n += 1 + sovPort(uint64(m.NumLinkDown))
	}
	if m.LinkTimingInfo != nil {
		l = m.LinkTimingInfo.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	if m.PortNumber != 0 {
		n += 1 + sovPort(uint64(m.PortNumber))
	}
	if m.AdminState != 0 {
		n += 1 + sovPort(uint64(m.AdminState))
	}
	if m.Type != 0 {
		n += 1 + sovPort(uint64(m.Type))
	}
	if m.Speed != 0 {
		n += 1 + sovPort(uint64(m.Speed))
	}
	if m.FECType != 0 {
		n += 1 + sovPort(uint64(m.FECType))
	}
	if m.AutoNegEn {
		n += 2
	}
	if m.DeBounceTimeout != 0 {
		n += 1 + sovPort(uint64(m.DeBounceTimeout))
	}
	if m.Mtu != 0 {
		n += 1 + sovPort(uint64(m.Mtu))
	}
	if m.PauseType != 0 {
		n += 1 + sovPort(uint64(m.PauseType))
	}
	if m.TxPauseEn {
		n += 2
	}
	if m.RxPauseEn {
		n += 2
	}
	if m.LoopbackMode != 0 {
		n += 1 + sovPort(uint64(m.LoopbackMode))
	}
	if m.NumLanes != 0 {
		n += 1 + sovPort(uint64(m.NumLanes))
	}
	return n
}

func (m *PortLinkStatus) Size() (n int) {
	var l int
	_ = l
	if m.OperState != 0 {
		n += 1 + sovPort(uint64(m.OperState))
	}
	if m.PortSpeed != 0 {
		n += 1 + sovPort(uint64(m.PortSpeed))
	}
	if m.AutoNegEn {
		n += 2
	}
	if m.NumLanes != 0 {
		n += 1 + sovPort(uint64(m.NumLanes))
	}
	if m.FECType != 0 {
		n += 1 + sovPort(uint64(m.FECType))
	}
	return n
}

func (m *PortXcvrStatus) Size() (n int) {
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovPort(uint64(m.Port))
	}
	if m.State != 0 {
		n += 1 + sovPort(uint64(m.State))
	}
	if m.Pid != 0 {
		n += 1 + sovPort(uint64(m.Pid))
	}
	if m.MediaType != 0 {
		n += 1 + sovPort(uint64(m.MediaType))
	}
	l = len(m.XcvrSprom)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	l = len(m.VendorName)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	l = len(m.VendorOUI)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	if m.EncodingType != 0 {
		n += 1 + sovPort(uint64(m.EncodingType))
	}
	l = len(m.SerialNumber)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	l = len(m.PartNumber)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	l = len(m.Revision)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortStatus) Size() (n int) {
	var l int
	_ = l
	if m.IfIndex != 0 {
		n += 1 + sovPort(uint64(m.IfIndex))
	}
	if m.LinkStatus != nil {
		l = m.LinkStatus.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.XcvrStatus != nil {
		l = m.XcvrStatus.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.FSMState != 0 {
		n += 1 + sovPort(uint64(m.FSMState))
	}
	if m.MacId != 0 {
		n += 1 + sovPort(uint64(m.MacId))
	}
	if m.MacCh != 0 {
		n += 1 + sovPort(uint64(m.MacCh))
	}
	return n
}

func (m *Port) Size() (n int) {
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortGetRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	return n
}

func sovPort(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPort(x uint64) (n int) {
	return sovPort(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MacStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MacStatsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MgmtMacStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MgmtMacStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MgmtMacStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MgmtMacStatsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeDuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeDuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeDuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sec", wireType)
			}
			m.Sec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sec |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nsec", wireType)
			}
			m.Nsec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nsec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkTimingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkTimingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkTimingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDownTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastDownTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BringupDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BringupDuration == nil {
				m.BringupDuration = &TimeDuration{}
			}
			if err := m.BringupDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacStats = append(m.MacStats, &MacStats{})
			if err := m.MacStats[len(m.MacStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MgmtMacStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MgmtMacStats = append(m.MgmtMacStats, &MgmtMacStats{})
			if err := m.MgmtMacStats[len(m.MgmtMacStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLinkDown", wireType)
			}
			m.NumLinkDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLinkDown |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkTimingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LinkTimingInfo == nil {
				m.LinkTimingInfo = &LinkTimingInfo{}
			}
			if err := m.LinkTimingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortNumber", wireType)
			}
			m.PortNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminState", wireType)
			}
			m.AdminState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminState |= (PortAdminState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PortType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= (PortSpeed(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FECType", wireType)
			}
			m.FECType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FECType |= (PortFecType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoNegEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoNegEn = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeBounceTimeout", wireType)
			}
			m.DeBounceTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeBounceTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PauseType", wireType)
			}
			m.PauseType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PauseType |= (PortPauseType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPauseEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxPauseEn = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPauseEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RxPauseEn = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopbackMode", wireType)
			}
			m.LoopbackMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoopbackMode |= (PortLoopBackMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLanes", wireType)
			}
			m.NumLanes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLanes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortLinkStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortLinkStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortLinkStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperState", wireType)
			}
			m.OperState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperState |= (PortOperState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortSpeed", wireType)
			}
			m.PortSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortSpeed |= (PortSpeed(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoNegEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoNegEn = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLanes", wireType)
			}
			m.NumLanes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLanes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FECType", wireType)
			}
			m.FECType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FECType |= (PortFecType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortXcvrStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortXcvrStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortXcvrStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (PortXcvrState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (PortXcvrPid(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= (MediaType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XcvrSprom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XcvrSprom = append(m.XcvrSprom[:0], dAtA[iNdEx:postIndex]...)
			if m.XcvrSprom == nil {
				m.XcvrSprom = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorOUI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorOUI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodingType", wireType)
			}
			m.EncodingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncodingType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerialNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerialNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Revision = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfIndex", wireType)
			}
			m.IfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LinkStatus == nil {
				m.LinkStatus = &PortLinkStatus{}
			}
			if err := m.LinkStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XcvrStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XcvrStatus == nil {
				m.XcvrStatus = &PortXcvrStatus{}
			}
			if err := m.XcvrStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FSMState", wireType)
			}
			m.FSMState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FSMState |= (PortLinkSM(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacId", wireType)
			}
			m.MacId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacCh", wireType)
			}
			m.MacCh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacCh |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Port) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Port: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Port: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PortSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PortStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &PortStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &Port{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PortSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPort(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPort
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPort
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPort
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPort(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPort = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPort   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("port.proto", fileDescriptorPort) }

var fileDescriptorPort = []byte{
	// 2781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x5a, 0x49, 0x73, 0x1b, 0xc7,
	0xd9, 0x16, 0xc0, 0x15, 0x4d, 0x90, 0x6c, 0x36, 0x49, 0x09, 0xa2, 0x24, 0x8a, 0x82, 0x2d, 0x9b,
	0x86, 0x6d, 0x9a, 0x00, 0x01, 0x2e, 0xb2, 0xbc, 0xcc, 0x06, 0x70, 0x2c, 0xcc, 0xe2, 0x9e, 0x81,
	0x96, 0xaf, 0xbe, 0xca, 0x14, 0x44, 0x8c, 0x29, 0x94, 0x4d, 0x00, 0x21, 0x06, 0xb6, 0x74, 0x49,
	0xe5, 0x90, 0x5f, 0x90, 0x3f, 0x92, 0xbf, 0x91, 0x43, 0x0e, 0x39, 0xe6, 0xe4, 0xa4, 0x74, 0x4b,
	0x8e, 0xae, 0xca, 0x25, 0xa7, 0x54, 0x77, 0x0f, 0x66, 0xba, 0x67, 0x30, 0x72, 0x55, 0x2e, 0x2a,
	0xe0, 0x79, 0xde, 0xee, 0x77, 0xe9, 0xe7, 0x7d, 0x67, 0xd8, 0x10, 0x00, 0xa3, 0xe1, 0x75, 0x70,
	0x30, 0xba, 0x1e, 0x06, 0x43, 0x34, 0x37, 0xea, 0x8d, 0x77, 0xd6, 0xaf, 0xfc, 0xa0, 0xfb, 0x19,
	0xf9, 0x87, 0xa1, 0x3b, 0x2b, 0xc1, 0x9b, 0x91, 0x3f, 0x66, 0x5f, 0xca, 0x2d, 0xb0, 0x6c, 0x74,
	0x2f, 0x9c, 0xa0, 0x1b, 0x8c, 0xd1, 0x43, 0x30, 0xef, 0xbe, 0x19, 0xf9, 0xa5, 0xdc, 0x5e, 0x6e,
	0x7f, 0xad, 0xb6, 0x71, 0x30, 0xea, 0x8d, 0x0f, 0xa6, 0x24, 0x21, 0x30, 0xa5, 0xd1, 0x16, 0x58,
	0x50, 0x86, 0x93, 0x41, 0x50, 0xca, 0xef, 0xe5, 0xf6, 0xe7, 0x31, 0xfb, 0x52, 0xb6, 0x40, 0xd1,
	0xb8, 0xbc, 0x0a, 0xa2, 0xcd, 0x3e, 0x12, 0x36, 0xdb, 0x66, 0x9b, 0x71, 0x06, 0xbf, 0xba, 0x61,
	0x1d, 0x14, 0xdd, 0xfe, 0x95, 0xaf, 0x4e, 0xae, 0xbb, 0x41, 0x7f, 0x38, 0x40, 0x10, 0xcc, 0x8d,
	0xfd, 0x0b, 0xba, 0xdf, 0x2a, 0x26, 0x1f, 0x11, 0x02, 0xf3, 0x03, 0x02, 0xb1, 0x65, 0xf4, 0x73,
	0xf9, 0x77, 0x60, 0xad, 0xdd, 0x1f, 0x7c, 0xef, 0xf6, 0xaf, 0xfa, 0x83, 0x4b, 0x7d, 0xf0, 0xdd,
	0x10, 0x1d, 0x80, 0xcd, 0x1f, 0xba, 0xe3, 0xc0, 0xeb, 0x0d, 0x7f, 0x1a, 0x78, 0x41, 0xff, 0xca,
	0x1f, 0x07, 0xdd, 0xab, 0x11, 0xdd, 0xa7, 0x80, 0x37, 0x08, 0xa5, 0x0e, 0x7f, 0x1a, 0xb8, 0x53,
	0x02, 0x3d, 0x06, 0xf0, 0xe5, 0x75, 0x7f, 0x70, 0x39, 0x19, 0x79, 0xbd, 0xd0, 0x37, 0xf5, 0xb0,
	0x12, 0x56, 0x84, 0x0f, 0x0a, 0xaf, 0x87, 0xa6, 0x53, 0xa0, 0xfc, 0x97, 0x1c, 0x28, 0xd8, 0xc3,
	0xeb, 0x60, 0x5a, 0x84, 0xa8, 0xba, 0xa5, 0xdc, 0xde, 0xdc, 0xfe, 0x4a, 0x6d, 0x55, 0xa8, 0x2a,
	0x8e, 0x8b, 0xdf, 0x10, 0xeb, 0x57, 0xca, 0x53, 0xf3, 0x8d, 0x54, 0xdd, 0xb0, 0x58, 0xe6, 0x3d,
	0xb0, 0x62, 0x4e, 0xae, 0x48, 0xca, 0x24, 0x8b, 0xd2, 0x1c, 0xad, 0x0e, 0x0f, 0xa1, 0xcf, 0x93,
	0x15, 0x29, 0xcd, 0xd3, 0x6c, 0x36, 0xe9, 0xd6, 0x22, 0x85, 0x13, 0xa6, 0xe5, 0xbf, 0xcf, 0x83,
	0x65, 0x9a, 0xce, 0xc8, 0xbf, 0x40, 0x65, 0x90, 0xd7, 0x7b, 0xb4, 0x70, 0x45, 0x19, 0xfd, 0xf2,
	0xf3, 0xfd, 0x35, 0x22, 0xaa, 0x47, 0x57, 0xdd, 0x41, 0xaf, 0x1b, 0x0c, 0xaf, 0xdf, 0xe0, 0xbc,
	0xde, 0x43, 0x8f, 0x01, 0x20, 0xf6, 0xe6, 0xe4, 0xea, 0xa5, 0x7f, 0x4d, 0xeb, 0xb6, 0x2a, 0xdf,
	0xfd, 0xe5, 0xe7, 0xfb, 0x25, 0xd1, 0xf6, 0x93, 0xeb, 0xee, 0xe0, 0xd2, 0x7f, 0x54, 0xfd, 0xb4,
	0x86, 0x39, 0x7b, 0xd4, 0x02, 0x40, 0xea, 0x5d, 0xf5, 0x07, 0x24, 0x37, 0x9f, 0x26, 0xb3, 0x16,
	0xc6, 0x49, 0x8c, 0x62, 0x6a, 0xa6, 0x7b, 0x6e, 0x29, 0x6a, 0x84, 0xea, 0x9b, 0xa7, 0x5b, 0xac,
	0x46, 0x5b, 0x10, 0x70, 0xe6, 0x62, 0xa6, 0xc4, 0x0f, 0xc0, 0x82, 0x33, 0xf2, 0xfd, 0x5e, 0x69,
	0x81, 0xae, 0x83, 0x07, 0xac, 0x55, 0xc2, 0x0a, 0xf8, 0x3d, 0xcc, 0x68, 0x54, 0x01, 0x4b, 0x4d,
	0x4d, 0xa1, 0x1e, 0x16, 0x43, 0xcb, 0xa9, 0x87, 0xa6, 0x7f, 0x41, 0xa5, 0x3d, 0x35, 0x40, 0x77,
	0x41, 0x41, 0x9a, 0x04, 0x43, 0xd3, 0xbf, 0xd4, 0x06, 0xa5, 0xa5, 0xbd, 0xdc, 0xfe, 0x32, 0x8e,
	0x01, 0xb4, 0x0f, 0xd6, 0x55, 0x5f, 0x1e, 0x4e, 0x06, 0x17, 0x3e, 0x11, 0xd6, 0x70, 0x12, 0x94,
	0x96, 0xe9, 0x19, 0x26, 0x61, 0xa2, 0x7f, 0x23, 0x98, 0x94, 0x0a, 0x4c, 0xff, 0x46, 0x30, 0x41,
	0x87, 0xa0, 0x60, 0x77, 0x27, 0x63, 0x9f, 0xc6, 0x01, 0x68, 0x1c, 0x28, 0x8a, 0x23, 0x62, 0x70,
	0x6c, 0x44, 0x62, 0x71, 0x5f, 0xd3, 0xaf, 0xda, 0xa0, 0xb4, 0xc2, 0x62, 0x89, 0x00, 0xc2, 0xe2,
	0x88, 0x2d, 0x32, 0x36, 0x02, 0xd0, 0x19, 0x28, 0xb6, 0x87, 0xc3, 0xd1, 0xcb, 0xee, 0xc5, 0xf7,
	0xc6, 0xb0, 0xe7, 0x97, 0x56, 0xb9, 0xc6, 0x26, 0x0e, 0x09, 0x29, 0x87, 0x24, 0x16, 0x4c, 0xd1,
	0x0e, 0x58, 0x26, 0x8a, 0xec, 0x0e, 0xfc, 0x71, 0x69, 0x8d, 0xc6, 0x1f, 0x7d, 0x2f, 0xff, 0x2d,
	0x07, 0xd6, 0xe8, 0xf2, 0xfe, 0xe0, 0x7b, 0x72, 0x76, 0x93, 0x31, 0xc9, 0xcb, 0x1a, 0xf9, 0xd7,
	0x4c, 0x04, 0xb9, 0x44, 0x5e, 0x11, 0x83, 0x63, 0x23, 0x74, 0x10, 0x36, 0x1d, 0x3d, 0xbb, 0x7c,
	0xc6, 0xd9, 0xc5, 0x26, 0xe2, 0x99, 0xcc, 0x25, 0xcf, 0x84, 0x0f, 0x77, 0x5e, 0x0c, 0x97, 0x3f,
	0xf9, 0x85, 0x5f, 0x39, 0xf9, 0xf2, 0xef, 0xe7, 0x58, 0x6a, 0xcf, 0x2f, 0x7e, 0xbc, 0x0e, 0x53,
	0x43, 0x60, 0x9e, 0x20, 0x34, 0xab, 0x05, 0x4c, 0x3f, 0xa3, 0x7d, 0xb0, 0xc0, 0x52, 0xcd, 0x27,
	0x52, 0x9d, 0xae, 0xf3, 0x31, 0x33, 0x40, 0x65, 0x30, 0x67, 0xf7, 0x7b, 0x61, 0x5f, 0x40, 0xc1,
	0xce, 0xee, 0xf7, 0x30, 0x21, 0xd1, 0x27, 0xa0, 0x60, 0xf8, 0xbd, 0x7e, 0x97, 0x93, 0xff, 0x1a,
	0x1b, 0x22, 0x53, 0x14, 0xc7, 0x06, 0xa4, 0x10, 0xd4, 0xcb, 0xe8, 0x7a, 0x78, 0x45, 0x13, 0x2a,
	0xe2, 0x18, 0x40, 0xbb, 0x00, 0x3c, 0xf5, 0x07, 0xbd, 0xe1, 0xb5, 0xd9, 0xbd, 0x62, 0x4a, 0x2f,
	0x60, 0x0e, 0x21, 0xab, 0xd9, 0x37, 0xab, 0xa3, 0x53, 0x69, 0x17, 0x70, 0x0c, 0xa0, 0x32, 0x28,
	0x6a, 0x83, 0x8b, 0x61, 0xaf, 0x3f, 0xb8, 0xa4, 0xc1, 0x30, 0x5d, 0x0b, 0x18, 0xb1, 0x71, 0xfc,
	0xeb, 0x7e, 0xf7, 0x87, 0x70, 0x60, 0x14, 0xe8, 0x26, 0x02, 0x46, 0xa2, 0xb0, 0xbb, 0xd1, 0x48,
	0x01, 0x2c, 0x8a, 0x18, 0x21, 0xc7, 0x85, 0xfd, 0x1f, 0xfb, 0x63, 0x32, 0xa8, 0x57, 0x28, 0x1b,
	0x7d, 0x2f, 0xff, 0x33, 0xc7, 0xe6, 0x51, 0x58, 0xfe, 0x12, 0x58, 0xd2, 0xbf, 0xd3, 0x07, 0x3d,
	0xff, 0x75, 0xf8, 0x1c, 0x99, 0x7e, 0x45, 0x47, 0x00, 0xc4, 0x0a, 0x0c, 0xe7, 0x7d, 0x3c, 0x79,
	0x62, 0x0a, 0x73, 0x66, 0x64, 0x51, 0x7c, 0xb6, 0xf4, 0x58, 0xf8, 0x45, 0x31, 0x85, 0x39, 0x33,
	0xf4, 0x31, 0x58, 0x6e, 0x3a, 0x06, 0x3b, 0x71, 0x76, 0x3e, 0xeb, 0xa2, 0x1f, 0x03, 0x47, 0x06,
	0xe4, 0xd1, 0x68, 0x74, 0x2f, 0x74, 0x36, 0x90, 0x56, 0x31, 0xfb, 0x12, 0xa2, 0xca, 0x2b, 0x7a,
	0x24, 0x0c, 0x55, 0x5e, 0x95, 0x5f, 0x33, 0x6d, 0xa1, 0x07, 0x60, 0x9e, 0x8c, 0x6b, 0x9a, 0xe1,
	0x0a, 0x37, 0xfb, 0x08, 0x88, 0x29, 0x85, 0x3e, 0x04, 0x8b, 0x42, 0xa6, 0x71, 0x04, 0x61, 0xc0,
	0x21, 0x8d, 0xde, 0x67, 0xda, 0x9c, 0x26, 0xb7, 0x26, 0xd8, 0x8d, 0x99, 0x2e, 0xc7, 0xe5, 0x3d,
	0xa6, 0xf3, 0x96, 0x1f, 0x60, 0xff, 0xb7, 0x13, 0x7f, 0x1c, 0xa0, 0xb5, 0xf0, 0x51, 0x31, 0xb7,
	0x5f, 0x24, 0x8f, 0x85, 0xf2, 0x2b, 0xb0, 0x1e, 0x59, 0x8c, 0x47, 0xc3, 0xc1, 0x98, 0xf6, 0xac,
	0x34, 0xea, 0x87, 0x61, 0xe4, 0x84, 0x9e, 0x8d, 0x70, 0x1c, 0x9b, 0xa0, 0x87, 0xe4, 0x98, 0xd9,
	0xda, 0xf0, 0xe1, 0x58, 0x88, 0xa2, 0xc1, 0x11, 0x55, 0xfe, 0x0e, 0x6c, 0x10, 0xa4, 0x33, 0xea,
	0x91, 0xc6, 0x09, 0xc3, 0x39, 0x00, 0x05, 0xb9, 0x1b, 0x5c, 0xbc, 0x52, 0x82, 0xd7, 0x41, 0x58,
	0x97, 0xa9, 0xaf, 0x08, 0xc7, 0xb1, 0x49, 0x54, 0xc2, 0x7c, 0x66, 0x09, 0xcb, 0x2a, 0x40, 0xbc,
	0x9f, 0xff, 0x2d, 0xa9, 0xca, 0x1f, 0x96, 0x01, 0x4c, 0xbe, 0x15, 0xa1, 0xdb, 0x60, 0xdb, 0x68,
	0x19, 0xae, 0x67, 0x48, 0x8a, 0xd7, 0xc4, 0x92, 0xa1, 0x39, 0x1e, 0x7e, 0xee, 0x59, 0x4f, 0xe0,
	0x0d, 0xb4, 0x03, 0x6e, 0xce, 0xa0, 0xa4, 0x76, 0x1b, 0xe6, 0xd0, 0x2e, 0xd8, 0x99, 0xc1, 0xc9,
	0x92, 0xea, 0x35, 0x15, 0x07, 0xe6, 0xdf, 0xc1, 0x93, 0xf5, 0x73, 0x82, 0x5b, 0x4b, 0x71, 0x35,
	0x77, 0xea, 0x76, 0x5e, 0x70, 0x1b, 0x53, 0x64, 0xd9, 0x42, 0xc6, 0xb6, 0x1d, 0x53, 0x57, 0x24,
	0xc7, 0x85, 0x8b, 0x68, 0x0f, 0xdc, 0x9d, 0xc1, 0x1b, 0x9d, 0xb6, 0xcb, 0x2c, 0x96, 0x32, 0x2c,
	0x64, 0x6c, 0x49, 0x2a, 0xb5, 0x58, 0x46, 0x77, 0x41, 0x69, 0x86, 0x85, 0x2d, 0x75, 0x1c, 0x0d,
	0x16, 0xd0, 0x03, 0x70, 0x2f, 0x23, 0xb1, 0xb6, 0x66, 0xb6, 0xdc, 0x73, 0x08, 0x32, 0x4c, 0x3a,
	0xa6, 0xaa, 0x61, 0x47, 0xff, 0x3f, 0x4d, 0x85, 0x2b, 0x19, 0x51, 0x58, 0x4f, 0xa7, 0x16, 0xc5,
	0x0c, 0x8b, 0x26, 0x96, 0x5a, 0x86, 0x66, 0xba, 0x0e, 0x5c, 0x45, 0xf7, 0xc0, 0xed, 0x19, 0x16,
	0xdf, 0x48, 0xb2, 0xac, 0x61, 0xb8, 0x96, 0x71, 0x7a, 0xc7, 0x75, 0x19, 0xae, 0xa3, 0xfb, 0xe0,
	0xce, 0x2c, 0xae, 0x21, 0x7b, 0xd5, 0xda, 0x89, 0x0c, 0x61, 0x86, 0xf7, 0x6a, 0xed, 0x54, 0xf6,
	0x6a, 0x8d, 0x86, 0x0c, 0x37, 0x32, 0x2c, 0x6a, 0x8d, 0x63, 0xd9, 0x6b, 0x54, 0xab, 0x32, 0x44,
	0x19, 0x65, 0x68, 0x54, 0x6b, 0xb2, 0x57, 0x3d, 0xac, 0x1d, 0xc9, 0x70, 0x13, 0x95, 0xc1, 0xee,
	0x2c, 0x37, 0x87, 0xb5, 0xba, 0xec, 0x55, 0x1b, 0xd5, 0x53, 0x19, 0x6e, 0x65, 0xc4, 0xda, 0x72,
	0x43, 0x83, 0xed, 0xac, 0x4a, 0xe9, 0x4d, 0xcb, 0x6b, 0x76, 0xda, 0x6d, 0x78, 0x73, 0x96, 0xc6,
	0x5d, 0x2a, 0xb6, 0x5b, 0xb3, 0xaa, 0xe4, 0x32, 0xb1, 0x95, 0x32, 0x38, 0x59, 0x52, 0xe1, 0xed,
	0x59, 0xfa, 0x65, 0x5b, 0xee, 0x08, 0xfa, 0x89, 0x29, 0xd7, 0x72, 0xa5, 0x36, 0xbc, 0x33, 0x4b,
	0xc1, 0x6e, 0xac, 0xe0, 0xbb, 0xb3, 0xb2, 0x71, 0x79, 0x05, 0xdf, 0xcb, 0xb0, 0x88, 0x15, 0xbc,
	0x3b, 0x4b, 0xc1, 0xee, 0x54, 0xc1, 0xf7, 0x2b, 0xff, 0x86, 0xa0, 0x28, 0x8c, 0x00, 0x08, 0x8a,
	0x89, 0xce, 0xdf, 0x00, 0xab, 0xc9, 0x86, 0xdf, 0x06, 0x1b, 0xb3, 0xfa, 0x3c, 0x05, 0xb3, 0xf6,
	0x86, 0xa0, 0x98, 0xe8, 0xea, 0x0d, 0xb0, 0x9a, 0x6c, 0x66, 0x61, 0x6d, 0xdc, 0xc3, 0xb7, 0xc0,
	0xe6, 0xec, 0xd6, 0x15, 0x08, 0xbe, 0x63, 0x37, 0xc1, 0x7a, 0xba, 0x51, 0x4b, 0x60, 0x2b, 0xa3,
	0x3f, 0x05, 0x46, 0x68, 0x4b, 0xc1, 0x03, 0xdf, 0x8d, 0x02, 0xc1, 0x37, 0xe1, 0x16, 0x80, 0x33,
	0x7a, 0xef, 0x26, 0x40, 0x5c, 0x40, 0x58, 0x67, 0x31, 0xad, 0x13, 0xd5, 0xc4, 0xb8, 0xe3, 0x5a,
	0x86, 0xad, 0xa9, 0x9e, 0x82, 0x15, 0x08, 0xc5, 0x25, 0xae, 0x65, 0x79, 0x6d, 0xcb, 0x6c, 0xc1,
	0x0d, 0xd1, 0xf3, 0xd3, 0xb6, 0x64, 0x7a, 0x2d, 0xcb, 0x52, 0x21, 0x12, 0xab, 0xa7, 0x62, 0xcb,
	0xb6, 0x35, 0x15, 0x6e, 0xa2, 0x3b, 0xe0, 0x56, 0x0c, 0xb7, 0x35, 0xc7, 0xf1, 0xdc, 0x73, 0xc9,
	0xa4, 0x7d, 0xbf, 0x25, 0x9e, 0x2b, 0x81, 0xb6, 0x45, 0xbf, 0xd1, 0x04, 0xb8, 0x29, 0xfa, 0x8d,
	0x1b, 0xff, 0x96, 0x48, 0xc4, 0xfd, 0x5e, 0x12, 0xcb, 0xca, 0xb5, 0xf9, 0x6d, 0x31, 0x6d, 0xbe,
	0xbb, 0x77, 0x12, 0x54, 0xa3, 0x7a, 0x26, 0x7b, 0xb5, 0xc3, 0xfa, 0x89, 0x0c, 0xef, 0x88, 0x54,
	0xed, 0xb0, 0x7e, 0x2a, 0x7b, 0xf5, 0xc3, 0xb3, 0x86, 0x0c, 0xef, 0x8a, 0x54, 0xfd, 0xf0, 0xec,
	0x58, 0xf6, 0x4e, 0xab, 0x67, 0x55, 0x19, 0xde, 0x13, 0xa9, 0xd3, 0xea, 0x59, 0x4d, 0xf6, 0xce,
	0x6a, 0xd5, 0x86, 0x0c, 0x77, 0x45, 0x99, 0x58, 0xee, 0xb9, 0x86, 0xe1, 0x7d, 0x4e, 0xfc, 0xac,
	0x7f, 0xf7, 0xb8, 0x22, 0x85, 0x93, 0xe0, 0x81, 0x08, 0x91, 0x01, 0x50, 0xe6, 0x14, 0xce, 0xd6,
	0xbd, 0x47, 0xb6, 0x4f, 0xb6, 0xfb, 0xfb, 0xdc, 0x29, 0x71, 0x5d, 0xfe, 0x90, 0x2b, 0xa2, 0xd0,
	0xdc, 0x1f, 0x88, 0x44, 0xac, 0xf1, 0x0f, 0xb9, 0xe0, 0xa3, 0x56, 0xde, 0xe7, 0x0e, 0xcf, 0xe5,
	0x74, 0xf6, 0x11, 0x42, 0x60, 0x2d, 0xc6, 0x89, 0x68, 0x60, 0x85, 0x13, 0x86, 0x9b, 0x14, 0xc6,
	0xc7, 0x62, 0x82, 0x04, 0xfa, 0x44, 0xdc, 0x3b, 0x12, 0xc6, 0xa7, 0x62, 0x84, 0xb1, 0x30, 0x0e,
	0x44, 0x22, 0x16, 0xc6, 0x67, 0x9c, 0x30, 0x5c, 0x41, 0x18, 0x87, 0xdc, 0x61, 0xb9, 0xa2, 0x30,
	0xaa, 0x09, 0x8a, 0x13, 0x46, 0x4d, 0xa4, 0x78, 0x61, 0x1c, 0x89, 0x14, 0x2f, 0x8c, 0xba, 0x48,
	0xf1, 0xc2, 0x68, 0x88, 0xb5, 0x65, 0xc2, 0x38, 0x4e, 0x14, 0x1c, 0xeb, 0xde, 0x21, 0x3c, 0x49,
	0x83, 0x55, 0x78, 0x9a, 0x06, 0x6b, 0xf0, 0x2c, 0x0d, 0x1e, 0xc1, 0x47, 0x69, 0xb0, 0x0e, 0x3f,
	0x4f, 0x83, 0x0d, 0xf8, 0x38, 0x0d, 0x1e, 0xc3, 0x2f, 0xd2, 0xe0, 0x09, 0xfc, 0x32, 0x31, 0xfc,
	0x68, 0x9c, 0x5f, 0xa5, 0xc1, 0x2a, 0xfc, 0x3a, 0x0d, 0xd6, 0xa0, 0x94, 0x06, 0x8f, 0xa0, 0x9c,
	0x06, 0xeb, 0x50, 0x49, 0x83, 0x0d, 0xa8, 0xa6, 0xc1, 0x63, 0xa8, 0xa5, 0xc1, 0x13, 0xd8, 0x24,
	0xfa, 0xe3, 0x44, 0xea, 0x1d, 0x7a, 0xd5, 0x8e, 0xe3, 0x29, 0x56, 0xc7, 0x74, 0x61, 0x2b, 0x49,
	0x56, 0x39, 0xf2, 0x3c, 0x49, 0xd6, 0x38, 0x52, 0x4f, 0x92, 0x47, 0x1c, 0xf9, 0x4d, 0x92, 0xac,
	0x73, 0xe4, 0x93, 0x24, 0xd9, 0xe0, 0xc8, 0x76, 0x92, 0x3c, 0xe6, 0x48, 0x23, 0x49, 0x9e, 0x70,
	0xa4, 0x49, 0x48, 0x9c, 0x91, 0xa7, 0x95, 0x24, 0xf9, 0x3c, 0xed, 0x24, 0xc9, 0xe7, 0xf9, 0x6d,
	0x92, 0xe4, 0xf3, 0xc4, 0x49, 0x92, 0xcf, 0xd3, 0x49, 0x92, 0x7c, 0x9e, 0x6e, 0x92, 0xe4, 0xf3,
	0xec, 0x24, 0x49, 0x3e, 0xcf, 0xa7, 0x64, 0x3e, 0x4c, 0x9f, 0xb6, 0x1c, 0xfe, 0x4c, 0x1c, 0x03,
	0x2e, 0xee, 0x98, 0x8a, 0xe4, 0x6a, 0x2a, 0x7c, 0x5e, 0xf1, 0xd8, 0x1f, 0x6e, 0xdc, 0xc5, 0xd9,
	0x6d, 0xb0, 0x6d, 0x5b, 0xd8, 0xf5, 0x24, 0xd5, 0xd0, 0x4d, 0xcf, 0x71, 0x25, 0x57, 0xf3, 0x4c,
	0xcb, 0xd4, 0xe0, 0x8d, 0x99, 0x94, 0x6a, 0x3d, 0x33, 0x61, 0x8e, 0x38, 0x48, 0x51, 0x1d, 0x1b,
	0xe6, 0x2b, 0x7f, 0xcc, 0x81, 0x55, 0xe1, 0x2a, 0x83, 0xc4, 0xf8, 0x5c, 0x79, 0x8a, 0x43, 0x23,
	0xac, 0x19, 0xd6, 0x53, 0x4d, 0x85, 0x37, 0xc8, 0x16, 0x1c, 0xae, 0x9b, 0x8e, 0x86, 0x49, 0x8c,
	0xb9, 0xc4, 0x02, 0x5b, 0x33, 0x55, 0xdd, 0x6c, 0xc1, 0x3c, 0x09, 0x87, 0xc3, 0x1d, 0x1b, 0x5b,
	0x86, 0x87, 0x35, 0x49, 0x85, 0x73, 0xe4, 0x35, 0x7c, 0x26, 0xe5, 0x69, 0x18, 0xc3, 0xf9, 0xca,
	0x7f, 0x16, 0xc1, 0x0a, 0x77, 0x6f, 0x42, 0x5e, 0x18, 0xa8, 0xb9, 0xad, 0xab, 0x5e, 0xc7, 0x7c,
	0x62, 0x92, 0x9c, 0xe8, 0x9f, 0x5a, 0x11, 0xfa, 0xad, 0xd3, 0xb4, 0xbd, 0xea, 0xe1, 0x61, 0xcb,
	0x53, 0x70, 0x1d, 0xe6, 0x22, 0x07, 0x11, 0x57, 0x3f, 0x6c, 0xc9, 0x92, 0xa3, 0x51, 0x3a, 0x2f,
	0xd0, 0x84, 0xad, 0x35, 0xa6, 0xac, 0xe7, 0x70, 0xe1, 0xcd, 0xa0, 0xdb, 0x70, 0xfe, 0x5d, 0xb4,
	0x09, 0x17, 0xc8, 0x9b, 0xa4, 0xe8, 0xbb, 0x41, 0xc3, 0xaa, 0x79, 0x4d, 0x05, 0x2e, 0x46, 0x55,
	0x49, 0xb2, 0x70, 0x29, 0x23, 0x21, 0xc9, 0x52, 0x60, 0x2d, 0x8b, 0x53, 0x14, 0x78, 0x94, 0xc1,
	0x39, 0xb8, 0x0e, 0xeb, 0x19, 0x5c, 0x1b, 0xd7, 0x61, 0x23, 0x83, 0xd3, 0x70, 0x1d, 0x1e, 0x67,
	0x17, 0x90, 0xd0, 0x27, 0xd9, 0x34, 0xf1, 0x7a, 0x9a, 0x4d, 0x13, 0xc7, 0x67, 0xd9, 0x34, 0xc9,
	0xf5, 0x11, 0x69, 0xa1, 0x99, 0xf5, 0x75, 0x30, 0xfc, 0x3c, 0x93, 0x6c, 0x63, 0xf8, 0x38, 0x93,
	0xd4, 0x30, 0xfc, 0x42, 0x38, 0x17, 0x9e, 0x24, 0x4e, 0xbf, 0x4c, 0x2d, 0xad, 0x46, 0x09, 0xc1,
	0xaf, 0x32, 0xc9, 0x36, 0x86, 0x5f, 0xa7, 0xf6, 0x8d, 0x49, 0x03, 0x4a, 0x99, 0x4b, 0x35, 0x0c,
	0xe5, 0xcc, 0xa5, 0x24, 0x24, 0x25, 0x73, 0xa9, 0xd2, 0x81, 0x6a, 0x5a, 0x65, 0x4c, 0xfd, 0xcf,
	0x54, 0xa3, 0x0e, 0x35, 0x61, 0x69, 0xcc, 0xda, 0x8e, 0x51, 0x87, 0xcd, 0xec, 0x42, 0x28, 0x0a,
	0x6c, 0x55, 0x0c, 0xee, 0x7e, 0x92, 0x3c, 0x95, 0x0c, 0x4d, 0xd5, 0x25, 0xcf, 0x7d, 0x61, 0x47,
	0x73, 0x66, 0x1b, 0x6c, 0x70, 0xa0, 0x42, 0xde, 0xa2, 0x31, 0xcc, 0x91, 0x2e, 0xe5, 0xe0, 0xa6,
	0x4e, 0x5e, 0xeb, 0xf3, 0x95, 0xdf, 0xb0, 0xf9, 0x12, 0x5f, 0x05, 0x4f, 0xa7, 0x94, 0x65, 0x6b,
	0x6c, 0x00, 0x74, 0x9c, 0xe9, 0xc6, 0xd3, 0x29, 0xc5, 0x53, 0x1d, 0x1b, 0xe6, 0x66, 0xae, 0xa1,
	0x93, 0x2d, 0x5f, 0xf9, 0x7f, 0xb6, 0x7f, 0x7c, 0x85, 0x5e, 0x02, 0x5b, 0xd4, 0x96, 0x4d, 0x59,
	0x3e, 0xee, 0x19, 0x4c, 0x5b, 0x37, 0x9f, 0x70, 0xe3, 0x91, 0x63, 0xec, 0xa6, 0x02, 0xf3, 0x95,
	0x7f, 0x2d, 0xb0, 0xeb, 0x49, 0x76, 0xef, 0x47, 0x3a, 0x86, 0xda, 0x91, 0x65, 0x5e, 0xd3, 0x31,
	0x3c, 0x55, 0x77, 0x24, 0xb9, 0x4d, 0xe7, 0xe3, 0x34, 0xc6, 0x88, 0xd3, 0x4c, 0x46, 0xe5, 0x22,
	0xc7, 0x11, 0x25, 0x99, 0x9e, 0xd2, 0x6c, 0xb1, 0x41, 0x94, 0x62, 0xa2, 0x3d, 0xe7, 0xd2, 0xfe,
	0x24, 0x3a, 0xbc, 0xb1, 0xcb, 0xa6, 0x50, 0x8a, 0x7b, 0x26, 0xe9, 0xae, 0x77, 0xae, 0xa8, 0x70,
	0x61, 0x26, 0xad, 0x58, 0x86, 0xdd, 0xd6, 0x5c, 0x0d, 0x2e, 0x12, 0x0d, 0x88, 0xb4, 0xa3, 0x61,
	0x55, 0x73, 0x68, 0x58, 0x4b, 0xe8, 0x01, 0xb8, 0x27, 0xb2, 0x74, 0xe3, 0xd0, 0x04, 0xab, 0x2f,
	0xe0, 0x72, 0x3a, 0x5d, 0xf2, 0x87, 0x33, 0x59, 0x5d, 0x40, 0xf7, 0xc1, 0x9d, 0xc4, 0xde, 0x7a,
	0xcb, 0x94, 0xda, 0x9e, 0xaa, 0xb9, 0x9a, 0xe2, 0x42, 0x90, 0x36, 0x20, 0x59, 0x37, 0x35, 0xcf,
	0xed, 0x98, 0xe4, 0xd1, 0xb1, 0x92, 0x8e, 0x8e, 0x63, 0x8b, 0x68, 0x17, 0xec, 0xa4, 0xd9, 0xa8,
	0x6a, 0xab, 0xe4, 0x8f, 0xfd, 0x34, 0x4f, 0xcb, 0xe6, 0xe9, 0x8a, 0xd4, 0x86, 0x6b, 0xe9, 0x00,
	0x88, 0x05, 0xcd, 0x91, 0x1a, 0xac, 0xbf, 0x6b, 0x0b, 0x9b, 0x58, 0xc0, 0x77, 0x6c, 0x41, 0x0d,
	0x36, 0xd0, 0x43, 0xf0, 0x20, 0x6d, 0x40, 0x38, 0x4f, 0xb1, 0x4c, 0x57, 0x37, 0x3b, 0x56, 0xc7,
	0x81, 0x08, 0x7d, 0x04, 0x1e, 0x8a, 0x66, 0x4a, 0x5b, 0x93, 0x30, 0xad, 0x26, 0x79, 0xf6, 0xba,
	0x9a, 0xd7, 0x94, 0x3a, 0x6d, 0xd7, 0x81, 0x9b, 0x69, 0x97, 0xd4, 0x1d, 0xb1, 0x74, 0x5e, 0x98,
	0x0a, 0xdc, 0x42, 0x1f, 0x82, 0xf7, 0x32, 0x0c, 0xd8, 0x1e, 0x6c, 0x6f, 0xb8, 0x4d, 0x5a, 0x55,
	0x34, 0xec, 0xd8, 0xf0, 0x66, 0xe5, 0x12, 0xc0, 0xe4, 0xef, 0x44, 0x64, 0x90, 0x30, 0x4b, 0xcb,
	0xb2, 0x65, 0x49, 0x79, 0xe2, 0x19, 0x96, 0x1a, 0x35, 0x54, 0x24, 0x4f, 0x81, 0x34, 0x24, 0x05,
	0xe6, 0x32, 0x38, 0xfb, 0xfc, 0x05, 0xcc, 0x57, 0xbe, 0x65, 0x8f, 0xf7, 0xf0, 0xf7, 0x18, 0xf2,
	0x02, 0x41, 0x4d, 0x9b, 0x9a, 0x22, 0xf4, 0xeb, 0x34, 0xca, 0x08, 0x6f, 0x2a, 0x6c, 0xcc, 0x88,
	0x28, 0x76, 0x60, 0xbe, 0xa2, 0xb3, 0x9f, 0x41, 0xe9, 0x7e, 0x08, 0xac, 0x51, 0x0b, 0x7e, 0xaf,
	0x0d, 0xb0, 0x1a, 0x63, 0x9a, 0x7b, 0xce, 0xde, 0x5b, 0x04, 0xc8, 0x33, 0x5a, 0x86, 0x0b, 0xf3,
	0xb5, 0x3f, 0xe5, 0xc0, 0x12, 0xbd, 0x4b, 0xfe, 0xf1, 0x02, 0x1d, 0xb3, 0x8f, 0x2d, 0x3f, 0x40,
	0xf1, 0xef, 0x06, 0xf1, 0x35, 0xfa, 0xce, 0x96, 0x08, 0x86, 0x57, 0xdc, 0x37, 0xd0, 0x57, 0x6c,
	0x6c, 0xb0, 0xcb, 0x67, 0x74, 0x33, 0xb2, 0x12, 0x6e, 0xbd, 0x77, 0x6e, 0xa5, 0xf0, 0x68, 0x83,
	0x8f, 0xd9, 0x8b, 0x1f, 0xbb, 0xc5, 0xf7, 0xc7, 0x7e, 0x80, 0x0a, 0xe1, 0x35, 0xb5, 0xde, 0xdb,
	0x29, 0x86, 0x1f, 0xb5, 0xab, 0x51, 0xf0, 0xa6, 0x7c, 0x43, 0x2e, 0xfe, 0xf9, 0xed, 0x6e, 0xee,
	0xaf, 0x6f, 0x77, 0x73, 0xff, 0x78, 0xbb, 0x9b, 0x7b, 0xb9, 0x48, 0xff, 0xe3, 0xc0, 0xd1, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xf7, 0xa7, 0x28, 0x69, 0x20, 0x00, 0x00,
}
