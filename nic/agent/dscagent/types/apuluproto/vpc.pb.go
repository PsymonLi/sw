// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vpc.proto

package pds

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import meta "github.com/pensando/sw/nic/apollo/agent/gen/pds/meta/pds"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// type of the virtual private cloud
type VPCType int32

const (
	VPCType_VPC_TYPE_NONE     VPCType = 0
	VPCType_VPC_TYPE_UNDERLAY VPCType = 1
	VPCType_VPC_TYPE_TENANT   VPCType = 2
)

var VPCType_name = map[int32]string{
	0: "VPC_TYPE_NONE",
	1: "VPC_TYPE_UNDERLAY",
	2: "VPC_TYPE_TENANT",
}
var VPCType_value = map[string]int32{
	"VPC_TYPE_NONE":     0,
	"VPC_TYPE_UNDERLAY": 1,
	"VPC_TYPE_TENANT":   2,
}

func (x VPCType) String() string {
	return proto.EnumName(VPCType_name, int32(x))
}
func (VPCType) EnumDescriptor() ([]byte, []int) { return fileDescriptorVpc, []int{0} }

// VPCSpec captures VPC configuration
type VPCSpec struct {
	// unique key/identifier of VPC
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty" meta:mandatory,immutable`
	// type of the VPC
	Type VPCType `protobuf:"varint,2,opt,name=Type,proto3,enum=pds.VPCType" json:"Type,omitempty" meta:mandatory,immutable`
	// identifier of the IPv4 route table to be used and this route table is
	// inherited by the subnets under this VPC, if they are created with no route
	// table explicitly
	V4RouteTableId []byte `protobuf:"bytes,3,opt,name=V4RouteTableId,proto3" json:"V4RouteTableId,omitempty"`
	// identifier of the IPv6 route table to be used, if any and this route table
	// is inherited by the subnets under this VPC, if they are created with no
	// route table explicitly
	V6RouteTableId []byte `protobuf:"bytes,4,opt,name=V6RouteTableId,proto3" json:"V6RouteTableId,omitempty"`
	// Virtual Router (VR) MAC address, any packets originated or routed in this
	// VPC carry this MAC as source MAC
	VirtualRouterMac uint64 `protobuf:"varint,5,opt,name=VirtualRouterMac,proto3" json:"VirtualRouterMac,omitempty"`
	// encapped traffic coming with the specified encap from fabric side will be
	// mapped to this VPC
	FabricEncap *Encap `protobuf:"bytes,6,opt,name=FabricEncap" json:"FabricEncap,omitempty" meta:immutable`
	// IPv6 prefix/IP to be used to NAT the IPv4 traffic destined to reach a
	// service in IPv6 only network/service (all VNICs in this VPC will use this
	// prefix to get their IPv4 traffic (S)NAT-ed in the outbound direction)
	Nat46Prefix *IPv6Prefix `protobuf:"bytes,7,opt,name=Nat46Prefix" json:"Nat46Prefix,omitempty"`
	// ToS field is 1 byte value that is populated in the DSCP field of IPv4 outer
	// header or in the Traffic Class field of IPv6 outer header, this value will
	// be written as-is (i.e., not interpreted) during encap time by the dataplane
	// when vpc's vnid is put in the VxLAN encapped packet
	// NOTE: subnets under this VPC don't inherit this ToS value, subnets need to
	//       be explicitly configured with same ToS value as that of VPC or
	//       potentially different ToS value of their own
	ToS uint32 `protobuf:"varint,8,opt,name=ToS,proto3" json:"ToS,omitempty"`
}

func (m *VPCSpec) Reset()                    { *m = VPCSpec{} }
func (m *VPCSpec) String() string            { return proto.CompactTextString(m) }
func (*VPCSpec) ProtoMessage()               {}
func (*VPCSpec) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{0} }

func (m *VPCSpec) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VPCSpec) GetType() VPCType {
	if m != nil {
		return m.Type
	}
	return VPCType_VPC_TYPE_NONE
}

func (m *VPCSpec) GetV4RouteTableId() []byte {
	if m != nil {
		return m.V4RouteTableId
	}
	return nil
}

func (m *VPCSpec) GetV6RouteTableId() []byte {
	if m != nil {
		return m.V6RouteTableId
	}
	return nil
}

func (m *VPCSpec) GetVirtualRouterMac() uint64 {
	if m != nil {
		return m.VirtualRouterMac
	}
	return 0
}

func (m *VPCSpec) GetFabricEncap() *Encap {
	if m != nil {
		return m.FabricEncap
	}
	return nil
}

func (m *VPCSpec) GetNat46Prefix() *IPv6Prefix {
	if m != nil {
		return m.Nat46Prefix
	}
	return nil
}

func (m *VPCSpec) GetToS() uint32 {
	if m != nil {
		return m.ToS
	}
	return 0
}

// operational status of a VPC, if any
type VPCStatus struct {
	// vpc hw id
	HwId uint32 `protobuf:"varint,1,opt,name=HwId,proto3" json:"HwId,omitempty"`
}

func (m *VPCStatus) Reset()                    { *m = VPCStatus{} }
func (m *VPCStatus) String() string            { return proto.CompactTextString(m) }
func (*VPCStatus) ProtoMessage()               {}
func (*VPCStatus) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{1} }

func (m *VPCStatus) GetHwId() uint32 {
	if m != nil {
		return m.HwId
	}
	return 0
}

// stats for a VPC, if any
type VPCStats struct {
}

func (m *VPCStats) Reset()                    { *m = VPCStats{} }
func (m *VPCStats) String() string            { return proto.CompactTextString(m) }
func (*VPCStats) ProtoMessage()               {}
func (*VPCStats) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{2} }

// Virtual Private Cloud object
type VPC struct {
	*meta.TypeMeta `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	*meta.ObjMeta  `protobuf:"bytes,2,opt,name=ObjMeta,embedded=ObjMeta" json:"meta,omitempty"`
	Spec           *VPCSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         *VPCStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
	Stats          *VPCStats  `protobuf:"bytes,5,opt,name=Stats" json:"stats,omitempty"`
}

func (m *VPC) Reset()                    { *m = VPC{} }
func (m *VPC) String() string            { return proto.CompactTextString(m) }
func (*VPC) ProtoMessage()               {}
func (*VPC) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{3} }

func (m *VPC) GetSpec() *VPCSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *VPC) GetStatus() *VPCStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VPC) GetStats() *VPCStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// VPC create and update request
type VPCRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt" json:"BatchCtxt,omitempty"`
	// batched requests
	Request []*VPCSpec `protobuf:"bytes,2,rep,name=Request" json:"Request,omitempty"`
}

func (m *VPCRequest) Reset()                    { *m = VPCRequest{} }
func (m *VPCRequest) String() string            { return proto.CompactTextString(m) }
func (*VPCRequest) ProtoMessage()               {}
func (*VPCRequest) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{4} }

func (m *VPCRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *VPCRequest) GetRequest() []*VPCSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// VPC create and update response
type VPCResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response  []*VPCStatus `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *VPCResponse) Reset()                    { *m = VPCResponse{} }
func (m *VPCResponse) String() string            { return proto.CompactTextString(m) }
func (*VPCResponse) ProtoMessage()               {}
func (*VPCResponse) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{5} }

func (m *VPCResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VPCResponse) GetResponse() []*VPCStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

// VPC get request
type VPCGetRequest struct {
	// list of keys of interest
	Id [][]byte `protobuf:"bytes,1,rep,name=Id" json:"Id,omitempty"`
}

func (m *VPCGetRequest) Reset()                    { *m = VPCGetRequest{} }
func (m *VPCGetRequest) String() string            { return proto.CompactTextString(m) }
func (*VPCGetRequest) ProtoMessage()               {}
func (*VPCGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{6} }

func (m *VPCGetRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// VPC get response
type VPCGetResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response  []*VPC    `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *VPCGetResponse) Reset()                    { *m = VPCGetResponse{} }
func (m *VPCGetResponse) String() string            { return proto.CompactTextString(m) }
func (*VPCGetResponse) ProtoMessage()               {}
func (*VPCGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{7} }

func (m *VPCGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VPCGetResponse) GetResponse() []*VPC {
	if m != nil {
		return m.Response
	}
	return nil
}

// VPC delete request
type VPCDeleteRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt" json:"BatchCtxt,omitempty"`
	Id        [][]byte   `protobuf:"bytes,2,rep,name=Id" json:"Id,omitempty"`
}

func (m *VPCDeleteRequest) Reset()                    { *m = VPCDeleteRequest{} }
func (m *VPCDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*VPCDeleteRequest) ProtoMessage()               {}
func (*VPCDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{8} }

func (m *VPCDeleteRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *VPCDeleteRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// VPC delete response
type VPCDeleteResponse struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=ApiStatus,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
}

func (m *VPCDeleteResponse) Reset()                    { *m = VPCDeleteResponse{} }
func (m *VPCDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*VPCDeleteResponse) ProtoMessage()               {}
func (*VPCDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{9} }

func (m *VPCDeleteResponse) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// VPCPeerSpec captures configuration for a VPC peering relation
type VPCPeerSpec struct {
	// unique id/key idenitifying this VPC peering relation
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// unique key/identifier of VPC1
	Vpc1 []byte `protobuf:"bytes,2,opt,name=Vpc1,proto3" json:"Vpc1,omitempty" meta:mandatory`
	// unique key/identifier of VPC2
	Vpc2 []byte `protobuf:"bytes,3,opt,name=Vpc2,proto3" json:"Vpc2,omitempty" meta:mandatory`
}

func (m *VPCPeerSpec) Reset()                    { *m = VPCPeerSpec{} }
func (m *VPCPeerSpec) String() string            { return proto.CompactTextString(m) }
func (*VPCPeerSpec) ProtoMessage()               {}
func (*VPCPeerSpec) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{10} }

func (m *VPCPeerSpec) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VPCPeerSpec) GetVpc1() []byte {
	if m != nil {
		return m.Vpc1
	}
	return nil
}

func (m *VPCPeerSpec) GetVpc2() []byte {
	if m != nil {
		return m.Vpc2
	}
	return nil
}

// operational status of a VPC peering, if any
type VPCPeerStatus struct {
}

func (m *VPCPeerStatus) Reset()                    { *m = VPCPeerStatus{} }
func (m *VPCPeerStatus) String() string            { return proto.CompactTextString(m) }
func (*VPCPeerStatus) ProtoMessage()               {}
func (*VPCPeerStatus) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{11} }

// stats for a VPC peering, if any
type VPCPeerStats struct {
}

func (m *VPCPeerStats) Reset()                    { *m = VPCPeerStats{} }
func (m *VPCPeerStats) String() string            { return proto.CompactTextString(m) }
func (*VPCPeerStats) ProtoMessage()               {}
func (*VPCPeerStats) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{12} }

// Virtual Private Cloud Peer (aka. pairing) object
type VPCPeer struct {
	*meta.TypeMeta `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	*meta.ObjMeta  `protobuf:"bytes,2,opt,name=ObjMeta,embedded=ObjMeta" json:"meta,omitempty"`
	Spec           *VPCPeerSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         *VPCPeerStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
	Stats          *VPCPeerStats  `protobuf:"bytes,5,opt,name=Stats" json:"stats,omitempty"`
}

func (m *VPCPeer) Reset()                    { *m = VPCPeer{} }
func (m *VPCPeer) String() string            { return proto.CompactTextString(m) }
func (*VPCPeer) ProtoMessage()               {}
func (*VPCPeer) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{13} }

func (m *VPCPeer) GetSpec() *VPCPeerSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *VPCPeer) GetStatus() *VPCPeerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VPCPeer) GetStats() *VPCPeerStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// VPC peer create and update request
type VPCPeerRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt" json:"BatchCtxt,omitempty"`
	// batched request
	Request []*VPCPeerSpec `protobuf:"bytes,2,rep,name=Request" json:"Request,omitempty"`
}

func (m *VPCPeerRequest) Reset()                    { *m = VPCPeerRequest{} }
func (m *VPCPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*VPCPeerRequest) ProtoMessage()               {}
func (*VPCPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{14} }

func (m *VPCPeerRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *VPCPeerRequest) GetRequest() []*VPCPeerSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// VPC peer create and update response
type VPCPeerResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// batched response
	Response []*VPCPeerStatus `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *VPCPeerResponse) Reset()                    { *m = VPCPeerResponse{} }
func (m *VPCPeerResponse) String() string            { return proto.CompactTextString(m) }
func (*VPCPeerResponse) ProtoMessage()               {}
func (*VPCPeerResponse) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{15} }

func (m *VPCPeerResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VPCPeerResponse) GetResponse() []*VPCPeerStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

// VPC peer get request
type VPCPeerGetRequest struct {
	Id [][]byte `protobuf:"bytes,1,rep,name=Id" json:"Id,omitempty"`
}

func (m *VPCPeerGetRequest) Reset()                    { *m = VPCPeerGetRequest{} }
func (m *VPCPeerGetRequest) String() string            { return proto.CompactTextString(m) }
func (*VPCPeerGetRequest) ProtoMessage()               {}
func (*VPCPeerGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{16} }

func (m *VPCPeerGetRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// VPC peer get response
type VPCPeerGetResponse struct {
	// API status code
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response  []*VPCPeer `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *VPCPeerGetResponse) Reset()                    { *m = VPCPeerGetResponse{} }
func (m *VPCPeerGetResponse) String() string            { return proto.CompactTextString(m) }
func (*VPCPeerGetResponse) ProtoMessage()               {}
func (*VPCPeerGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{17} }

func (m *VPCPeerGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VPCPeerGetResponse) GetResponse() []*VPCPeer {
	if m != nil {
		return m.Response
	}
	return nil
}

// VPC peer delete request
type VPCPeerDeleteRequest struct {
	// optional batch context, if this request is part of batch of API calls
	BatchCtxt *BatchCtxt `protobuf:"bytes,1,opt,name=BatchCtxt" json:"BatchCtxt,omitempty"`
	Id        [][]byte   `protobuf:"bytes,2,rep,name=Id" json:"Id,omitempty"`
}

func (m *VPCPeerDeleteRequest) Reset()                    { *m = VPCPeerDeleteRequest{} }
func (m *VPCPeerDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*VPCPeerDeleteRequest) ProtoMessage()               {}
func (*VPCPeerDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{18} }

func (m *VPCPeerDeleteRequest) GetBatchCtxt() *BatchCtxt {
	if m != nil {
		return m.BatchCtxt
	}
	return nil
}

func (m *VPCPeerDeleteRequest) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// VPC peer delete response
type VPCPeerDeleteResponse struct {
	// API status code
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=ApiStatus,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
}

func (m *VPCPeerDeleteResponse) Reset()                    { *m = VPCPeerDeleteResponse{} }
func (m *VPCPeerDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*VPCPeerDeleteResponse) ProtoMessage()               {}
func (*VPCPeerDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorVpc, []int{19} }

func (m *VPCPeerDeleteResponse) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*VPCSpec)(nil), "pds.VPCSpec")
	proto.RegisterType((*VPCStatus)(nil), "pds.VPCStatus")
	proto.RegisterType((*VPCStats)(nil), "pds.VPCStats")
	proto.RegisterType((*VPC)(nil), "pds.VPC")
	proto.RegisterType((*VPCRequest)(nil), "pds.VPCRequest")
	proto.RegisterType((*VPCResponse)(nil), "pds.VPCResponse")
	proto.RegisterType((*VPCGetRequest)(nil), "pds.VPCGetRequest")
	proto.RegisterType((*VPCGetResponse)(nil), "pds.VPCGetResponse")
	proto.RegisterType((*VPCDeleteRequest)(nil), "pds.VPCDeleteRequest")
	proto.RegisterType((*VPCDeleteResponse)(nil), "pds.VPCDeleteResponse")
	proto.RegisterType((*VPCPeerSpec)(nil), "pds.VPCPeerSpec")
	proto.RegisterType((*VPCPeerStatus)(nil), "pds.VPCPeerStatus")
	proto.RegisterType((*VPCPeerStats)(nil), "pds.VPCPeerStats")
	proto.RegisterType((*VPCPeer)(nil), "pds.VPCPeer")
	proto.RegisterType((*VPCPeerRequest)(nil), "pds.VPCPeerRequest")
	proto.RegisterType((*VPCPeerResponse)(nil), "pds.VPCPeerResponse")
	proto.RegisterType((*VPCPeerGetRequest)(nil), "pds.VPCPeerGetRequest")
	proto.RegisterType((*VPCPeerGetResponse)(nil), "pds.VPCPeerGetResponse")
	proto.RegisterType((*VPCPeerDeleteRequest)(nil), "pds.VPCPeerDeleteRequest")
	proto.RegisterType((*VPCPeerDeleteResponse)(nil), "pds.VPCPeerDeleteResponse")
	proto.RegisterEnum("pds.VPCType", VPCType_name, VPCType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VPCSvc service

type VPCSvcClient interface {
	VPCCreate(ctx context.Context, in *VPCRequest, opts ...grpc.CallOption) (*VPCResponse, error)
	VPCUpdate(ctx context.Context, in *VPCRequest, opts ...grpc.CallOption) (*VPCResponse, error)
	VPCGet(ctx context.Context, in *VPCGetRequest, opts ...grpc.CallOption) (*VPCGetResponse, error)
	VPCDelete(ctx context.Context, in *VPCDeleteRequest, opts ...grpc.CallOption) (*VPCDeleteResponse, error)
	VPCPeerCreate(ctx context.Context, in *VPCPeerRequest, opts ...grpc.CallOption) (*VPCPeerResponse, error)
	VPCPeerGet(ctx context.Context, in *VPCPeerGetRequest, opts ...grpc.CallOption) (*VPCPeerGetResponse, error)
	VPCPeerDelete(ctx context.Context, in *VPCPeerDeleteRequest, opts ...grpc.CallOption) (*VPCPeerDeleteResponse, error)
}

type vPCSvcClient struct {
	cc *grpc.ClientConn
}

func NewVPCSvcClient(cc *grpc.ClientConn) VPCSvcClient {
	return &vPCSvcClient{cc}
}

func (c *vPCSvcClient) VPCCreate(ctx context.Context, in *VPCRequest, opts ...grpc.CallOption) (*VPCResponse, error) {
	out := new(VPCResponse)
	err := grpc.Invoke(ctx, "/pds.VPCSvc/VPCCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCSvcClient) VPCUpdate(ctx context.Context, in *VPCRequest, opts ...grpc.CallOption) (*VPCResponse, error) {
	out := new(VPCResponse)
	err := grpc.Invoke(ctx, "/pds.VPCSvc/VPCUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCSvcClient) VPCGet(ctx context.Context, in *VPCGetRequest, opts ...grpc.CallOption) (*VPCGetResponse, error) {
	out := new(VPCGetResponse)
	err := grpc.Invoke(ctx, "/pds.VPCSvc/VPCGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCSvcClient) VPCDelete(ctx context.Context, in *VPCDeleteRequest, opts ...grpc.CallOption) (*VPCDeleteResponse, error) {
	out := new(VPCDeleteResponse)
	err := grpc.Invoke(ctx, "/pds.VPCSvc/VPCDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCSvcClient) VPCPeerCreate(ctx context.Context, in *VPCPeerRequest, opts ...grpc.CallOption) (*VPCPeerResponse, error) {
	out := new(VPCPeerResponse)
	err := grpc.Invoke(ctx, "/pds.VPCSvc/VPCPeerCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCSvcClient) VPCPeerGet(ctx context.Context, in *VPCPeerGetRequest, opts ...grpc.CallOption) (*VPCPeerGetResponse, error) {
	out := new(VPCPeerGetResponse)
	err := grpc.Invoke(ctx, "/pds.VPCSvc/VPCPeerGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCSvcClient) VPCPeerDelete(ctx context.Context, in *VPCPeerDeleteRequest, opts ...grpc.CallOption) (*VPCPeerDeleteResponse, error) {
	out := new(VPCPeerDeleteResponse)
	err := grpc.Invoke(ctx, "/pds.VPCSvc/VPCPeerDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VPCSvc service

type VPCSvcServer interface {
	VPCCreate(context.Context, *VPCRequest) (*VPCResponse, error)
	VPCUpdate(context.Context, *VPCRequest) (*VPCResponse, error)
	VPCGet(context.Context, *VPCGetRequest) (*VPCGetResponse, error)
	VPCDelete(context.Context, *VPCDeleteRequest) (*VPCDeleteResponse, error)
	VPCPeerCreate(context.Context, *VPCPeerRequest) (*VPCPeerResponse, error)
	VPCPeerGet(context.Context, *VPCPeerGetRequest) (*VPCPeerGetResponse, error)
	VPCPeerDelete(context.Context, *VPCPeerDeleteRequest) (*VPCPeerDeleteResponse, error)
}

func RegisterVPCSvcServer(s *grpc.Server, srv VPCSvcServer) {
	s.RegisterService(&_VPCSvc_serviceDesc, srv)
}

func _VPCSvc_VPCCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCSvcServer).VPCCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VPCSvc/VPCCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCSvcServer).VPCCreate(ctx, req.(*VPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCSvc_VPCUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCSvcServer).VPCUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VPCSvc/VPCUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCSvcServer).VPCUpdate(ctx, req.(*VPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCSvc_VPCGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCSvcServer).VPCGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VPCSvc/VPCGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCSvcServer).VPCGet(ctx, req.(*VPCGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCSvc_VPCDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCSvcServer).VPCDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VPCSvc/VPCDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCSvcServer).VPCDelete(ctx, req.(*VPCDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCSvc_VPCPeerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCSvcServer).VPCPeerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VPCSvc/VPCPeerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCSvcServer).VPCPeerCreate(ctx, req.(*VPCPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCSvc_VPCPeerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCPeerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCSvcServer).VPCPeerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VPCSvc/VPCPeerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCSvcServer).VPCPeerGet(ctx, req.(*VPCPeerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCSvc_VPCPeerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPCPeerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCSvcServer).VPCPeerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.VPCSvc/VPCPeerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCSvcServer).VPCPeerDelete(ctx, req.(*VPCPeerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VPCSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.VPCSvc",
	HandlerType: (*VPCSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VPCCreate",
			Handler:    _VPCSvc_VPCCreate_Handler,
		},
		{
			MethodName: "VPCUpdate",
			Handler:    _VPCSvc_VPCUpdate_Handler,
		},
		{
			MethodName: "VPCGet",
			Handler:    _VPCSvc_VPCGet_Handler,
		},
		{
			MethodName: "VPCDelete",
			Handler:    _VPCSvc_VPCDelete_Handler,
		},
		{
			MethodName: "VPCPeerCreate",
			Handler:    _VPCSvc_VPCPeerCreate_Handler,
		},
		{
			MethodName: "VPCPeerGet",
			Handler:    _VPCSvc_VPCPeerGet_Handler,
		},
		{
			MethodName: "VPCPeerDelete",
			Handler:    _VPCSvc_VPCPeerDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vpc.proto",
}

func (m *VPCSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.Type))
	}
	if len(m.V4RouteTableId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpc(dAtA, i, uint64(len(m.V4RouteTableId)))
		i += copy(dAtA[i:], m.V4RouteTableId)
	}
	if len(m.V6RouteTableId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVpc(dAtA, i, uint64(len(m.V6RouteTableId)))
		i += copy(dAtA[i:], m.V6RouteTableId)
	}
	if m.VirtualRouterMac != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.VirtualRouterMac))
	}
	if m.FabricEncap != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.FabricEncap.Size()))
		n1, err := m.FabricEncap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Nat46Prefix != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.Nat46Prefix.Size()))
		n2, err := m.Nat46Prefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ToS != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.ToS))
	}
	return i, nil
}

func (m *VPCStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HwId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.HwId))
	}
	return i, nil
}

func (m *VPCStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VPC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPC) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeMeta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.TypeMeta.Size()))
		n3, err := m.TypeMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ObjMeta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.ObjMeta.Size()))
		n4, err := m.ObjMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Spec != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.Spec.Size()))
		n5, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Status != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.Status.Size()))
		n6, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Stats != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.Stats.Size()))
		n7, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *VPCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BatchCtxt != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.BatchCtxt.Size()))
		n8, err := m.BatchCtxt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VPCGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *VPCGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VPCDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BatchCtxt != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.BatchCtxt.Size()))
		n9, err := m.BatchCtxt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *VPCDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA11 := make([]byte, len(m.ApiStatus)*10)
		var j10 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	return i, nil
}

func (m *VPCPeerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeerSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Vpc1) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpc(dAtA, i, uint64(len(m.Vpc1)))
		i += copy(dAtA[i:], m.Vpc1)
	}
	if len(m.Vpc2) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpc(dAtA, i, uint64(len(m.Vpc2)))
		i += copy(dAtA[i:], m.Vpc2)
	}
	return i, nil
}

func (m *VPCPeerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VPCPeerStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeerStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VPCPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeMeta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.TypeMeta.Size()))
		n12, err := m.TypeMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.ObjMeta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.ObjMeta.Size()))
		n13, err := m.ObjMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Spec != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.Spec.Size()))
		n14, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Status != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.Status.Size()))
		n15, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Stats != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.Stats.Size()))
		n16, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *VPCPeerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BatchCtxt != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.BatchCtxt.Size()))
		n17, err := m.BatchCtxt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VPCPeerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VPCPeerGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeerGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *VPCPeerGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeerGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VPCPeerDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeerDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BatchCtxt != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(m.BatchCtxt.Size()))
		n18, err := m.BatchCtxt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *VPCPeerDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VPCPeerDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA20 := make([]byte, len(m.ApiStatus)*10)
		var j19 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpc(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	return i, nil
}

func encodeVarintVpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VPCSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovVpc(uint64(m.Type))
	}
	l = len(m.V4RouteTableId)
	if l > 0 {
		n += 1 + l + sovVpc(uint64(l))
	}
	l = len(m.V6RouteTableId)
	if l > 0 {
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.VirtualRouterMac != 0 {
		n += 1 + sovVpc(uint64(m.VirtualRouterMac))
	}
	if m.FabricEncap != nil {
		l = m.FabricEncap.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.Nat46Prefix != nil {
		l = m.Nat46Prefix.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.ToS != 0 {
		n += 1 + sovVpc(uint64(m.ToS))
	}
	return n
}

func (m *VPCStatus) Size() (n int) {
	var l int
	_ = l
	if m.HwId != 0 {
		n += 1 + sovVpc(uint64(m.HwId))
	}
	return n
}

func (m *VPCStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VPC) Size() (n int) {
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	return n
}

func (m *VPCRequest) Size() (n int) {
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovVpc(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCGetRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovVpc(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovVpc(uint64(e))
		}
		n += 1 + sovVpc(uint64(l)) + l
	}
	return n
}

func (m *VPCPeerSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVpc(uint64(l))
	}
	l = len(m.Vpc1)
	if l > 0 {
		n += 1 + l + sovVpc(uint64(l))
	}
	l = len(m.Vpc2)
	if l > 0 {
		n += 1 + l + sovVpc(uint64(l))
	}
	return n
}

func (m *VPCPeerStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VPCPeerStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VPCPeer) Size() (n int) {
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	return n
}

func (m *VPCPeerRequest) Size() (n int) {
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCPeerResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovVpc(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCPeerGetRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCPeerGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovVpc(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCPeerDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.BatchCtxt != nil {
		l = m.BatchCtxt.Size()
		n += 1 + l + sovVpc(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovVpc(uint64(l))
		}
	}
	return n
}

func (m *VPCPeerDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovVpc(uint64(e))
		}
		n += 1 + sovVpc(uint64(l)) + l
	}
	return n
}

func sovVpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVpc(x uint64) (n int) {
	return sovVpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VPCSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (VPCType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4RouteTableId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V4RouteTableId = append(m.V4RouteTableId[:0], dAtA[iNdEx:postIndex]...)
			if m.V4RouteTableId == nil {
				m.V4RouteTableId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6RouteTableId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V6RouteTableId = append(m.V6RouteTableId[:0], dAtA[iNdEx:postIndex]...)
			if m.V6RouteTableId == nil {
				m.V6RouteTableId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualRouterMac", wireType)
			}
			m.VirtualRouterMac = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VirtualRouterMac |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FabricEncap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FabricEncap == nil {
				m.FabricEncap = &Encap{}
			}
			if err := m.FabricEncap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nat46Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nat46Prefix == nil {
				m.Nat46Prefix = &IPv6Prefix{}
			}
			if err := m.Nat46Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToS", wireType)
			}
			m.ToS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToS |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HwId", wireType)
			}
			m.HwId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HwId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &meta.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &meta.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &VPCSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &VPCStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &VPCStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VPCSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VPCStatus{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VPC{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVpc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpc1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vpc1 = append(m.Vpc1[:0], dAtA[iNdEx:postIndex]...)
			if m.Vpc1 == nil {
				m.Vpc1 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vpc2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vpc2 = append(m.Vpc2[:0], dAtA[iNdEx:postIndex]...)
			if m.Vpc2 == nil {
				m.Vpc2 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeerStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeerStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeerStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &meta.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &meta.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &VPCPeerSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &VPCPeerStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &VPCPeerStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VPCPeerSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VPCPeerStatus{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeerGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeerGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeerGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeerGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeerGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeerGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VPCPeer{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeerDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeerDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeerDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCtxt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BatchCtxt == nil {
				m.BatchCtxt = &BatchCtxt{}
			}
			if err := m.BatchCtxt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VPCPeerDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VPCPeerDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VPCPeerDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVpc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vpc.proto", fileDescriptorVpc) }

var fileDescriptorVpc = []byte{
	// 963 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x5d, 0x6f, 0xda, 0x56,
	0x18, 0xae, 0x81, 0x26, 0xe4, 0x85, 0x80, 0x73, 0xf2, 0x31, 0x0f, 0x4d, 0x01, 0x79, 0x53, 0x84,
	0xa2, 0x88, 0x6d, 0x24, 0xaa, 0xaa, 0x2d, 0x5a, 0x17, 0xbb, 0x2c, 0x89, 0xb4, 0x52, 0xcb, 0xa5,
	0x96, 0x7a, 0x55, 0x39, 0xe6, 0xb4, 0xf3, 0x04, 0xd8, 0xc5, 0x87, 0xac, 0xf9, 0x47, 0xbb, 0xdd,
	0x4f, 0xd8, 0xdd, 0x2e, 0xfb, 0x0b, 0xd0, 0x94, 0xcb, 0x5c, 0xf6, 0x07, 0x4c, 0xd3, 0x79, 0x7d,
	0x6c, 0x8e, 0x21, 0x4b, 0x2b, 0x34, 0xa9, 0x37, 0xc8, 0x3c, 0xe7, 0x79, 0xce, 0xfb, 0x75, 0x9e,
	0x63, 0xc3, 0xda, 0x65, 0xe8, 0xb5, 0xc2, 0x71, 0xc0, 0x02, 0x92, 0x0f, 0xfb, 0x51, 0x0d, 0x5e,
	0x07, 0xaf, 0x83, 0x18, 0xa8, 0x55, 0x87, 0x94, 0xb9, 0x5f, 0xf3, 0x1f, 0x01, 0x94, 0xd8, 0x55,
	0x48, 0xa3, 0xf8, 0x8f, 0xfe, 0x4f, 0x0e, 0x56, 0x1d, 0xcb, 0x7c, 0x16, 0x52, 0x8f, 0x1c, 0x40,
	0xee, 0xbc, 0xaf, 0x29, 0x0d, 0xa5, 0x59, 0x36, 0xbe, 0x78, 0x3f, 0xad, 0x6b, 0x5c, 0xf4, 0xdd,
	0xd0, 0x1d, 0xf5, 0x5d, 0x16, 0x8c, 0xaf, 0x0e, 0xfc, 0xe1, 0x70, 0xc2, 0xdc, 0x8b, 0x01, 0xb5,
	0x73, 0xe7, 0x7d, 0xf2, 0x03, 0x14, 0x7a, 0x57, 0x21, 0xd5, 0x72, 0x0d, 0xa5, 0x59, 0x69, 0x97,
	0x5b, 0x61, 0x3f, 0x6a, 0x39, 0x96, 0xc9, 0xb1, 0x0f, 0xa8, 0x51, 0x47, 0xf6, 0xa0, 0xe2, 0x1c,
	0xd9, 0xc1, 0x84, 0xd1, 0x1e, 0x47, 0xcf, 0xfb, 0x5a, 0x9e, 0x47, 0xb6, 0xe7, 0x50, 0xe4, 0x3d,
	0xc8, 0xf0, 0x0a, 0x82, 0x97, 0x41, 0xc9, 0x3e, 0xa8, 0x8e, 0x3f, 0x66, 0x13, 0x77, 0x80, 0xf0,
	0xf8, 0x89, 0xeb, 0x69, 0xf7, 0x1b, 0x4a, 0xb3, 0x60, 0x2f, 0xe0, 0xc4, 0x80, 0xd2, 0x4f, 0xee,
	0xc5, 0xd8, 0xf7, 0x3a, 0x23, 0xcf, 0x0d, 0xb5, 0x95, 0x86, 0xd2, 0x2c, 0xb5, 0xcb, 0xad, 0xb8,
	0x31, 0x88, 0x19, 0xe4, 0xfd, 0xb4, 0x5e, 0xc1, 0x12, 0x66, 0x89, 0xcb, 0x22, 0x72, 0x08, 0xa5,
	0xae, 0xcb, 0x8e, 0x1e, 0x58, 0x63, 0xfa, 0xca, 0x7f, 0xab, 0xad, 0xe2, 0x1e, 0x1b, 0x62, 0x8f,
	0x73, 0xeb, 0x52, 0x2c, 0xd8, 0x32, 0x8b, 0xa8, 0x90, 0xef, 0x05, 0xcf, 0xb4, 0x62, 0x43, 0x69,
	0xae, 0xdb, 0xfc, 0x51, 0xaf, 0xc3, 0x1a, 0xef, 0x3f, 0x73, 0xd9, 0x24, 0x22, 0x04, 0x0a, 0x67,
	0xbf, 0x89, 0x19, 0xac, 0xdb, 0xf8, 0xac, 0x03, 0x14, 0x05, 0x21, 0xd2, 0xff, 0xc8, 0x41, 0xde,
	0xb1, 0x4c, 0xf2, 0x3d, 0x14, 0x79, 0x0f, 0x9f, 0x50, 0xe6, 0x22, 0xb7, 0xd4, 0xae, 0xb4, 0x70,
	0xc2, 0x09, 0x6a, 0x54, 0xdf, 0x4d, 0xeb, 0xca, 0xcd, 0xb4, 0xbe, 0x7a, 0xe0, 0x8f, 0x06, 0xfe,
	0x88, 0xda, 0xa9, 0x80, 0x3c, 0x82, 0xd5, 0xa7, 0x17, 0xbf, 0xa2, 0x36, 0x87, 0xda, 0xf5, 0x58,
	0x2b, 0x40, 0x63, 0x47, 0x48, 0xb1, 0xfa, 0x83, 0x60, 0xe8, 0x33, 0x3a, 0x0c, 0xd9, 0x95, 0x9d,
	0xa8, 0xc8, 0x11, 0x14, 0xf8, 0x79, 0xc1, 0x79, 0x95, 0x66, 0x93, 0xe7, 0x98, 0x41, 0xb8, 0x30,
	0x0a, 0xa9, 0x27, 0x09, 0x91, 0x4d, 0x8e, 0x61, 0x25, 0xae, 0x12, 0xe7, 0xc7, 0x33, 0x4e, 0x74,
	0x88, 0x1a, 0x5b, 0x37, 0xd3, 0xba, 0x1a, 0xe1, 0xb3, 0xa4, 0x15, 0x1a, 0xf2, 0x10, 0xee, 0x63,
	0x0b, 0x70, 0xa4, 0x3c, 0x65, 0x49, 0x1c, 0x19, 0x9b, 0x37, 0xd3, 0x7a, 0x95, 0x6b, 0x65, 0x69,
	0x2c, 0xd0, 0xfb, 0x00, 0x8e, 0x65, 0xda, 0xf4, 0xcd, 0x84, 0x46, 0x8c, 0xb4, 0x60, 0xcd, 0x70,
	0x99, 0xf7, 0x8b, 0xc9, 0xde, 0x32, 0xd1, 0x3a, 0x55, 0xcc, 0x2c, 0xc5, 0xed, 0x19, 0x85, 0xec,
	0xc1, 0xaa, 0x90, 0x6a, 0xb9, 0x46, 0x7e, 0xbe, 0x5c, 0x3b, 0x59, 0xd4, 0x7d, 0x28, 0x61, 0x94,
	0x28, 0x0c, 0x46, 0x11, 0xe5, 0x61, 0x4e, 0x42, 0x5f, 0xd4, 0xab, 0xa0, 0x43, 0x92, 0x30, 0x29,
	0x6e, 0xcf, 0x28, 0x64, 0x1f, 0x8a, 0x89, 0x56, 0xc4, 0x99, 0x6b, 0x8f, 0x9d, 0xae, 0xeb, 0x75,
	0x58, 0x77, 0x2c, 0xf3, 0x94, 0xb2, 0xa4, 0xa6, 0x8a, 0xf0, 0x6d, 0xbe, 0x59, 0xe6, 0xce, 0xd4,
	0x5f, 0x41, 0x25, 0x21, 0x2c, 0x99, 0xce, 0x57, 0x0b, 0xe9, 0x14, 0x93, 0x74, 0xa4, 0x44, 0x6c,
	0x50, 0x1d, 0xcb, 0x7c, 0x4c, 0x07, 0x94, 0xd1, 0x65, 0xfb, 0x1b, 0xe7, 0x9e, 0x4b, 0x73, 0x37,
	0x61, 0x43, 0xda, 0xf3, 0xf6, 0xf4, 0xf3, 0x1f, 0x48, 0x5f, 0x1f, 0xe2, 0x30, 0x2c, 0x4a, 0xc7,
	0x78, 0xf2, 0x2a, 0xb3, 0x7b, 0x0d, 0x6f, 0xae, 0x3d, 0x28, 0x38, 0xa1, 0xf7, 0x2d, 0x9e, 0xfe,
	0xb2, 0x64, 0xf4, 0xf4, 0xae, 0xb2, 0x71, 0x5d, 0xf0, 0xda, 0xf1, 0xbd, 0xf4, 0x9f, 0xbc, 0xb6,
	0x5e, 0xc5, 0x81, 0x60, 0xb8, 0x38, 0x7e, 0x05, 0xca, 0x12, 0x10, 0xe9, 0x7f, 0xc6, 0x97, 0x2c,
	0x07, 0x3e, 0xb1, 0x75, 0x1f, 0x66, 0xac, 0xab, 0x26, 0x43, 0x4d, 0x5a, 0x75, 0x87, 0x7d, 0x7f,
	0x9c, 0xb3, 0x2f, 0xc9, 0x68, 0x3f, 0xc6, 0xc2, 0xc7, 0x59, 0x0b, 0x6f, 0xcc, 0x6f, 0x70, 0xb7,
	0x8d, 0x07, 0x78, 0xa8, 0x39, 0x77, 0xd9, 0xa3, 0xb6, 0x3f, 0x6f, 0xe5, 0x85, 0xf2, 0x67, 0x76,
	0x7e, 0x03, 0xd5, 0x34, 0xda, 0x92, 0x1e, 0x6a, 0x2d, 0x78, 0xe8, 0x96, 0x96, 0x49, 0x6e, 0xfa,
	0x12, 0x4f, 0x3e, 0x5f, 0xba, 0xc3, 0xda, 0x23, 0x20, 0x32, 0x69, 0xc9, 0xd4, 0x9a, 0x0b, 0xa9,
	0x95, 0xe5, 0xd4, 0xa4, 0xa4, 0x1c, 0xd8, 0x12, 0xe0, 0xff, 0x6b, 0xf3, 0x53, 0xd8, 0x9e, 0xdb,
	0x77, 0x39, 0xab, 0xef, 0x9f, 0xa1, 0xb3, 0xf0, 0x83, 0x62, 0x03, 0x6d, 0xf8, 0xb2, 0xf7, 0xc2,
	0xea, 0xbc, 0xec, 0x3e, 0xed, 0x76, 0xd4, 0x7b, 0x64, 0x1b, 0x7b, 0x1a, 0x43, 0xcf, 0xbb, 0x8f,
	0x3b, 0xf6, 0xcf, 0x27, 0x2f, 0x54, 0x85, 0x6c, 0xe2, 0x74, 0x63, 0xb8, 0xd7, 0xe9, 0x9e, 0x74,
	0x7b, 0x6a, 0xae, 0xfd, 0x7b, 0x1e, 0x56, 0xf8, 0x75, 0x7b, 0xe9, 0x91, 0x6f, 0xf0, 0x9d, 0x6c,
	0x8e, 0xa9, 0xcb, 0x28, 0xa9, 0xa6, 0x37, 0x5f, 0x5c, 0x7b, 0x4d, 0x9d, 0x01, 0xa2, 0x4b, 0xf7,
	0x84, 0xe2, 0x79, 0xd8, 0xff, 0x68, 0xc5, 0x21, 0x46, 0x3b, 0xa5, 0x8c, 0xa4, 0xc7, 0x62, 0x36,
	0xf7, 0xda, 0x66, 0x06, 0x4b, 0x45, 0xc7, 0x18, 0x26, 0x6e, 0x19, 0xd9, 0x4e, 0x38, 0x99, 0xd1,
	0xd4, 0x76, 0xe6, 0x61, 0x49, 0x9d, 0xdc, 0x53, 0xa2, 0xb4, 0xcd, 0xcc, 0xd4, 0x85, 0x7e, 0x2b,
	0x0b, 0xa6, 0xea, 0x47, 0xf8, 0x1e, 0x15, 0x47, 0x8f, 0xec, 0xc8, 0x2c, 0x29, 0xf1, 0xcf, 0x16,
	0xf0, 0x74, 0x83, 0xb3, 0x34, 0xbc, 0x28, 0xe0, 0x73, 0x99, 0x9b, 0x2d, 0xa2, 0x76, 0xdb, 0x52,
	0xb2, 0x93, 0x51, 0xfe, 0xeb, 0x7a, 0x57, 0x79, 0x77, 0xbd, 0xab, 0xfc, 0x7d, 0xbd, 0xab, 0x5c,
	0xac, 0xe0, 0x97, 0xec, 0xe1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x0a, 0x6f, 0x69, 0x05,
	0x0b, 0x00, 0x00,
}
