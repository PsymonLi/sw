// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cp_route.proto

package pds

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/pensando/sw/nic/agent/dscagent/types/apuluproto/meta/pds"
import types "github.com/pensando/sw/nic/agent/dscagent/types/apuluproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RouteType int32

const (
	RouteType_ROUTE_TYPE_NONE   RouteType = 0
	RouteType_ROUTE_TYPE_OTHER  RouteType = 1
	RouteType_ROUTE_TYPE_REJECT RouteType = 2
	RouteType_ROUTE_TYPE_LOCAL  RouteType = 3
	RouteType_ROUTE_TYPE_REMOTE RouteType = 4
)

var RouteType_name = map[int32]string{
	0: "ROUTE_TYPE_NONE",
	1: "ROUTE_TYPE_OTHER",
	2: "ROUTE_TYPE_REJECT",
	3: "ROUTE_TYPE_LOCAL",
	4: "ROUTE_TYPE_REMOTE",
}
var RouteType_value = map[string]int32{
	"ROUTE_TYPE_NONE":   0,
	"ROUTE_TYPE_OTHER":  1,
	"ROUTE_TYPE_REJECT": 2,
	"ROUTE_TYPE_LOCAL":  3,
	"ROUTE_TYPE_REMOTE": 4,
}

func (x RouteType) String() string {
	return proto.EnumName(RouteType_name, int32(x))
}
func (RouteType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{0} }

type RouteProto int32

const (
	RouteProto_ROUTE_PROTO_NONE RouteProto = 0
	RouteProto_ROUTE_PROTO_BGP  RouteProto = 14
)

var RouteProto_name = map[int32]string{
	0:  "ROUTE_PROTO_NONE",
	14: "ROUTE_PROTO_BGP",
}
var RouteProto_value = map[string]int32{
	"ROUTE_PROTO_NONE": 0,
	"ROUTE_PROTO_BGP":  14,
}

func (x RouteProto) String() string {
	return proto.EnumName(RouteProto_name, int32(x))
}
func (RouteProto) EnumDescriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{1} }

// Control Plane Route Spec
type CPRouteSpec struct {
	RouteTableId  uint32           `protobuf:"varint,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	DestAddr      *types.IPAddress `protobuf:"bytes,2,opt,name=DestAddr" json:"DestAddr,omitempty"`
	DestPrefixLen uint32           `protobuf:"varint,3,opt,name=DestPrefixLen,proto3" json:"DestPrefixLen,omitempty"`
	NHAddr        *types.IPAddress `protobuf:"bytes,4,opt,name=NHAddr" json:"NHAddr,omitempty"`
	IfIndex       uint32           `protobuf:"varint,5,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	Type          RouteType        `protobuf:"varint,6,opt,name=Type,proto3,enum=pds.RouteType" json:"Type,omitempty"`
	Proto         RouteProto       `protobuf:"varint,7,opt,name=proto,proto3,enum=pds.RouteProto" json:"proto,omitempty"`
	RpmIndex      uint32           `protobuf:"varint,8,opt,name=RpmIndex,proto3" json:"RpmIndex,omitempty"`
}

func (m *CPRouteSpec) Reset()                    { *m = CPRouteSpec{} }
func (m *CPRouteSpec) String() string            { return proto.CompactTextString(m) }
func (*CPRouteSpec) ProtoMessage()               {}
func (*CPRouteSpec) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{0} }

func (m *CPRouteSpec) GetRouteTableId() uint32 {
	if m != nil {
		return m.RouteTableId
	}
	return 0
}

func (m *CPRouteSpec) GetDestAddr() *types.IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPRouteSpec) GetDestPrefixLen() uint32 {
	if m != nil {
		return m.DestPrefixLen
	}
	return 0
}

func (m *CPRouteSpec) GetNHAddr() *types.IPAddress {
	if m != nil {
		return m.NHAddr
	}
	return nil
}

func (m *CPRouteSpec) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

func (m *CPRouteSpec) GetType() RouteType {
	if m != nil {
		return m.Type
	}
	return RouteType_ROUTE_TYPE_NONE
}

func (m *CPRouteSpec) GetProto() RouteProto {
	if m != nil {
		return m.Proto
	}
	return RouteProto_ROUTE_PROTO_NONE
}

func (m *CPRouteSpec) GetRpmIndex() uint32 {
	if m != nil {
		return m.RpmIndex
	}
	return 0
}

type CPRouteSpecRequest struct {
	// requests
	Request []*CPRouteSpec `protobuf:"bytes,1,rep,name=Request" json:"Request,omitempty"`
}

func (m *CPRouteSpecRequest) Reset()                    { *m = CPRouteSpecRequest{} }
func (m *CPRouteSpecRequest) String() string            { return proto.CompactTextString(m) }
func (*CPRouteSpecRequest) ProtoMessage()               {}
func (*CPRouteSpecRequest) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{1} }

func (m *CPRouteSpecRequest) GetRequest() []*CPRouteSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type CPRouteResponse struct {
	Spec *CPRouteSpec `protobuf:"bytes,1,opt,name=Spec" json:"Spec,omitempty"`
}

func (m *CPRouteResponse) Reset()                    { *m = CPRouteResponse{} }
func (m *CPRouteResponse) String() string            { return proto.CompactTextString(m) }
func (*CPRouteResponse) ProtoMessage()               {}
func (*CPRouteResponse) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{2} }

func (m *CPRouteResponse) GetSpec() *CPRouteSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// EVPN MAC IP get response
type CPRouteSpecResponse struct {
	ApiStatus types.ApiStatus    `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response  []*CPRouteResponse `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *CPRouteSpecResponse) Reset()                    { *m = CPRouteSpecResponse{} }
func (m *CPRouteSpecResponse) String() string            { return proto.CompactTextString(m) }
func (*CPRouteSpecResponse) ProtoMessage()               {}
func (*CPRouteSpecResponse) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{3} }

func (m *CPRouteSpecResponse) GetApiStatus() types.ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return types.ApiStatus_API_STATUS_OK
}

func (m *CPRouteSpecResponse) GetResponse() []*CPRouteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CPStaticRouteSpec struct {
	// virtual private cloud this route belongs to
	RouteTableId []byte `protobuf:"bytes,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	// Destination Address
	DestAddr *types.IPAddress `protobuf:"bytes,2,opt,name=DestAddr" json:"DestAddr,omitempty"`
	// Destination Address Prefix Length
	PrefixLen uint32 `protobuf:"varint,3,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	// NextHop Address
	NextHopAddr *types.IPAddress `protobuf:"bytes,4,opt,name=NextHopAddr" json:"NextHopAddr,omitempty"`
	// Admin Status
	AdminStatus AdminSt `protobuf:"varint,5,opt,name=AdminStatus,proto3,enum=pds.AdminSt" json:"AdminStatus,omitempty"`
	// Override Admin Distance
	Override AMBBool `protobuf:"varint,6,opt,name=Override,proto3,enum=pds.AMBBool" json:"Override,omitempty"`
	// Admin Distance
	AdminDist uint32 `protobuf:"varint,7,opt,name=AdminDist,proto3" json:"AdminDist,omitempty"`
	// Internal only
	InterfaceId []byte `protobuf:"bytes,1000,opt,name=InterfaceId,proto3" json:"InterfaceId,omitempty"`
	IfIndex     uint32 `protobuf:"varint,1001,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
}

func (m *CPStaticRouteSpec) Reset()                    { *m = CPStaticRouteSpec{} }
func (m *CPStaticRouteSpec) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteSpec) ProtoMessage()               {}
func (*CPStaticRouteSpec) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{4} }

func (m *CPStaticRouteSpec) GetRouteTableId() []byte {
	if m != nil {
		return m.RouteTableId
	}
	return nil
}

func (m *CPStaticRouteSpec) GetDestAddr() *types.IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPStaticRouteSpec) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *CPStaticRouteSpec) GetNextHopAddr() *types.IPAddress {
	if m != nil {
		return m.NextHopAddr
	}
	return nil
}

func (m *CPStaticRouteSpec) GetAdminStatus() AdminSt {
	if m != nil {
		return m.AdminStatus
	}
	return AdminSt_ADMIN_NONE
}

func (m *CPStaticRouteSpec) GetOverride() AMBBool {
	if m != nil {
		return m.Override
	}
	return AMBBool_BOOL_NONE
}

func (m *CPStaticRouteSpec) GetAdminDist() uint32 {
	if m != nil {
		return m.AdminDist
	}
	return 0
}

func (m *CPStaticRouteSpec) GetInterfaceId() []byte {
	if m != nil {
		return m.InterfaceId
	}
	return nil
}

func (m *CPStaticRouteSpec) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

// CRUD request message
type CPStaticRouteRequest struct {
	Request []*CPStaticRouteSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CPStaticRouteRequest) Reset()                    { *m = CPStaticRouteRequest{} }
func (m *CPStaticRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteRequest) ProtoMessage()               {}
func (*CPStaticRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{5} }

func (m *CPStaticRouteRequest) GetRequest() []*CPStaticRouteSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// response message
type CPStaticRouteResponse struct {
	ApiStatus types.ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
}

func (m *CPStaticRouteResponse) Reset()                    { *m = CPStaticRouteResponse{} }
func (m *CPStaticRouteResponse) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteResponse) ProtoMessage()               {}
func (*CPStaticRouteResponse) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{6} }

func (m *CPStaticRouteResponse) GetApiStatus() types.ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return types.ApiStatus_API_STATUS_OK
}

func init() {
	proto.RegisterType((*CPRouteSpec)(nil), "pds.CPRouteSpec")
	proto.RegisterType((*CPRouteSpecRequest)(nil), "pds.CPRouteSpecRequest")
	proto.RegisterType((*CPRouteResponse)(nil), "pds.CPRouteResponse")
	proto.RegisterType((*CPRouteSpecResponse)(nil), "pds.CPRouteSpecResponse")
	proto.RegisterType((*CPStaticRouteSpec)(nil), "pds.CPStaticRouteSpec")
	proto.RegisterType((*CPStaticRouteRequest)(nil), "pds.CPStaticRouteRequest")
	proto.RegisterType((*CPStaticRouteResponse)(nil), "pds.CPStaticRouteResponse")
	proto.RegisterEnum("pds.RouteType", RouteType_name, RouteType_value)
	proto.RegisterEnum("pds.RouteProto", RouteProto_name, RouteProto_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CPRouteSvc service

type CPRouteSvcClient interface {
	CPStaticRouteSpecCreate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error)
	CPStaticRouteSpecUpdate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error)
	CPStaticRouteSpecDelete(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error)
	CPRouteSpecGet(ctx context.Context, in *CPRouteSpecRequest, opts ...grpc.CallOption) (*CPRouteSpecResponse, error)
}

type cPRouteSvcClient struct {
	cc *grpc.ClientConn
}

func NewCPRouteSvcClient(cc *grpc.ClientConn) CPRouteSvcClient {
	return &cPRouteSvcClient{cc}
}

func (c *cPRouteSvcClient) CPStaticRouteSpecCreate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error) {
	out := new(CPStaticRouteResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteSpecCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPStaticRouteSpecUpdate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error) {
	out := new(CPStaticRouteResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteSpecUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPStaticRouteSpecDelete(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error) {
	out := new(CPStaticRouteResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteSpecDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPRouteSpecGet(ctx context.Context, in *CPRouteSpecRequest, opts ...grpc.CallOption) (*CPRouteSpecResponse, error) {
	out := new(CPRouteSpecResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPRouteSpecGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CPRouteSvc service

type CPRouteSvcServer interface {
	CPStaticRouteSpecCreate(context.Context, *CPStaticRouteRequest) (*CPStaticRouteResponse, error)
	CPStaticRouteSpecUpdate(context.Context, *CPStaticRouteRequest) (*CPStaticRouteResponse, error)
	CPStaticRouteSpecDelete(context.Context, *CPStaticRouteRequest) (*CPStaticRouteResponse, error)
	CPRouteSpecGet(context.Context, *CPRouteSpecRequest) (*CPRouteSpecResponse, error)
}

func RegisterCPRouteSvcServer(s *grpc.Server, srv CPRouteSvcServer) {
	s.RegisterService(&_CPRouteSvc_serviceDesc, srv)
}

func _CPRouteSvc_CPStaticRouteSpecCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteSpecCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteSpecCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteSpecCreate(ctx, req.(*CPStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPStaticRouteSpecUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteSpecUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteSpecUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteSpecUpdate(ctx, req.(*CPStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPStaticRouteSpecDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteSpecDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteSpecDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteSpecDelete(ctx, req.(*CPStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPRouteSpecGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPRouteSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPRouteSpecGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPRouteSpecGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPRouteSpecGet(ctx, req.(*CPRouteSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CPRouteSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.CPRouteSvc",
	HandlerType: (*CPRouteSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CPStaticRouteSpecCreate",
			Handler:    _CPRouteSvc_CPStaticRouteSpecCreate_Handler,
		},
		{
			MethodName: "CPStaticRouteSpecUpdate",
			Handler:    _CPRouteSvc_CPStaticRouteSpecUpdate_Handler,
		},
		{
			MethodName: "CPStaticRouteSpecDelete",
			Handler:    _CPRouteSvc_CPStaticRouteSpecDelete_Handler,
		},
		{
			MethodName: "CPRouteSpecGet",
			Handler:    _CPRouteSvc_CPRouteSpecGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cp_route.proto",
}

func (m *CPRouteSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RouteTableId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestAddr.Size()))
		n1, err := m.DestAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DestPrefixLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.NHAddr.Size()))
		n2, err := m.NHAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.IfIndex))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Type))
	}
	if m.Proto != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Proto))
	}
	if m.RpmIndex != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.RpmIndex))
	}
	return i, nil
}

func (m *CPRouteSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Spec.Size()))
		n3, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CPRouteSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPStaticRouteSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RouteTableId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(len(m.RouteTableId)))
		i += copy(dAtA[i:], m.RouteTableId)
	}
	if m.DestAddr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestAddr.Size()))
		n4, err := m.DestAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PrefixLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.PrefixLen))
	}
	if m.NextHopAddr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.NextHopAddr.Size()))
		n5, err := m.NextHopAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.AdminStatus != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.AdminStatus))
	}
	if m.Override != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Override))
	}
	if m.AdminDist != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.AdminDist))
	}
	if len(m.InterfaceId) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(len(m.InterfaceId)))
		i += copy(dAtA[i:], m.InterfaceId)
	}
	if m.IfIndex != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.IfIndex))
	}
	return i, nil
}

func (m *CPStaticRouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPStaticRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func encodeVarintCpRoute(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CPRouteSpec) Size() (n int) {
	var l int
	_ = l
	if m.RouteTableId != 0 {
		n += 1 + sovCpRoute(uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestPrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		l = m.NHAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.IfIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.IfIndex))
	}
	if m.Type != 0 {
		n += 1 + sovCpRoute(uint64(m.Type))
	}
	if m.Proto != 0 {
		n += 1 + sovCpRoute(uint64(m.Proto))
	}
	if m.RpmIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.RpmIndex))
	}
	return n
}

func (m *CPRouteSpecRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPRouteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}

func (m *CPRouteSpecResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPStaticRouteSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.RouteTableId)
	if l > 0 {
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.PrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.PrefixLen))
	}
	if m.NextHopAddr != nil {
		l = m.NextHopAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.AdminStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.AdminStatus))
	}
	if m.Override != 0 {
		n += 1 + sovCpRoute(uint64(m.Override))
	}
	if m.AdminDist != 0 {
		n += 1 + sovCpRoute(uint64(m.AdminDist))
	}
	l = len(m.InterfaceId)
	if l > 0 {
		n += 2 + l + sovCpRoute(uint64(l))
	}
	if m.IfIndex != 0 {
		n += 2 + sovCpRoute(uint64(m.IfIndex))
	}
	return n
}

func (m *CPStaticRouteRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPStaticRouteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	return n
}

func sovCpRoute(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCpRoute(x uint64) (n int) {
	return sovCpRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CPRouteSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			m.RouteTableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &types.IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPrefixLen", wireType)
			}
			m.DestPrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NHAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NHAddr == nil {
				m.NHAddr = &types.IPAddress{}
			}
			if err := m.NHAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfIndex", wireType)
			}
			m.IfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RouteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= (RouteProto(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpmIndex", wireType)
			}
			m.RpmIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpmIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPRouteSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CPRouteSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (types.ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CPRouteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteTableId = append(m.RouteTableId[:0], dAtA[iNdEx:postIndex]...)
			if m.RouteTableId == nil {
				m.RouteTableId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &types.IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLen", wireType)
			}
			m.PrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextHopAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextHopAddr == nil {
				m.NextHopAddr = &types.IPAddress{}
			}
			if err := m.NextHopAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminStatus", wireType)
			}
			m.AdminStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminStatus |= (AdminSt(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Override", wireType)
			}
			m.Override = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Override |= (AMBBool(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminDist", wireType)
			}
			m.AdminDist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminDist |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceId = append(m.InterfaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.InterfaceId == nil {
				m.InterfaceId = []byte{}
			}
			iNdEx = postIndex
		case 1001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfIndex", wireType)
			}
			m.IfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPStaticRouteSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (types.ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCpRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCpRoute
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCpRoute
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCpRoute(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCpRoute = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCpRoute   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cp_route.proto", fileDescriptorCpRoute) }

var fileDescriptorCpRoute = []byte{
	// 1027 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0xb7, 0x69, 0x93, 0x9e, 0xa4, 0x69, 0x76, 0xda, 0xdd, 0x86, 0x14, 0xaa, 0x12, 0xad,
	0x16, 0x2b, 0xa0, 0xb0, 0x2a, 0x17, 0x8b, 0x56, 0x5c, 0x34, 0x4e, 0xdc, 0x26, 0x6c, 0x1b, 0x9b,
	0xa9, 0x57, 0x0a, 0x5c, 0x60, 0x25, 0xf1, 0x44, 0x18, 0x25, 0xb1, 0xb1, 0xa7, 0x4b, 0xbb, 0x12,
	0x12, 0xe2, 0x12, 0xf1, 0x0c, 0xfb, 0x30, 0xbe, 0xe2, 0x0e, 0x1e, 0xc0, 0x48, 0xa8, 0x57, 0xec,
	0x5b, 0x20, 0x8f, 0xc7, 0x7f, 0x49, 0x8a, 0x10, 0xec, 0x4d, 0xe4, 0x39, 0x3f, 0xdf, 0x99, 0x33,
	0xe7, 0xfb, 0x4e, 0xa0, 0x3c, 0xb6, 0x75, 0xc7, 0xba, 0xa2, 0xa4, 0x69, 0x3b, 0x16, 0xb5, 0xd0,
	0xba, 0x6d, 0xb8, 0x35, 0xb0, 0x0d, 0x77, 0x18, 0x1a, 0x6a, 0x3b, 0x33, 0x42, 0x87, 0x1f, 0x07,
	0x3f, 0xdc, 0x50, 0xa4, 0x37, 0x36, 0x71, 0xf9, 0xa1, 0x34, 0xb6, 0x66, 0x33, 0x6b, 0x1e, 0x9e,
	0xea, 0x6f, 0x36, 0xa0, 0xd8, 0x56, 0x71, 0x00, 0x77, 0x69, 0x93, 0x31, 0x52, 0xa1, 0xc4, 0x0e,
	0xda, 0x70, 0x34, 0x25, 0x3d, 0xa3, 0x2a, 0x1c, 0x09, 0xe2, 0xb6, 0xf4, 0x91, 0xe7, 0x8b, 0x22,
	0x6c, 0x4d, 0x28, 0xd1, 0xcd, 0xb9, 0x41, 0xae, 0x1b, 0x07, 0xad, 0x0b, 0x49, 0xff, 0xa2, 0x8d,
	0x75, 0xdc, 0x93, 0xf4, 0x53, 0x4d, 0xd6, 0x7b, 0xfd, 0x8e, 0x3c, 0x08, 0x7f, 0x71, 0x06, 0x01,
	0xfd, 0x22, 0x40, 0xa1, 0x43, 0x5c, 0xda, 0x32, 0x0c, 0xa7, 0xba, 0x76, 0x24, 0x88, 0xc5, 0xe3,
	0x4a, 0x33, 0xbc, 0x50, 0x4f, 0x0d, 0x8c, 0xc4, 0x75, 0xa5, 0xaf, 0x3d, 0x5f, 0xfc, 0x0a, 0x72,
	0x06, 0x71, 0xe9, 0xe8, 0x61, 0x1a, 0xbb, 0x23, 0x5f, 0x6a, 0x21, 0xec, 0xb7, 0x07, 0x4b, 0x76,
	0xed, 0x4b, 0x95, 0x57, 0x76, 0xca, 0x41, 0xaa, 0x3e, 0x34, 0x0c, 0x47, 0x0f, 0xb0, 0x5f, 0x6d,
	0x27, 0xe7, 0x29, 0x99, 0xe3, 0xf8, 0x06, 0x48, 0x85, 0xed, 0xe0, 0x5b, 0x75, 0xc8, 0xc4, 0xbc,
	0x3e, 0x27, 0xf3, 0xea, 0x3a, 0xeb, 0xb0, 0xe1, 0xf9, 0xe2, 0x63, 0x28, 0xb0, 0xac, 0x29, 0x99,
	0x37, 0x6a, 0x4b, 0xc5, 0xce, 0xe5, 0x3e, 0xef, 0x2f, 0x0b, 0x80, 0x1c, 0xd8, 0xec, 0x77, 0x59,
	0x77, 0xb9, 0x3b, 0xba, 0xeb, 0x7a, 0xbe, 0xd8, 0x81, 0xc2, 0x9c, 0x5c, 0x53, 0xfd, 0x1b, 0xcb,
	0x1e, 0x65, 0xc0, 0xfb, 0xf2, 0x40, 0xd3, 0xbb, 0x8a, 0xca, 0xbb, 0x7c, 0x77, 0xa5, 0x2f, 0xec,
	0x74, 0x80, 0x79, 0x25, 0xd4, 0x81, 0x7c, 0x6f, 0xd2, 0x0b, 0x46, 0x51, 0xdd, 0x48, 0xdf, 0xdf,
	0x9c, 0xf0, 0x01, 0x65, 0x4a, 0xf4, 0x4e, 0x33, 0xf3, 0x89, 0x52, 0x51, 0x13, 0x72, 0xda, 0x8d,
	0x4d, 0xaa, 0x9b, 0x47, 0x82, 0x58, 0x3e, 0x2e, 0x37, 0x6d, 0xc3, 0x6d, 0x86, 0xb3, 0xbb, 0xb1,
	0x89, 0x04, 0x9e, 0x2f, 0x6e, 0x42, 0x2e, 0x68, 0x06, 0xb3, 0x38, 0xf4, 0x1c, 0x36, 0x18, 0x6b,
	0xaa, 0x79, 0x96, 0xb0, 0x93, 0x24, 0xa8, 0x81, 0x59, 0x7a, 0xe4, 0xf9, 0xe2, 0x11, 0x8f, 0x69,
	0xec, 0xa7, 0x6f, 0xa0, 0x62, 0x45, 0x53, 0x78, 0xf9, 0xd0, 0x8f, 0xba, 0x50, 0xc0, 0xf6, 0x2c,
	0xec, 0xa1, 0x90, 0x66, 0x99, 0x63, 0xcf, 0x56, 0xb1, 0x0c, 0xab, 0x17, 0x99, 0x2e, 0xe2, 0xec,
	0x67, 0x8f, 0x7f, 0x7e, 0x2d, 0xd6, 0x61, 0x37, 0x1d, 0xac, 0xf4, 0x3a, 0xc1, 0xc0, 0x50, 0xd1,
	0xa1, 0x33, 0x6c, 0x8e, 0x18, 0x17, 0xeb, 0x27, 0x80, 0x52, 0x54, 0xc7, 0xe4, 0xbb, 0x2b, 0xe2,
	0x52, 0xd4, 0x80, 0x3c, 0xff, 0xac, 0x0a, 0x47, 0xeb, 0x6c, 0x7e, 0x41, 0x5b, 0xe9, 0xc8, 0x28,
	0xa0, 0xfe, 0x14, 0x76, 0xb8, 0x1d, 0x13, 0xd7, 0xb6, 0xe6, 0x2e, 0x41, 0x8f, 0x20, 0x17, 0xc4,
	0x30, 0xa1, 0xac, 0xca, 0x65, 0xde, 0xfa, 0xf7, 0xb0, 0x9b, 0x29, 0xcd, 0x93, 0x9b, 0xb0, 0xd5,
	0xb2, 0xcd, 0x4b, 0x3a, 0xa4, 0x57, 0x2e, 0x43, 0x28, 0xc7, 0xec, 0x89, 0xed, 0x38, 0x09, 0x41,
	0x4f, 0xa0, 0x10, 0xe5, 0x56, 0xd7, 0xd8, 0x65, 0xf7, 0xd2, 0x05, 0x23, 0x1f, 0x8e, 0xa3, 0xea,
	0x7f, 0x6c, 0xc0, 0xfd, 0xb6, 0x1a, 0xa4, 0x9b, 0xe3, 0x44, 0xe5, 0xf5, 0x15, 0x2a, 0x2f, 0x2d,
	0xe8, 0xf6, 0x87, 0x7f, 0x21, 0x5b, 0xc5, 0xf3, 0xc5, 0xe7, 0xb0, 0x15, 0x6b, 0x6d, 0x20, 0x8c,
	0x62, 0xfe, 0x5e, 0x6a, 0x58, 0x0b, 0x95, 0xd3, 0xea, 0x74, 0x30, 0x67, 0xf7, 0xe1, 0x1d, 0xde,
	0x88, 0xdf, 0x89, 0x4e, 0x7b, 0xb0, 0xb5, 0xa8, 0xd1, 0x0f, 0x3d, 0x5f, 0xfc, 0x20, 0xd1, 0x68,
	0xfd, 0x60, 0x19, 0x2c, 0x11, 0x69, 0x92, 0x8d, 0x7e, 0x14, 0xa0, 0xd8, 0x27, 0xd7, 0xb4, 0x6b,
	0xd9, 0xff, 0x28, 0xd3, 0x73, 0xcf, 0x17, 0xbb, 0x89, 0x4c, 0x07, 0xc2, 0x28, 0x5b, 0x61, 0x41,
	0xa9, 0xef, 0xad, 0x76, 0x46, 0xad, 0xa4, 0x4b, 0xa2, 0x13, 0x28, 0xb6, 0x8c, 0x99, 0x39, 0xe7,
	0xa3, 0xde, 0x60, 0xa3, 0x2e, 0xb1, 0xd9, 0x71, 0xbb, 0x54, 0xf1, 0x7c, 0xb1, 0x04, 0x30, 0x0c,
	0x8e, 0xba, 0x4b, 0x87, 0x14, 0xa7, 0x53, 0xd0, 0xa7, 0x50, 0x50, 0x5e, 0x12, 0xc7, 0x31, 0x8d,
	0x48, 0xaf, 0x3c, 0xfd, 0x42, 0x92, 0x2c, 0x6b, 0x2a, 0x95, 0x3d, 0x5f, 0x04, 0x28, 0x58, 0x3c,
	0x06, 0xc7, 0xd1, 0x8c, 0x64, 0x01, 0x50, 0xc7, 0x74, 0x29, 0x53, 0xee, 0x76, 0xb6, 0x96, 0x61,
	0xba, 0x14, 0x27, 0x21, 0xe8, 0x7d, 0x28, 0xf6, 0xe6, 0x94, 0x38, 0x93, 0xe1, 0x38, 0xe0, 0xc6,
	0x5f, 0x79, 0x46, 0x8e, 0xb4, 0x0d, 0x9d, 0x26, 0xeb, 0xe7, 0x4d, 0x3e, 0x3d, 0x9b, 0x68, 0xff,
	0x2c, 0xcc, 0xe6, 0x8e, 0x05, 0xf4, 0xec, 0xe4, 0xa7, 0xd7, 0xe2, 0x67, 0xb0, 0x97, 0x89, 0x8d,
	0xa4, 0x5b, 0x71, 0xe8, 0x8c, 0xf3, 0x96, 0x32, 0x4e, 0xd6, 0x90, 0x43, 0x67, 0xba, 0x4b, 0x1d,
	0xaa, 0x4f, 0xcc, 0xe9, 0x54, 0x9f, 0x5c, 0xcd, 0xc7, 0xf5, 0x2e, 0xec, 0x65, 0xe8, 0x1d, 0xa9,
	0xfa, 0x09, 0xe4, 0x9d, 0x8c, 0xaa, 0x1f, 0x72, 0xa1, 0x2c, 0x48, 0x01, 0x47, 0x61, 0xf5, 0x33,
	0x78, 0xb0, 0x80, 0xf4, 0xdf, 0x44, 0xda, 0x78, 0x05, 0x5b, 0xf1, 0x12, 0x45, 0xbb, 0xb0, 0x83,
	0x95, 0x17, 0x9a, 0x1c, 0xd2, 0xa2, 0xaf, 0xf4, 0xe5, 0xca, 0x3d, 0xb4, 0x07, 0x95, 0x94, 0x51,
	0xd1, 0xba, 0x32, 0xae, 0x08, 0xe8, 0x01, 0xdc, 0x4f, 0x59, 0xb1, 0xfc, 0xb9, 0xdc, 0xd6, 0x2a,
	0x6b, 0x0b, 0xc1, 0xe7, 0x4a, 0xbb, 0x75, 0x5e, 0x59, 0x5f, 0x0a, 0xbe, 0x50, 0x34, 0xb9, 0x92,
	0x6b, 0x3c, 0x05, 0x48, 0xf6, 0x71, 0x92, 0x1a, 0xae, 0x5f, 0x5e, 0x3d, 0xbe, 0x52, 0x68, 0x95,
	0xce, 0xd4, 0x4a, 0xf9, 0xf8, 0xb7, 0x35, 0x80, 0x68, 0x43, 0xbd, 0x1c, 0x23, 0x0c, 0xfb, 0x4b,
	0x4f, 0xd5, 0x76, 0xc8, 0x90, 0x12, 0xf4, 0xce, 0xf2, 0x43, 0xf2, 0x47, 0xaf, 0xd5, 0x56, 0xb9,
	0xf8, 0x22, 0xba, 0xb7, 0x12, 0xf3, 0x85, 0x6d, 0xbc, 0x75, 0xcc, 0x0e, 0x99, 0x92, 0xff, 0x83,
	0x29, 0x43, 0x39, 0xb5, 0xab, 0xcf, 0x08, 0x45, 0xfb, 0x4b, 0x5b, 0x9d, 0x03, 0x55, 0x97, 0x1d,
	0x11, 0x8c, 0x54, 0xfa, 0xf5, 0xf6, 0x50, 0xf8, 0xfd, 0xf6, 0x50, 0xf8, 0xf3, 0xf6, 0x50, 0x18,
	0x6d, 0xb2, 0x3f, 0xbd, 0x4f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x0d, 0xc0, 0xc6, 0xbd,
	0x09, 0x00, 0x00,
}
