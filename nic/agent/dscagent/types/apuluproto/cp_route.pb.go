// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cp_route.proto

package pds

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/pensando/sw/nic/apollo/agent/gen/pds/meta/pds"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// route type
type RouteType int32

const (
	RouteType_ROUTE_TYPE_NONE   RouteType = 0
	RouteType_ROUTE_TYPE_OTHER  RouteType = 1
	RouteType_ROUTE_TYPE_REJECT RouteType = 2
	RouteType_ROUTE_TYPE_LOCAL  RouteType = 3
	RouteType_ROUTE_TYPE_REMOTE RouteType = 4
)

var RouteType_name = map[int32]string{
	0: "ROUTE_TYPE_NONE",
	1: "ROUTE_TYPE_OTHER",
	2: "ROUTE_TYPE_REJECT",
	3: "ROUTE_TYPE_LOCAL",
	4: "ROUTE_TYPE_REMOTE",
}
var RouteType_value = map[string]int32{
	"ROUTE_TYPE_NONE":   0,
	"ROUTE_TYPE_OTHER":  1,
	"ROUTE_TYPE_REJECT": 2,
	"ROUTE_TYPE_LOCAL":  3,
	"ROUTE_TYPE_REMOTE": 4,
}

func (x RouteType) String() string {
	return proto.EnumName(RouteType_name, int32(x))
}
func (RouteType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{0} }

// route protocols
type RouteProtocol int32

const (
	RouteProtocol_ROUTE_PROTO_NONE   RouteProtocol = 0
	RouteProtocol_ROUTE_PROTO_LOCAL  RouteProtocol = 2
	RouteProtocol_ROUTE_PROTO_STATIC RouteProtocol = 3
	RouteProtocol_ROUTE_PROTO_BGP    RouteProtocol = 14
)

var RouteProtocol_name = map[int32]string{
	0:  "ROUTE_PROTO_NONE",
	2:  "ROUTE_PROTO_LOCAL",
	3:  "ROUTE_PROTO_STATIC",
	14: "ROUTE_PROTO_BGP",
}
var RouteProtocol_value = map[string]int32{
	"ROUTE_PROTO_NONE":   0,
	"ROUTE_PROTO_LOCAL":  2,
	"ROUTE_PROTO_STATIC": 3,
	"ROUTE_PROTO_BGP":    14,
}

func (x RouteProtocol) String() string {
	return proto.EnumName(RouteProtocol_name, int32(x))
}
func (RouteProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{1} }

// control plane route table
type CPRouteStatus struct {
	// route table id this route belongs to
	RouteTableId uint32 `protobuf:"varint,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,2,opt,name=DestAddr" json:"DestAddr,omitempty"`
	// destination address prefix
	DestPrefixLen uint32 `protobuf:"varint,3,opt,name=DestPrefixLen,proto3" json:"DestPrefixLen,omitempty"`
	// next-hop address
	NHAddr *IPAddress `protobuf:"bytes,4,opt,name=NHAddr" json:"NHAddr,omitempty"`
	// interface index, if the next-hop is an interface
	IfIndex uint32 `protobuf:"varint,5,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	// type of route
	Type RouteType `protobuf:"varint,6,opt,name=Type,proto3,enum=pds.RouteType" json:"Type,omitempty"`
	// protocol via which the route is learned
	Proto RouteProtocol `protobuf:"varint,7,opt,name=Proto,proto3,enum=pds.RouteProtocol" json:"Proto,omitempty"`
}

func (m *CPRouteStatus) Reset()                    { *m = CPRouteStatus{} }
func (m *CPRouteStatus) String() string            { return proto.CompactTextString(m) }
func (*CPRouteStatus) ProtoMessage()               {}
func (*CPRouteStatus) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{0} }

func (m *CPRouteStatus) GetRouteTableId() uint32 {
	if m != nil {
		return m.RouteTableId
	}
	return 0
}

func (m *CPRouteStatus) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPRouteStatus) GetDestPrefixLen() uint32 {
	if m != nil {
		return m.DestPrefixLen
	}
	return 0
}

func (m *CPRouteStatus) GetNHAddr() *IPAddress {
	if m != nil {
		return m.NHAddr
	}
	return nil
}

func (m *CPRouteStatus) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

func (m *CPRouteStatus) GetType() RouteType {
	if m != nil {
		return m.Type
	}
	return RouteType_ROUTE_TYPE_NONE
}

func (m *CPRouteStatus) GetProto() RouteProtocol {
	if m != nil {
		return m.Proto
	}
	return RouteProtocol_ROUTE_PROTO_NONE
}

type CPRouteKey struct {
	// route table id this route belongs to
	RouteTableId uint32 `protobuf:"varint,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,2,opt,name=DestAddr" json:"DestAddr,omitempty"`
	// destination address prefix
	DestPrefixLen uint32 `protobuf:"varint,3,opt,name=DestPrefixLen,proto3" json:"DestPrefixLen,omitempty"`
	// next-hop address
	NHAddr *IPAddress `protobuf:"bytes,4,opt,name=NHAddr" json:"NHAddr,omitempty"`
	// interface index, if the next-hop is an interface
	IfIndex uint32 `protobuf:"varint,5,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	// protocol via which the route is learned
	Proto RouteProtocol `protobuf:"varint,6,opt,name=Proto,proto3,enum=pds.RouteProtocol" json:"Proto,omitempty"`
}

func (m *CPRouteKey) Reset()                    { *m = CPRouteKey{} }
func (m *CPRouteKey) String() string            { return proto.CompactTextString(m) }
func (*CPRouteKey) ProtoMessage()               {}
func (*CPRouteKey) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{1} }

func (m *CPRouteKey) GetRouteTableId() uint32 {
	if m != nil {
		return m.RouteTableId
	}
	return 0
}

func (m *CPRouteKey) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPRouteKey) GetDestPrefixLen() uint32 {
	if m != nil {
		return m.DestPrefixLen
	}
	return 0
}

func (m *CPRouteKey) GetNHAddr() *IPAddress {
	if m != nil {
		return m.NHAddr
	}
	return nil
}

func (m *CPRouteKey) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

func (m *CPRouteKey) GetProto() RouteProtocol {
	if m != nil {
		return m.Proto
	}
	return RouteProtocol_ROUTE_PROTO_NONE
}

type CPRouteKeyHandle struct {
	Key *CPRouteKey `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
}

func (m *CPRouteKeyHandle) Reset()                    { *m = CPRouteKeyHandle{} }
func (m *CPRouteKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*CPRouteKeyHandle) ProtoMessage()               {}
func (*CPRouteKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{2} }

func (m *CPRouteKeyHandle) GetKey() *CPRouteKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// control plane route table get request
type CPRouteGetRequest struct {
	Request []*CPRouteKeyHandle `protobuf:"bytes,1,rep,name=Request" json:"Request,omitempty"`
}

func (m *CPRouteGetRequest) Reset()                    { *m = CPRouteGetRequest{} }
func (m *CPRouteGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CPRouteGetRequest) ProtoMessage()               {}
func (*CPRouteGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{3} }

func (m *CPRouteGetRequest) GetRequest() []*CPRouteKeyHandle {
	if m != nil {
		return m.Request
	}
	return nil
}

type CPRoute struct {
	Status *CPRouteStatus `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *CPRoute) Reset()                    { *m = CPRoute{} }
func (m *CPRoute) String() string            { return proto.CompactTextString(m) }
func (*CPRoute) ProtoMessage()               {}
func (*CPRoute) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{4} }

func (m *CPRoute) GetStatus() *CPRouteStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type CPRouteGetResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response  []*CPRoute `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *CPRouteGetResponse) Reset()                    { *m = CPRouteGetResponse{} }
func (m *CPRouteGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CPRouteGetResponse) ProtoMessage()               {}
func (*CPRouteGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{5} }

func (m *CPRouteGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CPRouteGetResponse) GetResponse() []*CPRoute {
	if m != nil {
		return m.Response
	}
	return nil
}

// control plane static route configuration
type CPStaticRouteSpec struct {
	// route table id this route belongs to
	RouteTableId []byte `protobuf:"bytes,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,2,opt,name=DestAddr" json:"DestAddr,omitempty" meta:mandatory,immutable`
	// destination address prefix length
	PrefixLen uint32 `protobuf:"varint,3,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty" meta:mandatory,immutable`
	// next-hop address
	NextHopAddr *IPAddress `protobuf:"bytes,4,opt,name=NextHopAddr" json:"NextHopAddr,omitempty" meta:mandatory,immutable`
	// route is enabled or not
	State AdminState `protobuf:"varint,5,opt,name=State,proto3,enum=types.AdminState" json:"State,omitempty"`
	// override admin distance
	Override bool `protobuf:"varint,6,opt,name=Override,proto3" json:"Override,omitempty"`
	// admin distance
	AdminDist uint32 `protobuf:"varint,7,opt,name=AdminDist,proto3" json:"AdminDist,omitempty"`
	// optional interface ID, if this route is configured on RR
	InterfaceId []byte `protobuf:"bytes,8,opt,name=InterfaceId,proto3" json:"InterfaceId,omitempty"`
}

func (m *CPStaticRouteSpec) Reset()                    { *m = CPStaticRouteSpec{} }
func (m *CPStaticRouteSpec) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteSpec) ProtoMessage()               {}
func (*CPStaticRouteSpec) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{6} }

func (m *CPStaticRouteSpec) GetRouteTableId() []byte {
	if m != nil {
		return m.RouteTableId
	}
	return nil
}

func (m *CPStaticRouteSpec) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPStaticRouteSpec) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *CPStaticRouteSpec) GetNextHopAddr() *IPAddress {
	if m != nil {
		return m.NextHopAddr
	}
	return nil
}

func (m *CPStaticRouteSpec) GetState() AdminState {
	if m != nil {
		return m.State
	}
	return AdminState_ADMIN_STATE_NONE
}

func (m *CPStaticRouteSpec) GetOverride() bool {
	if m != nil {
		return m.Override
	}
	return false
}

func (m *CPStaticRouteSpec) GetAdminDist() uint32 {
	if m != nil {
		return m.AdminDist
	}
	return 0
}

func (m *CPStaticRouteSpec) GetInterfaceId() []byte {
	if m != nil {
		return m.InterfaceId
	}
	return nil
}

// control plane static route create and update request message
type CPStaticRouteRequest struct {
	Request []*CPStaticRouteSpec `protobuf:"bytes,1,rep,name=Request" json:"Request,omitempty"`
}

func (m *CPStaticRouteRequest) Reset()                    { *m = CPStaticRouteRequest{} }
func (m *CPStaticRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteRequest) ProtoMessage()               {}
func (*CPStaticRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{7} }

func (m *CPStaticRouteRequest) GetRequest() []*CPStaticRouteSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// status of control plane static route, if any
type CPStaticRouteStatus struct {
}

func (m *CPStaticRouteStatus) Reset()                    { *m = CPStaticRouteStatus{} }
func (m *CPStaticRouteStatus) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteStatus) ProtoMessage()               {}
func (*CPStaticRouteStatus) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{8} }

// control plane static route object
type CPStaticRoute struct {
	Spec   *CPStaticRouteSpec   `protobuf:"bytes,1,opt,name=Spec" json:"Spec,omitempty"`
	Status *CPStaticRouteStatus `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (m *CPStaticRoute) Reset()                    { *m = CPStaticRoute{} }
func (m *CPStaticRoute) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRoute) ProtoMessage()               {}
func (*CPStaticRoute) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{9} }

func (m *CPStaticRoute) GetSpec() *CPStaticRouteSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CPStaticRoute) GetStatus() *CPStaticRouteStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// response messages
type CPStaticRouteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
}

func (m *CPStaticRouteResponse) Reset()                    { *m = CPStaticRouteResponse{} }
func (m *CPStaticRouteResponse) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteResponse) ProtoMessage()               {}
func (*CPStaticRouteResponse) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{10} }

func (m *CPStaticRouteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// control plane static route key parameters
type CPStaticRouteKey struct {
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,1,opt,name=DestAddr" json:"DestAddr,omitempty"`
	// destination address prefix length
	PrefixLen uint32 `protobuf:"varint,2,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	// next-hop address
	NextHopAddr *IPAddress `protobuf:"bytes,3,opt,name=NextHopAddr" json:"NextHopAddr,omitempty"`
}

func (m *CPStaticRouteKey) Reset()                    { *m = CPStaticRouteKey{} }
func (m *CPStaticRouteKey) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteKey) ProtoMessage()               {}
func (*CPStaticRouteKey) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{11} }

func (m *CPStaticRouteKey) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPStaticRouteKey) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *CPStaticRouteKey) GetNextHopAddr() *IPAddress {
	if m != nil {
		return m.NextHopAddr
	}
	return nil
}

// control plane static route key handle
type CPStaticRouteKeyHandle struct {
	// unique identifier or key parameters
	//
	// Types that are valid to be assigned to IdOrKey:
	//	*CPStaticRouteKeyHandle_Id
	//	*CPStaticRouteKeyHandle_Key
	IdOrKey isCPStaticRouteKeyHandle_IdOrKey `protobuf_oneof:"id_or_key"`
}

func (m *CPStaticRouteKeyHandle) Reset()                    { *m = CPStaticRouteKeyHandle{} }
func (m *CPStaticRouteKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteKeyHandle) ProtoMessage()               {}
func (*CPStaticRouteKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{12} }

type isCPStaticRouteKeyHandle_IdOrKey interface {
	isCPStaticRouteKeyHandle_IdOrKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CPStaticRouteKeyHandle_Id struct {
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3,oneof"`
}
type CPStaticRouteKeyHandle_Key struct {
	Key *CPStaticRouteKey `protobuf:"bytes,2,opt,name=Key,oneof"`
}

func (*CPStaticRouteKeyHandle_Id) isCPStaticRouteKeyHandle_IdOrKey()  {}
func (*CPStaticRouteKeyHandle_Key) isCPStaticRouteKeyHandle_IdOrKey() {}

func (m *CPStaticRouteKeyHandle) GetIdOrKey() isCPStaticRouteKeyHandle_IdOrKey {
	if m != nil {
		return m.IdOrKey
	}
	return nil
}

func (m *CPStaticRouteKeyHandle) GetId() []byte {
	if x, ok := m.GetIdOrKey().(*CPStaticRouteKeyHandle_Id); ok {
		return x.Id
	}
	return nil
}

func (m *CPStaticRouteKeyHandle) GetKey() *CPStaticRouteKey {
	if x, ok := m.GetIdOrKey().(*CPStaticRouteKeyHandle_Key); ok {
		return x.Key
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CPStaticRouteKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CPStaticRouteKeyHandle_OneofMarshaler, _CPStaticRouteKeyHandle_OneofUnmarshaler, _CPStaticRouteKeyHandle_OneofSizer, []interface{}{
		(*CPStaticRouteKeyHandle_Id)(nil),
		(*CPStaticRouteKeyHandle_Key)(nil),
	}
}

func _CPStaticRouteKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CPStaticRouteKeyHandle)
	// id_or_key
	switch x := m.IdOrKey.(type) {
	case *CPStaticRouteKeyHandle_Id:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Id)
	case *CPStaticRouteKeyHandle_Key:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Key); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CPStaticRouteKeyHandle.IdOrKey has unexpected type %T", x)
	}
	return nil
}

func _CPStaticRouteKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CPStaticRouteKeyHandle)
	switch tag {
	case 1: // id_or_key.Id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.IdOrKey = &CPStaticRouteKeyHandle_Id{x}
		return true, err
	case 2: // id_or_key.Key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CPStaticRouteKey)
		err := b.DecodeMessage(msg)
		m.IdOrKey = &CPStaticRouteKeyHandle_Key{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CPStaticRouteKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CPStaticRouteKeyHandle)
	// id_or_key
	switch x := m.IdOrKey.(type) {
	case *CPStaticRouteKeyHandle_Id:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Id)))
		n += len(x.Id)
	case *CPStaticRouteKeyHandle_Key:
		s := proto.Size(x.Key)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// control plane route delete request
type CPStaticRouteDeleteRequest struct {
	Request []*CPStaticRouteKeyHandle `protobuf:"bytes,1,rep,name=Request" json:"Request,omitempty"`
}

func (m *CPStaticRouteDeleteRequest) Reset()         { *m = CPStaticRouteDeleteRequest{} }
func (m *CPStaticRouteDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteDeleteRequest) ProtoMessage()    {}
func (*CPStaticRouteDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCpRoute, []int{13}
}

func (m *CPStaticRouteDeleteRequest) GetRequest() []*CPStaticRouteKeyHandle {
	if m != nil {
		return m.Request
	}
	return nil
}

// control plane route delete response
type CPStaticRouteDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
}

func (m *CPStaticRouteDeleteResponse) Reset()         { *m = CPStaticRouteDeleteResponse{} }
func (m *CPStaticRouteDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*CPStaticRouteDeleteResponse) ProtoMessage()    {}
func (*CPStaticRouteDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCpRoute, []int{14}
}

func (m *CPStaticRouteDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// control plane route get request
type CPStaticRouteGetRequest struct {
	Request []*CPStaticRouteKeyHandle `protobuf:"bytes,1,rep,name=Request" json:"Request,omitempty"`
}

func (m *CPStaticRouteGetRequest) Reset()                    { *m = CPStaticRouteGetRequest{} }
func (m *CPStaticRouteGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteGetRequest) ProtoMessage()               {}
func (*CPStaticRouteGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{15} }

func (m *CPStaticRouteGetRequest) GetRequest() []*CPStaticRouteKeyHandle {
	if m != nil {
		return m.Request
	}
	return nil
}

// control plane route get response
type CPStaticRouteGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response  []*CPStaticRoute `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *CPStaticRouteGetResponse) Reset()                    { *m = CPStaticRouteGetResponse{} }
func (m *CPStaticRouteGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CPStaticRouteGetResponse) ProtoMessage()               {}
func (*CPStaticRouteGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{16} }

func (m *CPStaticRouteGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CPStaticRouteGetResponse) GetResponse() []*CPStaticRoute {
	if m != nil {
		return m.Response
	}
	return nil
}

// control plane active route table
type CPActiveRouteStatus struct {
	// route table id this route belongs to
	RouteTableId uint32 `protobuf:"varint,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,2,opt,name=DestAddr" json:"DestAddr,omitempty"`
	// destination address prefix
	DestPrefixLen uint32 `protobuf:"varint,3,opt,name=DestPrefixLen,proto3" json:"DestPrefixLen,omitempty"`
	// next-hop address
	NHAddr *IPAddress `protobuf:"bytes,4,opt,name=NHAddr" json:"NHAddr,omitempty"`
	// interface index, if the next-hop is an interface
	IfIndex uint32 `protobuf:"varint,5,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	// type of route
	Type RouteType `protobuf:"varint,6,opt,name=Type,proto3,enum=pds.RouteType" json:"Type,omitempty"`
	// protocol via which the route is learned
	Proto RouteProtocol `protobuf:"varint,7,opt,name=Proto,proto3,enum=pds.RouteProtocol" json:"Proto,omitempty"`
	// The number of seconds since this route was last updated or otherwise determined to be correct.
	Age int32 `protobuf:"varint,8,opt,name=Age,proto3" json:"Age,omitempty"`
	// The primary routing metric for this route
	Metric1 int32 `protobuf:"varint,9,opt,name=Metric1,proto3" json:"Metric1,omitempty"`
	// Indicates whether the route destination is directly connected
	Connected bool `protobuf:"varint,10,opt,name=Connected,proto3" json:"Connected,omitempty"`
	// Administrative distance for this route
	AdminDistance int32 `protobuf:"varint,11,opt,name=AdminDistance,proto3" json:"AdminDistance,omitempty"`
}

func (m *CPActiveRouteStatus) Reset()                    { *m = CPActiveRouteStatus{} }
func (m *CPActiveRouteStatus) String() string            { return proto.CompactTextString(m) }
func (*CPActiveRouteStatus) ProtoMessage()               {}
func (*CPActiveRouteStatus) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{17} }

func (m *CPActiveRouteStatus) GetRouteTableId() uint32 {
	if m != nil {
		return m.RouteTableId
	}
	return 0
}

func (m *CPActiveRouteStatus) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPActiveRouteStatus) GetDestPrefixLen() uint32 {
	if m != nil {
		return m.DestPrefixLen
	}
	return 0
}

func (m *CPActiveRouteStatus) GetNHAddr() *IPAddress {
	if m != nil {
		return m.NHAddr
	}
	return nil
}

func (m *CPActiveRouteStatus) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

func (m *CPActiveRouteStatus) GetType() RouteType {
	if m != nil {
		return m.Type
	}
	return RouteType_ROUTE_TYPE_NONE
}

func (m *CPActiveRouteStatus) GetProto() RouteProtocol {
	if m != nil {
		return m.Proto
	}
	return RouteProtocol_ROUTE_PROTO_NONE
}

func (m *CPActiveRouteStatus) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *CPActiveRouteStatus) GetMetric1() int32 {
	if m != nil {
		return m.Metric1
	}
	return 0
}

func (m *CPActiveRouteStatus) GetConnected() bool {
	if m != nil {
		return m.Connected
	}
	return false
}

func (m *CPActiveRouteStatus) GetAdminDistance() int32 {
	if m != nil {
		return m.AdminDistance
	}
	return 0
}

type CPActiveRouteKey struct {
	// route table id this route belongs to
	RouteTableId uint32 `protobuf:"varint,1,opt,name=RouteTableId,proto3" json:"RouteTableId,omitempty"`
	// destination address
	DestAddr *IPAddress `protobuf:"bytes,2,opt,name=DestAddr" json:"DestAddr,omitempty"`
	// destination address prefix
	DestPrefixLen uint32 `protobuf:"varint,3,opt,name=DestPrefixLen,proto3" json:"DestPrefixLen,omitempty"`
	// next-hop address
	NHAddr *IPAddress `protobuf:"bytes,4,opt,name=NHAddr" json:"NHAddr,omitempty"`
	// interface index, if the next-hop is an interface
	IfIndex uint32 `protobuf:"varint,5,opt,name=IfIndex,proto3" json:"IfIndex,omitempty"`
	// protocol via which the route is learned
	Proto RouteProtocol `protobuf:"varint,6,opt,name=Proto,proto3,enum=pds.RouteProtocol" json:"Proto,omitempty"`
}

func (m *CPActiveRouteKey) Reset()                    { *m = CPActiveRouteKey{} }
func (m *CPActiveRouteKey) String() string            { return proto.CompactTextString(m) }
func (*CPActiveRouteKey) ProtoMessage()               {}
func (*CPActiveRouteKey) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{18} }

func (m *CPActiveRouteKey) GetRouteTableId() uint32 {
	if m != nil {
		return m.RouteTableId
	}
	return 0
}

func (m *CPActiveRouteKey) GetDestAddr() *IPAddress {
	if m != nil {
		return m.DestAddr
	}
	return nil
}

func (m *CPActiveRouteKey) GetDestPrefixLen() uint32 {
	if m != nil {
		return m.DestPrefixLen
	}
	return 0
}

func (m *CPActiveRouteKey) GetNHAddr() *IPAddress {
	if m != nil {
		return m.NHAddr
	}
	return nil
}

func (m *CPActiveRouteKey) GetIfIndex() uint32 {
	if m != nil {
		return m.IfIndex
	}
	return 0
}

func (m *CPActiveRouteKey) GetProto() RouteProtocol {
	if m != nil {
		return m.Proto
	}
	return RouteProtocol_ROUTE_PROTO_NONE
}

type CPActiveRouteKeyHandle struct {
	Key *CPActiveRouteKey `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
}

func (m *CPActiveRouteKeyHandle) Reset()                    { *m = CPActiveRouteKeyHandle{} }
func (m *CPActiveRouteKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*CPActiveRouteKeyHandle) ProtoMessage()               {}
func (*CPActiveRouteKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{19} }

func (m *CPActiveRouteKeyHandle) GetKey() *CPActiveRouteKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// control plane route table get request
type CPActiveRouteGetRequest struct {
	Request []*CPActiveRouteKeyHandle `protobuf:"bytes,1,rep,name=Request" json:"Request,omitempty"`
}

func (m *CPActiveRouteGetRequest) Reset()                    { *m = CPActiveRouteGetRequest{} }
func (m *CPActiveRouteGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CPActiveRouteGetRequest) ProtoMessage()               {}
func (*CPActiveRouteGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{20} }

func (m *CPActiveRouteGetRequest) GetRequest() []*CPActiveRouteKeyHandle {
	if m != nil {
		return m.Request
	}
	return nil
}

type CPActiveRoute struct {
	Status *CPActiveRouteStatus `protobuf:"bytes,1,opt,name=Status" json:"Status,omitempty"`
}

func (m *CPActiveRoute) Reset()                    { *m = CPActiveRoute{} }
func (m *CPActiveRoute) String() string            { return proto.CompactTextString(m) }
func (*CPActiveRoute) ProtoMessage()               {}
func (*CPActiveRoute) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{21} }

func (m *CPActiveRoute) GetStatus() *CPActiveRouteStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type CPActiveRouteGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response  []*CPActiveRoute `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *CPActiveRouteGetResponse) Reset()                    { *m = CPActiveRouteGetResponse{} }
func (m *CPActiveRouteGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CPActiveRouteGetResponse) ProtoMessage()               {}
func (*CPActiveRouteGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorCpRoute, []int{22} }

func (m *CPActiveRouteGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CPActiveRouteGetResponse) GetResponse() []*CPActiveRoute {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*CPRouteStatus)(nil), "pds.CPRouteStatus")
	proto.RegisterType((*CPRouteKey)(nil), "pds.CPRouteKey")
	proto.RegisterType((*CPRouteKeyHandle)(nil), "pds.CPRouteKeyHandle")
	proto.RegisterType((*CPRouteGetRequest)(nil), "pds.CPRouteGetRequest")
	proto.RegisterType((*CPRoute)(nil), "pds.CPRoute")
	proto.RegisterType((*CPRouteGetResponse)(nil), "pds.CPRouteGetResponse")
	proto.RegisterType((*CPStaticRouteSpec)(nil), "pds.CPStaticRouteSpec")
	proto.RegisterType((*CPStaticRouteRequest)(nil), "pds.CPStaticRouteRequest")
	proto.RegisterType((*CPStaticRouteStatus)(nil), "pds.CPStaticRouteStatus")
	proto.RegisterType((*CPStaticRoute)(nil), "pds.CPStaticRoute")
	proto.RegisterType((*CPStaticRouteResponse)(nil), "pds.CPStaticRouteResponse")
	proto.RegisterType((*CPStaticRouteKey)(nil), "pds.CPStaticRouteKey")
	proto.RegisterType((*CPStaticRouteKeyHandle)(nil), "pds.CPStaticRouteKeyHandle")
	proto.RegisterType((*CPStaticRouteDeleteRequest)(nil), "pds.CPStaticRouteDeleteRequest")
	proto.RegisterType((*CPStaticRouteDeleteResponse)(nil), "pds.CPStaticRouteDeleteResponse")
	proto.RegisterType((*CPStaticRouteGetRequest)(nil), "pds.CPStaticRouteGetRequest")
	proto.RegisterType((*CPStaticRouteGetResponse)(nil), "pds.CPStaticRouteGetResponse")
	proto.RegisterType((*CPActiveRouteStatus)(nil), "pds.CPActiveRouteStatus")
	proto.RegisterType((*CPActiveRouteKey)(nil), "pds.CPActiveRouteKey")
	proto.RegisterType((*CPActiveRouteKeyHandle)(nil), "pds.CPActiveRouteKeyHandle")
	proto.RegisterType((*CPActiveRouteGetRequest)(nil), "pds.CPActiveRouteGetRequest")
	proto.RegisterType((*CPActiveRoute)(nil), "pds.CPActiveRoute")
	proto.RegisterType((*CPActiveRouteGetResponse)(nil), "pds.CPActiveRouteGetResponse")
	proto.RegisterEnum("pds.RouteType", RouteType_name, RouteType_value)
	proto.RegisterEnum("pds.RouteProtocol", RouteProtocol_name, RouteProtocol_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CPRouteSvc service

type CPRouteSvcClient interface {
	CPStaticRouteCreate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error)
	CPStaticRouteUpdate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error)
	CPStaticRouteDelete(ctx context.Context, in *CPStaticRouteDeleteRequest, opts ...grpc.CallOption) (*CPStaticRouteDeleteResponse, error)
	CPStaticRouteGet(ctx context.Context, in *CPStaticRouteGetRequest, opts ...grpc.CallOption) (*CPStaticRouteGetResponse, error)
	CPRouteGet(ctx context.Context, in *CPRouteGetRequest, opts ...grpc.CallOption) (*CPRouteGetResponse, error)
	CPActiveRouteGet(ctx context.Context, in *CPActiveRouteGetRequest, opts ...grpc.CallOption) (*CPActiveRouteGetResponse, error)
}

type cPRouteSvcClient struct {
	cc *grpc.ClientConn
}

func NewCPRouteSvcClient(cc *grpc.ClientConn) CPRouteSvcClient {
	return &cPRouteSvcClient{cc}
}

func (c *cPRouteSvcClient) CPStaticRouteCreate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error) {
	out := new(CPStaticRouteResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPStaticRouteUpdate(ctx context.Context, in *CPStaticRouteRequest, opts ...grpc.CallOption) (*CPStaticRouteResponse, error) {
	out := new(CPStaticRouteResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPStaticRouteDelete(ctx context.Context, in *CPStaticRouteDeleteRequest, opts ...grpc.CallOption) (*CPStaticRouteDeleteResponse, error) {
	out := new(CPStaticRouteDeleteResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPStaticRouteGet(ctx context.Context, in *CPStaticRouteGetRequest, opts ...grpc.CallOption) (*CPStaticRouteGetResponse, error) {
	out := new(CPStaticRouteGetResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPStaticRouteGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPRouteGet(ctx context.Context, in *CPRouteGetRequest, opts ...grpc.CallOption) (*CPRouteGetResponse, error) {
	out := new(CPRouteGetResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPRouteGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPRouteSvcClient) CPActiveRouteGet(ctx context.Context, in *CPActiveRouteGetRequest, opts ...grpc.CallOption) (*CPActiveRouteGetResponse, error) {
	out := new(CPActiveRouteGetResponse)
	err := grpc.Invoke(ctx, "/pds.CPRouteSvc/CPActiveRouteGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CPRouteSvc service

type CPRouteSvcServer interface {
	CPStaticRouteCreate(context.Context, *CPStaticRouteRequest) (*CPStaticRouteResponse, error)
	CPStaticRouteUpdate(context.Context, *CPStaticRouteRequest) (*CPStaticRouteResponse, error)
	CPStaticRouteDelete(context.Context, *CPStaticRouteDeleteRequest) (*CPStaticRouteDeleteResponse, error)
	CPStaticRouteGet(context.Context, *CPStaticRouteGetRequest) (*CPStaticRouteGetResponse, error)
	CPRouteGet(context.Context, *CPRouteGetRequest) (*CPRouteGetResponse, error)
	CPActiveRouteGet(context.Context, *CPActiveRouteGetRequest) (*CPActiveRouteGetResponse, error)
}

func RegisterCPRouteSvcServer(s *grpc.Server, srv CPRouteSvcServer) {
	s.RegisterService(&_CPRouteSvc_serviceDesc, srv)
}

func _CPRouteSvc_CPStaticRouteCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteCreate(ctx, req.(*CPStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPStaticRouteUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteUpdate(ctx, req.(*CPStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPStaticRouteDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteDelete(ctx, req.(*CPStaticRouteDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPStaticRouteGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPStaticRouteGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPStaticRouteGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPStaticRouteGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPStaticRouteGet(ctx, req.(*CPStaticRouteGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPRouteGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPRouteGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPRouteGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPRouteGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPRouteGet(ctx, req.(*CPRouteGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPRouteSvc_CPActiveRouteGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPActiveRouteGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPRouteSvcServer).CPActiveRouteGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.CPRouteSvc/CPActiveRouteGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPRouteSvcServer).CPActiveRouteGet(ctx, req.(*CPActiveRouteGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CPRouteSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.CPRouteSvc",
	HandlerType: (*CPRouteSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CPStaticRouteCreate",
			Handler:    _CPRouteSvc_CPStaticRouteCreate_Handler,
		},
		{
			MethodName: "CPStaticRouteUpdate",
			Handler:    _CPRouteSvc_CPStaticRouteUpdate_Handler,
		},
		{
			MethodName: "CPStaticRouteDelete",
			Handler:    _CPRouteSvc_CPStaticRouteDelete_Handler,
		},
		{
			MethodName: "CPStaticRouteGet",
			Handler:    _CPRouteSvc_CPStaticRouteGet_Handler,
		},
		{
			MethodName: "CPRouteGet",
			Handler:    _CPRouteSvc_CPRouteGet_Handler,
		},
		{
			MethodName: "CPActiveRouteGet",
			Handler:    _CPRouteSvc_CPActiveRouteGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cp_route.proto",
}

func (m *CPRouteStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RouteTableId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestAddr.Size()))
		n1, err := m.DestAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DestPrefixLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.NHAddr.Size()))
		n2, err := m.NHAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.IfIndex))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Type))
	}
	if m.Proto != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Proto))
	}
	return i, nil
}

func (m *CPRouteKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RouteTableId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestAddr.Size()))
		n3, err := m.DestAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DestPrefixLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.NHAddr.Size()))
		n4, err := m.NHAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.IfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.IfIndex))
	}
	if m.Proto != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Proto))
	}
	return i, nil
}

func (m *CPRouteKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Key.Size()))
		n5, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *CPRouteGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRoute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Status.Size()))
		n6, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *CPRouteGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPRouteGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPStaticRouteSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RouteTableId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(len(m.RouteTableId)))
		i += copy(dAtA[i:], m.RouteTableId)
	}
	if m.DestAddr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestAddr.Size()))
		n7, err := m.DestAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.PrefixLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.PrefixLen))
	}
	if m.NextHopAddr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.NextHopAddr.Size()))
		n8, err := m.NextHopAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.State != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.State))
	}
	if m.Override {
		dAtA[i] = 0x30
		i++
		if m.Override {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AdminDist != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.AdminDist))
	}
	if len(m.InterfaceId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(len(m.InterfaceId)))
		i += copy(dAtA[i:], m.InterfaceId)
	}
	return i, nil
}

func (m *CPStaticRouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPStaticRouteStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CPStaticRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRoute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Spec.Size()))
		n9, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Status.Size()))
		n10, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *CPStaticRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *CPStaticRouteKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DestAddr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestAddr.Size()))
		n11, err := m.DestAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.PrefixLen != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.PrefixLen))
	}
	if m.NextHopAddr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.NextHopAddr.Size()))
		n12, err := m.NextHopAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *CPStaticRouteKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdOrKey != nil {
		nn13, err := m.IdOrKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	return i, nil
}

func (m *CPStaticRouteKeyHandle_Id) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}
func (m *CPStaticRouteKeyHandle_Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Key.Size()))
		n14, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *CPStaticRouteDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPStaticRouteDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *CPStaticRouteGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPStaticRouteGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPStaticRouteGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPActiveRouteStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPActiveRouteStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RouteTableId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestAddr.Size()))
		n15, err := m.DestAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.DestPrefixLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.NHAddr.Size()))
		n16, err := m.NHAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.IfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.IfIndex))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Type))
	}
	if m.Proto != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Proto))
	}
	if m.Age != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Age))
	}
	if m.Metric1 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Metric1))
	}
	if m.Connected {
		dAtA[i] = 0x50
		i++
		if m.Connected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AdminDistance != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.AdminDistance))
	}
	return i, nil
}

func (m *CPActiveRouteKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPActiveRouteKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RouteTableId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestAddr.Size()))
		n17, err := m.DestAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.DestPrefixLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.NHAddr.Size()))
		n18, err := m.NHAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.IfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.IfIndex))
	}
	if m.Proto != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Proto))
	}
	return i, nil
}

func (m *CPActiveRouteKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPActiveRouteKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Key.Size()))
		n19, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *CPActiveRouteGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPActiveRouteGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPActiveRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPActiveRoute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.Status.Size()))
		n20, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *CPActiveRouteGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPActiveRouteGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpRoute(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCpRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCpRoute(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CPRouteStatus) Size() (n int) {
	var l int
	_ = l
	if m.RouteTableId != 0 {
		n += 1 + sovCpRoute(uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestPrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		l = m.NHAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.IfIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.IfIndex))
	}
	if m.Type != 0 {
		n += 1 + sovCpRoute(uint64(m.Type))
	}
	if m.Proto != 0 {
		n += 1 + sovCpRoute(uint64(m.Proto))
	}
	return n
}

func (m *CPRouteKey) Size() (n int) {
	var l int
	_ = l
	if m.RouteTableId != 0 {
		n += 1 + sovCpRoute(uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestPrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		l = m.NHAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.IfIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.IfIndex))
	}
	if m.Proto != 0 {
		n += 1 + sovCpRoute(uint64(m.Proto))
	}
	return n
}

func (m *CPRouteKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}

func (m *CPRouteGetRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPRoute) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}

func (m *CPRouteGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPStaticRouteSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.RouteTableId)
	if l > 0 {
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.PrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.PrefixLen))
	}
	if m.NextHopAddr != nil {
		l = m.NextHopAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovCpRoute(uint64(m.State))
	}
	if m.Override {
		n += 2
	}
	if m.AdminDist != 0 {
		n += 1 + sovCpRoute(uint64(m.AdminDist))
	}
	l = len(m.InterfaceId)
	if l > 0 {
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}

func (m *CPStaticRouteRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPStaticRouteStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CPStaticRoute) Size() (n int) {
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}

func (m *CPStaticRouteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	return n
}

func (m *CPStaticRouteKey) Size() (n int) {
	var l int
	_ = l
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.PrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.PrefixLen))
	}
	if m.NextHopAddr != nil {
		l = m.NextHopAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}

func (m *CPStaticRouteKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.IdOrKey != nil {
		n += m.IdOrKey.Size()
	}
	return n
}

func (m *CPStaticRouteKeyHandle_Id) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}
func (m *CPStaticRouteKeyHandle_Key) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}
func (m *CPStaticRouteDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPStaticRouteDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	return n
}

func (m *CPStaticRouteGetRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPStaticRouteGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPActiveRouteStatus) Size() (n int) {
	var l int
	_ = l
	if m.RouteTableId != 0 {
		n += 1 + sovCpRoute(uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestPrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		l = m.NHAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.IfIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.IfIndex))
	}
	if m.Type != 0 {
		n += 1 + sovCpRoute(uint64(m.Type))
	}
	if m.Proto != 0 {
		n += 1 + sovCpRoute(uint64(m.Proto))
	}
	if m.Age != 0 {
		n += 1 + sovCpRoute(uint64(m.Age))
	}
	if m.Metric1 != 0 {
		n += 1 + sovCpRoute(uint64(m.Metric1))
	}
	if m.Connected {
		n += 2
	}
	if m.AdminDistance != 0 {
		n += 1 + sovCpRoute(uint64(m.AdminDistance))
	}
	return n
}

func (m *CPActiveRouteKey) Size() (n int) {
	var l int
	_ = l
	if m.RouteTableId != 0 {
		n += 1 + sovCpRoute(uint64(m.RouteTableId))
	}
	if m.DestAddr != nil {
		l = m.DestAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.DestPrefixLen != 0 {
		n += 1 + sovCpRoute(uint64(m.DestPrefixLen))
	}
	if m.NHAddr != nil {
		l = m.NHAddr.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	if m.IfIndex != 0 {
		n += 1 + sovCpRoute(uint64(m.IfIndex))
	}
	if m.Proto != 0 {
		n += 1 + sovCpRoute(uint64(m.Proto))
	}
	return n
}

func (m *CPActiveRouteKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}

func (m *CPActiveRouteGetRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func (m *CPActiveRoute) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCpRoute(uint64(l))
	}
	return n
}

func (m *CPActiveRouteGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpRoute(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCpRoute(uint64(l))
		}
	}
	return n
}

func sovCpRoute(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCpRoute(x uint64) (n int) {
	return sovCpRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CPRouteStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			m.RouteTableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPrefixLen", wireType)
			}
			m.DestPrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NHAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NHAddr == nil {
				m.NHAddr = &IPAddress{}
			}
			if err := m.NHAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfIndex", wireType)
			}
			m.IfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RouteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= (RouteProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			m.RouteTableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPrefixLen", wireType)
			}
			m.DestPrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NHAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NHAddr == nil {
				m.NHAddr = &IPAddress{}
			}
			if err := m.NHAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfIndex", wireType)
			}
			m.IfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= (RouteProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &CPRouteKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPRouteKeyHandle{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CPRouteStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPRouteGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPRouteGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPRouteGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CPRoute{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteTableId = append(m.RouteTableId[:0], dAtA[iNdEx:postIndex]...)
			if m.RouteTableId == nil {
				m.RouteTableId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLen", wireType)
			}
			m.PrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextHopAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextHopAddr == nil {
				m.NextHopAddr = &IPAddress{}
			}
			if err := m.NextHopAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (AdminState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Override", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Override = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminDist", wireType)
			}
			m.AdminDist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminDist |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceId = append(m.InterfaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.InterfaceId == nil {
				m.InterfaceId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPStaticRouteSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CPStaticRouteSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CPStaticRouteStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLen", wireType)
			}
			m.PrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextHopAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextHopAddr == nil {
				m.NextHopAddr = &IPAddress{}
			}
			if err := m.NextHopAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.IdOrKey = &CPStaticRouteKeyHandle_Id{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CPStaticRouteKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IdOrKey = &CPStaticRouteKeyHandle_Key{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPStaticRouteKeyHandle{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPStaticRouteKeyHandle{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPStaticRouteGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPStaticRouteGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPStaticRouteGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CPStaticRoute{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPActiveRouteStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPActiveRouteStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPActiveRouteStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			m.RouteTableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPrefixLen", wireType)
			}
			m.DestPrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NHAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NHAddr == nil {
				m.NHAddr = &IPAddress{}
			}
			if err := m.NHAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfIndex", wireType)
			}
			m.IfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RouteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= (RouteProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric1", wireType)
			}
			m.Metric1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Metric1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Connected = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminDistance", wireType)
			}
			m.AdminDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminDistance |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPActiveRouteKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPActiveRouteKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPActiveRouteKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			m.RouteTableId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteTableId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestAddr == nil {
				m.DestAddr = &IPAddress{}
			}
			if err := m.DestAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPrefixLen", wireType)
			}
			m.DestPrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NHAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NHAddr == nil {
				m.NHAddr = &IPAddress{}
			}
			if err := m.NHAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfIndex", wireType)
			}
			m.IfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= (RouteProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPActiveRouteKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPActiveRouteKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPActiveRouteKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &CPActiveRouteKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPActiveRouteGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPActiveRouteGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPActiveRouteGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CPActiveRouteKeyHandle{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPActiveRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPActiveRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPActiveRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CPActiveRouteStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPActiveRouteGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPActiveRouteGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPActiveRouteGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CPActiveRoute{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCpRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCpRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCpRoute
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCpRoute
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCpRoute(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCpRoute = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCpRoute   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cp_route.proto", fileDescriptorCpRoute) }

var fileDescriptorCpRoute = []byte{
	// 1089 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x36, 0x45, 0xdf, 0x74, 0x64, 0xc9, 0xf4, 0x24, 0x72, 0xf8, 0x2b, 0xfe, 0x1d, 0x95, 0x28,
	0x10, 0xd5, 0x08, 0x94, 0x54, 0x85, 0x37, 0xd9, 0x14, 0xb2, 0x2c, 0x58, 0x4a, 0x6c, 0x49, 0x1d,
	0x33, 0x8b, 0x76, 0x23, 0xc8, 0xe4, 0xd8, 0x20, 0x6a, 0x91, 0x2c, 0x49, 0x1b, 0x56, 0x5e, 0xa2,
	0x40, 0x17, 0x05, 0xfa, 0x46, 0x5d, 0xf6, 0x09, 0x8a, 0xc2, 0x2f, 0x50, 0x20, 0xab, 0x2e, 0x8b,
	0x99, 0xa1, 0xc8, 0xe1, 0x45, 0x55, 0xe1, 0x76, 0x53, 0xb4, 0x1b, 0x43, 0x3c, 0x97, 0x6f, 0xce,
	0x9c, 0xf9, 0xce, 0x37, 0x63, 0xa8, 0x18, 0xee, 0xd8, 0x73, 0x6e, 0x02, 0xd2, 0x74, 0x3d, 0x27,
	0x70, 0x90, 0xec, 0x9a, 0x7e, 0x0d, 0xae, 0x9c, 0x2b, 0x87, 0x1b, 0x6a, 0xdb, 0x53, 0x12, 0x4c,
	0x5e, 0xd2, 0x3f, 0xa1, 0xa1, 0x14, 0xcc, 0x5c, 0xe2, 0xf3, 0x0f, 0xed, 0x87, 0x02, 0x94, 0x3b,
	0x23, 0x4c, 0x01, 0xce, 0x83, 0x49, 0x70, 0xe3, 0x23, 0x0d, 0xb6, 0xd8, 0xa7, 0x3e, 0xb9, 0xb8,
	0x26, 0x7d, 0x53, 0x95, 0xea, 0x52, 0xa3, 0x8c, 0x13, 0x36, 0xf4, 0x02, 0x36, 0x8f, 0x89, 0x1f,
	0xb4, 0x4d, 0xd3, 0x53, 0x0b, 0x75, 0xa9, 0x51, 0x6a, 0x29, 0x4d, 0x8e, 0xda, 0x1f, 0x51, 0x23,
	0xf1, 0x7d, 0x1c, 0x45, 0xa0, 0x8f, 0xa1, 0x4c, 0x7f, 0x8f, 0x3c, 0x72, 0x69, 0xdd, 0x9d, 0x12,
	0x5b, 0x95, 0x19, 0x64, 0xd2, 0x88, 0x1a, 0xb0, 0x3e, 0xe8, 0x31, 0xc4, 0xd5, 0x05, 0x88, 0xa1,
	0x1f, 0xa9, 0xb0, 0xd1, 0xbf, 0xec, 0xdb, 0x26, 0xb9, 0x53, 0xd7, 0x18, 0xd2, 0xfc, 0x13, 0x69,
	0xb0, 0xaa, 0xcf, 0x5c, 0xa2, 0xae, 0xd7, 0xa5, 0x46, 0xa5, 0x55, 0x69, 0xba, 0xa6, 0xdf, 0xe4,
	0x85, 0xcf, 0x5c, 0x82, 0x99, 0x0f, 0x35, 0x60, 0x6d, 0x44, 0xb7, 0xae, 0x6e, 0xb0, 0x20, 0x14,
	0x07, 0x31, 0xb3, 0xe1, 0x5c, 0x63, 0x1e, 0xa0, 0x7d, 0x90, 0x00, 0xc2, 0xde, 0xbc, 0x25, 0xb3,
	0x7f, 0x74, 0x63, 0xa2, 0x4d, 0xaf, 0x2f, 0xdb, 0xf4, 0x21, 0x28, 0xf1, 0x9e, 0x7b, 0x13, 0xdb,
	0xbc, 0x26, 0xe8, 0x23, 0x90, 0xdf, 0x92, 0x19, 0xdb, 0x70, 0xa9, 0xb5, 0xcd, 0x72, 0xe3, 0x18,
	0x4c, 0x7d, 0xda, 0x31, 0xec, 0x84, 0xa6, 0x13, 0x12, 0x60, 0xf2, 0xcd, 0x0d, 0xf1, 0x03, 0xf4,
	0x12, 0x36, 0xc2, 0x9f, 0xaa, 0x54, 0x97, 0x1b, 0xa5, 0x56, 0x35, 0x95, 0xcb, 0xf1, 0xf1, 0x3c,
	0x4a, 0x3b, 0x84, 0x8d, 0xd0, 0x89, 0x0e, 0x60, 0x9d, 0x13, 0x32, 0x5c, 0x16, 0x89, 0xa9, 0xdc,
	0x83, 0xc3, 0x08, 0xcd, 0x06, 0x24, 0x2e, 0xee, 0xbb, 0x8e, 0xed, 0x13, 0xd4, 0x84, 0x62, 0xdb,
	0xb5, 0x04, 0x90, 0x4a, 0xd4, 0xba, 0xc8, 0x8e, 0xe3, 0x10, 0xd4, 0x80, 0xcd, 0x79, 0xae, 0x5a,
	0x60, 0xe5, 0x6e, 0x89, 0x6b, 0xe2, 0xc8, 0xab, 0x7d, 0x2f, 0xd3, 0xdd, 0xd2, 0x34, 0xcb, 0xe0,
	0xf5, 0xb8, 0xc4, 0xc8, 0xe5, 0xc7, 0x56, 0x8a, 0x1f, 0x6f, 0x96, 0xf3, 0xe3, 0x68, 0xef, 0xc3,
	0xcf, 0xcf, 0x54, 0x3a, 0xaf, 0xaf, 0xa7, 0x13, 0xdb, 0x9c, 0x04, 0x8e, 0x37, 0x7b, 0x61, 0x4d,
	0xa7, 0x37, 0x01, 0xc5, 0x10, 0xd8, 0xf3, 0x1a, 0x8a, 0x29, 0xe6, 0x2c, 0x49, 0x8d, 0xc3, 0xd1,
	0x08, 0x4a, 0x03, 0x72, 0x17, 0xf4, 0x1c, 0xf7, 0x8f, 0x88, 0xb5, 0x04, 0x4f, 0x84, 0x40, 0xcf,
	0x61, 0x8d, 0x36, 0x84, 0x30, 0xe6, 0x55, 0x5a, 0x3b, 0xf3, 0x4e, 0x9b, 0x53, 0xcb, 0x66, 0x0e,
	0xcc, 0xfd, 0xa8, 0x06, 0x9b, 0xc3, 0x5b, 0xe2, 0x79, 0x96, 0xc9, 0xe7, 0x74, 0x13, 0x47, 0xdf,
	0x68, 0x0f, 0x8a, 0x2c, 0xe1, 0xd8, 0xf2, 0x03, 0x36, 0x9f, 0x65, 0x1c, 0x1b, 0x50, 0x1d, 0x4a,
	0x7d, 0x3b, 0x20, 0xde, 0xe5, 0xc4, 0xa0, 0xfd, 0xdd, 0x64, 0xfd, 0x15, 0x4d, 0x5a, 0x0f, 0x1e,
	0x27, 0xce, 0x65, 0x4e, 0xc4, 0x57, 0x69, 0x22, 0xee, 0x86, 0x27, 0x9b, 0x3a, 0xc3, 0x98, 0x89,
	0x55, 0x78, 0x94, 0xf4, 0x72, 0xa6, 0x4d, 0xa9, 0x5a, 0x0a, 0x66, 0x74, 0x00, 0xab, 0x34, 0x31,
	0x24, 0xe9, 0x22, 0x58, 0x16, 0x83, 0x5e, 0x45, 0x94, 0xe6, 0x47, 0xaf, 0xe6, 0x44, 0x27, 0x89,
	0x7d, 0x02, 0xd5, 0xd4, 0x7e, 0x1e, 0xc6, 0x6d, 0xed, 0x3b, 0x89, 0x8e, 0xb5, 0x80, 0x44, 0x05,
	0x4d, 0x14, 0x2b, 0x69, 0xa9, 0x58, 0xed, 0x89, 0x74, 0x2b, 0xf0, 0xb3, 0x89, 0x09, 0xd5, 0x4a,
	0x12, 0x4a, 0x5e, 0x00, 0x27, 0x06, 0x69, 0x17, 0xb0, 0x9b, 0xae, 0x29, 0x14, 0x1c, 0x05, 0x0a,
	0xf3, 0x01, 0xea, 0xad, 0xe0, 0x42, 0xdf, 0x44, 0x9f, 0x70, 0x09, 0xe2, 0x8d, 0xab, 0x66, 0x1b,
	0x47, 0x73, 0x57, 0x98, 0x14, 0x1d, 0x95, 0xa0, 0x68, 0x99, 0x63, 0xc7, 0x1b, 0x7f, 0x4d, 0x66,
	0xda, 0x39, 0xd4, 0x12, 0x71, 0xc7, 0xe4, 0x9a, 0xc4, 0xbc, 0x38, 0x4c, 0xf3, 0xe2, 0x69, 0x3e,
	0x72, 0x4a, 0xa6, 0xce, 0xe0, 0x69, 0x2e, 0xe8, 0x03, 0x0f, 0x67, 0x04, 0x4f, 0x12, 0x70, 0x82,
	0x82, 0x3e, 0xb0, 0xc0, 0xf7, 0xa0, 0x66, 0x11, 0x1f, 0x28, 0x8b, 0xcd, 0x8c, 0x2c, 0xa2, 0x6c,
	0x0d, 0x82, 0x38, 0x7e, 0x2b, 0xd3, 0xd1, 0x69, 0x1b, 0x81, 0x75, 0x4b, 0xfe, 0x7b, 0x57, 0xe4,
	0x5c, 0xb1, 0x48, 0x01, 0xb9, 0x7d, 0x45, 0x98, 0x7e, 0xad, 0x61, 0xfa, 0x93, 0xae, 0x7c, 0x46,
	0x02, 0xcf, 0x32, 0x3e, 0x55, 0x8b, 0xcc, 0x3a, 0xff, 0xa4, 0x53, 0xd7, 0x71, 0x6c, 0x9b, 0x18,
	0x01, 0x31, 0x55, 0x60, 0x72, 0x19, 0x1b, 0x68, 0x07, 0x22, 0x79, 0x9c, 0xd8, 0x06, 0x51, 0x4b,
	0x2c, 0x3b, 0x69, 0xd4, 0x7e, 0x63, 0xc3, 0x2f, 0x9c, 0xc8, 0xbf, 0xe7, 0x35, 0xd3, 0xa6, 0x12,
	0x93, 0xdc, 0x79, 0x28, 0x31, 0xcf, 0xc5, 0x37, 0xcd, 0x5c, 0x50, 0x92, 0x91, 0xfc, 0x65, 0xc3,
	0xa6, 0x53, 0x70, 0xfc, 0x99, 0xe9, 0xcc, 0x5b, 0x31, 0x9e, 0xce, 0x36, 0xbd, 0x44, 0x84, 0x10,
	0xe1, 0x62, 0x90, 0x12, 0x17, 0x43, 0x66, 0x88, 0xa2, 0x8b, 0x81, 0x0d, 0x78, 0xba, 0xa8, 0xbf,
	0x7d, 0xc0, 0x85, 0x05, 0xe2, 0x01, 0x3f, 0x78, 0x0f, 0xc5, 0x88, 0xfb, 0xe8, 0x11, 0x6c, 0xe3,
	0xe1, 0x3b, 0xbd, 0x3b, 0xd6, 0xbf, 0x1c, 0x75, 0xc7, 0x83, 0xe1, 0xa0, 0xab, 0xac, 0xa0, 0xc7,
	0xa0, 0x08, 0xc6, 0xa1, 0xde, 0xeb, 0x62, 0x45, 0x42, 0x55, 0xd8, 0x11, 0xac, 0xb8, 0xfb, 0xa6,
	0xdb, 0xd1, 0x95, 0x42, 0x2a, 0xf8, 0x74, 0xd8, 0x69, 0x9f, 0x2a, 0x72, 0x26, 0xf8, 0x6c, 0xa8,
	0x77, 0x95, 0xd5, 0x03, 0x0b, 0xca, 0x89, 0x73, 0x8e, 0xb3, 0x47, 0x78, 0xa8, 0x0f, 0xe7, 0x05,
	0x44, 0xd9, 0xdc, 0xca, 0x41, 0x0b, 0x68, 0x17, 0x90, 0x68, 0x3e, 0xd7, 0xdb, 0x7a, 0xbf, 0xa3,
	0xc8, 0xf1, 0x26, 0xb8, 0xfd, 0xe8, 0x64, 0xa4, 0x54, 0x5a, 0xbf, 0xca, 0xd1, 0xeb, 0xff, 0xfc,
	0xd6, 0x40, 0x83, 0xd4, 0x83, 0xa0, 0xe3, 0x11, 0xfa, 0x9a, 0xf9, 0x5f, 0x8e, 0x16, 0xf2, 0x63,
	0xae, 0xd5, 0xf2, 0x5c, 0xa1, 0x48, 0xae, 0x64, 0xf0, 0xde, 0xb9, 0xe6, 0x5f, 0xc2, 0xfb, 0x2a,
	0x85, 0xc7, 0xef, 0x24, 0xf4, 0x2c, 0x9b, 0x94, 0xb8, 0x02, 0x6b, 0xf5, 0xc5, 0x01, 0x11, 0xf6,
	0x17, 0xa9, 0xc7, 0xc3, 0x09, 0x09, 0xd0, 0x5e, 0x36, 0x2f, 0x9e, 0x8c, 0xda, 0xff, 0x17, 0x78,
	0x23, 0xc8, 0xcf, 0xa3, 0xe6, 0x52, 0xb0, 0x5d, 0xf1, 0xa1, 0x2d, 0xc0, 0x3c, 0xc9, 0xd8, 0x93,
	0x35, 0x25, 0x27, 0x20, 0xaa, 0x29, 0x77, 0x5a, 0xa3, 0x9a, 0xf2, 0xc7, 0x46, 0x5b, 0x39, 0xda,
	0xfa, 0xf1, 0x7e, 0x5f, 0xfa, 0xe9, 0x7e, 0x5f, 0xfa, 0xe5, 0x7e, 0x5f, 0xba, 0x58, 0x67, 0xff,
	0x20, 0x7f, 0xf6, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x85, 0xd4, 0xaf, 0x61, 0x0f, 0x00,
	0x00,
}
