// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oper.proto

package pds

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import meta "github.com/pensando/sw/nic/apollo/agent/gen/pds/meta/pds"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// flow log type indicates whether log is generated when flow is
// created or closed
type FlowLogType int32

const (
	FlowLogType_FLOW_LOG_TYPE_NONE FlowLogType = 0
	// flow log raised at the time of flow/session creation
	FlowLogType_FLOW_LOG_TYPE_OPEN FlowLogType = 1
	// flow log raised at the time of flow/session deletion
	FlowLogType_FLOW_LOG_TYPE_CLOSE FlowLogType = 2
	// flow log raised for long lived flows while flow is active
	FlowLogType_FLOW_LOG_TYPE_ACTIVE FlowLogType = 3
)

var FlowLogType_name = map[int32]string{
	0: "FLOW_LOG_TYPE_NONE",
	1: "FLOW_LOG_TYPE_OPEN",
	2: "FLOW_LOG_TYPE_CLOSE",
	3: "FLOW_LOG_TYPE_ACTIVE",
}
var FlowLogType_value = map[string]int32{
	"FLOW_LOG_TYPE_NONE":   0,
	"FLOW_LOG_TYPE_OPEN":   1,
	"FLOW_LOG_TYPE_CLOSE":  2,
	"FLOW_LOG_TYPE_ACTIVE": 3,
}

func (x FlowLogType) String() string {
	return proto.EnumName(FlowLogType_name, int32(x))
}
func (FlowLogType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOper, []int{0} }

// security policy type due to which the flow action was chosen
type SecurityPolicyType int32

const (
	SecurityPolicyType_SECURITY_POLICY_TYPE_NONE SecurityPolicyType = 0
	// flow action is the result of a security group rule
	SecurityPolicyType_SECURITY_POLICY_TYPE_SG SecurityPolicyType = 1
	// flow action is the result of a stateless NACL rule (subnet/vpc level)
	SecurityPolicyType_SECURITY_POLICY_TYPE_NACL SecurityPolicyType = 2
)

var SecurityPolicyType_name = map[int32]string{
	0: "SECURITY_POLICY_TYPE_NONE",
	1: "SECURITY_POLICY_TYPE_SG",
	2: "SECURITY_POLICY_TYPE_NACL",
}
var SecurityPolicyType_value = map[string]int32{
	"SECURITY_POLICY_TYPE_NONE": 0,
	"SECURITY_POLICY_TYPE_SG":   1,
	"SECURITY_POLICY_TYPE_NACL": 2,
}

func (x SecurityPolicyType) String() string {
	return proto.EnumName(SecurityPolicyType_name, int32(x))
}
func (SecurityPolicyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOper, []int{1} }

// TechSupportSpec defines the configuration of the techsupport object
type TechSupportSpec struct {
	// SkipCores can be set to true to exclude core files from techsupport
	// output
	SkipCores bool `protobuf:"varint,1,opt,name=SkipCores,proto3" json:"SkipCores,omitempty"`
}

func (m *TechSupportSpec) Reset()                    { *m = TechSupportSpec{} }
func (m *TechSupportSpec) String() string            { return proto.CompactTextString(m) }
func (*TechSupportSpec) ProtoMessage()               {}
func (*TechSupportSpec) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{0} }

func (m *TechSupportSpec) GetSkipCores() bool {
	if m != nil {
		return m.SkipCores
	}
	return false
}

// TechSupportStatus captures the current status of the techsupport job
type TechSupportStatus struct {
	// full path of the gzipped techsupport file created, if successful
	FilePath string `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
}

func (m *TechSupportStatus) Reset()                    { *m = TechSupportStatus{} }
func (m *TechSupportStatus) String() string            { return proto.CompactTextString(m) }
func (*TechSupportStatus) ProtoMessage()               {}
func (*TechSupportStatus) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{1} }

func (m *TechSupportStatus) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

// TechSupportStats contains stats related to techsupport
type TechSupportStats struct {
}

func (m *TechSupportStats) Reset()                    { *m = TechSupportStats{} }
func (m *TechSupportStats) String() string            { return proto.CompactTextString(m) }
func (*TechSupportStats) ProtoMessage()               {}
func (*TechSupportStats) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{2} }

// Techsupport object
type TechSupport struct {
	*meta.TypeMeta `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	*meta.ObjMeta  `protobuf:"bytes,2,opt,name=ObjMeta,embedded=ObjMeta" json:"meta,omitempty"`
	Spec           *TechSupportSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         *TechSupportStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
	Stats          *TechSupportStats  `protobuf:"bytes,5,opt,name=Stats" json:"stats,omitempty"`
}

func (m *TechSupport) Reset()                    { *m = TechSupport{} }
func (m *TechSupport) String() string            { return proto.CompactTextString(m) }
func (*TechSupport) ProtoMessage()               {}
func (*TechSupport) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{3} }

func (m *TechSupport) GetSpec() *TechSupportSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TechSupport) GetStatus() *TechSupportStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TechSupport) GetStats() *TechSupportStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TechSupport create request
type TechSupportRequest struct {
	// config specification
	Request *TechSupportSpec `protobuf:"bytes,1,opt,name=Request" json:"Request,omitempty"`
}

func (m *TechSupportRequest) Reset()                    { *m = TechSupportRequest{} }
func (m *TechSupportRequest) String() string            { return proto.CompactTextString(m) }
func (*TechSupportRequest) ProtoMessage()               {}
func (*TechSupportRequest) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{4} }

func (m *TechSupportRequest) GetRequest() *TechSupportSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TechSupport create response
type TechSupportResponse struct {
	// success or failure status
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	Response  *TechSupportStatus `protobuf:"bytes,2,opt,name=Response" json:"Response,omitempty"`
}

func (m *TechSupportResponse) Reset()                    { *m = TechSupportResponse{} }
func (m *TechSupportResponse) String() string            { return proto.CompactTextString(m) }
func (*TechSupportResponse) ProtoMessage()               {}
func (*TechSupportResponse) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{5} }

func (m *TechSupportResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TechSupportResponse) GetResponse() *TechSupportStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

type MetricsGetRequest struct {
	// Name identifies the name of the statistics table
	// NOTE: supported names are "Port", "MgmtPort", "HostIf"
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty" meta:mandatory`
	// Key identifies particular instance of the statistics table (e.g. uuid)
	// NOTE: if key is not passed, counters associated with all instances of
	//       given table name are are returned
	Key []byte `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *MetricsGetRequest) Reset()                    { *m = MetricsGetRequest{} }
func (m *MetricsGetRequest) String() string            { return proto.CompactTextString(m) }
func (*MetricsGetRequest) ProtoMessage()               {}
func (*MetricsGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{6} }

func (m *MetricsGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricsGetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// CounterStatus defines each individual counter that consists of
// name and value
type CounterStatus struct {
	// (user visible) name of the metric
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// value of the counter
	Value uint64 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *CounterStatus) Reset()                    { *m = CounterStatus{} }
func (m *CounterStatus) String() string            { return proto.CompactTextString(m) }
func (*CounterStatus) ProtoMessage()               {}
func (*CounterStatus) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{7} }

func (m *CounterStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CounterStatus) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// CountersStatus defines generic metrics object that can be used for any set
// of counters per object (e.g., port counters, lif/pf counters, vpp counters,
// s/w counters etc.)
type CountersStatus struct {
	// collection of metrics
	Counters []*CounterStatus `protobuf:"bytes,1,rep,name=Counters" json:"Counters,omitempty"`
}

func (m *CountersStatus) Reset()                    { *m = CountersStatus{} }
func (m *CountersStatus) String() string            { return proto.CompactTextString(m) }
func (*CountersStatus) ProtoMessage()               {}
func (*CountersStatus) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{8} }

func (m *CountersStatus) GetCounters() []*CounterStatus {
	if m != nil {
		return m.Counters
	}
	return nil
}

type MetricsGetResponse struct {
	// ApiStatus indicates the success/failure status of the get operation
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// batched response containing potentially mutiple counter objects
	Response []*CountersStatus `protobuf:"bytes,2,rep,name=Response" json:"Response,omitempty"`
}

func (m *MetricsGetResponse) Reset()                    { *m = MetricsGetResponse{} }
func (m *MetricsGetResponse) String() string            { return proto.CompactTextString(m) }
func (*MetricsGetResponse) ProtoMessage()               {}
func (*MetricsGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{9} }

func (m *MetricsGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MetricsGetResponse) GetResponse() []*CountersStatus {
	if m != nil {
		return m.Response
	}
	return nil
}

// protobuf format for flow logs (this is the format consumers will see flow
// logs in). The producer (e.g., VPP) will do just a binary dump to shared
// memory and a decoder (invoked by operd) will transform the contents into
// this format
type FlowLog struct {
	// timestamp indicating when the flow is created/closed
	Timestamp uint64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// flow open log or flow close log
	LogType FlowLogType `protobuf:"varint,2,opt,name=LogType,proto3,enum=pds.FlowLogType" json:"LogType,omitempty"`
	// source interface of first packet (uplink of VF/PF id)
	SrcInterface uint32 `protobuf:"varint,3,opt,name=SrcInterface,proto3" json:"SrcInterface,omitempty"`
	// flow key
	Key *FlowKey `protobuf:"bytes,4,opt,name=Key" json:"Key,omitempty"`
	// flow action taken
	FlowAction SecurityRuleAction `protobuf:"varint,5,opt,name=FlowAction,proto3,enum=types.SecurityRuleAction" json:"FlowAction,omitempty"`
	// source NAT action, if any
	SrcNATAction NatAction `protobuf:"varint,6,opt,name=SrcNATAction,proto3,enum=types.NatAction" json:"SrcNATAction,omitempty"`
	// destination NAT action, if any
	DstNATAction NatAction `protobuf:"varint,7,opt,name=DstNATAction,proto3,enum=types.NatAction" json:"DstNATAction,omitempty"`
	// source NAT port, if any
	SrcNATPort uint32 `protobuf:"varint,8,opt,name=SrcNATPort,proto3" json:"SrcNATPort,omitempty"`
	// destination NAT port, if any
	DstNATPort uint32 `protobuf:"varint,9,opt,name=DstNATPort,proto3" json:"DstNATPort,omitempty"`
	// policy type that resulted in the flow action
	PolicyType SecurityPolicyType `protobuf:"varint,10,opt,name=PolicyType,proto3,enum=pds.SecurityPolicyType" json:"PolicyType,omitempty"`
	// initiator flow octet count
	IflowBytes uint64 `protobuf:"varint,11,opt,name=IflowBytes,proto3" json:"IflowBytes,omitempty"`
	// initator flow packet count
	IflowPackets uint64 `protobuf:"varint,12,opt,name=IflowPackets,proto3" json:"IflowPackets,omitempty"`
	// responder flow octet count
	RflowBytes uint64 `protobuf:"varint,13,opt,name=RflowBytes,proto3" json:"RflowBytes,omitempty"`
	// responder flow packet count
	RflowPackets uint64 `protobuf:"varint,14,opt,name=RflowPackets,proto3" json:"RflowPackets,omitempty"`
}

func (m *FlowLog) Reset()                    { *m = FlowLog{} }
func (m *FlowLog) String() string            { return proto.CompactTextString(m) }
func (*FlowLog) ProtoMessage()               {}
func (*FlowLog) Descriptor() ([]byte, []int) { return fileDescriptorOper, []int{10} }

func (m *FlowLog) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FlowLog) GetLogType() FlowLogType {
	if m != nil {
		return m.LogType
	}
	return FlowLogType_FLOW_LOG_TYPE_NONE
}

func (m *FlowLog) GetSrcInterface() uint32 {
	if m != nil {
		return m.SrcInterface
	}
	return 0
}

func (m *FlowLog) GetKey() *FlowKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *FlowLog) GetFlowAction() SecurityRuleAction {
	if m != nil {
		return m.FlowAction
	}
	return SecurityRuleAction_SECURITY_RULE_ACTION_NONE
}

func (m *FlowLog) GetSrcNATAction() NatAction {
	if m != nil {
		return m.SrcNATAction
	}
	return NatAction_NAT_ACTION_NONE
}

func (m *FlowLog) GetDstNATAction() NatAction {
	if m != nil {
		return m.DstNATAction
	}
	return NatAction_NAT_ACTION_NONE
}

func (m *FlowLog) GetSrcNATPort() uint32 {
	if m != nil {
		return m.SrcNATPort
	}
	return 0
}

func (m *FlowLog) GetDstNATPort() uint32 {
	if m != nil {
		return m.DstNATPort
	}
	return 0
}

func (m *FlowLog) GetPolicyType() SecurityPolicyType {
	if m != nil {
		return m.PolicyType
	}
	return SecurityPolicyType_SECURITY_POLICY_TYPE_NONE
}

func (m *FlowLog) GetIflowBytes() uint64 {
	if m != nil {
		return m.IflowBytes
	}
	return 0
}

func (m *FlowLog) GetIflowPackets() uint64 {
	if m != nil {
		return m.IflowPackets
	}
	return 0
}

func (m *FlowLog) GetRflowBytes() uint64 {
	if m != nil {
		return m.RflowBytes
	}
	return 0
}

func (m *FlowLog) GetRflowPackets() uint64 {
	if m != nil {
		return m.RflowPackets
	}
	return 0
}

func init() {
	proto.RegisterType((*TechSupportSpec)(nil), "pds.TechSupportSpec")
	proto.RegisterType((*TechSupportStatus)(nil), "pds.TechSupportStatus")
	proto.RegisterType((*TechSupportStats)(nil), "pds.TechSupportStats")
	proto.RegisterType((*TechSupport)(nil), "pds.TechSupport")
	proto.RegisterType((*TechSupportRequest)(nil), "pds.TechSupportRequest")
	proto.RegisterType((*TechSupportResponse)(nil), "pds.TechSupportResponse")
	proto.RegisterType((*MetricsGetRequest)(nil), "pds.MetricsGetRequest")
	proto.RegisterType((*CounterStatus)(nil), "pds.CounterStatus")
	proto.RegisterType((*CountersStatus)(nil), "pds.CountersStatus")
	proto.RegisterType((*MetricsGetResponse)(nil), "pds.MetricsGetResponse")
	proto.RegisterType((*FlowLog)(nil), "pds.FlowLog")
	proto.RegisterEnum("pds.FlowLogType", FlowLogType_name, FlowLogType_value)
	proto.RegisterEnum("pds.SecurityPolicyType", SecurityPolicyType_name, SecurityPolicyType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OperSvc service

type OperSvcClient interface {
	// TechSupportCollect initiates a new techsupport information collection
	// NOTE: This API will fail, if there is already one pending request in
	//       progress
	TechSupportCollect(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportResponse, error)
	// Metrics exposes the metric counters kept by components
	MetricsGet(ctx context.Context, opts ...grpc.CallOption) (OperSvc_MetricsGetClient, error)
}

type operSvcClient struct {
	cc *grpc.ClientConn
}

func NewOperSvcClient(cc *grpc.ClientConn) OperSvcClient {
	return &operSvcClient{cc}
}

func (c *operSvcClient) TechSupportCollect(ctx context.Context, in *TechSupportRequest, opts ...grpc.CallOption) (*TechSupportResponse, error) {
	out := new(TechSupportResponse)
	err := grpc.Invoke(ctx, "/pds.OperSvc/TechSupportCollect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operSvcClient) MetricsGet(ctx context.Context, opts ...grpc.CallOption) (OperSvc_MetricsGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OperSvc_serviceDesc.Streams[0], c.cc, "/pds.OperSvc/MetricsGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &operSvcMetricsGetClient{stream}
	return x, nil
}

type OperSvc_MetricsGetClient interface {
	Send(*MetricsGetRequest) error
	Recv() (*MetricsGetResponse, error)
	grpc.ClientStream
}

type operSvcMetricsGetClient struct {
	grpc.ClientStream
}

func (x *operSvcMetricsGetClient) Send(m *MetricsGetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operSvcMetricsGetClient) Recv() (*MetricsGetResponse, error) {
	m := new(MetricsGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for OperSvc service

type OperSvcServer interface {
	// TechSupportCollect initiates a new techsupport information collection
	// NOTE: This API will fail, if there is already one pending request in
	//       progress
	TechSupportCollect(context.Context, *TechSupportRequest) (*TechSupportResponse, error)
	// Metrics exposes the metric counters kept by components
	MetricsGet(OperSvc_MetricsGetServer) error
}

func RegisterOperSvcServer(s *grpc.Server, srv OperSvcServer) {
	s.RegisterService(&_OperSvc_serviceDesc, srv)
}

func _OperSvc_TechSupportCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TechSupportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperSvcServer).TechSupportCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pds.OperSvc/TechSupportCollect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperSvcServer).TechSupportCollect(ctx, req.(*TechSupportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperSvc_MetricsGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperSvcServer).MetricsGet(&operSvcMetricsGetServer{stream})
}

type OperSvc_MetricsGetServer interface {
	Send(*MetricsGetResponse) error
	Recv() (*MetricsGetRequest, error)
	grpc.ServerStream
}

type operSvcMetricsGetServer struct {
	grpc.ServerStream
}

func (x *operSvcMetricsGetServer) Send(m *MetricsGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operSvcMetricsGetServer) Recv() (*MetricsGetRequest, error) {
	m := new(MetricsGetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _OperSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pds.OperSvc",
	HandlerType: (*OperSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TechSupportCollect",
			Handler:    _OperSvc_TechSupportCollect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MetricsGet",
			Handler:       _OperSvc_MetricsGet_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "oper.proto",
}

func (m *TechSupportSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SkipCores {
		dAtA[i] = 0x8
		i++
		if m.SkipCores {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TechSupportStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOper(dAtA, i, uint64(len(m.FilePath)))
		i += copy(dAtA[i:], m.FilePath)
	}
	return i, nil
}

func (m *TechSupportStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TechSupport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeMeta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.TypeMeta.Size()))
		n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ObjMeta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.ObjMeta.Size()))
		n2, err := m.ObjMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Spec != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.Spec.Size()))
		n3, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Status != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.Status.Size()))
		n4, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Stats != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.Stats.Size()))
		n5, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *TechSupportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.Request.Size()))
		n6, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *TechSupportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TechSupportResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.Response.Size()))
		n7, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *MetricsGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOper(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOper(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *CounterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CounterStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOper(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *CountersStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountersStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for _, msg := range m.Counters {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOper(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricsGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOper(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.Timestamp))
	}
	if m.LogType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.LogType))
	}
	if m.SrcInterface != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.SrcInterface))
	}
	if m.Key != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.Key.Size()))
		n8, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.FlowAction != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.FlowAction))
	}
	if m.SrcNATAction != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.SrcNATAction))
	}
	if m.DstNATAction != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.DstNATAction))
	}
	if m.SrcNATPort != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.SrcNATPort))
	}
	if m.DstNATPort != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.DstNATPort))
	}
	if m.PolicyType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.PolicyType))
	}
	if m.IflowBytes != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.IflowBytes))
	}
	if m.IflowPackets != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.IflowPackets))
	}
	if m.RflowBytes != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.RflowBytes))
	}
	if m.RflowPackets != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintOper(dAtA, i, uint64(m.RflowPackets))
	}
	return i, nil
}

func encodeVarintOper(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TechSupportSpec) Size() (n int) {
	var l int
	_ = l
	if m.SkipCores {
		n += 2
	}
	return n
}

func (m *TechSupportStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovOper(uint64(l))
	}
	return n
}

func (m *TechSupportStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TechSupport) Size() (n int) {
	var l int
	_ = l
	if m.TypeMeta != nil {
		l = m.TypeMeta.Size()
		n += 1 + l + sovOper(uint64(l))
	}
	if m.ObjMeta != nil {
		l = m.ObjMeta.Size()
		n += 1 + l + sovOper(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovOper(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovOper(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovOper(uint64(l))
	}
	return n
}

func (m *TechSupportRequest) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovOper(uint64(l))
	}
	return n
}

func (m *TechSupportResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovOper(uint64(m.ApiStatus))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovOper(uint64(l))
	}
	return n
}

func (m *MetricsGetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOper(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOper(uint64(l))
	}
	return n
}

func (m *CounterStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOper(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovOper(uint64(m.Value))
	}
	return n
}

func (m *CountersStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.Counters) > 0 {
		for _, e := range m.Counters {
			l = e.Size()
			n += 1 + l + sovOper(uint64(l))
		}
	}
	return n
}

func (m *MetricsGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovOper(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovOper(uint64(l))
		}
	}
	return n
}

func (m *FlowLog) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovOper(uint64(m.Timestamp))
	}
	if m.LogType != 0 {
		n += 1 + sovOper(uint64(m.LogType))
	}
	if m.SrcInterface != 0 {
		n += 1 + sovOper(uint64(m.SrcInterface))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovOper(uint64(l))
	}
	if m.FlowAction != 0 {
		n += 1 + sovOper(uint64(m.FlowAction))
	}
	if m.SrcNATAction != 0 {
		n += 1 + sovOper(uint64(m.SrcNATAction))
	}
	if m.DstNATAction != 0 {
		n += 1 + sovOper(uint64(m.DstNATAction))
	}
	if m.SrcNATPort != 0 {
		n += 1 + sovOper(uint64(m.SrcNATPort))
	}
	if m.DstNATPort != 0 {
		n += 1 + sovOper(uint64(m.DstNATPort))
	}
	if m.PolicyType != 0 {
		n += 1 + sovOper(uint64(m.PolicyType))
	}
	if m.IflowBytes != 0 {
		n += 1 + sovOper(uint64(m.IflowBytes))
	}
	if m.IflowPackets != 0 {
		n += 1 + sovOper(uint64(m.IflowPackets))
	}
	if m.RflowBytes != 0 {
		n += 1 + sovOper(uint64(m.RflowBytes))
	}
	if m.RflowPackets != 0 {
		n += 1 + sovOper(uint64(m.RflowPackets))
	}
	return n
}

func sovOper(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOper(x uint64) (n int) {
	return sovOper(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TechSupportSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipCores", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipCores = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMeta == nil {
				m.TypeMeta = &meta.TypeMeta{}
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjMeta == nil {
				m.ObjMeta = &meta.ObjMeta{}
			}
			if err := m.ObjMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &TechSupportSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &TechSupportStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &TechSupportStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &TechSupportSpec{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TechSupportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TechSupportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TechSupportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &TechSupportStatus{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CounterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CounterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CounterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountersStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountersStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountersStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counters = append(m.Counters, &CounterStatus{})
			if err := m.Counters[len(m.Counters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CountersStatus{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOper
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogType", wireType)
			}
			m.LogType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogType |= (FlowLogType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcInterface", wireType)
			}
			m.SrcInterface = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcInterface |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOper
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &FlowKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowAction", wireType)
			}
			m.FlowAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowAction |= (SecurityRuleAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNATAction", wireType)
			}
			m.SrcNATAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcNATAction |= (NatAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstNATAction", wireType)
			}
			m.DstNATAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstNATAction |= (NatAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNATPort", wireType)
			}
			m.SrcNATPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcNATPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstNATPort", wireType)
			}
			m.DstNATPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstNATPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyType", wireType)
			}
			m.PolicyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PolicyType |= (SecurityPolicyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflowBytes", wireType)
			}
			m.IflowBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IflowBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflowPackets", wireType)
			}
			m.IflowPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IflowPackets |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RflowBytes", wireType)
			}
			m.RflowBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RflowBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RflowPackets", wireType)
			}
			m.RflowPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOper
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RflowPackets |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOper(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOper
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOper(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOper
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOper
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOper
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOper
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOper(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOper = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOper   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("oper.proto", fileDescriptorOper) }

var fileDescriptorOper = []byte{
	// 897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x4e, 0x23, 0x47,
	0x10, 0xde, 0xc1, 0x06, 0x9b, 0x32, 0x98, 0xd9, 0x82, 0xe0, 0x59, 0x27, 0x01, 0x34, 0x87, 0x08,
	0xa1, 0x95, 0x89, 0x9c, 0x48, 0xd1, 0x26, 0x91, 0xb2, 0xb6, 0x31, 0xc8, 0x5a, 0x63, 0x5b, 0x6d,
	0x67, 0x23, 0x4e, 0x68, 0x76, 0xe8, 0x65, 0x27, 0x3b, 0x76, 0x4f, 0xa6, 0xdb, 0x59, 0xcd, 0xa3,
	0xe4, 0x71, 0x72, 0xcb, 0x91, 0xbc, 0x00, 0x8a, 0x38, 0x72, 0xcc, 0x13, 0x44, 0xfd, 0x63, 0x7b,
	0x06, 0xc3, 0x25, 0x17, 0x6b, 0xfa, 0xab, 0xef, 0xfb, 0xaa, 0xab, 0xba, 0xab, 0x0d, 0xc0, 0x22,
	0x1a, 0xd7, 0xa2, 0x98, 0x09, 0x86, 0xb9, 0xe8, 0x8a, 0x57, 0xe1, 0x9a, 0x5d, 0x33, 0x0d, 0x54,
	0xb7, 0xc6, 0x54, 0x78, 0xc7, 0xf2, 0xc7, 0x00, 0x25, 0x91, 0x44, 0x94, 0xeb, 0x85, 0x7b, 0x0c,
	0x5b, 0x23, 0xea, 0x7f, 0x18, 0x4e, 0xa3, 0x88, 0xc5, 0x62, 0x18, 0x51, 0x1f, 0xbf, 0x80, 0xf5,
	0xe1, 0xc7, 0x20, 0x6a, 0xb1, 0x98, 0x72, 0xc7, 0x3a, 0xb0, 0x0e, 0x8b, 0x64, 0x01, 0xb8, 0xc7,
	0xf0, 0x3c, 0x2d, 0x10, 0x9e, 0x98, 0x72, 0xac, 0x42, 0xf1, 0x34, 0x08, 0xe9, 0xc0, 0x13, 0x1f,
	0x94, 0x62, 0x9d, 0xcc, 0xd7, 0x2e, 0x82, 0xfd, 0x40, 0xc0, 0xdd, 0xbf, 0x57, 0xa0, 0x94, 0x02,
	0xf1, 0x07, 0x28, 0x8e, 0x92, 0x88, 0x9e, 0x53, 0xe1, 0x29, 0x7d, 0xa9, 0x5e, 0xae, 0xa9, 0x1d,
	0xcf, 0xd0, 0xe6, 0xd6, 0xcd, 0xed, 0xbe, 0x75, 0x7f, 0xbb, 0x5f, 0x78, 0x19, 0x4c, 0xc2, 0x60,
	0x42, 0xc9, 0x5c, 0x80, 0x3f, 0x41, 0xa1, 0xff, 0xee, 0x57, 0xa5, 0x5d, 0x51, 0xda, 0x4d, 0xad,
	0x35, 0x60, 0x73, 0xd7, 0x48, 0xcb, 0x12, 0x7d, 0xc9, 0xc6, 0x81, 0xa0, 0xe3, 0x48, 0x24, 0x64,
	0xa6, 0xc2, 0x1f, 0x21, 0x2f, 0x0b, 0x77, 0x72, 0x4a, 0xbd, 0x53, 0x8b, 0xae, 0x78, 0xed, 0x41,
	0x53, 0x9a, 0x28, 0x0d, 0x78, 0x44, 0xfd, 0x94, 0x81, 0x52, 0xe1, 0x09, 0xac, 0xe9, 0x2e, 0x38,
	0x79, 0xa5, 0xdf, 0x5d, 0xd2, 0xab, 0x68, 0x73, 0xe7, 0xfe, 0x76, 0xdf, 0xe6, 0xea, 0x3b, 0xe5,
	0x61, 0xb4, 0xf8, 0x1a, 0x56, 0x55, 0x6b, 0x9c, 0x55, 0x65, 0xf2, 0xd9, 0x63, 0x26, 0xbc, 0xb9,
	0x7d, 0x7f, 0xbb, 0xbf, 0x25, 0x3d, 0xd2, 0x16, 0x5a, 0xe8, 0x9e, 0x00, 0xa6, 0xf8, 0x84, 0xfe,
	0x36, 0xa5, 0x5c, 0x60, 0x0d, 0x0a, 0xe6, 0xd3, 0x34, 0xf6, 0xd1, 0xf2, 0xc8, 0x8c, 0xe4, 0x26,
	0xb0, 0x9d, 0x71, 0xe1, 0x11, 0x9b, 0x70, 0x8a, 0x35, 0x58, 0x6f, 0x44, 0x81, 0xa9, 0x53, 0x1a,
	0x95, 0xeb, 0x76, 0x4d, 0xdf, 0xa3, 0x39, 0x4e, 0x16, 0x14, 0xac, 0x43, 0x71, 0xa6, 0x35, 0x87,
	0xf2, 0x44, 0x5b, 0xc8, 0x9c, 0xe7, 0x9e, 0xc3, 0xf3, 0x73, 0x2a, 0xe2, 0xc0, 0xe7, 0x67, 0x74,
	0xbe, 0xff, 0xaf, 0x20, 0xdf, 0xf3, 0xc6, 0x54, 0xdf, 0xaa, 0x26, 0xfe, 0x6b, 0x8e, 0xf1, 0xfb,
	0xb1, 0x37, 0xb9, 0xf2, 0x04, 0x8b, 0x13, 0xa2, 0xe2, 0x68, 0x43, 0xee, 0x0d, 0x4d, 0x54, 0xae,
	0x0d, 0x22, 0x3f, 0xdd, 0x57, 0xb0, 0xd9, 0x62, 0xd3, 0x89, 0xa0, 0xb1, 0xd9, 0x13, 0xa6, 0xad,
	0x8c, 0x6c, 0x07, 0x56, 0xdf, 0x7a, 0xe1, 0x54, 0x6f, 0x32, 0x4f, 0xf4, 0xc2, 0x7d, 0x0d, 0x65,
	0x23, 0xe5, 0x46, 0x5b, 0x83, 0xe2, 0x0c, 0x71, 0xac, 0x83, 0xdc, 0x61, 0xa9, 0x8e, 0xaa, 0x9e,
	0x4c, 0x06, 0x32, 0xe7, 0xb8, 0x53, 0xc0, 0x74, 0x2d, 0xff, 0xb3, 0x8b, 0xc7, 0x99, 0x2e, 0xca,
	0xac, 0xdb, 0xe9, 0xac, 0x7c, 0xa9, 0x85, 0x7f, 0xe6, 0xa1, 0x70, 0x1a, 0xb2, 0x4f, 0x5d, 0x76,
	0x2d, 0xc7, 0x78, 0x14, 0x8c, 0x29, 0x17, 0xde, 0x38, 0x52, 0xc9, 0xf2, 0x64, 0x01, 0xe0, 0x11,
	0x14, 0xba, 0xec, 0x5a, 0xce, 0x90, 0x2a, 0x5d, 0x6e, 0x44, 0x3a, 0x1b, 0xb1, 0xc4, 0xc9, 0x8c,
	0x80, 0x2e, 0x6c, 0x0c, 0x63, 0xbf, 0x23, 0x53, 0xbe, 0xf7, 0x7c, 0xaa, 0xe6, 0x64, 0x93, 0x64,
	0x30, 0x3c, 0xd0, 0xfd, 0xcf, 0x9b, 0xe1, 0xd5, 0x45, 0x49, 0xb7, 0x37, 0x34, 0x51, 0xe7, 0x81,
	0xaf, 0x00, 0xe4, 0xba, 0xe1, 0x8b, 0x80, 0x4d, 0xd4, 0x35, 0x2f, 0xd7, 0x5f, 0x18, 0xe2, 0x90,
	0xfa, 0xd3, 0x38, 0x10, 0x09, 0x99, 0x86, 0x54, 0x13, 0x48, 0x8a, 0x8c, 0xdf, 0xaa, 0x0d, 0xf4,
	0x1a, 0x23, 0x23, 0x5e, 0xcb, 0xb4, 0xae, 0xe7, 0x09, 0xa3, 0xc9, 0xb0, 0xa4, 0xea, 0x84, 0x8b,
	0x85, 0xaa, 0xf0, 0x94, 0x2a, 0xcd, 0xc2, 0x3d, 0x00, 0xed, 0x32, 0x60, 0xb1, 0x70, 0x8a, 0xaa,
	0xd4, 0x14, 0x22, 0xe3, 0x9a, 0xaf, 0xe2, 0xeb, 0x3a, 0xbe, 0x40, 0xf0, 0x3b, 0x80, 0x01, 0x0b,
	0x03, 0x3f, 0x51, 0xbd, 0x05, 0x95, 0xb3, 0xa2, 0x7a, 0x3b, 0x2b, 0x72, 0x11, 0x26, 0x29, 0xaa,
	0x34, 0xee, 0xbc, 0x0f, 0xd9, 0xa7, 0x66, 0x22, 0x28, 0x77, 0x4a, 0xea, 0xc0, 0x52, 0x88, 0x3c,
	0x05, 0xb5, 0x1a, 0x78, 0xfe, 0x47, 0x2a, 0xb8, 0xb3, 0xa1, 0x18, 0x19, 0x4c, 0x7a, 0x90, 0x85,
	0xc7, 0xa6, 0xf6, 0x20, 0x19, 0x0f, 0x92, 0xf6, 0x28, 0x6b, 0x8f, 0x34, 0x76, 0x14, 0x41, 0x29,
	0x75, 0x0b, 0x70, 0x17, 0xf0, 0xb4, 0xdb, 0xff, 0xe5, 0xb2, 0xdb, 0x3f, 0xbb, 0x1c, 0x5d, 0x0c,
	0xda, 0x97, 0xbd, 0x7e, 0xaf, 0x6d, 0x3f, 0x5b, 0xc6, 0xfb, 0x83, 0x76, 0xcf, 0xb6, 0xb0, 0x02,
	0xdb, 0x59, 0xbc, 0xd5, 0xed, 0x0f, 0xdb, 0xf6, 0x0a, 0x3a, 0xb0, 0x93, 0x0d, 0x34, 0x5a, 0xa3,
	0xce, 0xdb, 0xb6, 0x9d, 0x3b, 0x62, 0x80, 0xcb, 0xbd, 0xc1, 0x2f, 0xe1, 0xc5, 0xb0, 0xdd, 0xfa,
	0x99, 0x74, 0x46, 0x17, 0x97, 0x83, 0x7e, 0xb7, 0xd3, 0xba, 0xc8, 0xe4, 0xff, 0x1c, 0x2a, 0x8f,
	0x86, 0x87, 0x67, 0xb6, 0xf5, 0xb4, 0xb6, 0xd1, 0xea, 0xda, 0x2b, 0xf5, 0x3f, 0x2c, 0x28, 0xf4,
	0x23, 0x1a, 0x0f, 0x7f, 0xf7, 0xb1, 0x93, 0x79, 0x36, 0x5b, 0x2c, 0x0c, 0xa9, 0x2f, 0xb0, 0xf2,
	0xf0, 0xb5, 0x32, 0xef, 0x51, 0xd5, 0x59, 0x0e, 0x98, 0xd9, 0x7b, 0x86, 0x2d, 0x80, 0xc5, 0xd0,
	0xa3, 0x7e, 0xf0, 0x96, 0x5e, 0xb4, 0x6a, 0x65, 0x09, 0x9f, 0x19, 0x1c, 0x5a, 0x5f, 0x5b, 0xcd,
	0x8d, 0xbf, 0xee, 0xf6, 0xac, 0x9b, 0xbb, 0x3d, 0xeb, 0x9f, 0xbb, 0x3d, 0xeb, 0xdd, 0x9a, 0xfa,
	0x97, 0xfe, 0xe6, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x89, 0xda, 0xa8, 0xe2, 0x07, 0x00,
	0x00,
}
