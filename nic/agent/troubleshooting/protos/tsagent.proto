// {C} Copyright 2017 Pensando Systems Inc. All rights reserved.

syntax = "proto3";
// Service name
package tsagent;
option go_package="state";

import "google/api/annotations.proto";
import  public "github.com/pensando/sw/venice/utils/apigen/annotations/includes.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/pensando/sw/api/meta.proto";
//import "github.com/pensando/sw/nic/proto/hal/types.proto";

// copied from proto/hal/types.proto... Find out a way to include proto/hal/types.proto
// CopiedDropReasons
message CopiedDropReasons {
  bool      drop_malformed_pkt                      = 1;        // malformed pkt drop
  bool      drop_input_mapping                      = 2;        // input mapping table miss
  bool      drop_input_mapping_dejavu               = 3;        // deja-vu drop
  bool      drop_flow_hit                           = 4;        // flow hit drop
  bool      drop_flow_miss                          = 5;        // flow miss drop
  bool      drop_nacl                               = 6;        // nacl drop
  bool      drop_ipsg                               = 7;        // ipsg drop
  bool      drop_ip_normalization                   = 8;        // ip norm. drop
  bool      drop_tcp_normalization                  = 9;        // tcp norm. drop
  bool      drop_tcp_rst_with_invalid_ack_num       = 10;       // rst with invalid ack num
  bool      drop_tcp_non_syn_first_pkt              = 11;       // non-syn first pkt
  bool      drop_icmp_normalization                 = 12;       // icmp norm. drop
  bool      drop_input_properties_miss              = 13;       // input properties miss
  bool      drop_tcp_out_of_window                  = 14;       // tcp OOW drop
  bool      drop_tcp_split_handshake                = 15;       // split handshake drop
  bool      drop_tcp_win_zero_drop                  = 16;       // tcp win. zero
  bool      drop_tcp_data_after_fin                 = 17;       // tcp data after fin
  bool      drop_tcp_non_rst_pkt_after_rst          = 18;       // tcp non rst
  bool      drop_tcp_invalid_responder_first_pkt    = 19;       // tcp invalid resp.
  bool      drop_tcp_unexpected_pkt                 = 20;       // tcp unexpected packet
  bool      drop_src_lif_mismatch                   = 21;
  bool      drop_parser_icrc_error                  = 22;       // RDMA ICRC Errors
  bool      drop_parse_len_error                    = 23;       // Packet Length Errors
  bool      drop_hardware_error                     = 24;
}

// DropRuleSpec
message DropRuleSpec {
    CopiedDropReasons DropReasons = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
}

// DropMonitorObj maintains drop rule related id allocation and is storable in emdb
message DropMonitorObj {
    option (venice.objectPrefix) = {Collection: "config"};
    api.TypeMeta 		T = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta 		O = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    DropRuleSpec 		Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,inline"];
    uint64              RuleID = 4 [(gogoproto.jsontag) = "rule-id,omitempty"];
    repeated uint64     MirrorSessionIDs = 5 [(gogoproto.jsontag) = "mirror-ids,omitempty"];
}

// FlowMonitorRuleSpec
message FlowMonitorRuleSpec {
    string          SourceIP = 1[(gogoproto.jsontag) = "sip,omitempty"];
    string          DestIP = 2[(gogoproto.jsontag) = "dip,omitempty"];
    uint64          SourceMac = 3[(gogoproto.jsontag) = "smac,omitempty"];
    uint64          DestMac = 4[(gogoproto.jsontag) = "dmac,omitempty"];
    uint32          EtherType = 5[(gogoproto.jsontag) = "ethertype,omitempty"];
    uint32          Protocol = 6[(gogoproto.jsontag) = "proto,omitempty"];
    uint32          SourceL4Port = 7[(gogoproto.jsontag) = "srcl4port,omitempty"];
    uint32          DestL4Port = 8[(gogoproto.jsontag) = "destl4port,omitempty"];
    uint64          SourceGroupID = 9[(gogoproto.jsontag) = "srcGrp,omitempty"];
    uint64          DestGroupID = 10[(gogoproto.jsontag) = "destGrp,omitempty"];
}

// FlowMonitorObj maintains flow rule related id allocation and is storable in emdb
message FlowMonitorObj {
    option (venice.objectPrefix) = {Collection: "config"};
    api.TypeMeta 		T = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline"];
    api.ObjectMeta 		O = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    FlowMonitorRuleSpec Spec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "spec,inline"];
    uint64              RuleID = 4 [(gogoproto.jsontag) = "rule-id,omitempty"];
    repeated uint64     MirrorSessionIDs = 5 [(gogoproto.jsontag) = "mirror-ids,omitempty"];
}

// MirrorSessionObj maintains mirrorsession related id allocation and is storable in emdb
message MirrorSessionObj {
    option (venice.objectPrefix) = {Collection: "config"};
   	api.TypeMeta T = 1 [(gogoproto.embed) = true,(gogoproto.nullable) = false,(gogoproto.jsontag) = ",inline"];
    api.ObjectMeta O = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (gogoproto.jsontag) = "meta,omitempty"];
    uint64 MirrorID = 3 [(gogoproto.jsontag) = "MirrorID ,omitempty"];
    bool Created = 4[(gogoproto.jsontag) = "MirrorCreated ,omitempty"];
    uint64 Handle = 5[(gogoproto.jsontag) = "MirrorHandle ,omitempty"];
    repeated uint64 FlowMonitorRuleIDs = 6 [(gogoproto.jsontag) = "FlowRuleIDList ,omitempty"];
    repeated uint64 DropMonitorRuleIDs = 7 [(gogoproto.jsontag) = "DropRuleIDList ,omitempty"];
}
