// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/pensando/sw/nic/upgrade_manager/upgrade/upgrade.proto

/*
	Package upgrade is a generated protocol buffer package.

	It is generated from these files:
		github.com/pensando/sw/nic/upgrade_manager/upgrade/upgrade.proto

	It has these top-level messages:
		UpgReq
		UpgResp
		UpgStateReq
		UpgAppResp
		UpgApp
		UpgradeMetrics
*/
package upgrade

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpgReqType int32

const (
	UpgReqType_InvalidCmd    UpgReqType = 0
	UpgReqType_UpgStart      UpgReqType = 1
	UpgReqType_UpgAbort      UpgReqType = 2
	UpgReqType_IsUpgPossible UpgReqType = 3
)

var UpgReqType_name = map[int32]string{
	0: "InvalidCmd",
	1: "UpgStart",
	2: "UpgAbort",
	3: "IsUpgPossible",
}
var UpgReqType_value = map[string]int32{
	"InvalidCmd":    0,
	"UpgStart":      1,
	"UpgAbort":      2,
	"IsUpgPossible": 3,
}

func (x UpgReqType) String() string {
	return proto.EnumName(UpgReqType_name, int32(x))
}
func (UpgReqType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{0} }

type UpgRespType int32

const (
	UpgRespType_UpgRespPass        UpgRespType = 0
	UpgRespType_UpgRespFail        UpgRespType = 1
	UpgRespType_UpgRespAbort       UpgRespType = 2
	UpgRespType_UpgRespUpgPossible UpgRespType = 3
)

var UpgRespType_name = map[int32]string{
	0: "UpgRespPass",
	1: "UpgRespFail",
	2: "UpgRespAbort",
	3: "UpgRespUpgPossible",
}
var UpgRespType_value = map[string]int32{
	"UpgRespPass":        0,
	"UpgRespFail":        1,
	"UpgRespAbort":       2,
	"UpgRespUpgPossible": 3,
}

func (x UpgRespType) String() string {
	return proto.EnumName(UpgRespType_name, int32(x))
}
func (UpgRespType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{1} }

// Upgrade Request Status
type UpgReqStateType int32

const (
	UpgReqStateType_UpgStateCompatCheck             UpgReqStateType = 0
	UpgReqStateType_UpgStateProcessQuiesce          UpgReqStateType = 1
	UpgReqStateType_UpgStatePostBinRestart          UpgReqStateType = 2
	UpgReqStateType_UpgStateDataplaneDowntimePhase1 UpgReqStateType = 3
	UpgReqStateType_UpgStateDataplaneDowntimePhase2 UpgReqStateType = 4
	UpgReqStateType_UpgStateDataplaneDowntimePhase3 UpgReqStateType = 5
	UpgReqStateType_UpgStateDataplaneDowntimePhase4 UpgReqStateType = 6
	UpgReqStateType_UpgStateCleanup                 UpgReqStateType = 7
	UpgReqStateType_UpgStateSuccess                 UpgReqStateType = 8
	UpgReqStateType_UpgStateFailed                  UpgReqStateType = 9
	UpgReqStateType_UpgStateAbort                   UpgReqStateType = 10
	UpgReqStateType_UpgStateUpgPossible             UpgReqStateType = 11
	UpgReqStateType_UpgStateLinkDown                UpgReqStateType = 12
	UpgReqStateType_UpgStateLinkUp                  UpgReqStateType = 13
	UpgReqStateType_UpgStateDataplaneDowntimeStart  UpgReqStateType = 14
	UpgReqStateType_UpgStateIsSystemReady           UpgReqStateType = 15
	// Always to be last
	UpgReqStateType_UpgStateTerminal UpgReqStateType = 16
)

var UpgReqStateType_name = map[int32]string{
	0:  "UpgStateCompatCheck",
	1:  "UpgStateProcessQuiesce",
	2:  "UpgStatePostBinRestart",
	3:  "UpgStateDataplaneDowntimePhase1",
	4:  "UpgStateDataplaneDowntimePhase2",
	5:  "UpgStateDataplaneDowntimePhase3",
	6:  "UpgStateDataplaneDowntimePhase4",
	7:  "UpgStateCleanup",
	8:  "UpgStateSuccess",
	9:  "UpgStateFailed",
	10: "UpgStateAbort",
	11: "UpgStateUpgPossible",
	12: "UpgStateLinkDown",
	13: "UpgStateLinkUp",
	14: "UpgStateDataplaneDowntimeStart",
	15: "UpgStateIsSystemReady",
	16: "UpgStateTerminal",
}
var UpgReqStateType_value = map[string]int32{
	"UpgStateCompatCheck":             0,
	"UpgStateProcessQuiesce":          1,
	"UpgStatePostBinRestart":          2,
	"UpgStateDataplaneDowntimePhase1": 3,
	"UpgStateDataplaneDowntimePhase2": 4,
	"UpgStateDataplaneDowntimePhase3": 5,
	"UpgStateDataplaneDowntimePhase4": 6,
	"UpgStateCleanup":                 7,
	"UpgStateSuccess":                 8,
	"UpgStateFailed":                  9,
	"UpgStateAbort":                   10,
	"UpgStateUpgPossible":             11,
	"UpgStateLinkDown":                12,
	"UpgStateLinkUp":                  13,
	"UpgStateDataplaneDowntimeStart":  14,
	"UpgStateIsSystemReady":           15,
	"UpgStateTerminal":                16,
}

func (x UpgReqStateType) String() string {
	return proto.EnumName(UpgReqStateType_name, int32(x))
}
func (UpgReqStateType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{2} }

// Upgrade State Response Status
type UpgStateRespType int32

const (
	UpgStateRespType_UpgStateCompatCheckRespPass             UpgStateRespType = 0
	UpgStateRespType_UpgStateCompatCheckRespFail             UpgStateRespType = 1
	UpgStateRespType_UpgStateProcessQuiesceRespPass          UpgStateRespType = 2
	UpgStateRespType_UpgStateProcessQuiesceRespFail          UpgStateRespType = 3
	UpgStateRespType_UpgStatePostBinRestartRespPass          UpgStateRespType = 4
	UpgStateRespType_UpgStatePostBinRestartRespFail          UpgStateRespType = 5
	UpgStateRespType_UpgStateDataplaneDowntimePhase1RespPass UpgStateRespType = 6
	UpgStateRespType_UpgStateDataplaneDowntimePhase1RespFail UpgStateRespType = 7
	UpgStateRespType_UpgStateDataplaneDowntimePhase2RespPass UpgStateRespType = 8
	UpgStateRespType_UpgStateDataplaneDowntimePhase2RespFail UpgStateRespType = 9
	UpgStateRespType_UpgStateDataplaneDowntimePhase3RespPass UpgStateRespType = 10
	UpgStateRespType_UpgStateDataplaneDowntimePhase3RespFail UpgStateRespType = 11
	UpgStateRespType_UpgStateDataplaneDowntimePhase4RespPass UpgStateRespType = 12
	UpgStateRespType_UpgStateDataplaneDowntimePhase4RespFail UpgStateRespType = 13
	UpgStateRespType_UpgStateCleanupRespPass                 UpgStateRespType = 14
	UpgStateRespType_UpgStateCleanupRespFail                 UpgStateRespType = 15
	UpgStateRespType_UpgStateSuccessRespPass                 UpgStateRespType = 16
	UpgStateRespType_UpgStateSuccessRespFail                 UpgStateRespType = 17
	UpgStateRespType_UpgStateFailedRespPass                  UpgStateRespType = 18
	UpgStateRespType_UpgStateFailedRespFail                  UpgStateRespType = 19
	UpgStateRespType_UpgStateAbortRespPass                   UpgStateRespType = 20
	UpgStateRespType_UpgStateAbortRespFail                   UpgStateRespType = 21
	UpgStateRespType_UpgStateUpgPossibleRespPass             UpgStateRespType = 22
	UpgStateRespType_UpgStateUpgPossibleRespFail             UpgStateRespType = 23
	UpgStateRespType_UpgStateLinkDownRespPass                UpgStateRespType = 24
	UpgStateRespType_UpgStateLinkDownRespFail                UpgStateRespType = 25
	UpgStateRespType_UpgStateLinkUpRespPass                  UpgStateRespType = 26
	UpgStateRespType_UpgStateLinkUpRespFail                  UpgStateRespType = 27
	UpgStateRespType_UpgStateDataplaneDowntimeStartRespPass  UpgStateRespType = 28
	UpgStateRespType_UpgStateDataplaneDowntimeStartRespFail  UpgStateRespType = 29
	UpgStateRespType_UpgStateIsSystemReadyRespPass           UpgStateRespType = 30
	UpgStateRespType_UpgStateIsSystemReadyRespFail           UpgStateRespType = 31
)

var UpgStateRespType_name = map[int32]string{
	0:  "UpgStateCompatCheckRespPass",
	1:  "UpgStateCompatCheckRespFail",
	2:  "UpgStateProcessQuiesceRespPass",
	3:  "UpgStateProcessQuiesceRespFail",
	4:  "UpgStatePostBinRestartRespPass",
	5:  "UpgStatePostBinRestartRespFail",
	6:  "UpgStateDataplaneDowntimePhase1RespPass",
	7:  "UpgStateDataplaneDowntimePhase1RespFail",
	8:  "UpgStateDataplaneDowntimePhase2RespPass",
	9:  "UpgStateDataplaneDowntimePhase2RespFail",
	10: "UpgStateDataplaneDowntimePhase3RespPass",
	11: "UpgStateDataplaneDowntimePhase3RespFail",
	12: "UpgStateDataplaneDowntimePhase4RespPass",
	13: "UpgStateDataplaneDowntimePhase4RespFail",
	14: "UpgStateCleanupRespPass",
	15: "UpgStateCleanupRespFail",
	16: "UpgStateSuccessRespPass",
	17: "UpgStateSuccessRespFail",
	18: "UpgStateFailedRespPass",
	19: "UpgStateFailedRespFail",
	20: "UpgStateAbortRespPass",
	21: "UpgStateAbortRespFail",
	22: "UpgStateUpgPossibleRespPass",
	23: "UpgStateUpgPossibleRespFail",
	24: "UpgStateLinkDownRespPass",
	25: "UpgStateLinkDownRespFail",
	26: "UpgStateLinkUpRespPass",
	27: "UpgStateLinkUpRespFail",
	28: "UpgStateDataplaneDowntimeStartRespPass",
	29: "UpgStateDataplaneDowntimeStartRespFail",
	30: "UpgStateIsSystemReadyRespPass",
	31: "UpgStateIsSystemReadyRespFail",
}
var UpgStateRespType_value = map[string]int32{
	"UpgStateCompatCheckRespPass":             0,
	"UpgStateCompatCheckRespFail":             1,
	"UpgStateProcessQuiesceRespPass":          2,
	"UpgStateProcessQuiesceRespFail":          3,
	"UpgStatePostBinRestartRespPass":          4,
	"UpgStatePostBinRestartRespFail":          5,
	"UpgStateDataplaneDowntimePhase1RespPass": 6,
	"UpgStateDataplaneDowntimePhase1RespFail": 7,
	"UpgStateDataplaneDowntimePhase2RespPass": 8,
	"UpgStateDataplaneDowntimePhase2RespFail": 9,
	"UpgStateDataplaneDowntimePhase3RespPass": 10,
	"UpgStateDataplaneDowntimePhase3RespFail": 11,
	"UpgStateDataplaneDowntimePhase4RespPass": 12,
	"UpgStateDataplaneDowntimePhase4RespFail": 13,
	"UpgStateCleanupRespPass":                 14,
	"UpgStateCleanupRespFail":                 15,
	"UpgStateSuccessRespPass":                 16,
	"UpgStateSuccessRespFail":                 17,
	"UpgStateFailedRespPass":                  18,
	"UpgStateFailedRespFail":                  19,
	"UpgStateAbortRespPass":                   20,
	"UpgStateAbortRespFail":                   21,
	"UpgStateUpgPossibleRespPass":             22,
	"UpgStateUpgPossibleRespFail":             23,
	"UpgStateLinkDownRespPass":                24,
	"UpgStateLinkDownRespFail":                25,
	"UpgStateLinkUpRespPass":                  26,
	"UpgStateLinkUpRespFail":                  27,
	"UpgStateDataplaneDowntimeStartRespPass":  28,
	"UpgStateDataplaneDowntimeStartRespFail":  29,
	"UpgStateIsSystemReadyRespPass":           30,
	"UpgStateIsSystemReadyRespFail":           31,
}

func (x UpgStateRespType) String() string {
	return proto.EnumName(UpgStateRespType_name, int32(x))
}
func (UpgStateRespType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{3} }

type UpgType int32

const (
	UpgType_UpgTypeDisruptive    UpgType = 0
	UpgType_UpgTypeNonDisruptive UpgType = 1
)

var UpgType_name = map[int32]string{
	0: "UpgTypeDisruptive",
	1: "UpgTypeNonDisruptive",
}
var UpgType_value = map[string]int32{
	"UpgTypeDisruptive":    0,
	"UpgTypeNonDisruptive": 1,
}

func (x UpgType) String() string {
	return proto.EnumName(UpgType_name, int32(x))
}
func (UpgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{4} }

// spec part of the object
type UpgReq struct {
	Meta       *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	UpgReqCmd  UpgReqType         `protobuf:"varint,2,opt,name=UpgReqCmd,proto3,enum=upgrade.UpgReqType" json:"UpgReqCmd,omitempty"`
	UpgReqType UpgType            `protobuf:"varint,3,opt,name=UpgReqType,proto3,enum=upgrade.UpgType" json:"UpgReqType,omitempty"`
}

func (m *UpgReq) Reset()                    { *m = UpgReq{} }
func (m *UpgReq) String() string            { return proto.CompactTextString(m) }
func (*UpgReq) ProtoMessage()               {}
func (*UpgReq) Descriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{0} }

func (m *UpgReq) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UpgReq) GetUpgReqCmd() UpgReqType {
	if m != nil {
		return m.UpgReqCmd
	}
	return UpgReqType_InvalidCmd
}

func (m *UpgReq) GetUpgReqType() UpgType {
	if m != nil {
		return m.UpgReqType
	}
	return UpgType_UpgTypeDisruptive
}

// status part of the object
type UpgResp struct {
	Meta           *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	UpgRespVal     UpgRespType        `protobuf:"varint,2,opt,name=UpgRespVal,proto3,enum=upgrade.UpgRespType" json:"UpgRespVal,omitempty"`
	UpgRespFailStr []string           `protobuf:"bytes,3,rep,name=UpgRespFailStr" json:"UpgRespFailStr,omitempty"`
}

func (m *UpgResp) Reset()                    { *m = UpgResp{} }
func (m *UpgResp) String() string            { return proto.CompactTextString(m) }
func (*UpgResp) ProtoMessage()               {}
func (*UpgResp) Descriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{1} }

func (m *UpgResp) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UpgResp) GetUpgRespVal() UpgRespType {
	if m != nil {
		return m.UpgRespVal
	}
	return UpgRespType_UpgRespPass
}

func (m *UpgResp) GetUpgRespFailStr() []string {
	if m != nil {
		return m.UpgRespFailStr
	}
	return nil
}

type UpgStateReq struct {
	Meta        *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	UpgReqState UpgReqStateType    `protobuf:"varint,2,opt,name=UpgReqState,proto3,enum=upgrade.UpgReqStateType" json:"UpgReqState,omitempty"`
	UpgReqType  UpgType            `protobuf:"varint,3,opt,name=UpgReqType,proto3,enum=upgrade.UpgType" json:"UpgReqType,omitempty"`
}

func (m *UpgStateReq) Reset()                    { *m = UpgStateReq{} }
func (m *UpgStateReq) String() string            { return proto.CompactTextString(m) }
func (*UpgStateReq) ProtoMessage()               {}
func (*UpgStateReq) Descriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{2} }

func (m *UpgStateReq) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UpgStateReq) GetUpgReqState() UpgReqStateType {
	if m != nil {
		return m.UpgReqState
	}
	return UpgReqStateType_UpgStateCompatCheck
}

func (m *UpgStateReq) GetUpgReqType() UpgType {
	if m != nil {
		return m.UpgReqType
	}
	return UpgType_UpgTypeDisruptive
}

type UpgAppResp struct {
	Meta          *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key           string             `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	UpgAppRespVal UpgStateRespType   `protobuf:"varint,3,opt,name=UpgAppRespVal,proto3,enum=upgrade.UpgStateRespType" json:"UpgAppRespVal,omitempty"`
	UpgAppRespStr string             `protobuf:"bytes,4,opt,name=UpgAppRespStr,proto3" json:"UpgAppRespStr,omitempty"`
}

func (m *UpgAppResp) Reset()                    { *m = UpgAppResp{} }
func (m *UpgAppResp) String() string            { return proto.CompactTextString(m) }
func (*UpgAppResp) ProtoMessage()               {}
func (*UpgAppResp) Descriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{3} }

func (m *UpgAppResp) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UpgAppResp) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpgAppResp) GetUpgAppRespVal() UpgStateRespType {
	if m != nil {
		return m.UpgAppRespVal
	}
	return UpgStateRespType_UpgStateCompatCheckRespPass
}

func (m *UpgAppResp) GetUpgAppRespStr() string {
	if m != nil {
		return m.UpgAppRespStr
	}
	return ""
}

type UpgApp struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key  string             `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *UpgApp) Reset()                    { *m = UpgApp{} }
func (m *UpgApp) String() string            { return proto.CompactTextString(m) }
func (*UpgApp) ProtoMessage()               {}
func (*UpgApp) Descriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{4} }

func (m *UpgApp) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UpgApp) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type UpgradeMetrics struct {
	Meta             *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	Key              uint32             `protobuf:"varint,2,opt,name=Key,proto3" json:"Key,omitempty"`
	IsUpgPossible    *delphi.Counter    `protobuf:"bytes,3,opt,name=IsUpgPossible" json:"IsUpgPossible,omitempty"`
	DisruptiveUpg    *delphi.Counter    `protobuf:"bytes,4,opt,name=DisruptiveUpg" json:"DisruptiveUpg,omitempty"`
	NonDisruptiveUpg *delphi.Counter    `protobuf:"bytes,5,opt,name=NonDisruptiveUpg" json:"NonDisruptiveUpg,omitempty"`
	SuccessfulUpg    *delphi.Counter    `protobuf:"bytes,6,opt,name=SuccessfulUpg" json:"SuccessfulUpg,omitempty"`
	FailedUpg        *delphi.Counter    `protobuf:"bytes,7,opt,name=FailedUpg" json:"FailedUpg,omitempty"`
	AbortedUpg       *delphi.Counter    `protobuf:"bytes,8,opt,name=AbortedUpg" json:"AbortedUpg,omitempty"`
	NumRegApps       *delphi.Gauge      `protobuf:"bytes,9,opt,name=NumRegApps" json:"NumRegApps,omitempty"`
	UpgPossible      *delphi.Counter    `protobuf:"bytes,10,opt,name=UpgPossible" json:"UpgPossible,omitempty"`
	UpgNotPossible   *delphi.Counter    `protobuf:"bytes,11,opt,name=UpgNotPossible" json:"UpgNotPossible,omitempty"`
}

func (m *UpgradeMetrics) Reset()                    { *m = UpgradeMetrics{} }
func (m *UpgradeMetrics) String() string            { return proto.CompactTextString(m) }
func (*UpgradeMetrics) ProtoMessage()               {}
func (*UpgradeMetrics) Descriptor() ([]byte, []int) { return fileDescriptorUpgrade, []int{5} }

func (m *UpgradeMetrics) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UpgradeMetrics) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *UpgradeMetrics) GetIsUpgPossible() *delphi.Counter {
	if m != nil {
		return m.IsUpgPossible
	}
	return nil
}

func (m *UpgradeMetrics) GetDisruptiveUpg() *delphi.Counter {
	if m != nil {
		return m.DisruptiveUpg
	}
	return nil
}

func (m *UpgradeMetrics) GetNonDisruptiveUpg() *delphi.Counter {
	if m != nil {
		return m.NonDisruptiveUpg
	}
	return nil
}

func (m *UpgradeMetrics) GetSuccessfulUpg() *delphi.Counter {
	if m != nil {
		return m.SuccessfulUpg
	}
	return nil
}

func (m *UpgradeMetrics) GetFailedUpg() *delphi.Counter {
	if m != nil {
		return m.FailedUpg
	}
	return nil
}

func (m *UpgradeMetrics) GetAbortedUpg() *delphi.Counter {
	if m != nil {
		return m.AbortedUpg
	}
	return nil
}

func (m *UpgradeMetrics) GetNumRegApps() *delphi.Gauge {
	if m != nil {
		return m.NumRegApps
	}
	return nil
}

func (m *UpgradeMetrics) GetUpgPossible() *delphi.Counter {
	if m != nil {
		return m.UpgPossible
	}
	return nil
}

func (m *UpgradeMetrics) GetUpgNotPossible() *delphi.Counter {
	if m != nil {
		return m.UpgNotPossible
	}
	return nil
}

func init() {
	proto.RegisterType((*UpgReq)(nil), "upgrade.UpgReq")
	proto.RegisterType((*UpgResp)(nil), "upgrade.UpgResp")
	proto.RegisterType((*UpgStateReq)(nil), "upgrade.UpgStateReq")
	proto.RegisterType((*UpgAppResp)(nil), "upgrade.UpgAppResp")
	proto.RegisterType((*UpgApp)(nil), "upgrade.UpgApp")
	proto.RegisterType((*UpgradeMetrics)(nil), "upgrade.UpgradeMetrics")
	proto.RegisterEnum("upgrade.UpgReqType", UpgReqType_name, UpgReqType_value)
	proto.RegisterEnum("upgrade.UpgRespType", UpgRespType_name, UpgRespType_value)
	proto.RegisterEnum("upgrade.UpgReqStateType", UpgReqStateType_name, UpgReqStateType_value)
	proto.RegisterEnum("upgrade.UpgStateRespType", UpgStateRespType_name, UpgStateRespType_value)
	proto.RegisterEnum("upgrade.UpgType", UpgType_name, UpgType_value)
}
func (m *UpgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpgReqCmd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.UpgReqCmd))
	}
	if m.UpgReqType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.UpgReqType))
	}
	return i, nil
}

func (m *UpgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.UpgRespVal != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.UpgRespVal))
	}
	if len(m.UpgRespFailStr) > 0 {
		for _, s := range m.UpgRespFailStr {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UpgStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgStateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.Meta.Size()))
		n3, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.UpgReqState != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.UpgReqState))
	}
	if m.UpgReqType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.UpgReqType))
	}
	return i, nil
}

func (m *UpgAppResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgAppResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.Meta.Size()))
		n4, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.UpgAppRespVal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.UpgAppRespVal))
	}
	if len(m.UpgAppRespStr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.UpgAppRespStr)))
		i += copy(dAtA[i:], m.UpgAppRespStr)
	}
	return i, nil
}

func (m *UpgApp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgApp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.Meta.Size()))
		n5, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *UpgradeMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeMetrics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.Meta.Size()))
		n6, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Key != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.Key))
	}
	if m.IsUpgPossible != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.IsUpgPossible.Size()))
		n7, err := m.IsUpgPossible.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.DisruptiveUpg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.DisruptiveUpg.Size()))
		n8, err := m.DisruptiveUpg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.NonDisruptiveUpg != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.NonDisruptiveUpg.Size()))
		n9, err := m.NonDisruptiveUpg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.SuccessfulUpg != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.SuccessfulUpg.Size()))
		n10, err := m.SuccessfulUpg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.FailedUpg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.FailedUpg.Size()))
		n11, err := m.FailedUpg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.AbortedUpg != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.AbortedUpg.Size()))
		n12, err := m.AbortedUpg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.NumRegApps != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.NumRegApps.Size()))
		n13, err := m.NumRegApps.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.UpgPossible != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.UpgPossible.Size()))
		n14, err := m.UpgPossible.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.UpgNotPossible != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintUpgrade(dAtA, i, uint64(m.UpgNotPossible.Size()))
		n15, err := m.UpgNotPossible.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func encodeVarintUpgrade(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpgReq) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.UpgReqCmd != 0 {
		n += 1 + sovUpgrade(uint64(m.UpgReqCmd))
	}
	if m.UpgReqType != 0 {
		n += 1 + sovUpgrade(uint64(m.UpgReqType))
	}
	return n
}

func (m *UpgResp) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.UpgRespVal != 0 {
		n += 1 + sovUpgrade(uint64(m.UpgRespVal))
	}
	if len(m.UpgRespFailStr) > 0 {
		for _, s := range m.UpgRespFailStr {
			l = len(s)
			n += 1 + l + sovUpgrade(uint64(l))
		}
	}
	return n
}

func (m *UpgStateReq) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.UpgReqState != 0 {
		n += 1 + sovUpgrade(uint64(m.UpgReqState))
	}
	if m.UpgReqType != 0 {
		n += 1 + sovUpgrade(uint64(m.UpgReqType))
	}
	return n
}

func (m *UpgAppResp) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.UpgAppRespVal != 0 {
		n += 1 + sovUpgrade(uint64(m.UpgAppRespVal))
	}
	l = len(m.UpgAppRespStr)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	return n
}

func (m *UpgApp) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	return n
}

func (m *UpgradeMetrics) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.Key != 0 {
		n += 1 + sovUpgrade(uint64(m.Key))
	}
	if m.IsUpgPossible != nil {
		l = m.IsUpgPossible.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.DisruptiveUpg != nil {
		l = m.DisruptiveUpg.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.NonDisruptiveUpg != nil {
		l = m.NonDisruptiveUpg.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.SuccessfulUpg != nil {
		l = m.SuccessfulUpg.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.FailedUpg != nil {
		l = m.FailedUpg.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.AbortedUpg != nil {
		l = m.AbortedUpg.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.NumRegApps != nil {
		l = m.NumRegApps.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.UpgPossible != nil {
		l = m.UpgPossible.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.UpgNotPossible != nil {
		l = m.UpgNotPossible.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	return n
}

func sovUpgrade(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUpgrade(x uint64) (n int) {
	return sovUpgrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgReqCmd", wireType)
			}
			m.UpgReqCmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgReqCmd |= (UpgReqType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgReqType", wireType)
			}
			m.UpgReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgReqType |= (UpgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgRespVal", wireType)
			}
			m.UpgRespVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgRespVal |= (UpgRespType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgRespFailStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgRespFailStr = append(m.UpgRespFailStr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgReqState", wireType)
			}
			m.UpgReqState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgReqState |= (UpgReqStateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgReqType", wireType)
			}
			m.UpgReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgReqType |= (UpgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgAppResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgAppResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgAppResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgAppRespVal", wireType)
			}
			m.UpgAppRespVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgAppRespVal |= (UpgStateRespType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgAppRespStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpgAppRespStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgApp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgApp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgApp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUpgPossible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsUpgPossible == nil {
				m.IsUpgPossible = &delphi.Counter{}
			}
			if err := m.IsUpgPossible.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisruptiveUpg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisruptiveUpg == nil {
				m.DisruptiveUpg = &delphi.Counter{}
			}
			if err := m.DisruptiveUpg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonDisruptiveUpg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NonDisruptiveUpg == nil {
				m.NonDisruptiveUpg = &delphi.Counter{}
			}
			if err := m.NonDisruptiveUpg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessfulUpg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SuccessfulUpg == nil {
				m.SuccessfulUpg = &delphi.Counter{}
			}
			if err := m.SuccessfulUpg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedUpg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FailedUpg == nil {
				m.FailedUpg = &delphi.Counter{}
			}
			if err := m.FailedUpg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedUpg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbortedUpg == nil {
				m.AbortedUpg = &delphi.Counter{}
			}
			if err := m.AbortedUpg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRegApps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NumRegApps == nil {
				m.NumRegApps = &delphi.Gauge{}
			}
			if err := m.NumRegApps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgPossible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgPossible == nil {
				m.UpgPossible = &delphi.Counter{}
			}
			if err := m.UpgPossible.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgNotPossible", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpgNotPossible == nil {
				m.UpgNotPossible = &delphi.Counter{}
			}
			if err := m.UpgNotPossible.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpgrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUpgrade
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUpgrade
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUpgrade(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUpgrade = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpgrade   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/pensando/sw/nic/upgrade_manager/upgrade/upgrade.proto", fileDescriptorUpgrade)
}

var fileDescriptorUpgrade = []byte{
	// 1044 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x36, 0x2d, 0x59, 0x97, 0x23, 0x4b, 0x1a, 0x8f, 0x6f, 0xb2, 0x9d, 0xc8, 0xfe, 0xf5, 0x07,
	0xae, 0xa1, 0x22, 0x16, 0x22, 0xa7, 0x0d, 0xe0, 0x6e, 0x62, 0xcb, 0xbd, 0x18, 0x69, 0x5c, 0x97,
	0x8e, 0x0a, 0x74, 0x55, 0x50, 0xd2, 0x54, 0x66, 0x23, 0x91, 0x13, 0x0e, 0x99, 0xc0, 0xbb, 0xa2,
	0xab, 0xbe, 0x41, 0xba, 0xeb, 0xb2, 0x8b, 0x3e, 0x41, 0xde, 0xa0, 0xcb, 0xbe, 0x41, 0x0b, 0xf7,
	0x45, 0x0a, 0x1e, 0x92, 0xa3, 0xa1, 0x42, 0x5d, 0xd2, 0x76, 0x65, 0xcd, 0xf9, 0x2e, 0x73, 0xe6,
	0xcc, 0x39, 0x03, 0x1a, 0x1e, 0xf7, 0x4d, 0xf7, 0xda, 0xeb, 0x1c, 0x76, 0xed, 0x61, 0x83, 0x33,
	0x4b, 0x18, 0x56, 0xcf, 0x6e, 0x88, 0x57, 0x0d, 0xcb, 0xec, 0x36, 0x3c, 0xde, 0x77, 0x8c, 0x1e,
	0xfb, 0x66, 0x68, 0x58, 0x46, 0x9f, 0x39, 0xd1, 0x3a, 0xfa, 0x7b, 0xc8, 0x1d, 0xdb, 0xb5, 0x69,
	0x36, 0x5c, 0x6e, 0xdf, 0xf3, 0x35, 0x3d, 0x36, 0xe0, 0xd7, 0x66, 0x03, 0xa1, 0x68, 0x11, 0xfc,
	0x09, 0xe8, 0xb5, 0x5f, 0x35, 0xc8, 0xb4, 0x79, 0x5f, 0x67, 0x2f, 0xe8, 0x3e, 0xa4, 0x9f, 0x32,
	0xd7, 0xa8, 0x68, 0x7b, 0xda, 0x41, 0xa1, 0x49, 0x0f, 0x43, 0xde, 0x17, 0x9d, 0xef, 0x58, 0xd7,
	0xf5, 0x11, 0x1d, 0x71, 0xfa, 0x08, 0xf2, 0x81, 0xa2, 0x35, 0xec, 0x55, 0x16, 0xf7, 0xb4, 0x83,
	0x52, 0x73, 0xf5, 0x30, 0x4a, 0x22, 0x40, 0x9e, 0xdd, 0x70, 0x76, 0x9a, 0xfe, 0xfe, 0x75, 0x4d,
	0xd3, 0x47, 0x5c, 0xfa, 0x21, 0xc0, 0x08, 0xae, 0xa4, 0x50, 0x49, 0x54, 0xa5, 0x22, 0x53, 0x98,
	0xc7, 0x39, 0x3f, 0xf2, 0xe3, 0xeb, 0x9a, 0x56, 0xfb, 0x59, 0x83, 0x2c, 0x02, 0x82, 0xcf, 0x9d,
	0xee, 0x71, 0xb8, 0xab, 0xe0, 0x5f, 0x19, 0x83, 0x30, 0xdf, 0xb5, 0x78, 0xbe, 0x82, 0xbf, 0xb5,
	0x33, 0xb2, 0xe9, 0x3e, 0x94, 0xc2, 0xd5, 0x27, 0x86, 0x39, 0xb8, 0x72, 0x9d, 0x4a, 0x6a, 0x2f,
	0x75, 0x90, 0xd7, 0xc7, 0xa2, 0x4a, 0x86, 0x6f, 0x34, 0x28, 0xb4, 0x79, 0xff, 0xca, 0x35, 0x5c,
	0xf6, 0x2e, 0x45, 0x7d, 0x8c, 0x32, 0x9d, 0xbd, 0x40, 0x65, 0x98, 0x66, 0x65, 0xac, 0xac, 0x88,
	0x29, 0xa9, 0xaa, 0x92, 0xff, 0xa0, 0xba, 0x6f, 0x34, 0xb4, 0x38, 0xe1, 0xfc, 0x9d, 0x0a, 0x4c,
	0x20, 0xf5, 0x84, 0xdd, 0x60, 0xca, 0x79, 0xdd, 0xff, 0x49, 0x3f, 0x86, 0xe2, 0xc8, 0xc7, 0xaf,
	0x7a, 0x90, 0xcd, 0x96, 0x9a, 0x4d, 0x58, 0xa1, 0x58, 0xe9, 0xe3, 0x2a, 0x7a, 0x4f, 0xb5, 0xf1,
	0x8b, 0x9f, 0xc6, 0x2d, 0xe2, 0xc1, 0x63, 0x94, 0xd6, 0x3e, 0xc3, 0x36, 0x3e, 0xe1, 0xff, 0x22,
	0xed, 0xd0, 0xe9, 0x97, 0x34, 0x5e, 0xba, 0x9f, 0xe7, 0x53, 0xe6, 0x3a, 0x66, 0x57, 0xfc, 0x13,
	0xcb, 0x62, 0x50, 0x89, 0x0f, 0xa0, 0x78, 0x2e, 0xda, 0xbc, 0x7f, 0x69, 0x0b, 0x61, 0x76, 0x06,
	0xc1, 0xbd, 0x14, 0x9a, 0xe5, 0xc8, 0xa2, 0x65, 0x7b, 0x96, 0xcb, 0x1c, 0x3d, 0xce, 0xf2, 0x65,
	0x67, 0xa6, 0x70, 0x3c, 0xee, 0x9a, 0x2f, 0x59, 0x9b, 0xf7, 0xf1, 0xe4, 0x49, 0xb2, 0x18, 0x8b,
	0x7e, 0x04, 0xe4, 0xc2, 0xb6, 0xe2, 0xca, 0xa5, 0x64, 0xe5, 0x5b, 0x44, 0x7f, 0xcf, 0x2b, 0xaf,
	0xdb, 0x65, 0x42, 0x7c, 0xeb, 0x0d, 0x7c, 0x65, 0x66, 0xc2, 0x9e, 0x31, 0x16, 0xbd, 0x0f, 0x79,
	0x7f, 0x0a, 0x58, 0xcf, 0x97, 0x64, 0x93, 0x25, 0x23, 0x06, 0x6d, 0x00, 0x9c, 0x74, 0x6c, 0xc7,
	0x0d, 0xf8, 0xb9, 0x64, 0xbe, 0x42, 0xa1, 0xf7, 0x01, 0x2e, 0xbc, 0xa1, 0xce, 0xfc, 0xbb, 0x15,
	0x95, 0x3c, 0x0a, 0x8a, 0x91, 0xe0, 0x53, 0xc3, 0xeb, 0x33, 0x5d, 0x21, 0xd0, 0x07, 0x38, 0x47,
	0xb2, 0xdc, 0x90, 0xbc, 0x81, 0xca, 0xa1, 0x8f, 0xf0, 0xbe, 0x2f, 0x6c, 0x57, 0xaa, 0x0a, 0xc9,
	0xaa, 0x31, 0x5a, 0xfd, 0x89, 0x3a, 0x71, 0xb4, 0x04, 0x70, 0x6e, 0xbd, 0x34, 0x06, 0x66, 0xaf,
	0x35, 0xec, 0x91, 0x05, 0xba, 0x0c, 0xb9, 0xa0, 0xcd, 0x1d, 0x97, 0x68, 0xe1, 0x0a, 0xcf, 0x45,
	0x16, 0xe9, 0xca, 0x58, 0x5b, 0x90, 0x54, 0xfd, 0xeb, 0xf0, 0x01, 0x08, 0x06, 0x82, 0x96, 0xe5,
	0xf2, 0xd2, 0x10, 0x82, 0x2c, 0x28, 0x01, 0xbf, 0x98, 0x44, 0xa3, 0x04, 0x96, 0xc3, 0x40, 0xe4,
	0xba, 0x01, 0x34, 0x8c, 0xc4, 0xad, 0xff, 0x48, 0x41, 0x79, 0xec, 0x01, 0xa1, 0x9b, 0xb0, 0x1a,
	0x0d, 0x61, 0xcb, 0x1e, 0x72, 0xc3, 0x6d, 0x5d, 0xb3, 0xee, 0x73, 0xb2, 0x40, 0xb7, 0x61, 0x23,
	0x02, 0x2e, 0x1d, 0xdb, 0xbf, 0xe8, 0x2f, 0x3d, 0x93, 0x89, 0x2e, 0x23, 0x5a, 0x0c, 0xb3, 0x85,
	0x7b, 0x6a, 0x5a, 0x3a, 0x13, 0x78, 0xc0, 0x45, 0xfa, 0x7f, 0xd8, 0x8d, 0xb0, 0x33, 0xc3, 0x35,
	0xf8, 0xc0, 0xb0, 0xd8, 0x99, 0xfd, 0xca, 0x72, 0xcd, 0x21, 0xbb, 0xbc, 0x36, 0x04, 0x7b, 0x40,
	0x52, 0xb3, 0x49, 0x4d, 0x92, 0x9e, 0x4d, 0x3a, 0x22, 0x4b, 0xb3, 0x49, 0x0f, 0x49, 0x86, 0xae,
	0xe2, 0xb9, 0x83, 0x43, 0x0e, 0x98, 0x61, 0x79, 0x9c, 0x64, 0xd5, 0x60, 0xd8, 0xc9, 0x24, 0x47,
	0x29, 0xf6, 0x00, 0x06, 0x83, 0x5e, 0x25, 0x79, 0xff, 0x92, 0xa2, 0x58, 0x50, 0x61, 0x50, 0xab,
	0xa6, 0x96, 0xb8, 0x40, 0xd7, 0x80, 0x44, 0xc0, 0xe7, 0xa6, 0xf5, 0xdc, 0xcf, 0x84, 0x2c, 0xab,
	0xae, 0x7e, 0xb4, 0xcd, 0x49, 0x91, 0xd6, 0xa0, 0x3a, 0x31, 0xf1, 0xa0, 0x59, 0x4a, 0x74, 0x0b,
	0xd6, 0x23, 0xce, 0xb9, 0xb8, 0xba, 0x11, 0x2e, 0x1b, 0xea, 0xcc, 0xe8, 0xdd, 0x90, 0xb2, 0xba,
	0xd1, 0x33, 0xe6, 0x0c, 0x4d, 0xcb, 0x18, 0x10, 0x52, 0xff, 0x21, 0x3f, 0x0a, 0xcb, 0x16, 0xda,
	0x85, 0x9d, 0x84, 0x2b, 0x56, 0x5a, 0x6a, 0x32, 0x21, 0x6c, 0x31, 0x25, 0xd7, 0x78, 0x2f, 0x48,
	0x93, 0xc5, 0xe9, 0x1c, 0xf4, 0x49, 0xc5, 0x38, 0xb1, 0xbe, 0x91, 0x3e, 0xe9, 0xe9, 0x1c, 0xf4,
	0x59, 0xa2, 0xef, 0xc3, 0x7b, 0x33, 0x7a, 0x4c, 0x1a, 0x66, 0xe6, 0x24, 0xa3, 0x73, 0x76, 0x36,
	0xb9, 0x29, 0x9d, 0x73, 0x73, 0x92, 0xd1, 0x39, 0x3f, 0x9b, 0x7c, 0x24, 0x9d, 0x61, 0x4e, 0x32,
	0x3a, 0x17, 0x66, 0x93, 0x1f, 0x4a, 0xe7, 0xe5, 0x39, 0xc9, 0xe8, 0x5c, 0xa4, 0x3b, 0xb0, 0x39,
	0x36, 0x37, 0xd2, 0xa9, 0x34, 0x01, 0x44, 0x65, 0x59, 0x05, 0xc3, 0xe1, 0x92, 0x4a, 0x32, 0x01,
	0x44, 0xe5, 0x8a, 0xfa, 0xb6, 0x04, 0x13, 0x28, 0x85, 0x34, 0x19, 0x43, 0xdd, 0xaa, 0x3a, 0x2b,
	0x38, 0xa5, 0x52, 0xb6, 0x96, 0x08, 0xa1, 0x6a, 0x5d, 0x6d, 0x7d, 0x65, 0x90, 0xa5, 0x76, 0x63,
	0x0a, 0x01, 0x1d, 0x36, 0xe9, 0x1d, 0xa8, 0x8c, 0x4f, 0xbc, 0x94, 0x57, 0x26, 0xa1, 0xa8, 0xdd,
	0x52, 0xcf, 0x13, 0xbc, 0x0b, 0x52, 0xb9, 0x9d, 0x8c, 0xa1, 0x6e, 0x87, 0xd6, 0x61, 0x7f, 0xfa,
	0xdb, 0x21, 0x7d, 0xee, 0xcc, 0xc7, 0x45, 0xdf, 0xbb, 0xf4, 0x7f, 0x70, 0x37, 0xf1, 0xbd, 0x91,
	0x76, 0xd5, 0xa9, 0x14, 0x74, 0xd9, 0xad, 0x1f, 0xe3, 0xb7, 0x39, 0x3e, 0x3d, 0xeb, 0xb0, 0x12,
	0xfe, 0x1c, 0x7d, 0x63, 0x90, 0x05, 0x5a, 0x81, 0xb5, 0x30, 0x1c, 0xfb, 0xfa, 0x20, 0xda, 0x29,
	0xf9, 0xed, 0xb6, 0xaa, 0xfd, 0x7e, 0x5b, 0xd5, 0xfe, 0xbc, 0xad, 0x6a, 0x3f, 0xfd, 0x55, 0x5d,
	0xe8, 0x64, 0xf0, 0xff, 0x93, 0xa3, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x94, 0x98, 0xe0, 0x0a,
	0x12, 0x0d, 0x00, 0x00,
}
