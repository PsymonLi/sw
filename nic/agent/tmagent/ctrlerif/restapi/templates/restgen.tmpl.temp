// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
 /*
 * Package restapi is a auto generated package.
 * Input file: {{.Name}}
 */
 {{$pkgName := .Package}}
package restapi
import (
	"github.com/gorilla/mux"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
	"github.com/pensando/sw/venice/utils/ntranslate"
	_ "github.com/pensando/sw/nic/utils/ntranslate"
)

 {{$msgs := .Messages}}
 {{range $msgs}}
    {{if (HasSuffix .GetName "Metrics")}}
	func init() {
		name := "/telemetry/v1/metrics/{{ToLower .GetName}}/"
		if prefixRoutes == nil {
			prefixRoutes = make(map[string]routeAddFunc)
		}
		prefixRoutes[name] = add{{.GetName}}APIRoutes
	}

	// add{{.GetName}}APIRoutes adds routes for {{.GetName}}
	func add{{.GetName}}APIRoutes(r *mux.Router, srv *RestServer){
		r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.run{{.GetName}}GetHandler))
		r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.run{{.GetName}}ListHandler))
	}

	// run{{.GetName}}ListHandler is the List Handler for {{.GetName}}
	func (s *RestServer) run{{.GetName}}ListHandler(r *http.Request) (interface{}, error){
		iter, err := goproto.New{{.GetName}}Iterator()
		if err != nil {
			log.Infof("Error: %s", err)
		}
		var mtr []*goproto.{{.GetName}}
		for iter.HasNext() {
			mtr = append(mtr, iter.Next())
			log.Infof("New {{.GetName}}: %+v", mtr)
		}
		log.Infof("Got GET LIST request")
		return mtr, nil
	}

	// run{{.GetName}}GetHandler is the Get Handler for {{.GetName}}
	func (s *RestServer) run{{.GetName}}GetHandler(r *http.Request) (interface{}, error){
		tstr := ntranslate.MustGetTranslator()
		key := tstr.GetKey("{{.GetName}}", &api.ObjectMeta{Tenant: "default", Namespace: "default", Name: mux.Vars(r)["Meta.Name"]})
		if key == nil {
			key, _ = mux.Vars(r)["Meta.Name"]
		}
 		{{$foundKey := false}}
		{{$msgName := .GetName}} {{$fields := .Fields}}{{range $fields}}
		{{if (eq .GetName "Key") }}
		{{$foundKey = true}}
		keyVal, ok := key.({{GetGolangTypeName .GetType .GetTypeName}})
		if !ok {
			return "Key is not of type {{GetGolangTypeName .GetType .GetTypeName}}", errors.New("Key is not of type {{GetGolangTypeName .GetType .GetTypeName}}")
		}
		{{end}} {{end}}
		{{if eq $foundKey false}} 
		keyVal := 0
		{{end}}
		log.Infof("Got GET request {{.GetName}}/%s/%v", mux.Vars(r)["Meta.Name"], keyVal)

		iter, err := goproto.New{{.GetName}}Iterator()
		if err != nil {
			return "Unable to get {{.GetName}}Iterator", err
		}

		{{if eq $foundKey false}} 
		mtr, err := iter.Find()
		{{else}}
		mtr, err := iter.Find(keyVal)
		{{end}}
		if err != nil {
			return "Unable to Find UpgradeMetrics Object", err
		}
		log.Infof("err %s", err.Error())
		log.Infof("New {{.GetName}}: %+v", mtr)
		return mtr, nil
	}
    {{end}}
{{end}}
