// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
 /*
 * Package restapi is a auto generated package.
 * Input file: {{.Name}}
 */
 {{$pkgName := .Package}}
package restapi
import (
	"github.com/gorilla/mux"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
	"github.com/pensando/sw/venice/utils/ntranslate"
	_ "github.com/pensando/sw/nic/utils/ntranslate/{{$pkgName}}"
)

 {{$msgs := .Messages}}
 {{range $msgs}}
    {{if (HasSuffix .GetName "Metrics")}}
	func init() {
		name := "/telemetry/v1/metrics/{{ToLower .GetName}}/"
		if prefixRoutes == nil {
			prefixRoutes = make(map[string]routeAddFunc)
		}
		prefixRoutes[name] = add{{.GetName}}APIRoutes
	}

	// add{{.GetName}}APIRoutes adds routes for {{.GetName}}
	func add{{.GetName}}APIRoutes(r *mux.Router, srv *RestServer){
		r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.run{{.GetName}}GetHandler))
		r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.run{{.GetName}}ListHandler))
	}

	// run{{.GetName}}ListHandler is the List Handler for {{.GetName}}
	func (s *RestServer) run{{.GetName}}ListHandler(r *http.Request) (interface{}, error){
		iter, err := goproto.New{{.GetName}}Iterator()
		if err != nil {
			log.Infof("Error: %s", err)
		}
		var mtr []*goproto.{{.GetName}}
		for iter.HasNext() {
			mtr = append(mtr, iter.Next())
			log.Infof("New {{.GetName}}: %+v", mtr)
		}
		log.Infof("Got GET LIST request")
		return mtr, nil
	}

	// run{{.GetName}}GetHandler is the Get Handler for {{.GetName}}
	func (s *RestServer) run{{.GetName}}GetHandler(r *http.Request) (interface{}, error){
		log.Infof("Got GET request {{.GetName}}/%s", mux.Vars(r)["Meta.Name"])
		return nil, nil
	}
    {{end}}
{{end}}
