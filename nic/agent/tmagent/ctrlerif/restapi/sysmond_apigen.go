// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package restapi is a auto generated package.
 * Input file: sysmond.proto
 */

package restapi

import (
	"net/http"

	"github.com/gorilla/mux"

	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
	_ "github.com/pensando/sw/nic/utils/ntranslate/sysmond"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ntranslate"
)

func init() {
	name := "/telemetry/v1/metrics/asicpowermetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addAsicPowerMetricsAPIRoutes
}

// addAsicPowerMetricsAPIRoutes adds routes for AsicPowerMetrics
func addAsicPowerMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runAsicPowerMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runAsicPowerMetricsListHandler))
}

// runAsicPowerMetricsListHandler is the List Handler for AsicPowerMetrics
func (s *RestServer) runAsicPowerMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewAsicPowerMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.AsicPowerMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("AsicPowerMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New AsicPowerMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runAsicPowerMetricsGetHandler is the Get Handler for AsicPowerMetrics
func (s *RestServer) runAsicPowerMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request AsicPowerMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/asictemperaturemetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addAsicTemperatureMetricsAPIRoutes
}

// addAsicTemperatureMetricsAPIRoutes adds routes for AsicTemperatureMetrics
func addAsicTemperatureMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runAsicTemperatureMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runAsicTemperatureMetricsListHandler))
}

// runAsicTemperatureMetricsListHandler is the List Handler for AsicTemperatureMetrics
func (s *RestServer) runAsicTemperatureMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewAsicTemperatureMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.AsicTemperatureMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("AsicTemperatureMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New AsicTemperatureMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runAsicTemperatureMetricsGetHandler is the Get Handler for AsicTemperatureMetrics
func (s *RestServer) runAsicTemperatureMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request AsicTemperatureMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}
