// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package tpmprotos is a auto generated package.
Input file: tpm.proto
*/
package resttest

import (
	"testing"

	api "github.com/pensando/sw/api"
	monitoring "github.com/pensando/sw/api/generated/monitoring"
	tpmprotos "github.com/pensando/sw/venice/ctrler/tpm/rpcserver/protos"
	tsproto "github.com/pensando/sw/venice/ctrler/tsm/rpcserver/tsproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

func TestFlowExportPolicyList(t *testing.T) {
	t.Parallel()
	var flowexportpolicyList []*tpmprotos.FlowExportPolicy

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/flowexports/", &flowexportpolicyList)

	AssertOk(t, err, "Error getting flowexportpolicys from the REST Server")
}

func TestFlowExportPolicyPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var flowexportpolicyGet tpmprotos.FlowExportPolicy

	postData := tpmprotos.FlowExportPolicy{
		TypeMeta: api.TypeMeta{Kind: "FlowExportPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostFlowExportPolicy",
		},
		Spec: tpmprotos.FlowExportPolicySpec{
			MatchRules: []tsproto.MatchRule{
				{
					Src: &tsproto.MatchSelector{
						IPAddresses: []string{"1.1.1.1"},
					},
					Dst: &tsproto.MatchSelector{
						IPAddresses: []string{"1.1.1.2"},
					},
					AppProtoSel: &tsproto.AppProtoSelector{
						Ports: []string{"TCP/1000"},
					},
				},
			},
			Interval: "15s",
			Format:   "IPFIX",
			Exports: []monitoring.ExportConfig{
				{
					Destination: "10.1.1.0",
					Transport:   "UDP/2055",
				},
			},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/flowexports/", &postData, &resp)
	AssertOk(t, err, "Error posting flowexportpolicy to REST Server")
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/"+"testPostFlowExportPolicy/", &flowexportpolicyGet)
	AssertOk(t, getErr, "Error getting flowexportpolicys from the REST Server")

}

func TestFlowExportPolicyDelete(t *testing.T) {
	t.Parallel()
	var resp Response

	deleteData := tpmprotos.FlowExportPolicy{
		TypeMeta: api.TypeMeta{Kind: "FlowExportPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteFlowExportPolicy",
		},
		Spec: tpmprotos.FlowExportPolicySpec{
			MatchRules: []tsproto.MatchRule{
				{
					Src: &tsproto.MatchSelector{
						IPAddresses: []string{"1.1.1.1"},
					},
					Dst: &tsproto.MatchSelector{
						IPAddresses: []string{"1.1.1.2"},
					},
					AppProtoSel: &tsproto.AppProtoSelector{
						Ports: []string{"TCP/1000"},
					},
				},
			},

			Interval: "15s",
			Format:   "IPFIX",
			Exports: []monitoring.ExportConfig{
				{
					Destination: "10.1.1.0",
					Transport:   "UDP/2055",
				},
			},
		},
	}

	deleteMeta := tpmprotos.FlowExportPolicy{
		TypeMeta: api.TypeMeta{Kind: "FlowExportPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteFlowExportPolicy",
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/flowexports/", &deleteData, &resp)
	AssertOk(t, err, "Error posting flowexportpolicy to REST Server")
	delErr := netutils.HTTPDelete("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/"+"testDeleteFlowExportPolicy", &deleteMeta, &resp)
	AssertOk(t, delErr, "Error deleting flowexportpolicys from the REST Server")

}

func TestFlowExportPolicyPut(t *testing.T) {
	t.Parallel()
	var resp Response
	var flowexportpolicyGet tpmprotos.FlowExportPolicy

	putData := tpmprotos.FlowExportPolicy{
		TypeMeta: api.TypeMeta{Kind: "FlowExportPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPutFlowExportPolicy",
		},
		Spec: tpmprotos.FlowExportPolicySpec{
			MatchRules: []tsproto.MatchRule{
				{
					Src: &tsproto.MatchSelector{
						IPAddresses: []string{"1.1.1.1"},
					},
					Dst: &tsproto.MatchSelector{
						IPAddresses: []string{"1.1.1.2"},
					},
					AppProtoSel: &tsproto.AppProtoSelector{
						Ports: []string{"TCP/1000"},
					},
				},
			},
			Interval: "15s",
			Format:   "IPFIX",
			Exports: []monitoring.ExportConfig{
				{
					Destination: "10.1.1.0",
					Transport:   "UDP/2055",
				},
			},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/flowexports/", &putData, &resp)
	AssertOk(t, err, "Error posting flowexportpolicy to REST Server")

	// change protocol & interval
	putData.Spec.Interval = "60s"
	putData.Spec.Exports[0].Transport = "TCP/2055"

	// put
	err = netutils.HTTPPut("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/"+"testPutFlowExportPolicy/", &putData, &resp)
	AssertOk(t, err, "Error in PUT flowexportpolicy to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/flowexports/default/default/"+"testPutFlowExportPolicy/", &flowexportpolicyGet)
	AssertOk(t, getErr, "Error getting flowexportpolicys from the REST Server")

}

func TestFwlogPolicyList(t *testing.T) {
	t.Parallel()
	var fwlogpolicyList []*tpmprotos.FwlogPolicy

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/fwlog/", &fwlogpolicyList)

	AssertOk(t, err, "Error getting fwlogpolicys from the REST Server")
}

func TestFwlogPolicyPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var fwlogpolicyGet tpmprotos.FwlogPolicy

	postData := tpmprotos.FwlogPolicy{
		TypeMeta: api.TypeMeta{Kind: "FwlogPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostFwlogPolicy",
		},
		Spec: monitoring.FwlogPolicySpec{
			Targets: []monitoring.ExportConfig{
				{
					Destination: "192.168.1.100",
					Transport:   "TCP/514",
				},
				{
					Destination: "192.168.1.101",
					Transport:   "UDP/514",
				},
			},
			Format: "SYSLOG_BSD",
			Filter: []string{"FIREWALL_ACTION_ALL"},
			Config: &monitoring.SyslogExportConfig{
				FacilityOverride: "LOG_LOCAL0",
			},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/fwlog/", &postData, &resp)
	AssertOk(t, err, "Error posting fwlogpolicy to REST Server")
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/fwlog/default/default/"+"testPostFwlogPolicy/", &fwlogpolicyGet)
	AssertOk(t, getErr, "Error getting fwlogpolicys from the REST Server")

}

func TestFwlogPolicyDelete(t *testing.T) {
	t.Parallel()
	var resp Response

	deleteData := tpmprotos.FwlogPolicy{
		TypeMeta: api.TypeMeta{Kind: "FwlogPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteFwlogPolicy",
		},
		Spec: monitoring.FwlogPolicySpec{
			Targets: []monitoring.ExportConfig{
				{
					Destination: "192.168.1.100",
					Transport:   "TCP/514",
				},
				{
					Destination: "192.168.1.101",
					Transport:   "UDP/514",
				},
			},
			Format: "SYSLOG_BSD",
			Filter: []string{"FIREWALL_ACTION_ALL"},
			Config: &monitoring.SyslogExportConfig{
				FacilityOverride: "LOG_LOCAL0",
			},
		},
	}

	deleteMeta := tpmprotos.FwlogPolicy{
		TypeMeta: api.TypeMeta{Kind: "FwlogPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteFwlogPolicy",
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/fwlog/", &deleteData, &resp)
	AssertOk(t, err, "Error posting fwlogpolicy to REST Server")
	delErr := netutils.HTTPDelete("http://"+agentRestURL+"/api/telemetry/fwlog/default/default/"+"testDeleteFwlogPolicy", &deleteMeta, &resp)
	AssertOk(t, delErr, "Error deleting fwlogpolicys from the REST Server")

}

func TestFwlogPolicyPut(t *testing.T) {
	t.Parallel()
	var resp Response
	var fwlogpolicyGet tpmprotos.FwlogPolicy

	putData := tpmprotos.FwlogPolicy{
		TypeMeta: api.TypeMeta{Kind: "FwlogPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPutFwlogPolicy",
		},
		Spec: monitoring.FwlogPolicySpec{
			Targets: []monitoring.ExportConfig{
				{
					Destination: "192.168.1.100",
					Transport:   "TCP/514",
				},
				{
					Destination: "192.168.1.101",
					Transport:   "UDP/514",
				},
			},
			Format: "SYSLOG_BSD",
			Filter: []string{"FIREWALL_ACTION_ALL"},
			Config: &monitoring.SyslogExportConfig{
				FacilityOverride: "LOG_LOCAL0",
			},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/telemetry/fwlog/", &putData, &resp)
	AssertOk(t, err, "Error posting fwlogpolicy to REST Server")

	// change protocol & interval
	putData.Spec.Format = "SYSLOG_RFC5424"
	putData.Spec.Targets[0].Transport = "TCP/4055"

	// put
	err = netutils.HTTPPut("http://"+agentRestURL+"/api/telemetry/fwlog/default/default/"+"testPutFwlogPolicy/", &putData, &resp)
	AssertOk(t, err, "Error in PUT fwlogpolicy to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/telemetry/fwlog/default/default/"+"testPutFwlogPolicy/", &fwlogpolicyGet)
	AssertOk(t, getErr, "Error getting fwlogpolicys from the REST Server")

}
