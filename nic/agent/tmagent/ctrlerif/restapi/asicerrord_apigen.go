// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package restapi is a auto generated package.
 * Input file: asicerrord.proto
 */

package restapi

import (
	"fmt"
	"net/http"

	"github.com/fatih/structs"
	"github.com/gorilla/mux"

	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
	_ "github.com/pensando/sw/nic/utils/ntranslate/asicerrord"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/tsdb"
)

// addDbwaintdbMetricsAPIRoutes adds routes for DbwaintdbMetrics
func addDbwaintdbMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDbwaintdbMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDbwaintdbMetricsHandler))
}

// listDbwaintdbMetricsHandler is the List Handler for DbwaintdbMetrics
func (s *RestServer) listDbwaintdbMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDbwaintdbMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DbwaintdbMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("DbwaintdbMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DbwaintdbMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDbwaintdbMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDbwaintdbMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDbwaintdbMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("DbwaintdbMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DbwaintdbMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDbwaintdbMetricsHandler is the Get Handler for DbwaintdbMetrics
func (s *RestServer) getDbwaintdbMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DbwaintdbMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDbwaintlifqstatemapMetricsAPIRoutes adds routes for DbwaintlifqstatemapMetrics
func addDbwaintlifqstatemapMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDbwaintlifqstatemapMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDbwaintlifqstatemapMetricsHandler))
}

// listDbwaintlifqstatemapMetricsHandler is the List Handler for DbwaintlifqstatemapMetrics
func (s *RestServer) listDbwaintlifqstatemapMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDbwaintlifqstatemapMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DbwaintlifqstatemapMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("DbwaintlifqstatemapMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DbwaintlifqstatemapMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDbwaintlifqstatemapMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDbwaintlifqstatemapMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDbwaintlifqstatemapMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("DbwaintlifqstatemapMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DbwaintlifqstatemapMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDbwaintlifqstatemapMetricsHandler is the Get Handler for DbwaintlifqstatemapMetrics
func (s *RestServer) getDbwaintlifqstatemapMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DbwaintlifqstatemapMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDppintcreditMetricsAPIRoutes adds routes for DppintcreditMetrics
func addDppintcreditMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDppintcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDppintcreditMetricsHandler))
}

// listDppintcreditMetricsHandler is the List Handler for DppintcreditMetrics
func (s *RestServer) listDppintcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DppintcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("DppintcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DppintcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppintcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppintcreditMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDppintcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("DppintcreditMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DppintcreditMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDppintcreditMetricsHandler is the Get Handler for DppintcreditMetrics
func (s *RestServer) getDppintcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DppintcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDppintfifoMetricsAPIRoutes adds routes for DppintfifoMetrics
func addDppintfifoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDppintfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDppintfifoMetricsHandler))
}

// listDppintfifoMetricsHandler is the List Handler for DppintfifoMetrics
func (s *RestServer) listDppintfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DppintfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("DppintfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DppintfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppintfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppintfifoMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDppintfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("DppintfifoMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DppintfifoMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDppintfifoMetricsHandler is the Get Handler for DppintfifoMetrics
func (s *RestServer) getDppintfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DppintfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDppintreg1MetricsAPIRoutes adds routes for Dppintreg1Metrics
func addDppintreg1MetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDppintreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDppintreg1MetricsHandler))
}

// listDppintreg1MetricsHandler is the List Handler for Dppintreg1Metrics
func (s *RestServer) listDppintreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppintreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("Dppintreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppintreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppintreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppintreg1MetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDppintreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("Dppintreg1MetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppintreg1Metrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDppintreg1MetricsHandler is the Get Handler for Dppintreg1Metrics
func (s *RestServer) getDppintreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppintreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDppintreg2MetricsAPIRoutes adds routes for Dppintreg2Metrics
func addDppintreg2MetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDppintreg2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDppintreg2MetricsHandler))
}

// listDppintreg2MetricsHandler is the List Handler for Dppintreg2Metrics
func (s *RestServer) listDppintreg2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dppintreg2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("Dppintreg2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppintreg2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppintreg2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppintreg2MetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDppintreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("Dppintreg2MetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dppintreg2Metrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDppintreg2MetricsHandler is the Get Handler for Dppintreg2Metrics
func (s *RestServer) getDppintreg2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppintreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDppintsramseccMetricsAPIRoutes adds routes for DppintsramseccMetrics
func addDppintsramseccMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDppintsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDppintsramseccMetricsHandler))
}

// listDppintsramseccMetricsHandler is the List Handler for DppintsramseccMetrics
func (s *RestServer) listDppintsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DppintsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("DppintsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DppintsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDppintsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDppintsramseccMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDppintsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("DppintsramseccMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DppintsramseccMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDppintsramseccMetricsHandler is the Get Handler for DppintsramseccMetrics
func (s *RestServer) getDppintsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DppintsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDprintcreditMetricsAPIRoutes adds routes for DprintcreditMetrics
func addDprintcreditMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDprintcreditMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDprintcreditMetricsHandler))
}

// listDprintcreditMetricsHandler is the List Handler for DprintcreditMetrics
func (s *RestServer) listDprintcreditMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DprintcreditMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("DprintcreditMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DprintcreditMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprintcreditMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprintcreditMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDprintcreditMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("DprintcreditMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DprintcreditMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDprintcreditMetricsHandler is the Get Handler for DprintcreditMetrics
func (s *RestServer) getDprintcreditMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DprintcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDprintfifoMetricsAPIRoutes adds routes for DprintfifoMetrics
func addDprintfifoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDprintfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDprintfifoMetricsHandler))
}

// listDprintfifoMetricsHandler is the List Handler for DprintfifoMetrics
func (s *RestServer) listDprintfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DprintfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("DprintfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DprintfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprintfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprintfifoMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDprintfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("DprintfifoMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DprintfifoMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDprintfifoMetricsHandler is the Get Handler for DprintfifoMetrics
func (s *RestServer) getDprintfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DprintfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDprintflopfifoMetricsAPIRoutes adds routes for DprintflopfifoMetrics
func addDprintflopfifoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDprintflopfifoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDprintflopfifoMetricsHandler))
}

// listDprintflopfifoMetricsHandler is the List Handler for DprintflopfifoMetrics
func (s *RestServer) listDprintflopfifoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintflopfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DprintflopfifoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("DprintflopfifoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DprintflopfifoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprintflopfifoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprintflopfifoMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDprintflopfifoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("DprintflopfifoMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DprintflopfifoMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDprintflopfifoMetricsHandler is the Get Handler for DprintflopfifoMetrics
func (s *RestServer) getDprintflopfifoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DprintflopfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDprintreg1MetricsAPIRoutes adds routes for Dprintreg1Metrics
func addDprintreg1MetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDprintreg1MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDprintreg1MetricsHandler))
}

// listDprintreg1MetricsHandler is the List Handler for Dprintreg1Metrics
func (s *RestServer) listDprintreg1MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprintreg1Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("Dprintreg1MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprintreg1Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprintreg1MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprintreg1MetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDprintreg1MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("Dprintreg1MetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprintreg1Metrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDprintreg1MetricsHandler is the Get Handler for Dprintreg1Metrics
func (s *RestServer) getDprintreg1MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprintreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDprintreg2MetricsAPIRoutes adds routes for Dprintreg2Metrics
func addDprintreg2MetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDprintreg2MetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDprintreg2MetricsHandler))
}

// listDprintreg2MetricsHandler is the List Handler for Dprintreg2Metrics
func (s *RestServer) listDprintreg2MetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.Dprintreg2Metrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("Dprintreg2MetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprintreg2Metrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprintreg2MetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprintreg2MetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDprintreg2MetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("Dprintreg2MetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for Dprintreg2Metrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDprintreg2MetricsHandler is the Get Handler for Dprintreg2Metrics
func (s *RestServer) getDprintreg2MetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprintreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addDprintsramseccMetricsAPIRoutes adds routes for DprintsramseccMetrics
func addDprintsramseccMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getDprintsramseccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listDprintsramseccMetricsHandler))
}

// listDprintsramseccMetricsHandler is the List Handler for DprintsramseccMetrics
func (s *RestServer) listDprintsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.DprintsramseccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("DprintsramseccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DprintsramseccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getDprintsramseccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getDprintsramseccMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewDprintsramseccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("DprintsramseccMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for DprintsramseccMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getDprintsramseccMetricsHandler is the Get Handler for DprintsramseccMetrics
func (s *RestServer) getDprintsramseccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DprintsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addInteccdescMetricsAPIRoutes adds routes for InteccdescMetrics
func addInteccdescMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getInteccdescMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listInteccdescMetricsHandler))
}

// listInteccdescMetricsHandler is the List Handler for InteccdescMetrics
func (s *RestServer) listInteccdescMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewInteccdescMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.InteccdescMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("InteccdescMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for InteccdescMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getInteccdescMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getInteccdescMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewInteccdescMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("InteccdescMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for InteccdescMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getInteccdescMetricsHandler is the Get Handler for InteccdescMetrics
func (s *RestServer) getInteccdescMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request InteccdescMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addIntspareMetricsAPIRoutes adds routes for IntspareMetrics
func addIntspareMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getIntspareMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listIntspareMetricsHandler))
}

// listIntspareMetricsHandler is the List Handler for IntspareMetrics
func (s *RestServer) listIntspareMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewIntspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.IntspareMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("IntspareMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for IntspareMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getIntspareMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getIntspareMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewIntspareMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("IntspareMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for IntspareMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getIntspareMetricsHandler is the Get Handler for IntspareMetrics
func (s *RestServer) getIntspareMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request IntspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addMcmchintmcMetricsAPIRoutes adds routes for McmchintmcMetrics
func addMcmchintmcMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getMcmchintmcMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listMcmchintmcMetricsHandler))
}

// listMcmchintmcMetricsHandler is the List Handler for McmchintmcMetrics
func (s *RestServer) listMcmchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.McmchintmcMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("McmchintmcMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for McmchintmcMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMcmchintmcMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMcmchintmcMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewMcmchintmcMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("McmchintmcMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for McmchintmcMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getMcmchintmcMetricsHandler is the Get Handler for McmchintmcMetrics
func (s *RestServer) getMcmchintmcMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request McmchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addMdhensintaxierrMetricsAPIRoutes adds routes for MdhensintaxierrMetrics
func addMdhensintaxierrMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getMdhensintaxierrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listMdhensintaxierrMetricsHandler))
}

// listMdhensintaxierrMetricsHandler is the List Handler for MdhensintaxierrMetrics
func (s *RestServer) listMdhensintaxierrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintaxierrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintaxierrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("MdhensintaxierrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintaxierrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintaxierrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintaxierrMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewMdhensintaxierrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("MdhensintaxierrMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintaxierrMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getMdhensintaxierrMetricsHandler is the Get Handler for MdhensintaxierrMetrics
func (s *RestServer) getMdhensintaxierrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintaxierrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addMdhensinteccMetricsAPIRoutes adds routes for MdhensinteccMetrics
func addMdhensinteccMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getMdhensinteccMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listMdhensinteccMetricsHandler))
}

// listMdhensinteccMetricsHandler is the List Handler for MdhensinteccMetrics
func (s *RestServer) listMdhensinteccMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensinteccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensinteccMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("MdhensinteccMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensinteccMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensinteccMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensinteccMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewMdhensinteccMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("MdhensinteccMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensinteccMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getMdhensinteccMetricsHandler is the Get Handler for MdhensinteccMetrics
func (s *RestServer) getMdhensinteccMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensinteccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addMdhensintipcoreMetricsAPIRoutes adds routes for MdhensintipcoreMetrics
func addMdhensintipcoreMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getMdhensintipcoreMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listMdhensintipcoreMetricsHandler))
}

// listMdhensintipcoreMetricsHandler is the List Handler for MdhensintipcoreMetrics
func (s *RestServer) listMdhensintipcoreMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintipcoreMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MdhensintipcoreMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("MdhensintipcoreMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintipcoreMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMdhensintipcoreMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMdhensintipcoreMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewMdhensintipcoreMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("MdhensintipcoreMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MdhensintipcoreMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getMdhensintipcoreMetricsHandler is the Get Handler for MdhensintipcoreMetrics
func (s *RestServer) getMdhensintipcoreMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintipcoreMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addMpmpnsintcryptoMetricsAPIRoutes adds routes for MpmpnsintcryptoMetrics
func addMpmpnsintcryptoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getMpmpnsintcryptoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listMpmpnsintcryptoMetricsHandler))
}

// listMpmpnsintcryptoMetricsHandler is the List Handler for MpmpnsintcryptoMetrics
func (s *RestServer) listMpmpnsintcryptoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMpmpnsintcryptoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.MpmpnsintcryptoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("MpmpnsintcryptoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MpmpnsintcryptoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getMpmpnsintcryptoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getMpmpnsintcryptoMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewMpmpnsintcryptoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("MpmpnsintcryptoMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for MpmpnsintcryptoMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getMpmpnsintcryptoMetricsHandler is the Get Handler for MpmpnsintcryptoMetrics
func (s *RestServer) getMpmpnsintcryptoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MpmpnsintcryptoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addPbpbchbmintecchbmrbMetricsAPIRoutes adds routes for PbpbchbmintecchbmrbMetrics
func addPbpbchbmintecchbmrbMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getPbpbchbmintecchbmrbMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listPbpbchbmintecchbmrbMetricsHandler))
}

// listPbpbchbmintecchbmrbMetricsHandler is the List Handler for PbpbchbmintecchbmrbMetrics
func (s *RestServer) listPbpbchbmintecchbmrbMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbmintecchbmrbMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbmintecchbmrbMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbmintecchbmrbMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbmintecchbmrbMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbmintecchbmrbMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbmintecchbmrbMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewPbpbchbmintecchbmrbMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbmintecchbmrbMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbmintecchbmrbMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getPbpbchbmintecchbmrbMetricsHandler is the Get Handler for PbpbchbmintecchbmrbMetrics
func (s *RestServer) getPbpbchbmintecchbmrbMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbmintecchbmrbMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addPbpbchbminthbmaxierrrspMetricsAPIRoutes adds routes for PbpbchbminthbmaxierrrspMetrics
func addPbpbchbminthbmaxierrrspMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getPbpbchbminthbmaxierrrspMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listPbpbchbminthbmaxierrrspMetricsHandler))
}

// listPbpbchbminthbmaxierrrspMetricsHandler is the List Handler for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) listPbpbchbminthbmaxierrrspMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmaxierrrspMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmaxierrrspMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbminthbmaxierrrspMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmaxierrrspMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmaxierrrspMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmaxierrrspMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewPbpbchbminthbmaxierrrspMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbminthbmaxierrrspMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmaxierrrspMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getPbpbchbminthbmaxierrrspMetricsHandler is the Get Handler for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) getPbpbchbminthbmaxierrrspMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmaxierrrspMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addPbpbchbminthbmdropMetricsAPIRoutes adds routes for PbpbchbminthbmdropMetrics
func addPbpbchbminthbmdropMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getPbpbchbminthbmdropMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listPbpbchbminthbmdropMetricsHandler))
}

// listPbpbchbminthbmdropMetricsHandler is the List Handler for PbpbchbminthbmdropMetrics
func (s *RestServer) listPbpbchbminthbmdropMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmdropMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmdropMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbminthbmdropMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmdropMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmdropMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmdropMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewPbpbchbminthbmdropMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbminthbmdropMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmdropMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getPbpbchbminthbmdropMetricsHandler is the Get Handler for PbpbchbminthbmdropMetrics
func (s *RestServer) getPbpbchbminthbmdropMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmdropMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addPbpbchbminthbmpbusviolationMetricsAPIRoutes adds routes for PbpbchbminthbmpbusviolationMetrics
func addPbpbchbminthbmpbusviolationMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getPbpbchbminthbmpbusviolationMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listPbpbchbminthbmpbusviolationMetricsHandler))
}

// listPbpbchbminthbmpbusviolationMetricsHandler is the List Handler for PbpbchbminthbmpbusviolationMetrics
func (s *RestServer) listPbpbchbminthbmpbusviolationMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmpbusviolationMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmpbusviolationMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbminthbmpbusviolationMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmpbusviolationMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmpbusviolationMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmpbusviolationMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewPbpbchbminthbmpbusviolationMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbminthbmpbusviolationMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmpbusviolationMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getPbpbchbminthbmpbusviolationMetricsHandler is the Get Handler for PbpbchbminthbmpbusviolationMetrics
func (s *RestServer) getPbpbchbminthbmpbusviolationMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmpbusviolationMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addPbpbchbminthbmxoffMetricsAPIRoutes adds routes for PbpbchbminthbmxoffMetrics
func addPbpbchbminthbmxoffMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getPbpbchbminthbmxoffMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listPbpbchbminthbmxoffMetricsHandler))
}

// listPbpbchbminthbmxoffMetricsHandler is the List Handler for PbpbchbminthbmxoffMetrics
func (s *RestServer) listPbpbchbminthbmxoffMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmxoffMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbchbminthbmxoffMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbminthbmxoffMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmxoffMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbchbminthbmxoffMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbchbminthbmxoffMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewPbpbchbminthbmxoffMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("PbpbchbminthbmxoffMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbchbminthbmxoffMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getPbpbchbminthbmxoffMetricsHandler is the Get Handler for PbpbchbminthbmxoffMetrics
func (s *RestServer) getPbpbchbminthbmxoffMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmxoffMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addPbpbcintcreditunderflowMetricsAPIRoutes adds routes for PbpbcintcreditunderflowMetrics
func addPbpbcintcreditunderflowMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getPbpbcintcreditunderflowMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listPbpbcintcreditunderflowMetricsHandler))
}

// listPbpbcintcreditunderflowMetricsHandler is the List Handler for PbpbcintcreditunderflowMetrics
func (s *RestServer) listPbpbcintcreditunderflowMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintcreditunderflowMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcintcreditunderflowMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("PbpbcintcreditunderflowMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintcreditunderflowMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintcreditunderflowMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintcreditunderflowMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewPbpbcintcreditunderflowMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("PbpbcintcreditunderflowMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintcreditunderflowMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getPbpbcintcreditunderflowMetricsHandler is the Get Handler for PbpbcintcreditunderflowMetrics
func (s *RestServer) getPbpbcintcreditunderflowMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintcreditunderflowMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addPbpbcintpbusviolationMetricsAPIRoutes adds routes for PbpbcintpbusviolationMetrics
func addPbpbcintpbusviolationMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getPbpbcintpbusviolationMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listPbpbcintpbusviolationMetricsHandler))
}

// listPbpbcintpbusviolationMetricsHandler is the List Handler for PbpbcintpbusviolationMetrics
func (s *RestServer) listPbpbcintpbusviolationMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintpbusviolationMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcintpbusviolationMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("PbpbcintpbusviolationMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintpbusviolationMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintpbusviolationMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintpbusviolationMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewPbpbcintpbusviolationMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("PbpbcintpbusviolationMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintpbusviolationMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getPbpbcintpbusviolationMetricsHandler is the Get Handler for PbpbcintpbusviolationMetrics
func (s *RestServer) getPbpbcintpbusviolationMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintpbusviolationMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addPbpbcintrplMetricsAPIRoutes adds routes for PbpbcintrplMetrics
func addPbpbcintrplMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getPbpbcintrplMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listPbpbcintrplMetricsHandler))
}

// listPbpbcintrplMetricsHandler is the List Handler for PbpbcintrplMetrics
func (s *RestServer) listPbpbcintrplMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintrplMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcintrplMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("PbpbcintrplMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintrplMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintrplMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintrplMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewPbpbcintrplMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("PbpbcintrplMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintrplMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getPbpbcintrplMetricsHandler is the Get Handler for PbpbcintrplMetrics
func (s *RestServer) getPbpbcintrplMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintrplMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addPbpbcintwriteMetricsAPIRoutes adds routes for PbpbcintwriteMetrics
func addPbpbcintwriteMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getPbpbcintwriteMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listPbpbcintwriteMetricsHandler))
}

// listPbpbcintwriteMetricsHandler is the List Handler for PbpbcintwriteMetrics
func (s *RestServer) listPbpbcintwriteMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwriteMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.PbpbcintwriteMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("PbpbcintwriteMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintwriteMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getPbpbcintwriteMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getPbpbcintwriteMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewPbpbcintwriteMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("PbpbcintwriteMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for PbpbcintwriteMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getPbpbcintwriteMetricsHandler is the Get Handler for PbpbcintwriteMetrics
func (s *RestServer) getPbpbcintwriteMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintwriteMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addSgempuinterrMetricsAPIRoutes adds routes for SgempuinterrMetrics
func addSgempuinterrMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getSgempuinterrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listSgempuinterrMetricsHandler))
}

// listSgempuinterrMetricsHandler is the List Handler for SgempuinterrMetrics
func (s *RestServer) listSgempuinterrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSgempuinterrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SgempuinterrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("SgempuinterrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SgempuinterrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSgempuinterrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSgempuinterrMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewSgempuinterrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("SgempuinterrMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SgempuinterrMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getSgempuinterrMetricsHandler is the Get Handler for SgempuinterrMetrics
func (s *RestServer) getSgempuinterrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SgempuinterrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addSgempuintinfoMetricsAPIRoutes adds routes for SgempuintinfoMetrics
func addSgempuintinfoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getSgempuintinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listSgempuintinfoMetricsHandler))
}

// listSgempuintinfoMetricsHandler is the List Handler for SgempuintinfoMetrics
func (s *RestServer) listSgempuintinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSgempuintinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SgempuintinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("SgempuintinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SgempuintinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSgempuintinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSgempuintinfoMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewSgempuintinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("SgempuintinfoMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SgempuintinfoMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getSgempuintinfoMetricsHandler is the Get Handler for SgempuintinfoMetrics
func (s *RestServer) getSgempuintinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SgempuintinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addSgeteinterrMetricsAPIRoutes adds routes for SgeteinterrMetrics
func addSgeteinterrMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getSgeteinterrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listSgeteinterrMetricsHandler))
}

// listSgeteinterrMetricsHandler is the List Handler for SgeteinterrMetrics
func (s *RestServer) listSgeteinterrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSgeteinterrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SgeteinterrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("SgeteinterrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SgeteinterrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSgeteinterrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSgeteinterrMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewSgeteinterrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("SgeteinterrMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SgeteinterrMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getSgeteinterrMetricsHandler is the Get Handler for SgeteinterrMetrics
func (s *RestServer) getSgeteinterrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SgeteinterrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addSgeteintinfoMetricsAPIRoutes adds routes for SgeteintinfoMetrics
func addSgeteintinfoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getSgeteintinfoMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listSgeteintinfoMetricsHandler))
}

// listSgeteintinfoMetricsHandler is the List Handler for SgeteintinfoMetrics
func (s *RestServer) listSgeteintinfoMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSgeteintinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SgeteintinfoMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("SgeteintinfoMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SgeteintinfoMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSgeteintinfoMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSgeteintinfoMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewSgeteintinfoMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("SgeteintinfoMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SgeteintinfoMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getSgeteintinfoMetricsHandler is the Get Handler for SgeteintinfoMetrics
func (s *RestServer) getSgeteintinfoMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SgeteintinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addSsepicsintbadaddrMetricsAPIRoutes adds routes for SsepicsintbadaddrMetrics
func addSsepicsintbadaddrMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getSsepicsintbadaddrMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listSsepicsintbadaddrMetricsHandler))
}

// listSsepicsintbadaddrMetricsHandler is the List Handler for SsepicsintbadaddrMetrics
func (s *RestServer) listSsepicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintbadaddrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicsintbadaddrMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("SsepicsintbadaddrMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintbadaddrMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicsintbadaddrMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicsintbadaddrMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewSsepicsintbadaddrMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("SsepicsintbadaddrMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintbadaddrMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getSsepicsintbadaddrMetricsHandler is the Get Handler for SsepicsintbadaddrMetrics
func (s *RestServer) getSsepicsintbadaddrMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintbadaddrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addSsepicsintbgMetricsAPIRoutes adds routes for SsepicsintbgMetrics
func addSsepicsintbgMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getSsepicsintbgMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listSsepicsintbgMetricsHandler))
}

// listSsepicsintbgMetricsHandler is the List Handler for SsepicsintbgMetrics
func (s *RestServer) listSsepicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintbgMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicsintbgMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("SsepicsintbgMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintbgMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicsintbgMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicsintbgMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewSsepicsintbgMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("SsepicsintbgMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintbgMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getSsepicsintbgMetricsHandler is the Get Handler for SsepicsintbgMetrics
func (s *RestServer) getSsepicsintbgMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintbgMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

// addSsepicsintpicsMetricsAPIRoutes adds routes for SsepicsintpicsMetrics
func addSsepicsintpicsMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.getSsepicsintpicsMetricsHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listSsepicsintpicsMetricsHandler))
}

// listSsepicsintpicsMetricsHandler is the List Handler for SsepicsintpicsMetrics
func (s *RestServer) listSsepicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintpicsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	var mtr []goproto.SsepicsintpicsMetrics

	for iter.HasNext() {
		temp := iter.Next()
		if temp == nil {
			continue
		}

		objMeta := s.keyTranslator.GetObjectMeta("SsepicsintpicsMetricsKey", temp.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintpicsMetrics key %+v", temp.GetKey())
			continue
		}

		temp.ObjectMeta = *objMeta
		mtr = append(mtr, *temp)
	}
	iter.Free()
	return mtr, nil
}

// getSsepicsintpicsMetricsPoints returns tags and fields to save in Venice TSDB
func (s *RestServer) getSsepicsintpicsMetricsPoints() ([]*tsdb.Point, error) {
	iter, err := goproto.NewSsepicsintpicsMetricsIterator()
	if err != nil {
		return nil, fmt.Errorf("failed to get metrics, error: %s", err)
	}

	// for OSX tests
	if iter == nil {
		return nil, nil
	}

	points := []*tsdb.Point{}

	for iter.HasNext() {
		m := iter.Next()
		if m == nil {
			continue
		}

		// translate key to meta
		objMeta := s.keyTranslator.GetObjectMeta("SsepicsintpicsMetricsKey", m.GetKey())
		if objMeta == nil {
			log.Errorf("failed to get objMeta for SsepicsintpicsMetrics key %+v", m.GetKey())
			continue
		}
		tags := s.getTagsFromMeta(objMeta)
		fields := structs.Map(m)

		if len(fields) > 0 {
			delete(fields, "ObjectMeta")
			points = append(points, &tsdb.Point{Tags: tags, Fields: fields})
		}
	}

	iter.Free()
	return points, nil
}

// getSsepicsintpicsMetricsHandler is the Get Handler for SsepicsintpicsMetrics
func (s *RestServer) getSsepicsintpicsMetricsHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintpicsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}
