// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package restapi is a auto generated package.
 * Input file: asicerrord.proto
 */

package restapi

import (
	"net/http"

	"github.com/gorilla/mux"

	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
	_ "github.com/pensando/sw/nic/utils/ntranslate/asicerrord"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/ntranslate"
)

func init() {
	name := "/telemetry/v1/metrics/dbwaintdbmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDbwaintdbMetricsAPIRoutes
}

// addDbwaintdbMetricsAPIRoutes adds routes for DbwaintdbMetrics
func addDbwaintdbMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDbwaintdbMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDbwaintdbMetricsListHandler))
}

// runDbwaintdbMetricsListHandler is the List Handler for DbwaintdbMetrics
func (s *RestServer) runDbwaintdbMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDbwaintdbMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.DbwaintdbMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("DbwaintdbMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New DbwaintdbMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDbwaintdbMetricsGetHandler is the Get Handler for DbwaintdbMetrics
func (s *RestServer) runDbwaintdbMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DbwaintdbMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dbwaintlifqstatemapmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDbwaintlifqstatemapMetricsAPIRoutes
}

// addDbwaintlifqstatemapMetricsAPIRoutes adds routes for DbwaintlifqstatemapMetrics
func addDbwaintlifqstatemapMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDbwaintlifqstatemapMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDbwaintlifqstatemapMetricsListHandler))
}

// runDbwaintlifqstatemapMetricsListHandler is the List Handler for DbwaintlifqstatemapMetrics
func (s *RestServer) runDbwaintlifqstatemapMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDbwaintlifqstatemapMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.DbwaintlifqstatemapMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("DbwaintlifqstatemapMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New DbwaintlifqstatemapMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDbwaintlifqstatemapMetricsGetHandler is the Get Handler for DbwaintlifqstatemapMetrics
func (s *RestServer) runDbwaintlifqstatemapMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DbwaintlifqstatemapMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dppintcreditmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDppintcreditMetricsAPIRoutes
}

// addDppintcreditMetricsAPIRoutes adds routes for DppintcreditMetrics
func addDppintcreditMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDppintcreditMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDppintcreditMetricsListHandler))
}

// runDppintcreditMetricsListHandler is the List Handler for DppintcreditMetrics
func (s *RestServer) runDppintcreditMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintcreditMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.DppintcreditMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("DppintcreditMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New DppintcreditMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDppintcreditMetricsGetHandler is the Get Handler for DppintcreditMetrics
func (s *RestServer) runDppintcreditMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DppintcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dppintfifometrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDppintfifoMetricsAPIRoutes
}

// addDppintfifoMetricsAPIRoutes adds routes for DppintfifoMetrics
func addDppintfifoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDppintfifoMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDppintfifoMetricsListHandler))
}

// runDppintfifoMetricsListHandler is the List Handler for DppintfifoMetrics
func (s *RestServer) runDppintfifoMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintfifoMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.DppintfifoMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("DppintfifoMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New DppintfifoMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDppintfifoMetricsGetHandler is the Get Handler for DppintfifoMetrics
func (s *RestServer) runDppintfifoMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DppintfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dppintreg1metrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDppintreg1MetricsAPIRoutes
}

// addDppintreg1MetricsAPIRoutes adds routes for Dppintreg1Metrics
func addDppintreg1MetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDppintreg1MetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDppintreg1MetricsListHandler))
}

// runDppintreg1MetricsListHandler is the List Handler for Dppintreg1Metrics
func (s *RestServer) runDppintreg1MetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintreg1MetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.Dppintreg1Metrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("Dppintreg1MetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New Dppintreg1Metrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDppintreg1MetricsGetHandler is the Get Handler for Dppintreg1Metrics
func (s *RestServer) runDppintreg1MetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppintreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dppintreg2metrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDppintreg2MetricsAPIRoutes
}

// addDppintreg2MetricsAPIRoutes adds routes for Dppintreg2Metrics
func addDppintreg2MetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDppintreg2MetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDppintreg2MetricsListHandler))
}

// runDppintreg2MetricsListHandler is the List Handler for Dppintreg2Metrics
func (s *RestServer) runDppintreg2MetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintreg2MetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.Dppintreg2Metrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("Dppintreg2MetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New Dppintreg2Metrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDppintreg2MetricsGetHandler is the Get Handler for Dppintreg2Metrics
func (s *RestServer) runDppintreg2MetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dppintreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dppintsramseccmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDppintsramseccMetricsAPIRoutes
}

// addDppintsramseccMetricsAPIRoutes adds routes for DppintsramseccMetrics
func addDppintsramseccMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDppintsramseccMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDppintsramseccMetricsListHandler))
}

// runDppintsramseccMetricsListHandler is the List Handler for DppintsramseccMetrics
func (s *RestServer) runDppintsramseccMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDppintsramseccMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.DppintsramseccMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("DppintsramseccMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New DppintsramseccMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDppintsramseccMetricsGetHandler is the Get Handler for DppintsramseccMetrics
func (s *RestServer) runDppintsramseccMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DppintsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dprintcreditmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDprintcreditMetricsAPIRoutes
}

// addDprintcreditMetricsAPIRoutes adds routes for DprintcreditMetrics
func addDprintcreditMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDprintcreditMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDprintcreditMetricsListHandler))
}

// runDprintcreditMetricsListHandler is the List Handler for DprintcreditMetrics
func (s *RestServer) runDprintcreditMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintcreditMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.DprintcreditMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("DprintcreditMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New DprintcreditMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDprintcreditMetricsGetHandler is the Get Handler for DprintcreditMetrics
func (s *RestServer) runDprintcreditMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DprintcreditMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dprintfifometrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDprintfifoMetricsAPIRoutes
}

// addDprintfifoMetricsAPIRoutes adds routes for DprintfifoMetrics
func addDprintfifoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDprintfifoMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDprintfifoMetricsListHandler))
}

// runDprintfifoMetricsListHandler is the List Handler for DprintfifoMetrics
func (s *RestServer) runDprintfifoMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintfifoMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.DprintfifoMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("DprintfifoMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New DprintfifoMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDprintfifoMetricsGetHandler is the Get Handler for DprintfifoMetrics
func (s *RestServer) runDprintfifoMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DprintfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dprintflopfifometrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDprintflopfifoMetricsAPIRoutes
}

// addDprintflopfifoMetricsAPIRoutes adds routes for DprintflopfifoMetrics
func addDprintflopfifoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDprintflopfifoMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDprintflopfifoMetricsListHandler))
}

// runDprintflopfifoMetricsListHandler is the List Handler for DprintflopfifoMetrics
func (s *RestServer) runDprintflopfifoMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintflopfifoMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.DprintflopfifoMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("DprintflopfifoMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New DprintflopfifoMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDprintflopfifoMetricsGetHandler is the Get Handler for DprintflopfifoMetrics
func (s *RestServer) runDprintflopfifoMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DprintflopfifoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dprintreg1metrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDprintreg1MetricsAPIRoutes
}

// addDprintreg1MetricsAPIRoutes adds routes for Dprintreg1Metrics
func addDprintreg1MetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDprintreg1MetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDprintreg1MetricsListHandler))
}

// runDprintreg1MetricsListHandler is the List Handler for Dprintreg1Metrics
func (s *RestServer) runDprintreg1MetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintreg1MetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.Dprintreg1Metrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("Dprintreg1MetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New Dprintreg1Metrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDprintreg1MetricsGetHandler is the Get Handler for Dprintreg1Metrics
func (s *RestServer) runDprintreg1MetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprintreg1Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dprintreg2metrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDprintreg2MetricsAPIRoutes
}

// addDprintreg2MetricsAPIRoutes adds routes for Dprintreg2Metrics
func addDprintreg2MetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDprintreg2MetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDprintreg2MetricsListHandler))
}

// runDprintreg2MetricsListHandler is the List Handler for Dprintreg2Metrics
func (s *RestServer) runDprintreg2MetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintreg2MetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.Dprintreg2Metrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("Dprintreg2MetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New Dprintreg2Metrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDprintreg2MetricsGetHandler is the Get Handler for Dprintreg2Metrics
func (s *RestServer) runDprintreg2MetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request Dprintreg2Metrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/dprintsramseccmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addDprintsramseccMetricsAPIRoutes
}

// addDprintsramseccMetricsAPIRoutes adds routes for DprintsramseccMetrics
func addDprintsramseccMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runDprintsramseccMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runDprintsramseccMetricsListHandler))
}

// runDprintsramseccMetricsListHandler is the List Handler for DprintsramseccMetrics
func (s *RestServer) runDprintsramseccMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewDprintsramseccMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.DprintsramseccMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("DprintsramseccMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New DprintsramseccMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runDprintsramseccMetricsGetHandler is the Get Handler for DprintsramseccMetrics
func (s *RestServer) runDprintsramseccMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request DprintsramseccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/inteccdescmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addInteccdescMetricsAPIRoutes
}

// addInteccdescMetricsAPIRoutes adds routes for InteccdescMetrics
func addInteccdescMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runInteccdescMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runInteccdescMetricsListHandler))
}

// runInteccdescMetricsListHandler is the List Handler for InteccdescMetrics
func (s *RestServer) runInteccdescMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewInteccdescMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.InteccdescMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("InteccdescMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New InteccdescMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runInteccdescMetricsGetHandler is the Get Handler for InteccdescMetrics
func (s *RestServer) runInteccdescMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request InteccdescMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/intsparemetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addIntspareMetricsAPIRoutes
}

// addIntspareMetricsAPIRoutes adds routes for IntspareMetrics
func addIntspareMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runIntspareMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runIntspareMetricsListHandler))
}

// runIntspareMetricsListHandler is the List Handler for IntspareMetrics
func (s *RestServer) runIntspareMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewIntspareMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.IntspareMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("IntspareMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New IntspareMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runIntspareMetricsGetHandler is the Get Handler for IntspareMetrics
func (s *RestServer) runIntspareMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request IntspareMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/mcmchintmcmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addMcmchintmcMetricsAPIRoutes
}

// addMcmchintmcMetricsAPIRoutes adds routes for McmchintmcMetrics
func addMcmchintmcMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runMcmchintmcMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runMcmchintmcMetricsListHandler))
}

// runMcmchintmcMetricsListHandler is the List Handler for McmchintmcMetrics
func (s *RestServer) runMcmchintmcMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMcmchintmcMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.McmchintmcMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("McmchintmcMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New McmchintmcMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runMcmchintmcMetricsGetHandler is the Get Handler for McmchintmcMetrics
func (s *RestServer) runMcmchintmcMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request McmchintmcMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/mdhensintaxierrmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addMdhensintaxierrMetricsAPIRoutes
}

// addMdhensintaxierrMetricsAPIRoutes adds routes for MdhensintaxierrMetrics
func addMdhensintaxierrMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runMdhensintaxierrMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runMdhensintaxierrMetricsListHandler))
}

// runMdhensintaxierrMetricsListHandler is the List Handler for MdhensintaxierrMetrics
func (s *RestServer) runMdhensintaxierrMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintaxierrMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.MdhensintaxierrMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("MdhensintaxierrMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New MdhensintaxierrMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runMdhensintaxierrMetricsGetHandler is the Get Handler for MdhensintaxierrMetrics
func (s *RestServer) runMdhensintaxierrMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintaxierrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/mdhensinteccmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addMdhensinteccMetricsAPIRoutes
}

// addMdhensinteccMetricsAPIRoutes adds routes for MdhensinteccMetrics
func addMdhensinteccMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runMdhensinteccMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runMdhensinteccMetricsListHandler))
}

// runMdhensinteccMetricsListHandler is the List Handler for MdhensinteccMetrics
func (s *RestServer) runMdhensinteccMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensinteccMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.MdhensinteccMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("MdhensinteccMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New MdhensinteccMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runMdhensinteccMetricsGetHandler is the Get Handler for MdhensinteccMetrics
func (s *RestServer) runMdhensinteccMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensinteccMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/mdhensintipcoremetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addMdhensintipcoreMetricsAPIRoutes
}

// addMdhensintipcoreMetricsAPIRoutes adds routes for MdhensintipcoreMetrics
func addMdhensintipcoreMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runMdhensintipcoreMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runMdhensintipcoreMetricsListHandler))
}

// runMdhensintipcoreMetricsListHandler is the List Handler for MdhensintipcoreMetrics
func (s *RestServer) runMdhensintipcoreMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMdhensintipcoreMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.MdhensintipcoreMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("MdhensintipcoreMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New MdhensintipcoreMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runMdhensintipcoreMetricsGetHandler is the Get Handler for MdhensintipcoreMetrics
func (s *RestServer) runMdhensintipcoreMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MdhensintipcoreMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/mpmpnsintcryptometrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addMpmpnsintcryptoMetricsAPIRoutes
}

// addMpmpnsintcryptoMetricsAPIRoutes adds routes for MpmpnsintcryptoMetrics
func addMpmpnsintcryptoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runMpmpnsintcryptoMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runMpmpnsintcryptoMetricsListHandler))
}

// runMpmpnsintcryptoMetricsListHandler is the List Handler for MpmpnsintcryptoMetrics
func (s *RestServer) runMpmpnsintcryptoMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewMpmpnsintcryptoMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.MpmpnsintcryptoMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("MpmpnsintcryptoMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New MpmpnsintcryptoMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runMpmpnsintcryptoMetricsGetHandler is the Get Handler for MpmpnsintcryptoMetrics
func (s *RestServer) runMpmpnsintcryptoMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request MpmpnsintcryptoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/pbpbchbmintecchbmrbmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addPbpbchbmintecchbmrbMetricsAPIRoutes
}

// addPbpbchbmintecchbmrbMetricsAPIRoutes adds routes for PbpbchbmintecchbmrbMetrics
func addPbpbchbmintecchbmrbMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runPbpbchbmintecchbmrbMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runPbpbchbmintecchbmrbMetricsListHandler))
}

// runPbpbchbmintecchbmrbMetricsListHandler is the List Handler for PbpbchbmintecchbmrbMetrics
func (s *RestServer) runPbpbchbmintecchbmrbMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbmintecchbmrbMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.PbpbchbmintecchbmrbMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("PbpbchbmintecchbmrbMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New PbpbchbmintecchbmrbMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runPbpbchbmintecchbmrbMetricsGetHandler is the Get Handler for PbpbchbmintecchbmrbMetrics
func (s *RestServer) runPbpbchbmintecchbmrbMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbmintecchbmrbMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/pbpbchbminthbmaxierrrspmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addPbpbchbminthbmaxierrrspMetricsAPIRoutes
}

// addPbpbchbminthbmaxierrrspMetricsAPIRoutes adds routes for PbpbchbminthbmaxierrrspMetrics
func addPbpbchbminthbmaxierrrspMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runPbpbchbminthbmaxierrrspMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runPbpbchbminthbmaxierrrspMetricsListHandler))
}

// runPbpbchbminthbmaxierrrspMetricsListHandler is the List Handler for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) runPbpbchbminthbmaxierrrspMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmaxierrrspMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.PbpbchbminthbmaxierrrspMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("PbpbchbminthbmaxierrrspMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New PbpbchbminthbmaxierrrspMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runPbpbchbminthbmaxierrrspMetricsGetHandler is the Get Handler for PbpbchbminthbmaxierrrspMetrics
func (s *RestServer) runPbpbchbminthbmaxierrrspMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmaxierrrspMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/pbpbchbminthbmdropmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addPbpbchbminthbmdropMetricsAPIRoutes
}

// addPbpbchbminthbmdropMetricsAPIRoutes adds routes for PbpbchbminthbmdropMetrics
func addPbpbchbminthbmdropMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runPbpbchbminthbmdropMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runPbpbchbminthbmdropMetricsListHandler))
}

// runPbpbchbminthbmdropMetricsListHandler is the List Handler for PbpbchbminthbmdropMetrics
func (s *RestServer) runPbpbchbminthbmdropMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmdropMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.PbpbchbminthbmdropMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("PbpbchbminthbmdropMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New PbpbchbminthbmdropMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runPbpbchbminthbmdropMetricsGetHandler is the Get Handler for PbpbchbminthbmdropMetrics
func (s *RestServer) runPbpbchbminthbmdropMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmdropMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/pbpbchbminthbmpbusviolationmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addPbpbchbminthbmpbusviolationMetricsAPIRoutes
}

// addPbpbchbminthbmpbusviolationMetricsAPIRoutes adds routes for PbpbchbminthbmpbusviolationMetrics
func addPbpbchbminthbmpbusviolationMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runPbpbchbminthbmpbusviolationMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runPbpbchbminthbmpbusviolationMetricsListHandler))
}

// runPbpbchbminthbmpbusviolationMetricsListHandler is the List Handler for PbpbchbminthbmpbusviolationMetrics
func (s *RestServer) runPbpbchbminthbmpbusviolationMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmpbusviolationMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.PbpbchbminthbmpbusviolationMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("PbpbchbminthbmpbusviolationMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New PbpbchbminthbmpbusviolationMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runPbpbchbminthbmpbusviolationMetricsGetHandler is the Get Handler for PbpbchbminthbmpbusviolationMetrics
func (s *RestServer) runPbpbchbminthbmpbusviolationMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmpbusviolationMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/pbpbchbminthbmxoffmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addPbpbchbminthbmxoffMetricsAPIRoutes
}

// addPbpbchbminthbmxoffMetricsAPIRoutes adds routes for PbpbchbminthbmxoffMetrics
func addPbpbchbminthbmxoffMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runPbpbchbminthbmxoffMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runPbpbchbminthbmxoffMetricsListHandler))
}

// runPbpbchbminthbmxoffMetricsListHandler is the List Handler for PbpbchbminthbmxoffMetrics
func (s *RestServer) runPbpbchbminthbmxoffMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbchbminthbmxoffMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.PbpbchbminthbmxoffMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("PbpbchbminthbmxoffMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New PbpbchbminthbmxoffMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runPbpbchbminthbmxoffMetricsGetHandler is the Get Handler for PbpbchbminthbmxoffMetrics
func (s *RestServer) runPbpbchbminthbmxoffMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbchbminthbmxoffMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/pbpbcintcreditunderflowmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addPbpbcintcreditunderflowMetricsAPIRoutes
}

// addPbpbcintcreditunderflowMetricsAPIRoutes adds routes for PbpbcintcreditunderflowMetrics
func addPbpbcintcreditunderflowMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runPbpbcintcreditunderflowMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runPbpbcintcreditunderflowMetricsListHandler))
}

// runPbpbcintcreditunderflowMetricsListHandler is the List Handler for PbpbcintcreditunderflowMetrics
func (s *RestServer) runPbpbcintcreditunderflowMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintcreditunderflowMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.PbpbcintcreditunderflowMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("PbpbcintcreditunderflowMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New PbpbcintcreditunderflowMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runPbpbcintcreditunderflowMetricsGetHandler is the Get Handler for PbpbcintcreditunderflowMetrics
func (s *RestServer) runPbpbcintcreditunderflowMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintcreditunderflowMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/pbpbcintpbusviolationmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addPbpbcintpbusviolationMetricsAPIRoutes
}

// addPbpbcintpbusviolationMetricsAPIRoutes adds routes for PbpbcintpbusviolationMetrics
func addPbpbcintpbusviolationMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runPbpbcintpbusviolationMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runPbpbcintpbusviolationMetricsListHandler))
}

// runPbpbcintpbusviolationMetricsListHandler is the List Handler for PbpbcintpbusviolationMetrics
func (s *RestServer) runPbpbcintpbusviolationMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintpbusviolationMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.PbpbcintpbusviolationMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("PbpbcintpbusviolationMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New PbpbcintpbusviolationMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runPbpbcintpbusviolationMetricsGetHandler is the Get Handler for PbpbcintpbusviolationMetrics
func (s *RestServer) runPbpbcintpbusviolationMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintpbusviolationMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/pbpbcintrplmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addPbpbcintrplMetricsAPIRoutes
}

// addPbpbcintrplMetricsAPIRoutes adds routes for PbpbcintrplMetrics
func addPbpbcintrplMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runPbpbcintrplMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runPbpbcintrplMetricsListHandler))
}

// runPbpbcintrplMetricsListHandler is the List Handler for PbpbcintrplMetrics
func (s *RestServer) runPbpbcintrplMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintrplMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.PbpbcintrplMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("PbpbcintrplMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New PbpbcintrplMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runPbpbcintrplMetricsGetHandler is the Get Handler for PbpbcintrplMetrics
func (s *RestServer) runPbpbcintrplMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintrplMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/pbpbcintwritemetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addPbpbcintwriteMetricsAPIRoutes
}

// addPbpbcintwriteMetricsAPIRoutes adds routes for PbpbcintwriteMetrics
func addPbpbcintwriteMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runPbpbcintwriteMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runPbpbcintwriteMetricsListHandler))
}

// runPbpbcintwriteMetricsListHandler is the List Handler for PbpbcintwriteMetrics
func (s *RestServer) runPbpbcintwriteMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewPbpbcintwriteMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.PbpbcintwriteMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("PbpbcintwriteMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New PbpbcintwriteMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runPbpbcintwriteMetricsGetHandler is the Get Handler for PbpbcintwriteMetrics
func (s *RestServer) runPbpbcintwriteMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request PbpbcintwriteMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/sgempuinterrmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addSgempuinterrMetricsAPIRoutes
}

// addSgempuinterrMetricsAPIRoutes adds routes for SgempuinterrMetrics
func addSgempuinterrMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runSgempuinterrMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runSgempuinterrMetricsListHandler))
}

// runSgempuinterrMetricsListHandler is the List Handler for SgempuinterrMetrics
func (s *RestServer) runSgempuinterrMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSgempuinterrMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.SgempuinterrMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("SgempuinterrMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New SgempuinterrMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runSgempuinterrMetricsGetHandler is the Get Handler for SgempuinterrMetrics
func (s *RestServer) runSgempuinterrMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SgempuinterrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/sgempuintinfometrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addSgempuintinfoMetricsAPIRoutes
}

// addSgempuintinfoMetricsAPIRoutes adds routes for SgempuintinfoMetrics
func addSgempuintinfoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runSgempuintinfoMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runSgempuintinfoMetricsListHandler))
}

// runSgempuintinfoMetricsListHandler is the List Handler for SgempuintinfoMetrics
func (s *RestServer) runSgempuintinfoMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSgempuintinfoMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.SgempuintinfoMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("SgempuintinfoMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New SgempuintinfoMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runSgempuintinfoMetricsGetHandler is the Get Handler for SgempuintinfoMetrics
func (s *RestServer) runSgempuintinfoMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SgempuintinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/sgeteinterrmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addSgeteinterrMetricsAPIRoutes
}

// addSgeteinterrMetricsAPIRoutes adds routes for SgeteinterrMetrics
func addSgeteinterrMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runSgeteinterrMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runSgeteinterrMetricsListHandler))
}

// runSgeteinterrMetricsListHandler is the List Handler for SgeteinterrMetrics
func (s *RestServer) runSgeteinterrMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSgeteinterrMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.SgeteinterrMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("SgeteinterrMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New SgeteinterrMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runSgeteinterrMetricsGetHandler is the Get Handler for SgeteinterrMetrics
func (s *RestServer) runSgeteinterrMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SgeteinterrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/sgeteintinfometrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addSgeteintinfoMetricsAPIRoutes
}

// addSgeteintinfoMetricsAPIRoutes adds routes for SgeteintinfoMetrics
func addSgeteintinfoMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runSgeteintinfoMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runSgeteintinfoMetricsListHandler))
}

// runSgeteintinfoMetricsListHandler is the List Handler for SgeteintinfoMetrics
func (s *RestServer) runSgeteintinfoMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSgeteintinfoMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.SgeteintinfoMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("SgeteintinfoMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New SgeteintinfoMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runSgeteintinfoMetricsGetHandler is the Get Handler for SgeteintinfoMetrics
func (s *RestServer) runSgeteintinfoMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SgeteintinfoMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/ssepicsintbadaddrmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addSsepicsintbadaddrMetricsAPIRoutes
}

// addSsepicsintbadaddrMetricsAPIRoutes adds routes for SsepicsintbadaddrMetrics
func addSsepicsintbadaddrMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runSsepicsintbadaddrMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runSsepicsintbadaddrMetricsListHandler))
}

// runSsepicsintbadaddrMetricsListHandler is the List Handler for SsepicsintbadaddrMetrics
func (s *RestServer) runSsepicsintbadaddrMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintbadaddrMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.SsepicsintbadaddrMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("SsepicsintbadaddrMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New SsepicsintbadaddrMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runSsepicsintbadaddrMetricsGetHandler is the Get Handler for SsepicsintbadaddrMetrics
func (s *RestServer) runSsepicsintbadaddrMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintbadaddrMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/ssepicsintbgmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addSsepicsintbgMetricsAPIRoutes
}

// addSsepicsintbgMetricsAPIRoutes adds routes for SsepicsintbgMetrics
func addSsepicsintbgMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runSsepicsintbgMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runSsepicsintbgMetricsListHandler))
}

// runSsepicsintbgMetricsListHandler is the List Handler for SsepicsintbgMetrics
func (s *RestServer) runSsepicsintbgMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintbgMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.SsepicsintbgMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("SsepicsintbgMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New SsepicsintbgMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runSsepicsintbgMetricsGetHandler is the Get Handler for SsepicsintbgMetrics
func (s *RestServer) runSsepicsintbgMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintbgMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}

func init() {
	name := "/telemetry/v1/metrics/ssepicsintpicsmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addSsepicsintpicsMetricsAPIRoutes
}

// addSsepicsintpicsMetricsAPIRoutes adds routes for SsepicsintpicsMetrics
func addSsepicsintpicsMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runSsepicsintpicsMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runSsepicsintpicsMetricsListHandler))
}

// runSsepicsintpicsMetricsListHandler is the List Handler for SsepicsintpicsMetrics
func (s *RestServer) runSsepicsintpicsMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewSsepicsintpicsMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []goproto.SsepicsintpicsMetrics
	tstr := ntranslate.MustGetTranslator()
	for iter.HasNext() {
		temp := iter.Next()
		temp.ObjectMeta = *(tstr.GetObjectMeta("SsepicsintpicsMetricsKey", temp.GetKey()))
		mtr = append(mtr, *temp)
		log.Infof("New SsepicsintpicsMetrics: %+v", *temp)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runSsepicsintpicsMetricsGetHandler is the Get Handler for SsepicsintpicsMetrics
func (s *RestServer) runSsepicsintpicsMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request SsepicsintpicsMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}
