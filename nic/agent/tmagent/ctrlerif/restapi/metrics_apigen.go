// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.
/*
 * Package restapi is a auto generated package.
 * Input file: metrics.proto
 */

package restapi

import (
	"net/http"

	"github.com/gorilla/mux"

	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/nic/delphi/proto/goproto"
	_ "github.com/pensando/sw/nic/utils/ntranslate"
	"github.com/pensando/sw/venice/utils/log"
)

func init() {
	name := "/telemetry/v1/metrics/lifmetrics/"
	if prefixRoutes == nil {
		prefixRoutes = make(map[string]routeAddFunc)
	}
	prefixRoutes[name] = addLifMetricsAPIRoutes
}

// addLifMetricsAPIRoutes adds routes for LifMetrics
func addLifMetricsAPIRoutes(r *mux.Router, srv *RestServer) {
	r.Methods("GET").Subrouter().HandleFunc("/{Meta.Tenant}/{Meta.Name}/", httputils.MakeHTTPHandler(srv.runLifMetricsGetHandler))
	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.runLifMetricsListHandler))
}

// runLifMetricsListHandler is the List Handler for LifMetrics
func (s *RestServer) runLifMetricsListHandler(r *http.Request) (interface{}, error) {
	iter, err := goproto.NewLifMetricsIterator()
	if err != nil {
		log.Infof("Error: %s", err)
	}
	var mtr []*goproto.LifMetrics
	for iter.HasNext() {
		mtr = append(mtr, iter.Next())
		log.Infof("New LifMetrics: %+v", mtr)
	}
	log.Infof("Got GET LIST request")
	return mtr, nil
}

// runLifMetricsGetHandler is the Get Handler for LifMetrics
func (s *RestServer) runLifMetricsGetHandler(r *http.Request) (interface{}, error) {
	log.Infof("Got GET request LifMetrics/%s", mux.Vars(r)["Meta.Name"])
	return nil, nil
}
