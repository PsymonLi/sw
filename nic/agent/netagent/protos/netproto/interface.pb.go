// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interface.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InterfaceSpec_IFType int32

const (
	InterfaceSpec_NONE        InterfaceSpec_IFType = 0
	InterfaceSpec_ENIC        InterfaceSpec_IFType = 1
	InterfaceSpec_UPLINK_ETH  InterfaceSpec_IFType = 2
	InterfaceSpec_UPLINK_MGMT InterfaceSpec_IFType = 3
)

var InterfaceSpec_IFType_name = map[int32]string{
	0: "NONE",
	1: "ENIC",
	2: "UPLINK_ETH",
	3: "UPLINK_MGMT",
}
var InterfaceSpec_IFType_value = map[string]int32{
	"NONE":        0,
	"ENIC":        1,
	"UPLINK_ETH":  2,
	"UPLINK_MGMT": 3,
}

func (x InterfaceSpec_IFType) String() string {
	return proto.EnumName(InterfaceSpec_IFType_name, int32(x))
}
func (InterfaceSpec_IFType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{1, 0}
}

type InterfaceStatus_IFStatus int32

const (
	InterfaceStatus_NONE InterfaceStatus_IFStatus = 0
	InterfaceStatus_UP   InterfaceStatus_IFStatus = 1
	InterfaceStatus_DOWN InterfaceStatus_IFStatus = 2
)

var InterfaceStatus_IFStatus_name = map[int32]string{
	0: "NONE",
	1: "UP",
	2: "DOWN",
}
var InterfaceStatus_IFStatus_value = map[string]int32{
	"NONE": 0,
	"UP":   1,
	"DOWN": 2,
}

func (x InterfaceStatus_IFStatus) String() string {
	return proto.EnumName(InterfaceStatus_IFStatus_name, int32(x))
}
func (InterfaceStatus_IFStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{2, 0}
}

// Interface object
type Interface struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           InterfaceSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         InterfaceStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Interface) Reset()                    { *m = Interface{} }
func (m *Interface) String() string            { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()               {}
func (*Interface) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{0} }

func (m *Interface) GetSpec() InterfaceSpec {
	if m != nil {
		return m.Spec
	}
	return InterfaceSpec{}
}

func (m *Interface) GetStatus() InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return InterfaceStatus{}
}

// InterfaceSpec captures all the interface level configuration
type InterfaceSpec struct {
	Type        string `protobuf:"bytes,1,opt,name=Type,proto3" json:"type,omitempty"`
	AdminStatus string `protobuf:"bytes,2,opt,name=AdminStatus,proto3" json:"admin-status,omitempty"`
	// VrfName specifies the name of the VRF that the current Interface belongs to
	VrfName string `protobuf:"bytes,3,opt,name=VrfName,proto3" json:"vrf-name,omitemtpy"`
}

func (m *InterfaceSpec) Reset()                    { *m = InterfaceSpec{} }
func (m *InterfaceSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceSpec) ProtoMessage()               {}
func (*InterfaceSpec) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{1} }

func (m *InterfaceSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InterfaceSpec) GetAdminStatus() string {
	if m != nil {
		return m.AdminStatus
	}
	return ""
}

func (m *InterfaceSpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

// Interface Status
type InterfaceStatus struct {
	InterfaceID  uint64      `protobuf:"varint,1,opt,name=InterfaceID,proto3" json:"id,omitempty"`
	OperStatus   string      `protobuf:"bytes,2,opt,name=OperStatus,proto3" json:"oper-status,omitempty"`
	EnicStatus   *EnicStatus `protobuf:"bytes,3,opt,name=EnicStatus" json:"enic-status,omitempty"`
	UplinkPortID uint32      `protobuf:"varint,4,opt,name=UplinkPortID,proto3" json:"uplink-port-id,omitempty"`
}

func (m *InterfaceStatus) Reset()                    { *m = InterfaceStatus{} }
func (m *InterfaceStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStatus) ProtoMessage()               {}
func (*InterfaceStatus) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{2} }

func (m *InterfaceStatus) GetInterfaceID() uint64 {
	if m != nil {
		return m.InterfaceID
	}
	return 0
}

func (m *InterfaceStatus) GetOperStatus() string {
	if m != nil {
		return m.OperStatus
	}
	return ""
}

func (m *InterfaceStatus) GetEnicStatus() *EnicStatus {
	if m != nil {
		return m.EnicStatus
	}
	return nil
}

func (m *InterfaceStatus) GetUplinkPortID() uint32 {
	if m != nil {
		return m.UplinkPortID
	}
	return 0
}

// EnicStatus captures enic configurations.
type EnicStatus struct {
	// List of endpoints that this ENIC is mapped to
	EpName []string `protobuf:"bytes,2,rep,name=EpName" json:"ep-name,omitempty"`
}

func (m *EnicStatus) Reset()                    { *m = EnicStatus{} }
func (m *EnicStatus) String() string            { return proto.CompactTextString(m) }
func (*EnicStatus) ProtoMessage()               {}
func (*EnicStatus) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{3} }

func (m *EnicStatus) GetEpName() []string {
	if m != nil {
		return m.EpName
	}
	return nil
}

type InterfaceList struct {
	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (m *InterfaceList) Reset()                    { *m = InterfaceList{} }
func (m *InterfaceList) String() string            { return proto.CompactTextString(m) }
func (*InterfaceList) ProtoMessage()               {}
func (*InterfaceList) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{4} }

func (m *InterfaceList) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// interaface watch event
type InterfaceEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Interface Interface     `protobuf:"bytes,2,opt,name=Interface" json:"interface,omitempty"`
}

func (m *InterfaceEvent) Reset()                    { *m = InterfaceEvent{} }
func (m *InterfaceEvent) String() string            { return proto.CompactTextString(m) }
func (*InterfaceEvent) ProtoMessage()               {}
func (*InterfaceEvent) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{5} }

func (m *InterfaceEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *InterfaceEvent) GetInterface() Interface {
	if m != nil {
		return m.Interface
	}
	return Interface{}
}

func init() {
	proto.RegisterType((*Interface)(nil), "netproto.Interface")
	proto.RegisterType((*InterfaceSpec)(nil), "netproto.InterfaceSpec")
	proto.RegisterType((*InterfaceStatus)(nil), "netproto.InterfaceStatus")
	proto.RegisterType((*EnicStatus)(nil), "netproto.EnicStatus")
	proto.RegisterType((*InterfaceList)(nil), "netproto.InterfaceList")
	proto.RegisterType((*InterfaceEvent)(nil), "netproto.InterfaceEvent")
	proto.RegisterEnum("netproto.InterfaceSpec_IFType", InterfaceSpec_IFType_name, InterfaceSpec_IFType_value)
	proto.RegisterEnum("netproto.InterfaceStatus_IFStatus", InterfaceStatus_IFStatus_name, InterfaceStatus_IFStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InterfaceApi service

type InterfaceApiClient interface {
	GetInterface(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Interface, error)
	ListInterfaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*InterfaceList, error)
	WatchInterfaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (InterfaceApi_WatchInterfacesClient, error)
}

type interfaceApiClient struct {
	cc *grpc.ClientConn
}

func NewInterfaceApiClient(cc *grpc.ClientConn) InterfaceApiClient {
	return &interfaceApiClient{cc}
}

func (c *interfaceApiClient) GetInterface(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := grpc.Invoke(ctx, "/netproto.InterfaceApi/GetInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceApiClient) ListInterfaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*InterfaceList, error) {
	out := new(InterfaceList)
	err := grpc.Invoke(ctx, "/netproto.InterfaceApi/ListInterfaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceApiClient) WatchInterfaces(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (InterfaceApi_WatchInterfacesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InterfaceApi_serviceDesc.Streams[0], c.cc, "/netproto.InterfaceApi/WatchInterfaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &interfaceApiWatchInterfacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterfaceApi_WatchInterfacesClient interface {
	Recv() (*InterfaceEvent, error)
	grpc.ClientStream
}

type interfaceApiWatchInterfacesClient struct {
	grpc.ClientStream
}

func (x *interfaceApiWatchInterfacesClient) Recv() (*InterfaceEvent, error) {
	m := new(InterfaceEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for InterfaceApi service

type InterfaceApiServer interface {
	GetInterface(context.Context, *api.ObjectMeta) (*Interface, error)
	ListInterfaces(context.Context, *api.ObjectMeta) (*InterfaceList, error)
	WatchInterfaces(*api.ObjectMeta, InterfaceApi_WatchInterfacesServer) error
}

func RegisterInterfaceApiServer(s *grpc.Server, srv InterfaceApiServer) {
	s.RegisterService(&_InterfaceApi_serviceDesc, srv)
}

func _InterfaceApi_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceApiServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.InterfaceApi/GetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceApiServer).GetInterface(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceApi_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceApiServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.InterfaceApi/ListInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceApiServer).ListInterfaces(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceApi_WatchInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterfaceApiServer).WatchInterfaces(m, &interfaceApiWatchInterfacesServer{stream})
}

type InterfaceApi_WatchInterfacesServer interface {
	Send(*InterfaceEvent) error
	grpc.ServerStream
}

type interfaceApiWatchInterfacesServer struct {
	grpc.ServerStream
}

func (x *interfaceApiWatchInterfacesServer) Send(m *InterfaceEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _InterfaceApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.InterfaceApi",
	HandlerType: (*InterfaceApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInterface",
			Handler:    _InterfaceApi_GetInterface_Handler,
		},
		{
			MethodName: "ListInterfaces",
			Handler:    _InterfaceApi_ListInterfaces_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchInterfaces",
			Handler:       _InterfaceApi_WatchInterfaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "interface.proto",
}

func (m *Interface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interface) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *InterfaceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.AdminStatus) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.AdminStatus)))
		i += copy(dAtA[i:], m.AdminStatus)
	}
	if len(m.VrfName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	return i, nil
}

func (m *InterfaceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InterfaceID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.InterfaceID))
	}
	if len(m.OperStatus) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.OperStatus)))
		i += copy(dAtA[i:], m.OperStatus)
	}
	if m.EnicStatus != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EnicStatus.Size()))
		n5, err := m.EnicStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.UplinkPortID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UplinkPortID))
	}
	return i, nil
}

func (m *EnicStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnicStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EpName) > 0 {
		for _, s := range m.EpName {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *InterfaceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, msg := range m.Interfaces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InterfaceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintInterface(dAtA, i, uint64(m.Interface.Size()))
	n6, err := m.Interface.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func encodeVarintInterface(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Interface) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovInterface(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovInterface(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovInterface(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovInterface(uint64(l))
	return n
}

func (m *InterfaceSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.AdminStatus)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceStatus) Size() (n int) {
	var l int
	_ = l
	if m.InterfaceID != 0 {
		n += 1 + sovInterface(uint64(m.InterfaceID))
	}
	l = len(m.OperStatus)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.EnicStatus != nil {
		l = m.EnicStatus.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.UplinkPortID != 0 {
		n += 1 + sovInterface(uint64(m.UplinkPortID))
	}
	return n
}

func (m *EnicStatus) Size() (n int) {
	var l int
	_ = l
	if len(m.EpName) > 0 {
		for _, s := range m.EpName {
			l = len(s)
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceList) Size() (n int) {
	var l int
	_ = l
	if len(m.Interfaces) > 0 {
		for _, e := range m.Interfaces {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovInterface(uint64(m.EventType))
	}
	l = m.Interface.Size()
	n += 1 + l + sovInterface(uint64(l))
	return n
}

func sovInterface(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInterface(x uint64) (n int) {
	return sovInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Interface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceID", wireType)
			}
			m.InterfaceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterfaceID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnicStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnicStatus == nil {
				m.EnicStatus = &EnicStatus{}
			}
			if err := m.EnicStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkPortID", wireType)
			}
			m.UplinkPortID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkPortID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnicStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnicStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnicStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpName = append(m.EpName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, &Interface{})
			if err := m.Interfaces[len(m.Interfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interface.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInterface
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInterface
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInterface(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInterface = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterface   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("interface.proto", fileDescriptorInterface) }

var fileDescriptorInterface = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x6e, 0xdb, 0x36,
	0x14, 0xc6, 0x2d, 0xd9, 0x70, 0xe3, 0xe3, 0xc4, 0xd6, 0x98, 0x36, 0xb3, 0xbd, 0x2e, 0xce, 0x04,
	0x6c, 0xc8, 0x80, 0x5a, 0x2a, 0x1c, 0x60, 0x37, 0x5b, 0xbb, 0x56, 0x8d, 0x93, 0x19, 0x69, 0xec,
	0x20, 0x7f, 0xd6, 0xbb, 0x0d, 0x8c, 0xcc, 0xb8, 0xdc, 0x6c, 0x8a, 0x90, 0xe8, 0x0c, 0xc1, 0xd0,
	0xab, 0x01, 0x7d, 0x86, 0x3d, 0xc2, 0x10, 0x0c, 0x18, 0xb0, 0xa7, 0xe8, 0x65, 0x9f, 0x40, 0x08,
	0xb2, 0x3b, 0x3f, 0xc5, 0x40, 0x5a, 0x96, 0xe9, 0xd8, 0x1b, 0x7a, 0x47, 0x1e, 0x7e, 0xe7, 0xa7,
	0x8f, 0x47, 0x87, 0x07, 0xca, 0x94, 0x09, 0x12, 0x5e, 0x60, 0x9f, 0x38, 0x3c, 0x0c, 0x44, 0x80,
	0x56, 0x18, 0x11, 0x6a, 0x55, 0x7b, 0xd8, 0x0f, 0x82, 0xfe, 0x80, 0xb8, 0x98, 0x53, 0x17, 0x33,
	0x16, 0x08, 0x2c, 0x68, 0xc0, 0xa2, 0x89, 0xae, 0xd6, 0xea, 0x53, 0xf1, 0x7a, 0x74, 0xee, 0xf8,
	0xc1, 0xd0, 0xe5, 0x84, 0x45, 0x98, 0xf5, 0x02, 0x37, 0xfa, 0xc5, 0xbd, 0x24, 0x8c, 0xfa, 0xc4,
	0x1d, 0x09, 0x3a, 0x88, 0x64, 0x6a, 0x9f, 0x30, 0x3d, 0xdb, 0xa5, 0xcc, 0x1f, 0x8c, 0x7a, 0x64,
	0x8a, 0x69, 0x68, 0x98, 0x7e, 0xd0, 0x0f, 0x5c, 0x15, 0x3e, 0x1f, 0x5d, 0xa8, 0x9d, 0xda, 0xa8,
	0x55, 0x22, 0xff, 0xfc, 0x3f, 0xbe, 0x2a, 0x3d, 0x0e, 0x89, 0xc0, 0x13, 0x99, 0x7d, 0x6d, 0x42,
	0xa1, 0x3d, 0xbd, 0x18, 0x7a, 0x0a, 0x2b, 0xa7, 0x57, 0x9c, 0x1c, 0x12, 0x81, 0x2b, 0xc6, 0x96,
	0xb1, 0x5d, 0x6c, 0xae, 0x39, 0x98, 0x53, 0x67, 0x1a, 0xf4, 0xd6, 0xdf, 0xc5, 0xf5, 0xcc, 0xfb,
	0xb8, 0x6e, 0x8c, 0xe3, 0xfa, 0xbd, 0x47, 0x94, 0x0d, 0x28, 0x23, 0xc7, 0x69, 0x0e, 0x3a, 0x00,
	0xe8, 0x9e, 0xff, 0x44, 0x7c, 0xa1, 0x08, 0xa6, 0x22, 0x94, 0x15, 0x61, 0x16, 0xf6, 0x6a, 0x1a,
	0xa3, 0x24, 0xad, 0x3c, 0x0a, 0x86, 0x54, 0x90, 0x21, 0x17, 0x57, 0xc7, 0x5a, 0x3a, 0x7a, 0x01,
	0xb9, 0x13, 0x4e, 0xfc, 0x4a, 0x56, 0x61, 0x3e, 0x76, 0xa6, 0xe5, 0x76, 0x52, 0xbf, 0xf2, 0xd8,
	0xdb, 0x90, 0x38, 0x89, 0x8a, 0x38, 0xf1, 0x35, 0x94, 0x4a, 0x46, 0x07, 0x90, 0x3f, 0x11, 0x58,
	0x8c, 0xa2, 0x4a, 0x4e, 0x61, 0xaa, 0xcb, 0x30, 0x4a, 0xe0, 0x55, 0x12, 0x90, 0x15, 0xa9, 0xbd,
	0x86, 0x4a, 0x10, 0xf6, 0x9f, 0x26, 0xac, 0xcd, 0x7d, 0x1c, 0xed, 0x43, 0x4e, 0x5e, 0x5e, 0x15,
	0xab, 0xe0, 0xed, 0x5c, 0xbf, 0xad, 0x7e, 0x7a, 0x22, 0xc2, 0x16, 0x1b, 0x0d, 0xb7, 0xe7, 0x84,
	0x4e, 0x7b, 0x4f, 0xea, 0xbe, 0x94, 0x3e, 0xc5, 0x15, 0x27, 0xba, 0x4f, 0x79, 0x80, 0x30, 0x14,
	0x9f, 0xf7, 0x86, 0x94, 0x25, 0x66, 0x4d, 0xc5, 0xfb, 0xf6, 0xfa, 0x6d, 0xf5, 0xb3, 0x45, 0x9e,
	0x92, 0x38, 0xed, 0xbd, 0xc9, 0x42, 0x32, 0x37, 0xb0, 0xcc, 0x6d, 0x2c, 0x18, 0xd7, 0x99, 0xe8,
	0x31, 0xdc, 0xfb, 0x3e, 0xbc, 0xe8, 0xe0, 0x21, 0x51, 0x25, 0x2d, 0x78, 0x1b, 0xe3, 0xb8, 0x8e,
	0x2e, 0xc3, 0x8b, 0x06, 0xc3, 0xc3, 0xa9, 0x23, 0xc1, 0xaf, 0x8e, 0xa7, 0x32, 0xfb, 0x09, 0xe4,
	0x27, 0xbe, 0xd1, 0x0a, 0xe4, 0x3a, 0xdd, 0x4e, 0xcb, 0xca, 0xc8, 0x55, 0xab, 0xd3, 0x7e, 0x61,
	0x19, 0xa8, 0x04, 0x70, 0x76, 0xf4, 0xb2, 0xdd, 0x39, 0xf8, 0xb1, 0x75, 0xfa, 0x9d, 0x65, 0xa2,
	0x32, 0x14, 0x93, 0xfd, 0xe1, 0xfe, 0xe1, 0xa9, 0x95, 0xb5, 0x6f, 0x4c, 0x28, 0xdf, 0x71, 0x8d,
	0x9a, 0x50, 0x4c, 0x43, 0xed, 0x5d, 0x55, 0xb7, 0x9c, 0x67, 0x8d, 0xe3, 0xfa, 0x2a, 0xed, 0xe9,
	0xc6, 0x35, 0x11, 0xfa, 0x01, 0xa0, 0xcb, 0x49, 0x38, 0x57, 0x9a, 0xa7, 0x1f, 0x5a, 0x9a, 0x07,
	0x01, 0x27, 0xe1, 0x62, 0x65, 0x34, 0x22, 0xea, 0x02, 0xb4, 0x18, 0xf5, 0x13, 0xfe, 0xa4, 0xdd,
	0xee, 0xcf, 0xfa, 0x64, 0x76, 0xe6, 0x55, 0x25, 0x50, 0x3e, 0xdb, 0x25, 0xc0, 0x99, 0x0c, 0x3d,
	0x83, 0xd5, 0x33, 0x3e, 0xa0, 0xec, 0xe7, 0xa3, 0x20, 0x14, 0xed, 0x5d, 0xd5, 0x7a, 0x6b, 0xde,
	0xc3, 0x71, 0x5c, 0xaf, 0x8c, 0x54, 0xbc, 0xc1, 0x83, 0x50, 0x34, 0xe6, 0x6e, 0x3c, 0x97, 0x61,
	0x7f, 0x01, 0x2b, 0xd3, 0x4b, 0x68, 0xb5, 0xcf, 0x83, 0x79, 0x76, 0x64, 0x19, 0x32, 0xb2, 0xdb,
	0x7d, 0xd5, 0xb1, 0x4c, 0xfb, 0x6b, 0xdd, 0x3a, 0x6a, 0x40, 0xbe, 0xc5, 0xd5, 0x0f, 0x36, 0xb7,
	0xb2, 0xdb, 0x05, 0xef, 0xc1, 0x38, 0xae, 0x7f, 0x44, 0xb8, 0xfe, 0x7f, 0x55, 0x3b, 0x4f, 0x44,
	0xf6, 0xae, 0xd6, 0xcd, 0x2f, 0x69, 0x24, 0xd0, 0x0e, 0x40, 0x3a, 0xe4, 0xa2, 0x8a, 0xb1, 0x95,
	0xdd, 0x2e, 0x36, 0xd7, 0x97, 0x3c, 0x98, 0x63, 0x4d, 0x66, 0xff, 0x61, 0x40, 0x29, 0x3d, 0x69,
	0x5d, 0x12, 0x26, 0xd0, 0x1e, 0x14, 0xd4, 0x22, 0x7d, 0x1a, 0xa5, 0x66, 0x49, 0x4d, 0x81, 0x34,
	0xea, 0x55, 0xc6, 0x71, 0xfd, 0x3e, 0x91, 0xdb, 0xc6, 0x9d, 0xf7, 0x30, 0x4b, 0x45, 0x1d, 0x6d,
	0x36, 0x25, 0xd3, 0x64, 0x99, 0x1d, 0xef, 0x93, 0xe4, 0xe5, 0xae, 0xa7, 0xb6, 0x74, 0x5e, 0xaa,
	0x6b, 0xfe, 0x65, 0xc2, 0x6a, 0xba, 0x7b, 0xce, 0x29, 0xfa, 0x0a, 0x56, 0xf7, 0x89, 0x98, 0xcd,
	0xbf, 0xbb, 0xb3, 0xaa, 0xb6, 0xec, 0x73, 0x76, 0x06, 0x7d, 0x03, 0x25, 0x59, 0xb0, 0x34, 0x14,
	0x2d, 0x66, 0x2e, 0x9b, 0x57, 0x32, 0xc7, 0xce, 0xa0, 0x67, 0x50, 0x7e, 0x85, 0x85, 0xff, 0xfa,
	0xff, 0xd2, 0x2b, 0x4b, 0xd2, 0x55, 0x61, 0xec, 0xcc, 0x63, 0xa3, 0xd6, 0xff, 0xfb, 0xb7, 0xaa,
	0xaf, 0x0f, 0xee, 0xdc, 0x40, 0xfe, 0xbf, 0x1c, 0x0f, 0x22, 0x81, 0xf2, 0x3d, 0x32, 0x20, 0x82,
	0xa0, 0x2c, 0x1f, 0x89, 0xda, 0x13, 0xf7, 0xd7, 0x19, 0xd5, 0x39, 0x25, 0x0c, 0x33, 0xf1, 0x66,
	0x2e, 0x26, 0x5b, 0x21, 0xe2, 0xd8, 0x27, 0x8b, 0xe1, 0x37, 0x9e, 0xf5, 0xee, 0x76, 0xd3, 0x78,
	0x7f, 0xbb, 0x69, 0xdc, 0xdc, 0x6e, 0x1a, 0xbf, 0xff, 0xb3, 0x99, 0x39, 0x32, 0xce, 0xf3, 0xca,
	0xd6, 0xce, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x46, 0xb0, 0x78, 0xd3, 0x11, 0x07, 0x00, 0x00,
}
