// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tunnel.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TunnelSpec_Encap int32

const (
	TunnelSpec_NONE  TunnelSpec_Encap = 0
	TunnelSpec_VXLAN TunnelSpec_Encap = 1
	TunnelSpec_GRE   TunnelSpec_Encap = 2
)

var TunnelSpec_Encap_name = map[int32]string{
	0: "NONE",
	1: "VXLAN",
	2: "GRE",
}
var TunnelSpec_Encap_value = map[string]int32{
	"NONE":  0,
	"VXLAN": 1,
	"GRE":   2,
}

func (x TunnelSpec_Encap) String() string {
	return proto.EnumName(TunnelSpec_Encap_name, int32(x))
}
func (TunnelSpec_Encap) EnumDescriptor() ([]byte, []int) { return fileDescriptorTunnel, []int{1, 0} }

type TunnelStatus_IFStatus int32

const (
	TunnelStatus_NONE TunnelStatus_IFStatus = 0
	TunnelStatus_UP   TunnelStatus_IFStatus = 1
	TunnelStatus_DOWN TunnelStatus_IFStatus = 2
)

var TunnelStatus_IFStatus_name = map[int32]string{
	0: "NONE",
	1: "UP",
	2: "DOWN",
}
var TunnelStatus_IFStatus_value = map[string]int32{
	"NONE": 0,
	"UP":   1,
	"DOWN": 2,
}

func (x TunnelStatus_IFStatus) String() string {
	return proto.EnumName(TunnelStatus_IFStatus_name, int32(x))
}
func (TunnelStatus_IFStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTunnel, []int{2, 0}
}

// Tunnel object
type Tunnel struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           TunnelSpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         TunnelStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Tunnel) Reset()                    { *m = Tunnel{} }
func (m *Tunnel) String() string            { return proto.CompactTextString(m) }
func (*Tunnel) ProtoMessage()               {}
func (*Tunnel) Descriptor() ([]byte, []int) { return fileDescriptorTunnel, []int{0} }

func (m *Tunnel) GetSpec() TunnelSpec {
	if m != nil {
		return m.Spec
	}
	return TunnelSpec{}
}

func (m *Tunnel) GetStatus() TunnelStatus {
	if m != nil {
		return m.Status
	}
	return TunnelStatus{}
}

// TunnelSpec captures all the tunnel level configuration
type TunnelSpec struct {
	// VrfName specifies the name of the VRF that the current Tunnel belongs to
	VrfName string `protobuf:"bytes,1,opt,name=VrfName,proto3" json:"vrf-name,omitempty"`
	// Overlay Tunnel Type. Required. Only VXLAN is currently supported
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"type,omitempty"`
	// AdminStatus of the overlay tunnel.
	AdminStatus string `protobuf:"bytes,3,opt,name=AdminStatus,proto3" json:"admin-status,omitempty"`
	// Local TEP IP Address
	Src string `protobuf:"bytes,4,opt,name=Src,proto3" json:"source,omitempty"`
	// Remote TEP IP Address
	Dst string `protobuf:"bytes,5,opt,name=Dst,proto3" json:"destination,omitempty"`
}

func (m *TunnelSpec) Reset()                    { *m = TunnelSpec{} }
func (m *TunnelSpec) String() string            { return proto.CompactTextString(m) }
func (*TunnelSpec) ProtoMessage()               {}
func (*TunnelSpec) Descriptor() ([]byte, []int) { return fileDescriptorTunnel, []int{1} }

func (m *TunnelSpec) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *TunnelSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TunnelSpec) GetAdminStatus() string {
	if m != nil {
		return m.AdminStatus
	}
	return ""
}

func (m *TunnelSpec) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *TunnelSpec) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

// Tunnel Status
type TunnelStatus struct {
	OperStatus string `protobuf:"bytes,1,opt,name=OperStatus,proto3" json:"oper-status,omitempty"`
	// TunnelID in the datapath
	TunnelID uint64 `protobuf:"varint,2,opt,name=TunnelID,proto3" json:"id,omitempty"`
}

func (m *TunnelStatus) Reset()                    { *m = TunnelStatus{} }
func (m *TunnelStatus) String() string            { return proto.CompactTextString(m) }
func (*TunnelStatus) ProtoMessage()               {}
func (*TunnelStatus) Descriptor() ([]byte, []int) { return fileDescriptorTunnel, []int{2} }

func (m *TunnelStatus) GetOperStatus() string {
	if m != nil {
		return m.OperStatus
	}
	return ""
}

func (m *TunnelStatus) GetTunnelID() uint64 {
	if m != nil {
		return m.TunnelID
	}
	return 0
}

type TunnelList struct {
	Tunnels []*Tunnel `protobuf:"bytes,1,rep,name=tunnels" json:"tunnels,omitempty"`
}

func (m *TunnelList) Reset()                    { *m = TunnelList{} }
func (m *TunnelList) String() string            { return proto.CompactTextString(m) }
func (*TunnelList) ProtoMessage()               {}
func (*TunnelList) Descriptor() ([]byte, []int) { return fileDescriptorTunnel, []int{3} }

func (m *TunnelList) GetTunnels() []*Tunnel {
	if m != nil {
		return m.Tunnels
	}
	return nil
}

// tunnel watch event
type TunnelEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	Tunnel    Tunnel        `protobuf:"bytes,2,opt,name=Tunnel" json:"tunnel,omitempty"`
}

func (m *TunnelEvent) Reset()                    { *m = TunnelEvent{} }
func (m *TunnelEvent) String() string            { return proto.CompactTextString(m) }
func (*TunnelEvent) ProtoMessage()               {}
func (*TunnelEvent) Descriptor() ([]byte, []int) { return fileDescriptorTunnel, []int{4} }

func (m *TunnelEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *TunnelEvent) GetTunnel() Tunnel {
	if m != nil {
		return m.Tunnel
	}
	return Tunnel{}
}

func init() {
	proto.RegisterType((*Tunnel)(nil), "netproto.Tunnel")
	proto.RegisterType((*TunnelSpec)(nil), "netproto.TunnelSpec")
	proto.RegisterType((*TunnelStatus)(nil), "netproto.TunnelStatus")
	proto.RegisterType((*TunnelList)(nil), "netproto.TunnelList")
	proto.RegisterType((*TunnelEvent)(nil), "netproto.TunnelEvent")
	proto.RegisterEnum("netproto.TunnelSpec_Encap", TunnelSpec_Encap_name, TunnelSpec_Encap_value)
	proto.RegisterEnum("netproto.TunnelStatus_IFStatus", TunnelStatus_IFStatus_name, TunnelStatus_IFStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TunnelApi service

type TunnelApiClient interface {
	GetTunnel(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Tunnel, error)
	ListTunnels(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*TunnelList, error)
	WatchTunnels(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (TunnelApi_WatchTunnelsClient, error)
}

type tunnelApiClient struct {
	cc *grpc.ClientConn
}

func NewTunnelApiClient(cc *grpc.ClientConn) TunnelApiClient {
	return &tunnelApiClient{cc}
}

func (c *tunnelApiClient) GetTunnel(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*Tunnel, error) {
	out := new(Tunnel)
	err := grpc.Invoke(ctx, "/netproto.TunnelApi/GetTunnel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelApiClient) ListTunnels(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*TunnelList, error) {
	out := new(TunnelList)
	err := grpc.Invoke(ctx, "/netproto.TunnelApi/ListTunnels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelApiClient) WatchTunnels(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (TunnelApi_WatchTunnelsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TunnelApi_serviceDesc.Streams[0], c.cc, "/netproto.TunnelApi/WatchTunnels", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelApiWatchTunnelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TunnelApi_WatchTunnelsClient interface {
	Recv() (*TunnelEvent, error)
	grpc.ClientStream
}

type tunnelApiWatchTunnelsClient struct {
	grpc.ClientStream
}

func (x *tunnelApiWatchTunnelsClient) Recv() (*TunnelEvent, error) {
	m := new(TunnelEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TunnelApi service

type TunnelApiServer interface {
	GetTunnel(context.Context, *api.ObjectMeta) (*Tunnel, error)
	ListTunnels(context.Context, *api.ObjectMeta) (*TunnelList, error)
	WatchTunnels(*api.ObjectMeta, TunnelApi_WatchTunnelsServer) error
}

func RegisterTunnelApiServer(s *grpc.Server, srv TunnelApiServer) {
	s.RegisterService(&_TunnelApi_serviceDesc, srv)
}

func _TunnelApi_GetTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelApiServer).GetTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.TunnelApi/GetTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelApiServer).GetTunnel(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelApi_ListTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelApiServer).ListTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.TunnelApi/ListTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelApiServer).ListTunnels(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelApi_WatchTunnels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TunnelApiServer).WatchTunnels(m, &tunnelApiWatchTunnelsServer{stream})
}

type TunnelApi_WatchTunnelsServer interface {
	Send(*TunnelEvent) error
	grpc.ServerStream
}

type tunnelApiWatchTunnelsServer struct {
	grpc.ServerStream
}

func (x *tunnelApiWatchTunnelsServer) Send(m *TunnelEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _TunnelApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.TunnelApi",
	HandlerType: (*TunnelApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTunnel",
			Handler:    _TunnelApi_GetTunnel_Handler,
		},
		{
			MethodName: "ListTunnels",
			Handler:    _TunnelApi_ListTunnels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTunnels",
			Handler:       _TunnelApi_WatchTunnels_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}

func (m *Tunnel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tunnel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTunnel(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintTunnel(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintTunnel(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintTunnel(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *TunnelSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.VrfName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.VrfName)))
		i += copy(dAtA[i:], m.VrfName)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.AdminStatus) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.AdminStatus)))
		i += copy(dAtA[i:], m.AdminStatus)
	}
	if len(m.Src) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.Src)))
		i += copy(dAtA[i:], m.Src)
	}
	if len(m.Dst) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.Dst)))
		i += copy(dAtA[i:], m.Dst)
	}
	return i, nil
}

func (m *TunnelStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OperStatus) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTunnel(dAtA, i, uint64(len(m.OperStatus)))
		i += copy(dAtA[i:], m.OperStatus)
	}
	if m.TunnelID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTunnel(dAtA, i, uint64(m.TunnelID))
	}
	return i, nil
}

func (m *TunnelList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tunnels) > 0 {
		for _, msg := range m.Tunnels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTunnel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TunnelEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTunnel(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintTunnel(dAtA, i, uint64(m.Tunnel.Size()))
	n5, err := m.Tunnel.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func encodeVarintTunnel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tunnel) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovTunnel(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovTunnel(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovTunnel(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovTunnel(uint64(l))
	return n
}

func (m *TunnelSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.VrfName)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.AdminStatus)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.Src)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	l = len(m.Dst)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	return n
}

func (m *TunnelStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.OperStatus)
	if l > 0 {
		n += 1 + l + sovTunnel(uint64(l))
	}
	if m.TunnelID != 0 {
		n += 1 + sovTunnel(uint64(m.TunnelID))
	}
	return n
}

func (m *TunnelList) Size() (n int) {
	var l int
	_ = l
	if len(m.Tunnels) > 0 {
		for _, e := range m.Tunnels {
			l = e.Size()
			n += 1 + l + sovTunnel(uint64(l))
		}
	}
	return n
}

func (m *TunnelEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovTunnel(uint64(m.EventType))
	}
	l = m.Tunnel.Size()
	n += 1 + l + sovTunnel(uint64(l))
	return n
}

func sovTunnel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTunnel(x uint64) (n int) {
	return sovTunnel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tunnel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tunnel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tunnel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Src = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelID", wireType)
			}
			m.TunnelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tunnels = append(m.Tunnels, &Tunnel{})
			if err := m.Tunnels[len(m.Tunnels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tunnel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTunnel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tunnel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTunnel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTunnel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTunnel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTunnel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTunnel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTunnel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTunnel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTunnel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTunnel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTunnel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tunnel.proto", fileDescriptorTunnel) }

var fileDescriptorTunnel = []byte{
	// 805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x6a, 0xdb, 0x48,
	0x14, 0xc7, 0x2d, 0xdb, 0xf1, 0xc7, 0xd8, 0x9b, 0x15, 0xb3, 0x89, 0xb1, 0xcd, 0x62, 0x2f, 0x82,
	0x84, 0xec, 0x6e, 0x2c, 0x05, 0x2f, 0x2c, 0xcb, 0x7e, 0xd1, 0xa8, 0x76, 0xd2, 0xd0, 0xd4, 0x0e,
	0x76, 0x9a, 0x14, 0x0a, 0x05, 0x59, 0x9e, 0x38, 0x2a, 0xd6, 0x68, 0x2a, 0x8d, 0x52, 0x42, 0xc9,
	0x55, 0x21, 0xcf, 0xd0, 0x5e, 0x16, 0x7a, 0x95, 0xcb, 0xbe, 0x41, 0xef, 0x72, 0x99, 0x27, 0x70,
	0x4b, 0x7a, 0xe7, 0xa7, 0x28, 0x33, 0x92, 0xec, 0xa9, 0x45, 0xa0, 0x77, 0x33, 0x47, 0xff, 0xff,
	0x4f, 0xe7, 0x9c, 0x39, 0x33, 0xa0, 0x48, 0x7d, 0x8c, 0xd1, 0x58, 0x25, 0xae, 0x43, 0x1d, 0x98,
	0xc3, 0x88, 0xf2, 0x55, 0xf5, 0xe7, 0x91, 0xe3, 0x8c, 0xc6, 0x48, 0x33, 0x88, 0xa5, 0x19, 0x18,
	0x3b, 0xd4, 0xa0, 0x96, 0x83, 0xbd, 0x40, 0x57, 0x6d, 0x8f, 0x2c, 0x7a, 0xea, 0x0f, 0x54, 0xd3,
	0xb1, 0x35, 0x82, 0xb0, 0x67, 0xe0, 0xa1, 0xa3, 0x79, 0x2f, 0xb5, 0x33, 0x84, 0x2d, 0x13, 0x69,
	0x3e, 0xb5, 0xc6, 0x1e, 0xb3, 0x8e, 0x10, 0x16, 0xdd, 0x9a, 0x85, 0xcd, 0xb1, 0x3f, 0x44, 0x11,
	0xa6, 0x21, 0x60, 0x46, 0xce, 0xc8, 0xd1, 0x78, 0x78, 0xe0, 0x9f, 0xf0, 0x1d, 0xdf, 0xf0, 0x55,
	0x28, 0x5f, 0xbb, 0xe3, 0xaf, 0x2c, 0x47, 0x1b, 0x51, 0x23, 0x90, 0x29, 0xef, 0x92, 0x20, 0x73,
	0xc8, 0xab, 0x82, 0xff, 0x83, 0xdc, 0xe1, 0x39, 0x41, 0x8f, 0x10, 0x35, 0xca, 0xd2, 0x2f, 0xd2,
	0x46, 0xa1, 0xf9, 0x83, 0x6a, 0x10, 0x4b, 0x8d, 0x82, 0xfa, 0x4f, 0xd7, 0x93, 0x7a, 0xe2, 0x66,
	0x52, 0x97, 0xa6, 0x93, 0x7a, 0x76, 0xd3, 0xc2, 0x63, 0x0b, 0xa3, 0xde, 0xcc, 0x03, 0x1f, 0x02,
	0xd0, 0x1d, 0x3c, 0x47, 0x26, 0xe5, 0x84, 0x24, 0x27, 0xfc, 0xc8, 0x09, 0xf3, 0xb0, 0x5e, 0x15,
	0x18, 0xcb, 0x2c, 0x8f, 0x4d, 0xc7, 0xb6, 0x28, 0xb2, 0x09, 0x3d, 0xef, 0x09, 0x76, 0x78, 0x0f,
	0xa4, 0xfb, 0x04, 0x99, 0xe5, 0x14, 0xc7, 0xac, 0xa8, 0x51, 0xaf, 0xd5, 0x20, 0x59, 0xf6, 0x4d,
	0x2f, 0x31, 0x16, 0xe3, 0x78, 0x04, 0x99, 0x02, 0x87, 0x3b, 0xe1, 0x03, 0x90, 0xe9, 0x53, 0x83,
	0xfa, 0x5e, 0x39, 0xcd, 0x19, 0xa5, 0x18, 0x83, 0x7f, 0xd5, 0xcb, 0x21, 0x45, 0xf6, 0xf8, 0x5e,
	0xe0, 0x84, 0x7e, 0xe5, 0x53, 0x12, 0x80, 0xf9, 0x6f, 0xe1, 0x16, 0xc8, 0x1e, 0xb9, 0x27, 0x1d,
	0xc3, 0x46, 0xbc, 0x4d, 0x79, 0xbd, 0x34, 0x9d, 0xd4, 0xe1, 0x99, 0x7b, 0xd2, 0xc0, 0x86, 0x8d,
	0x04, 0x7f, 0x24, 0x83, 0xf7, 0x41, 0x9a, 0x75, 0x89, 0xf7, 0x24, 0xaf, 0x6b, 0x57, 0x97, 0x95,
	0x4a, 0x9f, 0xba, 0x6d, 0xec, 0xdb, 0x1b, 0x73, 0xae, 0xda, 0xc6, 0xa6, 0x41, 0x7e, 0x65, 0xf5,
	0xd0, 0x73, 0x22, 0x72, 0xb8, 0x19, 0x3e, 0x03, 0x85, 0xed, 0xa1, 0x6d, 0xe1, 0xb0, 0xa8, 0x14,
	0x67, 0xfd, 0x7b, 0x75, 0x59, 0xa9, 0x2d, 0xb0, 0xf8, 0x77, 0x75, 0x6f, 0x27, 0x58, 0x30, 0x60,
	0xc9, 0x60, 0xc6, 0x46, 0xac, 0x40, 0x11, 0x08, 0xd7, 0x41, 0xaa, 0xef, 0x9a, 0xbc, 0x59, 0x79,
	0x7d, 0x85, 0x37, 0xc4, 0xf1, 0x5d, 0x53, 0x4c, 0x84, 0x09, 0xe0, 0xef, 0x20, 0xd5, 0xf2, 0x68,
	0x79, 0x89, 0xeb, 0x2a, 0xd3, 0x49, 0x7d, 0x75, 0x88, 0x3c, 0x6a, 0x61, 0x3e, 0xb5, 0xa2, 0xb8,
	0xe5, 0x51, 0x65, 0x0d, 0x2c, 0xf1, 0xb2, 0x60, 0x0e, 0xa4, 0x3b, 0xdd, 0x4e, 0x5b, 0x4e, 0xc0,
	0x3c, 0x58, 0x3a, 0x7a, 0xb2, 0xbf, 0xdd, 0x91, 0x25, 0x98, 0x05, 0xa9, 0xdd, 0x5e, 0x5b, 0x4e,
	0x2a, 0x1f, 0x25, 0x50, 0x14, 0xb3, 0x87, 0x4f, 0x01, 0xe8, 0x12, 0xe4, 0x86, 0xb5, 0x06, 0x6d,
	0xfe, 0xe7, 0xbb, 0x6a, 0x5d, 0x75, 0x08, 0x72, 0xe3, 0xa5, 0x0a, 0x38, 0xb8, 0x09, 0x72, 0x81,
	0x7d, 0xaf, 0xc5, 0x8f, 0x24, 0xad, 0xcb, 0xd3, 0x49, 0xbd, 0x68, 0x0d, 0x05, 0xfd, 0x4c, 0xa1,
	0xac, 0x83, 0x5c, 0xc4, 0x17, 0xaa, 0xc8, 0x80, 0xe4, 0xe3, 0x03, 0x59, 0x62, 0x91, 0x56, 0xf7,
	0xb8, 0x23, 0x27, 0x95, 0xbf, 0xa2, 0x21, 0xd9, 0xb7, 0x3c, 0x0a, 0x7f, 0x03, 0xd9, 0xe0, 0xb1,
	0x60, 0xd9, 0xa7, 0x36, 0x0a, 0x4d, 0x79, 0x71, 0xfc, 0x7a, 0x91, 0x40, 0x79, 0x2b, 0x81, 0x42,
	0x10, 0x6b, 0x9f, 0x21, 0x4c, 0xe1, 0x0e, 0xc8, 0xf3, 0x05, 0x9f, 0x19, 0x56, 0xfb, 0x72, 0x73,
	0x99, 0xdf, 0xa3, 0x59, 0x54, 0x2f, 0x4f, 0x27, 0xf5, 0x15, 0xc4, 0xb6, 0x8d, 0x85, 0x61, 0x99,
	0x5b, 0xa1, 0x1e, 0x5d, 0xed, 0xf0, 0x32, 0xc6, 0x52, 0x98, 0xcf, 0x7e, 0x90, 0x8a, 0x38, 0xfb,
	0x81, 0xa2, 0xf9, 0x3e, 0x09, 0xf2, 0xc1, 0x72, 0x9b, 0x58, 0x70, 0x0b, 0xe4, 0x77, 0x11, 0x0d,
	0xdf, 0x8b, 0xc5, 0xbb, 0x5d, 0x8d, 0xf1, 0x95, 0x04, 0xfc, 0x13, 0x14, 0x58, 0x3f, 0x82, 0xbd,
	0x17, 0xf7, 0xc4, 0x6e, 0x36, 0x53, 0x2b, 0x09, 0xf8, 0x37, 0x28, 0x1e, 0x1b, 0xd4, 0x3c, 0xbd,
	0xd3, 0xb8, 0xba, 0x68, 0xe4, 0x75, 0x2b, 0x89, 0x2d, 0xa9, 0xfa, 0xe2, 0xc3, 0xeb, 0x8a, 0x3d,
	0x7b, 0xd6, 0xd2, 0x63, 0x76, 0x1e, 0x69, 0xe2, 0x78, 0x14, 0x66, 0x86, 0x68, 0x8c, 0x28, 0x82,
	0x29, 0xe2, 0xd3, 0xea, 0x7f, 0xda, 0xab, 0x39, 0x4f, 0x3d, 0x44, 0xd8, 0xc0, 0xf4, 0xe2, 0x9b,
	0x18, 0xbb, 0xbc, 0x1e, 0x31, 0x4c, 0x14, 0x0f, 0x5f, 0x28, 0x05, 0xf6, 0x92, 0x86, 0x47, 0xa8,
	0xcb, 0xd7, 0xb7, 0x35, 0xe9, 0xe6, 0xb6, 0x26, 0x7d, 0xbe, 0xad, 0x49, 0x6f, 0xbe, 0xd4, 0x12,
	0x07, 0xd2, 0x20, 0xc3, 0xb3, 0xfb, 0xe3, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x60, 0x26,
	0xc4, 0x36, 0x06, 0x00, 0x00,
}
