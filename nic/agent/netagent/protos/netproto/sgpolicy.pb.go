// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgpolicy.proto

package netproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PolicyRule_PolicyAction int32

const (
	PolicyRule_PERMIT PolicyRule_PolicyAction = 0
	PolicyRule_DENY   PolicyRule_PolicyAction = 1
	PolicyRule_REJECT PolicyRule_PolicyAction = 2
	PolicyRule_LOG    PolicyRule_PolicyAction = 3
)

var PolicyRule_PolicyAction_name = map[int32]string{
	0: "PERMIT",
	1: "DENY",
	2: "REJECT",
	3: "LOG",
}
var PolicyRule_PolicyAction_value = map[string]int32{
	"PERMIT": 0,
	"DENY":   1,
	"REJECT": 2,
	"LOG":    3,
}

func (x PolicyRule_PolicyAction) String() string {
	return proto.EnumName(PolicyRule_PolicyAction_name, int32(x))
}
func (PolicyRule_PolicyAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorSgpolicy, []int{2, 0}
}

// SGPolicy object
type SGPolicy struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	Spec           SGPolicySpec   `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	Status         SGPolicyStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *SGPolicy) Reset()                    { *m = SGPolicy{} }
func (m *SGPolicy) String() string            { return proto.CompactTextString(m) }
func (*SGPolicy) ProtoMessage()               {}
func (*SGPolicy) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{0} }

func (m *SGPolicy) GetSpec() SGPolicySpec {
	if m != nil {
		return m.Spec
	}
	return SGPolicySpec{}
}

func (m *SGPolicy) GetStatus() SGPolicyStatus {
	if m != nil {
		return m.Status
	}
	return SGPolicyStatus{}
}

// SGPolicySpec captures all the security policy configuration
type SGPolicySpec struct {
	// list of security groups on which the policy is applied.
	AttachGroup []string `protobuf:"bytes,1,rep,name=AttachGroup" json:"attach-group,omitempty"`
	// specifies if the set of rules need to be attached globally to a tenant
	AttachTenant bool `protobuf:"varint,2,opt,name=AttachTenant,proto3" json:"attach-tenant,omitempty"`
	// list of rules
	Rules []PolicyRule `protobuf:"bytes,3,rep,name=Rules" json:"policy-rules,omitempty"`
}

func (m *SGPolicySpec) Reset()                    { *m = SGPolicySpec{} }
func (m *SGPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*SGPolicySpec) ProtoMessage()               {}
func (*SGPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{1} }

func (m *SGPolicySpec) GetAttachGroup() []string {
	if m != nil {
		return m.AttachGroup
	}
	return nil
}

func (m *SGPolicySpec) GetAttachTenant() bool {
	if m != nil {
		return m.AttachTenant
	}
	return false
}

func (m *SGPolicySpec) GetRules() []PolicyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type PolicyRule struct {
	// list of actions for the rule. Some combinations are invalid, eg: ["PERMIT", "DENY"]
	Action string `protobuf:"bytes,1,opt,name=Action,proto3" json:"action,omitemtpy"`
	// inbound rule match. IP Address, CIDR based IP mask, or hyphen separeted IP Range or App info based selector.
	// Emtpy src is interpreted as match all
	Src *MatchSelector `protobuf:"bytes,2,opt,name=Src" json:"source,omitempty"`
	// outbound rule match. IP Address, CIDR based IP mask, or hyphen separeted IP Range or App info based selector.
	// Emtpy dst is interpreted as match all
	Dst *MatchSelector `protobuf:"bytes,3,opt,name=Dst" json:"destination,omitempty"`
	// Allocated ID
	ID uint64 `protobuf:"varint,4,opt,name=ID,proto3" json:"rule-id,omitempty"`
	// Optional AppName to fetch additional ALG configurations. ICMP Code is inferred from its corresponding App definition.
	// A single rule can have the match parameters through the selectors or its corresponding App object
	AppName string `protobuf:"bytes,5,opt,name=AppName,proto3" json:"app-name,omitempty"`
}

func (m *PolicyRule) Reset()                    { *m = PolicyRule{} }
func (m *PolicyRule) String() string            { return proto.CompactTextString(m) }
func (*PolicyRule) ProtoMessage()               {}
func (*PolicyRule) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{2} }

func (m *PolicyRule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *PolicyRule) GetSrc() *MatchSelector {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *PolicyRule) GetDst() *MatchSelector {
	if m != nil {
		return m.Dst
	}
	return nil
}

func (m *PolicyRule) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *PolicyRule) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

// SGPolicyStatus captures the sg policy status
type SGPolicyStatus struct {
	SGPolicyID uint64 `protobuf:"varint,1,opt,name=SGPolicyID,proto3" json:"id,omitempty"`
}

func (m *SGPolicyStatus) Reset()                    { *m = SGPolicyStatus{} }
func (m *SGPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*SGPolicyStatus) ProtoMessage()               {}
func (*SGPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{3} }

func (m *SGPolicyStatus) GetSGPolicyID() uint64 {
	if m != nil {
		return m.SGPolicyID
	}
	return 0
}

type SGPolicyList struct {
	SGPolicys []*SGPolicy `protobuf:"bytes,1,rep,name=SGPolicys" json:"SGPolicys,omitempty"`
}

func (m *SGPolicyList) Reset()                    { *m = SGPolicyList{} }
func (m *SGPolicyList) String() string            { return proto.CompactTextString(m) }
func (*SGPolicyList) ProtoMessage()               {}
func (*SGPolicyList) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{4} }

func (m *SGPolicyList) GetSGPolicys() []*SGPolicy {
	if m != nil {
		return m.SGPolicys
	}
	return nil
}

// sg policy watch event
type SGPolicyEvent struct {
	EventType api.EventType `protobuf:"varint,1,opt,name=EventType,proto3,enum=api.EventType" json:"event-type,omitempty"`
	SGPolicy  SGPolicy      `protobuf:"bytes,2,opt,name=SGPolicy" json:"sg-policy,omitempty"`
}

func (m *SGPolicyEvent) Reset()                    { *m = SGPolicyEvent{} }
func (m *SGPolicyEvent) String() string            { return proto.CompactTextString(m) }
func (*SGPolicyEvent) ProtoMessage()               {}
func (*SGPolicyEvent) Descriptor() ([]byte, []int) { return fileDescriptorSgpolicy, []int{5} }

func (m *SGPolicyEvent) GetEventType() api.EventType {
	if m != nil {
		return m.EventType
	}
	return api.EventType_CreateEvent
}

func (m *SGPolicyEvent) GetSGPolicy() SGPolicy {
	if m != nil {
		return m.SGPolicy
	}
	return SGPolicy{}
}

func init() {
	proto.RegisterType((*SGPolicy)(nil), "netproto.SGPolicy")
	proto.RegisterType((*SGPolicySpec)(nil), "netproto.SGPolicySpec")
	proto.RegisterType((*PolicyRule)(nil), "netproto.PolicyRule")
	proto.RegisterType((*SGPolicyStatus)(nil), "netproto.SGPolicyStatus")
	proto.RegisterType((*SGPolicyList)(nil), "netproto.SGPolicyList")
	proto.RegisterType((*SGPolicyEvent)(nil), "netproto.SGPolicyEvent")
	proto.RegisterEnum("netproto.PolicyRule_PolicyAction", PolicyRule_PolicyAction_name, PolicyRule_PolicyAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SGPolicyApi service

type SGPolicyApiClient interface {
	GetSGPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*SGPolicy, error)
	ListSGPolicys(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*SGPolicyList, error)
	WatchSGPolicys(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (SGPolicyApi_WatchSGPolicysClient, error)
	UpdateSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error)
}

type sGPolicyApiClient struct {
	cc *grpc.ClientConn
}

func NewSGPolicyApiClient(cc *grpc.ClientConn) SGPolicyApiClient {
	return &sGPolicyApiClient{cc}
}

func (c *sGPolicyApiClient) GetSGPolicy(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*SGPolicy, error) {
	out := new(SGPolicy)
	err := grpc.Invoke(ctx, "/netproto.SGPolicyApi/GetSGPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sGPolicyApiClient) ListSGPolicys(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (*SGPolicyList, error) {
	out := new(SGPolicyList)
	err := grpc.Invoke(ctx, "/netproto.SGPolicyApi/ListSGPolicys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sGPolicyApiClient) WatchSGPolicys(ctx context.Context, in *api.ObjectMeta, opts ...grpc.CallOption) (SGPolicyApi_WatchSGPolicysClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SGPolicyApi_serviceDesc.Streams[0], c.cc, "/netproto.SGPolicyApi/WatchSGPolicys", opts...)
	if err != nil {
		return nil, err
	}
	x := &sGPolicyApiWatchSGPolicysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SGPolicyApi_WatchSGPolicysClient interface {
	Recv() (*SGPolicyEvent, error)
	grpc.ClientStream
}

type sGPolicyApiWatchSGPolicysClient struct {
	grpc.ClientStream
}

func (x *sGPolicyApiWatchSGPolicysClient) Recv() (*SGPolicyEvent, error) {
	m := new(SGPolicyEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sGPolicyApiClient) UpdateSGPolicy(ctx context.Context, in *SGPolicy, opts ...grpc.CallOption) (*SGPolicy, error) {
	out := new(SGPolicy)
	err := grpc.Invoke(ctx, "/netproto.SGPolicyApi/UpdateSGPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SGPolicyApi service

type SGPolicyApiServer interface {
	GetSGPolicy(context.Context, *api.ObjectMeta) (*SGPolicy, error)
	ListSGPolicys(context.Context, *api.ObjectMeta) (*SGPolicyList, error)
	WatchSGPolicys(*api.ObjectMeta, SGPolicyApi_WatchSGPolicysServer) error
	UpdateSGPolicy(context.Context, *SGPolicy) (*SGPolicy, error)
}

func RegisterSGPolicyApiServer(s *grpc.Server, srv SGPolicyApiServer) {
	s.RegisterService(&_SGPolicyApi_serviceDesc, srv)
}

func _SGPolicyApi_GetSGPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SGPolicyApiServer).GetSGPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.SGPolicyApi/GetSGPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SGPolicyApiServer).GetSGPolicy(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _SGPolicyApi_ListSGPolicys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ObjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SGPolicyApiServer).ListSGPolicys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.SGPolicyApi/ListSGPolicys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SGPolicyApiServer).ListSGPolicys(ctx, req.(*api.ObjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _SGPolicyApi_WatchSGPolicys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(api.ObjectMeta)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SGPolicyApiServer).WatchSGPolicys(m, &sGPolicyApiWatchSGPolicysServer{stream})
}

type SGPolicyApi_WatchSGPolicysServer interface {
	Send(*SGPolicyEvent) error
	grpc.ServerStream
}

type sGPolicyApiWatchSGPolicysServer struct {
	grpc.ServerStream
}

func (x *sGPolicyApiWatchSGPolicysServer) Send(m *SGPolicyEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SGPolicyApi_UpdateSGPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SGPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SGPolicyApiServer).UpdateSGPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netproto.SGPolicyApi/UpdateSGPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SGPolicyApiServer).UpdateSGPolicy(ctx, req.(*SGPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

var _SGPolicyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netproto.SGPolicyApi",
	HandlerType: (*SGPolicyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSGPolicy",
			Handler:    _SGPolicyApi_GetSGPolicy_Handler,
		},
		{
			MethodName: "ListSGPolicys",
			Handler:    _SGPolicyApi_ListSGPolicys_Handler,
		},
		{
			MethodName: "UpdateSGPolicy",
			Handler:    _SGPolicyApi_UpdateSGPolicy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchSGPolicys",
			Handler:       _SGPolicyApi_WatchSGPolicys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sgpolicy.proto",
}

func (m *SGPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *SGPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttachGroup) > 0 {
		for _, s := range m.AttachGroup {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.AttachTenant {
		dAtA[i] = 0x10
		i++
		if m.AttachTenant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSgpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PolicyRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.Action)))
		i += copy(dAtA[i:], m.Action)
	}
	if m.Src != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.Src.Size()))
		n5, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Dst != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.Dst.Size()))
		n6, err := m.Dst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.ID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.ID))
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	return i, nil
}

func (m *SGPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SGPolicyID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.SGPolicyID))
	}
	return i, nil
}

func (m *SGPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SGPolicys) > 0 {
		for _, msg := range m.SGPolicys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSgpolicy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SGPolicyEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGPolicyEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSgpolicy(dAtA, i, uint64(m.EventType))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintSgpolicy(dAtA, i, uint64(m.SGPolicy.Size()))
	n7, err := m.SGPolicy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func encodeVarintSgpolicy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SGPolicy) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	return n
}

func (m *SGPolicySpec) Size() (n int) {
	var l int
	_ = l
	if len(m.AttachGroup) > 0 {
		for _, s := range m.AttachGroup {
			l = len(s)
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	if m.AttachTenant {
		n += 2
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	return n
}

func (m *PolicyRule) Size() (n int) {
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	if m.Dst != nil {
		l = m.Dst.Size()
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovSgpolicy(uint64(m.ID))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovSgpolicy(uint64(l))
	}
	return n
}

func (m *SGPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if m.SGPolicyID != 0 {
		n += 1 + sovSgpolicy(uint64(m.SGPolicyID))
	}
	return n
}

func (m *SGPolicyList) Size() (n int) {
	var l int
	_ = l
	if len(m.SGPolicys) > 0 {
		for _, e := range m.SGPolicys {
			l = e.Size()
			n += 1 + l + sovSgpolicy(uint64(l))
		}
	}
	return n
}

func (m *SGPolicyEvent) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovSgpolicy(uint64(m.EventType))
	}
	l = m.SGPolicy.Size()
	n += 1 + l + sovSgpolicy(uint64(l))
	return n
}

func sovSgpolicy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSgpolicy(x uint64) (n int) {
	return sovSgpolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SGPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachGroup = append(m.AttachGroup, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachTenant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttachTenant = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, PolicyRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &MatchSelector{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dst == nil {
				m.Dst = &MatchSelector{}
			}
			if err := m.Dst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SGPolicyID", wireType)
			}
			m.SGPolicyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SGPolicyID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SGPolicys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SGPolicys = append(m.SGPolicys, &SGPolicy{})
			if err := m.SGPolicys[len(m.SGPolicys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGPolicyEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGPolicyEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGPolicyEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (api.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SGPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSgpolicy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SGPolicy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSgpolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSgpolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSgpolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSgpolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSgpolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSgpolicy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSgpolicy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSgpolicy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSgpolicy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSgpolicy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sgpolicy.proto", fileDescriptorSgpolicy) }

var fileDescriptorSgpolicy = []byte{
	// 905 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x95, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0xe3, 0x38, 0x9b, 0xa6, 0x93, 0x36, 0x84, 0xd9, 0x6d, 0xea, 0x0d, 0x90, 0x54, 0x96,
	0x56, 0x2a, 0xd2, 0x26, 0xae, 0x02, 0x17, 0x56, 0xb0, 0xda, 0xba, 0x09, 0xa5, 0xdd, 0xed, 0x6e,
	0x95, 0x04, 0x21, 0x8e, 0x53, 0x67, 0x70, 0x8d, 0x9c, 0xf1, 0x28, 0x33, 0x5e, 0x14, 0xa1, 0x9e,
	0x10, 0x7c, 0x06, 0x3e, 0x00, 0x12, 0x12, 0x47, 0x3e, 0x45, 0x8f, 0xfb, 0x09, 0x22, 0x28, 0xb7,
	0x7c, 0x04, 0x4e, 0x68, 0x9e, 0xed, 0x78, 0x4a, 0xd3, 0x5b, 0xde, 0x9b, 0xf7, 0x7e, 0xf3, 0x9f,
	0x37, 0x7f, 0x4f, 0x50, 0x4d, 0xf8, 0x3c, 0x0a, 0x03, 0x6f, 0xde, 0xe5, 0xb3, 0x48, 0x46, 0xb8,
	0xc2, 0xa8, 0x84, 0x5f, 0xcd, 0x0f, 0xfd, 0x28, 0xf2, 0x43, 0xea, 0x10, 0x1e, 0x38, 0x84, 0xb1,
	0x48, 0x12, 0x19, 0x44, 0x4c, 0x24, 0x75, 0xcd, 0x81, 0x1f, 0xc8, 0xcb, 0xf8, 0xa2, 0xeb, 0x45,
	0x53, 0x87, 0x53, 0x26, 0x08, 0x9b, 0x44, 0x8e, 0xf8, 0xc1, 0x79, 0x4b, 0x59, 0xe0, 0x51, 0x27,
	0x96, 0x41, 0x28, 0x54, 0xab, 0x4f, 0x99, 0xde, 0xed, 0x04, 0xcc, 0x0b, 0xe3, 0x09, 0xcd, 0x30,
	0x1d, 0x0d, 0xe3, 0x47, 0x7e, 0xe4, 0x40, 0xfa, 0x22, 0xfe, 0x0e, 0x22, 0x08, 0xe0, 0x57, 0x5a,
	0xfe, 0xe4, 0x9e, 0x5d, 0x95, 0xc6, 0x29, 0x95, 0x24, 0x2d, 0xab, 0x4e, 0x89, 0xf4, 0x2e, 0x93,
	0xc0, 0xfe, 0xbd, 0x88, 0x2a, 0xa3, 0xe3, 0x73, 0x38, 0x24, 0x7e, 0x8e, 0x2a, 0xe3, 0x39, 0xa7,
	0x67, 0x54, 0x12, 0xcb, 0xd8, 0x33, 0xf6, 0xab, 0xbd, 0xed, 0x2e, 0xe1, 0x41, 0x37, 0x4b, 0xba,
	0x0f, 0xaf, 0x17, 0xed, 0xc2, 0xbb, 0x45, 0xdb, 0x58, 0x2e, 0xda, 0x1b, 0x4f, 0x03, 0x16, 0x06,
	0x8c, 0x0e, 0x57, 0x3d, 0xf8, 0x25, 0x42, 0x6f, 0x2e, 0xbe, 0xa7, 0x9e, 0x04, 0x42, 0x11, 0x08,
	0xef, 0x01, 0x21, 0x4f, 0xbb, 0x4d, 0x8d, 0x51, 0x53, 0xb2, 0x9e, 0x46, 0xd3, 0x40, 0xd2, 0x29,
	0x97, 0xf3, 0xa1, 0xd6, 0x8e, 0x5d, 0x54, 0x1a, 0x71, 0xea, 0x59, 0x26, 0x60, 0x1a, 0xdd, 0x6c,
	0xf4, 0xdd, 0x4c, 0xae, 0x5a, 0x75, 0x1b, 0x8a, 0xa6, 0x48, 0x82, 0x53, 0x4f, 0x23, 0x41, 0x2f,
	0x3e, 0x45, 0xe5, 0x91, 0x24, 0x32, 0x16, 0x56, 0x09, 0x28, 0xd6, 0x1a, 0x0a, 0xac, 0xbb, 0x56,
	0xca, 0xa9, 0x0b, 0x88, 0x35, 0x52, 0x4a, 0xb0, 0xff, 0x36, 0xd0, 0x96, 0xbe, 0x35, 0x7e, 0x81,
	0xaa, 0x87, 0x52, 0x12, 0xef, 0xf2, 0x78, 0x16, 0xc5, 0xdc, 0x32, 0xf6, 0xcc, 0xfd, 0x4d, 0xb7,
	0x75, 0x9d, 0x9c, 0xac, 0x41, 0x60, 0xa9, 0xe3, 0xab, 0x35, 0x8d, 0xa6, 0xb7, 0xe0, 0x23, 0xb4,
	0x95, 0x84, 0x63, 0xca, 0x08, 0x93, 0x30, 0xb1, 0x8a, 0xdb, 0x4e, 0x11, 0xbb, 0x29, 0x42, 0xc2,
	0xa2, 0xc6, 0xb8, 0xd5, 0x84, 0x4f, 0xd1, 0x83, 0x61, 0x1c, 0x52, 0x61, 0x99, 0x7b, 0xe6, 0x7e,
	0xb5, 0xf7, 0x28, 0x3f, 0x62, 0xa2, 0x55, 0x2d, 0x82, 0x2c, 0x75, 0xbc, 0x46, 0x62, 0xe7, 0xce,
	0x4c, 0x75, 0x68, 0xc8, 0x04, 0x61, 0xff, 0x6c, 0x22, 0x94, 0x77, 0xe1, 0x31, 0x2a, 0x1f, 0x7a,
	0xca, 0x99, 0xe0, 0x86, 0x4d, 0xf7, 0xf3, 0x3f, 0x7e, 0x79, 0xbc, 0x37, 0x92, 0xb3, 0x01, 0x8b,
	0xa7, 0xfb, 0x79, 0x5d, 0xba, 0x51, 0x52, 0xfa, 0x71, 0xaa, 0xbe, 0x4e, 0x20, 0x4c, 0xf7, 0x90,
	0x7c, 0x3e, 0x4c, 0x59, 0xf8, 0x08, 0x99, 0xa3, 0x99, 0x97, 0xda, 0x63, 0x37, 0x97, 0x7b, 0xa6,
	0x6c, 0x39, 0xa2, 0x21, 0xf5, 0x64, 0x34, 0x83, 0x0b, 0x01, 0x8e, 0x88, 0xe2, 0x99, 0x47, 0x35,
	0xad, 0xaa, 0x1b, 0x7f, 0x85, 0xcc, 0xbe, 0x90, 0xa9, 0x39, 0xee, 0x85, 0x7c, 0x94, 0x42, 0x76,
	0x26, 0x54, 0xc8, 0x80, 0x11, 0x4d, 0x11, 0x90, 0xfa, 0x42, 0xe2, 0x27, 0xa8, 0x78, 0xd2, 0x07,
	0x7f, 0x94, 0xdc, 0x9d, 0xe5, 0xa2, 0xfd, 0xbe, 0x9a, 0x4d, 0x27, 0x98, 0x68, 0x75, 0xc5, 0x93,
	0x3e, 0x3e, 0x40, 0x1b, 0x87, 0x9c, 0xbf, 0x26, 0x53, 0x6a, 0x3d, 0x80, 0x61, 0x34, 0x96, 0x8b,
	0x36, 0x26, 0x9c, 0x77, 0x18, 0x99, 0xea, 0xf2, 0xb2, 0x32, 0xfb, 0x33, 0xb4, 0xa5, 0x0f, 0x06,
	0x23, 0x54, 0x3e, 0x1f, 0x0c, 0xcf, 0x4e, 0xc6, 0xf5, 0x02, 0xae, 0xa0, 0x52, 0x7f, 0xf0, 0xfa,
	0xdb, 0xba, 0xa1, 0xb2, 0xc3, 0xc1, 0xe9, 0xe0, 0x68, 0x5c, 0x2f, 0xe2, 0x0d, 0x64, 0xbe, 0x7a,
	0x73, 0x5c, 0x37, 0x6d, 0x17, 0xd5, 0x6e, 0xfb, 0x13, 0x1f, 0x20, 0x94, 0x65, 0x4e, 0xfa, 0x70,
	0x1d, 0x25, 0xb7, 0xbe, 0x5c, 0xb4, 0xb7, 0x6e, 0x09, 0xd5, 0x6a, 0xec, 0x17, 0xb9, 0x5d, 0x5f,
	0x05, 0x42, 0xe2, 0x03, 0xb4, 0x99, 0xc5, 0x02, 0xcc, 0x5a, 0xed, 0xe1, 0xbb, 0x9f, 0xc3, 0x30,
	0x2f, 0xb2, 0x7f, 0x33, 0xd0, 0x76, 0x16, 0x0d, 0xde, 0x52, 0x26, 0xf1, 0x97, 0x68, 0x13, 0x7e,
	0xa8, 0x2f, 0x1e, 0x44, 0xd4, 0x7a, 0x35, 0xf8, 0xbe, 0x57, 0x59, 0xd7, 0x5a, 0x2e, 0xda, 0x8f,
	0xa8, 0x0a, 0x3b, 0x72, 0xce, 0xf5, 0xc1, 0xe4, 0xad, 0xf8, 0x65, 0xfe, 0xe8, 0xa4, 0x3e, 0x58,
	0x23, 0xc5, 0xfd, 0x20, 0x35, 0xed, 0x43, 0xe1, 0x77, 0x12, 0xdf, 0x6a, 0xb4, 0x15, 0xa0, 0xf7,
	0x6f, 0x11, 0x55, 0xb3, 0xe0, 0x90, 0x07, 0xf8, 0x53, 0x54, 0x3d, 0xa6, 0x72, 0xf5, 0xa8, 0xfd,
	0xff, 0x01, 0x6a, 0xae, 0xd9, 0xca, 0x2e, 0xe0, 0x67, 0x68, 0x5b, 0x8d, 0x69, 0x75, 0xfa, 0xbb,
	0x7d, 0x6b, 0x9e, 0x20, 0xd5, 0x61, 0x17, 0xf0, 0x73, 0x54, 0xfb, 0x06, 0x7c, 0x77, 0x7f, 0xf3,
	0xee, 0xdd, 0x66, 0x18, 0x87, 0x5d, 0x38, 0x30, 0xf0, 0x33, 0x54, 0xfb, 0x9a, 0x4f, 0x88, 0xa4,
	0x2b, 0xd1, 0x6b, 0x34, 0xae, 0xd7, 0xdd, 0xbc, 0xfa, 0xf3, 0xa7, 0xc7, 0x73, 0xed, 0x0d, 0x2f,
	0x85, 0xea, 0xb2, 0x4b, 0x3c, 0x12, 0x12, 0x97, 0x27, 0x34, 0xa4, 0x92, 0x62, 0x93, 0xc7, 0xb2,
	0xf9, 0x85, 0xf3, 0x63, 0xae, 0xa7, 0x9b, 0x3c, 0x1e, 0x57, 0xb7, 0x72, 0xca, 0xb5, 0x82, 0x13,
	0x8f, 0xde, 0x4d, 0x5f, 0xd9, 0x3b, 0xea, 0x5f, 0x44, 0x50, 0x2f, 0x9e, 0x05, 0x72, 0xee, 0xc0,
	0x75, 0x04, 0x54, 0xb8, 0xf5, 0xeb, 0x9b, 0x96, 0xf1, 0xee, 0xa6, 0x65, 0xfc, 0x75, 0xd3, 0x32,
	0x7e, 0xfd, 0xa7, 0x55, 0x38, 0x37, 0x2e, 0xca, 0x20, 0xf2, 0x93, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x3b, 0x40, 0xf6, 0x5d, 0x3e, 0x07, 0x00, 0x00,
}
