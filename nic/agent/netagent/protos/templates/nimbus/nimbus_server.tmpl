// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package nimbus is a auto generated package.
Input file: {{.Name}}
*/

package nimbus

import (
	"context"
	"errors"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/netagent/protos/netproto"
	"github.com/pensando/sw/venice/globals"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/memdb"
	"github.com/pensando/sw/venice/utils/rpckit"
)

{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}
       {{range $params}}
            {{$crudObject := .CrudObject}}

// Find{{$crudObject}} finds an {{$crudObject}} by object meta
func (ms *MbusServer) Find{{$crudObject}}(objmeta *api.ObjectMeta) (*netproto.{{$crudObject}}, error) {
	// find the object
	obj, err := ms.memDB.FindObject("{{$crudObject}}", objmeta)
	if err != nil {
		return nil, err
	}

	return {{$crudObject}}FromObj(obj)
}

// List{{$crudObject}}s lists all {{$crudObject}}s in the mbus
func (ms *MbusServer) List{{$crudObject}}s(ctx context.Context) ([]*netproto.{{$crudObject}}, error) {
	var objlist []*netproto.{{$crudObject}}

	// walk all objects
	objs := ms.memDB.ListObjects("{{$crudObject}}")
	for _, oo := range objs {
		obj, err := {{$crudObject}}FromObj(oo)
		if err == nil {
			objlist = append(objlist, obj)
		}
	}

	return objlist, nil
}

// {{$crudObject}}StatusReactor is the reactor interface implemented by controllers
type {{$crudObject}}StatusReactor interface {
	On{{$crudObject}}AgentStatusSet(nodeID string, objinfo *netproto.{{$crudObject}}) error
	On{{$crudObject}}AgentStatusDelete(nodeID string, objinfo *netproto.{{$crudObject}}) error
}

// {{$crudObject}}Topic is the {{$crudObject}} topic on message bus
type {{$crudObject}}Topic struct {
	grpcServer    *rpckit.RPCServer // gRPC server instance
	server        *MbusServer
	statusReactor {{$crudObject}}StatusReactor // status event reactor
}

// Add{{$crudObject}}Topic returns a network RPC server
func Add{{$crudObject}}Topic(server *MbusServer, reactor {{$crudObject}}StatusReactor) (*{{$crudObject}}Topic, error) {
	// RPC handler instance
	handler := {{$crudObject}}Topic{
		grpcServer: server.grpcServer,
		server:     server,
		statusReactor: reactor,
	}

	// register the RPC handlers
	if server.grpcServer != nil {
		netproto.Register{{$svcname}}Server(server.grpcServer.GrpcServer, &handler)
	}
	
	return &handler, nil
}

// Create{{$crudObject}} creates {{$crudObject}}
func (eh *{{$crudObject}}Topic) Create{{$crudObject}}(ctx context.Context, objinfo *netproto.{{$crudObject}}) (*netproto.{{$crudObject}}, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received Create{{$crudObject}} from node %v: {%+v}", nodeID, objinfo)

	// add object to node state
	err := eh.server.AddNodeState(nodeID, objinfo)
	if err != nil {
		log.Errorf("Error adding node state to memdb. Err: %v. node %v, Obj: {%+v}", err, nodeID, objinfo)
		return nil, err
	}

	// increment stats
	eh.server.Stats("{{$crudObject}}", "AgentCreate").Inc()

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.On{{$crudObject}}AgentStatusSet(nodeID, objinfo)
	}

	return objinfo, nil
}

// Update{{$crudObject}} updates {{$crudObject}}
func (eh *{{$crudObject}}Topic) Update{{$crudObject}}(ctx context.Context, objinfo *netproto.{{$crudObject}}) (*netproto.{{$crudObject}}, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received Update{{$crudObject}} from node %v: {%+v}", nodeID, objinfo)

	// add object to node state
	err := eh.server.AddNodeState(nodeID, objinfo)
	if err != nil {
		log.Errorf("Error adding node state to memdb. Err: %v. node %v, Obj: {%+v}", err, nodeID, objinfo)
		return nil, err
	}

	// incr stats
	eh.server.Stats("{{$crudObject}}", "AgentUpdate").Inc()

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.On{{$crudObject}}AgentStatusSet(nodeID, objinfo)
	}

	return objinfo, nil
}

// Delete{{$crudObject}} deletes an {{$crudObject}}
func (eh *{{$crudObject}}Topic) Delete{{$crudObject}}(ctx context.Context, objinfo *netproto.{{$crudObject}}) (*netproto.{{$crudObject}}, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received Delete{{$crudObject}} from node %v: {%+v}", nodeID, objinfo)

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.On{{$crudObject}}AgentStatusDelete(nodeID, objinfo)
	}

	// incr stats
	eh.server.Stats("{{$crudObject}}", "AgentDelete").Inc()

	// delete node state from the memdb
	err := eh.server.DelNodeState(nodeID, objinfo)
	if err != nil {
		log.Errorf("Error adding node state to memdb. Err: %v. node %v, Obj: {%+v}", err, nodeID, objinfo)
		return nil, err
	}

	return objinfo, nil
}

// {{$crudObject}}FromObj converts memdb object to {{$crudObject}}
func {{$crudObject}}FromObj(obj memdb.Object) (*netproto.{{$crudObject}}, error) {
	switch obj.(type) {
	case *netproto.{{$crudObject}}:
		eobj := obj.(*netproto.{{$crudObject}})
		return eobj, nil
	default:
		return nil, ErrIncorrectObjectType
	}
}

// Get{{$crudObject}} returns a specific {{$crudObject}}
func (eh *{{$crudObject}}Topic) Get{{$crudObject}}(ctx context.Context, objmeta *api.ObjectMeta) (*netproto.{{$crudObject}}, error) {
	// find the object
	obj, err := eh.server.memDB.FindObject("{{$crudObject}}", objmeta)
	if err != nil {
		return nil, err
	}

	return {{$crudObject}}FromObj(obj)
}

// List{{$crudObject}}s lists all {{$crudObject}}s matching object selector
func (eh *{{$crudObject}}Topic) List{{$crudObject}}s(ctx context.Context, objsel *api.ObjectMeta) (*netproto.{{$crudObject}}List, error) {
	var objlist netproto.{{$crudObject}}List

	// walk all objects
	objs := eh.server.memDB.ListObjects("{{$crudObject}}")
	for _, oo := range objs {
		obj, err := {{$crudObject}}FromObj(oo)
		if err == nil {
			objlist.{{$crudObject}}s = append(objlist.{{$crudObject}}s, obj)
		}
	}

	return &objlist, nil
}

// Watch{{$crudObject}}s watches {{$crudObject}}s and sends streaming resp
func (eh *{{$crudObject}}Topic) Watch{{$crudObject}}s(ometa *api.ObjectMeta, stream netproto.{{$svcname}}_Watch{{$crudObject}}sServer) error {
	// watch for changes
	watchChan := make(chan memdb.Event, memdb.WatchLen)
	defer close(watchChan)
	eh.server.memDB.WatchObjects("{{$crudObject}}", watchChan)
	defer eh.server.memDB.StopWatchObjects("{{$crudObject}}", watchChan)

	// get a list of all {{$crudObject}}s
	objlist, err := eh.List{{$crudObject}}s(context.Background(), ometa)
	if err != nil {
		log.Errorf("Error getting a list of objects. Err: %v", err)
		return err
	}

	// increment stats
	eh.server.Stats("{{$crudObject}}", "ActiveWatch").Inc()
	eh.server.Stats("{{$crudObject}}", "WatchConnect").Inc()
	defer eh.server.Stats("{{$crudObject}}", "ActiveWatch").Dec()
	defer eh.server.Stats("{{$crudObject}}", "WatchDisconnect").Inc()

	ctx := stream.Context()

	// walk all {{$crudObject}}s and send it out
	for _, obj := range objlist.{{$crudObject}}s {
		watchEvt := netproto.{{$crudObject}}Event{
			EventType: api.EventType_CreateEvent,
			{{$crudObject}}:  *obj,
		}
		err = stream.Send(&watchEvt)
		if err != nil {
			log.Errorf("Error sending {{$crudObject}} to stream. Err: %v", err)
			return err
		}
	}

	// loop forever on watch channel
	for {
		select {
		// read from channel
		case evt, ok := <-watchChan:
			if !ok {
				log.Errorf("Error reading from channel. Closing watch")
				return errors.New("Error reading from channel")
			}

			// convert the events
			var etype api.EventType
			switch evt.EventType {
			case memdb.CreateEvent:
				etype = api.EventType_CreateEvent
			case memdb.UpdateEvent:
				etype = api.EventType_UpdateEvent
			case memdb.DeleteEvent:
				etype = api.EventType_DeleteEvent
			}

			// get the object
			obj, err := {{$crudObject}}FromObj(evt.Obj)
			if err != nil {
				return err
			}

			// convert to netproto format
			watchEvt := netproto.{{$crudObject}}Event{
				EventType: etype,
				{{$crudObject}}:  *obj,
			}

			// streaming send
			err = stream.Send(&watchEvt)
			if err != nil {
				log.Errorf("Error sending {{$crudObject}} to stream. Err: %v", err)
				return err
			}
		case <-ctx.Done():
			return ctx.Err()
		}
	}

	// done
}

       {{end}}       
    {{end}}
{{end}}
