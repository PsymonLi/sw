// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package nimbus is a auto generated package.
Input file: app.proto
*/

package nimbus

import (
	"context"
	"errors"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/netagent/protos/netproto"
	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/memdb"
	"github.com/pensando/sw/venice/utils/netutils"
	"github.com/pensando/sw/venice/utils/rpckit"
)

// FindApp finds an App by object meta
func (ms *MbusServer) FindApp(objmeta *api.ObjectMeta) (*netproto.App, error) {
	// find the object
	obj, err := ms.memDB.FindObject("App", objmeta)
	if err != nil {
		return nil, err
	}

	return AppFromObj(obj)
}

// ListApps lists all Apps in the mbus
func (ms *MbusServer) ListApps(ctx context.Context) ([]*netproto.App, error) {
	var objlist []*netproto.App

	// walk all objects
	objs := ms.memDB.ListObjects("App")
	for _, oo := range objs {
		obj, err := AppFromObj(oo)
		if err == nil {
			objlist = append(objlist, obj)
		}
	}

	return objlist, nil
}

// AppStatusReactor is the reactor interface implemented by controllers
type AppStatusReactor interface {
	OnAppAgentStatusSet(nodeID string, objinfo *netproto.App) error
	OnAppAgentStatusDelete(nodeID string, objinfo *netproto.App) error
}

// AppTopic is the App topic on message bus
type AppTopic struct {
	grpcServer    *rpckit.RPCServer // gRPC server instance
	server        *MbusServer
	statusReactor AppStatusReactor // status event reactor
}

// AddAppTopic returns a network RPC server
func AddAppTopic(server *MbusServer, reactor AppStatusReactor) (*AppTopic, error) {
	// RPC handler instance
	handler := AppTopic{
		grpcServer:    server.grpcServer,
		server:        server,
		statusReactor: reactor,
	}

	// register the RPC handlers
	if server.grpcServer != nil {
		netproto.RegisterAppApiServer(server.grpcServer.GrpcServer, &handler)
	}

	return &handler, nil
}

// CreateApp creates App
func (eh *AppTopic) CreateApp(ctx context.Context, objinfo *netproto.App) (*netproto.App, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received CreateApp from node %v: {%+v}", nodeID, objinfo)

	// add object to node state
	err := eh.server.AddNodeState(nodeID, objinfo)
	if err != nil {
		log.Errorf("Error adding node state to memdb. Err: %v. node %v, Obj: {%+v}", err, nodeID, objinfo)
		return nil, err
	}

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.OnAppAgentStatusSet(nodeID, objinfo)
	}

	return objinfo, nil
}

// UpdateApp creates App
func (eh *AppTopic) UpdateApp(ctx context.Context, objinfo *netproto.App) (*netproto.App, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received UpdateApp from node %v: {%+v}", nodeID, objinfo)

	// add object to node state
	err := eh.server.AddNodeState(nodeID, objinfo)
	if err != nil {
		log.Errorf("Error adding node state to memdb. Err: %v. node %v, Obj: {%+v}", err, nodeID, objinfo)
		return nil, err
	}

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.OnAppAgentStatusSet(nodeID, objinfo)
	}

	return objinfo, nil
}

// DeleteApp deletes an App
func (eh *AppTopic) DeleteApp(ctx context.Context, objinfo *netproto.App) (*netproto.App, error) {
	nodeID := netutils.GetNodeUUIDFromCtx(ctx)
	log.Infof("Received DeleteApp from node %v: {%+v}", nodeID, objinfo)

	// trigger callbacks
	if eh.statusReactor != nil {
		eh.statusReactor.OnAppAgentStatusDelete(nodeID, objinfo)
	}

	// delete node state from the memdb
	err := eh.server.DelNodeState(nodeID, objinfo)
	if err != nil {
		log.Errorf("Error adding node state to memdb. Err: %v. node %v, Obj: {%+v}", err, nodeID, objinfo)
		return nil, err
	}

	return objinfo, nil
}

// AppFromObj converts memdb object to App
func AppFromObj(obj memdb.Object) (*netproto.App, error) {
	switch obj.(type) {
	case *netproto.App:
		eobj := obj.(*netproto.App)
		return eobj, nil
	default:
		return nil, ErrIncorrectObjectType
	}
}

// GetApp returns a specific App
func (eh *AppTopic) GetApp(ctx context.Context, objmeta *api.ObjectMeta) (*netproto.App, error) {
	// find the object
	obj, err := eh.server.memDB.FindObject("App", objmeta)
	if err != nil {
		return nil, err
	}

	return AppFromObj(obj)
}

// ListApps lists all Apps matching object selector
func (eh *AppTopic) ListApps(ctx context.Context, objsel *api.ObjectMeta) (*netproto.AppList, error) {
	var objlist netproto.AppList

	// walk all objects
	objs := eh.server.memDB.ListObjects("App")
	for _, oo := range objs {
		obj, err := AppFromObj(oo)
		if err == nil {
			objlist.Apps = append(objlist.Apps, obj)
		}
	}

	return &objlist, nil
}

// WatchApps watches Apps and sends streaming resp
func (eh *AppTopic) WatchApps(ometa *api.ObjectMeta, stream netproto.AppApi_WatchAppsServer) error {
	// watch for changes
	watchChan := make(chan memdb.Event, memdb.WatchLen)
	defer close(watchChan)
	eh.server.memDB.WatchObjects("App", watchChan)
	defer eh.server.memDB.StopWatchObjects("App", watchChan)

	// get a list of all Apps
	objlist, err := eh.ListApps(context.Background(), ometa)
	if err != nil {
		log.Errorf("Error getting a list of objects. Err: %v", err)
		return err
	}

	ctx := stream.Context()

	// walk all Apps and send it out
	for _, obj := range objlist.Apps {
		watchEvt := netproto.AppEvent{
			EventType: api.EventType_CreateEvent,
			App:       *obj,
		}
		err = stream.Send(&watchEvt)
		if err != nil {
			log.Errorf("Error sending App to stream. Err: %v", err)
			return err
		}
	}

	// loop forever on watch channel
	for {
		select {
		// read from channel
		case evt, ok := <-watchChan:
			if !ok {
				log.Errorf("Error reading from channel. Closing watch")
				return errors.New("Error reading from channel")
			}

			// convert the events
			var etype api.EventType
			switch evt.EventType {
			case memdb.CreateEvent:
				etype = api.EventType_CreateEvent
			case memdb.UpdateEvent:
				etype = api.EventType_UpdateEvent
			case memdb.DeleteEvent:
				etype = api.EventType_DeleteEvent
			}

			// get the object
			obj, err := AppFromObj(evt.Obj)
			if err != nil {
				return err
			}

			// convert to netproto format
			watchEvt := netproto.AppEvent{
				EventType: etype,
				App:       *obj,
			}

			// streaming send
			err = stream.Send(&watchEvt)
			if err != nil {
				log.Errorf("Error sending App to stream. Err: %v", err)
				return err
			}
		case <-ctx.Done():
			return ctx.Err()
		}
	}

	// done
}
