// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

package nimbus

import (
	"errors"

	"github.com/pensando/sw/venice/utils/log"
	"github.com/pensando/sw/venice/utils/memdb"
	"github.com/pensando/sw/venice/utils/rpckit"
)

var (
	// ErrIncorrectObjectType is returned when type deferencing from memdb.Object is of invalid type
	ErrIncorrectObjectType = errors.New("incorrect object type")
)

// MbusServer is the message bus server
type MbusServer struct {
	grpcServer *rpckit.RPCServer // gRPC server instance
	listenURL  string            // URL to listen on
	memDB      *memdb.Memdb      // database of all objects
}

// AddObject adds object to mbus
func (ms *MbusServer) AddObject(obj memdb.Object) error {
	return ms.memDB.AddObject(obj)
}

// UpdateObject updates an object in mbus
func (ms *MbusServer) UpdateObject(obj memdb.Object) error {
	return ms.memDB.UpdateObject(obj)
}

// FindObject finds the memdb object
func (ms *MbusServer) FindObject(obj memdb.Object) (memdb.Object, error) {
	return ms.memDB.FindObject(obj.GetObjectKind(), obj.GetObjectMeta())
}

// DeleteObject deletes an object from mbus
func (ms *MbusServer) DeleteObject(obj memdb.Object) error {
	return ms.memDB.DeleteObject(obj)
}

// AddNodeState adds node state to an object
func (ms *MbusServer) AddNodeState(nodeID string, obj memdb.Object) error {
	return ms.memDB.AddNodeState(nodeID, obj)
}

// DelNodeState deletes node state from an object
func (ms *MbusServer) DelNodeState(nodeID string, obj memdb.Object) error {
	return ms.memDB.DelNodeState(nodeID, obj)
}

// Start starts the RPC server
func (ms *MbusServer) Start() {
	ms.grpcServer.Start()
}

// Stop stops the rpc server
func (ms *MbusServer) Stop() error {
	// stop the rpc server
	return ms.grpcServer.Stop()
}

// NewMbusServer creates a new instance of RPC server
func NewMbusServer(svcName, listenURL string) (*MbusServer, error) {

	mbusServer := MbusServer{
		memDB: memdb.NewMemdb(),
	}

	// create an RPC server if URL is specified
	if listenURL != "" {
		grpcServer, err := rpckit.NewRPCServer(svcName, listenURL)
		if err != nil {
			log.Fatalf("Error creating rpc server. Err; %v", err)
		}
		mbusServer.grpcServer = grpcServer
	}

	return &mbusServer, nil
}
