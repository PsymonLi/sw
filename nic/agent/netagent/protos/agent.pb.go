// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agent.proto

/*
	Package state is a generated protocol buffer package.

	Service name

	It is generated from these files:
		agent.proto

	It has these top-level messages:
		Agent
		AgentSpec
		AgentStatus
*/
package state

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/venice/utils/apigen/annotations"
import _ "github.com/gogo/protobuf/gogoproto"
import api "github.com/pensando/sw/api"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Agent Modes
type AgentMode int32

const (
	AgentMode_CLASSIC AgentMode = 0
	AgentMode_MANAGED AgentMode = 1
)

var AgentMode_name = map[int32]string{
	0: "CLASSIC",
	1: "MANAGED",
}
var AgentMode_value = map[string]int32{
	"CLASSIC": 0,
	"MANAGED": 1,
}

func (x AgentMode) String() string {
	return proto.EnumName(AgentMode_name, int32(x))
}
func (AgentMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorAgent, []int{0} }

// Agent config object
type Agent struct {
	api.TypeMeta   `protobuf:"bytes,1,opt,name=TypeMeta,embedded=TypeMeta" json:",inline"`
	api.ObjectMeta `protobuf:"bytes,2,opt,name=ObjectMeta,embedded=ObjectMeta" json:"meta,omitempty"`
	// AgentSpec has agent configuration
	Spec AgentSpec `protobuf:"bytes,3,opt,name=Spec" json:"spec,omitempty"`
	// Status contains the current state of the NIC.
	Status AgentStatus `protobuf:"bytes,4,opt,name=Status" json:"status,omitempty"`
}

func (m *Agent) Reset()                    { *m = Agent{} }
func (m *Agent) String() string            { return proto.CompactTextString(m) }
func (*Agent) ProtoMessage()               {}
func (*Agent) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{0} }

func (m *Agent) GetSpec() AgentSpec {
	if m != nil {
		return m.Spec
	}
	return AgentSpec{}
}

func (m *Agent) GetStatus() AgentStatus {
	if m != nil {
		return m.Status
	}
	return AgentStatus{}
}

// AgentSpec contains initial bootstrap configuration of the Naples I/O subsystem
type AgentSpec struct {
	// Agent Mode. ToDo Add VeniceIP
	Mode AgentMode `protobuf:"varint,1,opt,name=Mode,proto3,enum=nagent.AgentMode" json:"mode,omitempty"`
}

func (m *AgentSpec) Reset()                    { *m = AgentSpec{} }
func (m *AgentSpec) String() string            { return proto.CompactTextString(m) }
func (*AgentSpec) ProtoMessage()               {}
func (*AgentSpec) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{1} }

func (m *AgentSpec) GetMode() AgentMode {
	if m != nil {
		return m.Mode
	}
	return AgentMode_CLASSIC
}

// AgentStatus contains agent status.
type AgentStatus struct {
}

func (m *AgentStatus) Reset()                    { *m = AgentStatus{} }
func (m *AgentStatus) String() string            { return proto.CompactTextString(m) }
func (*AgentStatus) ProtoMessage()               {}
func (*AgentStatus) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{2} }

func init() {
	proto.RegisterType((*Agent)(nil), "nagent.Agent")
	proto.RegisterType((*AgentSpec)(nil), "nagent.AgentSpec")
	proto.RegisterType((*AgentStatus)(nil), "nagent.AgentStatus")
	proto.RegisterEnum("nagent.AgentMode", AgentMode_name, AgentMode_value)
}
func (m *Agent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAgent(dAtA, i, uint64(m.TypeMeta.Size()))
	n1, err := m.TypeMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintAgent(dAtA, i, uint64(m.ObjectMeta.Size()))
	n2, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x1a
	i++
	i = encodeVarintAgent(dAtA, i, uint64(m.Spec.Size()))
	n3, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x22
	i++
	i = encodeVarintAgent(dAtA, i, uint64(m.Status.Size()))
	n4, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *AgentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAgent(dAtA, i, uint64(m.Mode))
	}
	return i, nil
}

func (m *AgentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintAgent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Agent) Size() (n int) {
	var l int
	_ = l
	l = m.TypeMeta.Size()
	n += 1 + l + sovAgent(uint64(l))
	l = m.ObjectMeta.Size()
	n += 1 + l + sovAgent(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovAgent(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovAgent(uint64(l))
	return n
}

func (m *AgentSpec) Size() (n int) {
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovAgent(uint64(m.Mode))
	}
	return n
}

func (m *AgentStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovAgent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAgent(x uint64) (n int) {
	return sovAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Agent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TypeMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (AgentMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAgent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAgent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAgent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("agent.proto", fileDescriptorAgent) }

var fileDescriptorAgent = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x93, 0x75, 0x37, 0xab, 0x13, 0x76, 0xad, 0x59, 0xd0, 0xd8, 0x8b, 0x54, 0x0a, 0x0b,
	0x22, 0x6b, 0x06, 0xf4, 0x4e, 0x50, 0x48, 0x6a, 0x11, 0xff, 0x54, 0xa5, 0xf1, 0xca, 0xbb, 0x49,
	0x72, 0x1a, 0x47, 0x9a, 0x99, 0xc1, 0x99, 0x28, 0x7d, 0x00, 0xdf, 0xc1, 0x27, 0xf0, 0x59, 0x7a,
	0x59, 0x7c, 0x80, 0x22, 0xf5, 0xce, 0xa7, 0x90, 0x39, 0x89, 0x35, 0x0a, 0xde, 0xf5, 0x3b, 0xdf,
	0x9c, 0xdf, 0xfc, 0x3a, 0x21, 0x3e, 0xab, 0x40, 0x98, 0x58, 0x7d, 0x90, 0x46, 0x06, 0x9e, 0xc0,
	0x34, 0x9c, 0x56, 0xdc, 0xbc, 0x6b, 0xf2, 0xb8, 0x90, 0x35, 0x55, 0x20, 0x34, 0x13, 0xa5, 0xa4,
	0xfa, 0x13, 0xfd, 0x08, 0x82, 0x17, 0x40, 0x1b, 0xc3, 0x97, 0x9a, 0x32, 0xc5, 0x2b, 0x10, 0x94,
	0x09, 0x21, 0x0d, 0x33, 0x5c, 0x0a, 0x4d, 0xb9, 0x28, 0x96, 0x4d, 0x09, 0xba, 0xc5, 0x0d, 0xef,
	0xf6, 0x30, 0x95, 0xac, 0x24, 0xc5, 0x71, 0xde, 0x2c, 0x30, 0x61, 0xc0, 0x5f, 0xdd, 0xf1, 0xf3,
	0xff, 0xdc, 0xca, 0x14, 0xa7, 0x35, 0x18, 0xd6, 0x1e, 0x1b, 0x7f, 0x3d, 0x20, 0x47, 0x89, 0xd5,
	0x0c, 0x1e, 0x91, 0xcb, 0x6f, 0x56, 0x0a, 0x66, 0x60, 0x58, 0xe8, 0xde, 0x72, 0x6f, 0xfb, 0xf7,
	0x4e, 0x62, 0xa6, 0x78, 0xfc, 0x7b, 0x98, 0x9e, 0xad, 0xb7, 0x23, 0x67, 0xb3, 0x1d, 0xb9, 0x3f,
	0xb7, 0xa3, 0xe3, 0x0b, 0x2e, 0x96, 0x5c, 0xc0, 0x7c, 0xbf, 0x13, 0x3c, 0x27, 0xe4, 0x55, 0xfe,
	0x1e, 0x0a, 0x83, 0x84, 0x03, 0x24, 0x5c, 0x45, 0xc2, 0x9f, 0x71, 0x3a, 0xec, 0x31, 0x4e, 0xad,
	0xc6, 0x85, 0xac, 0xb9, 0x81, 0x5a, 0x99, 0xd5, 0xbc, 0xb7, 0x1e, 0x3c, 0x24, 0x87, 0x99, 0x82,
	0x22, 0xbc, 0x84, 0x98, 0x6b, 0x71, 0xfb, 0x94, 0x31, 0x9a, 0xda, 0x22, 0xbd, 0x6e, 0x41, 0x16,
	0xa2, 0x15, 0x14, 0x3d, 0x08, 0xae, 0x05, 0x53, 0xe2, 0x65, 0x86, 0x99, 0x46, 0x87, 0x87, 0x08,
	0x38, 0xfb, 0x1b, 0x80, 0x55, 0x1a, 0x76, 0x88, 0x81, 0xc6, 0xdc, 0x83, 0x74, 0xcb, 0x0f, 0xc8,
	0xb7, 0xcf, 0x37, 0xbd, 0x42, 0x8a, 0x05, 0xaf, 0xc6, 0xcf, 0xc8, 0x95, 0xfd, 0xed, 0x56, 0x6f,
	0x26, 0x4b, 0xc0, 0x77, 0x3a, 0xfd, 0x47, 0xcf, 0x16, 0xa8, 0xd7, 0xfe, 0x47, 0x59, 0x42, 0x5f,
	0xcf, 0xb6, 0xe3, 0x13, 0xe2, 0xf7, 0x44, 0xee, 0x9c, 0x77, 0x68, 0xdb, 0x05, 0x3e, 0x39, 0x9e,
	0xbc, 0x48, 0xb2, 0xec, 0xe9, 0x64, 0xe0, 0xd8, 0x30, 0x4b, 0x5e, 0x26, 0x4f, 0xa6, 0x8f, 0x07,
	0x6e, 0x7a, 0x63, 0xbd, 0x8b, 0xdc, 0xcd, 0x2e, 0x72, 0xbf, 0xef, 0x22, 0xf7, 0xcb, 0x8f, 0xc8,
	0x79, 0x7b, 0x64, 0xcd, 0xe1, 0xb5, 0x93, 0x7b, 0xf8, 0x31, 0xef, 0xff, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0xe0, 0xb7, 0x07, 0x1f, 0x80, 0x02, 0x00, 0x00,
}
