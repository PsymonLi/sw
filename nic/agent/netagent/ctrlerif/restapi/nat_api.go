// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: nat.proto
*/
package restapi

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/gogo/protobuf/types"
	"github.com/gorilla/mux"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/venice/ctrler/npm/rpcserver/netproto"
)

// addNatBindingAPIRoutes adds NatBinding routes
func addNatBindingAPIRoutes(r *mux.Router, srv *RestServer) {

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listNatBindingHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.postNatBindingHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.NameSpace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.putNatBindingHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.NameSpace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.deleteNatBindingHandler))

}

func (s *RestServer) listNatBindingHandler(r *http.Request) (interface{}, error) {
	return s.agent.ListNatBinding(), nil
}

func (s *RestServer) postNatBindingHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.NatBinding
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	c, _ := types.TimestampProto(time.Now())
	o.CreationTime = api.Timestamp{
		Timestamp: *c,
	}
	o.ModTime = api.Timestamp{
		Timestamp: *c,
	}

	err = s.agent.CreateNatBinding(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = fmt.Sprintf("%s%s/%s/%s", r.RequestURI, o.Tenant, o.Namespace, o.Name)

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) putNatBindingHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.NatBinding
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	m, _ := types.TimestampProto(time.Now())
	o.ModTime = api.Timestamp{
		Timestamp: *m,
	}
	err = s.agent.UpdateNatBinding(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = r.RequestURI

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) deleteNatBindingHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.NatBinding
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	err = s.agent.DeleteNatBinding(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = r.RequestURI

	res.StatusCode = http.StatusOK
	return res, err
}

// addNatPolicyAPIRoutes adds NatPolicy routes
func addNatPolicyAPIRoutes(r *mux.Router, srv *RestServer) {

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listNatPolicyHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.postNatPolicyHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.putNatPolicyHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.deleteNatPolicyHandler))

}

func (s *RestServer) listNatPolicyHandler(r *http.Request) (interface{}, error) {
	return s.agent.ListNatPolicy(), nil
}

func (s *RestServer) postNatPolicyHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.NatPolicy
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	c, _ := types.TimestampProto(time.Now())
	o.CreationTime = api.Timestamp{
		Timestamp: *c,
	}
	o.ModTime = api.Timestamp{
		Timestamp: *c,
	}

	err = s.agent.CreateNatPolicy(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = fmt.Sprintf("%s%s/%s/%s", r.RequestURI, o.Tenant, o.Namespace, o.Name)

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) putNatPolicyHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.NatPolicy
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	m, _ := types.TimestampProto(time.Now())
	o.ModTime = api.Timestamp{
		Timestamp: *m,
	}
	err = s.agent.UpdateNatPolicy(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = r.RequestURI

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) deleteNatPolicyHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.NatPolicy
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	err = s.agent.DeleteNatPolicy(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = r.RequestURI

	res.StatusCode = http.StatusOK
	return res, err
}

// addNatPoolAPIRoutes adds NatPool routes
func addNatPoolAPIRoutes(r *mux.Router, srv *RestServer) {

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listNatPoolHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.postNatPoolHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.NameSpace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.putNatPoolHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.NameSpace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.deleteNatPoolHandler))

}

func (s *RestServer) listNatPoolHandler(r *http.Request) (interface{}, error) {
	return s.agent.ListNatPool(), nil
}

func (s *RestServer) postNatPoolHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.NatPool
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	c, _ := types.TimestampProto(time.Now())
	o.CreationTime = api.Timestamp{
		Timestamp: *c,
	}
	o.ModTime = api.Timestamp{
		Timestamp: *c,
	}

	err = s.agent.CreateNatPool(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = fmt.Sprintf("%s%s/%s/%s", r.RequestURI, o.Tenant, o.Namespace, o.Name)

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) putNatPoolHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.NatPool
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	m, _ := types.TimestampProto(time.Now())
	o.ModTime = api.Timestamp{
		Timestamp: *m,
	}
	err = s.agent.UpdateNatPool(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = r.RequestURI

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) deleteNatPoolHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.NatPool
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	err = s.agent.DeleteNatPool(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = r.RequestURI

	res.StatusCode = http.StatusOK
	return res, err
}
