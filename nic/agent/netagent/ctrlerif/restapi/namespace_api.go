// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: namespace.proto
*/
package restapi

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/gorilla/mux"

	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/venice/ctrler/npm/rpcserver/netproto"
)

// addNamespaceAPIRoutes adds Namespace routes
func addNamespaceAPIRoutes(r *mux.Router, srv *RestServer) {

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.listNamespaceHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.postNamespaceHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.deleteNamespaceHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.putNamespaceHandler))

}

func (s *RestServer) listNamespaceHandler(r *http.Request) (interface{}, error) {
	return s.agent.ListNamespace(), nil
}

func (s *RestServer) postNamespaceHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.Namespace
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	err = s.agent.CreateNamespace(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = fmt.Sprintf("%s%s/%s", r.RequestURI, o.Tenant, o.Name)

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) deleteNamespaceHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.Namespace
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	err = s.agent.DeleteNamespace(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = r.RequestURI

	res.StatusCode = http.StatusOK
	return res, err
}

func (s *RestServer) putNamespaceHandler(r *http.Request) (interface{}, error) {
	var res Response
	var o netproto.Namespace
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	err = s.agent.UpdateNamespace(&o)

	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}

	res.SelfLink = r.RequestURI

	res.StatusCode = http.StatusOK
	return res, err
}
