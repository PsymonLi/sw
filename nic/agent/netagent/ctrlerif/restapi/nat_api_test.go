// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: nat.proto
*/
package restapi

import (
	"testing"

	api "github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/ctrler/npm/rpcserver/netproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

func TestNatPolicyList(t *testing.T) {
	t.Parallel()
	var ok bool
	var natpolicyList []*netproto.NatPolicy

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/natpolicies/", &natpolicyList)

	AssertOk(t, err, "Error getting natpolicys from the REST Server")
	for _, o := range natpolicyList {
		if o.Name == "preCreatedNatPolicy" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedNatPolicy in Response: %v", natpolicyList)
	}

}

func TestNatPolicyPost(t *testing.T) {
	t.Parallel()
	var resp error
	var ok bool
	var natpolicyList []*netproto.NatPolicy

	postData := netproto.NatPolicy{
		TypeMeta: api.TypeMeta{Kind: "NatPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostNatPolicy",
		},
		Spec: netproto.NatPolicySpec{
			Rules: []netproto.NatRule{
				{
					Src: &netproto.MatchSelector{
						MatchType: "IPRange",
						Match:     "10.0.0.0 - 10.0.1.0",
					},
					Dst: &netproto.MatchSelector{
						MatchType: "IPRange",
						Match:     "192.168.0.1 - 192.168.1.0",
					},
					NatPool: "preCreatedNatPool",
				},
			},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/natpolicies/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/natpolicies/", &natpolicyList)

	AssertOk(t, err, "Error posting natpolicy to REST Server")
	AssertOk(t, getErr, "Error getting natpolicys from the REST Server")
	for _, o := range natpolicyList {
		if o.Name == "testPostNatPolicy" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostNatPolicy in Response: %v", natpolicyList)
	}

}

func TestNatPolicyUpdate(t *testing.T) {
	t.Parallel()
	var resp error
	var natpolicyList []*netproto.NatPolicy

	var actualNatPolicySpec netproto.NatPolicySpec
	updatedNatPolicySpec := netproto.NatPolicySpec{
		Rules: []netproto.NatRule{
			{
				NatPool: "updatedNatPool",
			},
		},
	}
	putData := netproto.NatPolicy{
		TypeMeta: api.TypeMeta{Kind: "Namespace"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Name:      "preCreatedNatPolicy",
			Namespace: "default",
		},
		Spec: updatedNatPolicySpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/natpolicies/preCreatedTenant/preCreatedNamespace/preCreatedNatPolicy", &putData, &resp)
	AssertOk(t, err, "Error updating natpolicy to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/natpolicies/", &natpolicyList)
	AssertOk(t, getErr, "Error getting natpolicys from the REST Server")
	for _, o := range natpolicyList {
		if o.Name == "preCreatedNatPolicy" {
			actualNatPolicySpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedNatPolicySpec, actualNatPolicySpec, "Could not validate updated spec.")

}

func TestNatPolicyDelete(t *testing.T) {
	t.Parallel()
	var resp error
	var found bool
	var natpolicyList []*netproto.NatPolicy

	deleteData := netproto.NatPolicy{
		TypeMeta: api.TypeMeta{Kind: "NatPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteNatPolicy",
		},
		Spec: netproto.NatPolicySpec{
			Rules: []netproto.NatRule{
				{
					NatPool: "preCreatedNatPool",
				},
			},
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/natpolicies/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/natpolicies/default/default/testDeleteNatPolicy", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/natpolicies/", &natpolicyList)

	AssertOk(t, postErr, "Error posting natpolicy to REST Server")
	AssertOk(t, err, "Error deleting natpolicy from REST Server")
	AssertOk(t, getErr, "Error getting natpolicys from the REST Server")
	for _, o := range natpolicyList {
		if o.Name == "testDeleteNatPolicy" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteNatPolicy in Response after deleting: %v", natpolicyList)
	}

}

func TestNatPoolList(t *testing.T) {
	t.Parallel()
	var ok bool
	var natpoolList []*netproto.NatPool

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/natpools/", &natpoolList)

	AssertOk(t, err, "Error getting natpools from the REST Server")
	for _, o := range natpoolList {
		if o.Name == "preCreatedNatPool" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedNatPool in Response: %v", natpoolList)
	}

}

func TestNatPoolPost(t *testing.T) {
	t.Parallel()
	var resp error
	var ok bool
	var natpoolList []*netproto.NatPool

	postData := netproto.NatPool{
		TypeMeta: api.TypeMeta{Kind: "NatPool"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostNatPool",
		},
		Spec: netproto.NatPoolSpec{
			NetworkName: "preCreatedNetwork",
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/natpools/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/natpools/", &natpoolList)

	AssertOk(t, err, "Error posting natpool to REST Server")
	AssertOk(t, getErr, "Error getting natpools from the REST Server")
	for _, o := range natpoolList {
		if o.Name == "testPostNatPool" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostNatPool in Response: %v", natpoolList)
	}

}

func TestNatPoolUpdate(t *testing.T) {
	t.Parallel()
	var resp error
	var natpoolList []*netproto.NatPool

	var actualNatPoolSpec netproto.NatPoolSpec
	updatedNatPoolSpec := netproto.NatPoolSpec{
		NetworkName: "updatedNetwork",
	}
	putData := netproto.NatPool{
		TypeMeta: api.TypeMeta{Kind: "Namespace"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Name:      "preCreatedNatPool",
			Namespace: "default",
		},
		Spec: updatedNatPoolSpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/natpools/preCreatedTenant/preCreatedNamespace/preCreatedNatPool", &putData, &resp)
	AssertOk(t, err, "Error updating natpool to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/natpools/", &natpoolList)
	AssertOk(t, getErr, "Error getting natpools from the REST Server")
	for _, o := range natpoolList {
		if o.Name == "preCreatedNatPool" {
			actualNatPoolSpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedNatPoolSpec, actualNatPoolSpec, "Could not validate updated spec.")

}

func TestNatPoolDelete(t *testing.T) {
	t.Parallel()
	var resp error
	var found bool
	var natpoolList []*netproto.NatPool

	deleteData := netproto.NatPool{
		TypeMeta: api.TypeMeta{Kind: "NatPool"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteNatPool",
		},
		Spec: netproto.NatPoolSpec{
			NetworkName: "preCreatedNetwork",
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/natpools/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/natpools/default/default/testDeleteNatPool", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/natpools/", &natpoolList)

	AssertOk(t, postErr, "Error posting natpool to REST Server")
	AssertOk(t, err, "Error deleting natpool from REST Server")
	AssertOk(t, getErr, "Error getting natpools from the REST Server")
	for _, o := range natpoolList {
		if o.Name == "testDeleteNatPool" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteNatPool in Response after deleting: %v", natpoolList)
	}

}
