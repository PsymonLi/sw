// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: tcp_proxy.proto
*/
package restapi

import (
	"testing"

	api "github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/netagent/protos/netproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

func TestTCPProxyPolicyList(t *testing.T) {
	t.Parallel()
	var ok bool
	var tcpproxypolicyList []*netproto.TCPProxyPolicy

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/tcp/proxies/", &tcpproxypolicyList)

	AssertOk(t, err, "Error getting tcpproxypolicys from the REST Server")
	for _, o := range tcpproxypolicyList {
		if o.Name == "preCreatedTCPProxyPolicy" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedTCPProxyPolicy in Response: %v", tcpproxypolicyList)
	}

}

func TestTCPProxyPolicyPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var tcpproxypolicyList []*netproto.TCPProxyPolicy

	postData := netproto.TCPProxyPolicy{
		TypeMeta: api.TypeMeta{Kind: "TCPProxyPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostTCPProxyPolicy",
		},
		Spec: netproto.TCPProxyPolicySpec{
			Rules: []netproto.TCPProxyRule{
				{
					Action: "ENABLE",
					Src: &netproto.MatchSelector{
						Addresses: []string{"10.0.0.0 - 10.0.1.0", "172.17.0.0/24", "4.4.4.4"},
					},
					Dst: &netproto.MatchSelector{
						Addresses: []string{"192.168.0.1 - 192.168.1.0", "8.8.8.8"},
					},
				},
			},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/tcp/proxies/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/tcp/proxies/", &tcpproxypolicyList)

	AssertOk(t, err, "Error posting tcpproxypolicy to REST Server")
	AssertOk(t, getErr, "Error getting tcpproxypolicys from the REST Server")
	for _, o := range tcpproxypolicyList {
		if o.Name == "testPostTCPProxyPolicy" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostTCPProxyPolicy in Response: %v", tcpproxypolicyList)
	}

}

func TestTCPProxyPolicyUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var tcpproxypolicyList []*netproto.TCPProxyPolicy

	var actualTCPProxyPolicySpec netproto.TCPProxyPolicySpec
	updatedTCPProxyPolicySpec := netproto.TCPProxyPolicySpec{
		Rules: []netproto.TCPProxyRule{
			{
				Action: "ENABLE",
				Src: &netproto.MatchSelector{
					Addresses: []string{"10.0.0.0 - 10.0.1.0", "172.17.0.0/24", "4.4.4.4"},
				},
				Dst: &netproto.MatchSelector{
					Addresses: []string{"192.168.0.1 - 192.168.1.0", "8.8.8.8"},
				},
			},
		},
	}
	putData := netproto.TCPProxyPolicy{
		TypeMeta: api.TypeMeta{Kind: "TCPProxyPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Name:      "preCreatedTCPProxyPolicy",
			Namespace: "default",
		},
		Spec: updatedTCPProxyPolicySpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/tcp/proxies/default/default/preCreatedTCPProxyPolicy", &putData, &resp)
	AssertOk(t, err, "Error updating tcpproxypolicy to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/tcp/proxies/", &tcpproxypolicyList)
	AssertOk(t, getErr, "Error getting tcpproxypolicys from the REST Server")
	for _, o := range tcpproxypolicyList {
		if o.Name == "preCreatedTCPProxyPolicy" {
			actualTCPProxyPolicySpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedTCPProxyPolicySpec, actualTCPProxyPolicySpec, "Could not validate updated spec.")

}

func TestTCPProxyPolicyDelete(t *testing.T) {
	t.Parallel()
	var resp Response
	var found bool
	var tcpproxypolicyList []*netproto.TCPProxyPolicy

	deleteData := netproto.TCPProxyPolicy{
		TypeMeta: api.TypeMeta{Kind: "TCPProxyPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteTCPProxyPolicy",
		},
		Spec: netproto.TCPProxyPolicySpec{
			Rules: []netproto.TCPProxyRule{
				{
					Src: &netproto.MatchSelector{
						Addresses: []string{"10.0.0.0 - 10.0.1.0", "172.17.0.0/24", "4.4.4.4"},
					},

					Dst: &netproto.MatchSelector{
						Addresses: []string{"10.0.0.0 - 10.0.1.0", "172.17.0.0/24", "4.4.4.4"},
					},
					Action: "ENABLE",
				},
				{
					Src: &netproto.MatchSelector{
						Addresses: []string{"8.8.8.8"},
					},

					Dst: &netproto.MatchSelector{
						Addresses: []string{"172.17.0.0"},
					},
					Action: "DISABLE",
				},
			},
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/tcp/proxies/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/tcp/proxies/default/default/testDeleteTCPProxyPolicy", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/tcp/proxies/", &tcpproxypolicyList)

	AssertOk(t, postErr, "Error posting tcpproxypolicy to REST Server")
	AssertOk(t, err, "Error deleting tcpproxypolicy from REST Server")
	AssertOk(t, getErr, "Error getting tcpproxypolicys from the REST Server")
	for _, o := range tcpproxypolicyList {
		if o.Name == "testDeleteTCPProxyPolicy" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteTCPProxyPolicy in Response after deleting: %v", tcpproxypolicyList)
	}

}

func TestTCPProxyPolicyCreateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badPostData := netproto.TCPProxyPolicy{
		TypeMeta: api.TypeMeta{Kind: "TCPProxyPolicy"},
		ObjectMeta: api.ObjectMeta{
			Name: "",
		},
	}

	err := netutils.HTTPPost("http://"+agentRestURL+"/api/tcp/proxies/", &badPostData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestTCPProxyPolicyDeleteErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.TCPProxyPolicy{
		TypeMeta: api.TypeMeta{Kind: "TCPProxyPolicy"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/tcp/proxies/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestTCPProxyPolicyUpdateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.TCPProxyPolicy{
		TypeMeta: api.TypeMeta{Kind: "TCPProxyPolicy"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPPut("http://"+agentRestURL+"/api/tcp/proxies/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}
