// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/
package restapi
import (
    "github.com/gorilla/mux"
    "github.com/pensando/sw/api"
    "github.com/gogo/protobuf/types"
    agentTypes "github.com/pensando/sw/nic/agent/netagent/state/types"
)
{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}
       {{range $params}}
            // add{{.CrudObject}}APIRoutes adds {{.CrudObject}} routes
            func add{{.CrudObject}}APIRoutes(r *mux.Router, srv *RestServer){
            {{$crudObject := .CrudObject}}
            {{$pattern := .Pattern}}
            {{$methods := .Methods}}
            {{range $methods}}
                {{if strEq . "list"}}
                    r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.{{lower .}}{{title $crudObject}}Handler))
                {{else if strEq . "post"}}
                    r.Methods("{{upper .}}").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.{{lower .}}{{title $crudObject}}Handler))
                {{else}}
                    r.Methods("{{upper .}}").Subrouter().HandleFunc("{{$pattern}}", httputils.MakeHTTPHandler(srv.{{ lower .}}{{title $crudObject}}Handler))
                {{end}}
            {{end}}
            }
       {{end}}
       {{range $params}}
           {{$crudObject := .CrudObject}}
           {{$pattern := .Pattern}}
           {{$methods := .Methods}}
           {{range $methods}}
                {{if strEq . "list"}}
                    func (s *RestServer) {{lower .}}{{title $crudObject}}Handler(r *http.Request) (interface{}, error){
                        return s.agent.List{{title $crudObject}}(), nil
                    }
                {{else}}
                    func (s *RestServer) {{lower .}}{{title $crudObject}}Handler(r *http.Request) (interface{}, error){
                        var res Response
                        {{if strEq . "post"}}
                            var o netproto.{{title $crudObject}}
                            b, _ := ioutil.ReadAll(r.Body)
                            err := json.Unmarshal(b, &o)
                            if err != nil {
                                return nil, err
                            }
                            c, _ := types.TimestampProto(time.Now())
                            o.CreationTime = api.Timestamp{
                                Timestamp: *c,
                            }
                            o.ModTime = api.Timestamp{
                                Timestamp: *c,
                            }
                          {{if strEq $crudObject "Endpoint"}}
                              _, err = s.agent.Create{{title $crudObject}}(&o)
                          {{else}}
                             err = s.agent.Create{{title $crudObject}}(&o)
                          {{end}}
                        {{else if strEq . "put"}}
                             var o netproto.{{title $crudObject}}
                             b, _ := ioutil.ReadAll(r.Body)
                             err := json.Unmarshal(b, &o)
                             if err != nil {
                                 return nil, err
                             }
                             m, _ := types.TimestampProto(time.Now())
                             o.ModTime = api.Timestamp{
                                Timestamp: *m,
                             }
                             err = s.agent.Update{{title $crudObject}}(&o)
                        {{else if strEq . "delete"}}
                             {{if strEq $crudObject "Tenant"}}
                                name, _ := mux.Vars(r)["ObjectMeta.Name"]
                                err := s.agent.Delete{{title $crudObject}}(name)
                             {{else if strEq $crudObject "Namespace"}}
                                tenant, _ := mux.Vars(r)["ObjectMeta.Tenant"]
                                name, _ := mux.Vars(r)["ObjectMeta.Name"]
                                err := s.agent.Delete{{title $crudObject}}(tenant, name)
                             {{else}}
                                tenant, _ := mux.Vars(r)["ObjectMeta.Tenant"]
                                namespace, _ := mux.Vars(r)["ObjectMeta.Namespace"]
                                name, _ := mux.Vars(r)["ObjectMeta.Name"]
                                err := s.agent.Delete{{title $crudObject}}(tenant, namespace, name)
                             {{end}}
                        {{end}}
                        {{if strEq . "post"}}
                          {{if strEq $crudObject "Tenant"}}
                            res.References = []string{fmt.Sprintf("%s%s",r.RequestURI, o.Name)}
                          {{else if strEq $crudObject "Namespace"}}
                            res.References = []string{fmt.Sprintf("%s%s/%s",r.RequestURI, o.Tenant, o.Name)}
                          {{else}}
                            res.References = []string{fmt.Sprintf("%s%s/%s/%s",r.RequestURI, o.Tenant, o.Namespace, o.Name)}
                          {{end}}
                        {{else}}
                          res.References = []string{r.RequestURI}
                        {{end}}
                        if err != nil {
                          res.StatusCode = http.StatusInternalServerError
                          res.Error = err.Error()
                          {{if strEq . "delete"}}
                          // check if its a cannot delete type err
                          delErr , ok := err.(*agentTypes.ErrCannotDelete)
                          if ok {
                            res.References = delErr.References
                          }
                          {{end}}
                            return res, err
                        }

                        res.StatusCode = http.StatusOK
                        return res, err
                    }
                {{end}}
           {{end}}
       {{end}}
    {{end}}
{{end}}
