// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/
package restapi
import (
. "github.com/pensando/sw/venice/utils/testutils"
)

{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}

       {{range $params}}
           {{$crudObject := .CrudObject}}
           {{$pattern := .Pattern}}
           {{$methods := .Methods}}
           {{range $methods}}
                {{if strEq . "list"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var ok bool
                        var {{lower $crudObject}}{{title .}} []*netproto.{{title $crudObject}}
                        {{if strEq $crudObject "SecurityGroup"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/sgs/", &{{lower $crudObject}}{{title .}} )
                        {{else if strEq $crudObject "NatPolicy"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/policies/", &{{lower $crudObject}}{{title .}} )
                        {{else if strEq $crudObject "IPSecPolicy"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/policies/", &{{lower $crudObject}}{{title .}} )
                        {{else if strEq $crudObject "IPSecSAEncrypt"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/encryption/", &{{lower $crudObject}}{{title .}} )
                        {{else if strEq $crudObject "IPSecSADecrypt"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/decryption/", &{{lower $crudObject}}{{title .}} )
                        {{else if strEq $crudObject "NatPool"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/pools/", &{{lower $crudObject}}{{title .}} )
                        {{else if strEq $crudObject "NatBinding"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/bindings/", &{{lower $crudObject}}{{title .}} )
                        {{else if strEq $crudObject "NatPolicy"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/policies/", &{{lower $crudObject}}{{title .}} )
                        {{else if strEq $crudObject "SGPolicy"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/security/policies/", &{{lower $crudObject}}{{title .}} )
                        {{else}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}{{title .}} )
                        {{end}}
                        AssertOk(t, err, "Error getting {{lower $crudObject}}s from the REST Server")
                        for _, o := range {{lower $crudObject}}{{title .}} {
                            if o.Name == "preCreated{{title $crudObject}}" {
                                ok = true
                                break
                            }
                        }
                        if !ok {
                            t.Errorf("Could not find preCreated{{title $crudObject}} in Response: %v", {{lower $crudObject}}{{title .}})
                        }

                    }
                {{else if strEq . "post"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var resp Response
                        var ok bool
                        var {{lower $crudObject}}List []*netproto.{{title $crudObject}}
                        {{if strEq $crudObject "Network"}}
                            {{lower .}}Data := netproto.{{title $crudObject}}{
                                TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name: "test{{title .}}{{title $crudObject}}",
                                },
                                Spec:   netproto.{{title $crudObject}}Spec{
                                    IPv4Subnet: "10.1.1.0/24",
                                    IPv4Gateway:   "10.1.1.254",
                                },
                            }
                            err := netutils.HTTPPost("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                        {{else if strEq $crudObject "SecurityGroup"}}
                            postData := netproto.{{title $crudObject}}{
                                TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name:   "test{{title .}}{{title $crudObject}}",
                                },
                                Spec: netproto.{{title $crudObject}}Spec{
                                    SecurityProfile: "unknown",
                                    Rules:  []netproto.SecurityRule{
                                                {
                                                    Direction: "Incoming",
                                                    PeerGroup: "",
                                                    Action: "Allow",
                                                },
                                    },
                                },
                            }
                            err := netutils.HTTPPost("http://"+agentRestURL+"/api/sgs/", &postData, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/sgs/", &{{lower $crudObject}}List )
                        {{else if strEq $crudObject "Endpoint"}}
                            {{lower .}}Data := netproto.Endpoint{
                                TypeMeta: api.TypeMeta{Kind: "Endpoint"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name:   "test{{title .}}{{title $crudObject}}",
                                },
                                Spec: netproto.{{title $crudObject}}Spec{
                                    EndpointUUID:   "testEndpointUUID",
                                    WorkloadUUID:   "testWorkloadUUID",
                                    NetworkName:    "preCreatedNetwork",
                                    InterfaceType:  "UPLINK",
                                    Interface:      "default-uplink-0",
                                },
                                Status: netproto.{{title $crudObject}}Status{
                                    NodeUUID:   "dummy-node-uuid",
                                    IPv4Address:    "10.1.1.0/24",
                                },
                            }
                            err := netutils.HTTPPost("http://"+agentRestURL+"/api/endpoints/", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                         {{else if (or (strEq $crudObject "Tenant") (strEq $crudObject "Namespace"))}}
                            {{lower .}}Data := netproto.{{title $crudObject}}{
                                                    TypeMeta: api.TypeMeta{Kind: "Tenant"},
                                                    ObjectMeta : api.ObjectMeta{
                                                                        Tenant:"test{{title .}}{{title $crudObject}}",
                                                                        Name: "test{{title .}}{{title $crudObject}}",
                                                                        Namespace: "test{{title .}}{{title $crudObject}}",
                                                    },
                            }

                            err := netutils.HTTPPost("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                         {{else if strEq $crudObject "Interface"}}
                                                     {{lower .}}Data := netproto.Interface{
                                                         TypeMeta: api.TypeMeta{Kind: "Interface"},
                                                         ObjectMeta: api.ObjectMeta{
                                                             Tenant: "default",
                                                             Namespace: "default",
                                                             Name:   "test{{title .}}{{title $crudObject}}",
                                                         },
                                                         Spec: netproto.{{title $crudObject}}Spec{
                                                             Type: "ENIC",
                                                             AdminStatus: "UP",
                                                         },
                                                         Status: netproto.{{title $crudObject}}Status{
                                                             OperStatus:   "UP",

                                                         },
                                                     }
                             err := netutils.HTTPPost("http://"+agentRestURL+"/api/interfaces/", &{{lower .}}Data, &resp)
                             getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                         {{else if strEq $crudObject "NatPolicy"}}
                                                      {{lower .}}Data := netproto.NatPolicy{
                                                          TypeMeta: api.TypeMeta{Kind: "NatPolicy"},
                                                          ObjectMeta: api.ObjectMeta{
                                                              Tenant: "default",
                                                              Namespace: "default",
                                                              Name:   "test{{title .}}{{title $crudObject}}",
                                                          },
                                                          Spec: netproto.{{title $crudObject}}Spec{
                                                            Rules: []netproto.NatRule{
                                                                {
                                                                 Src: &netproto.MatchSelector{
                                                                        Address: "10.0.0.0 - 10.0.1.0",
                                                                    },
                                                                 Dst: &netproto.MatchSelector{
                                                                        Address: "192.168.0.1 - 192.168.1.0",
                                                                    },
                                                                 NatPool: "preCreatedNatPool",
                                                                 Action: "SNAT",
                                                                },

                                                            },

                                                          },
                                                      }
                              err := netutils.HTTPPost("http://"+agentRestURL+"/api/nat/policies/", &{{lower .}}Data, &resp)
                              getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/policies/", &{{lower $crudObject}}List )
                          {{else if strEq $crudObject "SGPolicy"}}
                                                       {{lower .}}Data := netproto.SGPolicy{
                                                           TypeMeta: api.TypeMeta{Kind: "SGPolicy"},
                                                           ObjectMeta: api.ObjectMeta{
                                                               Tenant: "default",
                                                               Namespace: "default",
                                                               Name:   "test{{title .}}{{title $crudObject}}",
                                                           },
                                                           Spec: netproto.{{title $crudObject}}Spec{
                                                             AttachGroup: []string{"preCreatedSecurityGroup"},
                                                             AttachTenant: false,
                                                             Rules: []netproto.PolicyRule{
                                                             				{
                                                             					Action: []string{"PERMIT"},
                                                                      Src: &netproto.MatchSelector{
                                                                  						Address: "10.0.0.0 - 10.0.1.0",
                                                                              App: "L4PORT",
                                                                              AppConfig: "80",
                                                                  					},
                                                                  					Dst: &netproto.MatchSelector{
                                                                  						Address: "192.168.0.1 - 192.168.1.0",
                                                                  					},
                                                             				},
                                                             			},
                                                           },
                                                       }
                               err := netutils.HTTPPost("http://"+agentRestURL+"/api/security/policies/", &{{lower .}}Data, &resp)
                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/security/policies/", &{{lower $crudObject}}List )
                         {{else if strEq $crudObject "NatPool"}}
                                                   {{lower .}}Data := netproto.NatPool{
                                                       TypeMeta: api.TypeMeta{Kind: "NatPool"},
                                                       ObjectMeta: api.ObjectMeta{
                                                           Tenant: "default",
                                                           Namespace: "default",
                                                           Name:   "test{{title .}}{{title $crudObject}}",
                                                       },
                                                       Spec: netproto.{{title $crudObject}}Spec{
                                                           IPRange: "10.1.2.1-10.1.2.200",

                                                       },
                                                   }
                           err := netutils.HTTPPost("http://"+agentRestURL+"/api/nat/pools/", &{{lower .}}Data, &resp)
                           getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/pools/", &{{lower $crudObject}}List )

                         {{else if strEq $crudObject "IPSecPolicy"}}
                                                      {{lower .}}Data := netproto.IPSecPolicy{
                                                          TypeMeta: api.TypeMeta{Kind: "IPSecPolicy"},
                                                          ObjectMeta: api.ObjectMeta{
                                                              Tenant: "default",
                                                              Namespace: "default",
                                                              Name:   "test{{title .}}{{title $crudObject}}",
                                                          },
                                                          Spec: netproto.{{title $crudObject}}Spec{
                                                            Rules: []netproto.IPSecRule{
                                                                {
                                                                 Src: &netproto.MatchSelector{
                                                                        Address: "10.0.0.0 - 10.0.1.0",
                                                                    },
                                                                 Dst: &netproto.MatchSelector{
                                                                        Address: "192.168.0.1 - 192.168.1.0",
                                                                    },
                                                                 SAName: "preCreatedIPSecSAEncrypt",
                                                                 SAType: "ENCRYPT",
                                                                },
                                                                {
                                                                 Src: &netproto.MatchSelector{
                                                                        Address: "10.0.0.0 - 10.0.1.0",
                                                                    },
                                                                 Dst: &netproto.MatchSelector{
                                                                        Address: "192.168.0.1 - 192.168.1.0",
                                                                    },
                                                                 SAName: "preCreatedIPSecSADecrypt",
                                                                 SAType: "DECRYPT",
                                                                 SPI: 42,
                                                                },
                                                            },

                                                          },
                                                      }
                              err := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/policies/", &{{lower .}}Data, &resp)
                              getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/policies/", &{{lower $crudObject}}List )

                         {{else if strEq $crudObject "IPSecSAEncrypt"}}
                                                   {{lower .}}Data := netproto.IPSecSAEncrypt{
                                                       TypeMeta: api.TypeMeta{Kind: "IPSecSAEncrypt"},
                                                       ObjectMeta: api.ObjectMeta{
                                                           Tenant: "default",
                                                           Namespace: "default",
                                                           Name:   "test{{title .}}{{title $crudObject}}",
                                                       },
                                                       Spec: netproto.{{title $crudObject}}Spec{
                                                           Protocol: "ESP",
                                                           AuthAlgo: "AES_GCM",
                                                           AuthKey: "someRandomString",
                                                           EncryptAlgo: "AES_GCM_256",
                                                           EncryptionKey: "someRandomKey",
                                                           LocalGwIP: "10.0.0.1",
                                                           RemoteGwIP: "192.168.1.1",
                                                           SPI: 1,
                                                       },
                                                   }
                           err := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/encryption/", &{{lower .}}Data, &resp)
                           getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/encryption/", &{{lower $crudObject}}List )

                         {{else if strEq $crudObject "IPSecSADecrypt"}}
                                                   {{lower .}}Data := netproto.IPSecSADecrypt{
                                                       TypeMeta: api.TypeMeta{Kind: "IPSecSADecrypt"},
                                                       ObjectMeta: api.ObjectMeta{
                                                           Tenant: "default",
                                                           Namespace: "default",
                                                           Name:   "test{{title .}}{{title $crudObject}}",
                                                       },
                                                       Spec: netproto.{{title $crudObject}}Spec{
                                                           Protocol: "ESP",
                                                           AuthAlgo: "AES_GCM",
                                                           AuthKey: "someRandomString",
                                                           DecryptAlgo: "AES_GCM_256",
                                                           DecryptionKey: "someRandomKey",
                                                           RekeyDecryptAlgo: "DES3",
                                                           RekeyDecryptionKey: "someRandomString",
                                                           LocalGwIP: "10.0.0.1",
                                                           RemoteGwIP: "192.168.1.1",
                                                           SPI: 1,
                                                       },
                                                   }
                           err := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/decryption/", &{{lower .}}Data, &resp)
                           getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/decryption/", &{{lower $crudObject}}List )


                         {{else if strEq $crudObject "Route"}}
                                                   {{lower .}}Data := netproto.Route{
                                                       TypeMeta: api.TypeMeta{Kind: "Route"},
                                                       ObjectMeta: api.ObjectMeta{
                                                           Tenant: "default",
                                                           Namespace: "default",
                                                           Name:   "test{{title .}}{{title $crudObject}}",
                                                       },
                                                       Spec: netproto.{{title $crudObject}}Spec{
                                                       IPPrefix: "10.1.1.0/24",
                                                       Interface: "default-uplink-1",
                                                       GatewayIP: "10.1.1.1",
                                                   },
                                                }
                        err := netutils.HTTPPost("http://"+agentRestURL+"/api/routes/", &{{lower .}}Data, &resp)
                        getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/routes/", &{{lower $crudObject}}List )

                        {{else if strEq $crudObject "Tunnel"}}
                            postData := netproto.{{title $crudObject}}{
                                TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name:   "test{{title .}}{{title $crudObject}}",
                                },
                                Spec: netproto.{{title $crudObject}}Spec{
                                    Type: "VXLAN",
                                    AdminStatus: "UP",
                                    Src: "10.1.1.1",
                                    Dst: "192.168.1.1",
                                },
                            }
                            err := netutils.HTTPPost("http://"+agentRestURL+"/api/tunnels/", &postData, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/tunnels/", &{{lower $crudObject}}List )

                         {{else if strEq $crudObject "NatBinding"}}
                                                   {{lower .}}Data := netproto.NatBinding{
                                                       TypeMeta: api.TypeMeta{Kind: "NatBinding"},
                                                       ObjectMeta: api.ObjectMeta{
                                                           Tenant: "default",
                                                           Namespace: "default",
                                                           Name:   "test{{title .}}{{title $crudObject}}",
                                                       },
                                                       Spec: netproto.{{title $crudObject}}Spec{
                                                         NatPoolName: "preCreatedNatPool",
                                                         IPAddress: "10.1.1.2",
                                                     },
                                                 }
                         err := netutils.HTTPPost("http://"+agentRestURL+"/api/nat/bindings/", &{{lower .}}Data, &resp)
                         getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/bindings/", &{{lower $crudObject}}List )

                        {{end}}
                        AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                        AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                        for _, o := range {{lower $crudObject}}List {
                            if o.Name == "test{{title .}}{{title $crudObject}}" {
                                ok = true
                                break
                            }
                        }
                        if !ok {
                            t.Errorf("Could not find test{{title .}}{{title $crudObject}} in Response: %v", {{lower $crudObject}}List)
                        }

                    }
                    {{else if strEq . "put"}}
                        func Test{{title $crudObject}}Update(t *testing.T){
                            t.Parallel()
                            var resp Response
                            var {{lower $crudObject}}List []*netproto.{{title $crudObject}}
                            {{if strEq $crudObject "Network"}}
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                        IPv4Subnet:  "192.168.1.1/24",
                                                                        IPv4Gateway: "192.168.1.254",
                                                                    }
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Namespace: "default",
                                        Name: "preCreated{{title $crudObject}}",
                                    },
                                    Spec:  updated{{title $crudObject}}Spec,
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/{{lower $crudObject}}s/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                                for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}" {
                                        actual{{title $crudObject}}Spec = o.Spec
                                        break
                                    }
                                }
                                AssertEquals(t, updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validated updated spec.")
                            {{else if strEq $crudObject "Namespace"}}

                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       NamespaceType: "CUSTOMER",
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "preCreatedTenant",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/namespaces/preCreatedTenant/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/namespaces/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                    }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")

                            {{else if strEq $crudObject "NatPolicy"}}

                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       Rules: [] netproto.NatRule{
                                                                            {
                                                                                   NatPool: "updatedNatPool",
                                                                            },
                                                                       },
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "default",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/nat/policies/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/policies/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                    }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")

                            {{else if strEq $crudObject "IPSecPolicy"}}

                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       Rules: [] netproto.IPSecRule{
                                                                            {
                                                                                   SAName: "updatedEncryptSA",
                                                                            },
                                                                       },
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "default",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/ipsec/policies/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/policies/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                    }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")

                            {{else if strEq $crudObject "IPSecSAEncrypt"}}

                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       Protocol: "AH",
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "default",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/ipsec/encryption/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/encryption/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                    }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")

                            {{else if strEq $crudObject "IPSecSADecrypt"}}

                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       Protocol: "AH",
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "default",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/ipsec/decryption/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/decryption/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                    }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")


                           {{else if strEq $crudObject "NatPool"}}

                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       IPRange: "192.168.1.1-198.168.1.200",
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "default",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/nat/pools/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/pools/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                    }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")
                           {{else if strEq $crudObject "Route"}}

                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       Interface: "default-uplink-2",
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "preCreatedTenant",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "preCreatedNamespace",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/routes/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/routes/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                    }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")


                           {{else if strEq $crudObject "NatBinding"}}

                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       NatPoolName: "preCreatedNatPool",
                                                                       IPAddress: "192.168.1.2",
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "default",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/nat/bindings/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/bindings/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                    }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")

                            {{else if strEq $crudObject "SecurityGroup"}}
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                    		SecurityProfile: "unknown",
                                                                    		Rules: []netproto.SecurityRule{
                                                                    			{
                                                                    				Direction: "Incoming",
                                                                    				PeerGroup: "",
                                                                    				Action:    "Deny",
                                                                    			},
                                                                    		},
                                                                    	}
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Namespace: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/sgs/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/sgs/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")

                                for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                        actual{{title $crudObject}}Spec = o.Spec
                                        break
                                    }
                                }
                                AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")
                            {{else if strEq $crudObject "Endpoint"}}
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                		                                EndpointUUID: "testEndpointUUID",
                                			                              WorkloadUUID: "updatedWorkloadUUID",
                                			                              NetworkName:  "preCreatedNetwork",
                                                                    InterfaceType:  "UPLINK",
                                                                    Interface:      "default-uplink-0",
                                		                            }
                                {{lower .}}Data := netproto.Endpoint{
                                    TypeMeta: api.TypeMeta{Kind: "Endpoint"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Namespace: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                    Status: netproto.{{title $crudObject}}Status{
                                        NodeUUID:   "dummy-node-uuid",
                                        IPv4Address:    "10.1.1.0/24",
                                    },
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/endpoints/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/endpoints/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")


                                 for _, o := range {{lower $crudObject}}List{
                                                                    if o.Name == "preCreated{{title $crudObject}}"{
                                                                        actual{{title $crudObject}}Spec = o.Spec
                                                                        break
                                                                    }
                                                                }
                                 AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")
                            {{else if strEq $crudObject "Tenant"}}
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                        Meta: &api.ObjectMeta{
                                                                        ResourceVersion:"v2",
                                                                    },
                                		                            }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "Tenant"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "preCreated{{title $crudObject}}",
                                        Namespace: "preCreated{{title $crudObject}}",
                                        Name:   "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/{{lower $crudObject}}s/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")


                                 for _, o := range {{lower $crudObject}}List{
                                                                    if o.Name == "preCreated{{title $crudObject}}"{
                                                                        actual{{title $crudObject}}Spec = o.Spec
                                                                        break
                                                                    }
                                                                }
                                 AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")

                           {{else if strEq $crudObject "SGPolicy"}}
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                      AttachGroup: []string{"preCreatedSecurityGroup"},
                                                                      Rules: [] netproto.PolicyRule{
                                                                           {
                                                                                  Action: []string{"DENY", "LOG"},
                                                                           },
                                                                      },
                                                                   }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "default",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/security/policies/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/security/policies/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                  }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")

                             {{else if strEq $crudObject "Tunnel"}}

                                  var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                  updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                         Src: "172.0.0.1",
                                                                      }
                                  {{lower .}}Data := netproto.{{title $crudObject}}{
                                      TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                                      ObjectMeta: api.ObjectMeta{
                                          Tenant: "default",
                                          Namespace: "default",
                                          Name:   "preCreatedTunnel",
                                      },
                                      Spec: updated{{title $crudObject}}Spec,
                                  }
                                 err := netutils.HTTPPut("http://"+agentRestURL+"/api/tunnels/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                 AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                 getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/tunnels/", &{{lower $crudObject}}List )
                                 AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                                 for _, o := range {{lower $crudObject}}List{
                                      if o.Name == "preCreated{{title $crudObject}}"{
                                              actual{{title $crudObject}}Spec = o.Spec
                                              break
                                      }
                                 }
                                 AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")


                            {{else if strEq $crudObject "Interface"}}
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       Type: "UPLINK",
                                                                       AdminStatus: "UP",
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "Interface"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Namespace: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/{{lower $crudObject}}s/default/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")


                                 for _, o := range {{lower $crudObject}}List{
                                                                    if o.Name == "preCreated{{title $crudObject}}"{
                                                                        actual{{title $crudObject}}Spec = o.Spec
                                                                        break
                                                                    }
                                                                }
                                 AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")
                            {{end}}
                        }
                {{else if strEq . "delete"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var resp Response
                        var found bool
                        var {{lower $crudObject}}List []*netproto.{{title $crudObject}}
                        {{if strEq $crudObject "Network"}}
                            {{lower .}}Data := netproto.{{title $crudObject}}{
                                TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name: "test{{title .}}{{title $crudObject}}",
                                },
                                Spec:   netproto.{{title $crudObject}}Spec{
                                    IPv4Subnet: "10.1.1.0/24",
                                    IPv4Gateway:   "10.1.1.254",
                                },
                            }
                            postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower .}}Data, &resp)
                            err := netutils.HTTPDelete("http://"+agentRestURL+"/api/{{lower $crudObject}}s/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                        {{else if strEq $crudObject "NatPool"}}
                               {{lower .}}Data := netproto.{{title $crudObject}}{
                                   TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                   ObjectMeta: api.ObjectMeta{
                                       Tenant: "default",
                                       Namespace: "default",
                                       Name: "test{{title .}}{{title $crudObject}}",
                                   },
                                   Spec:   netproto.{{title $crudObject}}Spec{
                                       IPRange: "10.1.2.1-10.1.2.200",
                                   },
                               }
                               postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/nat/pools/", &{{lower .}}Data, &resp)
                               err := netutils.HTTPDelete("http://"+agentRestURL+"/api/nat/pools/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/pools/", &{{lower $crudObject}}List )

                        {{else if strEq $crudObject "Route"}}
                        {{lower .}}Data := netproto.{{title $crudObject}}{
                            TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                            ObjectMeta: api.ObjectMeta{
                                Tenant: "default",
                                Namespace: "default",
                                Name: "test{{title .}}{{title $crudObject}}",
                            },
                            Spec:   netproto.{{title $crudObject}}Spec{
                              GatewayIP: "10.1.1.1",
                              IPPrefix:  "10.1.1.0/24",
                            },
                        }
                        postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower .}}Data, &resp)
                        err := netutils.HTTPDelete("http://"+agentRestURL+"/api/{{lower $crudObject}}s/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                        getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )

                        {{else if strEq $crudObject "NatBinding"}}
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Namespace: "default",
                                        Name: "test{{title .}}{{title $crudObject}}",
                                    },
                                    Spec:   netproto.{{title $crudObject}}Spec{
                                               NatPoolName: "preCreatedNatPool",
                                               IPAddress: "10.1.1.1",
                                           },
                                       }
                               postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/nat/bindings/", &{{lower .}}Data, &resp)
                               err := netutils.HTTPDelete("http://"+agentRestURL+"/api/nat/bindings/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/bindings/", &{{lower $crudObject}}List )

                        {{else if strEq $crudObject "NatPolicy"}}
                               {{lower .}}Data := netproto.{{title $crudObject}}{
                                   TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                   ObjectMeta: api.ObjectMeta{
                                       Tenant: "default",
                                       Namespace: "default",
                                       Name: "test{{title .}}{{title $crudObject}}",
                                   },
                                   Spec: netproto.{{title $crudObject}}Spec{
                                       Rules: []netproto.NatRule{
                                           {
                                            Src: &netproto.MatchSelector{
                                                    Address: "10.0.0.0 - 10.0.1.0",
                                                },
                                             Dst: &netproto.MatchSelector{
                                                    Address: "192.168.0.1 - 192.168.1.0",
                                                },
                                             NatPool: "preCreatedNatPool",
                                             Action: "SNAT",
                                            },
                                        },

                                      },
                               }
                               postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/nat/policies/", &{{lower .}}Data, &resp)
                               err := netutils.HTTPDelete("http://"+agentRestURL+"/api/nat/policies/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/nat/policies/", &{{lower $crudObject}}List )

                       {{else if strEq $crudObject "IPSecPolicy"}}
                               {{lower .}}Data := netproto.{{title $crudObject}}{
                                   TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                   ObjectMeta: api.ObjectMeta{
                                       Tenant: "default",
                                       Namespace: "default",
                                       Name: "test{{title .}}{{title $crudObject}}",
                                   },
                                   Spec: netproto.{{title $crudObject}}Spec{
                                        Rules: []netproto.IPSecRule{
                                            {
                                             Src: &netproto.MatchSelector{
                                                    Address: "10.0.0.0 - 10.0.1.0",
                                                    App: "ESP",
                                                    AppConfig: "1",
                                                },
                                             Dst: &netproto.MatchSelector{
                                                    Address: "192.168.0.1 - 192.168.1.0",
                                                    App: "ESP",
                                                    AppConfig: "1",
                                                },
                                             SAName: "preCreatedIPSecSAEncrypt",
                                             SAType: "ENCRYPT",
                                            },
                                            {
                                             Src: &netproto.MatchSelector{
                                                    Address: "10.0.0.0 - 10.0.1.0",
                                                    App: "ESP",
                                                    AppConfig: "1",
                                                },
                                             Dst: &netproto.MatchSelector{
                                                    Address: "192.168.0.1 - 192.168.1.0",
                                                    App: "ESP",
                                                    AppConfig: "1",
                                                },
                                             SAName: "preCreatedIPSecSADecrypt",
                                             SAType: "DECRYPT",
                                             SPI: 42,
                                            },
                                        },
                                      },
                               }
                               postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/policies/", &{{lower .}}Data, &resp)
                               err := netutils.HTTPDelete("http://"+agentRestURL+"/api/ipsec/policies/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/policies/", &{{lower $crudObject}}List )

                        {{else if strEq $crudObject "IPSecSAEncrypt"}}

                                                   {{lower .}}Data := netproto.IPSecSAEncrypt{
                                                       TypeMeta: api.TypeMeta{Kind: "IPSecSAEncrypt"},
                                                       ObjectMeta: api.ObjectMeta{
                                                           Tenant: "default",
                                                           Namespace: "default",
                                                           Name:   "test{{title .}}{{title $crudObject}}",
                                                       },
                                                       Spec: netproto.{{title $crudObject}}Spec{
                                                           Protocol: "ESP",
                                                           AuthAlgo: "AES_GCM",
                                                           AuthKey: "someRandomString",
                                                           EncryptAlgo: "AES_GCM_256",
                                                           EncryptionKey: "someRandomKey",
                                                           LocalGwIP: "10.0.0.1",
                                                           RemoteGwIP: "192.168.1.1",
                                                           SPI: 1,
                                                       },
                                                   }
                               postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/encryption/", &{{lower .}}Data, &resp)
                               err := netutils.HTTPDelete("http://"+agentRestURL+"/api/ipsec/encryption/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/encryption/", &{{lower $crudObject}}List )

                       {{else if strEq $crudObject "IPSecSADecrypt"}}
                                                   {{lower .}}Data := netproto.IPSecSADecrypt{
                                                       TypeMeta: api.TypeMeta{Kind: "IPSecSADecrypt"},
                                                       ObjectMeta: api.ObjectMeta{
                                                           Tenant: "default",
                                                           Namespace: "default",
                                                           Name:   "test{{title .}}{{title $crudObject}}",
                                                       },
                                                       Spec: netproto.{{title $crudObject}}Spec{
                                                           Protocol: "ESP",
                                                           AuthAlgo: "AES_GCM",
                                                           AuthKey: "someRandomString",
                                                           DecryptAlgo: "AES_GCM_256",
                                                           DecryptionKey: "someRandomKey",
                                                           LocalGwIP: "10.0.0.1",
                                                           RemoteGwIP: "192.168.1.1",
                                                           SPI: 1,
                                                       },
                                                   }
                               postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/decryption/", &{{lower .}}Data, &resp)
                               err := netutils.HTTPDelete("http://"+agentRestURL+"/api/ipsec/decryption/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/decryption/", &{{lower $crudObject}}List )


                        {{else if strEq $crudObject "SecurityGroup"}}
                            postData := netproto.{{title $crudObject}}{
                                TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name:   "test{{title .}}{{title $crudObject}}",
                                },
                                Spec: netproto.{{title $crudObject}}Spec{
                                    SecurityProfile: "unknown",
                                    Rules:  []netproto.SecurityRule{
                                                {
                                                    Direction: "Incoming",
                                                    PeerGroup: "",
                                                    Action: "Allow",
                                                },
                                    },
                                },
                            }
                            postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/sgs/", &postData, &resp)
                            err := netutils.HTTPDelete("http://"+agentRestURL+"/api/sgs/default/default/test{{title .}}{{title $crudObject}}", &postData, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/sgs/", &{{lower $crudObject}}List )
                        {{else if strEq $crudObject "Endpoint"}}
                            {{lower .}}Data := netproto.Endpoint{
                                TypeMeta: api.TypeMeta{Kind: "Endpoint"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name:   "test{{title .}}{{title $crudObject}}",
                                },
                                Spec: netproto.{{title $crudObject}}Spec{
                                    EndpointUUID:   "testEndpointUUID",
                                    WorkloadUUID:   "testWorkloadUUID",
                                    NetworkName:    "preCreatedNetwork",
                                    InterfaceType:  "UPLINK",
                                    Interface:      "default-uplink-0",
                                },
                                Status: netproto.{{title $crudObject}}Status{
                                    NodeUUID:   "dummy-node-uuid",
                                    IPv4Address:    "10.1.1.0/24",
                                },
                            }
                            postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/endpoints/", &{{lower .}}Data, &resp)
                            err := netutils.HTTPDelete( "http://"+agentRestURL+"/api/endpoints/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                         {{else if strEq $crudObject "Tenant"}}
                             {{lower .}}Data := netproto.{{title $crudObject}}{
                                                     TypeMeta: api.TypeMeta{Kind: "Tenant"},
                                                     ObjectMeta : api.ObjectMeta{
                                                                         Tenant:"test{{title .}}{{title $crudObject}}",
                                                                         Name: "test{{title .}}{{title $crudObject}}",
                                                     },
                             }
                             postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/tenants/", &{{lower .}}Data, &resp)
                             err := netutils.HTTPDelete( "http://"+agentRestURL+"/api/tenants/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                             getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                          {{else if strEq $crudObject "Namespace"}}
                             {{lower .}}Data := netproto.{{title $crudObject}}{
                                 TypeMeta: api.TypeMeta{Kind: "Namespace"},
                                 ObjectMeta: api.ObjectMeta{
                                     Tenant: "preCreatedTenant",
                                     Name:   "testDelete{{title $crudObject}}",
                                     Namespace: "testDelete{{title $crudObject}}",
                                 },
                             }
                             postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/namespaces/", &{{lower .}}Data, &resp)
                             err := netutils.HTTPDelete( "http://"+agentRestURL+"/api/namespaces/preCreatedTenant/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                             getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )

                         {{else if strEq $crudObject "SGPolicy"}}
                              {{lower .}}Data := netproto.{{title $crudObject}}{
                                  TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                  ObjectMeta: api.ObjectMeta{
                                      Tenant: "default",
                                      Namespace: "default",
                                      Name: "test{{title .}}{{title $crudObject}}",
                                  },
                                  Spec: netproto.{{title $crudObject}}Spec{
                                      AttachTenant:  true,
                                      Rules: []netproto.PolicyRule{
                                             {
                                               Action: []string{"PERMIT"},
                                               Src: &netproto.MatchSelector{
                                                       Address: "10.0.0.0 - 10.0.1.0",
                                                       App: "L4PORT",
                                                       AppConfig: "80",
                                                     },
                                                     Dst: &netproto.MatchSelector{
                                                       Address: "192.168.0.1 - 192.168.1.0",
                                                     },
                                             },
                                           },
                                     },
                              }
                              postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/security/policies/", &{{lower .}}Data, &resp)
                              err := netutils.HTTPDelete("http://"+agentRestURL+"/api/security/policies/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                              getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/security/policies/", &{{lower $crudObject}}List )


                         {{else if strEq $crudObject "Interface"}}
                              {{lower .}}Data := netproto.{{title $crudObject}}{
                                                      TypeMeta: api.TypeMeta{Kind: "Interface"},
                                                      ObjectMeta : api.ObjectMeta{
                                                                          Tenant:"default",
                                                                          Namespace: "default",
                                                                          Name: "test{{title .}}{{title $crudObject}}",
                                                      },
                                                      Spec: netproto.InterfaceSpec{
                                                      			Type: "LIF",
                                                      			AdminStatus: "UP",
                                                      },
                              }
                              postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/interfaces/", &{{lower .}}Data, &resp)
                              err := netutils.HTTPDelete( "http://"+agentRestURL+"/api/interfaces/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                              getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )

                          {{else if strEq $crudObject "Tunnel"}}
                          {{lower .}}Data := netproto.{{title $crudObject}}{
                              TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                              ObjectMeta: api.ObjectMeta{
                                  Tenant: "default",
                                  Namespace: "default",
                                  Name: "test{{title .}}{{title $crudObject}}",
                              },
                              Spec:   netproto.{{title $crudObject}}Spec{
                                  Type: "VXLAN",
                                  AdminStatus: "UP",
                                  Src: "10.1.1.1",
                                  Dst: "192.168.1.1",
                              },
                          }
                          postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower .}}Data, &resp)
                          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/{{lower $crudObject}}s/default/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                          getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )

                        {{end}}
                        AssertOk(t, postErr, "Error posting {{lower $crudObject}} to REST Server")
                        AssertOk(t, err, "Error deleting {{lower $crudObject}} from REST Server")
                        AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                        for _, o := range {{lower $crudObject}}List {
                            if o.Name == "test{{title .}}{{title $crudObject}}" {
                                found = true
                                break
                            }
                        }
                        if found {
                            t.Errorf("Found test{{title .}}{{title $crudObject}} in Response after deleting: %v", {{lower $crudObject}}List)
                        }

                    }

                {{end}}

           {{end}}
           func Test{{title $crudObject}}CreateErr(t *testing.T){
             t.Parallel()
		         var resp Response
             badPostData := netproto.{{title $crudObject}}{
			                     TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
			                     ObjectMeta: api.ObjectMeta{
				                   Name:      "",
			                        },
		                          }

           {{if strEq $crudObject "Tenant"}}
              err := netutils.HTTPPost("http://"+agentRestURL+"/api/tenants/", &badPostData, &resp)
           {{else if strEq $crudObject "Namespace"}}
              err := netutils.HTTPPost("http://"+agentRestURL+"/api/namespaces/", &badPostData, &resp)
           {{else if strEq $crudObject "Network"}}
              err := netutils.HTTPPost("http://"+agentRestURL+"/api/networks/", &badPostData, &resp)
           {{else if strEq $crudObject "Endpoint"}}
              err := netutils.HTTPPost("http://"+agentRestURL+"/api/endpoints/", &badPostData, &resp)
           {{else if strEq $crudObject "Route"}}
             err := netutils.HTTPPost("http://"+agentRestURL+"/api/routes/", &badPostData, &resp)
          {{else if strEq $crudObject "NatPool"}}
             err := netutils.HTTPPost("http://"+agentRestURL+"/api/nat/pools/", &badPostData, &resp)
          {{else if strEq $crudObject "NatBinding"}}
             err := netutils.HTTPPost("http://"+agentRestURL+"/api/nat/bindings/", &badPostData, &resp)
          {{else if strEq $crudObject "NatPolicy"}}
             err := netutils.HTTPPost("http://"+agentRestURL+"/api/nat/policies/", &badPostData, &resp)
          {{else if strEq $crudObject "IPSecSAEncrypt"}}
             err := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/encryption/", &badPostData, &resp)
          {{else if strEq $crudObject "IPSecSADecrypt"}}
             err := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/decryption/", &badPostData, &resp)
          {{else if strEq $crudObject "IPSecPolicy"}}
             err := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/policies/", &badPostData, &resp)
          {{else if strEq $crudObject "Interface"}}
             err := netutils.HTTPPost("http://"+agentRestURL+"/api/interfaces/", &badPostData, &resp)
          {{else if strEq $crudObject "SecurityGroup"}}
             err := netutils.HTTPPost("http://"+agentRestURL+"/api/sgs/", &badPostData, &resp)
          {{else if strEq $crudObject "SGPolicy"}}
            err := netutils.HTTPPost("http://"+agentRestURL+"/api/security/policies/", &badPostData, &resp)
          {{else if strEq $crudObject "Tunnel"}}
            err := netutils.HTTPPost("http://"+agentRestURL+"/api/tunnels/", &badPostData, &resp)
          {{end}}
          Assert(t, err!=nil, "Expected test to error out with 500. It passed instead")
        }

        func Test{{title $crudObject}}DeleteErr(t *testing.T){
          t.Parallel()
          var resp Response
          badDelData := netproto.{{title $crudObject}}{
                        TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                        ObjectMeta: api.ObjectMeta{ Tenant:"default",
                                                    Namespace:"default",
                                                    Name:"badObject" },
                        }

        {{if strEq $crudObject "Tenant"}}
           err := netutils.HTTPDelete("http://"+agentRestURL+"/api/tenants/badObject", &badDelData, &resp)
        {{else if strEq $crudObject "Namespace"}}
           err := netutils.HTTPDelete("http://"+agentRestURL+"/api/namespaces/default/badObject", &badDelData, &resp)
        {{else if strEq $crudObject "Network"}}
           err := netutils.HTTPDelete("http://"+agentRestURL+"/api/networks/default/default/badObject", &badDelData, &resp)
        {{else if strEq $crudObject "Endpoint"}}
           err := netutils.HTTPDelete("http://"+agentRestURL+"/api/endpoints/default/default/badObject", &badDelData, &resp)
        {{else if strEq $crudObject "Route"}}
          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/routes/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "NatPool"}}
          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/nat/pools/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "NatBinding"}}
          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/nat/bindings/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "NatPolicy"}}
          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/nat/policies/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "IPSecSAEncrypt"}}
          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/ipsec/encryption/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "IPSecSADecrypt"}}
          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/ipsec/decryption/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "IPSecPolicy"}}
          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/ipsec/policies/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "Interface"}}
          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/interfaces/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "SecurityGroup"}}
          err := netutils.HTTPDelete("http://"+agentRestURL+"/api/sgs/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "SGPolicy"}}
         err := netutils.HTTPDelete("http://"+agentRestURL+"/api/security/policies/default/default/badObject", &badDelData, &resp)
       {{else if strEq $crudObject "Tunnel"}}
         err := netutils.HTTPDelete("http://"+agentRestURL+"/api/tunnels/default/default/badObject", &badDelData, &resp)

       {{end}}
       Assert(t, err!=nil, "Expected test to error out with 500. It passed instead")
     }

     func Test{{title $crudObject}}UpdateErr(t *testing.T){
       t.Parallel()
       var resp Response
       badDelData := netproto.{{title $crudObject}}{
                     TypeMeta: api.TypeMeta{Kind: "{{title $crudObject}}"},
                     ObjectMeta: api.ObjectMeta{ Tenant:"default",
                                                 Namespace:"default",
                                                 Name:"badObject" },
                     }

     {{if strEq $crudObject "Tenant"}}
        err := netutils.HTTPPut("http://"+agentRestURL+"/api/tenants/badObject", &badDelData, &resp)
     {{else if strEq $crudObject "Namespace"}}
        err := netutils.HTTPPut("http://"+agentRestURL+"/api/namespaces/default/badObject", &badDelData, &resp)
     {{else if strEq $crudObject "Network"}}
        err := netutils.HTTPPut("http://"+agentRestURL+"/api/networks/default/default/badObject", &badDelData, &resp)
     {{else if strEq $crudObject "Endpoint"}}
        err := netutils.HTTPPut("http://"+agentRestURL+"/api/endpoints/default/default/badObject", &badDelData, &resp)
     {{else if strEq $crudObject "Route"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/routes/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "NatPool"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/nat/pools/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "NatBinding"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/nat/bindings/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "NatPolicy"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/nat/policies/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "IPSecSAEncrypt"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/ipsec/encryption/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "IPSecSADecrypt"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/ipsec/decryption/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "IPSecPolicy"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/ipsec/policies/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "Interface"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/interfaces/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "SecurityGroup"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/sgs/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "SGPolicy"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/security/policies/default/default/badObject", &badDelData, &resp)
    {{else if strEq $crudObject "Tunnel"}}
       err := netutils.HTTPPut("http://"+agentRestURL+"/api/tunnels/default/default/badObject", &badDelData, &resp)
    {{end}}
    Assert(t, err!=nil, "Expected test to error out with 500. It passed instead")
  }


       {{end}}
    {{end}}
{{end}}
