// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package {{.GoPkg.Name}} is a auto generated package.
Input file: {{.Name}}
*/
package restapi
import (
. "github.com/pensando/sw/venice/utils/testutils"
)

{{range .Services}}
    {{$svcname := .Name}}
    {{if (hasExtension "venice.naplesRestService" .)}}
       {{$params := (getRestSvcOptions .)}}

       {{range $params}}
           {{$crudObject := .CrudObject}}
           {{$pattern := .Pattern}}
           {{$methods := .Methods}}
           {{range $methods}}
                {{if strEq . "list"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var ok bool
                        var {{lower $crudObject}}{{title .}} []*netproto.{{title $crudObject}}
                        {{if strEq $crudObject "SecurityGroup"}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/sgs/", &{{lower $crudObject}}{{title .}} )
                        {{else}}
                            err := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}{{title .}} )
                        {{end}}
                        AssertOk(t, err, "Error getting {{lower $crudObject}}s from the REST Server")
                        for _, o := range {{lower $crudObject}}{{title .}} {
                            if o.Name == "preCreated{{title $crudObject}}" {
                                ok = true
                                break
                            }
                        }
                        if !ok {
                            t.Errorf("Could not find preCreated{{title $crudObject}} in Response: %v", {{lower $crudObject}}{{title .}})
                        }

                    }
                {{else if strEq . "post"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var resp error
                        var ok bool
                        var {{lower $crudObject}}List []*netproto.{{title $crudObject}}
                        {{if strEq $crudObject "Network"}}
                            {{lower .}}Data := netproto.{{title $crudObject}}{
                                TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name: "test{{title .}}{{title $crudObject}}",
                                },
                                Spec:   netproto.{{title $crudObject}}Spec{
                                    IPv4Subnet: "10.1.1.0/24",
                                    IPv4Gateway:   "10.1.1.254",
                                },
                            }
                            err := netutils.HTTPPost("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                        {{else if strEq $crudObject "SecurityGroup"}}
                            postData := netproto.{{title $crudObject}}{
                                TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name:   "test{{title .}}{{title $crudObject}}",
                                },
                                Spec: netproto.{{title $crudObject}}Spec{
                                    SecurityProfile: "unknown",
                                    Rules:  []netproto.SecurityRule{
                                                {
                                                    Direction: "Incoming",
                                                    PeerGroup: "",
                                                    Action: "Allow",
                                                },
                                    },
                                },
                            }
                            err := netutils.HTTPPost("http://"+agentRestURL+"/api/sgs/", &postData, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/sgs/", &{{lower $crudObject}}List )
                        {{else if strEq $crudObject "Endpoint"}}
                            {{lower .}}Data := netproto.Endpoint{
                                TypeMeta: api.TypeMeta{Kind: "Endpoint"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name:   "test{{title .}}{{title $crudObject}}",
                                },
                                Spec: netproto.{{title $crudObject}}Spec{
                                    EndpointUUID:   "testEndpointUUID",
                                    WorkloadUUID:   "testWorkloadUUID",
                                    NetworkName:    "preCreatedNetwork",
                                },
                                Status: netproto.{{title $crudObject}}Status{
                                    NodeUUID:   "dummy-node-uuid",
                                    IPv4Address:    "10.1.1.0/24",
                                },
                            }
                            err := netutils.HTTPPost("http://"+agentRestURL+"/api/endpoints/", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                         {{else if (or (strEq $crudObject "Tenant") (strEq $crudObject "Namespace"))}}
                            {{lower .}}Data := netproto.{{title $crudObject}}{
                                                    TypeMeta: api.TypeMeta{Kind: "Tenant"},
                                                    ObjectMeta : api.ObjectMeta{
                                                                        Tenant:"test{{title .}}{{title $crudObject}}",
                                                                        Name: "test{{title .}}{{title $crudObject}}",
                                                                        Namespace: "test{{title .}}{{title $crudObject}}",
                                                    },
                            }

                            err := netutils.HTTPPost("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                         {{else if strEq $crudObject "Interface"}}
                                                     {{lower .}}Data := netproto.Interface{
                                                         TypeMeta: api.TypeMeta{Kind: "Interface"},
                                                         ObjectMeta: api.ObjectMeta{
                                                             Tenant: "default",
                                                             Namespace: "default",
                                                             Name:   "test{{title .}}{{title $crudObject}}",
                                                         },
                                                         Spec: netproto.{{title $crudObject}}Spec{
                                                             Type: "ENIC",
                                                             AdminStatus: "UP",
                                                         },
                                                         Status: netproto.{{title $crudObject}}Status{
                                                             OperStatus:   "UP",

                                                         },
                                                     }
                                                     err := netutils.HTTPPost("http://"+agentRestURL+"/api/interfaces/", &{{lower .}}Data, &resp)
                                                     getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                        {{end}}
                        AssertOk(t, err, "Error posting {{lower $crudObject}} to REST Server")
                        AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                        for _, o := range {{lower $crudObject}}List {
                            if o.Name == "test{{title .}}{{title $crudObject}}" {
                                ok = true
                                break
                            }
                        }
                        if !ok {
                            t.Errorf("Could not find test{{title .}}{{title $crudObject}} in Response: %v", {{lower $crudObject}}List)
                        }

                    }
                    {{else if strEq . "put"}}
                        func Test{{title $crudObject}}Update(t *testing.T){
                            t.Parallel()
                            var resp error
                            var {{lower $crudObject}}List []*netproto.{{title $crudObject}}
                            {{if strEq $crudObject "Network"}}
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                        IPv4Subnet:  "192.168.1.1/24",
                                                                        IPv4Gateway: "192.168.1.254",
                                                                    }
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Namespace: "default",
                                        Name: "preCreated{{title $crudObject}}",
                                    },
                                    Spec:  updated{{title $crudObject}}Spec,
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/{{lower $crudObject}}s/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                                for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}" {
                                        actual{{title $crudObject}}Spec = o.Spec
                                        break
                                    }
                                }
                                AssertEquals(t, updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validated updated spec.")
                            {{else if strEq $crudObject "Namespace"}}

                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       Meta: &api.ObjectMeta{
                                                                                       ResourceVersion:"v2",
                                                                                   },
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "Namespace"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "preCreatedTenant",
                                        Name:   "preCreated{{title $crudObject}}",
                                        Namespace: "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                               err := netutils.HTTPPut("http://"+agentRestURL+"/api/namespaces/preCreatedTenant/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                               AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                               getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/namespaces/", &{{lower $crudObject}}List )
                               AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                               for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                            actual{{title $crudObject}}Spec = o.Spec
                                            break
                                    }
                               }
                               AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")

                            {{else if strEq $crudObject "SecurityGroup"}}
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                    		SecurityProfile: "unknown",
                                                                    		Rules: []netproto.SecurityRule{
                                                                    			{
                                                                    				Direction: "Incoming",
                                                                    				PeerGroup: "",
                                                                    				Action:    "Deny",
                                                                    			},
                                                                    		},
                                                                    	}
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Namespace: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/sgs/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/sgs/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")

                                for _, o := range {{lower $crudObject}}List{
                                    if o.Name == "preCreated{{title $crudObject}}"{
                                        actual{{title $crudObject}}Spec = o.Spec
                                        break
                                    }
                                }
                                AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")
                            {{else if strEq $crudObject "Endpoint"}}
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                		                                EndpointUUID: "testEndpointUUID",
                                			                            WorkloadUUID: "updatedWorkloadUUID",
                                			                            NetworkName:  "preCreatedNetwork",
                                		                            }
                                {{lower .}}Data := netproto.Endpoint{
                                    TypeMeta: api.TypeMeta{Kind: "Endpoint"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Namespace: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                    Status: netproto.{{title $crudObject}}Status{
                                        NodeUUID:   "dummy-node-uuid",
                                        IPv4Address:    "10.1.1.0/24",
                                    },
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/endpoints/default/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/endpoints/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")


                                 for _, o := range {{lower $crudObject}}List{
                                                                    if o.Name == "preCreated{{title $crudObject}}"{
                                                                        actual{{title $crudObject}}Spec = o.Spec
                                                                        break
                                                                    }
                                                                }
                                 AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")
                            {{else if strEq $crudObject "Tenant"}}
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                		                               Meta: &api.ObjectMeta{
                                                                                       Namespace:"testNamespace",
                                                                                   },
                                		                            }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "Tenant"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "preCreated{{title $crudObject}}",
                                        Namespace: "preCreated{{title $crudObject}}",
                                        Name:   "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/{{lower $crudObject}}s/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")


                                 for _, o := range {{lower $crudObject}}List{
                                                                    if o.Name == "preCreated{{title $crudObject}}"{
                                                                        actual{{title $crudObject}}Spec = o.Spec
                                                                        break
                                                                    }
                                                                }
                                 AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")
                            {{else if strEq $crudObject "Interface"}}
                                var actual{{title $crudObject}}Spec netproto.{{title $crudObject}}Spec
                                updated{{title $crudObject}}Spec := netproto.{{title $crudObject}}Spec{
                                                                       Type: "UPLINK",
                                                                       AdminStatus: "UP",
                                                                    }
                                {{lower .}}Data := netproto.{{title $crudObject}}{
                                    TypeMeta: api.TypeMeta{Kind: "Interface"},
                                    ObjectMeta: api.ObjectMeta{
                                        Tenant: "default",
                                        Namespace: "default",
                                        Name:   "preCreated{{title $crudObject}}",
                                    },
                                    Spec: updated{{title $crudObject}}Spec,
                                }
                                err := netutils.HTTPPut("http://"+agentRestURL+"/api/{{lower $crudObject}}s/preCreated{{title $crudObject}}", &{{lower .}}Data, &resp)
                                AssertOk(t, err, "Error updating {{lower $crudObject}} to REST Server")

                                getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                                AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")


                                 for _, o := range {{lower $crudObject}}List{
                                                                    if o.Name == "preCreated{{title $crudObject}}"{
                                                                        actual{{title $crudObject}}Spec = o.Spec
                                                                        break
                                                                    }
                                                                }
                                 AssertEquals(t,updated{{title $crudObject}}Spec, actual{{title $crudObject}}Spec, "Could not validate updated spec.")
                            {{end}}
                        }
                {{else if strEq . "delete"}}
                    func Test{{title $crudObject}}{{title .}}(t *testing.T){
                        t.Parallel()
                        var resp error
                        var found bool
                        var {{lower $crudObject}}List []*netproto.{{title $crudObject}}
                        {{if strEq $crudObject "Network"}}
                            {{lower .}}Data := netproto.{{title $crudObject}}{
                                TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name: "test{{title .}}{{title $crudObject}}",
                                },
                                Spec:   netproto.{{title $crudObject}}Spec{
                                    IPv4Subnet: "10.1.1.0/24",
                                    IPv4Gateway:   "10.1.1.254",
                                },
                            }
                            postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower .}}Data, &resp)
                            err := netutils.HTTPDelete("http://"+agentRestURL+"/api/{{lower $crudObject}}s/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                        {{else if strEq $crudObject "SecurityGroup"}}
                            postData := netproto.{{title $crudObject}}{
                                TypeMeta:   api.TypeMeta{Kind: "{{title $crudObject}}"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name:   "test{{title .}}{{title $crudObject}}",
                                },
                                Spec: netproto.{{title $crudObject}}Spec{
                                    SecurityProfile: "unknown",
                                    Rules:  []netproto.SecurityRule{
                                                {
                                                    Direction: "Incoming",
                                                    PeerGroup: "",
                                                    Action: "Allow",
                                                },
                                    },
                                },
                            }
                            postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/sgs/", &postData, &resp)
                            err := netutils.HTTPDelete("http://"+agentRestURL+"/api/sgs/default/test{{title .}}{{title $crudObject}}", &postData, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/sgs/", &{{lower $crudObject}}List )
                        {{else if strEq $crudObject "Endpoint"}}
                            {{lower .}}Data := netproto.Endpoint{
                                TypeMeta: api.TypeMeta{Kind: "Endpoint"},
                                ObjectMeta: api.ObjectMeta{
                                    Tenant: "default",
                                    Namespace: "default",
                                    Name:   "test{{title .}}{{title $crudObject}}",
                                },
                                Spec: netproto.{{title $crudObject}}Spec{
                                    EndpointUUID:   "testEndpointUUID",
                                    WorkloadUUID:   "testWorkloadUUID",
                                    NetworkName:    "preCreatedNetwork",
                                },
                                Status: netproto.{{title $crudObject}}Status{
                                    NodeUUID:   "dummy-node-uuid",
                                    IPv4Address:    "10.1.1.0/24",
                                },
                            }
                            postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/endpoints/", &{{lower .}}Data, &resp)
                            err := netutils.HTTPDelete( "http://"+agentRestURL+"/api/endpoints/default/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                            getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                         {{else if strEq $crudObject "Tenant"}}
                             {{lower .}}Data := netproto.{{title $crudObject}}{
                                                     TypeMeta: api.TypeMeta{Kind: "Tenant"},
                                                     ObjectMeta : api.ObjectMeta{
                                                                         Tenant:"test{{title .}}{{title $crudObject}}",
                                                                         Name: "test{{title .}}{{title $crudObject}}",
                                                     },
                             }
                             postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/tenants/", &{{lower .}}Data, &resp)
                             err := netutils.HTTPDelete( "http://"+agentRestURL+"/api/tenants/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                             getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                          {{else if strEq $crudObject "Namespace"}}
                             {{lower .}}Data := netproto.{{title $crudObject}}{
                                 TypeMeta: api.TypeMeta{Kind: "Namespace"},
                                 ObjectMeta: api.ObjectMeta{
                                     Tenant: "preCreatedTenant",
                                     Name:   "testDelete{{title $crudObject}}",
                                     Namespace: "testDelete{{title $crudObject}}",
                                 },
                             }
                             postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/namespaces/", &{{lower .}}Data, &resp)
                             err := netutils.HTTPDelete( "http://"+agentRestURL+"/api/namespaces/preCreatedTenant/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                             getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )

                         {{else if strEq $crudObject "Interface"}}
                              {{lower .}}Data := netproto.{{title $crudObject}}{
                                                      TypeMeta: api.TypeMeta{Kind: "Interface"},
                                                      ObjectMeta : api.ObjectMeta{
                                                                          Tenant:"default",
                                                                          Namespace: "default",
                                                                          Name: "test{{title .}}{{title $crudObject}}",
                                                      },
                                                      Spec: netproto.InterfaceSpec{
                                                      			Type: "LIF",
                                                      			AdminStatus: "UP",
                                                      },
                              }
                              postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/interfaces/", &{{lower .}}Data, &resp)
                              err := netutils.HTTPDelete( "http://"+agentRestURL+"/api/interfaces/test{{title .}}{{title $crudObject}}", &{{lower .}}Data, &resp)
                              getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/{{lower $crudObject}}s/", &{{lower $crudObject}}List )
                        {{end}}
                        AssertOk(t, postErr, "Error posting {{lower $crudObject}} to REST Server")
                        AssertOk(t, err, "Error deleting {{lower $crudObject}} from REST Server")
                        AssertOk(t, getErr, "Error getting {{lower $crudObject}}s from the REST Server")
                        for _, o := range {{lower $crudObject}}List {
                            if o.Name == "test{{title .}}{{title $crudObject}}" {
                                found = true
                                break
                            }
                        }
                        if found {
                            t.Errorf("Found test{{title .}}{{title $crudObject}} in Response after deleting: %v", {{lower $crudObject}}List)
                        }

                    }

                {{end}}

           {{end}}
       {{end}}
    {{end}}
{{end}}
