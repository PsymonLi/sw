// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
 * Package restapi is a auto generated package.
 * Input file: tpm.proto
 */
package restapi

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/gogo/protobuf/types"
	"github.com/gorilla/mux"

	"github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/venice/ctrler/tpm/rpcserver/protos"
)

// addFlowExportPolicyAPIRoutes adds FlowExportPolicy
func addFlowExportPolicyAPIRoutes(r *mux.Router, srv *RestServer) {

	r.Methods("GET").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.FlowExportPolicyGetHandler))

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.FlowExportPolicyListHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.FlowExportPolicyPostHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.FlowExportPolicyDeleteHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.FlowExportPolicyPutHandler))

}

func (s *RestServer) FlowExportPolicyGetHandler(r *http.Request) (interface{}, error) {
	var o tpmprotos.FlowExportPolicy

	o.TypeMeta.Kind = "FlowExportPolicy"
	o.ObjectMeta.Tenant = mux.Vars(r)["ObjectMeta.Tenant"]
	o.ObjectMeta.Namespace = mux.Vars(r)["ObjectMeta.Namespace"]
	o.ObjectMeta.Name = mux.Vars(r)["ObjectMeta.Name"]

	p, err := s.TpAgent.GetFlowExportPolicy(r.Context(), &o)
	return p, err

}

func (s *RestServer) FlowExportPolicyListHandler(r *http.Request) (interface{}, error) {
	p, err := s.TpAgent.ListFlowExportPolicy(r.Context())
	return p, err
}

func (s *RestServer) FlowExportPolicyPostHandler(r *http.Request) (interface{}, error) {
	var o tpmprotos.FlowExportPolicy

	var res Response
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	c, _ := types.TimestampProto(time.Now())
	o.CreationTime = api.Timestamp{
		Timestamp: *c,
	}
	o.ModTime = api.Timestamp{
		Timestamp: *c,
	}
	err = s.TpAgent.CreateFlowExportPolicy(r.Context(), &o)
	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}
	res.References = []string{fmt.Sprintf("%s%s/%s/%s", r.RequestURI, o.Tenant, o.Namespace, o.Name)}
	res.StatusCode = http.StatusOK
	return res, err

}

func (s *RestServer) FlowExportPolicyDeleteHandler(r *http.Request) (interface{}, error) {
	var o tpmprotos.FlowExportPolicy

	o.TypeMeta.Kind = "FlowExportPolicy"
	o.ObjectMeta.Tenant = mux.Vars(r)["ObjectMeta.Tenant"]
	o.ObjectMeta.Namespace = mux.Vars(r)["ObjectMeta.Namespace"]
	o.ObjectMeta.Name = mux.Vars(r)["ObjectMeta.Name"]

	return Response{}, s.TpAgent.DeleteFlowExportPolicy(r.Context(), &o)

}

func (s *RestServer) FlowExportPolicyPutHandler(r *http.Request) (interface{}, error) {
	var o tpmprotos.FlowExportPolicy

	var res Response
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}
	m, _ := types.TimestampProto(time.Now())
	o.ModTime = api.Timestamp{
		Timestamp: *m,
	}
	err = s.TpAgent.UpdateFlowExportPolicy(r.Context(), &o)
	if err != nil {
		res.StatusCode = http.StatusInternalServerError
		res.Error = err.Error()
		return res, err
	}
	res.References = []string{fmt.Sprintf("%s%s/%s/%s", r.RequestURI, o.Tenant, o.Namespace, o.Name)}
	res.StatusCode = http.StatusOK
	return res, err

}

// addFwlogPolicyAPIRoutes adds FwlogPolicy
func addFwlogPolicyAPIRoutes(r *mux.Router, srv *RestServer) {

}

// addStatsPolicyAPIRoutes adds StatsPolicy
func addStatsPolicyAPIRoutes(r *mux.Router, srv *RestServer) {

}
