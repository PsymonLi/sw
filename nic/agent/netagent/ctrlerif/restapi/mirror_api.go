// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
 * Package restapi is a auto generated package.
 * Input file: mirror.proto
 */
package restapi

import (
	"encoding/json"
	"io/ioutil"
	"net/http"

	"github.com/gorilla/mux"

	"github.com/pensando/sw/nic/agent/httputils"
	"github.com/pensando/sw/venice/ctrler/tsm/rpcserver/tsproto"
)

// addMirrorSessionAPIRoutes adds MirrorSession
func addMirrorSessionAPIRoutes(r *mux.Router, srv *RestServer) {

	r.Methods("GET").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.PacketCaptureGetHandler))

	r.Methods("GET").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.PacketCaptureListHandler))

	r.Methods("POST").Subrouter().HandleFunc("/", httputils.MakeHTTPHandler(srv.PacketCapturePostHandler))

	r.Methods("PUT").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.PacketCapturePutHandler))

	r.Methods("DELETE").Subrouter().HandleFunc("/{ObjectMeta.Tenant}/{ObjectMeta.Namespace}/{ObjectMeta.Name}", httputils.MakeHTTPHandler(srv.PacketCaptureDeleteHandler))

}

func (s *RestServer) PacketCaptureGetHandler(r *http.Request) (interface{}, error) {
	var o tsproto.MirrorSession
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	return s.TsAgent.GetPacketCaptureSession(), nil

}

func (s *RestServer) PacketCaptureListHandler(r *http.Request) (interface{}, error) {
	return s.TsAgent.ListPacketCaptureSession(), nil
}

func (s *RestServer) PacketCapturePostHandler(r *http.Request) (interface{}, error) {
	var o tsproto.MirrorSession
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	return nil, s.TsAgent.CreatePacketCaptureSession(&o)

}

func (s *RestServer) PacketCapturePutHandler(r *http.Request) (interface{}, error) {
	var o tsproto.MirrorSession
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	return nil, s.TsAgent.UpdatePacketCaptureSession(&o)

}

func (s *RestServer) PacketCaptureDeleteHandler(r *http.Request) (interface{}, error) {
	var o tsproto.MirrorSession
	b, _ := ioutil.ReadAll(r.Body)
	err := json.Unmarshal(b, &o)
	if err != nil {
		return nil, err
	}

	return nil, s.TsAgent.DeletePacketCaptureSession(&o)

}
