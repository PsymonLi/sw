// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: port.proto
*/
package restapi

import (
	"testing"

	api "github.com/pensando/sw/api"
	"github.com/pensando/sw/nic/agent/netagent/protos/netproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

func TestPortList(t *testing.T) {
	t.Parallel()
	var ok bool
	var portList []*netproto.Port

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/system/ports/", &portList)

	AssertOk(t, err, "Error getting ports from the REST Server")
	for _, o := range portList {
		if o.Name == "preCreatedPort" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedPort in Response: %v", portList)
	}

}

func TestPortUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var portList []*netproto.Port

	var actualPortSpec netproto.PortSpec
	updatedPortSpec := netproto.PortSpec{
		AdminStatus: "DOWN",
	}
	putData := netproto.Port{
		TypeMeta: api.TypeMeta{Kind: "Port"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Name:      "preCreatedPort",
			Namespace: "default",
		},
		Spec: updatedPortSpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/system/ports/default/default/preCreatedPort", &putData, &resp)
	AssertOk(t, err, "Error updating port to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/system/ports/", &portList)
	AssertOk(t, getErr, "Error getting ports from the REST Server")
	for _, o := range portList {
		if o.Name == "preCreatedPort" {
			actualPortSpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedPortSpec, actualPortSpec, "Could not validate updated spec.")

}

func TestPortCreateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badPostData := netproto.Port{
		TypeMeta: api.TypeMeta{Kind: "Port"},
		ObjectMeta: api.ObjectMeta{
			Name: "",
		},
	}

	err := netutils.HTTPPost("http://"+agentRestURL+"/api/system/ports/", &badPostData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestPortDeleteErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Port{
		TypeMeta: api.TypeMeta{Kind: "Port"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/system/ports/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}

func TestPortUpdateErr(t *testing.T) {
	t.Parallel()
	var resp Response
	badDelData := netproto.Port{
		TypeMeta: api.TypeMeta{Kind: "Port"},
		ObjectMeta: api.ObjectMeta{Tenant: "default",
			Namespace: "default",
			Name:      "badObject"},
	}

	err := netutils.HTTPPut("http://"+agentRestURL+"/api/system/ports/default/default/badObject", &badDelData, &resp)

	Assert(t, err != nil, "Expected test to error out with 500. It passed instead")
}
