// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package tsproto is a auto generated package.
Input file: mirror.proto
*/
package restapi

import (
	"testing"

	api "github.com/pensando/sw/api"
	monitoring "github.com/pensando/sw/api/generated/monitoring"
	"github.com/pensando/sw/venice/ctrler/tsm/rpcserver/tsproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

// Dummy imports
var _ Evaluator

func TestMirrorSessionList(t *testing.T) {
	t.Parallel()
	var mirrorsessionList []*tsproto.MirrorSession
	err := netutils.HTTPGet("http://"+agentRestURL+"/api/mirror/sessions/", &mirrorsessionList)
	AssertOk(t, err, "Error getting mirrorsessions from the REST Server")
}

func TestMirrorSessionPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var mirrorsessionGet tsproto.MirrorSession
	postData := tsproto.MirrorSession{
		TypeMeta: api.TypeMeta{Kind: "MirrorSession"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostMirrorSession",
		},
		Spec: tsproto.MirrorSessionSpec{
			PacketSize:    128,
			Enable:        true,
			PacketFilters: []string{"ALL_DROPS"},
			CaptureAt:     0,
			Collectors: []tsproto.MirrorCollector{
				tsproto.MirrorCollector{Type: "ERSPAN", ExportCfg: monitoring.ExportConfig{Destination: "10.10.10.1", Transport: "TCP/8181"}},
			},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/mirror/sessions/", &postData, &resp)
	AssertOk(t, err, "Error posting mirrorsession to REST Server")
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/mirror/sessions/default/default/"+"testPostMirrorSession/", &mirrorsessionGet)
	AssertOk(t, getErr, "Error getting mirrorsessions from the REST Server")
	if mirrorsessionGet.Name == "testPostMirrorSession" {
		ok = true
	}
	if !ok {
		t.Errorf("Could not create testPostMirrorSession in Response: %v", mirrorsessionGet)
	}
}

func TestMirrorSessionUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var mirrorsessionGet tsproto.MirrorSession
	putData := tsproto.MirrorSession{
		TypeMeta: api.TypeMeta{Kind: "MirrorSession"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPutMirrorSession",
		},
		Spec: tsproto.MirrorSessionSpec{
			PacketSize:    128,
			Enable:        true,
			PacketFilters: []string{"ALL_DROPS"},
			CaptureAt:     0,
			Collectors: []tsproto.MirrorCollector{
				tsproto.MirrorCollector{Type: "ERSPAN", ExportCfg: monitoring.ExportConfig{Destination: "10.10.10.1", Transport: "TCP/8181"}},
			},
		},
	}
	// First post
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/mirror/sessions/", &putData, &resp)
	AssertOk(t, err, "Error posting mirrorsession to REST Server")

	// update using put
	putData = tsproto.MirrorSession{
		TypeMeta: api.TypeMeta{Kind: "MirrorSession"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPutMirrorSession",
		},
		Spec: tsproto.MirrorSessionSpec{
			PacketSize:    256,
			Enable:        true,
			PacketFilters: []string{"ALL_DROPS"},
			CaptureAt:     1,
			Collectors: []tsproto.MirrorCollector{
				tsproto.MirrorCollector{Type: "ERSPAN", ExportCfg: monitoring.ExportConfig{Destination: "10.10.10.1", Transport: "TCP/8181"}},
			},
		},
	}
	err = netutils.HTTPPut("http://"+agentRestURL+"/api/mirror/sessions/default/default/"+"testPutMirrorSession", &putData, &resp)
	AssertOk(t, err, "Error puting mirrorsession to REST Server")
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/mirror/sessions/default/default/"+"testPutMirrorSession/", &mirrorsessionGet)
	AssertOk(t, getErr, "Error getting mirrorsessions from the REST Server")
	if mirrorsessionGet.Spec.PacketSize == 256 {
		ok = true
	}
	if !ok {
		t.Errorf("Could not update testPutMirrorSession in Response: %v", mirrorsessionGet)
	}
}

func TestMirrorSessionDelete(t *testing.T) {
	t.Parallel()
	var resp Response
	deleteData := tsproto.MirrorSession{
		TypeMeta: api.TypeMeta{Kind: "MirrorSession"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteMirrorSession",
		},
		Spec: tsproto.MirrorSessionSpec{
			PacketSize:    128,
			Enable:        true,
			PacketFilters: []string{"ALL_DROPS"},
			CaptureAt:     0,
			Collectors: []tsproto.MirrorCollector{
				tsproto.MirrorCollector{Type: "ERSPAN", ExportCfg: monitoring.ExportConfig{Destination: "10.10.10.1", Transport: "TCP/8181"}},
			},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/mirror/sessions/", &deleteData, &resp)
	AssertOk(t, err, "Error posting mirrorsession to REST Server")
	delErr := netutils.HTTPDelete("http://"+agentRestURL+"/api/mirror/sessions/default/default/"+"testDeleteMirrorSession", &deleteData, &resp)
	AssertOk(t, delErr, "Error deleting mirrorsessions from the REST Server")
}
