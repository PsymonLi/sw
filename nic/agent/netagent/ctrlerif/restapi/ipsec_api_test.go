// Code generated by protoc-gen-grpc-pensando DO NOT EDIT.

/*
Package netproto is a auto generated package.
Input file: ipsec.proto
*/
package restapi

import (
	"testing"

	api "github.com/pensando/sw/api"
	"github.com/pensando/sw/venice/ctrler/npm/rpcserver/netproto"
	"github.com/pensando/sw/venice/utils/netutils"
	. "github.com/pensando/sw/venice/utils/testutils"
)

func TestIPSecPolicyList(t *testing.T) {
	t.Parallel()
	var ok bool
	var ipsecpolicyList []*netproto.IPSecPolicy

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/policies/", &ipsecpolicyList)

	AssertOk(t, err, "Error getting ipsecpolicys from the REST Server")
	for _, o := range ipsecpolicyList {
		if o.Name == "preCreatedIPSecPolicy" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedIPSecPolicy in Response: %v", ipsecpolicyList)
	}

}

func TestIPSecPolicyPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var ipsecpolicyList []*netproto.IPSecPolicy

	postData := netproto.IPSecPolicy{
		TypeMeta: api.TypeMeta{Kind: "IPSecPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostIPSecPolicy",
		},
		Spec: netproto.IPSecPolicySpec{
			Rules: []netproto.IPSecRule{
				{
					Src: &netproto.MatchSelector{
						Address:   "10.0.0.0 - 10.0.1.0",
						App:       "ESP",
						AppConfig: "1",
					},
					Dst: &netproto.MatchSelector{
						Address:   "192.168.0.1 - 192.168.1.0",
						App:       "ESP",
						AppConfig: "1",
					},
					SAName: "preCreatedIPSecSAEncrypt",
					SAType: "ENCRYPT",
				},
				{
					Src: &netproto.MatchSelector{
						Address:   "10.0.0.0 - 10.0.1.0",
						App:       "ESP",
						AppConfig: "1",
					},
					Dst: &netproto.MatchSelector{
						Address:   "192.168.0.1 - 192.168.1.0",
						App:       "ESP",
						AppConfig: "1",
					},
					SAName: "preCreatedIPSecSADecrypt",
					SAType: "DECRYPT",
				},
			},
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/policies/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/policies/", &ipsecpolicyList)

	AssertOk(t, err, "Error posting ipsecpolicy to REST Server")
	AssertOk(t, getErr, "Error getting ipsecpolicys from the REST Server")
	for _, o := range ipsecpolicyList {
		if o.Name == "testPostIPSecPolicy" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostIPSecPolicy in Response: %v", ipsecpolicyList)
	}

}

func TestIPSecPolicyUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var ipsecpolicyList []*netproto.IPSecPolicy

	var actualIPSecPolicySpec netproto.IPSecPolicySpec
	updatedIPSecPolicySpec := netproto.IPSecPolicySpec{
		Rules: []netproto.IPSecRule{
			{
				SAName: "updatedEncryptSA",
			},
		},
	}
	putData := netproto.IPSecPolicy{
		TypeMeta: api.TypeMeta{Kind: "IPSecPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Name:      "preCreatedIPSecPolicy",
			Namespace: "default",
		},
		Spec: updatedIPSecPolicySpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/ipsec/policies/default/default/preCreatedIPSecPolicy", &putData, &resp)
	AssertOk(t, err, "Error updating ipsecpolicy to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/policies/", &ipsecpolicyList)
	AssertOk(t, getErr, "Error getting ipsecpolicys from the REST Server")
	for _, o := range ipsecpolicyList {
		if o.Name == "preCreatedIPSecPolicy" {
			actualIPSecPolicySpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedIPSecPolicySpec, actualIPSecPolicySpec, "Could not validate updated spec.")

}

func TestIPSecPolicyDelete(t *testing.T) {
	t.Parallel()
	var resp Response
	var found bool
	var ipsecpolicyList []*netproto.IPSecPolicy

	deleteData := netproto.IPSecPolicy{
		TypeMeta: api.TypeMeta{Kind: "IPSecPolicy"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteIPSecPolicy",
		},
		Spec: netproto.IPSecPolicySpec{
			Rules: []netproto.IPSecRule{
				{
					Src: &netproto.MatchSelector{
						Address:   "10.0.0.0 - 10.0.1.0",
						App:       "ESP",
						AppConfig: "1",
					},
					Dst: &netproto.MatchSelector{
						Address:   "192.168.0.1 - 192.168.1.0",
						App:       "ESP",
						AppConfig: "1",
					},
					SAName: "preCreatedIPSecSAEncrypt",
					SAType: "ENCRYPT",
				},
				{
					Src: &netproto.MatchSelector{
						Address:   "10.0.0.0 - 10.0.1.0",
						App:       "ESP",
						AppConfig: "1",
					},
					Dst: &netproto.MatchSelector{
						Address:   "192.168.0.1 - 192.168.1.0",
						App:       "ESP",
						AppConfig: "1",
					},
					SAName: "preCreatedIPSecSADecrypt",
					SAType: "DECRYPT",
				},
			},
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/policies/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/ipsec/policies/default/default/testDeleteIPSecPolicy", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/policies/", &ipsecpolicyList)

	AssertOk(t, postErr, "Error posting ipsecpolicy to REST Server")
	AssertOk(t, err, "Error deleting ipsecpolicy from REST Server")
	AssertOk(t, getErr, "Error getting ipsecpolicys from the REST Server")
	for _, o := range ipsecpolicyList {
		if o.Name == "testDeleteIPSecPolicy" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteIPSecPolicy in Response after deleting: %v", ipsecpolicyList)
	}

}

func TestIPSecSADecryptList(t *testing.T) {
	t.Parallel()
	var ok bool
	var ipsecsadecryptList []*netproto.IPSecSADecrypt

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/decrypt/", &ipsecsadecryptList)

	AssertOk(t, err, "Error getting ipsecsadecrypts from the REST Server")
	for _, o := range ipsecsadecryptList {
		if o.Name == "preCreatedIPSecSADecrypt" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedIPSecSADecrypt in Response: %v", ipsecsadecryptList)
	}

}

func TestIPSecSADecryptPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var ipsecsadecryptList []*netproto.IPSecSADecrypt

	postData := netproto.IPSecSADecrypt{
		TypeMeta: api.TypeMeta{Kind: "IPSecSADecrypt"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostIPSecSADecrypt",
		},
		Spec: netproto.IPSecSADecryptSpec{
			Protocol:           "ESP",
			AuthAlgo:           "AES_GCM",
			AuthKey:            "someRandomString",
			DecryptAlgo:        "AES_GCM_256",
			DecryptionKey:      "someRandomKey",
			RekeyDecryptAlgo:   "DES3",
			RekeyDecryptionKey: "someRandomString",
			LocalGwIP:          "10.0.0.1",
			RemoteGwIP:         "192.168.1.1",
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/decrypt/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/decrypt/", &ipsecsadecryptList)

	AssertOk(t, err, "Error posting ipsecsadecrypt to REST Server")
	AssertOk(t, getErr, "Error getting ipsecsadecrypts from the REST Server")
	for _, o := range ipsecsadecryptList {
		if o.Name == "testPostIPSecSADecrypt" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostIPSecSADecrypt in Response: %v", ipsecsadecryptList)
	}

}

func TestIPSecSADecryptUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var ipsecsadecryptList []*netproto.IPSecSADecrypt

	var actualIPSecSADecryptSpec netproto.IPSecSADecryptSpec
	updatedIPSecSADecryptSpec := netproto.IPSecSADecryptSpec{
		Protocol: "AH",
	}
	putData := netproto.IPSecSADecrypt{
		TypeMeta: api.TypeMeta{Kind: "IPSecSADecrypt"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Name:      "preCreatedIPSecSADecrypt",
			Namespace: "default",
		},
		Spec: updatedIPSecSADecryptSpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/ipsec/decrypt/default/default/preCreatedIPSecSADecrypt", &putData, &resp)
	AssertOk(t, err, "Error updating ipsecsadecrypt to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/decrypt/", &ipsecsadecryptList)
	AssertOk(t, getErr, "Error getting ipsecsadecrypts from the REST Server")
	for _, o := range ipsecsadecryptList {
		if o.Name == "preCreatedIPSecSADecrypt" {
			actualIPSecSADecryptSpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedIPSecSADecryptSpec, actualIPSecSADecryptSpec, "Could not validate updated spec.")

}

func TestIPSecSADecryptDelete(t *testing.T) {
	t.Parallel()
	var resp Response
	var found bool
	var ipsecsadecryptList []*netproto.IPSecSADecrypt

	deleteData := netproto.IPSecSADecrypt{
		TypeMeta: api.TypeMeta{Kind: "IPSecSADecrypt"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteIPSecSADecrypt",
		},
		Spec: netproto.IPSecSADecryptSpec{
			Protocol:      "ESP",
			AuthAlgo:      "AES_GCM",
			AuthKey:       "someRandomString",
			DecryptAlgo:   "AES_GCM_256",
			DecryptionKey: "someRandomKey",
			LocalGwIP:     "10.0.0.1",
			RemoteGwIP:    "192.168.1.1",
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/decrypt/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/ipsec/decrypt/default/default/testDeleteIPSecSADecrypt", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/decrypt/", &ipsecsadecryptList)

	AssertOk(t, postErr, "Error posting ipsecsadecrypt to REST Server")
	AssertOk(t, err, "Error deleting ipsecsadecrypt from REST Server")
	AssertOk(t, getErr, "Error getting ipsecsadecrypts from the REST Server")
	for _, o := range ipsecsadecryptList {
		if o.Name == "testDeleteIPSecSADecrypt" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteIPSecSADecrypt in Response after deleting: %v", ipsecsadecryptList)
	}

}

func TestIPSecSAEncryptList(t *testing.T) {
	t.Parallel()
	var ok bool
	var ipsecsaencryptList []*netproto.IPSecSAEncrypt

	err := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/encrypt/", &ipsecsaencryptList)

	AssertOk(t, err, "Error getting ipsecsaencrypts from the REST Server")
	for _, o := range ipsecsaencryptList {
		if o.Name == "preCreatedIPSecSAEncrypt" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find preCreatedIPSecSAEncrypt in Response: %v", ipsecsaencryptList)
	}

}

func TestIPSecSAEncryptPost(t *testing.T) {
	t.Parallel()
	var resp Response
	var ok bool
	var ipsecsaencryptList []*netproto.IPSecSAEncrypt

	postData := netproto.IPSecSAEncrypt{
		TypeMeta: api.TypeMeta{Kind: "IPSecSAEncrypt"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testPostIPSecSAEncrypt",
		},
		Spec: netproto.IPSecSAEncryptSpec{
			Protocol:      "ESP",
			AuthAlgo:      "AES_GCM",
			AuthKey:       "someRandomString",
			EncryptAlgo:   "AES_GCM_256",
			EncryptionKey: "someRandomKey",
			LocalGwIP:     "10.0.0.1",
			RemoteGwIP:    "192.168.1.1",
		},
	}
	err := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/encrypt/", &postData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/encrypt/", &ipsecsaencryptList)

	AssertOk(t, err, "Error posting ipsecsaencrypt to REST Server")
	AssertOk(t, getErr, "Error getting ipsecsaencrypts from the REST Server")
	for _, o := range ipsecsaencryptList {
		if o.Name == "testPostIPSecSAEncrypt" {
			ok = true
			break
		}
	}
	if !ok {
		t.Errorf("Could not find testPostIPSecSAEncrypt in Response: %v", ipsecsaencryptList)
	}

}

func TestIPSecSAEncryptUpdate(t *testing.T) {
	t.Parallel()
	var resp Response
	var ipsecsaencryptList []*netproto.IPSecSAEncrypt

	var actualIPSecSAEncryptSpec netproto.IPSecSAEncryptSpec
	updatedIPSecSAEncryptSpec := netproto.IPSecSAEncryptSpec{
		Protocol: "AH",
	}
	putData := netproto.IPSecSAEncrypt{
		TypeMeta: api.TypeMeta{Kind: "IPSecSAEncrypt"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Name:      "preCreatedIPSecSAEncrypt",
			Namespace: "default",
		},
		Spec: updatedIPSecSAEncryptSpec,
	}
	err := netutils.HTTPPut("http://"+agentRestURL+"/api/ipsec/encrypt/default/default/preCreatedIPSecSAEncrypt", &putData, &resp)
	AssertOk(t, err, "Error updating ipsecsaencrypt to REST Server")

	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/encrypt/", &ipsecsaencryptList)
	AssertOk(t, getErr, "Error getting ipsecsaencrypts from the REST Server")
	for _, o := range ipsecsaencryptList {
		if o.Name == "preCreatedIPSecSAEncrypt" {
			actualIPSecSAEncryptSpec = o.Spec
			break
		}
	}
	AssertEquals(t, updatedIPSecSAEncryptSpec, actualIPSecSAEncryptSpec, "Could not validate updated spec.")

}

func TestIPSecSAEncryptDelete(t *testing.T) {
	t.Parallel()
	var resp Response
	var found bool
	var ipsecsaencryptList []*netproto.IPSecSAEncrypt

	deleteData := netproto.IPSecSAEncrypt{
		TypeMeta: api.TypeMeta{Kind: "IPSecSAEncrypt"},
		ObjectMeta: api.ObjectMeta{
			Tenant:    "default",
			Namespace: "default",
			Name:      "testDeleteIPSecSAEncrypt",
		},
		Spec: netproto.IPSecSAEncryptSpec{
			Protocol:      "ESP",
			AuthAlgo:      "AES_GCM",
			AuthKey:       "someRandomString",
			EncryptAlgo:   "AES_GCM_256",
			EncryptionKey: "someRandomKey",
			LocalGwIP:     "10.0.0.1",
			RemoteGwIP:    "192.168.1.1",
		},
	}
	postErr := netutils.HTTPPost("http://"+agentRestURL+"/api/ipsec/encrypt/", &deleteData, &resp)
	err := netutils.HTTPDelete("http://"+agentRestURL+"/api/ipsec/encrypt/default/default/testDeleteIPSecSAEncrypt", &deleteData, &resp)
	getErr := netutils.HTTPGet("http://"+agentRestURL+"/api/ipsec/encrypt/", &ipsecsaencryptList)

	AssertOk(t, postErr, "Error posting ipsecsaencrypt to REST Server")
	AssertOk(t, err, "Error deleting ipsecsaencrypt from REST Server")
	AssertOk(t, getErr, "Error getting ipsecsaencrypts from the REST Server")
	for _, o := range ipsecsaencryptList {
		if o.Name == "testDeleteIPSecSAEncrypt" {
			found = true
			break
		}
	}
	if found {
		t.Errorf("Found testDeleteIPSecSAEncrypt in Response after deleting: %v", ipsecsaencryptList)
	}

}
