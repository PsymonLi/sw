// Code generated by MockGen. DO NOT EDIT.
// Source: ipseccb.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisIpsecCbKeyHandle_KeyOrHandle is a mock of isIpsecCbKeyHandle_KeyOrHandle interface
type MockisIpsecCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisIpsecCbKeyHandle_KeyOrHandle
type MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisIpsecCbKeyHandle_KeyOrHandle
}

// NewMockisIpsecCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisIpsecCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisIpsecCbKeyHandle_KeyOrHandle {
	mock := &MockisIpsecCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisIpsecCbKeyHandle_KeyOrHandle) EXPECT() *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isIpsecCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisIpsecCbKeyHandle_KeyOrHandle) isIpsecCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isIpsecCbKeyHandle_KeyOrHandle")
}

// isIpsecCbKeyHandle_KeyOrHandle indicates an expected call of isIpsecCbKeyHandle_KeyOrHandle
func (mr *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder) isIpsecCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIpsecCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisIpsecCbKeyHandle_KeyOrHandle)(nil).isIpsecCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisIpsecCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisIpsecCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisIpsecCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisIpsecCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockIpsecCbClient is a mock of IpsecCbClient interface
type MockIpsecCbClient struct {
	ctrl     *gomock.Controller
	recorder *MockIpsecCbClientMockRecorder
}

// MockIpsecCbClientMockRecorder is the mock recorder for MockIpsecCbClient
type MockIpsecCbClientMockRecorder struct {
	mock *MockIpsecCbClient
}

// NewMockIpsecCbClient creates a new mock instance
func NewMockIpsecCbClient(ctrl *gomock.Controller) *MockIpsecCbClient {
	mock := &MockIpsecCbClient{ctrl: ctrl}
	mock.recorder = &MockIpsecCbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIpsecCbClient) EXPECT() *MockIpsecCbClientMockRecorder {
	return m.recorder
}

// IpsecCbCreate mocks base method
func (m *MockIpsecCbClient) IpsecCbCreate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpsecCbCreate", varargs...)
	ret0, _ := ret[0].(*IpsecCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbCreate indicates an expected call of IpsecCbCreate
func (mr *MockIpsecCbClientMockRecorder) IpsecCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbCreate", reflect.TypeOf((*MockIpsecCbClient)(nil).IpsecCbCreate), varargs...)
}

// IpsecCbUpdate mocks base method
func (m *MockIpsecCbClient) IpsecCbUpdate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpsecCbUpdate", varargs...)
	ret0, _ := ret[0].(*IpsecCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbUpdate indicates an expected call of IpsecCbUpdate
func (mr *MockIpsecCbClientMockRecorder) IpsecCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbUpdate", reflect.TypeOf((*MockIpsecCbClient)(nil).IpsecCbUpdate), varargs...)
}

// IpsecCbDelete mocks base method
func (m *MockIpsecCbClient) IpsecCbDelete(ctx context.Context, in *IpsecCbDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpsecCbDelete", varargs...)
	ret0, _ := ret[0].(*IpsecCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbDelete indicates an expected call of IpsecCbDelete
func (mr *MockIpsecCbClientMockRecorder) IpsecCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbDelete", reflect.TypeOf((*MockIpsecCbClient)(nil).IpsecCbDelete), varargs...)
}

// IpsecCbGet mocks base method
func (m *MockIpsecCbClient) IpsecCbGet(ctx context.Context, in *IpsecCbGetRequestMsg, opts ...grpc.CallOption) (*IpsecCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpsecCbGet", varargs...)
	ret0, _ := ret[0].(*IpsecCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbGet indicates an expected call of IpsecCbGet
func (mr *MockIpsecCbClientMockRecorder) IpsecCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbGet", reflect.TypeOf((*MockIpsecCbClient)(nil).IpsecCbGet), varargs...)
}

// MockIpsecCbServer is a mock of IpsecCbServer interface
type MockIpsecCbServer struct {
	ctrl     *gomock.Controller
	recorder *MockIpsecCbServerMockRecorder
}

// MockIpsecCbServerMockRecorder is the mock recorder for MockIpsecCbServer
type MockIpsecCbServerMockRecorder struct {
	mock *MockIpsecCbServer
}

// NewMockIpsecCbServer creates a new mock instance
func NewMockIpsecCbServer(ctrl *gomock.Controller) *MockIpsecCbServer {
	mock := &MockIpsecCbServer{ctrl: ctrl}
	mock.recorder = &MockIpsecCbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIpsecCbServer) EXPECT() *MockIpsecCbServerMockRecorder {
	return m.recorder
}

// IpsecCbCreate mocks base method
func (m *MockIpsecCbServer) IpsecCbCreate(arg0 context.Context, arg1 *IpsecCbRequestMsg) (*IpsecCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "IpsecCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*IpsecCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbCreate indicates an expected call of IpsecCbCreate
func (mr *MockIpsecCbServerMockRecorder) IpsecCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbCreate", reflect.TypeOf((*MockIpsecCbServer)(nil).IpsecCbCreate), arg0, arg1)
}

// IpsecCbUpdate mocks base method
func (m *MockIpsecCbServer) IpsecCbUpdate(arg0 context.Context, arg1 *IpsecCbRequestMsg) (*IpsecCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "IpsecCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*IpsecCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbUpdate indicates an expected call of IpsecCbUpdate
func (mr *MockIpsecCbServerMockRecorder) IpsecCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbUpdate", reflect.TypeOf((*MockIpsecCbServer)(nil).IpsecCbUpdate), arg0, arg1)
}

// IpsecCbDelete mocks base method
func (m *MockIpsecCbServer) IpsecCbDelete(arg0 context.Context, arg1 *IpsecCbDeleteRequestMsg) (*IpsecCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "IpsecCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*IpsecCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbDelete indicates an expected call of IpsecCbDelete
func (mr *MockIpsecCbServerMockRecorder) IpsecCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbDelete", reflect.TypeOf((*MockIpsecCbServer)(nil).IpsecCbDelete), arg0, arg1)
}

// IpsecCbGet mocks base method
func (m *MockIpsecCbServer) IpsecCbGet(arg0 context.Context, arg1 *IpsecCbGetRequestMsg) (*IpsecCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "IpsecCbGet", arg0, arg1)
	ret0, _ := ret[0].(*IpsecCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbGet indicates an expected call of IpsecCbGet
func (mr *MockIpsecCbServerMockRecorder) IpsecCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbGet", reflect.TypeOf((*MockIpsecCbServer)(nil).IpsecCbGet), arg0, arg1)
}
