// Code generated by MockGen. DO NOT EDIT.
// Source: proxyccb.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisProxycCbKeyHandle_KeyOrHandle is a mock of isProxycCbKeyHandle_KeyOrHandle interface
type MockisProxycCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisProxycCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisProxycCbKeyHandle_KeyOrHandle
type MockisProxycCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisProxycCbKeyHandle_KeyOrHandle
}

// NewMockisProxycCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisProxycCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisProxycCbKeyHandle_KeyOrHandle {
	mock := &MockisProxycCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisProxycCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisProxycCbKeyHandle_KeyOrHandle) EXPECT() *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isProxycCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisProxycCbKeyHandle_KeyOrHandle) isProxycCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isProxycCbKeyHandle_KeyOrHandle")
}

// isProxycCbKeyHandle_KeyOrHandle indicates an expected call of isProxycCbKeyHandle_KeyOrHandle
func (mr *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder) isProxycCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isProxycCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisProxycCbKeyHandle_KeyOrHandle)(nil).isProxycCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisProxycCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisProxycCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisProxycCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisProxycCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockProxycCbClient is a mock of ProxycCbClient interface
type MockProxycCbClient struct {
	ctrl     *gomock.Controller
	recorder *MockProxycCbClientMockRecorder
}

// MockProxycCbClientMockRecorder is the mock recorder for MockProxycCbClient
type MockProxycCbClientMockRecorder struct {
	mock *MockProxycCbClient
}

// NewMockProxycCbClient creates a new mock instance
func NewMockProxycCbClient(ctrl *gomock.Controller) *MockProxycCbClient {
	mock := &MockProxycCbClient{ctrl: ctrl}
	mock.recorder = &MockProxycCbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxycCbClient) EXPECT() *MockProxycCbClientMockRecorder {
	return m.recorder
}

// ProxycCbCreate mocks base method
func (m *MockProxycCbClient) ProxycCbCreate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxycCbCreate", varargs...)
	ret0, _ := ret[0].(*ProxycCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbCreate indicates an expected call of ProxycCbCreate
func (mr *MockProxycCbClientMockRecorder) ProxycCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbCreate", reflect.TypeOf((*MockProxycCbClient)(nil).ProxycCbCreate), varargs...)
}

// ProxycCbUpdate mocks base method
func (m *MockProxycCbClient) ProxycCbUpdate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxycCbUpdate", varargs...)
	ret0, _ := ret[0].(*ProxycCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbUpdate indicates an expected call of ProxycCbUpdate
func (mr *MockProxycCbClientMockRecorder) ProxycCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbUpdate", reflect.TypeOf((*MockProxycCbClient)(nil).ProxycCbUpdate), varargs...)
}

// ProxycCbDelete mocks base method
func (m *MockProxycCbClient) ProxycCbDelete(ctx context.Context, in *ProxycCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxycCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxycCbDelete", varargs...)
	ret0, _ := ret[0].(*ProxycCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbDelete indicates an expected call of ProxycCbDelete
func (mr *MockProxycCbClientMockRecorder) ProxycCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbDelete", reflect.TypeOf((*MockProxycCbClient)(nil).ProxycCbDelete), varargs...)
}

// ProxycCbGet mocks base method
func (m *MockProxycCbClient) ProxycCbGet(ctx context.Context, in *ProxycCbGetRequestMsg, opts ...grpc.CallOption) (*ProxycCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxycCbGet", varargs...)
	ret0, _ := ret[0].(*ProxycCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbGet indicates an expected call of ProxycCbGet
func (mr *MockProxycCbClientMockRecorder) ProxycCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbGet", reflect.TypeOf((*MockProxycCbClient)(nil).ProxycCbGet), varargs...)
}

// MockProxycCbServer is a mock of ProxycCbServer interface
type MockProxycCbServer struct {
	ctrl     *gomock.Controller
	recorder *MockProxycCbServerMockRecorder
}

// MockProxycCbServerMockRecorder is the mock recorder for MockProxycCbServer
type MockProxycCbServerMockRecorder struct {
	mock *MockProxycCbServer
}

// NewMockProxycCbServer creates a new mock instance
func NewMockProxycCbServer(ctrl *gomock.Controller) *MockProxycCbServer {
	mock := &MockProxycCbServer{ctrl: ctrl}
	mock.recorder = &MockProxycCbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxycCbServer) EXPECT() *MockProxycCbServerMockRecorder {
	return m.recorder
}

// ProxycCbCreate mocks base method
func (m *MockProxycCbServer) ProxycCbCreate(arg0 context.Context, arg1 *ProxycCbRequestMsg) (*ProxycCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxycCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*ProxycCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbCreate indicates an expected call of ProxycCbCreate
func (mr *MockProxycCbServerMockRecorder) ProxycCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbCreate", reflect.TypeOf((*MockProxycCbServer)(nil).ProxycCbCreate), arg0, arg1)
}

// ProxycCbUpdate mocks base method
func (m *MockProxycCbServer) ProxycCbUpdate(arg0 context.Context, arg1 *ProxycCbRequestMsg) (*ProxycCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxycCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*ProxycCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbUpdate indicates an expected call of ProxycCbUpdate
func (mr *MockProxycCbServerMockRecorder) ProxycCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbUpdate", reflect.TypeOf((*MockProxycCbServer)(nil).ProxycCbUpdate), arg0, arg1)
}

// ProxycCbDelete mocks base method
func (m *MockProxycCbServer) ProxycCbDelete(arg0 context.Context, arg1 *ProxycCbDeleteRequestMsg) (*ProxycCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxycCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*ProxycCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbDelete indicates an expected call of ProxycCbDelete
func (mr *MockProxycCbServerMockRecorder) ProxycCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbDelete", reflect.TypeOf((*MockProxycCbServer)(nil).ProxycCbDelete), arg0, arg1)
}

// ProxycCbGet mocks base method
func (m *MockProxycCbServer) ProxycCbGet(arg0 context.Context, arg1 *ProxycCbGetRequestMsg) (*ProxycCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxycCbGet", arg0, arg1)
	ret0, _ := ret[0].(*ProxycCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbGet indicates an expected call of ProxycCbGet
func (mr *MockProxycCbServerMockRecorder) ProxycCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbGet", reflect.TypeOf((*MockProxycCbServer)(nil).ProxycCbGet), arg0, arg1)
}
