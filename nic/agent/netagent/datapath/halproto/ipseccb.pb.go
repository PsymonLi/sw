// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ipseccb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IpsecCbKeyHandle is used to operate on a ipsec_cb either by its key or handle
type IpsecCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*IpsecCbKeyHandle_IpseccbId
	//	*IpsecCbKeyHandle_IpseccbHandle
	KeyOrHandle isIpsecCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *IpsecCbKeyHandle) Reset()                    { *m = IpsecCbKeyHandle{} }
func (m *IpsecCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbKeyHandle) ProtoMessage()               {}
func (*IpsecCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{0} }

type isIpsecCbKeyHandle_KeyOrHandle interface {
	isIpsecCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IpsecCbKeyHandle_IpseccbId struct {
	IpseccbId uint32 `protobuf:"varint,1,opt,name=ipseccb_id,json=ipseccbId,proto3,oneof"`
}
type IpsecCbKeyHandle_IpseccbHandle struct {
	IpseccbHandle uint64 `protobuf:"fixed64,2,opt,name=ipseccb_handle,json=ipseccbHandle,proto3,oneof"`
}

func (*IpsecCbKeyHandle_IpseccbId) isIpsecCbKeyHandle_KeyOrHandle()     {}
func (*IpsecCbKeyHandle_IpseccbHandle) isIpsecCbKeyHandle_KeyOrHandle() {}

func (m *IpsecCbKeyHandle) GetKeyOrHandle() isIpsecCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbKeyHandle) GetIpseccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbId); ok {
		return x.IpseccbId
	}
	return 0
}

func (m *IpsecCbKeyHandle) GetIpseccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbHandle); ok {
		return x.IpseccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IpsecCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IpsecCbKeyHandle_OneofMarshaler, _IpsecCbKeyHandle_OneofUnmarshaler, _IpsecCbKeyHandle_OneofSizer, []interface{}{
		(*IpsecCbKeyHandle_IpseccbId)(nil),
		(*IpsecCbKeyHandle_IpseccbHandle)(nil),
	}
}

func _IpsecCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.IpseccbHandle))
	case nil:
	default:
		return fmt.Errorf("IpsecCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _IpsecCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IpsecCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.ipseccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.ipseccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _IpsecCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IpsecCbSpec captures all the ipsec_cb level configuration
type IpsecCbSpec struct {
	KeyOrHandle     *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi              uint32            `protobuf:"varint,2,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci              uint32            `protobuf:"varint,3,opt,name=ci,proto3" json:"ci,omitempty"`
	TunnelSip4      uint32            `protobuf:"varint,4,opt,name=tunnel_sip4,json=tunnelSip4,proto3" json:"tunnel_sip4,omitempty"`
	TunnelDip4      uint32            `protobuf:"varint,5,opt,name=tunnel_dip4,json=tunnelDip4,proto3" json:"tunnel_dip4,omitempty"`
	IvSize          uint32            `protobuf:"varint,6,opt,name=iv_size,json=ivSize,proto3" json:"iv_size,omitempty"`
	IcvSize         uint32            `protobuf:"varint,7,opt,name=icv_size,json=icvSize,proto3" json:"icv_size,omitempty"`
	BlockSize       uint32            `protobuf:"varint,8,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	KeyIndex        uint32            `protobuf:"varint,9,opt,name=key_index,json=keyIndex,proto3" json:"key_index,omitempty"`
	BarcoEncCmd     uint32            `protobuf:"varint,10,opt,name=barco_enc_cmd,json=barcoEncCmd,proto3" json:"barco_enc_cmd,omitempty"`
	Iv              uint64            `protobuf:"fixed64,11,opt,name=iv,proto3" json:"iv,omitempty"`
	IvSalt          uint32            `protobuf:"varint,12,opt,name=iv_salt,json=ivSalt,proto3" json:"iv_salt,omitempty"`
	EsnHi           uint32            `protobuf:"varint,13,opt,name=esn_hi,json=esnHi,proto3" json:"esn_hi,omitempty"`
	EsnLo           uint32            `protobuf:"varint,14,opt,name=esn_lo,json=esnLo,proto3" json:"esn_lo,omitempty"`
	Spi             uint32            `protobuf:"varint,15,opt,name=spi,proto3" json:"spi,omitempty"`
	ExpectedSeqNo   uint32            `protobuf:"varint,16,opt,name=expected_seq_no,json=expectedSeqNo,proto3" json:"expected_seq_no,omitempty"`
	SeqNoBmp        uint64            `protobuf:"fixed64,17,opt,name=seq_no_bmp,json=seqNoBmp,proto3" json:"seq_no_bmp,omitempty"`
	Sip6            *IPAddress        `protobuf:"bytes,18,opt,name=sip6" json:"sip6,omitempty"`
	Dip6            *IPAddress        `protobuf:"bytes,19,opt,name=dip6" json:"dip6,omitempty"`
	IsV6            uint32            `protobuf:"varint,20,opt,name=is_v6,json=isV6,proto3" json:"is_v6,omitempty"`
	VrfVlan         uint32            `protobuf:"varint,21,opt,name=vrf_vlan,json=vrfVlan,proto3" json:"vrf_vlan,omitempty"`
	LastReplaySeqNo uint32            `protobuf:"varint,22,opt,name=last_replay_seq_no,json=lastReplaySeqNo,proto3" json:"last_replay_seq_no,omitempty"`
	NewSpi          uint32            `protobuf:"varint,23,opt,name=new_spi,json=newSpi,proto3" json:"new_spi,omitempty"`
	NewKeyIndex     uint32            `protobuf:"varint,24,opt,name=new_key_index,json=newKeyIndex,proto3" json:"new_key_index,omitempty"`
	IsNatT          uint32            `protobuf:"varint,25,opt,name=is_nat_t,json=isNatT,proto3" json:"is_nat_t,omitempty"`
	Flags           uint32            `protobuf:"varint,26,opt,name=flags,proto3" json:"flags,omitempty"`
	IsRandom        uint32            `protobuf:"varint,27,opt,name=is_random,json=isRandom,proto3" json:"is_random,omitempty"`
	ExtraPad        uint32            `protobuf:"varint,28,opt,name=extra_pad,json=extraPad,proto3" json:"extra_pad,omitempty"`
}

func (m *IpsecCbSpec) Reset()                    { *m = IpsecCbSpec{} }
func (m *IpsecCbSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbSpec) ProtoMessage()               {}
func (*IpsecCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{1} }

func (m *IpsecCbSpec) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *IpsecCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelSip4() uint32 {
	if m != nil {
		return m.TunnelSip4
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelDip4() uint32 {
	if m != nil {
		return m.TunnelDip4
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSize() uint32 {
	if m != nil {
		return m.IvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetIcvSize() uint32 {
	if m != nil {
		return m.IcvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *IpsecCbSpec) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *IpsecCbSpec) GetBarcoEncCmd() uint32 {
	if m != nil {
		return m.BarcoEncCmd
	}
	return 0
}

func (m *IpsecCbSpec) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSalt() uint32 {
	if m != nil {
		return m.IvSalt
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnHi() uint32 {
	if m != nil {
		return m.EsnHi
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnLo() uint32 {
	if m != nil {
		return m.EsnLo
	}
	return 0
}

func (m *IpsecCbSpec) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecCbSpec) GetExpectedSeqNo() uint32 {
	if m != nil {
		return m.ExpectedSeqNo
	}
	return 0
}

func (m *IpsecCbSpec) GetSeqNoBmp() uint64 {
	if m != nil {
		return m.SeqNoBmp
	}
	return 0
}

func (m *IpsecCbSpec) GetSip6() *IPAddress {
	if m != nil {
		return m.Sip6
	}
	return nil
}

func (m *IpsecCbSpec) GetDip6() *IPAddress {
	if m != nil {
		return m.Dip6
	}
	return nil
}

func (m *IpsecCbSpec) GetIsV6() uint32 {
	if m != nil {
		return m.IsV6
	}
	return 0
}

func (m *IpsecCbSpec) GetVrfVlan() uint32 {
	if m != nil {
		return m.VrfVlan
	}
	return 0
}

func (m *IpsecCbSpec) GetLastReplaySeqNo() uint32 {
	if m != nil {
		return m.LastReplaySeqNo
	}
	return 0
}

func (m *IpsecCbSpec) GetNewSpi() uint32 {
	if m != nil {
		return m.NewSpi
	}
	return 0
}

func (m *IpsecCbSpec) GetNewKeyIndex() uint32 {
	if m != nil {
		return m.NewKeyIndex
	}
	return 0
}

func (m *IpsecCbSpec) GetIsNatT() uint32 {
	if m != nil {
		return m.IsNatT
	}
	return 0
}

func (m *IpsecCbSpec) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *IpsecCbSpec) GetIsRandom() uint32 {
	if m != nil {
		return m.IsRandom
	}
	return 0
}

func (m *IpsecCbSpec) GetExtraPad() uint32 {
	if m != nil {
		return m.ExtraPad
	}
	return 0
}

// IpsecCbRequestMsg is batched add or modify ipseccb request
type IpsecCbRequestMsg struct {
	Request []*IpsecCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbRequestMsg) Reset()                    { *m = IpsecCbRequestMsg{} }
func (m *IpsecCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbRequestMsg) ProtoMessage()               {}
func (*IpsecCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{2} }

func (m *IpsecCbRequestMsg) GetRequest() []*IpsecCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStatus is the operational status of a given ipseccb
type IpsecCbStatus struct {
	IpseccbHandle uint64 `protobuf:"fixed64,1,opt,name=ipseccb_handle,json=ipseccbHandle,proto3" json:"ipseccb_handle,omitempty"`
}

func (m *IpsecCbStatus) Reset()                    { *m = IpsecCbStatus{} }
func (m *IpsecCbStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStatus) ProtoMessage()               {}
func (*IpsecCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{3} }

func (m *IpsecCbStatus) GetIpseccbHandle() uint64 {
	if m != nil {
		return m.IpseccbHandle
	}
	return 0
}

// IpsecCbResponse is response to IpsecCbSpec
type IpsecCbResponse struct {
	ApiStatus     ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpseccbStatus *IpsecCbStatus `protobuf:"bytes,2,opt,name=ipseccb_status,json=ipseccbStatus" json:"ipseccb_status,omitempty"`
}

func (m *IpsecCbResponse) Reset()                    { *m = IpsecCbResponse{} }
func (m *IpsecCbResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponse) ProtoMessage()               {}
func (*IpsecCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{4} }

func (m *IpsecCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbResponse) GetIpseccbStatus() *IpsecCbStatus {
	if m != nil {
		return m.IpseccbStatus
	}
	return nil
}

// IpsecCbResponseMsg is batched response to IpsecCbRequestMsg
type IpsecCbResponseMsg struct {
	Response []*IpsecCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbResponseMsg) Reset()                    { *m = IpsecCbResponseMsg{} }
func (m *IpsecCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponseMsg) ProtoMessage()               {}
func (*IpsecCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{5} }

func (m *IpsecCbResponseMsg) GetResponse() []*IpsecCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecCbDeleteRequest is used to delete a ipseccb
type IpsecCbDeleteRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbDeleteRequest) Reset()                    { *m = IpsecCbDeleteRequest{} }
func (m *IpsecCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequest) ProtoMessage()               {}
func (*IpsecCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{6} }

func (m *IpsecCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecCbDeleteRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbDeleteRequestMsg is used to delete a batch of ipseccbs
type IpsecCbDeleteRequestMsg struct {
	Request []*IpsecCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbDeleteRequestMsg) Reset()                    { *m = IpsecCbDeleteRequestMsg{} }
func (m *IpsecCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequestMsg) ProtoMessage()               {}
func (*IpsecCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{7} }

func (m *IpsecCbDeleteRequestMsg) GetRequest() []*IpsecCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbDeleteResponseMsg is batched response to IpsecCbDeleteRequestMsg
type IpsecCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecCbDeleteResponseMsg) Reset()                    { *m = IpsecCbDeleteResponseMsg{} }
func (m *IpsecCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteResponseMsg) ProtoMessage()               {}
func (*IpsecCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{8} }

func (m *IpsecCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// IpsecCbGetRequest is used to get information about a ipseccb
type IpsecCbGetRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbGetRequest) Reset()                    { *m = IpsecCbGetRequest{} }
func (m *IpsecCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequest) ProtoMessage()               {}
func (*IpsecCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{9} }

func (m *IpsecCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecCbGetRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbGetRequestMsg is batched GET requests for ipseccbs
type IpsecCbGetRequestMsg struct {
	Request []*IpsecCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbGetRequestMsg) Reset()                    { *m = IpsecCbGetRequestMsg{} }
func (m *IpsecCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequestMsg) ProtoMessage()               {}
func (*IpsecCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{10} }

func (m *IpsecCbGetRequestMsg) GetRequest() []*IpsecCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStats is the statistics object for each ipseccb
type IpsecCbStats struct {
}

func (m *IpsecCbStats) Reset()                    { *m = IpsecCbStats{} }
func (m *IpsecCbStats) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStats) ProtoMessage()               {}
func (*IpsecCbStats) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{11} }

// IpsecCbGetResponse captures all the information about a ipseccb
// only if api_status indicates success, other fields are valid
type IpsecCbGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IpsecCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *IpsecCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *IpsecCbGetResponse) Reset()                    { *m = IpsecCbGetResponse{} }
func (m *IpsecCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponse) ProtoMessage()               {}
func (*IpsecCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{12} }

func (m *IpsecCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbGetResponse) GetSpec() *IpsecCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStatus() *IpsecCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStats() *IpsecCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// IpsecCbGetResponseMsg is batched response to IpsecCbGetRequestMsg
type IpsecCbGetResponseMsg struct {
	Response []*IpsecCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbGetResponseMsg) Reset()                    { *m = IpsecCbGetResponseMsg{} }
func (m *IpsecCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponseMsg) ProtoMessage()               {}
func (*IpsecCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpseccb, []int{13} }

func (m *IpsecCbGetResponseMsg) GetResponse() []*IpsecCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*IpsecCbKeyHandle)(nil), "ipseccb.IpsecCbKeyHandle")
	proto.RegisterType((*IpsecCbSpec)(nil), "ipseccb.IpsecCbSpec")
	proto.RegisterType((*IpsecCbRequestMsg)(nil), "ipseccb.IpsecCbRequestMsg")
	proto.RegisterType((*IpsecCbStatus)(nil), "ipseccb.IpsecCbStatus")
	proto.RegisterType((*IpsecCbResponse)(nil), "ipseccb.IpsecCbResponse")
	proto.RegisterType((*IpsecCbResponseMsg)(nil), "ipseccb.IpsecCbResponseMsg")
	proto.RegisterType((*IpsecCbDeleteRequest)(nil), "ipseccb.IpsecCbDeleteRequest")
	proto.RegisterType((*IpsecCbDeleteRequestMsg)(nil), "ipseccb.IpsecCbDeleteRequestMsg")
	proto.RegisterType((*IpsecCbDeleteResponseMsg)(nil), "ipseccb.IpsecCbDeleteResponseMsg")
	proto.RegisterType((*IpsecCbGetRequest)(nil), "ipseccb.IpsecCbGetRequest")
	proto.RegisterType((*IpsecCbGetRequestMsg)(nil), "ipseccb.IpsecCbGetRequestMsg")
	proto.RegisterType((*IpsecCbStats)(nil), "ipseccb.IpsecCbStats")
	proto.RegisterType((*IpsecCbGetResponse)(nil), "ipseccb.IpsecCbGetResponse")
	proto.RegisterType((*IpsecCbGetResponseMsg)(nil), "ipseccb.IpsecCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IpsecCb service

type IpsecCbClient interface {
	IpsecCbCreate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error)
	IpsecCbUpdate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error)
	IpsecCbDelete(ctx context.Context, in *IpsecCbDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecCbDeleteResponseMsg, error)
	IpsecCbGet(ctx context.Context, in *IpsecCbGetRequestMsg, opts ...grpc.CallOption) (*IpsecCbGetResponseMsg, error)
}

type ipsecCbClient struct {
	cc *grpc.ClientConn
}

func NewIpsecCbClient(cc *grpc.ClientConn) IpsecCbClient {
	return &ipsecCbClient{cc}
}

func (c *ipsecCbClient) IpsecCbCreate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error) {
	out := new(IpsecCbResponseMsg)
	err := grpc.Invoke(ctx, "/ipseccb.IpsecCb/IpsecCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecCbClient) IpsecCbUpdate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error) {
	out := new(IpsecCbResponseMsg)
	err := grpc.Invoke(ctx, "/ipseccb.IpsecCb/IpsecCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecCbClient) IpsecCbDelete(ctx context.Context, in *IpsecCbDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecCbDeleteResponseMsg, error) {
	out := new(IpsecCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ipseccb.IpsecCb/IpsecCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecCbClient) IpsecCbGet(ctx context.Context, in *IpsecCbGetRequestMsg, opts ...grpc.CallOption) (*IpsecCbGetResponseMsg, error) {
	out := new(IpsecCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/ipseccb.IpsecCb/IpsecCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IpsecCb service

type IpsecCbServer interface {
	IpsecCbCreate(context.Context, *IpsecCbRequestMsg) (*IpsecCbResponseMsg, error)
	IpsecCbUpdate(context.Context, *IpsecCbRequestMsg) (*IpsecCbResponseMsg, error)
	IpsecCbDelete(context.Context, *IpsecCbDeleteRequestMsg) (*IpsecCbDeleteResponseMsg, error)
	IpsecCbGet(context.Context, *IpsecCbGetRequestMsg) (*IpsecCbGetResponseMsg, error)
}

func RegisterIpsecCbServer(s *grpc.Server, srv IpsecCbServer) {
	s.RegisterService(&_IpsecCb_serviceDesc, srv)
}

func _IpsecCb_IpsecCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecCbServer).IpsecCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipseccb.IpsecCb/IpsecCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecCbServer).IpsecCbCreate(ctx, req.(*IpsecCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecCb_IpsecCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecCbServer).IpsecCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipseccb.IpsecCb/IpsecCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecCbServer).IpsecCbUpdate(ctx, req.(*IpsecCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecCb_IpsecCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecCbServer).IpsecCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipseccb.IpsecCb/IpsecCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecCbServer).IpsecCbDelete(ctx, req.(*IpsecCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecCb_IpsecCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecCbServer).IpsecCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipseccb.IpsecCb/IpsecCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecCbServer).IpsecCbGet(ctx, req.(*IpsecCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _IpsecCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipseccb.IpsecCb",
	HandlerType: (*IpsecCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IpsecCbCreate",
			Handler:    _IpsecCb_IpsecCbCreate_Handler,
		},
		{
			MethodName: "IpsecCbUpdate",
			Handler:    _IpsecCb_IpsecCbUpdate_Handler,
		},
		{
			MethodName: "IpsecCbDelete",
			Handler:    _IpsecCb_IpsecCbDelete_Handler,
		},
		{
			MethodName: "IpsecCbGet",
			Handler:    _IpsecCb_IpsecCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipseccb.proto",
}

func (m *IpsecCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *IpsecCbKeyHandle_IpseccbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintIpseccb(dAtA, i, uint64(m.IpseccbId))
	return i, nil
}
func (m *IpsecCbKeyHandle_IpseccbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Ipseccb(dAtA, i, uint64(m.IpseccbHandle))
	return i, nil
}
func (m *IpsecCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Pi != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Ci))
	}
	if m.TunnelSip4 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.TunnelSip4))
	}
	if m.TunnelDip4 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.TunnelDip4))
	}
	if m.IvSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.IvSize))
	}
	if m.IcvSize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.IcvSize))
	}
	if m.BlockSize != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.BlockSize))
	}
	if m.KeyIndex != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.KeyIndex))
	}
	if m.BarcoEncCmd != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.BarcoEncCmd))
	}
	if m.Iv != 0 {
		dAtA[i] = 0x59
		i++
		i = encodeFixed64Ipseccb(dAtA, i, uint64(m.Iv))
	}
	if m.IvSalt != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.IvSalt))
	}
	if m.EsnHi != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.EsnHi))
	}
	if m.EsnLo != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.EsnLo))
	}
	if m.Spi != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Spi))
	}
	if m.ExpectedSeqNo != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.ExpectedSeqNo))
	}
	if m.SeqNoBmp != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x1
		i++
		i = encodeFixed64Ipseccb(dAtA, i, uint64(m.SeqNoBmp))
	}
	if m.Sip6 != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Sip6.Size()))
		n3, err := m.Sip6.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Dip6 != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Dip6.Size()))
		n4, err := m.Dip6.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.IsV6 != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.IsV6))
	}
	if m.VrfVlan != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.VrfVlan))
	}
	if m.LastReplaySeqNo != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.LastReplaySeqNo))
	}
	if m.NewSpi != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.NewSpi))
	}
	if m.NewKeyIndex != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.NewKeyIndex))
	}
	if m.IsNatT != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.IsNatT))
	}
	if m.Flags != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Flags))
	}
	if m.IsRandom != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.IsRandom))
	}
	if m.ExtraPad != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.ExtraPad))
	}
	return i, nil
}

func (m *IpsecCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpseccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IpseccbHandle != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Ipseccb(dAtA, i, uint64(m.IpseccbHandle))
	}
	return i, nil
}

func (m *IpsecCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.IpseccbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.IpseccbStatus.Size()))
		n5, err := m.IpseccbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *IpsecCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpseccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Meta.Size()))
		n6, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n7, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *IpsecCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpseccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA9 := make([]byte, len(m.ApiStatus)*10)
		var j8 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *IpsecCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Meta.Size()))
		n10, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n11, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *IpsecCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpseccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *IpsecCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Spec.Size()))
		n12, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Status.Size()))
		n13, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIpseccb(dAtA, i, uint64(m.Stats.Size()))
		n14, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *IpsecCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpseccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Ipseccb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Ipseccb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIpseccb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IpsecCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *IpsecCbKeyHandle_IpseccbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovIpseccb(uint64(m.IpseccbId))
	return n
}
func (m *IpsecCbKeyHandle_IpseccbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *IpsecCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpseccb(uint64(l))
	}
	if m.Pi != 0 {
		n += 1 + sovIpseccb(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovIpseccb(uint64(m.Ci))
	}
	if m.TunnelSip4 != 0 {
		n += 1 + sovIpseccb(uint64(m.TunnelSip4))
	}
	if m.TunnelDip4 != 0 {
		n += 1 + sovIpseccb(uint64(m.TunnelDip4))
	}
	if m.IvSize != 0 {
		n += 1 + sovIpseccb(uint64(m.IvSize))
	}
	if m.IcvSize != 0 {
		n += 1 + sovIpseccb(uint64(m.IcvSize))
	}
	if m.BlockSize != 0 {
		n += 1 + sovIpseccb(uint64(m.BlockSize))
	}
	if m.KeyIndex != 0 {
		n += 1 + sovIpseccb(uint64(m.KeyIndex))
	}
	if m.BarcoEncCmd != 0 {
		n += 1 + sovIpseccb(uint64(m.BarcoEncCmd))
	}
	if m.Iv != 0 {
		n += 9
	}
	if m.IvSalt != 0 {
		n += 1 + sovIpseccb(uint64(m.IvSalt))
	}
	if m.EsnHi != 0 {
		n += 1 + sovIpseccb(uint64(m.EsnHi))
	}
	if m.EsnLo != 0 {
		n += 1 + sovIpseccb(uint64(m.EsnLo))
	}
	if m.Spi != 0 {
		n += 1 + sovIpseccb(uint64(m.Spi))
	}
	if m.ExpectedSeqNo != 0 {
		n += 2 + sovIpseccb(uint64(m.ExpectedSeqNo))
	}
	if m.SeqNoBmp != 0 {
		n += 10
	}
	if m.Sip6 != nil {
		l = m.Sip6.Size()
		n += 2 + l + sovIpseccb(uint64(l))
	}
	if m.Dip6 != nil {
		l = m.Dip6.Size()
		n += 2 + l + sovIpseccb(uint64(l))
	}
	if m.IsV6 != 0 {
		n += 2 + sovIpseccb(uint64(m.IsV6))
	}
	if m.VrfVlan != 0 {
		n += 2 + sovIpseccb(uint64(m.VrfVlan))
	}
	if m.LastReplaySeqNo != 0 {
		n += 2 + sovIpseccb(uint64(m.LastReplaySeqNo))
	}
	if m.NewSpi != 0 {
		n += 2 + sovIpseccb(uint64(m.NewSpi))
	}
	if m.NewKeyIndex != 0 {
		n += 2 + sovIpseccb(uint64(m.NewKeyIndex))
	}
	if m.IsNatT != 0 {
		n += 2 + sovIpseccb(uint64(m.IsNatT))
	}
	if m.Flags != 0 {
		n += 2 + sovIpseccb(uint64(m.Flags))
	}
	if m.IsRandom != 0 {
		n += 2 + sovIpseccb(uint64(m.IsRandom))
	}
	if m.ExtraPad != 0 {
		n += 2 + sovIpseccb(uint64(m.ExtraPad))
	}
	return n
}

func (m *IpsecCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpseccb(uint64(l))
		}
	}
	return n
}

func (m *IpsecCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.IpseccbHandle != 0 {
		n += 9
	}
	return n
}

func (m *IpsecCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpseccb(uint64(m.ApiStatus))
	}
	if m.IpseccbStatus != nil {
		l = m.IpseccbStatus.Size()
		n += 1 + l + sovIpseccb(uint64(l))
	}
	return n
}

func (m *IpsecCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpseccb(uint64(l))
		}
	}
	return n
}

func (m *IpsecCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpseccb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpseccb(uint64(l))
	}
	return n
}

func (m *IpsecCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpseccb(uint64(l))
		}
	}
	return n
}

func (m *IpsecCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovIpseccb(uint64(e))
		}
		n += 1 + sovIpseccb(uint64(l)) + l
	}
	return n
}

func (m *IpsecCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpseccb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpseccb(uint64(l))
	}
	return n
}

func (m *IpsecCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpseccb(uint64(l))
		}
	}
	return n
}

func (m *IpsecCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *IpsecCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpseccb(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovIpseccb(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovIpseccb(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovIpseccb(uint64(l))
	}
	return n
}

func (m *IpsecCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpseccb(uint64(l))
		}
	}
	return n
}

func sovIpseccb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIpseccb(x uint64) (n int) {
	return sovIpseccb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IpsecCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpseccbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpseccbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelSip4", wireType)
			}
			m.TunnelSip4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelSip4 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelDip4", wireType)
			}
			m.TunnelDip4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelDip4 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IvSize", wireType)
			}
			m.IvSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IvSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcvSize", wireType)
			}
			m.IcvSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcvSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIndex", wireType)
			}
			m.KeyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcoEncCmd", wireType)
			}
			m.BarcoEncCmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcoEncCmd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			m.Iv = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Iv = uint64(dAtA[iNdEx-8])
			m.Iv |= uint64(dAtA[iNdEx-7]) << 8
			m.Iv |= uint64(dAtA[iNdEx-6]) << 16
			m.Iv |= uint64(dAtA[iNdEx-5]) << 24
			m.Iv |= uint64(dAtA[iNdEx-4]) << 32
			m.Iv |= uint64(dAtA[iNdEx-3]) << 40
			m.Iv |= uint64(dAtA[iNdEx-2]) << 48
			m.Iv |= uint64(dAtA[iNdEx-1]) << 56
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IvSalt", wireType)
			}
			m.IvSalt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IvSalt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsnHi", wireType)
			}
			m.EsnHi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EsnHi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EsnLo", wireType)
			}
			m.EsnLo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EsnLo |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedSeqNo", wireType)
			}
			m.ExpectedSeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedSeqNo |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNoBmp", wireType)
			}
			m.SeqNoBmp = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.SeqNoBmp = uint64(dAtA[iNdEx-8])
			m.SeqNoBmp |= uint64(dAtA[iNdEx-7]) << 8
			m.SeqNoBmp |= uint64(dAtA[iNdEx-6]) << 16
			m.SeqNoBmp |= uint64(dAtA[iNdEx-5]) << 24
			m.SeqNoBmp |= uint64(dAtA[iNdEx-4]) << 32
			m.SeqNoBmp |= uint64(dAtA[iNdEx-3]) << 40
			m.SeqNoBmp |= uint64(dAtA[iNdEx-2]) << 48
			m.SeqNoBmp |= uint64(dAtA[iNdEx-1]) << 56
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sip6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sip6 == nil {
				m.Sip6 = &IPAddress{}
			}
			if err := m.Sip6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dip6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dip6 == nil {
				m.Dip6 = &IPAddress{}
			}
			if err := m.Dip6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsV6", wireType)
			}
			m.IsV6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsV6 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfVlan", wireType)
			}
			m.VrfVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReplaySeqNo", wireType)
			}
			m.LastReplaySeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReplaySeqNo |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSpi", wireType)
			}
			m.NewSpi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSpi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewKeyIndex", wireType)
			}
			m.NewKeyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewKeyIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNatT", wireType)
			}
			m.IsNatT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsNatT |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRandom", wireType)
			}
			m.IsRandom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsRandom |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraPad", wireType)
			}
			m.ExtraPad = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraPad |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpseccbHandle", wireType)
			}
			m.IpseccbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.IpseccbHandle = uint64(dAtA[iNdEx-8])
			m.IpseccbHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.IpseccbHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.IpseccbHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.IpseccbHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.IpseccbHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.IpseccbHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.IpseccbHandle |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpseccbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpseccbStatus == nil {
				m.IpseccbStatus = &IpsecCbStatus{}
			}
			if err := m.IpseccbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpseccb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpseccb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIpseccb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIpseccb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &IpsecCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &IpsecCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &IpsecCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpseccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpseccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpseccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpseccb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpseccb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpseccb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIpseccb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIpseccb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIpseccb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIpseccb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpseccb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ipseccb.proto", fileDescriptorIpseccb) }

var fileDescriptorIpseccb = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x52, 0x1b, 0xc7,
	0x13, 0x66, 0x05, 0xe8, 0x4f, 0xcb, 0x92, 0x60, 0x0c, 0x66, 0x10, 0x46, 0xe6, 0xb7, 0xf5, 0x73,
	0x42, 0x95, 0xab, 0x94, 0x2a, 0x42, 0x91, 0x93, 0x0f, 0x06, 0xa7, 0x02, 0xc6, 0xd8, 0xd4, 0x2a,
	0xe1, 0x90, 0xcb, 0xd6, 0x68, 0x77, 0x80, 0x09, 0xab, 0xdd, 0x61, 0x67, 0x10, 0xc8, 0x95, 0x4b,
	0xde, 0x22, 0xaf, 0x93, 0x9b, 0x0f, 0x39, 0xe4, 0x11, 0x52, 0xe4, 0x45, 0x52, 0xf3, 0x67, 0x57,
	0xf2, 0x0a, 0x48, 0x25, 0xa9, 0xca, 0x89, 0xed, 0xfe, 0xbe, 0xe9, 0xee, 0xe9, 0xaf, 0x7b, 0x10,
	0x34, 0x18, 0x17, 0x34, 0x08, 0xfa, 0x5d, 0x9e, 0x26, 0x32, 0x41, 0x15, 0x6b, 0xb6, 0xeb, 0x72,
	0xc4, 0xa9, 0x30, 0x5e, 0x77, 0x00, 0x0b, 0x07, 0xca, 0xbf, 0xd7, 0x3f, 0xa4, 0xa3, 0x7d, 0x12,
	0x87, 0x11, 0x45, 0xcf, 0x00, 0x2c, 0xd7, 0x67, 0x21, 0x76, 0x36, 0x9c, 0xcd, 0xc6, 0xfe, 0x8c,
	0x57, 0xb3, 0xbe, 0x83, 0x10, 0x7d, 0x0e, 0xcd, 0x8c, 0x70, 0xae, 0x8f, 0xe0, 0xd2, 0x86, 0xb3,
	0x59, 0xde, 0x9f, 0xf1, 0xb2, 0x9c, 0x26, 0xd2, 0x6e, 0x0b, 0x1a, 0x17, 0x74, 0xe4, 0x27, 0xa9,
	0xe5, 0xb9, 0xbf, 0x94, 0xa1, 0x6e, 0xf3, 0xf5, 0x38, 0x0d, 0xd0, 0xcb, 0x02, 0x41, 0x67, 0xab,
	0x6f, 0xad, 0x76, 0xb3, 0xda, 0x8b, 0xc5, 0x79, 0xf5, 0x0b, 0x3a, 0x7a, 0x9f, 0xda, 0x4a, 0x9b,
	0x50, 0xe2, 0x4c, 0x27, 0x6f, 0x78, 0x25, 0xce, 0x94, 0x1d, 0x30, 0x3c, 0x6b, 0xec, 0x80, 0xa1,
	0x67, 0x50, 0x97, 0x57, 0x71, 0x4c, 0x23, 0x5f, 0x30, 0xbe, 0x8d, 0xe7, 0x34, 0x00, 0xc6, 0xd5,
	0x63, 0x7c, 0x7b, 0x82, 0x10, 0x2a, 0xc2, 0xfc, 0x24, 0xe1, 0xb5, 0x22, 0xac, 0x40, 0x85, 0x0d,
	0x7d, 0xc1, 0x3e, 0x50, 0x5c, 0xd6, 0x60, 0x99, 0x0d, 0x7b, 0xec, 0x03, 0x45, 0xab, 0x50, 0x65,
	0x81, 0x45, 0x2a, 0x1a, 0xa9, 0xb0, 0xc0, 0x40, 0xeb, 0x00, 0xfd, 0x28, 0x09, 0x2e, 0x0c, 0x58,
	0xd5, 0x60, 0x4d, 0x7b, 0x34, 0xbc, 0x06, 0x35, 0x75, 0x67, 0x16, 0x87, 0xf4, 0x06, 0xd7, 0x34,
	0x5a, 0xbd, 0xa0, 0xa3, 0x03, 0x65, 0x23, 0x17, 0x1a, 0x7d, 0x92, 0x06, 0x89, 0x4f, 0xe3, 0xc0,
	0x0f, 0x06, 0x21, 0x06, 0x4d, 0xa8, 0x6b, 0xe7, 0xd7, 0x71, 0xb0, 0x37, 0x08, 0xd5, 0x2d, 0xd9,
	0x10, 0xd7, 0x55, 0xcb, 0xbd, 0x12, 0x1b, 0x66, 0x35, 0x92, 0x48, 0xe2, 0x47, 0x79, 0x8d, 0x24,
	0x92, 0x68, 0x19, 0xca, 0x54, 0xc4, 0xfe, 0x39, 0xc3, 0x0d, 0xed, 0x9f, 0xa7, 0x22, 0xde, 0x67,
	0x99, 0x3b, 0x4a, 0x70, 0x33, 0x77, 0xbf, 0x4d, 0xd0, 0x02, 0xcc, 0x0a, 0xce, 0x70, 0x4b, 0xfb,
	0xd4, 0x27, 0xfa, 0x0c, 0x5a, 0xf4, 0x86, 0xd3, 0x40, 0xd2, 0xd0, 0x17, 0xf4, 0xd2, 0x8f, 0x13,
	0xbc, 0xa0, 0xd1, 0x46, 0xe6, 0xee, 0xd1, 0xcb, 0x77, 0x09, 0x7a, 0x0a, 0x60, 0x60, 0xbf, 0x3f,
	0xe0, 0x78, 0x51, 0x17, 0x56, 0x15, 0x0a, 0xda, 0x1d, 0x70, 0xf4, 0x7f, 0x98, 0x13, 0x8c, 0xef,
	0x60, 0xa4, 0xa5, 0x5d, 0xe8, 0x9a, 0xf1, 0x3b, 0x38, 0x7e, 0x15, 0x86, 0x29, 0x15, 0xc2, 0xd3,
	0xa8, 0x62, 0x85, 0x8a, 0xf5, 0xf8, 0x3e, 0x96, 0x42, 0xd1, 0x63, 0x98, 0x67, 0xc2, 0x1f, 0xee,
	0xe0, 0x25, 0x5d, 0xc7, 0x1c, 0x13, 0x27, 0x3b, 0x4a, 0x8a, 0x61, 0x7a, 0xea, 0x0f, 0x23, 0x12,
	0xe3, 0x65, 0x23, 0xc5, 0x30, 0x3d, 0x3d, 0x89, 0x48, 0x8c, 0x5e, 0x00, 0x8a, 0x88, 0x90, 0x7e,
	0x4a, 0x79, 0x44, 0x46, 0xd9, 0x25, 0x9e, 0x68, 0x52, 0x4b, 0x21, 0x9e, 0x06, 0xcc, 0x35, 0x56,
	0xa0, 0x12, 0xd3, 0x6b, 0x5f, 0x35, 0x61, 0xc5, 0xf4, 0x31, 0xa6, 0xd7, 0x3d, 0xce, 0x94, 0x28,
	0x0a, 0x18, 0xab, 0x86, 0x8d, 0x28, 0x31, 0xbd, 0x3e, 0xcc, 0x84, 0xc3, 0x50, 0x65, 0xc2, 0x8f,
	0x89, 0xf4, 0x25, 0x5e, 0xb5, 0x2a, 0x88, 0x77, 0x44, 0x7e, 0x8b, 0x96, 0x60, 0xfe, 0x34, 0x22,
	0x67, 0x02, 0xb7, 0x4d, 0xb7, 0xb5, 0xa1, 0xa6, 0x80, 0x09, 0x3f, 0x25, 0x71, 0x98, 0x0c, 0xf0,
	0x9a, 0x99, 0x02, 0x26, 0x3c, 0x6d, 0x2b, 0x90, 0xde, 0xc8, 0x94, 0xf8, 0x9c, 0x84, 0xf8, 0xa9,
	0x01, 0xb5, 0xe3, 0x98, 0x84, 0xee, 0x1e, 0x2c, 0xda, 0xad, 0xf0, 0xe8, 0xe5, 0x15, 0x15, 0xf2,
	0x48, 0x9c, 0xa1, 0x2e, 0x54, 0x52, 0x63, 0x61, 0x67, 0x63, 0x76, 0xb3, 0xbe, 0xb5, 0x54, 0x5c,
	0x21, 0xb5, 0x6f, 0x5e, 0x46, 0x72, 0x77, 0xa0, 0x91, 0xf9, 0x25, 0x91, 0x57, 0x02, 0x3d, 0x9f,
	0xda, 0x69, 0x47, 0xeb, 0xf8, 0xe9, 0x46, 0xbb, 0x3f, 0x39, 0xd0, 0xca, 0xb3, 0x0b, 0x9e, 0xc4,
	0x82, 0xa2, 0x2f, 0x00, 0x08, 0x67, 0xbe, 0xd0, 0x81, 0xf4, 0xb1, 0x66, 0x2e, 0xe0, 0x2b, 0xce,
	0x4c, 0x02, 0xaf, 0x46, 0xb2, 0x4f, 0xf4, 0x72, 0x9c, 0xcb, 0x1e, 0x2a, 0x69, 0xd5, 0x9f, 0x4c,
	0xd5, 0x6c, 0x8e, 0x66, 0x35, 0x18, 0xd3, 0x7d, 0x03, 0xa8, 0x50, 0x82, 0xea, 0xc0, 0x36, 0x54,
	0x53, 0x6b, 0xda, 0x16, 0xe0, 0x62, 0xb8, 0x8c, 0xee, 0xe5, 0x4c, 0xf7, 0x47, 0x58, 0xb2, 0xe0,
	0x6b, 0x1a, 0x51, 0x49, 0x6d, 0x4b, 0xd1, 0x73, 0x98, 0x1b, 0x50, 0x49, 0xec, 0x7b, 0xb4, 0x68,
	0x6f, 0xf3, 0xbe, 0xff, 0x03, 0x0d, 0xe4, 0x11, 0x95, 0xc4, 0xd3, 0xf0, 0xf4, 0xfb, 0x55, 0xfa,
	0x3b, 0xef, 0x97, 0xeb, 0xc1, 0xca, 0x5d, 0xd9, 0xd5, 0x75, 0xbe, 0x2a, 0x0a, 0xba, 0x5e, 0x8c,
	0xf9, 0xc9, 0x91, 0xb1, 0xb2, 0x87, 0x80, 0x0b, 0x84, 0x71, 0x8f, 0x8a, 0x4a, 0xcd, 0xfe, 0x85,
	0x52, 0xee, 0x28, 0x9f, 0xb5, 0x6f, 0xa8, 0xfc, 0x6f, 0x7b, 0xf3, 0x36, 0x57, 0x66, 0x9c, 0xda,
	0xe8, 0x5c, 0x68, 0x4c, 0xbb, 0x18, 0x70, 0xcc, 0x1f, 0x77, 0xa5, 0x09, 0x8f, 0x26, 0x66, 0x4a,
	0xb8, 0xbf, 0x3a, 0xf9, 0x10, 0x69, 0xfa, 0x3f, 0x1d, 0xe5, 0x4d, 0x98, 0x13, 0x9c, 0x06, 0xf6,
	0x6e, 0x77, 0x2f, 0x9d, 0x66, 0xa0, 0x2e, 0x94, 0x6d, 0xd8, 0xd9, 0x07, 0x87, 0xdd, 0xb2, 0xd0,
	0x0b, 0x98, 0x57, 0x5f, 0x42, 0xff, 0xd7, 0xaa, 0x6f, 0x2d, 0xdf, 0x45, 0x17, 0x9e, 0xe1, 0xb8,
	0xc7, 0xb0, 0x3c, 0x7d, 0x1b, 0x33, 0x46, 0xc5, 0xad, 0x58, 0xbb, 0xb3, 0x5d, 0xc5, 0xc5, 0xd8,
	0xfa, 0x58, 0x82, 0x8a, 0x25, 0xa0, 0x37, 0xf9, 0x63, 0xb1, 0x97, 0x52, 0x22, 0x29, 0x6a, 0x4f,
	0x6f, 0x56, 0xa6, 0x4f, 0x7b, 0xed, 0xbe, 0xad, 0x3b, 0x12, 0x67, 0xee, 0xcc, 0x44, 0xac, 0xef,
	0x78, 0xf8, 0x2f, 0x63, 0x9d, 0xe4, 0xb1, 0xcc, 0xa8, 0xa3, 0x8d, 0x07, 0x77, 0x44, 0x45, 0xfc,
	0xdf, 0x7d, 0x8c, 0xc9, 0xb8, 0x47, 0x00, 0xe3, 0xde, 0xa0, 0xf5, 0xfb, 0xe7, 0x4b, 0x45, 0xec,
	0x3c, 0xd0, 0x4f, 0x1d, 0x6e, 0xb7, 0xfd, 0xf1, 0xb6, 0xe3, 0xfc, 0x76, 0xdb, 0x71, 0x7e, 0xbf,
	0xed, 0x38, 0x3f, 0xff, 0xd1, 0x99, 0xf9, 0xbe, 0x7a, 0x4e, 0x22, 0xfd, 0xfb, 0xab, 0x5f, 0xd6,
	0x7f, 0xbe, 0xfc, 0x33, 0x00, 0x00, 0xff, 0xff, 0x43, 0xa9, 0x8d, 0x3a, 0xad, 0x09, 0x00, 0x00,
}
