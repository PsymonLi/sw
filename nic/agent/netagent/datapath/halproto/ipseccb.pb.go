// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/ipseccb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IpsecCbKeyHandle is used to operate on a ipsec_cb either by its key or handle
type IpsecCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*IpsecCbKeyHandle_IpseccbId
	//	*IpsecCbKeyHandle_IpseccbHandle
	KeyOrHandle isIpsecCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *IpsecCbKeyHandle) Reset()                    { *m = IpsecCbKeyHandle{} }
func (m *IpsecCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbKeyHandle) ProtoMessage()               {}
func (*IpsecCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type isIpsecCbKeyHandle_KeyOrHandle interface {
	isIpsecCbKeyHandle_KeyOrHandle()
}

type IpsecCbKeyHandle_IpseccbId struct {
	IpseccbId uint32 `protobuf:"varint,1,opt,name=ipseccb_id,json=ipseccbId,oneof"`
}
type IpsecCbKeyHandle_IpseccbHandle struct {
	IpseccbHandle uint64 `protobuf:"fixed64,2,opt,name=ipseccb_handle,json=ipseccbHandle,oneof"`
}

func (*IpsecCbKeyHandle_IpseccbId) isIpsecCbKeyHandle_KeyOrHandle()     {}
func (*IpsecCbKeyHandle_IpseccbHandle) isIpsecCbKeyHandle_KeyOrHandle() {}

func (m *IpsecCbKeyHandle) GetKeyOrHandle() isIpsecCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbKeyHandle) GetIpseccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbId); ok {
		return x.IpseccbId
	}
	return 0
}

func (m *IpsecCbKeyHandle) GetIpseccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*IpsecCbKeyHandle_IpseccbHandle); ok {
		return x.IpseccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IpsecCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IpsecCbKeyHandle_OneofMarshaler, _IpsecCbKeyHandle_OneofUnmarshaler, _IpsecCbKeyHandle_OneofSizer, []interface{}{
		(*IpsecCbKeyHandle_IpseccbId)(nil),
		(*IpsecCbKeyHandle_IpseccbHandle)(nil),
	}
}

func _IpsecCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.IpseccbHandle))
	case nil:
	default:
		return fmt.Errorf("IpsecCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _IpsecCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IpsecCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.ipseccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.ipseccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &IpsecCbKeyHandle_IpseccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _IpsecCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IpsecCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *IpsecCbKeyHandle_IpseccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IpseccbId))
	case *IpsecCbKeyHandle_IpseccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IpsecCbSpec captures all the ipsec_cb level configuration
type IpsecCbSpec struct {
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi          uint32            `protobuf:"varint,2,opt,name=pi" json:"pi,omitempty"`
	Ci          uint32            `protobuf:"varint,3,opt,name=ci" json:"ci,omitempty"`
	TunnelSip4  uint32            `protobuf:"varint,4,opt,name=tunnel_sip4,json=tunnelSip4" json:"tunnel_sip4,omitempty"`
	TunnelDip4  uint32            `protobuf:"varint,5,opt,name=tunnel_dip4,json=tunnelDip4" json:"tunnel_dip4,omitempty"`
	IvSize      uint32            `protobuf:"varint,6,opt,name=iv_size,json=ivSize" json:"iv_size,omitempty"`
	IcvSize     uint32            `protobuf:"varint,7,opt,name=icv_size,json=icvSize" json:"icv_size,omitempty"`
	BlockSize   uint32            `protobuf:"varint,8,opt,name=block_size,json=blockSize" json:"block_size,omitempty"`
	KeyIndex    uint32            `protobuf:"varint,9,opt,name=key_index,json=keyIndex" json:"key_index,omitempty"`
	BarcoEncCmd uint32            `protobuf:"varint,10,opt,name=barco_enc_cmd,json=barcoEncCmd" json:"barco_enc_cmd,omitempty"`
	Iv          uint64            `protobuf:"fixed64,11,opt,name=iv" json:"iv,omitempty"`
	IvSalt      uint32            `protobuf:"varint,12,opt,name=iv_salt,json=ivSalt" json:"iv_salt,omitempty"`
	EsnHi       uint32            `protobuf:"varint,13,opt,name=esn_hi,json=esnHi" json:"esn_hi,omitempty"`
	EsnLo       uint32            `protobuf:"varint,14,opt,name=esn_lo,json=esnLo" json:"esn_lo,omitempty"`
	Spi         uint32            `protobuf:"varint,15,opt,name=spi" json:"spi,omitempty"`
}

func (m *IpsecCbSpec) Reset()                    { *m = IpsecCbSpec{} }
func (m *IpsecCbSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbSpec) ProtoMessage()               {}
func (*IpsecCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *IpsecCbSpec) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *IpsecCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelSip4() uint32 {
	if m != nil {
		return m.TunnelSip4
	}
	return 0
}

func (m *IpsecCbSpec) GetTunnelDip4() uint32 {
	if m != nil {
		return m.TunnelDip4
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSize() uint32 {
	if m != nil {
		return m.IvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetIcvSize() uint32 {
	if m != nil {
		return m.IcvSize
	}
	return 0
}

func (m *IpsecCbSpec) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *IpsecCbSpec) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

func (m *IpsecCbSpec) GetBarcoEncCmd() uint32 {
	if m != nil {
		return m.BarcoEncCmd
	}
	return 0
}

func (m *IpsecCbSpec) GetIv() uint64 {
	if m != nil {
		return m.Iv
	}
	return 0
}

func (m *IpsecCbSpec) GetIvSalt() uint32 {
	if m != nil {
		return m.IvSalt
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnHi() uint32 {
	if m != nil {
		return m.EsnHi
	}
	return 0
}

func (m *IpsecCbSpec) GetEsnLo() uint32 {
	if m != nil {
		return m.EsnLo
	}
	return 0
}

func (m *IpsecCbSpec) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

// IpsecCbRequestMsg is batched add or modify ipseccb request
type IpsecCbRequestMsg struct {
	Request []*IpsecCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbRequestMsg) Reset()                    { *m = IpsecCbRequestMsg{} }
func (m *IpsecCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbRequestMsg) ProtoMessage()               {}
func (*IpsecCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *IpsecCbRequestMsg) GetRequest() []*IpsecCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStatus is the operational status of a given ipseccb
type IpsecCbStatus struct {
	IpseccbHandle uint64 `protobuf:"fixed64,1,opt,name=ipseccb_handle,json=ipseccbHandle" json:"ipseccb_handle,omitempty"`
}

func (m *IpsecCbStatus) Reset()                    { *m = IpsecCbStatus{} }
func (m *IpsecCbStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStatus) ProtoMessage()               {}
func (*IpsecCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *IpsecCbStatus) GetIpseccbHandle() uint64 {
	if m != nil {
		return m.IpseccbHandle
	}
	return 0
}

// IpsecCbResponse is response to IpsecCbSpec
type IpsecCbResponse struct {
	ApiStatus     ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	IpseccbStatus *IpsecCbStatus `protobuf:"bytes,2,opt,name=ipseccb_status,json=ipseccbStatus" json:"ipseccb_status,omitempty"`
}

func (m *IpsecCbResponse) Reset()                    { *m = IpsecCbResponse{} }
func (m *IpsecCbResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponse) ProtoMessage()               {}
func (*IpsecCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *IpsecCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbResponse) GetIpseccbStatus() *IpsecCbStatus {
	if m != nil {
		return m.IpseccbStatus
	}
	return nil
}

// IpsecCbResponseMsg is batched response to IpsecCbRequestMsg
type IpsecCbResponseMsg struct {
	Response []*IpsecCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbResponseMsg) Reset()                    { *m = IpsecCbResponseMsg{} }
func (m *IpsecCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbResponseMsg) ProtoMessage()               {}
func (*IpsecCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *IpsecCbResponseMsg) GetResponse() []*IpsecCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// IpsecCbDeleteRequest is used to delete a ipseccb
type IpsecCbDeleteRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbDeleteRequest) Reset()                    { *m = IpsecCbDeleteRequest{} }
func (m *IpsecCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequest) ProtoMessage()               {}
func (*IpsecCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *IpsecCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecCbDeleteRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbDeleteRequestMsg is used to delete a batch of ipseccbs
type IpsecCbDeleteRequestMsg struct {
	Request []*IpsecCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbDeleteRequestMsg) Reset()                    { *m = IpsecCbDeleteRequestMsg{} }
func (m *IpsecCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteRequestMsg) ProtoMessage()               {}
func (*IpsecCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *IpsecCbDeleteRequestMsg) GetRequest() []*IpsecCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbDeleteResponseMsg is batched response to IpsecCbDeleteRequestMsg
type IpsecCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *IpsecCbDeleteResponseMsg) Reset()                    { *m = IpsecCbDeleteResponseMsg{} }
func (m *IpsecCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbDeleteResponseMsg) ProtoMessage()               {}
func (*IpsecCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *IpsecCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// IpsecCbGetRequest is used to get information about a ipseccb
type IpsecCbGetRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *IpsecCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *IpsecCbGetRequest) Reset()                    { *m = IpsecCbGetRequest{} }
func (m *IpsecCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequest) ProtoMessage()               {}
func (*IpsecCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{9} }

func (m *IpsecCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecCbGetRequest) GetKeyOrHandle() *IpsecCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// IpsecCbGetRequestMsg is batched GET requests for ipseccbs
type IpsecCbGetRequestMsg struct {
	Request []*IpsecCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecCbGetRequestMsg) Reset()                    { *m = IpsecCbGetRequestMsg{} }
func (m *IpsecCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetRequestMsg) ProtoMessage()               {}
func (*IpsecCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{10} }

func (m *IpsecCbGetRequestMsg) GetRequest() []*IpsecCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecCbStats is the statistics object for each ipseccb
type IpsecCbStats struct {
}

func (m *IpsecCbStats) Reset()                    { *m = IpsecCbStats{} }
func (m *IpsecCbStats) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbStats) ProtoMessage()               {}
func (*IpsecCbStats) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{11} }

// IpsecCbGetResponse captures all the information about a ipseccb
// only if api_status indicates success, other fields are valid
type IpsecCbGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *IpsecCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *IpsecCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *IpsecCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *IpsecCbGetResponse) Reset()                    { *m = IpsecCbGetResponse{} }
func (m *IpsecCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponse) ProtoMessage()               {}
func (*IpsecCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{12} }

func (m *IpsecCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecCbGetResponse) GetSpec() *IpsecCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStatus() *IpsecCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IpsecCbGetResponse) GetStats() *IpsecCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// IpsecCbGetResponseMsg is batched response to IpsecCbGetRequestMsg
type IpsecCbGetResponseMsg struct {
	Response []*IpsecCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecCbGetResponseMsg) Reset()                    { *m = IpsecCbGetResponseMsg{} }
func (m *IpsecCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecCbGetResponseMsg) ProtoMessage()               {}
func (*IpsecCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{13} }

func (m *IpsecCbGetResponseMsg) GetResponse() []*IpsecCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*IpsecCbKeyHandle)(nil), "ipseccb.IpsecCbKeyHandle")
	proto.RegisterType((*IpsecCbSpec)(nil), "ipseccb.IpsecCbSpec")
	proto.RegisterType((*IpsecCbRequestMsg)(nil), "ipseccb.IpsecCbRequestMsg")
	proto.RegisterType((*IpsecCbStatus)(nil), "ipseccb.IpsecCbStatus")
	proto.RegisterType((*IpsecCbResponse)(nil), "ipseccb.IpsecCbResponse")
	proto.RegisterType((*IpsecCbResponseMsg)(nil), "ipseccb.IpsecCbResponseMsg")
	proto.RegisterType((*IpsecCbDeleteRequest)(nil), "ipseccb.IpsecCbDeleteRequest")
	proto.RegisterType((*IpsecCbDeleteRequestMsg)(nil), "ipseccb.IpsecCbDeleteRequestMsg")
	proto.RegisterType((*IpsecCbDeleteResponseMsg)(nil), "ipseccb.IpsecCbDeleteResponseMsg")
	proto.RegisterType((*IpsecCbGetRequest)(nil), "ipseccb.IpsecCbGetRequest")
	proto.RegisterType((*IpsecCbGetRequestMsg)(nil), "ipseccb.IpsecCbGetRequestMsg")
	proto.RegisterType((*IpsecCbStats)(nil), "ipseccb.IpsecCbStats")
	proto.RegisterType((*IpsecCbGetResponse)(nil), "ipseccb.IpsecCbGetResponse")
	proto.RegisterType((*IpsecCbGetResponseMsg)(nil), "ipseccb.IpsecCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IpsecCb service

type IpsecCbClient interface {
	IpsecCbCreate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error)
	IpsecCbUpdate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error)
	IpsecCbDelete(ctx context.Context, in *IpsecCbDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecCbDeleteResponseMsg, error)
	IpsecCbGet(ctx context.Context, in *IpsecCbGetRequestMsg, opts ...grpc.CallOption) (*IpsecCbGetResponseMsg, error)
}

type ipsecCbClient struct {
	cc *grpc.ClientConn
}

func NewIpsecCbClient(cc *grpc.ClientConn) IpsecCbClient {
	return &ipsecCbClient{cc}
}

func (c *ipsecCbClient) IpsecCbCreate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error) {
	out := new(IpsecCbResponseMsg)
	err := grpc.Invoke(ctx, "/ipseccb.IpsecCb/IpsecCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecCbClient) IpsecCbUpdate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error) {
	out := new(IpsecCbResponseMsg)
	err := grpc.Invoke(ctx, "/ipseccb.IpsecCb/IpsecCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecCbClient) IpsecCbDelete(ctx context.Context, in *IpsecCbDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecCbDeleteResponseMsg, error) {
	out := new(IpsecCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ipseccb.IpsecCb/IpsecCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecCbClient) IpsecCbGet(ctx context.Context, in *IpsecCbGetRequestMsg, opts ...grpc.CallOption) (*IpsecCbGetResponseMsg, error) {
	out := new(IpsecCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/ipseccb.IpsecCb/IpsecCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IpsecCb service

type IpsecCbServer interface {
	IpsecCbCreate(context.Context, *IpsecCbRequestMsg) (*IpsecCbResponseMsg, error)
	IpsecCbUpdate(context.Context, *IpsecCbRequestMsg) (*IpsecCbResponseMsg, error)
	IpsecCbDelete(context.Context, *IpsecCbDeleteRequestMsg) (*IpsecCbDeleteResponseMsg, error)
	IpsecCbGet(context.Context, *IpsecCbGetRequestMsg) (*IpsecCbGetResponseMsg, error)
}

func RegisterIpsecCbServer(s *grpc.Server, srv IpsecCbServer) {
	s.RegisterService(&_IpsecCb_serviceDesc, srv)
}

func _IpsecCb_IpsecCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecCbServer).IpsecCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipseccb.IpsecCb/IpsecCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecCbServer).IpsecCbCreate(ctx, req.(*IpsecCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecCb_IpsecCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecCbServer).IpsecCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipseccb.IpsecCb/IpsecCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecCbServer).IpsecCbUpdate(ctx, req.(*IpsecCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecCb_IpsecCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecCbServer).IpsecCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipseccb.IpsecCb/IpsecCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecCbServer).IpsecCbDelete(ctx, req.(*IpsecCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpsecCb_IpsecCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecCbServer).IpsecCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipseccb.IpsecCb/IpsecCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecCbServer).IpsecCbGet(ctx, req.(*IpsecCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _IpsecCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipseccb.IpsecCb",
	HandlerType: (*IpsecCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IpsecCbCreate",
			Handler:    _IpsecCb_IpsecCbCreate_Handler,
		},
		{
			MethodName: "IpsecCbUpdate",
			Handler:    _IpsecCb_IpsecCbUpdate_Handler,
		},
		{
			MethodName: "IpsecCbDelete",
			Handler:    _IpsecCb_IpsecCbDelete_Handler,
		},
		{
			MethodName: "IpsecCbGet",
			Handler:    _IpsecCb_IpsecCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/ipseccb.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/ipseccb.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x5b, 0x4f, 0xdb, 0x48,
	0x14, 0x26, 0x09, 0xe4, 0x72, 0x4c, 0x02, 0x8c, 0xc8, 0x32, 0x24, 0x62, 0xc9, 0x5a, 0x42, 0x1b,
	0x69, 0xa5, 0x44, 0xca, 0xa2, 0xdd, 0x27, 0x1e, 0x96, 0xb0, 0xda, 0x70, 0x89, 0x58, 0x19, 0xed,
	0x3e, 0xf4, 0xc5, 0x72, 0xc6, 0x23, 0x32, 0x8d, 0x63, 0xbb, 0x19, 0x13, 0x35, 0xa8, 0x2f, 0xfd,
	0x3d, 0xfd, 0x23, 0x7d, 0xe8, 0x8f, 0xaa, 0xe6, 0x62, 0x3b, 0x38, 0x81, 0xaa, 0xad, 0xd4, 0x27,
	0x7c, 0xce, 0xf9, 0xe6, 0x3b, 0xb7, 0xef, 0x04, 0x68, 0xfa, 0x8c, 0x74, 0xc3, 0x59, 0x10, 0x05,
	0xdd, 0xb1, 0xe3, 0x75, 0x59, 0xc8, 0x29, 0x21, 0xa3, 0x8e, 0xf4, 0xa0, 0x92, 0x36, 0x1b, 0xf5,
	0x14, 0x15, 0x2d, 0x42, 0xca, 0x55, 0xdc, 0x9c, 0xc2, 0xee, 0xa5, 0x40, 0xf4, 0x47, 0xd7, 0x74,
	0x31, 0x70, 0x7c, 0xd7, 0xa3, 0xe8, 0x18, 0x40, 0xbf, 0xb2, 0x99, 0x8b, 0x73, 0xad, 0x5c, 0xbb,
	0x3a, 0xd8, 0xb0, 0x2a, 0xda, 0x77, 0xe9, 0xa2, 0x5f, 0xa1, 0x16, 0x03, 0xc6, 0xf2, 0x09, 0xce,
	0xb7, 0x72, 0xed, 0xe2, 0x60, 0xc3, 0xaa, 0x6a, 0xbf, 0x62, 0x3a, 0xdf, 0x81, 0xea, 0x84, 0x2e,
	0xec, 0x60, 0xa6, 0x71, 0xe6, 0x87, 0x02, 0x18, 0x3a, 0xdf, 0x5d, 0x48, 0x09, 0x3a, 0xcb, 0x00,
	0x64, 0x36, 0xa3, 0x77, 0xd8, 0x89, 0xbb, 0xc8, 0x16, 0x67, 0x19, 0x13, 0xba, 0xb8, 0x9d, 0xe9,
	0x4a, 0x6b, 0x90, 0x0f, 0x99, 0x4c, 0x5e, 0xb5, 0xf2, 0x21, 0x13, 0x36, 0x61, 0xb8, 0xa0, 0x6c,
	0xc2, 0xd0, 0x31, 0x18, 0xd1, 0x83, 0xef, 0x53, 0xcf, 0xe6, 0x2c, 0x3c, 0xc5, 0x9b, 0x32, 0x00,
	0xca, 0x75, 0xc7, 0xc2, 0xd3, 0x25, 0x80, 0x2b, 0x00, 0x5b, 0xcb, 0x80, 0x0b, 0x01, 0x38, 0x80,
	0x12, 0x9b, 0xdb, 0x9c, 0x3d, 0x52, 0x5c, 0x94, 0xc1, 0x22, 0x9b, 0xdf, 0xb1, 0x47, 0x8a, 0x0e,
	0xa1, 0xcc, 0x88, 0x8e, 0x94, 0x64, 0xa4, 0xc4, 0x88, 0x0a, 0x1d, 0x01, 0x8c, 0xbc, 0x80, 0x4c,
	0x54, 0xb0, 0x2c, 0x83, 0x15, 0xe9, 0x91, 0xe1, 0x26, 0x54, 0x44, 0xcf, 0xcc, 0x77, 0xe9, 0x5b,
	0x5c, 0x91, 0xd1, 0xf2, 0x84, 0x2e, 0x2e, 0x85, 0x8d, 0x4c, 0xa8, 0x8e, 0x9c, 0x19, 0x09, 0x6c,
	0xea, 0x13, 0x9b, 0x4c, 0x5d, 0x0c, 0x12, 0x60, 0x48, 0xe7, 0xdf, 0x3e, 0xe9, 0x4f, 0x5d, 0xd1,
	0x25, 0x9b, 0x63, 0x43, 0x8c, 0xdc, 0xca, 0xb3, 0x79, 0x5c, 0xa3, 0xe3, 0x45, 0x78, 0x3b, 0xa9,
	0xd1, 0xf1, 0x22, 0x54, 0x87, 0x22, 0xe5, 0xbe, 0x3d, 0x66, 0xb8, 0x2a, 0xfd, 0x5b, 0x94, 0xfb,
	0x03, 0x16, 0xbb, 0xbd, 0x00, 0xd7, 0x12, 0xf7, 0x4d, 0x80, 0x76, 0xa1, 0xc0, 0x43, 0x86, 0x77,
	0xa4, 0x4f, 0x7c, 0x9a, 0x7d, 0xd8, 0xd3, 0xf3, 0xb7, 0xe8, 0x9b, 0x07, 0xca, 0xa3, 0x21, 0xbf,
	0x47, 0x1d, 0x28, 0xcd, 0x94, 0x85, 0x73, 0xad, 0x42, 0xdb, 0xe8, 0xed, 0x67, 0x97, 0x25, 0x36,
	0x6b, 0xc5, 0x20, 0xf3, 0x0f, 0xa8, 0xc6, 0xfe, 0xc8, 0x89, 0x1e, 0x38, 0x3a, 0x59, 0x51, 0x4f,
	0x4e, 0xb6, 0xf2, 0x54, 0x3b, 0xe6, 0xfb, 0x1c, 0xec, 0x24, 0xd9, 0x79, 0x18, 0xf8, 0x9c, 0xa2,
	0x2e, 0x80, 0x13, 0x32, 0x9b, 0x4b, 0x22, 0xf9, 0xac, 0xd6, 0xdb, 0xed, 0x28, 0x3d, 0xff, 0x15,
	0x32, 0x95, 0xc0, 0xaa, 0x38, 0xf1, 0x27, 0x3a, 0x4b, 0x73, 0xe9, 0x47, 0x79, 0x29, 0xb0, 0x9f,
	0x56, 0x6a, 0x56, 0x4f, 0xe3, 0x1a, 0x94, 0x69, 0x5e, 0x01, 0xca, 0x94, 0x20, 0x26, 0x70, 0x0a,
	0xe5, 0x99, 0x36, 0xf5, 0x08, 0x70, 0x96, 0x2e, 0x86, 0x5b, 0x09, 0xd2, 0x7c, 0x07, 0xfb, 0x3a,
	0x78, 0x41, 0x3d, 0x1a, 0x51, 0x3d, 0x52, 0x74, 0x02, 0x9b, 0x53, 0x1a, 0x39, 0x5a, 0xf9, 0x7b,
	0xba, 0x9b, 0xdb, 0xd1, 0x6b, 0x4a, 0xa2, 0x21, 0x8d, 0x1c, 0x4b, 0x86, 0x57, 0x2f, 0x25, 0xff,
	0x35, 0x97, 0x62, 0x5a, 0x70, 0xb0, 0x2e, 0xbb, 0x68, 0xe7, 0xcf, 0xec, 0x42, 0x8f, 0xb2, 0x9c,
	0x4f, 0x9e, 0xa4, 0x9b, 0xbd, 0x06, 0x9c, 0x01, 0xa4, 0x33, 0xca, 0x6e, 0xaa, 0xf0, 0x85, 0x4d,
	0x99, 0x8b, 0x44, 0x6b, 0xff, 0xd0, 0xe8, 0xc7, 0xce, 0xe6, 0x26, 0xd9, 0x4c, 0x9a, 0x5a, 0xed,
	0x39, 0x33, 0x98, 0x46, 0x96, 0x30, 0xc5, 0xa7, 0x53, 0xa9, 0xc1, 0xf6, 0x92, 0xa6, 0xb8, 0xf9,
	0x29, 0x97, 0x88, 0x48, 0xc2, 0xbf, 0x55, 0xca, 0x6d, 0xd8, 0xe4, 0x21, 0x25, 0xba, 0xb7, 0xf5,
	0x47, 0x27, 0x11, 0xa8, 0x03, 0x45, 0x4d, 0x5b, 0x78, 0x51, 0xec, 0x1a, 0x85, 0x7e, 0x83, 0x2d,
	0xf1, 0xc5, 0xe5, 0xef, 0xa3, 0xd1, 0xab, 0xaf, 0x83, 0x73, 0x4b, 0x61, 0xcc, 0x7f, 0xa1, 0xbe,
	0xda, 0x8d, 0x92, 0x51, 0xf6, 0x2a, 0x9a, 0x6b, 0xc7, 0x95, 0x3d, 0x8c, 0xde, 0xc7, 0x3c, 0x94,
	0x34, 0x00, 0x5d, 0x25, 0x3f, 0x16, 0xfd, 0x19, 0x75, 0x22, 0x8a, 0x1a, 0xab, 0x97, 0x15, 0xef,
	0xa7, 0xd1, 0x7c, 0xee, 0xea, 0x86, 0xfc, 0xde, 0xdc, 0x58, 0xe2, 0xfa, 0x2f, 0x74, 0xbf, 0x93,
	0xeb, 0xff, 0x84, 0x4b, 0x49, 0x1d, 0xb5, 0x5e, 0xbc, 0x11, 0xc1, 0xf8, 0xcb, 0x73, 0x88, 0x65,
	0xde, 0x21, 0x40, 0x3a, 0x1b, 0x74, 0xf4, 0xbc, 0xbe, 0x04, 0xe3, 0xcf, 0x2f, 0xcc, 0x53, 0xd2,
	0x9d, 0xc3, 0xab, 0xf2, 0xd8, 0xf1, 0xe4, 0x7f, 0xf6, 0x51, 0x51, 0xfe, 0xf9, 0xfd, 0x73, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0xae, 0x41, 0x3e, 0x1f, 0x08, 0x00, 0x00,
}
