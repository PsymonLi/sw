// Code generated by MockGen. DO NOT EDIT.
// Source: tcp_proxy.pb.go

package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisTlsProxyAction_Keys is a mock of isTlsProxyAction_Keys interface
type MockisTlsProxyAction_Keys struct {
	ctrl     *gomock.Controller
	recorder *MockisTlsProxyAction_KeysMockRecorder
}

// MockisTlsProxyAction_KeysMockRecorder is the mock recorder for MockisTlsProxyAction_Keys
type MockisTlsProxyAction_KeysMockRecorder struct {
	mock *MockisTlsProxyAction_Keys
}

// NewMockisTlsProxyAction_Keys creates a new mock instance
func NewMockisTlsProxyAction_Keys(ctrl *gomock.Controller) *MockisTlsProxyAction_Keys {
	mock := &MockisTlsProxyAction_Keys{ctrl: ctrl}
	mock.recorder = &MockisTlsProxyAction_KeysMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisTlsProxyAction_Keys) EXPECT() *MockisTlsProxyAction_KeysMockRecorder {
	return _m.recorder
}

// isTlsProxyAction_Keys mocks base method
func (_m *MockisTlsProxyAction_Keys) isTlsProxyAction_Keys() {
	_m.ctrl.Call(_m, "isTlsProxyAction_Keys")
}

// isTlsProxyAction_Keys indicates an expected call of isTlsProxyAction_Keys
func (_mr *MockisTlsProxyAction_KeysMockRecorder) isTlsProxyAction_Keys() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isTlsProxyAction_Keys", reflect.TypeOf((*MockisTlsProxyAction_Keys)(nil).isTlsProxyAction_Keys))
}

// MarshalTo mocks base method
func (_m *MockisTlsProxyAction_Keys) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisTlsProxyAction_KeysMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisTlsProxyAction_Keys)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisTlsProxyAction_Keys) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisTlsProxyAction_KeysMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisTlsProxyAction_Keys)(nil).Size))
}

// MockisTcpProxyAction_ProxyConfig is a mock of isTcpProxyAction_ProxyConfig interface
type MockisTcpProxyAction_ProxyConfig struct {
	ctrl     *gomock.Controller
	recorder *MockisTcpProxyAction_ProxyConfigMockRecorder
}

// MockisTcpProxyAction_ProxyConfigMockRecorder is the mock recorder for MockisTcpProxyAction_ProxyConfig
type MockisTcpProxyAction_ProxyConfigMockRecorder struct {
	mock *MockisTcpProxyAction_ProxyConfig
}

// NewMockisTcpProxyAction_ProxyConfig creates a new mock instance
func NewMockisTcpProxyAction_ProxyConfig(ctrl *gomock.Controller) *MockisTcpProxyAction_ProxyConfig {
	mock := &MockisTcpProxyAction_ProxyConfig{ctrl: ctrl}
	mock.recorder = &MockisTcpProxyAction_ProxyConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisTcpProxyAction_ProxyConfig) EXPECT() *MockisTcpProxyAction_ProxyConfigMockRecorder {
	return _m.recorder
}

// isTcpProxyAction_ProxyConfig mocks base method
func (_m *MockisTcpProxyAction_ProxyConfig) isTcpProxyAction_ProxyConfig() {
	_m.ctrl.Call(_m, "isTcpProxyAction_ProxyConfig")
}

// isTcpProxyAction_ProxyConfig indicates an expected call of isTcpProxyAction_ProxyConfig
func (_mr *MockisTcpProxyAction_ProxyConfigMockRecorder) isTcpProxyAction_ProxyConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isTcpProxyAction_ProxyConfig", reflect.TypeOf((*MockisTcpProxyAction_ProxyConfig)(nil).isTcpProxyAction_ProxyConfig))
}

// MarshalTo mocks base method
func (_m *MockisTcpProxyAction_ProxyConfig) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisTcpProxyAction_ProxyConfigMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisTcpProxyAction_ProxyConfig)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisTcpProxyAction_ProxyConfig) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisTcpProxyAction_ProxyConfigMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisTcpProxyAction_ProxyConfig)(nil).Size))
}

// MockisTcpProxyCbKeyHandle_KeyOrHandle is a mock of isTcpProxyCbKeyHandle_KeyOrHandle interface
type MockisTcpProxyCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisTcpProxyCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisTcpProxyCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisTcpProxyCbKeyHandle_KeyOrHandle
type MockisTcpProxyCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisTcpProxyCbKeyHandle_KeyOrHandle
}

// NewMockisTcpProxyCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisTcpProxyCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisTcpProxyCbKeyHandle_KeyOrHandle {
	mock := &MockisTcpProxyCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisTcpProxyCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisTcpProxyCbKeyHandle_KeyOrHandle) EXPECT() *MockisTcpProxyCbKeyHandle_KeyOrHandleMockRecorder {
	return _m.recorder
}

// isTcpProxyCbKeyHandle_KeyOrHandle mocks base method
func (_m *MockisTcpProxyCbKeyHandle_KeyOrHandle) isTcpProxyCbKeyHandle_KeyOrHandle() {
	_m.ctrl.Call(_m, "isTcpProxyCbKeyHandle_KeyOrHandle")
}

// isTcpProxyCbKeyHandle_KeyOrHandle indicates an expected call of isTcpProxyCbKeyHandle_KeyOrHandle
func (_mr *MockisTcpProxyCbKeyHandle_KeyOrHandleMockRecorder) isTcpProxyCbKeyHandle_KeyOrHandle() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isTcpProxyCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisTcpProxyCbKeyHandle_KeyOrHandle)(nil).isTcpProxyCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (_m *MockisTcpProxyCbKeyHandle_KeyOrHandle) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisTcpProxyCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisTcpProxyCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisTcpProxyCbKeyHandle_KeyOrHandle) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisTcpProxyCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisTcpProxyCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockTcpProxyClient is a mock of TcpProxyClient interface
type MockTcpProxyClient struct {
	ctrl     *gomock.Controller
	recorder *MockTcpProxyClientMockRecorder
}

// MockTcpProxyClientMockRecorder is the mock recorder for MockTcpProxyClient
type MockTcpProxyClientMockRecorder struct {
	mock *MockTcpProxyClient
}

// NewMockTcpProxyClient creates a new mock instance
func NewMockTcpProxyClient(ctrl *gomock.Controller) *MockTcpProxyClient {
	mock := &MockTcpProxyClient{ctrl: ctrl}
	mock.recorder = &MockTcpProxyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTcpProxyClient) EXPECT() *MockTcpProxyClientMockRecorder {
	return _m.recorder
}

// TcpProxyRuleCreate mocks base method
func (_m *MockTcpProxyClient) TcpProxyRuleCreate(ctx context.Context, in *TcpProxyRuleRequestMsg, opts ...grpc.CallOption) (*TcpProxyRuleResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TcpProxyRuleCreate", _s...)
	ret0, _ := ret[0].(*TcpProxyRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyRuleCreate indicates an expected call of TcpProxyRuleCreate
func (_mr *MockTcpProxyClientMockRecorder) TcpProxyRuleCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyRuleCreate", reflect.TypeOf((*MockTcpProxyClient)(nil).TcpProxyRuleCreate), _s...)
}

// TcpProxyRuleUpdate mocks base method
func (_m *MockTcpProxyClient) TcpProxyRuleUpdate(ctx context.Context, in *TcpProxyRuleRequestMsg, opts ...grpc.CallOption) (*TcpProxyRuleResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TcpProxyRuleUpdate", _s...)
	ret0, _ := ret[0].(*TcpProxyRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyRuleUpdate indicates an expected call of TcpProxyRuleUpdate
func (_mr *MockTcpProxyClientMockRecorder) TcpProxyRuleUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyRuleUpdate", reflect.TypeOf((*MockTcpProxyClient)(nil).TcpProxyRuleUpdate), _s...)
}

// TcpProxyRuleDelete mocks base method
func (_m *MockTcpProxyClient) TcpProxyRuleDelete(ctx context.Context, in *TcpProxyRuleDeleteRequestMsg, opts ...grpc.CallOption) (*TcpProxyRuleDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TcpProxyRuleDelete", _s...)
	ret0, _ := ret[0].(*TcpProxyRuleDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyRuleDelete indicates an expected call of TcpProxyRuleDelete
func (_mr *MockTcpProxyClientMockRecorder) TcpProxyRuleDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyRuleDelete", reflect.TypeOf((*MockTcpProxyClient)(nil).TcpProxyRuleDelete), _s...)
}

// TcpProxyRuleGet mocks base method
func (_m *MockTcpProxyClient) TcpProxyRuleGet(ctx context.Context, in *TcpProxyRuleGetRequestMsg, opts ...grpc.CallOption) (*TcpProxyRuleGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TcpProxyRuleGet", _s...)
	ret0, _ := ret[0].(*TcpProxyRuleGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyRuleGet indicates an expected call of TcpProxyRuleGet
func (_mr *MockTcpProxyClientMockRecorder) TcpProxyRuleGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyRuleGet", reflect.TypeOf((*MockTcpProxyClient)(nil).TcpProxyRuleGet), _s...)
}

// TcpProxyCbCreate mocks base method
func (_m *MockTcpProxyClient) TcpProxyCbCreate(ctx context.Context, in *TcpProxyCbRequestMsg, opts ...grpc.CallOption) (*TcpProxyCbResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TcpProxyCbCreate", _s...)
	ret0, _ := ret[0].(*TcpProxyCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyCbCreate indicates an expected call of TcpProxyCbCreate
func (_mr *MockTcpProxyClientMockRecorder) TcpProxyCbCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyCbCreate", reflect.TypeOf((*MockTcpProxyClient)(nil).TcpProxyCbCreate), _s...)
}

// TcpProxyCbUpdate mocks base method
func (_m *MockTcpProxyClient) TcpProxyCbUpdate(ctx context.Context, in *TcpProxyCbRequestMsg, opts ...grpc.CallOption) (*TcpProxyCbResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TcpProxyCbUpdate", _s...)
	ret0, _ := ret[0].(*TcpProxyCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyCbUpdate indicates an expected call of TcpProxyCbUpdate
func (_mr *MockTcpProxyClientMockRecorder) TcpProxyCbUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyCbUpdate", reflect.TypeOf((*MockTcpProxyClient)(nil).TcpProxyCbUpdate), _s...)
}

// TcpProxyCbDelete mocks base method
func (_m *MockTcpProxyClient) TcpProxyCbDelete(ctx context.Context, in *TcpProxyCbDeleteRequestMsg, opts ...grpc.CallOption) (*TcpProxyCbDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TcpProxyCbDelete", _s...)
	ret0, _ := ret[0].(*TcpProxyCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyCbDelete indicates an expected call of TcpProxyCbDelete
func (_mr *MockTcpProxyClientMockRecorder) TcpProxyCbDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyCbDelete", reflect.TypeOf((*MockTcpProxyClient)(nil).TcpProxyCbDelete), _s...)
}

// TcpProxyCbGet mocks base method
func (_m *MockTcpProxyClient) TcpProxyCbGet(ctx context.Context, in *TcpProxyCbGetRequestMsg, opts ...grpc.CallOption) (*TcpProxyCbGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TcpProxyCbGet", _s...)
	ret0, _ := ret[0].(*TcpProxyCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyCbGet indicates an expected call of TcpProxyCbGet
func (_mr *MockTcpProxyClientMockRecorder) TcpProxyCbGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyCbGet", reflect.TypeOf((*MockTcpProxyClient)(nil).TcpProxyCbGet), _s...)
}

// MockTcpProxyServer is a mock of TcpProxyServer interface
type MockTcpProxyServer struct {
	ctrl     *gomock.Controller
	recorder *MockTcpProxyServerMockRecorder
}

// MockTcpProxyServerMockRecorder is the mock recorder for MockTcpProxyServer
type MockTcpProxyServerMockRecorder struct {
	mock *MockTcpProxyServer
}

// NewMockTcpProxyServer creates a new mock instance
func NewMockTcpProxyServer(ctrl *gomock.Controller) *MockTcpProxyServer {
	mock := &MockTcpProxyServer{ctrl: ctrl}
	mock.recorder = &MockTcpProxyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTcpProxyServer) EXPECT() *MockTcpProxyServerMockRecorder {
	return _m.recorder
}

// TcpProxyRuleCreate mocks base method
func (_m *MockTcpProxyServer) TcpProxyRuleCreate(_param0 context.Context, _param1 *TcpProxyRuleRequestMsg) (*TcpProxyRuleResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TcpProxyRuleCreate", _param0, _param1)
	ret0, _ := ret[0].(*TcpProxyRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyRuleCreate indicates an expected call of TcpProxyRuleCreate
func (_mr *MockTcpProxyServerMockRecorder) TcpProxyRuleCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyRuleCreate", reflect.TypeOf((*MockTcpProxyServer)(nil).TcpProxyRuleCreate), arg0, arg1)
}

// TcpProxyRuleUpdate mocks base method
func (_m *MockTcpProxyServer) TcpProxyRuleUpdate(_param0 context.Context, _param1 *TcpProxyRuleRequestMsg) (*TcpProxyRuleResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TcpProxyRuleUpdate", _param0, _param1)
	ret0, _ := ret[0].(*TcpProxyRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyRuleUpdate indicates an expected call of TcpProxyRuleUpdate
func (_mr *MockTcpProxyServerMockRecorder) TcpProxyRuleUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyRuleUpdate", reflect.TypeOf((*MockTcpProxyServer)(nil).TcpProxyRuleUpdate), arg0, arg1)
}

// TcpProxyRuleDelete mocks base method
func (_m *MockTcpProxyServer) TcpProxyRuleDelete(_param0 context.Context, _param1 *TcpProxyRuleDeleteRequestMsg) (*TcpProxyRuleDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TcpProxyRuleDelete", _param0, _param1)
	ret0, _ := ret[0].(*TcpProxyRuleDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyRuleDelete indicates an expected call of TcpProxyRuleDelete
func (_mr *MockTcpProxyServerMockRecorder) TcpProxyRuleDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyRuleDelete", reflect.TypeOf((*MockTcpProxyServer)(nil).TcpProxyRuleDelete), arg0, arg1)
}

// TcpProxyRuleGet mocks base method
func (_m *MockTcpProxyServer) TcpProxyRuleGet(_param0 context.Context, _param1 *TcpProxyRuleGetRequestMsg) (*TcpProxyRuleGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TcpProxyRuleGet", _param0, _param1)
	ret0, _ := ret[0].(*TcpProxyRuleGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyRuleGet indicates an expected call of TcpProxyRuleGet
func (_mr *MockTcpProxyServerMockRecorder) TcpProxyRuleGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyRuleGet", reflect.TypeOf((*MockTcpProxyServer)(nil).TcpProxyRuleGet), arg0, arg1)
}

// TcpProxyCbCreate mocks base method
func (_m *MockTcpProxyServer) TcpProxyCbCreate(_param0 context.Context, _param1 *TcpProxyCbRequestMsg) (*TcpProxyCbResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TcpProxyCbCreate", _param0, _param1)
	ret0, _ := ret[0].(*TcpProxyCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyCbCreate indicates an expected call of TcpProxyCbCreate
func (_mr *MockTcpProxyServerMockRecorder) TcpProxyCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyCbCreate", reflect.TypeOf((*MockTcpProxyServer)(nil).TcpProxyCbCreate), arg0, arg1)
}

// TcpProxyCbUpdate mocks base method
func (_m *MockTcpProxyServer) TcpProxyCbUpdate(_param0 context.Context, _param1 *TcpProxyCbRequestMsg) (*TcpProxyCbResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TcpProxyCbUpdate", _param0, _param1)
	ret0, _ := ret[0].(*TcpProxyCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyCbUpdate indicates an expected call of TcpProxyCbUpdate
func (_mr *MockTcpProxyServerMockRecorder) TcpProxyCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyCbUpdate", reflect.TypeOf((*MockTcpProxyServer)(nil).TcpProxyCbUpdate), arg0, arg1)
}

// TcpProxyCbDelete mocks base method
func (_m *MockTcpProxyServer) TcpProxyCbDelete(_param0 context.Context, _param1 *TcpProxyCbDeleteRequestMsg) (*TcpProxyCbDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TcpProxyCbDelete", _param0, _param1)
	ret0, _ := ret[0].(*TcpProxyCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyCbDelete indicates an expected call of TcpProxyCbDelete
func (_mr *MockTcpProxyServerMockRecorder) TcpProxyCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyCbDelete", reflect.TypeOf((*MockTcpProxyServer)(nil).TcpProxyCbDelete), arg0, arg1)
}

// TcpProxyCbGet mocks base method
func (_m *MockTcpProxyServer) TcpProxyCbGet(_param0 context.Context, _param1 *TcpProxyCbGetRequestMsg) (*TcpProxyCbGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "TcpProxyCbGet", _param0, _param1)
	ret0, _ := ret[0].(*TcpProxyCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpProxyCbGet indicates an expected call of TcpProxyCbGet
func (_mr *MockTcpProxyServerMockRecorder) TcpProxyCbGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TcpProxyCbGet", reflect.TypeOf((*MockTcpProxyServer)(nil).TcpProxyCbGet), arg0, arg1)
}
