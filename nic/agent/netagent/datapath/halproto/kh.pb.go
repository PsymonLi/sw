// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kh.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SecurityProfileKeyHandle is used to operate on a security profile
// either by its id or HAL allocated handle
type SecurityProfileKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*SecurityProfileKeyHandle_ProfileId
	//	*SecurityProfileKeyHandle_ProfileHandle
	KeyOrHandle isSecurityProfileKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *SecurityProfileKeyHandle) Reset()                    { *m = SecurityProfileKeyHandle{} }
func (m *SecurityProfileKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileKeyHandle) ProtoMessage()               {}
func (*SecurityProfileKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{0} }

type isSecurityProfileKeyHandle_KeyOrHandle interface {
	isSecurityProfileKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SecurityProfileKeyHandle_ProfileId struct {
	ProfileId uint32 `protobuf:"varint,1,opt,name=profile_id,json=profileId,proto3,oneof"`
}
type SecurityProfileKeyHandle_ProfileHandle struct {
	ProfileHandle uint64 `protobuf:"fixed64,2,opt,name=profile_handle,json=profileHandle,proto3,oneof"`
}

func (*SecurityProfileKeyHandle_ProfileId) isSecurityProfileKeyHandle_KeyOrHandle()     {}
func (*SecurityProfileKeyHandle_ProfileHandle) isSecurityProfileKeyHandle_KeyOrHandle() {}

func (m *SecurityProfileKeyHandle) GetKeyOrHandle() isSecurityProfileKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityProfileKeyHandle) GetProfileId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*SecurityProfileKeyHandle_ProfileId); ok {
		return x.ProfileId
	}
	return 0
}

func (m *SecurityProfileKeyHandle) GetProfileHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*SecurityProfileKeyHandle_ProfileHandle); ok {
		return x.ProfileHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecurityProfileKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecurityProfileKeyHandle_OneofMarshaler, _SecurityProfileKeyHandle_OneofUnmarshaler, _SecurityProfileKeyHandle_OneofSizer, []interface{}{
		(*SecurityProfileKeyHandle_ProfileId)(nil),
		(*SecurityProfileKeyHandle_ProfileHandle)(nil),
	}
}

func _SecurityProfileKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecurityProfileKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityProfileKeyHandle_ProfileId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ProfileId))
	case *SecurityProfileKeyHandle_ProfileHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.ProfileHandle))
	case nil:
	default:
		return fmt.Errorf("SecurityProfileKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _SecurityProfileKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecurityProfileKeyHandle)
	switch tag {
	case 1: // key_or_handle.profile_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &SecurityProfileKeyHandle_ProfileId{uint32(x)}
		return true, err
	case 2: // key_or_handle.profile_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &SecurityProfileKeyHandle_ProfileHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _SecurityProfileKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecurityProfileKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityProfileKeyHandle_ProfileId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProfileId))
	case *SecurityProfileKeyHandle_ProfileHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// VrfKeyHandle is used to operate on a vrf either by its key or handle
type VrfKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*VrfKeyHandle_VrfId
	//	*VrfKeyHandle_VrfHandle
	KeyOrHandle isVrfKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *VrfKeyHandle) Reset()                    { *m = VrfKeyHandle{} }
func (m *VrfKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*VrfKeyHandle) ProtoMessage()               {}
func (*VrfKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{1} }

type isVrfKeyHandle_KeyOrHandle interface {
	isVrfKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VrfKeyHandle_VrfId struct {
	VrfId uint64 `protobuf:"varint,1,opt,name=vrf_id,json=vrfId,proto3,oneof"`
}
type VrfKeyHandle_VrfHandle struct {
	VrfHandle uint64 `protobuf:"fixed64,2,opt,name=vrf_handle,json=vrfHandle,proto3,oneof"`
}

func (*VrfKeyHandle_VrfId) isVrfKeyHandle_KeyOrHandle()     {}
func (*VrfKeyHandle_VrfHandle) isVrfKeyHandle_KeyOrHandle() {}

func (m *VrfKeyHandle) GetKeyOrHandle() isVrfKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *VrfKeyHandle) GetVrfId() uint64 {
	if x, ok := m.GetKeyOrHandle().(*VrfKeyHandle_VrfId); ok {
		return x.VrfId
	}
	return 0
}

func (m *VrfKeyHandle) GetVrfHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*VrfKeyHandle_VrfHandle); ok {
		return x.VrfHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VrfKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VrfKeyHandle_OneofMarshaler, _VrfKeyHandle_OneofUnmarshaler, _VrfKeyHandle_OneofSizer, []interface{}{
		(*VrfKeyHandle_VrfId)(nil),
		(*VrfKeyHandle_VrfHandle)(nil),
	}
}

func _VrfKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VrfKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *VrfKeyHandle_VrfId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.VrfId))
	case *VrfKeyHandle_VrfHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.VrfHandle))
	case nil:
	default:
		return fmt.Errorf("VrfKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _VrfKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VrfKeyHandle)
	switch tag {
	case 1: // key_or_handle.vrf_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &VrfKeyHandle_VrfId{x}
		return true, err
	case 2: // key_or_handle.vrf_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &VrfKeyHandle_VrfHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _VrfKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VrfKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *VrfKeyHandle_VrfId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.VrfId))
	case *VrfKeyHandle_VrfHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// NetworkKeyHandle uniquely identifies a Network
type NetworkKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*NetworkKeyHandle_IpPrefix
	//	*NetworkKeyHandle_NwHandle
	KeyOrHandle isNetworkKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *NetworkKeyHandle) Reset()                    { *m = NetworkKeyHandle{} }
func (m *NetworkKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*NetworkKeyHandle) ProtoMessage()               {}
func (*NetworkKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{2} }

type isNetworkKeyHandle_KeyOrHandle interface {
	isNetworkKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NetworkKeyHandle_IpPrefix struct {
	IpPrefix *IPPrefix `protobuf:"bytes,1,opt,name=ip_prefix,json=ipPrefix,oneof"`
}
type NetworkKeyHandle_NwHandle struct {
	NwHandle uint64 `protobuf:"fixed64,2,opt,name=nw_handle,json=nwHandle,proto3,oneof"`
}

func (*NetworkKeyHandle_IpPrefix) isNetworkKeyHandle_KeyOrHandle() {}
func (*NetworkKeyHandle_NwHandle) isNetworkKeyHandle_KeyOrHandle() {}

func (m *NetworkKeyHandle) GetKeyOrHandle() isNetworkKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NetworkKeyHandle) GetIpPrefix() *IPPrefix {
	if x, ok := m.GetKeyOrHandle().(*NetworkKeyHandle_IpPrefix); ok {
		return x.IpPrefix
	}
	return nil
}

func (m *NetworkKeyHandle) GetNwHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*NetworkKeyHandle_NwHandle); ok {
		return x.NwHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NetworkKeyHandle_OneofMarshaler, _NetworkKeyHandle_OneofUnmarshaler, _NetworkKeyHandle_OneofSizer, []interface{}{
		(*NetworkKeyHandle_IpPrefix)(nil),
		(*NetworkKeyHandle_NwHandle)(nil),
	}
}

func _NetworkKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NetworkKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *NetworkKeyHandle_IpPrefix:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpPrefix); err != nil {
			return err
		}
	case *NetworkKeyHandle_NwHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.NwHandle))
	case nil:
	default:
		return fmt.Errorf("NetworkKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _NetworkKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NetworkKeyHandle)
	switch tag {
	case 1: // key_or_handle.ip_prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IPPrefix)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &NetworkKeyHandle_IpPrefix{msg}
		return true, err
	case 2: // key_or_handle.nw_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &NetworkKeyHandle_NwHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NetworkKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *NetworkKeyHandle_IpPrefix:
		s := proto.Size(x.IpPrefix)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkKeyHandle_NwHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// L2SegmentKeyHandle is used to operate on a L2 segment either by its
// segment id or HAL allocated handle
type L2SegmentKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*L2SegmentKeyHandle_SegmentId
	//	*L2SegmentKeyHandle_L2SegmentHandle
	KeyOrHandle isL2SegmentKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *L2SegmentKeyHandle) Reset()                    { *m = L2SegmentKeyHandle{} }
func (m *L2SegmentKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*L2SegmentKeyHandle) ProtoMessage()               {}
func (*L2SegmentKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{3} }

type isL2SegmentKeyHandle_KeyOrHandle interface {
	isL2SegmentKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type L2SegmentKeyHandle_SegmentId struct {
	SegmentId uint64 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3,oneof"`
}
type L2SegmentKeyHandle_L2SegmentHandle struct {
	L2SegmentHandle uint64 `protobuf:"fixed64,2,opt,name=l2segment_handle,json=l2segmentHandle,proto3,oneof"`
}

func (*L2SegmentKeyHandle_SegmentId) isL2SegmentKeyHandle_KeyOrHandle()       {}
func (*L2SegmentKeyHandle_L2SegmentHandle) isL2SegmentKeyHandle_KeyOrHandle() {}

func (m *L2SegmentKeyHandle) GetKeyOrHandle() isL2SegmentKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *L2SegmentKeyHandle) GetSegmentId() uint64 {
	if x, ok := m.GetKeyOrHandle().(*L2SegmentKeyHandle_SegmentId); ok {
		return x.SegmentId
	}
	return 0
}

func (m *L2SegmentKeyHandle) GetL2SegmentHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*L2SegmentKeyHandle_L2SegmentHandle); ok {
		return x.L2SegmentHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*L2SegmentKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _L2SegmentKeyHandle_OneofMarshaler, _L2SegmentKeyHandle_OneofUnmarshaler, _L2SegmentKeyHandle_OneofSizer, []interface{}{
		(*L2SegmentKeyHandle_SegmentId)(nil),
		(*L2SegmentKeyHandle_L2SegmentHandle)(nil),
	}
}

func _L2SegmentKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*L2SegmentKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *L2SegmentKeyHandle_SegmentId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.SegmentId))
	case *L2SegmentKeyHandle_L2SegmentHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.L2SegmentHandle))
	case nil:
	default:
		return fmt.Errorf("L2SegmentKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _L2SegmentKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*L2SegmentKeyHandle)
	switch tag {
	case 1: // key_or_handle.segment_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &L2SegmentKeyHandle_SegmentId{x}
		return true, err
	case 2: // key_or_handle.l2segment_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &L2SegmentKeyHandle_L2SegmentHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _L2SegmentKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*L2SegmentKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *L2SegmentKeyHandle_SegmentId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.SegmentId))
	case *L2SegmentKeyHandle_L2SegmentHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SecurityRuleKeyHandle uniquely identifies a security rule and is used
// to create/update/delete/get secutiry rules
type SecurityRuleKeyHandle struct {
	// Types that are valid to be assigned to RuleKeyOrHandle:
	//	*SecurityRuleKeyHandle_SecurityRuleId
	//	*SecurityRuleKeyHandle_SecurityRuleHandle
	RuleKeyOrHandle isSecurityRuleKeyHandle_RuleKeyOrHandle `protobuf_oneof:"rule_key_or_handle"`
}

func (m *SecurityRuleKeyHandle) Reset()                    { *m = SecurityRuleKeyHandle{} }
func (m *SecurityRuleKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*SecurityRuleKeyHandle) ProtoMessage()               {}
func (*SecurityRuleKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{4} }

type isSecurityRuleKeyHandle_RuleKeyOrHandle interface {
	isSecurityRuleKeyHandle_RuleKeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SecurityRuleKeyHandle_SecurityRuleId struct {
	SecurityRuleId uint64 `protobuf:"varint,1,opt,name=security_rule_id,json=securityRuleId,proto3,oneof"`
}
type SecurityRuleKeyHandle_SecurityRuleHandle struct {
	SecurityRuleHandle uint64 `protobuf:"fixed64,2,opt,name=security_rule_handle,json=securityRuleHandle,proto3,oneof"`
}

func (*SecurityRuleKeyHandle_SecurityRuleId) isSecurityRuleKeyHandle_RuleKeyOrHandle()     {}
func (*SecurityRuleKeyHandle_SecurityRuleHandle) isSecurityRuleKeyHandle_RuleKeyOrHandle() {}

func (m *SecurityRuleKeyHandle) GetRuleKeyOrHandle() isSecurityRuleKeyHandle_RuleKeyOrHandle {
	if m != nil {
		return m.RuleKeyOrHandle
	}
	return nil
}

func (m *SecurityRuleKeyHandle) GetSecurityRuleId() uint64 {
	if x, ok := m.GetRuleKeyOrHandle().(*SecurityRuleKeyHandle_SecurityRuleId); ok {
		return x.SecurityRuleId
	}
	return 0
}

func (m *SecurityRuleKeyHandle) GetSecurityRuleHandle() uint64 {
	if x, ok := m.GetRuleKeyOrHandle().(*SecurityRuleKeyHandle_SecurityRuleHandle); ok {
		return x.SecurityRuleHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecurityRuleKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecurityRuleKeyHandle_OneofMarshaler, _SecurityRuleKeyHandle_OneofUnmarshaler, _SecurityRuleKeyHandle_OneofSizer, []interface{}{
		(*SecurityRuleKeyHandle_SecurityRuleId)(nil),
		(*SecurityRuleKeyHandle_SecurityRuleHandle)(nil),
	}
}

func _SecurityRuleKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecurityRuleKeyHandle)
	// rule_key_or_handle
	switch x := m.RuleKeyOrHandle.(type) {
	case *SecurityRuleKeyHandle_SecurityRuleId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.SecurityRuleId))
	case *SecurityRuleKeyHandle_SecurityRuleHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.SecurityRuleHandle))
	case nil:
	default:
		return fmt.Errorf("SecurityRuleKeyHandle.RuleKeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _SecurityRuleKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecurityRuleKeyHandle)
	switch tag {
	case 1: // rule_key_or_handle.security_rule_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.RuleKeyOrHandle = &SecurityRuleKeyHandle_SecurityRuleId{x}
		return true, err
	case 2: // rule_key_or_handle.security_rule_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.RuleKeyOrHandle = &SecurityRuleKeyHandle_SecurityRuleHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _SecurityRuleKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecurityRuleKeyHandle)
	// rule_key_or_handle
	switch x := m.RuleKeyOrHandle.(type) {
	case *SecurityRuleKeyHandle_SecurityRuleId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.SecurityRuleId))
	case *SecurityRuleKeyHandle_SecurityRuleHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SecurityGroupPolicyId struct {
	SecurityGroupId     uint64 `protobuf:"varint,1,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	PeerSecurityGroupId uint64 `protobuf:"varint,2,opt,name=peer_security_group_id,json=peerSecurityGroupId,proto3" json:"peer_security_group_id,omitempty"`
}

func (m *SecurityGroupPolicyId) Reset()                    { *m = SecurityGroupPolicyId{} }
func (m *SecurityGroupPolicyId) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyId) ProtoMessage()               {}
func (*SecurityGroupPolicyId) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{5} }

func (m *SecurityGroupPolicyId) GetSecurityGroupId() uint64 {
	if m != nil {
		return m.SecurityGroupId
	}
	return 0
}

func (m *SecurityGroupPolicyId) GetPeerSecurityGroupId() uint64 {
	if m != nil {
		return m.PeerSecurityGroupId
	}
	return 0
}

// SecurityGroupKeyPolicyHandle uniquely identifies a security group and is used
// to create/update/delete/get security group Policy
type SecurityGroupPolicyKeyHandle struct {
	// Types that are valid to be assigned to PolicyKeyOrHandle:
	//	*SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId
	//	*SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle
	PolicyKeyOrHandle isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle `protobuf_oneof:"policy_key_or_handle"`
}

func (m *SecurityGroupPolicyKeyHandle) Reset()                    { *m = SecurityGroupPolicyKeyHandle{} }
func (m *SecurityGroupPolicyKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupPolicyKeyHandle) ProtoMessage()               {}
func (*SecurityGroupPolicyKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{6} }

type isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle interface {
	isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId struct {
	SecurityGroupPolicyId *SecurityGroupPolicyId `protobuf:"bytes,1,opt,name=security_group_policy_id,json=securityGroupPolicyId,oneof"`
}
type SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle struct {
	SecurityGroupPolicyHandle uint64 `protobuf:"fixed64,2,opt,name=security_group_policy_handle,json=securityGroupPolicyHandle,proto3,oneof"`
}

func (*SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId) isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle() {
}
func (*SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle) isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle() {
}

func (m *SecurityGroupPolicyKeyHandle) GetPolicyKeyOrHandle() isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle {
	if m != nil {
		return m.PolicyKeyOrHandle
	}
	return nil
}

func (m *SecurityGroupPolicyKeyHandle) GetSecurityGroupPolicyId() *SecurityGroupPolicyId {
	if x, ok := m.GetPolicyKeyOrHandle().(*SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId); ok {
		return x.SecurityGroupPolicyId
	}
	return nil
}

func (m *SecurityGroupPolicyKeyHandle) GetSecurityGroupPolicyHandle() uint64 {
	if x, ok := m.GetPolicyKeyOrHandle().(*SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle); ok {
		return x.SecurityGroupPolicyHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecurityGroupPolicyKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecurityGroupPolicyKeyHandle_OneofMarshaler, _SecurityGroupPolicyKeyHandle_OneofUnmarshaler, _SecurityGroupPolicyKeyHandle_OneofSizer, []interface{}{
		(*SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId)(nil),
		(*SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle)(nil),
	}
}

func _SecurityGroupPolicyKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecurityGroupPolicyKeyHandle)
	// policy_key_or_handle
	switch x := m.PolicyKeyOrHandle.(type) {
	case *SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SecurityGroupPolicyId); err != nil {
			return err
		}
	case *SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.SecurityGroupPolicyHandle))
	case nil:
	default:
		return fmt.Errorf("SecurityGroupPolicyKeyHandle.PolicyKeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _SecurityGroupPolicyKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecurityGroupPolicyKeyHandle)
	switch tag {
	case 1: // policy_key_or_handle.security_group_policy_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SecurityGroupPolicyId)
		err := b.DecodeMessage(msg)
		m.PolicyKeyOrHandle = &SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId{msg}
		return true, err
	case 2: // policy_key_or_handle.security_group_policy_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.PolicyKeyOrHandle = &SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _SecurityGroupPolicyKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecurityGroupPolicyKeyHandle)
	// policy_key_or_handle
	switch x := m.PolicyKeyOrHandle.(type) {
	case *SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId:
		s := proto.Size(x.SecurityGroupPolicyId)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// security_group obj definition
// SecurityGroupKeyHandle uniquely identifies a security group and is used
// to create/update/delete/get security groups
type SecurityGroupKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*SecurityGroupKeyHandle_SecurityGroupId
	//	*SecurityGroupKeyHandle_SecurityGroupHandle
	KeyOrHandle isSecurityGroupKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *SecurityGroupKeyHandle) Reset()                    { *m = SecurityGroupKeyHandle{} }
func (m *SecurityGroupKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupKeyHandle) ProtoMessage()               {}
func (*SecurityGroupKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{7} }

type isSecurityGroupKeyHandle_KeyOrHandle interface {
	isSecurityGroupKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SecurityGroupKeyHandle_SecurityGroupId struct {
	SecurityGroupId uint64 `protobuf:"varint,1,opt,name=security_group_id,json=securityGroupId,proto3,oneof"`
}
type SecurityGroupKeyHandle_SecurityGroupHandle struct {
	SecurityGroupHandle uint64 `protobuf:"fixed64,2,opt,name=security_group_handle,json=securityGroupHandle,proto3,oneof"`
}

func (*SecurityGroupKeyHandle_SecurityGroupId) isSecurityGroupKeyHandle_KeyOrHandle()     {}
func (*SecurityGroupKeyHandle_SecurityGroupHandle) isSecurityGroupKeyHandle_KeyOrHandle() {}

func (m *SecurityGroupKeyHandle) GetKeyOrHandle() isSecurityGroupKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityGroupKeyHandle) GetSecurityGroupId() uint64 {
	if x, ok := m.GetKeyOrHandle().(*SecurityGroupKeyHandle_SecurityGroupId); ok {
		return x.SecurityGroupId
	}
	return 0
}

func (m *SecurityGroupKeyHandle) GetSecurityGroupHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*SecurityGroupKeyHandle_SecurityGroupHandle); ok {
		return x.SecurityGroupHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecurityGroupKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecurityGroupKeyHandle_OneofMarshaler, _SecurityGroupKeyHandle_OneofUnmarshaler, _SecurityGroupKeyHandle_OneofSizer, []interface{}{
		(*SecurityGroupKeyHandle_SecurityGroupId)(nil),
		(*SecurityGroupKeyHandle_SecurityGroupHandle)(nil),
	}
}

func _SecurityGroupKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecurityGroupKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityGroupKeyHandle_SecurityGroupId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.SecurityGroupId))
	case *SecurityGroupKeyHandle_SecurityGroupHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.SecurityGroupHandle))
	case nil:
	default:
		return fmt.Errorf("SecurityGroupKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _SecurityGroupKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecurityGroupKeyHandle)
	switch tag {
	case 1: // key_or_handle.security_group_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &SecurityGroupKeyHandle_SecurityGroupId{x}
		return true, err
	case 2: // key_or_handle.security_group_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &SecurityGroupKeyHandle_SecurityGroupHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _SecurityGroupKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecurityGroupKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityGroupKeyHandle_SecurityGroupId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.SecurityGroupId))
	case *SecurityGroupKeyHandle_SecurityGroupHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// PortKeyHandle uniquely identifies a Port
type PortKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*PortKeyHandle_PortId
	//	*PortKeyHandle_PortHandle
	KeyOrHandle isPortKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *PortKeyHandle) Reset()                    { *m = PortKeyHandle{} }
func (m *PortKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*PortKeyHandle) ProtoMessage()               {}
func (*PortKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{8} }

type isPortKeyHandle_KeyOrHandle interface {
	isPortKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PortKeyHandle_PortId struct {
	PortId uint32 `protobuf:"fixed32,1,opt,name=port_id,json=portId,proto3,oneof"`
}
type PortKeyHandle_PortHandle struct {
	PortHandle uint64 `protobuf:"fixed64,2,opt,name=port_handle,json=portHandle,proto3,oneof"`
}

func (*PortKeyHandle_PortId) isPortKeyHandle_KeyOrHandle()     {}
func (*PortKeyHandle_PortHandle) isPortKeyHandle_KeyOrHandle() {}

func (m *PortKeyHandle) GetKeyOrHandle() isPortKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortKeyHandle) GetPortId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*PortKeyHandle_PortId); ok {
		return x.PortId
	}
	return 0
}

func (m *PortKeyHandle) GetPortHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*PortKeyHandle_PortHandle); ok {
		return x.PortHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PortKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PortKeyHandle_OneofMarshaler, _PortKeyHandle_OneofUnmarshaler, _PortKeyHandle_OneofSizer, []interface{}{
		(*PortKeyHandle_PortId)(nil),
		(*PortKeyHandle_PortHandle)(nil),
	}
}

func _PortKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PortKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *PortKeyHandle_PortId:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.PortId))
	case *PortKeyHandle_PortHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.PortHandle))
	case nil:
	default:
		return fmt.Errorf("PortKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _PortKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PortKeyHandle)
	switch tag {
	case 1: // key_or_handle.port_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.KeyOrHandle = &PortKeyHandle_PortId{uint32(x)}
		return true, err
	case 2: // key_or_handle.port_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &PortKeyHandle_PortHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _PortKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PortKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *PortKeyHandle_PortId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *PortKeyHandle_PortHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// LifKeyHandle uniquely identifies a LIF
type LifKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*LifKeyHandle_LifId
	//	*LifKeyHandle_LifHandle
	KeyOrHandle isLifKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *LifKeyHandle) Reset()                    { *m = LifKeyHandle{} }
func (m *LifKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*LifKeyHandle) ProtoMessage()               {}
func (*LifKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{9} }

type isLifKeyHandle_KeyOrHandle interface {
	isLifKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type LifKeyHandle_LifId struct {
	LifId uint32 `protobuf:"fixed32,1,opt,name=lif_id,json=lifId,proto3,oneof"`
}
type LifKeyHandle_LifHandle struct {
	LifHandle uint64 `protobuf:"fixed64,2,opt,name=lif_handle,json=lifHandle,proto3,oneof"`
}

func (*LifKeyHandle_LifId) isLifKeyHandle_KeyOrHandle()     {}
func (*LifKeyHandle_LifHandle) isLifKeyHandle_KeyOrHandle() {}

func (m *LifKeyHandle) GetKeyOrHandle() isLifKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifKeyHandle) GetLifId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*LifKeyHandle_LifId); ok {
		return x.LifId
	}
	return 0
}

func (m *LifKeyHandle) GetLifHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*LifKeyHandle_LifHandle); ok {
		return x.LifHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LifKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LifKeyHandle_OneofMarshaler, _LifKeyHandle_OneofUnmarshaler, _LifKeyHandle_OneofSizer, []interface{}{
		(*LifKeyHandle_LifId)(nil),
		(*LifKeyHandle_LifHandle)(nil),
	}
}

func _LifKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LifKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *LifKeyHandle_LifId:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.LifId))
	case *LifKeyHandle_LifHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.LifHandle))
	case nil:
	default:
		return fmt.Errorf("LifKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _LifKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LifKeyHandle)
	switch tag {
	case 1: // key_or_handle.lif_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.KeyOrHandle = &LifKeyHandle_LifId{uint32(x)}
		return true, err
	case 2: // key_or_handle.lif_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &LifKeyHandle_LifHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _LifKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LifKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *LifKeyHandle_LifId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *LifKeyHandle_LifHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InterfaceKeyHandle uniquely identifies a Interface
type InterfaceKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*InterfaceKeyHandle_InterfaceId
	//	*InterfaceKeyHandle_IfHandle
	KeyOrHandle isInterfaceKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *InterfaceKeyHandle) Reset()                    { *m = InterfaceKeyHandle{} }
func (m *InterfaceKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*InterfaceKeyHandle) ProtoMessage()               {}
func (*InterfaceKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{10} }

type isInterfaceKeyHandle_KeyOrHandle interface {
	isInterfaceKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type InterfaceKeyHandle_InterfaceId struct {
	InterfaceId uint64 `protobuf:"fixed64,1,opt,name=interface_id,json=interfaceId,proto3,oneof"`
}
type InterfaceKeyHandle_IfHandle struct {
	IfHandle uint64 `protobuf:"fixed64,2,opt,name=if_handle,json=ifHandle,proto3,oneof"`
}

func (*InterfaceKeyHandle_InterfaceId) isInterfaceKeyHandle_KeyOrHandle() {}
func (*InterfaceKeyHandle_IfHandle) isInterfaceKeyHandle_KeyOrHandle()    {}

func (m *InterfaceKeyHandle) GetKeyOrHandle() isInterfaceKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceKeyHandle) GetInterfaceId() uint64 {
	if x, ok := m.GetKeyOrHandle().(*InterfaceKeyHandle_InterfaceId); ok {
		return x.InterfaceId
	}
	return 0
}

func (m *InterfaceKeyHandle) GetIfHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*InterfaceKeyHandle_IfHandle); ok {
		return x.IfHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InterfaceKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InterfaceKeyHandle_OneofMarshaler, _InterfaceKeyHandle_OneofUnmarshaler, _InterfaceKeyHandle_OneofSizer, []interface{}{
		(*InterfaceKeyHandle_InterfaceId)(nil),
		(*InterfaceKeyHandle_IfHandle)(nil),
	}
}

func _InterfaceKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InterfaceKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *InterfaceKeyHandle_InterfaceId:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.InterfaceId))
	case *InterfaceKeyHandle_IfHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.IfHandle))
	case nil:
	default:
		return fmt.Errorf("InterfaceKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _InterfaceKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InterfaceKeyHandle)
	switch tag {
	case 1: // key_or_handle.interface_id
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &InterfaceKeyHandle_InterfaceId{x}
		return true, err
	case 2: // key_or_handle.if_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &InterfaceKeyHandle_IfHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _InterfaceKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InterfaceKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *InterfaceKeyHandle_InterfaceId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *InterfaceKeyHandle_IfHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// EndpointL2Key is L2 key of the endpoint
// NOTE: An endpoint can have only one L2 key
type EndpointL2Key struct {
	L2SegmentKeyHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_handle,json=l2segmentKeyHandle" json:"l2segment_key_handle,omitempty" venice:ref`
	MacAddress         uint64              `protobuf:"varint,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (m *EndpointL2Key) Reset()                    { *m = EndpointL2Key{} }
func (m *EndpointL2Key) String() string            { return proto.CompactTextString(m) }
func (*EndpointL2Key) ProtoMessage()               {}
func (*EndpointL2Key) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{11} }

func (m *EndpointL2Key) GetL2SegmentKeyHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyHandle
	}
	return nil
}

func (m *EndpointL2Key) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

// EndpointL3Key is the L3 key of the endpoint
// NOTE: An endpoint can have many L3 keys
type EndpointL3Key struct {
	IpAddress *IPAddress `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
}

func (m *EndpointL3Key) Reset()                    { *m = EndpointL3Key{} }
func (m *EndpointL3Key) String() string            { return proto.CompactTextString(m) }
func (*EndpointL3Key) ProtoMessage()               {}
func (*EndpointL3Key) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{12} }

func (m *EndpointL3Key) GetIpAddress() *IPAddress {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

// Endpoint can be uniquely identified by its L2 or one of its L3 keys
type EndpointKey struct {
	// Types that are valid to be assigned to EndpointL2L3Key:
	//	*EndpointKey_L2Key
	//	*EndpointKey_L3Key
	EndpointL2L3Key isEndpointKey_EndpointL2L3Key `protobuf_oneof:"endpoint_l2_l3_key"`
}

func (m *EndpointKey) Reset()                    { *m = EndpointKey{} }
func (m *EndpointKey) String() string            { return proto.CompactTextString(m) }
func (*EndpointKey) ProtoMessage()               {}
func (*EndpointKey) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{13} }

type isEndpointKey_EndpointL2L3Key interface {
	isEndpointKey_EndpointL2L3Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EndpointKey_L2Key struct {
	L2Key *EndpointL2Key `protobuf:"bytes,1,opt,name=l2_key,json=l2Key,oneof"`
}
type EndpointKey_L3Key struct {
	L3Key *EndpointL3Key `protobuf:"bytes,2,opt,name=l3_key,json=l3Key,oneof"`
}

func (*EndpointKey_L2Key) isEndpointKey_EndpointL2L3Key() {}
func (*EndpointKey_L3Key) isEndpointKey_EndpointL2L3Key() {}

func (m *EndpointKey) GetEndpointL2L3Key() isEndpointKey_EndpointL2L3Key {
	if m != nil {
		return m.EndpointL2L3Key
	}
	return nil
}

func (m *EndpointKey) GetL2Key() *EndpointL2Key {
	if x, ok := m.GetEndpointL2L3Key().(*EndpointKey_L2Key); ok {
		return x.L2Key
	}
	return nil
}

func (m *EndpointKey) GetL3Key() *EndpointL3Key {
	if x, ok := m.GetEndpointL2L3Key().(*EndpointKey_L3Key); ok {
		return x.L3Key
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EndpointKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EndpointKey_OneofMarshaler, _EndpointKey_OneofUnmarshaler, _EndpointKey_OneofSizer, []interface{}{
		(*EndpointKey_L2Key)(nil),
		(*EndpointKey_L3Key)(nil),
	}
}

func _EndpointKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EndpointKey)
	// endpoint_l2_l3_key
	switch x := m.EndpointL2L3Key.(type) {
	case *EndpointKey_L2Key:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.L2Key); err != nil {
			return err
		}
	case *EndpointKey_L3Key:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.L3Key); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EndpointKey.EndpointL2L3Key has unexpected type %T", x)
	}
	return nil
}

func _EndpointKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EndpointKey)
	switch tag {
	case 1: // endpoint_l2_l3_key.l2_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointL2Key)
		err := b.DecodeMessage(msg)
		m.EndpointL2L3Key = &EndpointKey_L2Key{msg}
		return true, err
	case 2: // endpoint_l2_l3_key.l3_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointL3Key)
		err := b.DecodeMessage(msg)
		m.EndpointL2L3Key = &EndpointKey_L3Key{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EndpointKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EndpointKey)
	// endpoint_l2_l3_key
	switch x := m.EndpointL2L3Key.(type) {
	case *EndpointKey_L2Key:
		s := proto.Size(x.L2Key)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EndpointKey_L3Key:
		s := proto.Size(x.L3Key)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Endpoint is accessible via its key or handle
type EndpointKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*EndpointKeyHandle_EndpointKey
	//	*EndpointKeyHandle_EndpointHandle
	KeyOrHandle isEndpointKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *EndpointKeyHandle) Reset()                    { *m = EndpointKeyHandle{} }
func (m *EndpointKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*EndpointKeyHandle) ProtoMessage()               {}
func (*EndpointKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorKh, []int{14} }

type isEndpointKeyHandle_KeyOrHandle interface {
	isEndpointKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EndpointKeyHandle_EndpointKey struct {
	EndpointKey *EndpointKey `protobuf:"bytes,1,opt,name=endpoint_key,json=endpointKey,oneof"`
}
type EndpointKeyHandle_EndpointHandle struct {
	EndpointHandle uint64 `protobuf:"fixed64,2,opt,name=endpoint_handle,json=endpointHandle,proto3,oneof"`
}

func (*EndpointKeyHandle_EndpointKey) isEndpointKeyHandle_KeyOrHandle()    {}
func (*EndpointKeyHandle_EndpointHandle) isEndpointKeyHandle_KeyOrHandle() {}

func (m *EndpointKeyHandle) GetKeyOrHandle() isEndpointKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *EndpointKeyHandle) GetEndpointKey() *EndpointKey {
	if x, ok := m.GetKeyOrHandle().(*EndpointKeyHandle_EndpointKey); ok {
		return x.EndpointKey
	}
	return nil
}

func (m *EndpointKeyHandle) GetEndpointHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*EndpointKeyHandle_EndpointHandle); ok {
		return x.EndpointHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EndpointKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EndpointKeyHandle_OneofMarshaler, _EndpointKeyHandle_OneofUnmarshaler, _EndpointKeyHandle_OneofSizer, []interface{}{
		(*EndpointKeyHandle_EndpointKey)(nil),
		(*EndpointKeyHandle_EndpointHandle)(nil),
	}
}

func _EndpointKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EndpointKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *EndpointKeyHandle_EndpointKey:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EndpointKey); err != nil {
			return err
		}
	case *EndpointKeyHandle_EndpointHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.EndpointHandle))
	case nil:
	default:
		return fmt.Errorf("EndpointKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _EndpointKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EndpointKeyHandle)
	switch tag {
	case 1: // key_or_handle.endpoint_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointKey)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &EndpointKeyHandle_EndpointKey{msg}
		return true, err
	case 2: // key_or_handle.endpoint_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &EndpointKeyHandle_EndpointHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _EndpointKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EndpointKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *EndpointKeyHandle_EndpointKey:
		s := proto.Size(x.EndpointKey)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EndpointKeyHandle_EndpointHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SecurityProfileKeyHandle)(nil), "kh.SecurityProfileKeyHandle")
	proto.RegisterType((*VrfKeyHandle)(nil), "kh.VrfKeyHandle")
	proto.RegisterType((*NetworkKeyHandle)(nil), "kh.NetworkKeyHandle")
	proto.RegisterType((*L2SegmentKeyHandle)(nil), "kh.L2SegmentKeyHandle")
	proto.RegisterType((*SecurityRuleKeyHandle)(nil), "kh.SecurityRuleKeyHandle")
	proto.RegisterType((*SecurityGroupPolicyId)(nil), "kh.SecurityGroupPolicyId")
	proto.RegisterType((*SecurityGroupPolicyKeyHandle)(nil), "kh.SecurityGroupPolicyKeyHandle")
	proto.RegisterType((*SecurityGroupKeyHandle)(nil), "kh.SecurityGroupKeyHandle")
	proto.RegisterType((*PortKeyHandle)(nil), "kh.PortKeyHandle")
	proto.RegisterType((*LifKeyHandle)(nil), "kh.LifKeyHandle")
	proto.RegisterType((*InterfaceKeyHandle)(nil), "kh.InterfaceKeyHandle")
	proto.RegisterType((*EndpointL2Key)(nil), "kh.EndpointL2Key")
	proto.RegisterType((*EndpointL3Key)(nil), "kh.EndpointL3Key")
	proto.RegisterType((*EndpointKey)(nil), "kh.EndpointKey")
	proto.RegisterType((*EndpointKeyHandle)(nil), "kh.EndpointKeyHandle")
}
func (m *SecurityProfileKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityProfileKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *SecurityProfileKeyHandle_ProfileId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintKh(dAtA, i, uint64(m.ProfileId))
	return i, nil
}
func (m *SecurityProfileKeyHandle_ProfileHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.ProfileHandle))
	return i, nil
}
func (m *VrfKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *VrfKeyHandle_VrfId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintKh(dAtA, i, uint64(m.VrfId))
	return i, nil
}
func (m *VrfKeyHandle_VrfHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.VrfHandle))
	return i, nil
}
func (m *NetworkKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn3, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *NetworkKeyHandle_IpPrefix) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpPrefix != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.IpPrefix.Size()))
		n4, err := m.IpPrefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *NetworkKeyHandle_NwHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.NwHandle))
	return i, nil
}
func (m *L2SegmentKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L2SegmentKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn5, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *L2SegmentKeyHandle_SegmentId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintKh(dAtA, i, uint64(m.SegmentId))
	return i, nil
}
func (m *L2SegmentKeyHandle_L2SegmentHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.L2SegmentHandle))
	return i, nil
}
func (m *SecurityRuleKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityRuleKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RuleKeyOrHandle != nil {
		nn6, err := m.RuleKeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *SecurityRuleKeyHandle_SecurityRuleId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintKh(dAtA, i, uint64(m.SecurityRuleId))
	return i, nil
}
func (m *SecurityRuleKeyHandle_SecurityRuleHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.SecurityRuleHandle))
	return i, nil
}
func (m *SecurityGroupPolicyId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupPolicyId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecurityGroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.SecurityGroupId))
	}
	if m.PeerSecurityGroupId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.PeerSecurityGroupId))
	}
	return i, nil
}

func (m *SecurityGroupPolicyKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupPolicyKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PolicyKeyOrHandle != nil {
		nn7, err := m.PolicyKeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SecurityGroupPolicyId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.SecurityGroupPolicyId.Size()))
		n8, err := m.SecurityGroupPolicyId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.SecurityGroupPolicyHandle))
	return i, nil
}
func (m *SecurityGroupKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityGroupKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn9, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *SecurityGroupKeyHandle_SecurityGroupId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintKh(dAtA, i, uint64(m.SecurityGroupId))
	return i, nil
}
func (m *SecurityGroupKeyHandle_SecurityGroupHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.SecurityGroupHandle))
	return i, nil
}
func (m *PortKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn10, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	return i, nil
}

func (m *PortKeyHandle_PortId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd
	i++
	i = encodeFixed32Kh(dAtA, i, uint32(m.PortId))
	return i, nil
}
func (m *PortKeyHandle_PortHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.PortHandle))
	return i, nil
}
func (m *LifKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn11, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *LifKeyHandle_LifId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd
	i++
	i = encodeFixed32Kh(dAtA, i, uint32(m.LifId))
	return i, nil
}
func (m *LifKeyHandle_LifHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.LifHandle))
	return i, nil
}
func (m *InterfaceKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn12, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	return i, nil
}

func (m *InterfaceKeyHandle_InterfaceId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x9
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.InterfaceId))
	return i, nil
}
func (m *InterfaceKeyHandle_IfHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.IfHandle))
	return i, nil
}
func (m *EndpointL2Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointL2Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L2SegmentKeyHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.L2SegmentKeyHandle.Size()))
		n13, err := m.L2SegmentKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.MacAddress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.MacAddress))
	}
	return i, nil
}

func (m *EndpointL3Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointL3Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IpAddress != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.IpAddress.Size()))
		n14, err := m.IpAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *EndpointKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EndpointL2L3Key != nil {
		nn15, err := m.EndpointL2L3Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	return i, nil
}

func (m *EndpointKey_L2Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.L2Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.L2Key.Size()))
		n16, err := m.L2Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *EndpointKey_L3Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.L3Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.L3Key.Size()))
		n17, err := m.L3Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *EndpointKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn18, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	return i, nil
}

func (m *EndpointKeyHandle_EndpointKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EndpointKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKh(dAtA, i, uint64(m.EndpointKey.Size()))
		n19, err := m.EndpointKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *EndpointKeyHandle_EndpointHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Kh(dAtA, i, uint64(m.EndpointHandle))
	return i, nil
}
func encodeFixed64Kh(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Kh(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintKh(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SecurityProfileKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *SecurityProfileKeyHandle_ProfileId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovKh(uint64(m.ProfileId))
	return n
}
func (m *SecurityProfileKeyHandle_ProfileHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *VrfKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *VrfKeyHandle_VrfId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovKh(uint64(m.VrfId))
	return n
}
func (m *VrfKeyHandle_VrfHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *NetworkKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *NetworkKeyHandle_IpPrefix) Size() (n int) {
	var l int
	_ = l
	if m.IpPrefix != nil {
		l = m.IpPrefix.Size()
		n += 1 + l + sovKh(uint64(l))
	}
	return n
}
func (m *NetworkKeyHandle_NwHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *L2SegmentKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *L2SegmentKeyHandle_SegmentId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovKh(uint64(m.SegmentId))
	return n
}
func (m *L2SegmentKeyHandle_L2SegmentHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *SecurityRuleKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.RuleKeyOrHandle != nil {
		n += m.RuleKeyOrHandle.Size()
	}
	return n
}

func (m *SecurityRuleKeyHandle_SecurityRuleId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovKh(uint64(m.SecurityRuleId))
	return n
}
func (m *SecurityRuleKeyHandle_SecurityRuleHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *SecurityGroupPolicyId) Size() (n int) {
	var l int
	_ = l
	if m.SecurityGroupId != 0 {
		n += 1 + sovKh(uint64(m.SecurityGroupId))
	}
	if m.PeerSecurityGroupId != 0 {
		n += 1 + sovKh(uint64(m.PeerSecurityGroupId))
	}
	return n
}

func (m *SecurityGroupPolicyKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.PolicyKeyOrHandle != nil {
		n += m.PolicyKeyOrHandle.Size()
	}
	return n
}

func (m *SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId) Size() (n int) {
	var l int
	_ = l
	if m.SecurityGroupPolicyId != nil {
		l = m.SecurityGroupPolicyId.Size()
		n += 1 + l + sovKh(uint64(l))
	}
	return n
}
func (m *SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *SecurityGroupKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *SecurityGroupKeyHandle_SecurityGroupId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovKh(uint64(m.SecurityGroupId))
	return n
}
func (m *SecurityGroupKeyHandle_SecurityGroupHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *PortKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *PortKeyHandle_PortId) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *PortKeyHandle_PortHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *LifKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *LifKeyHandle_LifId) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *LifKeyHandle_LifHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *InterfaceKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *InterfaceKeyHandle_InterfaceId) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *InterfaceKeyHandle_IfHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *EndpointL2Key) Size() (n int) {
	var l int
	_ = l
	if m.L2SegmentKeyHandle != nil {
		l = m.L2SegmentKeyHandle.Size()
		n += 1 + l + sovKh(uint64(l))
	}
	if m.MacAddress != 0 {
		n += 1 + sovKh(uint64(m.MacAddress))
	}
	return n
}

func (m *EndpointL3Key) Size() (n int) {
	var l int
	_ = l
	if m.IpAddress != nil {
		l = m.IpAddress.Size()
		n += 1 + l + sovKh(uint64(l))
	}
	return n
}

func (m *EndpointKey) Size() (n int) {
	var l int
	_ = l
	if m.EndpointL2L3Key != nil {
		n += m.EndpointL2L3Key.Size()
	}
	return n
}

func (m *EndpointKey_L2Key) Size() (n int) {
	var l int
	_ = l
	if m.L2Key != nil {
		l = m.L2Key.Size()
		n += 1 + l + sovKh(uint64(l))
	}
	return n
}
func (m *EndpointKey_L3Key) Size() (n int) {
	var l int
	_ = l
	if m.L3Key != nil {
		l = m.L3Key.Size()
		n += 1 + l + sovKh(uint64(l))
	}
	return n
}
func (m *EndpointKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *EndpointKeyHandle_EndpointKey) Size() (n int) {
	var l int
	_ = l
	if m.EndpointKey != nil {
		l = m.EndpointKey.Size()
		n += 1 + l + sovKh(uint64(l))
	}
	return n
}
func (m *EndpointKeyHandle_EndpointHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}

func sovKh(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKh(x uint64) (n int) {
	return sovKh(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecurityProfileKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityProfileKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityProfileKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &SecurityProfileKeyHandle_ProfileId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &SecurityProfileKeyHandle_ProfileHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &VrfKeyHandle_VrfId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &VrfKeyHandle_VrfHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPPrefix{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.KeyOrHandle = &NetworkKeyHandle_IpPrefix{v}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NwHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &NetworkKeyHandle_NwHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L2SegmentKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L2SegmentKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L2SegmentKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &L2SegmentKeyHandle_SegmentId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &L2SegmentKeyHandle_L2SegmentHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityRuleKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityRuleKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityRuleKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRuleId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RuleKeyOrHandle = &SecurityRuleKeyHandle_SecurityRuleId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRuleHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.RuleKeyOrHandle = &SecurityRuleKeyHandle_SecurityRuleHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupPolicyId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupPolicyId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupPolicyId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupId", wireType)
			}
			m.SecurityGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecurityGroupId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerSecurityGroupId", wireType)
			}
			m.PeerSecurityGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerSecurityGroupId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupPolicyKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupPolicyKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupPolicyKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupPolicyId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SecurityGroupPolicyId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PolicyKeyOrHandle = &SecurityGroupPolicyKeyHandle_SecurityGroupPolicyId{v}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupPolicyHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.PolicyKeyOrHandle = &SecurityGroupPolicyKeyHandle_SecurityGroupPolicyHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityGroupKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityGroupKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityGroupKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &SecurityGroupKeyHandle_SecurityGroupId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &SecurityGroupKeyHandle_SecurityGroupHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.KeyOrHandle = &PortKeyHandle_PortId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &PortKeyHandle_PortHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.KeyOrHandle = &LifKeyHandle_LifId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &LifKeyHandle_LifHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceId", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &InterfaceKeyHandle_InterfaceId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &InterfaceKeyHandle_IfHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointL2Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointL2Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointL2Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L2SegmentKeyHandle == nil {
				m.L2SegmentKeyHandle = &L2SegmentKeyHandle{}
			}
			if err := m.L2SegmentKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			m.MacAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacAddress |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointL3Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointL3Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointL3Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpAddress == nil {
				m.IpAddress = &IPAddress{}
			}
			if err := m.IpAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndpointL2Key{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EndpointL2L3Key = &EndpointKey_L2Key{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndpointL3Key{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EndpointL2L3Key = &EndpointKey_L3Key{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKh
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndpointKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.KeyOrHandle = &EndpointKeyHandle_EndpointKey{v}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &EndpointKeyHandle_EndpointHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipKh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKh(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKh
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKh
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKh
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKh(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKh = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKh   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("kh.proto", fileDescriptorKh) }

var fileDescriptorKh = []byte{
	// 779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xc7, 0xed, 0xa8, 0x4d, 0xe3, 0xe3, 0x7c, 0xba, 0x69, 0x6e, 0x5a, 0xf5, 0x26, 0xbd, 0xb9,
	0x9b, 0xde, 0xe8, 0x2a, 0xf7, 0xca, 0xe9, 0xaa, 0x0b, 0x44, 0x23, 0x21, 0x6c, 0xb5, 0x42, 0x91,
	0x8b, 0x10, 0xb0, 0xc0, 0x0a, 0xf1, 0xb8, 0x19, 0xc5, 0xb5, 0xcd, 0x38, 0x49, 0x1b, 0xb1, 0x60,
	0xc5, 0x06, 0x89, 0x3d, 0x88, 0x17, 0x62, 0x07, 0x4f, 0x50, 0xa1, 0xf2, 0x06, 0x7d, 0x02, 0x34,
	0xfe, 0xb6, 0x13, 0xab, 0xac, 0x12, 0x9d, 0xf3, 0xff, 0x9f, 0xf3, 0x9b, 0x99, 0x33, 0x63, 0x28,
	0x4c, 0x27, 0x3d, 0x9b, 0x58, 0x33, 0x4b, 0xc8, 0x4d, 0x27, 0x7b, 0xfc, 0x6c, 0x69, 0x23, 0xc7,
	0x0b, 0x74, 0xbe, 0xb0, 0xd0, 0x3c, 0x47, 0xe3, 0x39, 0xc1, 0xb3, 0xe5, 0x90, 0x58, 0x3a, 0x36,
	0xd0, 0x29, 0x5a, 0x4a, 0x23, 0x53, 0x33, 0x90, 0x20, 0x02, 0xd8, 0x5e, 0x4c, 0xc5, 0x5a, 0x93,
	0x3d, 0x60, 0x0f, 0x4b, 0x83, 0xda, 0xdd, 0x4d, 0xbb, 0xb4, 0x40, 0x26, 0x1e, 0xa3, 0xe3, 0xb9,
	0x89, 0xdf, 0xcc, 0x91, 0xc4, 0x28, 0x9c, 0x2f, 0x93, 0x35, 0xe1, 0x18, 0xca, 0x81, 0x67, 0xe2,
	0x56, 0x69, 0xe6, 0x0e, 0xd8, 0xc3, 0x7c, 0xc2, 0xe7, 0x25, 0x24, 0x46, 0x29, 0xf9, 0x52, 0xaf,
	0xdf, 0xa0, 0x02, 0xa5, 0x29, 0x5a, 0xaa, 0x16, 0xf1, 0xad, 0x9d, 0x77, 0x50, 0x7c, 0x46, 0xf4,
	0x08, 0xa8, 0x0b, 0xf9, 0x05, 0xd1, 0x03, 0x98, 0x8d, 0xf5, 0x30, 0x9b, 0x0b, 0xa2, 0xcb, 0x1a,
	0x85, 0xa7, 0xda, 0xfb, 0x21, 0xb8, 0x05, 0xd1, 0xb3, 0x00, 0xde, 0xb3, 0x50, 0x7d, 0x82, 0x66,
	0x57, 0x16, 0x99, 0x46, 0x14, 0x3d, 0xe0, 0xb0, 0xad, 0xda, 0x04, 0xe9, 0xf8, 0xda, 0x05, 0xe1,
	0xc5, 0x4a, 0xcf, 0xdb, 0x54, 0x79, 0x38, 0x74, 0xc3, 0x12, 0xa3, 0x14, 0xb0, 0xed, 0xfd, 0x17,
	0xfe, 0x07, 0xce, 0xbc, 0xfa, 0x0d, 0x90, 0x82, 0x79, 0x95, 0xc5, 0xf1, 0x99, 0x05, 0xe1, 0x4c,
	0x3c, 0x47, 0x17, 0x97, 0xc8, 0x9c, 0x25, 0x0e, 0xc8, 0xf1, 0x62, 0xf7, 0xec, 0x09, 0xe7, 0xcb,
	0x64, 0x4d, 0x78, 0x00, 0x55, 0x43, 0x0c, 0x5c, 0xf7, 0x43, 0x55, 0x42, 0x71, 0x16, 0xdb, 0x47,
	0x16, 0x76, 0x82, 0x11, 0x52, 0xe6, 0xf1, 0xf9, 0xe9, 0x42, 0xd5, 0xf1, 0x13, 0x2a, 0x99, 0x47,
	0x53, 0xb4, 0x21, 0x31, 0x4a, 0xd9, 0x89, 0x59, 0xdc, 0xe3, 0xaa, 0x27, 0xb5, 0x71, 0x34, 0x89,
	0x51, 0x84, 0xb8, 0xde, 0x47, 0xa9, 0x83, 0xe0, 0x4a, 0x93, 0x3c, 0xd7, 0x11, 0xce, 0x63, 0x62,
	0xcd, 0xed, 0xa1, 0x65, 0xe0, 0xf1, 0x52, 0xd6, 0x84, 0x2e, 0xd4, 0xc2, 0x16, 0x17, 0x34, 0x13,
	0xf2, 0x28, 0x15, 0x27, 0xee, 0x90, 0x35, 0xa1, 0x0f, 0x0d, 0x1b, 0x21, 0xa2, 0xae, 0x1a, 0x72,
	0xae, 0x61, 0x9b, 0x66, 0xcf, 0x93, 0xa6, 0xce, 0x37, 0x16, 0xf6, 0xd7, 0xb4, 0x8e, 0x36, 0xe4,
	0x29, 0x34, 0x53, 0x05, 0x6d, 0x57, 0x11, 0x80, 0xf0, 0xe2, 0x6e, 0x6f, 0x3a, 0xe9, 0xad, 0xc5,
	0x97, 0x18, 0x65, 0xc7, 0x59, 0xbb, 0xae, 0x13, 0xd8, 0x5f, 0x5f, 0x35, 0xb5, 0x85, 0xbb, 0x6b,
	0xec, 0xfe, 0x4e, 0x36, 0xa0, 0xee, 0x7b, 0x56, 0xce, 0xb6, 0x91, 0xa0, 0x89, 0xd6, 0xf2, 0x6f,
	0xe6, 0x6e, 0xd2, 0xa9, 0x49, 0xef, 0xe7, 0x11, 0xec, 0xa4, 0xd4, 0x29, 0xb8, 0xed, 0x84, 0x23,
	0x6b, 0xd6, 0x5e, 0x41, 0x69, 0x68, 0x91, 0xd8, 0x0d, 0xd8, 0x85, 0x2d, 0xdb, 0x22, 0xe1, 0xf8,
	0x6f, 0x49, 0x8c, 0x92, 0xa7, 0x01, 0x59, 0x13, 0xfe, 0x02, 0xde, 0x4d, 0xa5, 0x1a, 0x01, 0x0d,
	0x66, 0xd5, 0x7f, 0x01, 0xc5, 0x33, 0x1c, 0x7b, 0x70, 0xfe, 0x80, 0xbc, 0x81, 0xf5, 0x78, 0xf5,
	0x4d, 0x03, 0xd3, 0xd7, 0xa5, 0x0d, 0x40, 0x13, 0xa9, 0xda, 0x9c, 0x81, 0x33, 0x9f, 0x12, 0x0c,
	0x82, 0x6c, 0xce, 0x10, 0xd1, 0x47, 0xe3, 0xd8, 0x15, 0xf9, 0x1b, 0x8a, 0x38, 0x88, 0x06, 0x6d,
	0x68, 0x25, 0x3e, 0x8c, 0xca, 0x9a, 0xf0, 0x27, 0x70, 0xab, 0xbd, 0x0a, 0xd9, 0xad, 0x3e, 0xb0,
	0x50, 0x7a, 0x64, 0x6a, 0xb6, 0x85, 0xcd, 0xd9, 0x99, 0x78, 0x8a, 0x96, 0xc2, 0x73, 0xa8, 0x47,
	0x97, 0x9e, 0x8a, 0xfd, 0x62, 0xde, 0xd0, 0x35, 0xe8, 0xd0, 0xad, 0x3e, 0x2f, 0x83, 0xf2, 0xdd,
	0x4d, 0x1b, 0xfc, 0x07, 0x81, 0x20, 0x5d, 0x11, 0xc2, 0x1a, 0xd1, 0x02, 0xda, 0xc0, 0x5f, 0x8e,
	0xc6, 0xea, 0x48, 0xd3, 0x08, 0x72, 0x1c, 0xff, 0x76, 0xc0, 0xe5, 0x68, 0x7c, 0xe2, 0x45, 0x3a,
	0x0f, 0x63, 0x2c, 0x7d, 0xca, 0xf2, 0x1f, 0x00, 0xb6, 0x43, 0x83, 0x47, 0x50, 0x0d, 0xdf, 0x4f,
	0xdf, 0xa6, 0x70, 0xd8, 0x0e, 0x2a, 0xbc, 0x05, 0x3e, 0xa8, 0x40, 0xfd, 0x5d, 0xc8, 0x1b, 0x22,
	0x5d, 0x84, 0xef, 0xad, 0x51, 0xfa, 0xc4, 0x72, 0xdd, 0x63, 0x12, 0x03, 0x6d, 0xdf, 0xd5, 0xe6,
	0xd6, 0x68, 0xfb, 0x81, 0x96, 0xfe, 0xa1, 0xaf, 0x09, 0xf2, 0x33, 0xaa, 0x21, 0xaa, 0x9e, 0x8f,
	0x7e, 0x01, 0x6a, 0xb1, 0xee, 0xfe, 0xaa, 0x8f, 0xa0, 0x18, 0x6a, 0x23, 0x92, 0x4a, 0xbc, 0xba,
	0x57, 0x9b, 0x47, 0x31, 0xf2, 0x7f, 0xa0, 0x12, 0xba, 0x52, 0xa7, 0x59, 0x0e, 0x12, 0x19, 0x67,
	0x3a, 0xd8, 0xfb, 0x7a, 0xdb, 0x62, 0xbf, 0xdf, 0xb6, 0xd8, 0x1f, 0xb7, 0x2d, 0xf6, 0xd3, 0xcf,
	0x16, 0xf3, 0xb2, 0x30, 0x19, 0x19, 0xee, 0x47, 0xfc, 0x75, 0xde, 0xfd, 0xe9, 0xff, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x9a, 0xd8, 0xcb, 0xcb, 0xe8, 0x07, 0x00, 0x00,
}
