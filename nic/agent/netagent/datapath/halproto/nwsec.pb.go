// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/nwsec.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// normalization feature actions upon detecting malformed packets
type NormalizationAction int32

const (
	NormalizationAction_NORM_ACTION_NONE  NormalizationAction = 0
	NormalizationAction_NORM_ACTION_ALLOW NormalizationAction = 1
	NormalizationAction_NORM_ACTION_DROP  NormalizationAction = 2
	NormalizationAction_NORM_ACTION_EDIT  NormalizationAction = 3
)

var NormalizationAction_name = map[int32]string{
	0: "NORM_ACTION_NONE",
	1: "NORM_ACTION_ALLOW",
	2: "NORM_ACTION_DROP",
	3: "NORM_ACTION_EDIT",
}
var NormalizationAction_value = map[string]int32{
	"NORM_ACTION_NONE":  0,
	"NORM_ACTION_ALLOW": 1,
	"NORM_ACTION_DROP":  2,
	"NORM_ACTION_EDIT":  3,
}

func (x NormalizationAction) String() string {
	return proto.EnumName(NormalizationAction_name, int32(x))
}
func (NormalizationAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

// Firewall policy actions
type FirewallAction int32

const (
	FirewallAction_FIREWALL_ACTION_NONE   FirewallAction = 0
	FirewallAction_FIREWALL_ACTION_ALLOW  FirewallAction = 1
	FirewallAction_FIREWALL_ACTION_DENY   FirewallAction = 2
	FirewallAction_FIREWALL_ACTION_REJECT FirewallAction = 3
)

var FirewallAction_name = map[int32]string{
	0: "FIREWALL_ACTION_NONE",
	1: "FIREWALL_ACTION_ALLOW",
	2: "FIREWALL_ACTION_DENY",
	3: "FIREWALL_ACTION_REJECT",
}
var FirewallAction_value = map[string]int32{
	"FIREWALL_ACTION_NONE":   0,
	"FIREWALL_ACTION_ALLOW":  1,
	"FIREWALL_ACTION_DENY":   2,
	"FIREWALL_ACTION_REJECT": 3,
}

func (x FirewallAction) String() string {
	return proto.EnumName(FirewallAction_name, int32(x))
}
func (FirewallAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

// Applicaion Layer Gateway (ALG) names for invoking appropriate ALG
type ALGName int32

const (
	ALGName_APP_SVC_NONE ALGName = 0
	ALGName_APP_SVC_TFTP ALGName = 1
	ALGName_APP_SVC_FTP  ALGName = 2
	ALGName_APP_SVC_DNS  ALGName = 3
	ALGName_APP_SVC_SIP  ALGName = 4
)

var ALGName_name = map[int32]string{
	0: "APP_SVC_NONE",
	1: "APP_SVC_TFTP",
	2: "APP_SVC_FTP",
	3: "APP_SVC_DNS",
	4: "APP_SVC_SIP",
}
var ALGName_value = map[string]int32{
	"APP_SVC_NONE": 0,
	"APP_SVC_TFTP": 1,
	"APP_SVC_FTP":  2,
	"APP_SVC_DNS":  3,
	"APP_SVC_SIP":  4,
}

func (x ALGName) String() string {
	return proto.EnumName(ALGName_name, int32(x))
}
func (ALGName) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

// SecurityProfileKeyHandle is used to operate on a security profile
// either by its id or HAL allocated handle
type SecurityProfileKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*SecurityProfileKeyHandle_ProfileId
	//	*SecurityProfileKeyHandle_ProfileHandle
	KeyOrHandle isSecurityProfileKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *SecurityProfileKeyHandle) Reset()                    { *m = SecurityProfileKeyHandle{} }
func (m *SecurityProfileKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileKeyHandle) ProtoMessage()               {}
func (*SecurityProfileKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type isSecurityProfileKeyHandle_KeyOrHandle interface {
	isSecurityProfileKeyHandle_KeyOrHandle()
}

type SecurityProfileKeyHandle_ProfileId struct {
	ProfileId uint32 `protobuf:"varint,1,opt,name=profile_id,json=profileId,oneof"`
}
type SecurityProfileKeyHandle_ProfileHandle struct {
	ProfileHandle uint64 `protobuf:"fixed64,2,opt,name=profile_handle,json=profileHandle,oneof"`
}

func (*SecurityProfileKeyHandle_ProfileId) isSecurityProfileKeyHandle_KeyOrHandle()     {}
func (*SecurityProfileKeyHandle_ProfileHandle) isSecurityProfileKeyHandle_KeyOrHandle() {}

func (m *SecurityProfileKeyHandle) GetKeyOrHandle() isSecurityProfileKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityProfileKeyHandle) GetProfileId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*SecurityProfileKeyHandle_ProfileId); ok {
		return x.ProfileId
	}
	return 0
}

func (m *SecurityProfileKeyHandle) GetProfileHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*SecurityProfileKeyHandle_ProfileHandle); ok {
		return x.ProfileHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecurityProfileKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecurityProfileKeyHandle_OneofMarshaler, _SecurityProfileKeyHandle_OneofUnmarshaler, _SecurityProfileKeyHandle_OneofSizer, []interface{}{
		(*SecurityProfileKeyHandle_ProfileId)(nil),
		(*SecurityProfileKeyHandle_ProfileHandle)(nil),
	}
}

func _SecurityProfileKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecurityProfileKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityProfileKeyHandle_ProfileId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ProfileId))
	case *SecurityProfileKeyHandle_ProfileHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.ProfileHandle))
	case nil:
	default:
		return fmt.Errorf("SecurityProfileKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _SecurityProfileKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecurityProfileKeyHandle)
	switch tag {
	case 1: // key_or_handle.profile_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &SecurityProfileKeyHandle_ProfileId{uint32(x)}
		return true, err
	case 2: // key_or_handle.profile_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &SecurityProfileKeyHandle_ProfileHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _SecurityProfileKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecurityProfileKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityProfileKeyHandle_ProfileId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProfileId))
	case *SecurityProfileKeyHandle_ProfileHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SecurityProfileSpec object captures feature knobs that are most likely
// shareable across L2 segments, tenants, or even interfaces and most of the
// time operates on defaults. It is possible that there is only object of this
// kind in the system.
// NOTE: user is not expected to fill in all the fields explicitly, that job is
//       done by the agent. Agent will be exposing user visible knobs and fill
//       in the defaults when interacting with HAL.
type SecurityProfileSpec struct {
	Meta                *ObjectMeta               `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle         *SecurityProfileKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	CnxnTrackingEn      bool                      `protobuf:"varint,3,opt,name=cnxn_tracking_en,json=cnxnTrackingEn" json:"cnxn_tracking_en,omitempty"`
	IpsgEn              bool                      `protobuf:"varint,4,opt,name=ipsg_en,json=ipsgEn" json:"ipsg_en,omitempty"`
	TcpRttEstimateEn    bool                      `protobuf:"varint,5,opt,name=tcp_rtt_estimate_en,json=tcpRttEstimateEn" json:"tcp_rtt_estimate_en,omitempty"`
	SessionIdleTimeout  uint32                    `protobuf:"varint,6,opt,name=session_idle_timeout,json=sessionIdleTimeout" json:"session_idle_timeout,omitempty"`
	TcpCnxnSetupTimeout uint32                    `protobuf:"varint,7,opt,name=tcp_cnxn_setup_timeout,json=tcpCnxnSetupTimeout" json:"tcp_cnxn_setup_timeout,omitempty"`
	TcpCloseTimeout     uint32                    `protobuf:"varint,8,opt,name=tcp_close_timeout,json=tcpCloseTimeout" json:"tcp_close_timeout,omitempty"`
	TcpCloseWaitTimeout uint32                    `protobuf:"varint,9,opt,name=tcp_close_wait_timeout,json=tcpCloseWaitTimeout" json:"tcp_close_wait_timeout,omitempty"`
	IpNormalizationEn   bool                      `protobuf:"varint,10,opt,name=ip_normalization_en,json=ipNormalizationEn" json:"ip_normalization_en,omitempty"`
	TcpNormalizationEn  bool                      `protobuf:"varint,11,opt,name=tcp_normalization_en,json=tcpNormalizationEn" json:"tcp_normalization_en,omitempty"`
	IcmpNormalizationEn bool                      `protobuf:"varint,12,opt,name=icmp_normalization_en,json=icmpNormalizationEn" json:"icmp_normalization_en,omitempty"`
	// IP normalization knobs
	IpTtlChangeDetectEn bool                `protobuf:"varint,20,opt,name=ip_ttl_change_detect_en,json=ipTtlChangeDetectEn" json:"ip_ttl_change_detect_en,omitempty"`
	IpRsvdFlagsAction   NormalizationAction `protobuf:"varint,21,opt,name=ip_rsvd_flags_action,json=ipRsvdFlagsAction,enum=nwsec.NormalizationAction" json:"ip_rsvd_flags_action,omitempty"`
	IpDfAction          NormalizationAction `protobuf:"varint,22,opt,name=ip_df_action,json=ipDfAction,enum=nwsec.NormalizationAction" json:"ip_df_action,omitempty"`
	IpOptionsAction     NormalizationAction `protobuf:"varint,23,opt,name=ip_options_action,json=ipOptionsAction,enum=nwsec.NormalizationAction" json:"ip_options_action,omitempty"`
	IpInvalidLenAction  NormalizationAction `protobuf:"varint,24,opt,name=ip_invalid_len_action,json=ipInvalidLenAction,enum=nwsec.NormalizationAction" json:"ip_invalid_len_action,omitempty"`
	IpNormalizeTtl      uint32              `protobuf:"varint,25,opt,name=ip_normalize_ttl,json=ipNormalizeTtl" json:"ip_normalize_ttl,omitempty"`
	// ICMP/ICMPv6 normalization knobs
	IcmpInvalidCodeAction  NormalizationAction `protobuf:"varint,30,opt,name=icmp_invalid_code_action,json=icmpInvalidCodeAction,enum=nwsec.NormalizationAction" json:"icmp_invalid_code_action,omitempty"`
	IcmpDeprecatedMsgsDrop bool                `protobuf:"varint,31,opt,name=icmp_deprecated_msgs_drop,json=icmpDeprecatedMsgsDrop" json:"icmp_deprecated_msgs_drop,omitempty"`
	IcmpRedirectMsgDrop    bool                `protobuf:"varint,32,opt,name=icmp_redirect_msg_drop,json=icmpRedirectMsgDrop" json:"icmp_redirect_msg_drop,omitempty"`
	// TCP normalization knobs
	TcpNonSynFirstPktDrop       bool                `protobuf:"varint,40,opt,name=tcp_non_syn_first_pkt_drop,json=tcpNonSynFirstPktDrop" json:"tcp_non_syn_first_pkt_drop,omitempty"`
	TcpSyncookieEn              bool                `protobuf:"varint,41,opt,name=tcp_syncookie_en,json=tcpSyncookieEn" json:"tcp_syncookie_en,omitempty"`
	TcpSplitHandshakeDetectEn   bool                `protobuf:"varint,42,opt,name=tcp_split_handshake_detect_en,json=tcpSplitHandshakeDetectEn" json:"tcp_split_handshake_detect_en,omitempty"`
	TcpSplitHandshakeDrop       bool                `protobuf:"varint,43,opt,name=tcp_split_handshake_drop,json=tcpSplitHandshakeDrop" json:"tcp_split_handshake_drop,omitempty"`
	TcpRsvdFlagsAction          NormalizationAction `protobuf:"varint,44,opt,name=tcp_rsvd_flags_action,json=tcpRsvdFlagsAction,enum=nwsec.NormalizationAction" json:"tcp_rsvd_flags_action,omitempty"`
	TcpUnexpectedMssAction      NormalizationAction `protobuf:"varint,45,opt,name=tcp_unexpected_mss_action,json=tcpUnexpectedMssAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_mss_action,omitempty"`
	TcpUnexpectedWinScaleAction NormalizationAction `protobuf:"varint,46,opt,name=tcp_unexpected_win_scale_action,json=tcpUnexpectedWinScaleAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_win_scale_action,omitempty"`
	TcpUrgPtrNotSetAction       NormalizationAction `protobuf:"varint,47,opt,name=tcp_urg_ptr_not_set_action,json=tcpUrgPtrNotSetAction,enum=nwsec.NormalizationAction" json:"tcp_urg_ptr_not_set_action,omitempty"`
	TcpUrgFlagNotSetAction      NormalizationAction `protobuf:"varint,48,opt,name=tcp_urg_flag_not_set_action,json=tcpUrgFlagNotSetAction,enum=nwsec.NormalizationAction" json:"tcp_urg_flag_not_set_action,omitempty"`
	TcpUrgPayloadMissingAction  NormalizationAction `protobuf:"varint,49,opt,name=tcp_urg_payload_missing_action,json=tcpUrgPayloadMissingAction,enum=nwsec.NormalizationAction" json:"tcp_urg_payload_missing_action,omitempty"`
	TcpRstWithDataAction        NormalizationAction `protobuf:"varint,50,opt,name=tcp_rst_with_data_action,json=tcpRstWithDataAction,enum=nwsec.NormalizationAction" json:"tcp_rst_with_data_action,omitempty"`
	TcpDataLenGtMssAction       NormalizationAction `protobuf:"varint,51,opt,name=tcp_data_len_gt_mss_action,json=tcpDataLenGtMssAction,enum=nwsec.NormalizationAction" json:"tcp_data_len_gt_mss_action,omitempty"`
	TcpDataLenGtWinSizeAction   NormalizationAction `protobuf:"varint,52,opt,name=tcp_data_len_gt_win_size_action,json=tcpDataLenGtWinSizeAction,enum=nwsec.NormalizationAction" json:"tcp_data_len_gt_win_size_action,omitempty"`
	TcpUnexpectedTsOptionAction NormalizationAction `protobuf:"varint,53,opt,name=tcp_unexpected_ts_option_action,json=tcpUnexpectedTsOptionAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_ts_option_action,omitempty"`
	TcpUnexpectedEchoTsAction   NormalizationAction `protobuf:"varint,54,opt,name=tcp_unexpected_echo_ts_action,json=tcpUnexpectedEchoTsAction,enum=nwsec.NormalizationAction" json:"tcp_unexpected_echo_ts_action,omitempty"`
	TcpTsNotPresentDrop         bool                `protobuf:"varint,55,opt,name=tcp_ts_not_present_drop,json=tcpTsNotPresentDrop" json:"tcp_ts_not_present_drop,omitempty"`
	TcpInvalidFlagsDrop         bool                `protobuf:"varint,56,opt,name=tcp_invalid_flags_drop,json=tcpInvalidFlagsDrop" json:"tcp_invalid_flags_drop,omitempty"`
	TcpNonsynNoackDrop          bool                `protobuf:"varint,57,opt,name=tcp_nonsyn_noack_drop,json=tcpNonsynNoackDrop" json:"tcp_nonsyn_noack_drop,omitempty"`
}

func (m *SecurityProfileSpec) Reset()                    { *m = SecurityProfileSpec{} }
func (m *SecurityProfileSpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileSpec) ProtoMessage()               {}
func (*SecurityProfileSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

func (m *SecurityProfileSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityProfileSpec) GetKeyOrHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityProfileSpec) GetCnxnTrackingEn() bool {
	if m != nil {
		return m.CnxnTrackingEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpsgEn() bool {
	if m != nil {
		return m.IpsgEn
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpRttEstimateEn() bool {
	if m != nil {
		return m.TcpRttEstimateEn
	}
	return false
}

func (m *SecurityProfileSpec) GetSessionIdleTimeout() uint32 {
	if m != nil {
		return m.SessionIdleTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpCnxnSetupTimeout() uint32 {
	if m != nil {
		return m.TcpCnxnSetupTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpCloseTimeout() uint32 {
	if m != nil {
		return m.TcpCloseTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetTcpCloseWaitTimeout() uint32 {
	if m != nil {
		return m.TcpCloseWaitTimeout
	}
	return 0
}

func (m *SecurityProfileSpec) GetIpNormalizationEn() bool {
	if m != nil {
		return m.IpNormalizationEn
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpNormalizationEn() bool {
	if m != nil {
		return m.TcpNormalizationEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpNormalizationEn() bool {
	if m != nil {
		return m.IcmpNormalizationEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpTtlChangeDetectEn() bool {
	if m != nil {
		return m.IpTtlChangeDetectEn
	}
	return false
}

func (m *SecurityProfileSpec) GetIpRsvdFlagsAction() NormalizationAction {
	if m != nil {
		return m.IpRsvdFlagsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpDfAction() NormalizationAction {
	if m != nil {
		return m.IpDfAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpOptionsAction() NormalizationAction {
	if m != nil {
		return m.IpOptionsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpInvalidLenAction() NormalizationAction {
	if m != nil {
		return m.IpInvalidLenAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIpNormalizeTtl() uint32 {
	if m != nil {
		return m.IpNormalizeTtl
	}
	return 0
}

func (m *SecurityProfileSpec) GetIcmpInvalidCodeAction() NormalizationAction {
	if m != nil {
		return m.IcmpInvalidCodeAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetIcmpDeprecatedMsgsDrop() bool {
	if m != nil {
		return m.IcmpDeprecatedMsgsDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetIcmpRedirectMsgDrop() bool {
	if m != nil {
		return m.IcmpRedirectMsgDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpNonSynFirstPktDrop() bool {
	if m != nil {
		return m.TcpNonSynFirstPktDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpSyncookieEn() bool {
	if m != nil {
		return m.TcpSyncookieEn
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpSplitHandshakeDetectEn() bool {
	if m != nil {
		return m.TcpSplitHandshakeDetectEn
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpSplitHandshakeDrop() bool {
	if m != nil {
		return m.TcpSplitHandshakeDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpRsvdFlagsAction() NormalizationAction {
	if m != nil {
		return m.TcpRsvdFlagsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedMssAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedMssAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedWinScaleAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedWinScaleAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUrgPtrNotSetAction() NormalizationAction {
	if m != nil {
		return m.TcpUrgPtrNotSetAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUrgFlagNotSetAction() NormalizationAction {
	if m != nil {
		return m.TcpUrgFlagNotSetAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUrgPayloadMissingAction() NormalizationAction {
	if m != nil {
		return m.TcpUrgPayloadMissingAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpRstWithDataAction() NormalizationAction {
	if m != nil {
		return m.TcpRstWithDataAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpDataLenGtMssAction() NormalizationAction {
	if m != nil {
		return m.TcpDataLenGtMssAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpDataLenGtWinSizeAction() NormalizationAction {
	if m != nil {
		return m.TcpDataLenGtWinSizeAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedTsOptionAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedTsOptionAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpUnexpectedEchoTsAction() NormalizationAction {
	if m != nil {
		return m.TcpUnexpectedEchoTsAction
	}
	return NormalizationAction_NORM_ACTION_NONE
}

func (m *SecurityProfileSpec) GetTcpTsNotPresentDrop() bool {
	if m != nil {
		return m.TcpTsNotPresentDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpInvalidFlagsDrop() bool {
	if m != nil {
		return m.TcpInvalidFlagsDrop
	}
	return false
}

func (m *SecurityProfileSpec) GetTcpNonsynNoackDrop() bool {
	if m != nil {
		return m.TcpNonsynNoackDrop
	}
	return false
}

// SecurityProfileRequestMsg is batched add or modify profile request
type SecurityProfileRequestMsg struct {
	Request []*SecurityProfileSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityProfileRequestMsg) Reset()                    { *m = SecurityProfileRequestMsg{} }
func (m *SecurityProfileRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileRequestMsg) ProtoMessage()               {}
func (*SecurityProfileRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

func (m *SecurityProfileRequestMsg) GetRequest() []*SecurityProfileSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityProfile operational status
type SecurityProfileStatus struct {
	ProfileHandle uint64 `protobuf:"fixed64,1,opt,name=profile_handle,json=profileHandle" json:"profile_handle,omitempty"`
}

func (m *SecurityProfileStatus) Reset()                    { *m = SecurityProfileStatus{} }
func (m *SecurityProfileStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileStatus) ProtoMessage()               {}
func (*SecurityProfileStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

func (m *SecurityProfileStatus) GetProfileHandle() uint64 {
	if m != nil {
		return m.ProfileHandle
	}
	return 0
}

// SecurityProfileResponse is response to SecurityProfileSpec
type SecurityProfileResponse struct {
	ApiStatus     ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProfileStatus *SecurityProfileStatus `protobuf:"bytes,2,opt,name=profile_status,json=profileStatus" json:"profile_status,omitempty"`
}

func (m *SecurityProfileResponse) Reset()                    { *m = SecurityProfileResponse{} }
func (m *SecurityProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileResponse) ProtoMessage()               {}
func (*SecurityProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *SecurityProfileResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityProfileResponse) GetProfileStatus() *SecurityProfileStatus {
	if m != nil {
		return m.ProfileStatus
	}
	return nil
}

// SecurityProfileResponseMsg is batched response to SecurityProfileRequestMsg
type SecurityProfileResponseMsg struct {
	Response []*SecurityProfileResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityProfileResponseMsg) Reset()                    { *m = SecurityProfileResponseMsg{} }
func (m *SecurityProfileResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileResponseMsg) ProtoMessage()               {}
func (*SecurityProfileResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

func (m *SecurityProfileResponseMsg) GetResponse() []*SecurityProfileResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityProfileDeleteRequest is used to delete a SecurityProfile profile
type SecurityProfileDeleteRequest struct {
	Meta        *ObjectMeta               `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *SecurityProfileKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityProfileDeleteRequest) Reset()                    { *m = SecurityProfileDeleteRequest{} }
func (m *SecurityProfileDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteRequest) ProtoMessage()               {}
func (*SecurityProfileDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

func (m *SecurityProfileDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityProfileDeleteRequest) GetKeyOrHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityProfileDeleteRequestMsg is used to delete a batch of SecurityProfile profiles
type SecurityProfileDeleteRequestMsg struct {
	Request []*SecurityProfileDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityProfileDeleteRequestMsg) Reset()         { *m = SecurityProfileDeleteRequestMsg{} }
func (m *SecurityProfileDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteRequestMsg) ProtoMessage()    {}
func (*SecurityProfileDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{7}
}

func (m *SecurityProfileDeleteRequestMsg) GetRequest() []*SecurityProfileDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityProfileDeleteResponseMsg is batched response to SecurityProfileDeleteRequestMsg
type SecurityProfileDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SecurityProfileDeleteResponseMsg) Reset()         { *m = SecurityProfileDeleteResponseMsg{} }
func (m *SecurityProfileDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityProfileDeleteResponseMsg) ProtoMessage()    {}
func (*SecurityProfileDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{8}
}

func (m *SecurityProfileDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// SecurityProfileGetRequest is used to get information about a L2 Segment
type SecurityProfileGetRequest struct {
	Meta        *ObjectMeta               `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *SecurityProfileKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityProfileGetRequest) Reset()                    { *m = SecurityProfileGetRequest{} }
func (m *SecurityProfileGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetRequest) ProtoMessage()               {}
func (*SecurityProfileGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{9} }

func (m *SecurityProfileGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityProfileGetRequest) GetKeyOrHandle() *SecurityProfileKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityProfileGetRequestMsg is batched GET request for SecurityProfile profiles
type SecurityProfileGetRequestMsg struct {
	Request []*SecurityProfileGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityProfileGetRequestMsg) Reset()                    { *m = SecurityProfileGetRequestMsg{} }
func (m *SecurityProfileGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetRequestMsg) ProtoMessage()               {}
func (*SecurityProfileGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{10} }

func (m *SecurityProfileGetRequestMsg) GetRequest() []*SecurityProfileGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityProfileStats is the statistics object for each SecurityProfile profile
type SecurityProfileStats struct {
}

func (m *SecurityProfileStats) Reset()                    { *m = SecurityProfileStats{} }
func (m *SecurityProfileStats) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileStats) ProtoMessage()               {}
func (*SecurityProfileStats) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{11} }

// SecurityProfileGetResponse captures all the information about a SecurityProfile profile
type SecurityProfileGetResponse struct {
	ApiStatus ApiStatus              `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *SecurityProfileSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SecurityProfileStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SecurityProfileStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SecurityProfileGetResponse) Reset()                    { *m = SecurityProfileGetResponse{} }
func (m *SecurityProfileGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetResponse) ProtoMessage()               {}
func (*SecurityProfileGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{12} }

func (m *SecurityProfileGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityProfileGetResponse) GetSpec() *SecurityProfileSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SecurityProfileGetResponse) GetStatus() *SecurityProfileStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecurityProfileGetResponse) GetStats() *SecurityProfileStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SecurityProfileGetResponseMsg is the batched response to SecurityProfileGetRequestMsg
type SecurityProfileGetResponseMsg struct {
	Response []*SecurityProfileGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityProfileGetResponseMsg) Reset()                    { *m = SecurityProfileGetResponseMsg{} }
func (m *SecurityProfileGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityProfileGetResponseMsg) ProtoMessage()               {}
func (*SecurityProfileGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{13} }

func (m *SecurityProfileGetResponseMsg) GetResponse() []*SecurityProfileGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Service object identifies an app defined by IP protocol and TCP/UDP port
// in most cases. This object also can specify blanket apps like all TCP or
// UDP traffic, all IP traffic, ICMP type/code combinations etc.
type Service struct {
	IpProtocol IPProtocol `protobuf:"varint,1,opt,name=ip_protocol,json=ipProtocol,enum=types.IPProtocol" json:"ip_protocol,omitempty"`
	// Types that are valid to be assigned to L4Info:
	//	*Service_DstPort
	//	*Service_IcmpMsgType
	L4Info isService_L4Info `protobuf_oneof:"l4_info"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{14} }

type isService_L4Info interface {
	isService_L4Info()
}

type Service_DstPort struct {
	DstPort uint32 `protobuf:"varint,2,opt,name=dst_port,json=dstPort,oneof"`
}
type Service_IcmpMsgType struct {
	IcmpMsgType ICMPMsgType `protobuf:"varint,3,opt,name=icmp_msg_type,json=icmpMsgType,enum=types.ICMPMsgType,oneof"`
}

func (*Service_DstPort) isService_L4Info()     {}
func (*Service_IcmpMsgType) isService_L4Info() {}

func (m *Service) GetL4Info() isService_L4Info {
	if m != nil {
		return m.L4Info
	}
	return nil
}

func (m *Service) GetIpProtocol() IPProtocol {
	if m != nil {
		return m.IpProtocol
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *Service) GetDstPort() uint32 {
	if x, ok := m.GetL4Info().(*Service_DstPort); ok {
		return x.DstPort
	}
	return 0
}

func (m *Service) GetIcmpMsgType() ICMPMsgType {
	if x, ok := m.GetL4Info().(*Service_IcmpMsgType); ok {
		return x.IcmpMsgType
	}
	return ICMPMsgType_ICMP_MSG_TYPE_NONE
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Service) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Service_OneofMarshaler, _Service_OneofUnmarshaler, _Service_OneofSizer, []interface{}{
		(*Service_DstPort)(nil),
		(*Service_IcmpMsgType)(nil),
	}
}

func _Service_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Service)
	// l4_info
	switch x := m.L4Info.(type) {
	case *Service_DstPort:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.DstPort))
	case *Service_IcmpMsgType:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IcmpMsgType))
	case nil:
	default:
		return fmt.Errorf("Service.L4Info has unexpected type %T", x)
	}
	return nil
}

func _Service_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Service)
	switch tag {
	case 2: // l4_info.dst_port
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.L4Info = &Service_DstPort{uint32(x)}
		return true, err
	case 3: // l4_info.icmp_msg_type
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.L4Info = &Service_IcmpMsgType{ICMPMsgType(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Service_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Service)
	// l4_info
	switch x := m.L4Info.(type) {
	case *Service_DstPort:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.DstPort))
	case *Service_IcmpMsgType:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IcmpMsgType))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ALG object maps a service to one of the supported ALGs
type ALG struct {
	Alg ALGName  `protobuf:"varint,1,opt,name=alg,enum=nwsec.ALGName" json:"alg,omitempty"`
	Svc *Service `protobuf:"bytes,2,opt,name=svc" json:"svc,omitempty"`
}

func (m *ALG) Reset()                    { *m = ALG{} }
func (m *ALG) String() string            { return proto.CompactTextString(m) }
func (*ALG) ProtoMessage()               {}
func (*ALG) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{15} }

func (m *ALG) GetAlg() ALGName {
	if m != nil {
		return m.Alg
	}
	return ALGName_APP_SVC_NONE
}

func (m *ALG) GetSvc() *Service {
	if m != nil {
		return m.Svc
	}
	return nil
}

// FirewallRuleSpec defines a stateful firewall rule that is part of a
// SecurityGroupSpec
type FirewallRuleSpec struct {
	PeerSecurityGroup []uint32 `protobuf:"varint,1,rep,packed,name=peer_security_group,json=peerSecurityGroup" json:"peer_security_group,omitempty"`
	// egress rules, FROM
	// security group for ingress
	// rules
	Svc    []*Service     `protobuf:"bytes,2,rep,name=svc" json:"svc,omitempty"`
	Action FirewallAction `protobuf:"varint,3,opt,name=action,enum=nwsec.FirewallAction" json:"action,omitempty"`
	Log    bool           `protobuf:"varint,4,opt,name=log" json:"log,omitempty"`
}

func (m *FirewallRuleSpec) Reset()                    { *m = FirewallRuleSpec{} }
func (m *FirewallRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*FirewallRuleSpec) ProtoMessage()               {}
func (*FirewallRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{16} }

func (m *FirewallRuleSpec) GetPeerSecurityGroup() []uint32 {
	if m != nil {
		return m.PeerSecurityGroup
	}
	return nil
}

func (m *FirewallRuleSpec) GetSvc() []*Service {
	if m != nil {
		return m.Svc
	}
	return nil
}

func (m *FirewallRuleSpec) GetAction() FirewallAction {
	if m != nil {
		return m.Action
	}
	return FirewallAction_FIREWALL_ACTION_NONE
}

func (m *FirewallRuleSpec) GetLog() bool {
	if m != nil {
		return m.Log
	}
	return false
}

// DoSSessionLimits captures the session limits to be enforced on a security
// group
type DoSSessionLimits struct {
	MaxSessions     uint32 `protobuf:"varint,1,opt,name=max_sessions,json=maxSessions" json:"max_sessions,omitempty"`
	BlockingTimeout uint32 `protobuf:"varint,2,opt,name=blocking_timeout,json=blockingTimeout" json:"blocking_timeout,omitempty"`
}

func (m *DoSSessionLimits) Reset()                    { *m = DoSSessionLimits{} }
func (m *DoSSessionLimits) String() string            { return proto.CompactTextString(m) }
func (*DoSSessionLimits) ProtoMessage()               {}
func (*DoSSessionLimits) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{17} }

func (m *DoSSessionLimits) GetMaxSessions() uint32 {
	if m != nil {
		return m.MaxSessions
	}
	return 0
}

func (m *DoSSessionLimits) GetBlockingTimeout() uint32 {
	if m != nil {
		return m.BlockingTimeout
	}
	return 0
}

// DoSPolicer is aggregate DoS policer object
type DoSPolicer struct {
	BytesPerSecond uint32 `protobuf:"varint,1,opt,name=bytes_per_second,json=bytesPerSecond" json:"bytes_per_second,omitempty"`
	PeakRate       uint32 `protobuf:"varint,2,opt,name=peak_rate,json=peakRate" json:"peak_rate,omitempty"`
	BurstSize      uint32 `protobuf:"varint,3,opt,name=burst_size,json=burstSize" json:"burst_size,omitempty"`
}

func (m *DoSPolicer) Reset()                    { *m = DoSPolicer{} }
func (m *DoSPolicer) String() string            { return proto.CompactTextString(m) }
func (*DoSPolicer) ProtoMessage()               {}
func (*DoSPolicer) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{18} }

func (m *DoSPolicer) GetBytesPerSecond() uint32 {
	if m != nil {
		return m.BytesPerSecond
	}
	return 0
}

func (m *DoSPolicer) GetPeakRate() uint32 {
	if m != nil {
		return m.PeakRate
	}
	return 0
}

func (m *DoSPolicer) GetBurstSize() uint32 {
	if m != nil {
		return m.BurstSize
	}
	return 0
}

// DoSFloodLimits object captures the flood limits configuration
type DoSFloodLimits struct {
	RestrictLimits *DoSFloodLimits_RestrictLimits `protobuf:"bytes,1,opt,name=restrict_limits,json=restrictLimits" json:"restrict_limits,omitempty"`
	ProtectLimits  *DoSFloodLimits_ProtectLimits  `protobuf:"bytes,2,opt,name=protect_limits,json=protectLimits" json:"protect_limits,omitempty"`
}

func (m *DoSFloodLimits) Reset()                    { *m = DoSFloodLimits{} }
func (m *DoSFloodLimits) String() string            { return proto.CompactTextString(m) }
func (*DoSFloodLimits) ProtoMessage()               {}
func (*DoSFloodLimits) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{19} }

func (m *DoSFloodLimits) GetRestrictLimits() *DoSFloodLimits_RestrictLimits {
	if m != nil {
		return m.RestrictLimits
	}
	return nil
}

func (m *DoSFloodLimits) GetProtectLimits() *DoSFloodLimits_ProtectLimits {
	if m != nil {
		return m.ProtectLimits
	}
	return nil
}

// default and only action in restrict phase is Random Early Drop (RED)
type DoSFloodLimits_RestrictLimits struct {
	Pps              uint32 `protobuf:"varint,1,opt,name=pps" json:"pps,omitempty"`
	BurstPps         uint32 `protobuf:"varint,2,opt,name=burst_pps,json=burstPps" json:"burst_pps,omitempty"`
	RestrictInterval uint32 `protobuf:"varint,3,opt,name=restrict_interval,json=restrictInterval" json:"restrict_interval,omitempty"`
}

func (m *DoSFloodLimits_RestrictLimits) Reset()         { *m = DoSFloodLimits_RestrictLimits{} }
func (m *DoSFloodLimits_RestrictLimits) String() string { return proto.CompactTextString(m) }
func (*DoSFloodLimits_RestrictLimits) ProtoMessage()    {}
func (*DoSFloodLimits_RestrictLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{19, 0}
}

func (m *DoSFloodLimits_RestrictLimits) GetPps() uint32 {
	if m != nil {
		return m.Pps
	}
	return 0
}

func (m *DoSFloodLimits_RestrictLimits) GetBurstPps() uint32 {
	if m != nil {
		return m.BurstPps
	}
	return 0
}

func (m *DoSFloodLimits_RestrictLimits) GetRestrictInterval() uint32 {
	if m != nil {
		return m.RestrictInterval
	}
	return 0
}

// default and only action in protection phase is drop
type DoSFloodLimits_ProtectLimits struct {
	Pps              uint32 `protobuf:"varint,1,opt,name=pps" json:"pps,omitempty"`
	BurstPps         uint32 `protobuf:"varint,2,opt,name=burst_pps,json=burstPps" json:"burst_pps,omitempty"`
	RestrictInterval uint32 `protobuf:"varint,3,opt,name=restrict_interval,json=restrictInterval" json:"restrict_interval,omitempty"`
}

func (m *DoSFloodLimits_ProtectLimits) Reset()         { *m = DoSFloodLimits_ProtectLimits{} }
func (m *DoSFloodLimits_ProtectLimits) String() string { return proto.CompactTextString(m) }
func (*DoSFloodLimits_ProtectLimits) ProtoMessage()    {}
func (*DoSFloodLimits_ProtectLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{19, 1}
}

func (m *DoSFloodLimits_ProtectLimits) GetPps() uint32 {
	if m != nil {
		return m.Pps
	}
	return 0
}

func (m *DoSFloodLimits_ProtectLimits) GetBurstPps() uint32 {
	if m != nil {
		return m.BurstPps
	}
	return 0
}

func (m *DoSFloodLimits_ProtectLimits) GetRestrictInterval() uint32 {
	if m != nil {
		return m.RestrictInterval
	}
	return 0
}

// DoSProtectionSpec defines DoS protection policy for a security group
type DoSProtectionSpec struct {
	Svc *Service `protobuf:"bytes,1,opt,name=svc" json:"svc,omitempty"`
	// service for which rest of
	// the DDoS config to be
	// applied on
	SessionSetupRate  uint32            `protobuf:"varint,2,opt,name=session_setup_rate,json=sessionSetupRate" json:"session_setup_rate,omitempty"`
	SessionLimits     *DoSSessionLimits `protobuf:"bytes,3,opt,name=session_limits,json=sessionLimits" json:"session_limits,omitempty"`
	Policer           *DoSPolicer       `protobuf:"bytes,4,opt,name=policer" json:"policer,omitempty"`
	TcpSynFloodLimits *DoSFloodLimits   `protobuf:"bytes,5,opt,name=tcp_syn_flood_limits,json=tcpSynFloodLimits" json:"tcp_syn_flood_limits,omitempty"`
	UdpFloodLimits    *DoSFloodLimits   `protobuf:"bytes,6,opt,name=udp_flood_limits,json=udpFloodLimits" json:"udp_flood_limits,omitempty"`
	IcmpFloodLimits   *DoSFloodLimits   `protobuf:"bytes,7,opt,name=icmp_flood_limits,json=icmpFloodLimits" json:"icmp_flood_limits,omitempty"`
	OtherFloodLimits  *DoSFloodLimits   `protobuf:"bytes,8,opt,name=other_flood_limits,json=otherFloodLimits" json:"other_flood_limits,omitempty"`
}

func (m *DoSProtectionSpec) Reset()                    { *m = DoSProtectionSpec{} }
func (m *DoSProtectionSpec) String() string            { return proto.CompactTextString(m) }
func (*DoSProtectionSpec) ProtoMessage()               {}
func (*DoSProtectionSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{20} }

func (m *DoSProtectionSpec) GetSvc() *Service {
	if m != nil {
		return m.Svc
	}
	return nil
}

func (m *DoSProtectionSpec) GetSessionSetupRate() uint32 {
	if m != nil {
		return m.SessionSetupRate
	}
	return 0
}

func (m *DoSProtectionSpec) GetSessionLimits() *DoSSessionLimits {
	if m != nil {
		return m.SessionLimits
	}
	return nil
}

func (m *DoSProtectionSpec) GetPolicer() *DoSPolicer {
	if m != nil {
		return m.Policer
	}
	return nil
}

func (m *DoSProtectionSpec) GetTcpSynFloodLimits() *DoSFloodLimits {
	if m != nil {
		return m.TcpSynFloodLimits
	}
	return nil
}

func (m *DoSProtectionSpec) GetUdpFloodLimits() *DoSFloodLimits {
	if m != nil {
		return m.UdpFloodLimits
	}
	return nil
}

func (m *DoSProtectionSpec) GetIcmpFloodLimits() *DoSFloodLimits {
	if m != nil {
		return m.IcmpFloodLimits
	}
	return nil
}

func (m *DoSProtectionSpec) GetOtherFloodLimits() *DoSFloodLimits {
	if m != nil {
		return m.OtherFloodLimits
	}
	return nil
}

// ingress policy for the security group
type IngressSGPolicy struct {
	FwRules       []*FirewallRuleSpec `protobuf:"bytes,1,rep,name=fw_rules,json=fwRules" json:"fw_rules,omitempty"`
	DosProtection *DoSProtectionSpec  `protobuf:"bytes,2,opt,name=dos_protection,json=dosProtection" json:"dos_protection,omitempty"`
}

func (m *IngressSGPolicy) Reset()                    { *m = IngressSGPolicy{} }
func (m *IngressSGPolicy) String() string            { return proto.CompactTextString(m) }
func (*IngressSGPolicy) ProtoMessage()               {}
func (*IngressSGPolicy) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{21} }

func (m *IngressSGPolicy) GetFwRules() []*FirewallRuleSpec {
	if m != nil {
		return m.FwRules
	}
	return nil
}

func (m *IngressSGPolicy) GetDosProtection() *DoSProtectionSpec {
	if m != nil {
		return m.DosProtection
	}
	return nil
}

// egress policy for the security group
type EgressSGPolicy struct {
	FwRules       []*FirewallRuleSpec `protobuf:"bytes,1,rep,name=fw_rules,json=fwRules" json:"fw_rules,omitempty"`
	DosProtection *DoSProtectionSpec  `protobuf:"bytes,2,opt,name=dos_protection,json=dosProtection" json:"dos_protection,omitempty"`
}

func (m *EgressSGPolicy) Reset()                    { *m = EgressSGPolicy{} }
func (m *EgressSGPolicy) String() string            { return proto.CompactTextString(m) }
func (*EgressSGPolicy) ProtoMessage()               {}
func (*EgressSGPolicy) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{22} }

func (m *EgressSGPolicy) GetFwRules() []*FirewallRuleSpec {
	if m != nil {
		return m.FwRules
	}
	return nil
}

func (m *EgressSGPolicy) GetDosProtection() *DoSProtectionSpec {
	if m != nil {
		return m.DosProtection
	}
	return nil
}

// SecurityGroupKeyHandle uniquely identifies a security group and is used
// to create/update/delete/get security groups
type SecurityGroupKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*SecurityGroupKeyHandle_SecurityGroupId
	//	*SecurityGroupKeyHandle_SecurityGroupHandle
	KeyOrHandle isSecurityGroupKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *SecurityGroupKeyHandle) Reset()                    { *m = SecurityGroupKeyHandle{} }
func (m *SecurityGroupKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupKeyHandle) ProtoMessage()               {}
func (*SecurityGroupKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{23} }

type isSecurityGroupKeyHandle_KeyOrHandle interface {
	isSecurityGroupKeyHandle_KeyOrHandle()
}

type SecurityGroupKeyHandle_SecurityGroupId struct {
	SecurityGroupId uint32 `protobuf:"varint,1,opt,name=security_group_id,json=securityGroupId,oneof"`
}
type SecurityGroupKeyHandle_SecurityGroupHandle struct {
	SecurityGroupHandle uint64 `protobuf:"fixed64,2,opt,name=security_group_handle,json=securityGroupHandle,oneof"`
}

func (*SecurityGroupKeyHandle_SecurityGroupId) isSecurityGroupKeyHandle_KeyOrHandle()     {}
func (*SecurityGroupKeyHandle_SecurityGroupHandle) isSecurityGroupKeyHandle_KeyOrHandle() {}

func (m *SecurityGroupKeyHandle) GetKeyOrHandle() isSecurityGroupKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityGroupKeyHandle) GetSecurityGroupId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*SecurityGroupKeyHandle_SecurityGroupId); ok {
		return x.SecurityGroupId
	}
	return 0
}

func (m *SecurityGroupKeyHandle) GetSecurityGroupHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*SecurityGroupKeyHandle_SecurityGroupHandle); ok {
		return x.SecurityGroupHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SecurityGroupKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SecurityGroupKeyHandle_OneofMarshaler, _SecurityGroupKeyHandle_OneofUnmarshaler, _SecurityGroupKeyHandle_OneofSizer, []interface{}{
		(*SecurityGroupKeyHandle_SecurityGroupId)(nil),
		(*SecurityGroupKeyHandle_SecurityGroupHandle)(nil),
	}
}

func _SecurityGroupKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SecurityGroupKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityGroupKeyHandle_SecurityGroupId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.SecurityGroupId))
	case *SecurityGroupKeyHandle_SecurityGroupHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.SecurityGroupHandle))
	case nil:
	default:
		return fmt.Errorf("SecurityGroupKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _SecurityGroupKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SecurityGroupKeyHandle)
	switch tag {
	case 1: // key_or_handle.security_group_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &SecurityGroupKeyHandle_SecurityGroupId{uint32(x)}
		return true, err
	case 2: // key_or_handle.security_group_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &SecurityGroupKeyHandle_SecurityGroupHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _SecurityGroupKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SecurityGroupKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *SecurityGroupKeyHandle_SecurityGroupId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.SecurityGroupId))
	case *SecurityGroupKeyHandle_SecurityGroupHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SecurityGroupSpec captures the policy for a security group (aka. group of
// endpoints or enic interfaces) in both directions from workload's perspective.
// This policy will be attached to enic interface or an endpoint so it applies
// to the traffic from/to that workload. If no match is found for the new
// session in the slow path, either a drop flow will be installed or packet will
// be dropped without creating drop flow
type SecurityGroupSpec struct {
	Meta          *ObjectMeta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle   *SecurityGroupKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	IngressPolicy *IngressSGPolicy        `protobuf:"bytes,3,opt,name=ingress_policy,json=ingressPolicy" json:"ingress_policy,omitempty"`
	EgressPolicy  *EgressSGPolicy         `protobuf:"bytes,4,opt,name=egress_policy,json=egressPolicy" json:"egress_policy,omitempty"`
}

func (m *SecurityGroupSpec) Reset()                    { *m = SecurityGroupSpec{} }
func (m *SecurityGroupSpec) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupSpec) ProtoMessage()               {}
func (*SecurityGroupSpec) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{24} }

func (m *SecurityGroupSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityGroupSpec) GetKeyOrHandle() *SecurityGroupKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *SecurityGroupSpec) GetIngressPolicy() *IngressSGPolicy {
	if m != nil {
		return m.IngressPolicy
	}
	return nil
}

func (m *SecurityGroupSpec) GetEgressPolicy() *EgressSGPolicy {
	if m != nil {
		return m.EgressPolicy
	}
	return nil
}

// SecurityGroupRequestMsg is batched add or modify security group policy request
type SecurityGroupRequestMsg struct {
	Request []*SecurityGroupSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupRequestMsg) Reset()                    { *m = SecurityGroupRequestMsg{} }
func (m *SecurityGroupRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupRequestMsg) ProtoMessage()               {}
func (*SecurityGroupRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{25} }

func (m *SecurityGroupRequestMsg) GetRequest() []*SecurityGroupSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// security group operational status
type SecurityGroupStatus struct {
	SgHandle uint64 `protobuf:"fixed64,1,opt,name=sg_handle,json=sgHandle" json:"sg_handle,omitempty"`
}

func (m *SecurityGroupStatus) Reset()                    { *m = SecurityGroupStatus{} }
func (m *SecurityGroupStatus) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupStatus) ProtoMessage()               {}
func (*SecurityGroupStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{26} }

func (m *SecurityGroupStatus) GetSgHandle() uint64 {
	if m != nil {
		return m.SgHandle
	}
	return 0
}

// SecurityGroupResponse is the response to SecurityGroupSpec
type SecurityGroupResponse struct {
	ApiStatus ApiStatus            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SecurityGroupStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SecurityGroupResponse) Reset()                    { *m = SecurityGroupResponse{} }
func (m *SecurityGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupResponse) ProtoMessage()               {}
func (*SecurityGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{27} }

func (m *SecurityGroupResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityGroupResponse) GetStatus() *SecurityGroupStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SecurityGroupResponseMsg is batched response to SecurityGroupRequestMsg
type SecurityGroupResponseMsg struct {
	Response []*SecurityGroupResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityGroupResponseMsg) Reset()                    { *m = SecurityGroupResponseMsg{} }
func (m *SecurityGroupResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupResponseMsg) ProtoMessage()               {}
func (*SecurityGroupResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{28} }

func (m *SecurityGroupResponseMsg) GetResponse() []*SecurityGroupResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SecurityGroupDeleteRequest is used to delete a security group
type SecurityGroupDeleteRequest struct {
	Meta        *ObjectMeta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *SecurityGroupKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityGroupDeleteRequest) Reset()                    { *m = SecurityGroupDeleteRequest{} }
func (m *SecurityGroupDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupDeleteRequest) ProtoMessage()               {}
func (*SecurityGroupDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{29} }

func (m *SecurityGroupDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityGroupDeleteRequest) GetKeyOrHandle() *SecurityGroupKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityGroupDeleteRequestMsg is used to delete a batch of security groups
type SecurityGroupDeleteRequestMsg struct {
	Request []*SecurityGroupDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupDeleteRequestMsg) Reset()                    { *m = SecurityGroupDeleteRequestMsg{} }
func (m *SecurityGroupDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupDeleteRequestMsg) ProtoMessage()               {}
func (*SecurityGroupDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{30} }

func (m *SecurityGroupDeleteRequestMsg) GetRequest() []*SecurityGroupDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityGroupDeleteResponseMsg is batched response to
// SecurityGroupDeleteRequestMsg
type SecurityGroupDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SecurityGroupDeleteResponseMsg) Reset()         { *m = SecurityGroupDeleteResponseMsg{} }
func (m *SecurityGroupDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SecurityGroupDeleteResponseMsg) ProtoMessage()    {}
func (*SecurityGroupDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{31}
}

func (m *SecurityGroupDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// SecurityGroupGetRequest is used to get information about a security group
type SecurityGroupGetRequest struct {
	Meta        *ObjectMeta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *SecurityGroupKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *SecurityGroupGetRequest) Reset()                    { *m = SecurityGroupGetRequest{} }
func (m *SecurityGroupGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupGetRequest) ProtoMessage()               {}
func (*SecurityGroupGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{32} }

func (m *SecurityGroupGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SecurityGroupGetRequest) GetKeyOrHandle() *SecurityGroupKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// SecurityGroupGetRequestMsg is batched GET request for security groups
type SecurityGroupGetRequestMsg struct {
	Request []*SecurityGroupGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SecurityGroupGetRequestMsg) Reset()                    { *m = SecurityGroupGetRequestMsg{} }
func (m *SecurityGroupGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupGetRequestMsg) ProtoMessage()               {}
func (*SecurityGroupGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{33} }

func (m *SecurityGroupGetRequestMsg) GetRequest() []*SecurityGroupGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SecurityGroupStats is the statistics object for a security group
type SecurityGroupStats struct {
}

func (m *SecurityGroupStats) Reset()                    { *m = SecurityGroupStats{} }
func (m *SecurityGroupStats) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupStats) ProtoMessage()               {}
func (*SecurityGroupStats) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{34} }

// SecurityGroupGetResponse captures all the information about a security group
type SecurityGroupGetResponse struct {
	ApiStatus ApiStatus            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *SecurityGroupSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SecurityGroupStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SecurityGroupStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SecurityGroupGetResponse) Reset()                    { *m = SecurityGroupGetResponse{} }
func (m *SecurityGroupGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupGetResponse) ProtoMessage()               {}
func (*SecurityGroupGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{35} }

func (m *SecurityGroupGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SecurityGroupGetResponse) GetSpec() *SecurityGroupSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SecurityGroupGetResponse) GetStatus() *SecurityGroupStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SecurityGroupGetResponse) GetStats() *SecurityGroupStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SecurityGroupGetResponseMsg is batched response to SecurityGroupGetRequestMsg
type SecurityGroupGetResponseMsg struct {
	Response []*SecurityGroupGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SecurityGroupGetResponseMsg) Reset()                    { *m = SecurityGroupGetResponseMsg{} }
func (m *SecurityGroupGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SecurityGroupGetResponseMsg) ProtoMessage()               {}
func (*SecurityGroupGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{36} }

func (m *SecurityGroupGetResponseMsg) GetResponse() []*SecurityGroupGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*SecurityProfileKeyHandle)(nil), "nwsec.SecurityProfileKeyHandle")
	proto.RegisterType((*SecurityProfileSpec)(nil), "nwsec.SecurityProfileSpec")
	proto.RegisterType((*SecurityProfileRequestMsg)(nil), "nwsec.SecurityProfileRequestMsg")
	proto.RegisterType((*SecurityProfileStatus)(nil), "nwsec.SecurityProfileStatus")
	proto.RegisterType((*SecurityProfileResponse)(nil), "nwsec.SecurityProfileResponse")
	proto.RegisterType((*SecurityProfileResponseMsg)(nil), "nwsec.SecurityProfileResponseMsg")
	proto.RegisterType((*SecurityProfileDeleteRequest)(nil), "nwsec.SecurityProfileDeleteRequest")
	proto.RegisterType((*SecurityProfileDeleteRequestMsg)(nil), "nwsec.SecurityProfileDeleteRequestMsg")
	proto.RegisterType((*SecurityProfileDeleteResponseMsg)(nil), "nwsec.SecurityProfileDeleteResponseMsg")
	proto.RegisterType((*SecurityProfileGetRequest)(nil), "nwsec.SecurityProfileGetRequest")
	proto.RegisterType((*SecurityProfileGetRequestMsg)(nil), "nwsec.SecurityProfileGetRequestMsg")
	proto.RegisterType((*SecurityProfileStats)(nil), "nwsec.SecurityProfileStats")
	proto.RegisterType((*SecurityProfileGetResponse)(nil), "nwsec.SecurityProfileGetResponse")
	proto.RegisterType((*SecurityProfileGetResponseMsg)(nil), "nwsec.SecurityProfileGetResponseMsg")
	proto.RegisterType((*Service)(nil), "nwsec.Service")
	proto.RegisterType((*ALG)(nil), "nwsec.ALG")
	proto.RegisterType((*FirewallRuleSpec)(nil), "nwsec.FirewallRuleSpec")
	proto.RegisterType((*DoSSessionLimits)(nil), "nwsec.DoSSessionLimits")
	proto.RegisterType((*DoSPolicer)(nil), "nwsec.DoSPolicer")
	proto.RegisterType((*DoSFloodLimits)(nil), "nwsec.DoSFloodLimits")
	proto.RegisterType((*DoSFloodLimits_RestrictLimits)(nil), "nwsec.DoSFloodLimits.RestrictLimits")
	proto.RegisterType((*DoSFloodLimits_ProtectLimits)(nil), "nwsec.DoSFloodLimits.ProtectLimits")
	proto.RegisterType((*DoSProtectionSpec)(nil), "nwsec.DoSProtectionSpec")
	proto.RegisterType((*IngressSGPolicy)(nil), "nwsec.IngressSGPolicy")
	proto.RegisterType((*EgressSGPolicy)(nil), "nwsec.EgressSGPolicy")
	proto.RegisterType((*SecurityGroupKeyHandle)(nil), "nwsec.SecurityGroupKeyHandle")
	proto.RegisterType((*SecurityGroupSpec)(nil), "nwsec.SecurityGroupSpec")
	proto.RegisterType((*SecurityGroupRequestMsg)(nil), "nwsec.SecurityGroupRequestMsg")
	proto.RegisterType((*SecurityGroupStatus)(nil), "nwsec.SecurityGroupStatus")
	proto.RegisterType((*SecurityGroupResponse)(nil), "nwsec.SecurityGroupResponse")
	proto.RegisterType((*SecurityGroupResponseMsg)(nil), "nwsec.SecurityGroupResponseMsg")
	proto.RegisterType((*SecurityGroupDeleteRequest)(nil), "nwsec.SecurityGroupDeleteRequest")
	proto.RegisterType((*SecurityGroupDeleteRequestMsg)(nil), "nwsec.SecurityGroupDeleteRequestMsg")
	proto.RegisterType((*SecurityGroupDeleteResponseMsg)(nil), "nwsec.SecurityGroupDeleteResponseMsg")
	proto.RegisterType((*SecurityGroupGetRequest)(nil), "nwsec.SecurityGroupGetRequest")
	proto.RegisterType((*SecurityGroupGetRequestMsg)(nil), "nwsec.SecurityGroupGetRequestMsg")
	proto.RegisterType((*SecurityGroupStats)(nil), "nwsec.SecurityGroupStats")
	proto.RegisterType((*SecurityGroupGetResponse)(nil), "nwsec.SecurityGroupGetResponse")
	proto.RegisterType((*SecurityGroupGetResponseMsg)(nil), "nwsec.SecurityGroupGetResponseMsg")
	proto.RegisterEnum("nwsec.NormalizationAction", NormalizationAction_name, NormalizationAction_value)
	proto.RegisterEnum("nwsec.FirewallAction", FirewallAction_name, FirewallAction_value)
	proto.RegisterEnum("nwsec.ALGName", ALGName_name, ALGName_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NwSecurity service

type NwSecurityClient interface {
	SecurityProfileCreate(ctx context.Context, in *SecurityProfileRequestMsg, opts ...grpc.CallOption) (*SecurityProfileResponseMsg, error)
	SecurityProfileUpdate(ctx context.Context, in *SecurityProfileRequestMsg, opts ...grpc.CallOption) (*SecurityProfileResponseMsg, error)
	SecurityProfileDelete(ctx context.Context, in *SecurityProfileDeleteRequestMsg, opts ...grpc.CallOption) (*SecurityProfileDeleteResponseMsg, error)
	SecurityProfileGet(ctx context.Context, in *SecurityProfileGetRequestMsg, opts ...grpc.CallOption) (*SecurityProfileGetResponseMsg, error)
	SecurityGroupCreate(ctx context.Context, in *SecurityGroupRequestMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error)
	SecurityGroupUpdate(ctx context.Context, in *SecurityGroupRequestMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error)
	SecurityGroupDelete(ctx context.Context, in *SecurityGroupDeleteRequestMsg, opts ...grpc.CallOption) (*SecurityGroupDeleteResponseMsg, error)
	SecurityGroupGet(ctx context.Context, in *SecurityGroupGetRequestMsg, opts ...grpc.CallOption) (*SecurityGroupGetResponseMsg, error)
}

type nwSecurityClient struct {
	cc *grpc.ClientConn
}

func NewNwSecurityClient(cc *grpc.ClientConn) NwSecurityClient {
	return &nwSecurityClient{cc}
}

func (c *nwSecurityClient) SecurityProfileCreate(ctx context.Context, in *SecurityProfileRequestMsg, opts ...grpc.CallOption) (*SecurityProfileResponseMsg, error) {
	out := new(SecurityProfileResponseMsg)
	err := grpc.Invoke(ctx, "/nwsec.NwSecurity/SecurityProfileCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityProfileUpdate(ctx context.Context, in *SecurityProfileRequestMsg, opts ...grpc.CallOption) (*SecurityProfileResponseMsg, error) {
	out := new(SecurityProfileResponseMsg)
	err := grpc.Invoke(ctx, "/nwsec.NwSecurity/SecurityProfileUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityProfileDelete(ctx context.Context, in *SecurityProfileDeleteRequestMsg, opts ...grpc.CallOption) (*SecurityProfileDeleteResponseMsg, error) {
	out := new(SecurityProfileDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/nwsec.NwSecurity/SecurityProfileDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityProfileGet(ctx context.Context, in *SecurityProfileGetRequestMsg, opts ...grpc.CallOption) (*SecurityProfileGetResponseMsg, error) {
	out := new(SecurityProfileGetResponseMsg)
	err := grpc.Invoke(ctx, "/nwsec.NwSecurity/SecurityProfileGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityGroupCreate(ctx context.Context, in *SecurityGroupRequestMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error) {
	out := new(SecurityGroupResponseMsg)
	err := grpc.Invoke(ctx, "/nwsec.NwSecurity/SecurityGroupCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityGroupUpdate(ctx context.Context, in *SecurityGroupRequestMsg, opts ...grpc.CallOption) (*SecurityGroupResponseMsg, error) {
	out := new(SecurityGroupResponseMsg)
	err := grpc.Invoke(ctx, "/nwsec.NwSecurity/SecurityGroupUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityGroupDelete(ctx context.Context, in *SecurityGroupDeleteRequestMsg, opts ...grpc.CallOption) (*SecurityGroupDeleteResponseMsg, error) {
	out := new(SecurityGroupDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/nwsec.NwSecurity/SecurityGroupDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nwSecurityClient) SecurityGroupGet(ctx context.Context, in *SecurityGroupGetRequestMsg, opts ...grpc.CallOption) (*SecurityGroupGetResponseMsg, error) {
	out := new(SecurityGroupGetResponseMsg)
	err := grpc.Invoke(ctx, "/nwsec.NwSecurity/SecurityGroupGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NwSecurity service

type NwSecurityServer interface {
	SecurityProfileCreate(context.Context, *SecurityProfileRequestMsg) (*SecurityProfileResponseMsg, error)
	SecurityProfileUpdate(context.Context, *SecurityProfileRequestMsg) (*SecurityProfileResponseMsg, error)
	SecurityProfileDelete(context.Context, *SecurityProfileDeleteRequestMsg) (*SecurityProfileDeleteResponseMsg, error)
	SecurityProfileGet(context.Context, *SecurityProfileGetRequestMsg) (*SecurityProfileGetResponseMsg, error)
	SecurityGroupCreate(context.Context, *SecurityGroupRequestMsg) (*SecurityGroupResponseMsg, error)
	SecurityGroupUpdate(context.Context, *SecurityGroupRequestMsg) (*SecurityGroupResponseMsg, error)
	SecurityGroupDelete(context.Context, *SecurityGroupDeleteRequestMsg) (*SecurityGroupDeleteResponseMsg, error)
	SecurityGroupGet(context.Context, *SecurityGroupGetRequestMsg) (*SecurityGroupGetResponseMsg, error)
}

func RegisterNwSecurityServer(s *grpc.Server, srv NwSecurityServer) {
	s.RegisterService(&_NwSecurity_serviceDesc, srv)
}

func _NwSecurity_SecurityProfileCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityProfileCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nwsec.NwSecurity/SecurityProfileCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityProfileCreate(ctx, req.(*SecurityProfileRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nwsec.NwSecurity/SecurityProfileUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityProfileUpdate(ctx, req.(*SecurityProfileRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityProfileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityProfileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nwsec.NwSecurity/SecurityProfileDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityProfileDelete(ctx, req.(*SecurityProfileDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityProfileGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityProfileGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityProfileGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nwsec.NwSecurity/SecurityProfileGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityProfileGet(ctx, req.(*SecurityProfileGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityGroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroupRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityGroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nwsec.NwSecurity/SecurityGroupCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityGroupCreate(ctx, req.(*SecurityGroupRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityGroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroupRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityGroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nwsec.NwSecurity/SecurityGroupUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityGroupUpdate(ctx, req.(*SecurityGroupRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityGroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroupDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityGroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nwsec.NwSecurity/SecurityGroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityGroupDelete(ctx, req.(*SecurityGroupDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _NwSecurity_SecurityGroupGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityGroupGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NwSecurityServer).SecurityGroupGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nwsec.NwSecurity/SecurityGroupGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NwSecurityServer).SecurityGroupGet(ctx, req.(*SecurityGroupGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _NwSecurity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nwsec.NwSecurity",
	HandlerType: (*NwSecurityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SecurityProfileCreate",
			Handler:    _NwSecurity_SecurityProfileCreate_Handler,
		},
		{
			MethodName: "SecurityProfileUpdate",
			Handler:    _NwSecurity_SecurityProfileUpdate_Handler,
		},
		{
			MethodName: "SecurityProfileDelete",
			Handler:    _NwSecurity_SecurityProfileDelete_Handler,
		},
		{
			MethodName: "SecurityProfileGet",
			Handler:    _NwSecurity_SecurityProfileGet_Handler,
		},
		{
			MethodName: "SecurityGroupCreate",
			Handler:    _NwSecurity_SecurityGroupCreate_Handler,
		},
		{
			MethodName: "SecurityGroupUpdate",
			Handler:    _NwSecurity_SecurityGroupUpdate_Handler,
		},
		{
			MethodName: "SecurityGroupDelete",
			Handler:    _NwSecurity_SecurityGroupDelete_Handler,
		},
		{
			MethodName: "SecurityGroupGet",
			Handler:    _NwSecurity_SecurityGroupGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/nwsec.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/nwsec.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 2621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xdb, 0x72, 0x1b, 0xc7,
	0xd1, 0x16, 0x44, 0x89, 0x87, 0xa6, 0x00, 0x02, 0xc3, 0x13, 0x48, 0x5a, 0x22, 0xb5, 0xb6, 0x7f,
	0xd3, 0xb2, 0x4c, 0xd9, 0x30, 0xff, 0x58, 0x76, 0x62, 0x27, 0x34, 0x01, 0x4a, 0xb4, 0x09, 0x10,
	0x5e, 0xc0, 0x96, 0xe3, 0xb8, 0xb4, 0x5a, 0xed, 0x0e, 0xc1, 0x31, 0x17, 0xbb, 0x93, 0x9d, 0x81,
	0x28, 0x38, 0xb9, 0x4b, 0xc5, 0xa9, 0x4a, 0x55, 0x2a, 0x55, 0x79, 0x81, 0x5c, 0xe5, 0xb5, 0x52,
	0x95, 0x9b, 0x3c, 0x43, 0x72, 0x97, 0x9a, 0xc3, 0x62, 0x0f, 0x00, 0x08, 0xda, 0x56, 0x0e, 0x57,
	0xc4, 0x4e, 0xf7, 0xf7, 0xf5, 0x4c, 0x4f, 0x4f, 0x4f, 0xf7, 0x10, 0xd6, 0x7c, 0xe2, 0xdc, 0xa3,
	0x61, 0xc0, 0x83, 0x7b, 0xa7, 0xb6, 0x77, 0xcf, 0x3f, 0x67, 0xd8, 0xd9, 0x91, 0xdf, 0xe8, 0xba,
	0xfc, 0x58, 0x5f, 0x8e, 0x35, 0x78, 0x9f, 0x62, 0xa6, 0xa4, 0x46, 0x0f, 0xca, 0x2d, 0xec, 0xf4,
	0x42, 0xc2, 0xfb, 0xcd, 0x30, 0x38, 0x21, 0x1e, 0xfe, 0x04, 0xf7, 0x1f, 0xda, 0xbe, 0xeb, 0x61,
	0xb4, 0x09, 0x40, 0xd5, 0x98, 0x45, 0xdc, 0x72, 0x6e, 0x2b, 0xb7, 0x9d, 0x7f, 0x78, 0xc5, 0x9c,
	0xd3, 0x63, 0x87, 0x2e, 0x7a, 0x0d, 0x0a, 0x91, 0xc2, 0xa9, 0x84, 0x94, 0xaf, 0x6e, 0xe5, 0xb6,
	0xa7, 0x1f, 0x5e, 0x31, 0xf3, 0x7a, 0x5c, 0x31, 0x7d, 0xb4, 0x00, 0xf9, 0x33, 0xdc, 0xb7, 0x82,
	0x50, 0xeb, 0x19, 0xff, 0x5c, 0x84, 0xc5, 0x8c, 0xdd, 0x16, 0xc5, 0x0e, 0x7a, 0x15, 0xae, 0x75,
	0x31, 0xb7, 0xa5, 0xb1, 0xf9, 0x4a, 0x69, 0x47, 0x4d, 0xf5, 0xf8, 0xe9, 0xd7, 0xd8, 0xe1, 0x75,
	0xcc, 0x6d, 0x53, 0x8a, 0xd1, 0x7e, 0x86, 0x4f, 0xda, 0x9d, 0xaf, 0x6c, 0xee, 0xa8, 0x85, 0x8f,
	0x5b, 0x91, 0x39, 0x7f, 0x86, 0xfb, 0xc7, 0xa1, 0x5e, 0xde, 0x36, 0x14, 0x1d, 0xff, 0xb9, 0x6f,
	0xf1, 0xd0, 0x76, 0xce, 0x88, 0xdf, 0xb1, 0xb0, 0x5f, 0x9e, 0xda, 0xca, 0x6d, 0xcf, 0x9a, 0x05,
	0x31, 0xde, 0xd6, 0xc3, 0x35, 0x1f, 0xad, 0xc2, 0x0c, 0xa1, 0x4c, 0x2a, 0x5c, 0x93, 0x0a, 0xd3,
	0xe2, 0xb3, 0xe6, 0xa3, 0x37, 0x61, 0x91, 0x3b, 0xd4, 0x0a, 0x39, 0xb7, 0x30, 0xe3, 0xa4, 0x6b,
	0x73, 0x2c, 0x94, 0xae, 0x4b, 0xa5, 0x22, 0x77, 0xa8, 0xc9, 0x79, 0x4d, 0x0b, 0x6a, 0x3e, 0x7a,
	0x0b, 0x96, 0x18, 0x66, 0x8c, 0x04, 0xbe, 0x45, 0x5c, 0x0f, 0x5b, 0x9c, 0x74, 0x71, 0xd0, 0xe3,
	0xe5, 0x69, 0xe1, 0x5a, 0x13, 0x69, 0xd9, 0xa1, 0xeb, 0xe1, 0xb6, 0x92, 0xa0, 0x77, 0x60, 0x45,
	0x18, 0x90, 0xf3, 0x64, 0x98, 0xf7, 0xe8, 0x00, 0x33, 0x23, 0x31, 0xc2, 0xfc, 0xbe, 0xff, 0xdc,
	0x6f, 0x09, 0x59, 0x04, 0xba, 0x03, 0x25, 0x09, 0xf2, 0x02, 0x16, 0xdb, 0x98, 0x95, 0xfa, 0x0b,
	0x42, 0x5f, 0x8c, 0x67, 0x0d, 0x48, 0xdd, 0x73, 0x9b, 0xf0, 0x01, 0x60, 0x2e, 0x36, 0x20, 0x84,
	0x8f, 0x6c, 0xc2, 0x23, 0xd0, 0x0e, 0x2c, 0x12, 0x6a, 0xf9, 0x41, 0xd8, 0xb5, 0x3d, 0xf2, 0x8d,
	0xcd, 0xc5, 0x82, 0xb0, 0x5f, 0x06, 0xb9, 0xec, 0x12, 0xa1, 0x8d, 0xa4, 0x44, 0xad, 0x5b, 0x18,
	0x19, 0x02, 0xcc, 0x4b, 0x00, 0xe2, 0xce, 0x10, 0xa2, 0x02, 0xcb, 0xc4, 0xe9, 0x8e, 0x80, 0xdc,
	0x90, 0x90, 0x45, 0x21, 0xcc, 0x62, 0x76, 0x61, 0x95, 0x50, 0x8b, 0x73, 0xcf, 0x72, 0x4e, 0x6d,
	0xbf, 0x83, 0x2d, 0x17, 0x73, 0xec, 0x70, 0x81, 0x5a, 0xd2, 0x28, 0xda, 0xe6, 0xde, 0xbe, 0x14,
	0x56, 0xa5, 0xac, 0xe6, 0xa3, 0x4f, 0x60, 0x89, 0x50, 0x2b, 0x64, 0xcf, 0x5c, 0xeb, 0xc4, 0xb3,
	0x3b, 0xcc, 0xb2, 0x1d, 0xc1, 0x57, 0x5e, 0xde, 0xca, 0x6d, 0x17, 0x2a, 0xeb, 0x3a, 0xa2, 0x52,
	0xb6, 0xf6, 0xa4, 0x86, 0x58, 0xa8, 0xc9, 0x9e, 0xb9, 0x07, 0x02, 0xa5, 0x86, 0xd0, 0x4f, 0xe0,
	0x06, 0xa1, 0x96, 0x7b, 0x12, 0x91, 0xac, 0x4c, 0x24, 0x01, 0x42, 0xab, 0x27, 0x1a, 0x7d, 0x00,
	0x25, 0x42, 0xad, 0x80, 0x8a, 0x8f, 0xc1, 0x3c, 0x56, 0x27, 0x52, 0x2c, 0x10, 0x7a, 0xac, 0x30,
	0x9a, 0xa7, 0x0e, 0xcb, 0x84, 0x5a, 0xc4, 0x7f, 0x66, 0x7b, 0xc4, 0xb5, 0x3c, 0xec, 0x47, 0x5c,
	0xe5, 0x89, 0x5c, 0x88, 0xd0, 0x43, 0x85, 0x3b, 0xc2, 0x7a, 0x4c, 0x9c, 0x93, 0xc4, 0x6e, 0x63,
	0xe1, 0xe1, 0xf2, 0x9a, 0x0c, 0x8e, 0x42, 0xbc, 0xd5, 0xb8, 0xcd, 0x3d, 0xd4, 0x82, 0xb2, 0xdc,
	0xb5, 0xc8, 0xb4, 0x13, 0xb8, 0x38, 0xb2, 0x7d, 0x6b, 0xa2, 0x6d, 0xb9, 0xe3, 0xda, 0xfa, 0x7e,
	0xe0, 0x62, 0x6d, 0xfe, 0x3d, 0x58, 0x93, 0xa4, 0x2e, 0xa6, 0x21, 0x76, 0x6c, 0x8e, 0x5d, 0xab,
	0xcb, 0x3a, 0xcc, 0x72, 0xc3, 0x80, 0x96, 0x37, 0xe5, 0xc6, 0xae, 0x08, 0x85, 0xea, 0x40, 0x5e,
	0x67, 0x1d, 0x56, 0x0d, 0x03, 0x2a, 0x82, 0x5b, 0x42, 0x43, 0xec, 0x92, 0x50, 0x84, 0x42, 0x97,
	0x75, 0x14, 0x6e, 0x2b, 0x0e, 0x23, 0x53, 0x0b, 0xeb, 0xac, 0x23, 0x41, 0xef, 0xc1, 0xba, 0x0a,
	0x56, 0xdf, 0x62, 0x7d, 0xdf, 0x3a, 0x21, 0x21, 0xe3, 0x16, 0x3d, 0xe3, 0x0a, 0xb8, 0x2d, 0x81,
	0xcb, 0x32, 0x64, 0xfd, 0x56, 0xdf, 0x3f, 0x10, 0xe2, 0xe6, 0x19, 0x97, 0xd0, 0x6d, 0x10, 0x67,
	0x5e, 0xc0, 0x9c, 0x20, 0x38, 0x23, 0x32, 0x17, 0xbc, 0xae, 0x32, 0x0a, 0x77, 0x68, 0x2b, 0x1a,
	0xae, 0xf9, 0xe8, 0x67, 0x70, 0x53, 0x6a, 0x52, 0x8f, 0x70, 0x99, 0xc3, 0xd8, 0xa9, 0x7d, 0x96,
	0x8c, 0xd8, 0x3b, 0x12, 0xb6, 0x26, 0x60, 0x42, 0xe7, 0x61, 0xa4, 0x32, 0x88, 0xdb, 0x77, 0xa1,
	0x3c, 0x92, 0x41, 0x4c, 0xf2, 0x8d, 0xc1, 0x24, 0x33, 0x60, 0x31, 0xc9, 0x3a, 0x2c, 0xcb, 0x9c,
	0x35, 0x14, 0xf1, 0x77, 0x27, 0x47, 0x87, 0xc8, 0x68, 0x99, 0x90, 0xff, 0x0c, 0xc4, 0x24, 0xad,
	0x9e, 0x8f, 0x9f, 0x53, 0xec, 0xa8, 0xdd, 0x19, 0x50, 0xbe, 0x39, 0x91, 0x52, 0x64, 0x9f, 0xcf,
	0x06, 0xd8, 0x3a, 0x8b, 0x68, 0x9f, 0xc0, 0x66, 0x86, 0xf6, 0x9c, 0xf8, 0x16, 0x73, 0x6c, 0x6f,
	0x10, 0x51, 0x3b, 0x13, 0xc9, 0x37, 0x52, 0xe4, 0x8f, 0x88, 0xdf, 0x12, 0xf8, 0xc1, 0xc4, 0xe5,
	0x3e, 0xf7, 0xc2, 0x8e, 0x45, 0x79, 0x68, 0xf9, 0x01, 0x17, 0x19, 0x36, 0x22, 0xbf, 0x37, 0x39,
	0x5c, 0x05, 0x79, 0xd8, 0x69, 0xf2, 0xb0, 0x11, 0xf0, 0x16, 0xe6, 0x9a, 0xf6, 0x11, 0x6c, 0x44,
	0xb4, 0xc2, 0xbb, 0x59, 0xde, 0xb7, 0x2e, 0xe7, 0x91, 0xb0, 0x23, 0x7c, 0x9c, 0x22, 0x7e, 0x0c,
	0xb7, 0x06, 0xf3, 0xb5, 0xfb, 0x5e, 0x60, 0xbb, 0x56, 0x97, 0x30, 0x26, 0x2e, 0x2e, 0xcd, 0xfd,
	0xf6, 0x44, 0xee, 0x75, 0x3d, 0x67, 0x85, 0xaf, 0x2b, 0xb8, 0xe6, 0x37, 0x55, 0x40, 0x89, 0x68,
	0x3f, 0x27, 0xfc, 0xd4, 0x72, 0x6d, 0x6e, 0x47, 0xcc, 0x95, 0x89, 0xcc, 0x4b, 0x32, 0x34, 0xf8,
	0x23, 0xc2, 0x4f, 0xab, 0x36, 0xb7, 0xd3, 0x3e, 0x96, 0x54, 0x22, 0x0f, 0x75, 0x78, 0x32, 0x3a,
	0xde, 0xb9, 0x94, 0x8f, 0x05, 0xdd, 0x11, 0xf6, 0x1f, 0xf0, 0x38, 0x38, 0x1e, 0xab, 0xe0, 0x48,
	0xd2, 0xca, 0xe8, 0x10, 0xd9, 0x49, 0x73, 0xef, 0x4e, 0xe4, 0x5e, 0x4b, 0x72, 0x8b, 0xd8, 0x20,
	0xdf, 0xe0, 0xb1, 0xc1, 0xc7, 0x99, 0xce, 0xcb, 0x11, 0xff, 0xff, 0x7f, 0xc7, 0xe0, 0x6b, 0x33,
	0x95, 0xa3, 0xb5, 0x85, 0xaf, 0xd4, 0xf9, 0x4f, 0x58, 0xc0, 0xce, 0x69, 0x20, 0xcc, 0x68, 0xfe,
	0x1f, 0x5d, 0x6a, 0xfe, 0x31, 0x7f, 0xcd, 0x39, 0x0d, 0xda, 0x91, 0x7f, 0x76, 0x61, 0x55, 0xb0,
	0x73, 0x26, 0xa3, 0x8f, 0x86, 0x98, 0x61, 0x5f, 0xe7, 0xaf, 0x77, 0x55, 0xe2, 0xe3, 0x0e, 0x6d,
	0xb3, 0x46, 0xc0, 0x9b, 0x4a, 0x16, 0x65, 0x4b, 0x81, 0x8a, 0x92, 0xb7, 0xca, 0x0d, 0x12, 0x74,
	0x7f, 0x00, 0xd2, 0xe9, 0x59, 0x26, 0x00, 0x09, 0x7a, 0x5b, 0x65, 0x13, 0x3f, 0xf0, 0x45, 0xb2,
	0xf4, 0x03, 0xdb, 0x39, 0x53, 0x98, 0xf7, 0x12, 0x77, 0xbb, 0x90, 0x35, 0x84, 0x48, 0x40, 0x8c,
	0x4f, 0x61, 0x2d, 0x53, 0xa0, 0x99, 0xf8, 0x97, 0x3d, 0xcc, 0x44, 0x06, 0x46, 0xbb, 0x30, 0x13,
	0xaa, 0xaf, 0x72, 0x6e, 0x6b, 0x6a, 0x7b, 0x7e, 0xe0, 0x82, 0x11, 0xd5, 0xa2, 0x19, 0xa9, 0x1a,
	0x1f, 0xc2, 0x72, 0x56, 0xce, 0x6d, 0xde, 0x63, 0xe8, 0xd5, 0xa1, 0x0a, 0x55, 0x54, 0x96, 0xd3,
	0x99, 0xfa, 0xd4, 0xf8, 0x63, 0x0e, 0x56, 0x87, 0xe6, 0xc4, 0x68, 0xe0, 0x33, 0x8c, 0xee, 0x01,
	0xd8, 0x94, 0x58, 0x4c, 0x12, 0x4a, 0x78, 0xa1, 0x52, 0xd4, 0x85, 0xe9, 0x1e, 0x25, 0xca, 0x90,
	0x39, 0x67, 0x47, 0x3f, 0xd1, 0x7e, 0x6c, 0x53, 0x83, 0x54, 0x75, 0xfa, 0xd2, 0x98, 0x95, 0x28,
	0x82, 0x68, 0x46, 0xea, 0xd3, 0xf8, 0x02, 0xd6, 0xc7, 0x4c, 0x48, 0x78, 0xe9, 0x7d, 0x98, 0x0d,
	0xf5, 0xa7, 0x76, 0xd3, 0xad, 0xd1, 0xe4, 0x11, 0xc8, 0x1c, 0xe8, 0x1b, 0xbf, 0xcf, 0xc1, 0x4b,
	0x19, 0xad, 0x2a, 0xf6, 0x30, 0x8f, 0x76, 0xe1, 0x3f, 0x59, 0x83, 0x1b, 0x4f, 0x60, 0xf3, 0xa2,
	0xb9, 0x88, 0xb5, 0x7e, 0x90, 0x8d, 0x88, 0x97, 0x47, 0x5b, 0x48, 0x01, 0xe3, 0xd0, 0x68, 0xc1,
	0xd6, 0x18, 0xc5, 0xd8, 0x9d, 0xd9, 0x2d, 0x9e, 0x9a, 0xb0, 0xc5, 0xc6, 0xef, 0x72, 0x43, 0x31,
	0xfc, 0x00, 0xf3, 0xff, 0x86, 0x03, 0xbf, 0x1c, 0xda, 0xcc, 0x78, 0x22, 0x2a, 0x52, 0x32, 0xde,
	0xdb, 0x1a, 0x4d, 0x1f, 0xa3, 0x62, 0xd7, 0xad, 0xc0, 0xd2, 0x88, 0x58, 0x65, 0xc6, 0xdf, 0x73,
	0x43, 0xc1, 0x29, 0xe1, 0xdf, 0xf7, 0xc0, 0xec, 0xc0, 0x35, 0x46, 0xb1, 0xa3, 0xd7, 0x7f, 0xd1,
	0x81, 0x97, 0x7a, 0x68, 0x17, 0xa6, 0x35, 0xf9, 0xd4, 0x25, 0x0e, 0x96, 0xd6, 0x45, 0x6f, 0xc3,
	0x75, 0xf1, 0x8b, 0xc9, 0x16, 0x6e, 0xbe, 0xb2, 0x31, 0x1e, 0xc4, 0x4c, 0xa5, 0x69, 0x3c, 0x86,
	0x9b, 0xe3, 0xd7, 0xa9, 0x62, 0x33, 0x7b, 0x0e, 0x6f, 0x5f, 0xe0, 0xde, 0xa1, 0xa3, 0xf8, 0xe7,
	0x1c, 0xcc, 0xb4, 0x70, 0xf8, 0x8c, 0x38, 0x18, 0x55, 0x60, 0x9e, 0x50, 0x4b, 0x36, 0xe5, 0x4e,
	0xe0, 0x69, 0xb7, 0x45, 0xb1, 0x73, 0xd8, 0x6c, 0x6a, 0x81, 0x68, 0x18, 0xa2, 0xdf, 0x68, 0x03,
	0x66, 0x5d, 0x51, 0x9c, 0x06, 0x21, 0x97, 0xce, 0x13, 0xed, 0xf9, 0x8c, 0xcb, 0x78, 0x33, 0x08,
	0x39, 0xba, 0x0f, 0x79, 0x59, 0xfc, 0x8a, 0x9a, 0x57, 0xb0, 0x48, 0x67, 0x15, 0x2a, 0x28, 0xa2,
	0xdc, 0xaf, 0x37, 0xeb, 0xac, 0xd3, 0xee, 0x53, 0xfc, 0xf0, 0x8a, 0x39, 0x2f, 0x54, 0xf5, 0xe7,
	0x47, 0x73, 0x30, 0xe3, 0xed, 0x5a, 0xc4, 0x3f, 0x09, 0x8c, 0x43, 0x98, 0xda, 0x3b, 0x7a, 0x80,
	0xb6, 0x60, 0xca, 0xf6, 0x3a, 0x7a, 0x52, 0x05, 0xbd, 0xc4, 0xbd, 0xa3, 0x07, 0x0d, 0xbb, 0x8b,
	0x4d, 0x21, 0x12, 0x1a, 0xec, 0x59, 0xb4, 0x85, 0x85, 0x81, 0x13, 0xe4, 0xda, 0x4c, 0x21, 0x32,
	0xfe, 0x92, 0x83, 0xe2, 0x01, 0x09, 0xf1, 0xb9, 0xed, 0x79, 0x66, 0x4f, 0xf7, 0xfb, 0x3b, 0xb0,
	0x48, 0x31, 0x0e, 0x2d, 0xa6, 0xdd, 0x65, 0x75, 0xc2, 0xa0, 0x47, 0xa5, 0x2f, 0xf3, 0x66, 0x49,
	0x88, 0x22, 0x47, 0x3e, 0x10, 0x82, 0xd8, 0xcc, 0xd4, 0x18, 0x33, 0xe8, 0x4d, 0x98, 0xd6, 0x57,
	0xa8, 0x5a, 0xef, 0xb2, 0x56, 0x8a, 0x4c, 0xeb, 0xdb, 0x53, 0x2b, 0xa1, 0x22, 0x4c, 0x79, 0x41,
	0x47, 0xb7, 0xf5, 0xe2, 0xa7, 0xf1, 0x04, 0x8a, 0xd5, 0xa0, 0xd5, 0x52, 0xbd, 0xf8, 0x11, 0xe9,
	0x12, 0xce, 0xd0, 0x6d, 0xb8, 0xd1, 0xb5, 0x9f, 0x5b, 0xba, 0x41, 0x57, 0x41, 0x9d, 0x37, 0xe7,
	0xbb, 0xf6, 0x73, 0xad, 0xc7, 0xd0, 0xeb, 0x50, 0x7c, 0xea, 0x05, 0xea, 0x21, 0x21, 0x6a, 0xa1,
	0xaf, 0xaa, 0x9e, 0x3b, 0x1a, 0xd7, 0xed, 0xb3, 0x11, 0x02, 0x54, 0x83, 0x56, 0x33, 0xf0, 0x88,
	0x83, 0x43, 0xd1, 0x34, 0x3c, 0xed, 0x73, 0xcc, 0x2c, 0xaa, 0xfc, 0x10, 0xf8, 0xfa, 0xad, 0xc5,
	0x2c, 0xc8, 0xf1, 0xa6, 0xf4, 0x41, 0xe0, 0xbb, 0x68, 0x03, 0xe6, 0x28, 0xb6, 0xcf, 0xac, 0xd0,
	0xe6, 0x58, 0x73, 0xcf, 0x8a, 0x01, 0xd3, 0xe6, 0x18, 0xdd, 0x04, 0x78, 0xda, 0x13, 0xc5, 0x9b,
	0xa8, 0x82, 0xe4, 0xda, 0xf3, 0xe6, 0x9c, 0x1c, 0x11, 0x85, 0x8d, 0xf1, 0xed, 0x14, 0x14, 0xaa,
	0x41, 0xeb, 0xc0, 0x0b, 0x02, 0x57, 0x2f, 0xaa, 0x0e, 0x0b, 0x21, 0x66, 0x3c, 0x24, 0x0e, 0xb7,
	0x3c, 0x39, 0xa4, 0x33, 0xd6, 0x2b, 0xda, 0x65, 0x69, 0xfd, 0x1d, 0x53, 0x2b, 0xab, 0x4f, 0xb3,
	0x10, 0xa6, 0xbe, 0xd1, 0xc7, 0xf2, 0xda, 0x93, 0xfd, 0x8b, 0x66, 0x53, 0xc1, 0xf0, 0xf2, 0x68,
	0xb6, 0xa6, 0xd2, 0xd5, 0x64, 0x79, 0x9a, 0xfc, 0x5c, 0xf7, 0xa0, 0x90, 0xb6, 0x26, 0xf6, 0x89,
	0xd2, 0xc8, 0xf1, 0xe2, 0xa7, 0xf0, 0x86, 0x5a, 0xb0, 0x18, 0xd7, 0xde, 0x90, 0x03, 0x4d, 0xca,
	0xd0, 0x1b, 0x50, 0x1a, 0xac, 0x8d, 0xf8, 0x1c, 0x87, 0xcf, 0x6c, 0x4f, 0x3b, 0xa5, 0x18, 0x09,
	0x0e, 0xf5, 0xf8, 0xfa, 0x19, 0xe4, 0x53, 0xb3, 0xf9, 0x77, 0x1a, 0x33, 0xfe, 0x36, 0x05, 0x25,
	0xb1, 0xfb, 0xca, 0x20, 0x09, 0x7c, 0x79, 0x0e, 0x74, 0x5c, 0xe7, 0xc6, 0x1e, 0x1f, 0x74, 0x17,
	0xa2, 0xf7, 0x21, 0xfd, 0x10, 0x94, 0x88, 0x82, 0xa2, 0x96, 0xc8, 0x57, 0x20, 0x19, 0x0d, 0x1f,
	0x42, 0x21, 0xd2, 0xd6, 0x9b, 0xa1, 0x52, 0xe5, 0x6a, 0xbc, 0x19, 0xa9, 0x08, 0x37, 0xf3, 0x2c,
	0x15, 0xf0, 0x6f, 0xc0, 0x0c, 0x55, 0xf1, 0xa9, 0xd3, 0x65, 0x29, 0x06, 0xea, 0xc0, 0x35, 0x23,
	0x0d, 0x74, 0xa0, 0x9e, 0x77, 0x64, 0xb7, 0x2c, 0x76, 0x38, 0x32, 0x79, 0x5d, 0x22, 0x97, 0x47,
	0xee, 0xbf, 0x59, 0x52, 0x1d, 0x71, 0x32, 0x20, 0x7f, 0x0a, 0xc5, 0x9e, 0x4b, 0xd3, 0x1c, 0xd3,
	0x17, 0x71, 0x14, 0x7a, 0x2e, 0x4d, 0x12, 0xec, 0x41, 0x49, 0xa6, 0xbc, 0x14, 0xc3, 0xcc, 0x45,
	0x0c, 0x0b, 0x42, 0x3f, 0x49, 0xb1, 0x0f, 0x28, 0xe0, 0xa7, 0x38, 0x4c, 0x73, 0xcc, 0x5e, 0xc4,
	0x51, 0x94, 0x80, 0xc4, 0x88, 0xf1, 0x6d, 0x0e, 0x16, 0x0e, 0xfd, 0x4e, 0x88, 0x19, 0x6b, 0x3d,
	0x90, 0xee, 0xea, 0xa3, 0x0a, 0xcc, 0x9e, 0x9c, 0x5b, 0x61, 0xcf, 0xc3, 0x4c, 0x5f, 0x15, 0xab,
	0x99, 0xcc, 0x14, 0x25, 0x45, 0x73, 0xe6, 0xe4, 0x5c, 0xfc, 0x16, 0x0e, 0x29, 0xb8, 0x01, 0xb3,
	0xe8, 0x20, 0x56, 0xf4, 0x91, 0x2a, 0x27, 0x36, 0x23, 0x15, 0x47, 0x66, 0xde, 0x0d, 0x58, 0x3c,
	0x64, 0xfc, 0x36, 0x07, 0x85, 0xda, 0xff, 0xc0, 0x3c, 0xfe, 0x90, 0x83, 0x95, 0x54, 0x22, 0x8f,
	0x1f, 0x99, 0xef, 0x42, 0x29, 0x9d, 0xfc, 0x93, 0x6f, 0xcd, 0x0b, 0x2c, 0x09, 0x3a, 0x74, 0xd1,
	0x2e, 0x2c, 0x67, 0xb4, 0x33, 0x0f, 0xcf, 0x8b, 0x29, 0xc4, 0xb8, 0xe7, 0xe7, 0x7f, 0xe4, 0xa0,
	0x94, 0x9a, 0xcf, 0x77, 0x79, 0x7c, 0xde, 0x1b, 0x5d, 0xb7, 0xdd, 0xcc, 0xdc, 0xfc, 0xe9, 0x75,
	0xa6, 0x9f, 0x9e, 0x3f, 0x80, 0x02, 0x51, 0xf1, 0x61, 0xc9, 0x43, 0xd4, 0xd7, 0xc7, 0x73, 0x45,
	0x73, 0x64, 0x82, 0xc7, 0xcc, 0x6b, 0x6d, 0xbd, 0x87, 0xef, 0x43, 0x1e, 0xa7, 0xd0, 0xd7, 0x52,
	0xf1, 0x99, 0xde, 0x71, 0xf3, 0x06, 0x4e, 0x60, 0x8d, 0x7a, 0xdc, 0xe9, 0xc8, 0x19, 0x26, 0x6a,
	0xc5, 0x4a, 0xb6, 0x56, 0x2c, 0x8f, 0x5a, 0x52, 0xba, 0xf3, 0xaa, 0xc4, 0xef, 0xf8, 0x4a, 0xaa,
	0x8a, 0xad, 0x0d, 0x98, 0x63, 0x9d, 0x74, 0xcb, 0x35, 0xcb, 0x3a, 0xba, 0x66, 0xfd, 0x75, 0xdc,
	0xad, 0xe9, 0x29, 0x7c, 0xdf, 0xca, 0xb1, 0x32, 0xa8, 0x04, 0x47, 0xd7, 0x8e, 0x89, 0x29, 0x45,
	0x75, 0xa0, 0xd1, 0x8e, 0xff, 0xe3, 0x91, 0xb2, 0x2e, 0x3c, 0x70, 0x7f, 0xa8, 0x9e, 0x7b, 0x69,
	0x14, 0xe3, 0x88, 0x52, 0xee, 0xdb, 0x44, 0x4d, 0x2c, 0x75, 0xbe, 0x57, 0x4f, 0xf5, 0xc3, 0x43,
	0xcb, 0xf8, 0x2a, 0xae, 0x59, 0x87, 0xe7, 0x21, 0xd6, 0xf8, 0xe3, 0xec, 0x2e, 0xdf, 0x1e, 0xc5,
	0x3e, 0xa6, 0x9b, 0xfa, 0x14, 0x6e, 0x8d, 0x54, 0xfb, 0x01, 0xbd, 0xd4, 0x6f, 0x72, 0x99, 0x88,
	0xfc, 0xee, 0x9d, 0xd4, 0x0b, 0x70, 0xdb, 0xe7, 0x99, 0xed, 0x4b, 0x77, 0x51, 0xf7, 0xb3, 0x3e,
	0xbb, 0x35, 0x8a, 0x7a, 0x54, 0x0f, 0xb5, 0x04, 0x68, 0x28, 0x18, 0x99, 0xf1, 0xd7, 0x5c, 0x26,
	0x08, 0x7f, 0x50, 0xff, 0x74, 0x37, 0xd5, 0x3f, 0x8d, 0x3f, 0xb4, 0xaa, 0x7b, 0xaa, 0x64, 0xba,
	0xa7, 0x4b, 0x9c, 0x19, 0x74, 0x2f, 0xdd, 0x3b, 0xad, 0x8d, 0x83, 0x0c, 0x3a, 0xa7, 0x2f, 0x61,
	0x63, 0xdc, 0xfa, 0x54, 0x0c, 0x66, 0xcf, 0xd9, 0xe6, 0x58, 0x87, 0x66, 0x8f, 0xda, 0x1d, 0x1f,
	0x16, 0x47, 0xbc, 0x87, 0xa1, 0x25, 0x28, 0x36, 0x8e, 0xcd, 0xba, 0xb5, 0xb7, 0xdf, 0x3e, 0x3c,
	0x6e, 0x58, 0x8d, 0xe3, 0x46, 0xad, 0x78, 0x05, 0x2d, 0x43, 0x29, 0x39, 0xba, 0x77, 0x74, 0x74,
	0xfc, 0xa8, 0x98, 0xcb, 0x2a, 0x57, 0xcd, 0xe3, 0x66, 0xf1, 0x6a, 0x76, 0xb4, 0x56, 0x3d, 0x6c,
	0x17, 0xa7, 0xee, 0xfc, 0x0a, 0x0a, 0xe9, 0xe6, 0x01, 0x95, 0x61, 0xe9, 0xe0, 0xd0, 0xac, 0x3d,
	0xda, 0x3b, 0x3a, 0xca, 0x98, 0x5b, 0x83, 0xe5, 0xac, 0x24, 0x32, 0x39, 0x02, 0x54, 0xad, 0x35,
	0x7e, 0x5e, 0xbc, 0x8a, 0xd6, 0x61, 0x25, 0x2b, 0x31, 0x6b, 0x1f, 0xd7, 0xf6, 0x85, 0xf1, 0x27,
	0x30, 0xa3, 0xfb, 0x2c, 0x54, 0x84, 0x1b, 0x7b, 0xcd, 0xa6, 0xd5, 0xfa, 0x7c, 0x3f, 0xb2, 0x96,
	0x18, 0x69, 0x1f, 0xb4, 0x9b, 0xc5, 0x1c, 0x5a, 0x80, 0xf9, 0x68, 0x44, 0x0c, 0x5c, 0x4d, 0x0e,
	0x54, 0x1b, 0xad, 0xe2, 0x54, 0x72, 0xa0, 0x75, 0xd8, 0x2c, 0x5e, 0xab, 0xfc, 0x69, 0x1a, 0xa0,
	0x71, 0x1e, 0xf9, 0x1d, 0x3d, 0x1e, 0x7a, 0x4a, 0xdb, 0x0f, 0xb1, 0x28, 0x29, 0xb7, 0xc6, 0xbd,
	0x30, 0x45, 0xa7, 0x64, 0xfd, 0xf6, 0xc5, 0x6f, 0x50, 0x75, 0xd6, 0x31, 0xae, 0x8c, 0xe0, 0xff,
	0x8c, 0xba, 0x2f, 0x90, 0xff, 0xeb, 0x21, 0x7e, 0x95, 0xa3, 0xd0, 0xff, 0x5d, 0xe2, 0xd9, 0x48,
	0x58, 0x79, 0xed, 0x62, 0xbd, 0xa4, 0x2d, 0x3b, 0x3e, 0xdc, 0x71, 0x9f, 0x8f, 0x5e, 0x9e, 0xf4,
	0xc2, 0x22, 0xac, 0xbc, 0x32, 0xf1, 0x9d, 0x40, 0x99, 0xf8, 0x22, 0x73, 0xbf, 0xea, 0xcd, 0xb8,
	0x35, 0xfa, 0x5a, 0x1a, 0xd0, 0x6f, 0x5e, 0x74, 0x6d, 0x8d, 0x66, 0xd6, 0xdb, 0xf0, 0x02, 0x98,
	0xdd, 0x0c, 0xb3, 0xde, 0x80, 0x57, 0x26, 0xde, 0x33, 0x82, 0xff, 0xd5, 0x8b, 0xb4, 0x92, 0x56,
	0x7e, 0x01, 0xc5, 0x6c, 0xb2, 0x40, 0xb7, 0x2f, 0x4e, 0xcb, 0x82, 0xdf, 0x98, 0x90, 0x68, 0x24,
	0xf9, 0x47, 0xf0, 0xe5, 0xec, 0xa9, 0xed, 0xc9, 0xd7, 0x98, 0xa7, 0xd3, 0xf2, 0xcf, 0x3b, 0xff,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x83, 0x1c, 0x27, 0xf6, 0x64, 0x21, 0x00, 0x00,
}
