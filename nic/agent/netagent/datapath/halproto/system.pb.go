// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: system.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ApiCounter int32

const (
	ApiCounter_API_COUNTER_NONE                                    ApiCounter = 0
	ApiCounter_API_COUNTER_VRF_CREATE                              ApiCounter = 1
	ApiCounter_API_COUNTER_VRF_UPDATE                              ApiCounter = 2
	ApiCounter_API_COUNTER_VRF_DELETE                              ApiCounter = 3
	ApiCounter_API_COUNTER_VRF_GET                                 ApiCounter = 4
	ApiCounter_API_COUNTER_ACL_CREATE                              ApiCounter = 5
	ApiCounter_API_COUNTER_ACL_UPDATE                              ApiCounter = 6
	ApiCounter_API_COUNTER_ACL_DELETE                              ApiCounter = 7
	ApiCounter_API_COUNTER_ACL_GET                                 ApiCounter = 8
	ApiCounter_API_COUNTER_CPUCB_CREATE                            ApiCounter = 9
	ApiCounter_API_COUNTER_CPUCB_UPDATE                            ApiCounter = 10
	ApiCounter_API_COUNTER_CPUCB_DELETE                            ApiCounter = 11
	ApiCounter_API_COUNTER_CPUCB_GET                               ApiCounter = 12
	ApiCounter_API_COUNTER_CRYPTOAPI_INVOKE                        ApiCounter = 13
	ApiCounter_API_COUNTER_CRYPTOKEY_CREATE                        ApiCounter = 14
	ApiCounter_API_COUNTER_CRYPTOKEY_UPDATE                        ApiCounter = 15
	ApiCounter_API_COUNTER_CRYPTOKEY_DELETE                        ApiCounter = 16
	ApiCounter_API_COUNTER_CRYPTOKEY_READ                          ApiCounter = 17
	ApiCounter_API_COUNTER_DESCRAOL_GET                            ApiCounter = 18
	ApiCounter_API_COUNTER_ENDPOINT_CREATE                         ApiCounter = 19
	ApiCounter_API_COUNTER_ENDPOINT_UPDATE                         ApiCounter = 20
	ApiCounter_API_COUNTER_ENDPOINT_DELETE                         ApiCounter = 21
	ApiCounter_API_COUNTER_ENDPOINT_GET                            ApiCounter = 22
	ApiCounter_API_COUNTER_GFT_EXACT_MATCH_PROFILE_CREATE          ApiCounter = 23
	ApiCounter_API_COUNTER_GFT_HEADER_TRANSPOSITION_PROFILE_CREATE ApiCounter = 24
	ApiCounter_API_COUNTER_GFT_EXACT_MATCH_FLOW_ENTRY_CREATE       ApiCounter = 25
	ApiCounter_API_COUNTER_GETPROGRAM_ADDRESS                      ApiCounter = 26
	ApiCounter_API_COUNTER_ALLOCHBM_ADDRESS                        ApiCounter = 27
	ApiCounter_API_COUNTER_CONFIGURELIF_BDF                        ApiCounter = 28
	ApiCounter_API_COUNTER_IPSECCB_CREATE                          ApiCounter = 29
	ApiCounter_API_COUNTER_IPSECCB_UPDATE                          ApiCounter = 30
	ApiCounter_API_COUNTER_IPSECCB_DELETE                          ApiCounter = 31
	ApiCounter_API_COUNTER_IPSECCB_GET                             ApiCounter = 32
	ApiCounter_API_COUNTER_L2SEGMENT_CREATE                        ApiCounter = 33
	ApiCounter_API_COUNTER_L2SEGMENT_UPDATE                        ApiCounter = 34
	ApiCounter_API_COUNTER_L2SEGMENT_DELETE                        ApiCounter = 35
	ApiCounter_API_COUNTER_L2SEGMENT_GET                           ApiCounter = 36
	ApiCounter_API_COUNTER_L4LBSERVICE_CREATE                      ApiCounter = 37
	ApiCounter_API_COUNTER_MULTICASTENTRY_CREATE                   ApiCounter = 38
	ApiCounter_API_COUNTER_MULTICASTENTRY_UPDATE                   ApiCounter = 39
	ApiCounter_API_COUNTER_MULTICASTENTRY_DELETE                   ApiCounter = 40
	ApiCounter_API_COUNTER_MULTICASTENTRY_GET                      ApiCounter = 41
	ApiCounter_API_COUNTER_SECURITYPROFILE_CREATE                  ApiCounter = 42
	ApiCounter_API_COUNTER_SECURITYPROFILE_UPDATE                  ApiCounter = 43
	ApiCounter_API_COUNTER_SECURITYPROFILE_DELETE                  ApiCounter = 44
	ApiCounter_API_COUNTER_SECURITYPROFILE_GET                     ApiCounter = 45
	ApiCounter_API_COUNTER_SECURITYGROUPPOLICY_CREATE              ApiCounter = 46
	ApiCounter_API_COUNTER_SECURITYGROUPPOLICY_UPDATE              ApiCounter = 47
	ApiCounter_API_COUNTER_SECURITYGROUPPOLICY_DELETE              ApiCounter = 48
	ApiCounter_API_COUNTER_SECURITYGROUPPOLICY_GET                 ApiCounter = 49
	ApiCounter_API_COUNTER_SECURITYGROUP_CREATE                    ApiCounter = 50
	ApiCounter_API_COUNTER_SECURITYGROUP_UPDATE                    ApiCounter = 51
	ApiCounter_API_COUNTER_SECURITYGROUP_DELETE                    ApiCounter = 52
	ApiCounter_API_COUNTER_SECURITYGROUP_GET                       ApiCounter = 53
	ApiCounter_API_COUNTER_DOSPOLICY_CREATE                        ApiCounter = 54
	ApiCounter_API_COUNTER_DOSPOLICY_UPDATE                        ApiCounter = 55
	ApiCounter_API_COUNTER_DOSPOLICY_DELETE                        ApiCounter = 56
	ApiCounter_API_COUNTER_DOSPOLICY_GET                           ApiCounter = 57
	ApiCounter_API_COUNTER_PROXYCCB_CREATE                         ApiCounter = 58
	ApiCounter_API_COUNTER_PROXYCCB_UPDATE                         ApiCounter = 59
	ApiCounter_API_COUNTER_PROXYCCB_DELETE                         ApiCounter = 60
	ApiCounter_API_COUNTER_PROXYCCB_GET                            ApiCounter = 61
	ApiCounter_API_COUNTER_PROXYRCB_CREATE                         ApiCounter = 62
	ApiCounter_API_COUNTER_PROXYRCB_UPDATE                         ApiCounter = 63
	ApiCounter_API_COUNTER_PROXYRCB_DELETE                         ApiCounter = 64
	ApiCounter_API_COUNTER_PROXYRCB_GET                            ApiCounter = 65
	ApiCounter_API_COUNTER_QOSCLASS_CREATE                         ApiCounter = 66
	ApiCounter_API_COUNTER_QOSCLASS_UPDATE                         ApiCounter = 67
	ApiCounter_API_COUNTER_QOSCLASS_DELETE                         ApiCounter = 68
	ApiCounter_API_COUNTER_QOSCLASS_GET                            ApiCounter = 69
	ApiCounter_API_COUNTER_COPP_UPDATE                             ApiCounter = 70
	ApiCounter_API_COUNTER_COPP_GET                                ApiCounter = 71
	ApiCounter_API_COUNTER_RAWCCB_CREATE                           ApiCounter = 72
	ApiCounter_API_COUNTER_RAWCCB_UPDATE                           ApiCounter = 73
	ApiCounter_API_COUNTER_RAWCCB_DELETE                           ApiCounter = 74
	ApiCounter_API_COUNTER_RAWCCB_GET                              ApiCounter = 75
	ApiCounter_API_COUNTER_TCPCB_CREATE                            ApiCounter = 76
	ApiCounter_API_COUNTER_TCPCB_UPDATE                            ApiCounter = 77
	ApiCounter_API_COUNTER_TCPCB_DELETE                            ApiCounter = 78
	ApiCounter_API_COUNTER_TCPCB_GET                               ApiCounter = 79
	ApiCounter_API_COUNTER_TLSCB_CREATE                            ApiCounter = 80
	ApiCounter_API_COUNTER_TLSCB_UPDATE                            ApiCounter = 81
	ApiCounter_API_COUNTER_TLSCB_DELETE                            ApiCounter = 82
	ApiCounter_API_COUNTER_TLSCB_GET                               ApiCounter = 83
	ApiCounter_API_COUNTER_MAX                                     ApiCounter = 84
)

var ApiCounter_name = map[int32]string{
	0:  "API_COUNTER_NONE",
	1:  "API_COUNTER_VRF_CREATE",
	2:  "API_COUNTER_VRF_UPDATE",
	3:  "API_COUNTER_VRF_DELETE",
	4:  "API_COUNTER_VRF_GET",
	5:  "API_COUNTER_ACL_CREATE",
	6:  "API_COUNTER_ACL_UPDATE",
	7:  "API_COUNTER_ACL_DELETE",
	8:  "API_COUNTER_ACL_GET",
	9:  "API_COUNTER_CPUCB_CREATE",
	10: "API_COUNTER_CPUCB_UPDATE",
	11: "API_COUNTER_CPUCB_DELETE",
	12: "API_COUNTER_CPUCB_GET",
	13: "API_COUNTER_CRYPTOAPI_INVOKE",
	14: "API_COUNTER_CRYPTOKEY_CREATE",
	15: "API_COUNTER_CRYPTOKEY_UPDATE",
	16: "API_COUNTER_CRYPTOKEY_DELETE",
	17: "API_COUNTER_CRYPTOKEY_READ",
	18: "API_COUNTER_DESCRAOL_GET",
	19: "API_COUNTER_ENDPOINT_CREATE",
	20: "API_COUNTER_ENDPOINT_UPDATE",
	21: "API_COUNTER_ENDPOINT_DELETE",
	22: "API_COUNTER_ENDPOINT_GET",
	23: "API_COUNTER_GFT_EXACT_MATCH_PROFILE_CREATE",
	24: "API_COUNTER_GFT_HEADER_TRANSPOSITION_PROFILE_CREATE",
	25: "API_COUNTER_GFT_EXACT_MATCH_FLOW_ENTRY_CREATE",
	26: "API_COUNTER_GETPROGRAM_ADDRESS",
	27: "API_COUNTER_ALLOCHBM_ADDRESS",
	28: "API_COUNTER_CONFIGURELIF_BDF",
	29: "API_COUNTER_IPSECCB_CREATE",
	30: "API_COUNTER_IPSECCB_UPDATE",
	31: "API_COUNTER_IPSECCB_DELETE",
	32: "API_COUNTER_IPSECCB_GET",
	33: "API_COUNTER_L2SEGMENT_CREATE",
	34: "API_COUNTER_L2SEGMENT_UPDATE",
	35: "API_COUNTER_L2SEGMENT_DELETE",
	36: "API_COUNTER_L2SEGMENT_GET",
	37: "API_COUNTER_L4LBSERVICE_CREATE",
	38: "API_COUNTER_MULTICASTENTRY_CREATE",
	39: "API_COUNTER_MULTICASTENTRY_UPDATE",
	40: "API_COUNTER_MULTICASTENTRY_DELETE",
	41: "API_COUNTER_MULTICASTENTRY_GET",
	42: "API_COUNTER_SECURITYPROFILE_CREATE",
	43: "API_COUNTER_SECURITYPROFILE_UPDATE",
	44: "API_COUNTER_SECURITYPROFILE_DELETE",
	45: "API_COUNTER_SECURITYPROFILE_GET",
	46: "API_COUNTER_SECURITYGROUPPOLICY_CREATE",
	47: "API_COUNTER_SECURITYGROUPPOLICY_UPDATE",
	48: "API_COUNTER_SECURITYGROUPPOLICY_DELETE",
	49: "API_COUNTER_SECURITYGROUPPOLICY_GET",
	50: "API_COUNTER_SECURITYGROUP_CREATE",
	51: "API_COUNTER_SECURITYGROUP_UPDATE",
	52: "API_COUNTER_SECURITYGROUP_DELETE",
	53: "API_COUNTER_SECURITYGROUP_GET",
	54: "API_COUNTER_DOSPOLICY_CREATE",
	55: "API_COUNTER_DOSPOLICY_UPDATE",
	56: "API_COUNTER_DOSPOLICY_DELETE",
	57: "API_COUNTER_DOSPOLICY_GET",
	58: "API_COUNTER_PROXYCCB_CREATE",
	59: "API_COUNTER_PROXYCCB_UPDATE",
	60: "API_COUNTER_PROXYCCB_DELETE",
	61: "API_COUNTER_PROXYCCB_GET",
	62: "API_COUNTER_PROXYRCB_CREATE",
	63: "API_COUNTER_PROXYRCB_UPDATE",
	64: "API_COUNTER_PROXYRCB_DELETE",
	65: "API_COUNTER_PROXYRCB_GET",
	66: "API_COUNTER_QOSCLASS_CREATE",
	67: "API_COUNTER_QOSCLASS_UPDATE",
	68: "API_COUNTER_QOSCLASS_DELETE",
	69: "API_COUNTER_QOSCLASS_GET",
	70: "API_COUNTER_COPP_UPDATE",
	71: "API_COUNTER_COPP_GET",
	72: "API_COUNTER_RAWCCB_CREATE",
	73: "API_COUNTER_RAWCCB_UPDATE",
	74: "API_COUNTER_RAWCCB_DELETE",
	75: "API_COUNTER_RAWCCB_GET",
	76: "API_COUNTER_TCPCB_CREATE",
	77: "API_COUNTER_TCPCB_UPDATE",
	78: "API_COUNTER_TCPCB_DELETE",
	79: "API_COUNTER_TCPCB_GET",
	80: "API_COUNTER_TLSCB_CREATE",
	81: "API_COUNTER_TLSCB_UPDATE",
	82: "API_COUNTER_TLSCB_DELETE",
	83: "API_COUNTER_TLSCB_GET",
	84: "API_COUNTER_MAX",
}
var ApiCounter_value = map[string]int32{
	"API_COUNTER_NONE":                                    0,
	"API_COUNTER_VRF_CREATE":                              1,
	"API_COUNTER_VRF_UPDATE":                              2,
	"API_COUNTER_VRF_DELETE":                              3,
	"API_COUNTER_VRF_GET":                                 4,
	"API_COUNTER_ACL_CREATE":                              5,
	"API_COUNTER_ACL_UPDATE":                              6,
	"API_COUNTER_ACL_DELETE":                              7,
	"API_COUNTER_ACL_GET":                                 8,
	"API_COUNTER_CPUCB_CREATE":                            9,
	"API_COUNTER_CPUCB_UPDATE":                            10,
	"API_COUNTER_CPUCB_DELETE":                            11,
	"API_COUNTER_CPUCB_GET":                               12,
	"API_COUNTER_CRYPTOAPI_INVOKE":                        13,
	"API_COUNTER_CRYPTOKEY_CREATE":                        14,
	"API_COUNTER_CRYPTOKEY_UPDATE":                        15,
	"API_COUNTER_CRYPTOKEY_DELETE":                        16,
	"API_COUNTER_CRYPTOKEY_READ":                          17,
	"API_COUNTER_DESCRAOL_GET":                            18,
	"API_COUNTER_ENDPOINT_CREATE":                         19,
	"API_COUNTER_ENDPOINT_UPDATE":                         20,
	"API_COUNTER_ENDPOINT_DELETE":                         21,
	"API_COUNTER_ENDPOINT_GET":                            22,
	"API_COUNTER_GFT_EXACT_MATCH_PROFILE_CREATE":          23,
	"API_COUNTER_GFT_HEADER_TRANSPOSITION_PROFILE_CREATE": 24,
	"API_COUNTER_GFT_EXACT_MATCH_FLOW_ENTRY_CREATE":       25,
	"API_COUNTER_GETPROGRAM_ADDRESS":                      26,
	"API_COUNTER_ALLOCHBM_ADDRESS":                        27,
	"API_COUNTER_CONFIGURELIF_BDF":                        28,
	"API_COUNTER_IPSECCB_CREATE":                          29,
	"API_COUNTER_IPSECCB_UPDATE":                          30,
	"API_COUNTER_IPSECCB_DELETE":                          31,
	"API_COUNTER_IPSECCB_GET":                             32,
	"API_COUNTER_L2SEGMENT_CREATE":                        33,
	"API_COUNTER_L2SEGMENT_UPDATE":                        34,
	"API_COUNTER_L2SEGMENT_DELETE":                        35,
	"API_COUNTER_L2SEGMENT_GET":                           36,
	"API_COUNTER_L4LBSERVICE_CREATE":                      37,
	"API_COUNTER_MULTICASTENTRY_CREATE":                   38,
	"API_COUNTER_MULTICASTENTRY_UPDATE":                   39,
	"API_COUNTER_MULTICASTENTRY_DELETE":                   40,
	"API_COUNTER_MULTICASTENTRY_GET":                      41,
	"API_COUNTER_SECURITYPROFILE_CREATE":                  42,
	"API_COUNTER_SECURITYPROFILE_UPDATE":                  43,
	"API_COUNTER_SECURITYPROFILE_DELETE":                  44,
	"API_COUNTER_SECURITYPROFILE_GET":                     45,
	"API_COUNTER_SECURITYGROUPPOLICY_CREATE":              46,
	"API_COUNTER_SECURITYGROUPPOLICY_UPDATE":              47,
	"API_COUNTER_SECURITYGROUPPOLICY_DELETE":              48,
	"API_COUNTER_SECURITYGROUPPOLICY_GET":                 49,
	"API_COUNTER_SECURITYGROUP_CREATE":                    50,
	"API_COUNTER_SECURITYGROUP_UPDATE":                    51,
	"API_COUNTER_SECURITYGROUP_DELETE":                    52,
	"API_COUNTER_SECURITYGROUP_GET":                       53,
	"API_COUNTER_DOSPOLICY_CREATE":                        54,
	"API_COUNTER_DOSPOLICY_UPDATE":                        55,
	"API_COUNTER_DOSPOLICY_DELETE":                        56,
	"API_COUNTER_DOSPOLICY_GET":                           57,
	"API_COUNTER_PROXYCCB_CREATE":                         58,
	"API_COUNTER_PROXYCCB_UPDATE":                         59,
	"API_COUNTER_PROXYCCB_DELETE":                         60,
	"API_COUNTER_PROXYCCB_GET":                            61,
	"API_COUNTER_PROXYRCB_CREATE":                         62,
	"API_COUNTER_PROXYRCB_UPDATE":                         63,
	"API_COUNTER_PROXYRCB_DELETE":                         64,
	"API_COUNTER_PROXYRCB_GET":                            65,
	"API_COUNTER_QOSCLASS_CREATE":                         66,
	"API_COUNTER_QOSCLASS_UPDATE":                         67,
	"API_COUNTER_QOSCLASS_DELETE":                         68,
	"API_COUNTER_QOSCLASS_GET":                            69,
	"API_COUNTER_COPP_UPDATE":                             70,
	"API_COUNTER_COPP_GET":                                71,
	"API_COUNTER_RAWCCB_CREATE":                           72,
	"API_COUNTER_RAWCCB_UPDATE":                           73,
	"API_COUNTER_RAWCCB_DELETE":                           74,
	"API_COUNTER_RAWCCB_GET":                              75,
	"API_COUNTER_TCPCB_CREATE":                            76,
	"API_COUNTER_TCPCB_UPDATE":                            77,
	"API_COUNTER_TCPCB_DELETE":                            78,
	"API_COUNTER_TCPCB_GET":                               79,
	"API_COUNTER_TLSCB_CREATE":                            80,
	"API_COUNTER_TLSCB_UPDATE":                            81,
	"API_COUNTER_TLSCB_DELETE":                            82,
	"API_COUNTER_TLSCB_GET":                               83,
	"API_COUNTER_MAX":                                     84,
}

func (x ApiCounter) String() string {
	return proto.EnumName(ApiCounter_name, int32(x))
}
func (ApiCounter) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{0} }

// Table types
type TableType int32

const (
	TableType_TABLE_TYPE_NONE      TableType = 0
	TableType_TABLE_TYPE_INDEX     TableType = 1
	TableType_TABLE_TYPE_HASH      TableType = 2
	TableType_TABLE_TYPE_HASH_TCAM TableType = 3
	TableType_TABLE_TYPE_TCAM      TableType = 4
)

var TableType_name = map[int32]string{
	0: "TABLE_TYPE_NONE",
	1: "TABLE_TYPE_INDEX",
	2: "TABLE_TYPE_HASH",
	3: "TABLE_TYPE_HASH_TCAM",
	4: "TABLE_TYPE_TCAM",
}
var TableType_value = map[string]int32{
	"TABLE_TYPE_NONE":      0,
	"TABLE_TYPE_INDEX":     1,
	"TABLE_TYPE_HASH":      2,
	"TABLE_TYPE_HASH_TCAM": 3,
	"TABLE_TYPE_TCAM":      4,
}

func (x TableType) String() string {
	return proto.EnumName(TableType_name, int32(x))
}
func (TableType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{1} }

type ApiStatsEntry struct {
	ApiType       ApiCounter `protobuf:"varint,1,opt,name=api_type,json=apiType,proto3,enum=sys.ApiCounter" json:"api_type,omitempty"`
	NumApiCall    uint32     `protobuf:"varint,2,opt,name=num_api_call,json=numApiCall,proto3" json:"num_api_call,omitempty"`
	NumApiSuccess uint32     `protobuf:"varint,3,opt,name=num_api_success,json=numApiSuccess,proto3" json:"num_api_success,omitempty"`
	NumApiFail    uint32     `protobuf:"varint,4,opt,name=num_api_fail,json=numApiFail,proto3" json:"num_api_fail,omitempty"`
}

func (m *ApiStatsEntry) Reset()                    { *m = ApiStatsEntry{} }
func (m *ApiStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*ApiStatsEntry) ProtoMessage()               {}
func (*ApiStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{0} }

func (m *ApiStatsEntry) GetApiType() ApiCounter {
	if m != nil {
		return m.ApiType
	}
	return ApiCounter_API_COUNTER_NONE
}

func (m *ApiStatsEntry) GetNumApiCall() uint32 {
	if m != nil {
		return m.NumApiCall
	}
	return 0
}

func (m *ApiStatsEntry) GetNumApiSuccess() uint32 {
	if m != nil {
		return m.NumApiSuccess
	}
	return 0
}

func (m *ApiStatsEntry) GetNumApiFail() uint32 {
	if m != nil {
		return m.NumApiFail
	}
	return 0
}

// API Stats object
type ApiStatsResponse struct {
	ApiEntries []*ApiStatsEntry `protobuf:"bytes,1,rep,name=api_entries,json=apiEntries" json:"api_entries,omitempty"`
}

func (m *ApiStatsResponse) Reset()                    { *m = ApiStatsResponse{} }
func (m *ApiStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*ApiStatsResponse) ProtoMessage()               {}
func (*ApiStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{1} }

func (m *ApiStatsResponse) GetApiEntries() []*ApiStatsEntry {
	if m != nil {
		return m.ApiEntries
	}
	return nil
}

type DropStatsEntry struct {
	DropInputMapping                bool   `protobuf:"varint,1,opt,name=drop_input_mapping,json=dropInputMapping,proto3" json:"drop_input_mapping,omitempty"`
	DropInputMappingDejavu          bool   `protobuf:"varint,2,opt,name=drop_input_mapping_dejavu,json=dropInputMappingDejavu,proto3" json:"drop_input_mapping_dejavu,omitempty"`
	DropFlowHit                     bool   `protobuf:"varint,3,opt,name=drop_flow_hit,json=dropFlowHit,proto3" json:"drop_flow_hit,omitempty"`
	DropFlowMiss                    bool   `protobuf:"varint,4,opt,name=drop_flow_miss,json=dropFlowMiss,proto3" json:"drop_flow_miss,omitempty"`
	DropIpsg                        bool   `protobuf:"varint,5,opt,name=drop_ipsg,json=dropIpsg,proto3" json:"drop_ipsg,omitempty"`
	DropNacl                        bool   `protobuf:"varint,6,opt,name=drop_nacl,json=dropNacl,proto3" json:"drop_nacl,omitempty"`
	DropMalformedPkt                bool   `protobuf:"varint,7,opt,name=drop_malformed_pkt,json=dropMalformedPkt,proto3" json:"drop_malformed_pkt,omitempty"`
	DropIpNormalization             bool   `protobuf:"varint,8,opt,name=drop_ip_normalization,json=dropIpNormalization,proto3" json:"drop_ip_normalization,omitempty"`
	DropTcpNormalization            bool   `protobuf:"varint,9,opt,name=drop_tcp_normalization,json=dropTcpNormalization,proto3" json:"drop_tcp_normalization,omitempty"`
	DropTcpRstWithInvalidAckNum     bool   `protobuf:"varint,10,opt,name=drop_tcp_rst_with_invalid_ack_num,json=dropTcpRstWithInvalidAckNum,proto3" json:"drop_tcp_rst_with_invalid_ack_num,omitempty"`
	DropTcpNonSynFirstPkt           bool   `protobuf:"varint,11,opt,name=drop_tcp_non_syn_first_pkt,json=dropTcpNonSynFirstPkt,proto3" json:"drop_tcp_non_syn_first_pkt,omitempty"`
	DropIcmpNormalization           bool   `protobuf:"varint,12,opt,name=drop_icmp_normalization,json=dropIcmpNormalization,proto3" json:"drop_icmp_normalization,omitempty"`
	DropInputPropertiesMiss         bool   `protobuf:"varint,13,opt,name=drop_input_properties_miss,json=dropInputPropertiesMiss,proto3" json:"drop_input_properties_miss,omitempty"`
	DropTcpOutOfWindow              bool   `protobuf:"varint,14,opt,name=drop_tcp_out_of_window,json=dropTcpOutOfWindow,proto3" json:"drop_tcp_out_of_window,omitempty"`
	DropTcpSplitHandshake           bool   `protobuf:"varint,15,opt,name=drop_tcp_split_handshake,json=dropTcpSplitHandshake,proto3" json:"drop_tcp_split_handshake,omitempty"`
	DropTcpWinZeroDrop              bool   `protobuf:"varint,16,opt,name=drop_tcp_win_zero_drop,json=dropTcpWinZeroDrop,proto3" json:"drop_tcp_win_zero_drop,omitempty"`
	DropTcpDataAfterFin             bool   `protobuf:"varint,17,opt,name=drop_tcp_data_after_fin,json=dropTcpDataAfterFin,proto3" json:"drop_tcp_data_after_fin,omitempty"`
	DropTcpNonRstPktAfterRst        bool   `protobuf:"varint,18,opt,name=drop_tcp_non_rst_pkt_after_rst,json=dropTcpNonRstPktAfterRst,proto3" json:"drop_tcp_non_rst_pkt_after_rst,omitempty"`
	DropTcpInvalidResponderFirstPkt bool   `protobuf:"varint,19,opt,name=drop_tcp_invalid_responder_first_pkt,json=dropTcpInvalidResponderFirstPkt,proto3" json:"drop_tcp_invalid_responder_first_pkt,omitempty"`
	DropTcpUnexpectedPkt            bool   `protobuf:"varint,20,opt,name=drop_tcp_unexpected_pkt,json=dropTcpUnexpectedPkt,proto3" json:"drop_tcp_unexpected_pkt,omitempty"`
	DropSrcLifMismatch              bool   `protobuf:"varint,21,opt,name=drop_src_lif_mismatch,json=dropSrcLifMismatch,proto3" json:"drop_src_lif_mismatch,omitempty"`
	DropParserIcrcError             bool   `protobuf:"varint,22,opt,name=drop_parser_icrc_error,json=dropParserIcrcError,proto3" json:"drop_parser_icrc_error,omitempty"`
	DropParseLenError               bool   `protobuf:"varint,23,opt,name=drop_parse_len_error,json=dropParseLenError,proto3" json:"drop_parse_len_error,omitempty"`
	DropHardwareError               bool   `protobuf:"varint,24,opt,name=drop_hardware_error,json=dropHardwareError,proto3" json:"drop_hardware_error,omitempty"`
	DropCount                       uint64 `protobuf:"varint,25,opt,name=drop_count,json=dropCount,proto3" json:"drop_count,omitempty"`
}

func (m *DropStatsEntry) Reset()                    { *m = DropStatsEntry{} }
func (m *DropStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*DropStatsEntry) ProtoMessage()               {}
func (*DropStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{2} }

func (m *DropStatsEntry) GetDropInputMapping() bool {
	if m != nil {
		return m.DropInputMapping
	}
	return false
}

func (m *DropStatsEntry) GetDropInputMappingDejavu() bool {
	if m != nil {
		return m.DropInputMappingDejavu
	}
	return false
}

func (m *DropStatsEntry) GetDropFlowHit() bool {
	if m != nil {
		return m.DropFlowHit
	}
	return false
}

func (m *DropStatsEntry) GetDropFlowMiss() bool {
	if m != nil {
		return m.DropFlowMiss
	}
	return false
}

func (m *DropStatsEntry) GetDropIpsg() bool {
	if m != nil {
		return m.DropIpsg
	}
	return false
}

func (m *DropStatsEntry) GetDropNacl() bool {
	if m != nil {
		return m.DropNacl
	}
	return false
}

func (m *DropStatsEntry) GetDropMalformedPkt() bool {
	if m != nil {
		return m.DropMalformedPkt
	}
	return false
}

func (m *DropStatsEntry) GetDropIpNormalization() bool {
	if m != nil {
		return m.DropIpNormalization
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpNormalization() bool {
	if m != nil {
		return m.DropTcpNormalization
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpRstWithInvalidAckNum() bool {
	if m != nil {
		return m.DropTcpRstWithInvalidAckNum
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpNonSynFirstPkt() bool {
	if m != nil {
		return m.DropTcpNonSynFirstPkt
	}
	return false
}

func (m *DropStatsEntry) GetDropIcmpNormalization() bool {
	if m != nil {
		return m.DropIcmpNormalization
	}
	return false
}

func (m *DropStatsEntry) GetDropInputPropertiesMiss() bool {
	if m != nil {
		return m.DropInputPropertiesMiss
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpOutOfWindow() bool {
	if m != nil {
		return m.DropTcpOutOfWindow
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpSplitHandshake() bool {
	if m != nil {
		return m.DropTcpSplitHandshake
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpWinZeroDrop() bool {
	if m != nil {
		return m.DropTcpWinZeroDrop
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpDataAfterFin() bool {
	if m != nil {
		return m.DropTcpDataAfterFin
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpNonRstPktAfterRst() bool {
	if m != nil {
		return m.DropTcpNonRstPktAfterRst
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpInvalidResponderFirstPkt() bool {
	if m != nil {
		return m.DropTcpInvalidResponderFirstPkt
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpUnexpectedPkt() bool {
	if m != nil {
		return m.DropTcpUnexpectedPkt
	}
	return false
}

func (m *DropStatsEntry) GetDropSrcLifMismatch() bool {
	if m != nil {
		return m.DropSrcLifMismatch
	}
	return false
}

func (m *DropStatsEntry) GetDropParserIcrcError() bool {
	if m != nil {
		return m.DropParserIcrcError
	}
	return false
}

func (m *DropStatsEntry) GetDropParseLenError() bool {
	if m != nil {
		return m.DropParseLenError
	}
	return false
}

func (m *DropStatsEntry) GetDropHardwareError() bool {
	if m != nil {
		return m.DropHardwareError
	}
	return false
}

func (m *DropStatsEntry) GetDropCount() uint64 {
	if m != nil {
		return m.DropCount
	}
	return 0
}

// TableStatsEntry captures table specific stats for h/w table health monitoring
type TableStatsEntry struct {
	TableType            TableType `protobuf:"varint,1,opt,name=table_type,json=tableType,proto3,enum=sys.TableType" json:"table_type,omitempty"`
	TableName            string    `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TableSize            uint32    `protobuf:"varint,3,opt,name=table_size,json=tableSize,proto3" json:"table_size,omitempty"`
	OverflowTableSize    uint32    `protobuf:"varint,4,opt,name=overflow_table_size,json=overflowTableSize,proto3" json:"overflow_table_size,omitempty"`
	EntriesInUse         uint32    `protobuf:"varint,5,opt,name=entries_in_use,json=entriesInUse,proto3" json:"entries_in_use,omitempty"`
	OverflowEntriesInUse uint32    `protobuf:"varint,6,opt,name=overflow_entries_in_use,json=overflowEntriesInUse,proto3" json:"overflow_entries_in_use,omitempty"`
	NumInserts           uint32    `protobuf:"varint,7,opt,name=num_inserts,json=numInserts,proto3" json:"num_inserts,omitempty"`
	NumInsertErrors      uint32    `protobuf:"varint,8,opt,name=num_insert_errors,json=numInsertErrors,proto3" json:"num_insert_errors,omitempty"`
	NumDeletes           uint32    `protobuf:"varint,9,opt,name=num_deletes,json=numDeletes,proto3" json:"num_deletes,omitempty"`
	NumDeleteErrors      uint32    `protobuf:"varint,10,opt,name=num_delete_errors,json=numDeleteErrors,proto3" json:"num_delete_errors,omitempty"`
}

func (m *TableStatsEntry) Reset()                    { *m = TableStatsEntry{} }
func (m *TableStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*TableStatsEntry) ProtoMessage()               {}
func (*TableStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{3} }

func (m *TableStatsEntry) GetTableType() TableType {
	if m != nil {
		return m.TableType
	}
	return TableType_TABLE_TYPE_NONE
}

func (m *TableStatsEntry) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *TableStatsEntry) GetTableSize() uint32 {
	if m != nil {
		return m.TableSize
	}
	return 0
}

func (m *TableStatsEntry) GetOverflowTableSize() uint32 {
	if m != nil {
		return m.OverflowTableSize
	}
	return 0
}

func (m *TableStatsEntry) GetEntriesInUse() uint32 {
	if m != nil {
		return m.EntriesInUse
	}
	return 0
}

func (m *TableStatsEntry) GetOverflowEntriesInUse() uint32 {
	if m != nil {
		return m.OverflowEntriesInUse
	}
	return 0
}

func (m *TableStatsEntry) GetNumInserts() uint32 {
	if m != nil {
		return m.NumInserts
	}
	return 0
}

func (m *TableStatsEntry) GetNumInsertErrors() uint32 {
	if m != nil {
		return m.NumInsertErrors
	}
	return 0
}

func (m *TableStatsEntry) GetNumDeletes() uint32 {
	if m != nil {
		return m.NumDeletes
	}
	return 0
}

func (m *TableStatsEntry) GetNumDeleteErrors() uint32 {
	if m != nil {
		return m.NumDeleteErrors
	}
	return 0
}

// TableStats is container for statistics of all tables in the data path
type TableStats struct {
	TableStats []*TableStatsEntry `protobuf:"bytes,1,rep,name=table_stats,json=tableStats" json:"table_stats,omitempty"`
}

func (m *TableStats) Reset()                    { *m = TableStats{} }
func (m *TableStats) String() string            { return proto.CompactTextString(m) }
func (*TableStats) ProtoMessage()               {}
func (*TableStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{4} }

func (m *TableStats) GetTableStats() []*TableStatsEntry {
	if m != nil {
		return m.TableStats
	}
	return nil
}

// Status captures the operating status of various components in the HAL
// including "ready" status, thread health etc.
type Status struct {
	SpanOnDropSessions []*MirrorSessionId `protobuf:"bytes,1,rep,name=span_on_drop_sessions,json=spanOnDropSessions" json:"span_on_drop_sessions,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{5} }

func (m *Status) GetSpanOnDropSessions() []*MirrorSessionId {
	if m != nil {
		return m.SpanOnDropSessions
	}
	return nil
}

// Global system object
type SystemResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Stats     *Stats    `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	Status    *Status   `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *SystemResponse) Reset()                    { *m = SystemResponse{} }
func (m *SystemResponse) String() string            { return proto.CompactTextString(m) }
func (*SystemResponse) ProtoMessage()               {}
func (*SystemResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{6} }

func (m *SystemResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SystemResponse) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *SystemResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Stats object
type Stats struct {
	DropStats  *DropStats  `protobuf:"bytes,1,opt,name=drop_stats,json=dropStats" json:"drop_stats,omitempty"`
	TableStats *TableStats `protobuf:"bytes,2,opt,name=table_stats,json=tableStats" json:"table_stats,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{7} }

func (m *Stats) GetDropStats() *DropStats {
	if m != nil {
		return m.DropStats
	}
	return nil
}

func (m *Stats) GetTableStats() *TableStats {
	if m != nil {
		return m.TableStats
	}
	return nil
}

// Drop Stats object
type DropStats struct {
	DropEntries []*DropStatsEntry `protobuf:"bytes,1,rep,name=drop_entries,json=dropEntries" json:"drop_entries,omitempty"`
}

func (m *DropStats) Reset()                    { *m = DropStats{} }
func (m *DropStats) String() string            { return proto.CompactTextString(m) }
func (*DropStats) ProtoMessage()               {}
func (*DropStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{8} }

func (m *DropStats) GetDropEntries() []*DropStatsEntry {
	if m != nil {
		return m.DropEntries
	}
	return nil
}

type SystemConfigSpec struct {
	SpanOnDropSessions []*MirrorSessionId `protobuf:"bytes,1,rep,name=span_on_drop_sessions,json=spanOnDropSessions" json:"span_on_drop_sessions,omitempty"`
}

func (m *SystemConfigSpec) Reset()                    { *m = SystemConfigSpec{} }
func (m *SystemConfigSpec) String() string            { return proto.CompactTextString(m) }
func (*SystemConfigSpec) ProtoMessage()               {}
func (*SystemConfigSpec) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{9} }

func (m *SystemConfigSpec) GetSpanOnDropSessions() []*MirrorSessionId {
	if m != nil {
		return m.SpanOnDropSessions
	}
	return nil
}

type SystemConfigMsg struct {
	Request []*SystemConfigSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SystemConfigMsg) Reset()                    { *m = SystemConfigMsg{} }
func (m *SystemConfigMsg) String() string            { return proto.CompactTextString(m) }
func (*SystemConfigMsg) ProtoMessage()               {}
func (*SystemConfigMsg) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{10} }

func (m *SystemConfigMsg) GetRequest() []*SystemConfigSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type SystemConfigResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SystemConfigResponse) Reset()                    { *m = SystemConfigResponse{} }
func (m *SystemConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*SystemConfigResponse) ProtoMessage()               {}
func (*SystemConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{11} }

func (m *SystemConfigResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type SystemConfigResponseMsg struct {
	Status   ApiStatus               `protobuf:"varint,1,opt,name=status,proto3,enum=types.ApiStatus" json:"status,omitempty"`
	Response []*SystemConfigResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *SystemConfigResponseMsg) Reset()                    { *m = SystemConfigResponseMsg{} }
func (m *SystemConfigResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SystemConfigResponseMsg) ProtoMessage()               {}
func (*SystemConfigResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{12} }

func (m *SystemConfigResponseMsg) GetStatus() ApiStatus {
	if m != nil {
		return m.Status
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SystemConfigResponseMsg) GetResponse() []*SystemConfigResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*ApiStatsEntry)(nil), "sys.ApiStatsEntry")
	proto.RegisterType((*ApiStatsResponse)(nil), "sys.ApiStatsResponse")
	proto.RegisterType((*DropStatsEntry)(nil), "sys.DropStatsEntry")
	proto.RegisterType((*TableStatsEntry)(nil), "sys.TableStatsEntry")
	proto.RegisterType((*TableStats)(nil), "sys.TableStats")
	proto.RegisterType((*Status)(nil), "sys.Status")
	proto.RegisterType((*SystemResponse)(nil), "sys.SystemResponse")
	proto.RegisterType((*Stats)(nil), "sys.Stats")
	proto.RegisterType((*DropStats)(nil), "sys.DropStats")
	proto.RegisterType((*SystemConfigSpec)(nil), "sys.SystemConfigSpec")
	proto.RegisterType((*SystemConfigMsg)(nil), "sys.SystemConfigMsg")
	proto.RegisterType((*SystemConfigResponse)(nil), "sys.SystemConfigResponse")
	proto.RegisterType((*SystemConfigResponseMsg)(nil), "sys.SystemConfigResponseMsg")
	proto.RegisterEnum("sys.ApiCounter", ApiCounter_name, ApiCounter_value)
	proto.RegisterEnum("sys.TableType", TableType_name, TableType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for System service

type SystemClient interface {
	// System related APIs
	ApiStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ApiStatsResponse, error)
	SystemGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemResponse, error)
	SystemConfig(ctx context.Context, in *SystemConfigMsg, opts ...grpc.CallOption) (*SystemConfigResponseMsg, error)
}

type systemClient struct {
	cc *grpc.ClientConn
}

func NewSystemClient(cc *grpc.ClientConn) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) ApiStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ApiStatsResponse, error) {
	out := new(ApiStatsResponse)
	err := grpc.Invoke(ctx, "/sys.System/ApiStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SystemGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemResponse, error) {
	out := new(SystemResponse)
	err := grpc.Invoke(ctx, "/sys.System/SystemGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SystemConfig(ctx context.Context, in *SystemConfigMsg, opts ...grpc.CallOption) (*SystemConfigResponseMsg, error) {
	out := new(SystemConfigResponseMsg)
	err := grpc.Invoke(ctx, "/sys.System/SystemConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for System service

type SystemServer interface {
	// System related APIs
	ApiStatsGet(context.Context, *Empty) (*ApiStatsResponse, error)
	SystemGet(context.Context, *Empty) (*SystemResponse, error)
	SystemConfig(context.Context, *SystemConfigMsg) (*SystemConfigResponseMsg, error)
}

func RegisterSystemServer(s *grpc.Server, srv SystemServer) {
	s.RegisterService(&_System_serviceDesc, srv)
}

func _System_ApiStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ApiStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/ApiStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ApiStatsGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SystemGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SystemGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/SystemGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SystemGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemConfigMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/SystemConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SystemConfig(ctx, req.(*SystemConfigMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _System_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sys.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiStatsGet",
			Handler:    _System_ApiStatsGet_Handler,
		},
		{
			MethodName: "SystemGet",
			Handler:    _System_SystemGet_Handler,
		},
		{
			MethodName: "SystemConfig",
			Handler:    _System_SystemConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}

func (m *ApiStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiType))
	}
	if m.NumApiCall != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumApiCall))
	}
	if m.NumApiSuccess != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumApiSuccess))
	}
	if m.NumApiFail != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumApiFail))
	}
	return i, nil
}

func (m *ApiStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiEntries) > 0 {
		for _, msg := range m.ApiEntries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DropStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DropInputMapping {
		dAtA[i] = 0x8
		i++
		if m.DropInputMapping {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropInputMappingDejavu {
		dAtA[i] = 0x10
		i++
		if m.DropInputMappingDejavu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropFlowHit {
		dAtA[i] = 0x18
		i++
		if m.DropFlowHit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropFlowMiss {
		dAtA[i] = 0x20
		i++
		if m.DropFlowMiss {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIpsg {
		dAtA[i] = 0x28
		i++
		if m.DropIpsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropNacl {
		dAtA[i] = 0x30
		i++
		if m.DropNacl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropMalformedPkt {
		dAtA[i] = 0x38
		i++
		if m.DropMalformedPkt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIpNormalization {
		dAtA[i] = 0x40
		i++
		if m.DropIpNormalization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpNormalization {
		dAtA[i] = 0x48
		i++
		if m.DropTcpNormalization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpRstWithInvalidAckNum {
		dAtA[i] = 0x50
		i++
		if m.DropTcpRstWithInvalidAckNum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpNonSynFirstPkt {
		dAtA[i] = 0x58
		i++
		if m.DropTcpNonSynFirstPkt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIcmpNormalization {
		dAtA[i] = 0x60
		i++
		if m.DropIcmpNormalization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropInputPropertiesMiss {
		dAtA[i] = 0x68
		i++
		if m.DropInputPropertiesMiss {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpOutOfWindow {
		dAtA[i] = 0x70
		i++
		if m.DropTcpOutOfWindow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpSplitHandshake {
		dAtA[i] = 0x78
		i++
		if m.DropTcpSplitHandshake {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpWinZeroDrop {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpWinZeroDrop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpDataAfterFin {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpDataAfterFin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpNonRstPktAfterRst {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpNonRstPktAfterRst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpInvalidResponderFirstPkt {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpInvalidResponderFirstPkt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpUnexpectedPkt {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpUnexpectedPkt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropSrcLifMismatch {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.DropSrcLifMismatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropParserIcrcError {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropParserIcrcError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropParseLenError {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.DropParseLenError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropHardwareError {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropHardwareError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropCount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropCount))
	}
	return i, nil
}

func (m *TableStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TableType))
	}
	if len(m.TableName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(len(m.TableName)))
		i += copy(dAtA[i:], m.TableName)
	}
	if m.TableSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TableSize))
	}
	if m.OverflowTableSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.OverflowTableSize))
	}
	if m.EntriesInUse != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.EntriesInUse))
	}
	if m.OverflowEntriesInUse != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.OverflowEntriesInUse))
	}
	if m.NumInserts != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumInserts))
	}
	if m.NumInsertErrors != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumInsertErrors))
	}
	if m.NumDeletes != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumDeletes))
	}
	if m.NumDeleteErrors != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumDeleteErrors))
	}
	return i, nil
}

func (m *TableStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TableStats) > 0 {
		for _, msg := range m.TableStats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpanOnDropSessions) > 0 {
		for _, msg := range m.SpanOnDropSessions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SystemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Stats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Stats.Size()))
		n1, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Status.Size()))
		n2, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DropStats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropStats.Size()))
		n3, err := m.DropStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.TableStats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TableStats.Size()))
		n4, err := m.TableStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *DropStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DropEntries) > 0 {
		for _, msg := range m.DropEntries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SystemConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpanOnDropSessions) > 0 {
		for _, msg := range m.SpanOnDropSessions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SystemConfigMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfigMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SystemConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *SystemConfigResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfigResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Status))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSystem(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ApiStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.ApiType != 0 {
		n += 1 + sovSystem(uint64(m.ApiType))
	}
	if m.NumApiCall != 0 {
		n += 1 + sovSystem(uint64(m.NumApiCall))
	}
	if m.NumApiSuccess != 0 {
		n += 1 + sovSystem(uint64(m.NumApiSuccess))
	}
	if m.NumApiFail != 0 {
		n += 1 + sovSystem(uint64(m.NumApiFail))
	}
	return n
}

func (m *ApiStatsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiEntries) > 0 {
		for _, e := range m.ApiEntries {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *DropStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.DropInputMapping {
		n += 2
	}
	if m.DropInputMappingDejavu {
		n += 2
	}
	if m.DropFlowHit {
		n += 2
	}
	if m.DropFlowMiss {
		n += 2
	}
	if m.DropIpsg {
		n += 2
	}
	if m.DropNacl {
		n += 2
	}
	if m.DropMalformedPkt {
		n += 2
	}
	if m.DropIpNormalization {
		n += 2
	}
	if m.DropTcpNormalization {
		n += 2
	}
	if m.DropTcpRstWithInvalidAckNum {
		n += 2
	}
	if m.DropTcpNonSynFirstPkt {
		n += 2
	}
	if m.DropIcmpNormalization {
		n += 2
	}
	if m.DropInputPropertiesMiss {
		n += 2
	}
	if m.DropTcpOutOfWindow {
		n += 2
	}
	if m.DropTcpSplitHandshake {
		n += 2
	}
	if m.DropTcpWinZeroDrop {
		n += 3
	}
	if m.DropTcpDataAfterFin {
		n += 3
	}
	if m.DropTcpNonRstPktAfterRst {
		n += 3
	}
	if m.DropTcpInvalidResponderFirstPkt {
		n += 3
	}
	if m.DropTcpUnexpectedPkt {
		n += 3
	}
	if m.DropSrcLifMismatch {
		n += 3
	}
	if m.DropParserIcrcError {
		n += 3
	}
	if m.DropParseLenError {
		n += 3
	}
	if m.DropHardwareError {
		n += 3
	}
	if m.DropCount != 0 {
		n += 2 + sovSystem(uint64(m.DropCount))
	}
	return n
}

func (m *TableStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.TableType != 0 {
		n += 1 + sovSystem(uint64(m.TableType))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.TableSize != 0 {
		n += 1 + sovSystem(uint64(m.TableSize))
	}
	if m.OverflowTableSize != 0 {
		n += 1 + sovSystem(uint64(m.OverflowTableSize))
	}
	if m.EntriesInUse != 0 {
		n += 1 + sovSystem(uint64(m.EntriesInUse))
	}
	if m.OverflowEntriesInUse != 0 {
		n += 1 + sovSystem(uint64(m.OverflowEntriesInUse))
	}
	if m.NumInserts != 0 {
		n += 1 + sovSystem(uint64(m.NumInserts))
	}
	if m.NumInsertErrors != 0 {
		n += 1 + sovSystem(uint64(m.NumInsertErrors))
	}
	if m.NumDeletes != 0 {
		n += 1 + sovSystem(uint64(m.NumDeletes))
	}
	if m.NumDeleteErrors != 0 {
		n += 1 + sovSystem(uint64(m.NumDeleteErrors))
	}
	return n
}

func (m *TableStats) Size() (n int) {
	var l int
	_ = l
	if len(m.TableStats) > 0 {
		for _, e := range m.TableStats {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if len(m.SpanOnDropSessions) > 0 {
		for _, e := range m.SpanOnDropSessions {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *Stats) Size() (n int) {
	var l int
	_ = l
	if m.DropStats != nil {
		l = m.DropStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.TableStats != nil {
		l = m.TableStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *DropStats) Size() (n int) {
	var l int
	_ = l
	if len(m.DropEntries) > 0 {
		for _, e := range m.DropEntries {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemConfigSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.SpanOnDropSessions) > 0 {
		for _, e := range m.SpanOnDropSessions {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemConfigMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	return n
}

func (m *SystemConfigResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSystem(uint64(m.Status))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func sovSystem(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSystem(x uint64) (n int) {
	return sovSystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApiStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiType", wireType)
			}
			m.ApiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiType |= (ApiCounter(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumApiCall", wireType)
			}
			m.NumApiCall = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumApiCall |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumApiSuccess", wireType)
			}
			m.NumApiSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumApiSuccess |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumApiFail", wireType)
			}
			m.NumApiFail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumApiFail |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiEntries = append(m.ApiEntries, &ApiStatsEntry{})
			if err := m.ApiEntries[len(m.ApiEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropInputMapping", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropInputMapping = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropInputMappingDejavu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropInputMappingDejavu = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropFlowHit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropFlowHit = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropFlowMiss", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropFlowMiss = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIpsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIpsg = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropNacl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropNacl = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropMalformedPkt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropMalformedPkt = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIpNormalization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIpNormalization = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpNormalization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpNormalization = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpRstWithInvalidAckNum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpRstWithInvalidAckNum = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpNonSynFirstPkt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpNonSynFirstPkt = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIcmpNormalization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIcmpNormalization = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropInputPropertiesMiss", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropInputPropertiesMiss = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpOutOfWindow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpOutOfWindow = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpSplitHandshake", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpSplitHandshake = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpWinZeroDrop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpWinZeroDrop = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpDataAfterFin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpDataAfterFin = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpNonRstPktAfterRst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpNonRstPktAfterRst = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpInvalidResponderFirstPkt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpInvalidResponderFirstPkt = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpUnexpectedPkt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpUnexpectedPkt = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropSrcLifMismatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropSrcLifMismatch = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropParserIcrcError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropParserIcrcError = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropParseLenError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropParseLenError = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropHardwareError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropHardwareError = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropCount", wireType)
			}
			m.DropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableType", wireType)
			}
			m.TableType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableType |= (TableType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableSize", wireType)
			}
			m.TableSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverflowTableSize", wireType)
			}
			m.OverflowTableSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverflowTableSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntriesInUse", wireType)
			}
			m.EntriesInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntriesInUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverflowEntriesInUse", wireType)
			}
			m.OverflowEntriesInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverflowEntriesInUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInserts", wireType)
			}
			m.NumInserts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInserts |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInsertErrors", wireType)
			}
			m.NumInsertErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInsertErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeletes", wireType)
			}
			m.NumDeletes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeletes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleteErrors", wireType)
			}
			m.NumDeleteErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeleteErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableStats = append(m.TableStats, &TableStatsEntry{})
			if err := m.TableStats[len(m.TableStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanOnDropSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanOnDropSessions = append(m.SpanOnDropSessions, &MirrorSessionId{})
			if err := m.SpanOnDropSessions[len(m.SpanOnDropSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &Stats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropStats == nil {
				m.DropStats = &DropStats{}
			}
			if err := m.DropStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableStats == nil {
				m.TableStats = &TableStats{}
			}
			if err := m.TableStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropEntries = append(m.DropEntries, &DropStatsEntry{})
			if err := m.DropEntries[len(m.DropEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanOnDropSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanOnDropSessions = append(m.SpanOnDropSessions, &MirrorSessionId{})
			if err := m.SpanOnDropSessions[len(m.SpanOnDropSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfigMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfigMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfigMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SystemConfigSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfigResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfigResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfigResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SystemConfigResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSystem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSystem
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSystem
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSystem(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSystem = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSystem   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("system.proto", fileDescriptorSystem) }

var fileDescriptorSystem = []byte{
	// 2156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5b, 0x72, 0xdb, 0xc8,
	0x15, 0x35, 0x2d, 0x5b, 0x96, 0x2e, 0xf5, 0xa0, 0x5b, 0x94, 0x05, 0xc9, 0xb6, 0x2c, 0xd3, 0x1e,
	0x8f, 0xa2, 0x8c, 0xe5, 0x19, 0xf9, 0x15, 0x67, 0xf2, 0x18, 0x08, 0x04, 0x25, 0xc4, 0x24, 0xc1,
	0x01, 0x20, 0xcb, 0x9e, 0x1f, 0x14, 0x06, 0x6c, 0x4a, 0x88, 0x49, 0x00, 0x41, 0x83, 0x56, 0xa4,
	0x15, 0xe4, 0x37, 0x55, 0xf9, 0xc8, 0x06, 0x52, 0xd9, 0x41, 0xd6, 0x90, 0xcf, 0x2c, 0x21, 0xe5,
	0x6c, 0x24, 0xd5, 0x0f, 0x3c, 0x08, 0x11, 0xf6, 0x54, 0x2a, 0x5f, 0xa2, 0xfa, 0x9c, 0x73, 0xef,
	0xe9, 0x7b, 0x1b, 0xdd, 0x0d, 0xc0, 0x02, 0x39, 0x27, 0x31, 0x1e, 0xed, 0x86, 0x51, 0x10, 0x07,
	0x68, 0x86, 0x9c, 0x93, 0x8d, 0x6a, 0x7c, 0x1e, 0x62, 0xc2, 0x47, 0x36, 0x96, 0x63, 0x3c, 0xc4,
	0x23, 0x1c, 0x47, 0xe7, 0x7c, 0xa0, 0xf1, 0xf7, 0x0a, 0x2c, 0xca, 0xa1, 0x67, 0xc6, 0x4e, 0x4c,
	0x54, 0x3f, 0x8e, 0xce, 0xd1, 0x0e, 0xcc, 0x39, 0xa1, 0x67, 0x53, 0x95, 0x54, 0xd9, 0xaa, 0x6c,
	0x2f, 0xed, 0x2d, 0xef, 0x92, 0x73, 0xb2, 0x2b, 0x87, 0x9e, 0x12, 0x8c, 0xfd, 0x18, 0x47, 0xc6,
	0x0d, 0x27, 0xf4, 0xac, 0xf3, 0x10, 0xa3, 0x2d, 0x58, 0xf0, 0xc7, 0x23, 0x9b, 0xf2, 0x5d, 0x67,
	0x38, 0x94, 0xae, 0x6e, 0x55, 0xb6, 0x17, 0x0d, 0xf0, 0xc7, 0x23, 0xca, 0x76, 0x86, 0x43, 0xf4,
	0x08, 0x96, 0x13, 0x06, 0x19, 0xbb, 0x2e, 0x26, 0x44, 0x9a, 0x61, 0xa4, 0x45, 0x4e, 0x32, 0xf9,
	0x60, 0x3e, 0xd2, 0xc0, 0xf1, 0x86, 0xd2, 0xb5, 0x7c, 0xa4, 0x96, 0xe3, 0x0d, 0x1b, 0x07, 0x50,
	0x4b, 0x8c, 0x1a, 0x98, 0x84, 0x81, 0x4f, 0x30, 0x7a, 0x0a, 0x55, 0xaa, 0xc0, 0x7e, 0x1c, 0x79,
	0x98, 0x48, 0x95, 0xad, 0x99, 0xed, 0xea, 0x1e, 0x4a, 0xec, 0x66, 0x93, 0x32, 0xc0, 0x09, 0x3d,
	0x95, 0xb3, 0x1a, 0x7f, 0x01, 0x58, 0x6a, 0x46, 0x41, 0x98, 0x9b, 0xf3, 0x57, 0x80, 0xfa, 0x51,
	0x10, 0xda, 0x9e, 0x1f, 0x8e, 0x63, 0x7b, 0xe4, 0x84, 0xa1, 0xe7, 0x9f, 0xb0, 0xd9, 0xcf, 0x19,
	0x35, 0x8a, 0x68, 0x14, 0xe8, 0xf0, 0x71, 0xf4, 0x0a, 0xd6, 0x2f, 0xb3, 0xed, 0x3e, 0xfe, 0xbd,
	0xf3, 0x61, 0xcc, 0x4a, 0x30, 0x67, 0xdc, 0x2a, 0x8a, 0x9a, 0x0c, 0x45, 0x0d, 0x58, 0x64, 0xd2,
	0xc1, 0x30, 0x38, 0xb3, 0x4f, 0xbd, 0x98, 0x15, 0x63, 0xce, 0xa8, 0xd2, 0xc1, 0xd6, 0x30, 0x38,
	0x3b, 0xf4, 0x62, 0xf4, 0x10, 0x96, 0x32, 0xce, 0xc8, 0x23, 0x84, 0x15, 0x63, 0xce, 0x58, 0x48,
	0x48, 0x1d, 0x8f, 0x10, 0x74, 0x1b, 0xe6, 0xb9, 0x89, 0x90, 0x9c, 0x48, 0xd7, 0x19, 0x61, 0x8e,
	0x25, 0x0d, 0xc9, 0x49, 0x0a, 0xfa, 0x8e, 0x3b, 0x94, 0x66, 0x33, 0xb0, 0xeb, 0xb8, 0xc3, 0x74,
	0xb2, 0x23, 0x67, 0x38, 0x08, 0xa2, 0x11, 0xee, 0xdb, 0xe1, 0xfb, 0x58, 0xba, 0x91, 0x4d, 0xb6,
	0x93, 0x00, 0xbd, 0xf7, 0x31, 0xda, 0x83, 0x55, 0x91, 0xc7, 0xf6, 0x83, 0x68, 0xe4, 0x0c, 0xbd,
	0x0b, 0x27, 0xf6, 0x02, 0x5f, 0x9a, 0x63, 0x82, 0x15, 0x9e, 0xb3, 0x9b, 0x87, 0xd0, 0x33, 0x60,
	0xf3, 0xb7, 0x63, 0xb7, 0x28, 0x9a, 0x67, 0xa2, 0x3a, 0x45, 0x2d, 0xb7, 0xa0, 0x6a, 0xc1, 0xfd,
	0x54, 0x15, 0x91, 0xd8, 0x3e, 0xf3, 0xe2, 0x53, 0xdb, 0xf3, 0x3f, 0x38, 0x43, 0xaf, 0x6f, 0x3b,
	0xee, 0x7b, 0xdb, 0x1f, 0x8f, 0x24, 0x60, 0x01, 0x6e, 0x8b, 0x00, 0x06, 0x89, 0x8f, 0xbd, 0xf8,
	0x54, 0xe3, 0x24, 0xd9, 0x7d, 0xdf, 0x1d, 0x8f, 0xd0, 0x2b, 0xd8, 0xc8, 0x65, 0xf7, 0x6d, 0x72,
	0xee, 0xdb, 0x03, 0x8f, 0x46, 0xa4, 0xf3, 0xac, 0xb2, 0x00, 0xab, 0xa9, 0x03, 0xdf, 0x3c, 0xf7,
	0x5b, 0x14, 0xa5, 0x93, 0x7d, 0x01, 0x6b, 0x7c, 0xb2, 0xee, 0xa8, 0xe8, 0x7c, 0x21, 0xd3, 0x69,
	0xee, 0xa8, 0x60, 0xfd, 0x5b, 0x91, 0x92, 0xaf, 0x88, 0x30, 0x0a, 0x42, 0x1c, 0xc5, 0x1e, 0x26,
	0xbc, 0x7d, 0x8b, 0x4c, 0xba, 0x96, 0x2e, 0x89, 0x5e, 0x8a, 0xb3, 0x4e, 0xee, 0xe5, 0xaa, 0x15,
	0x8c, 0x63, 0x3b, 0x18, 0xd8, 0x67, 0x9e, 0xdf, 0x0f, 0xce, 0xa4, 0x25, 0x26, 0x44, 0xc2, 0xab,
	0x3e, 0x8e, 0xf5, 0xc1, 0x31, 0x43, 0xd0, 0x4b, 0x90, 0x52, 0x0d, 0x09, 0x87, 0x5e, 0x6c, 0x9f,
	0x3a, 0x7e, 0x9f, 0x9c, 0x3a, 0xef, 0xb1, 0xb4, 0x3c, 0x31, 0x43, 0x93, 0xa2, 0x87, 0x09, 0x38,
	0x91, 0xec, 0xcc, 0xf3, 0xed, 0x0b, 0x1c, 0x05, 0x36, 0x1d, 0x91, 0x6a, 0x13, 0xc9, 0x8e, 0x3d,
	0xff, 0x07, 0x1c, 0x05, 0xf4, 0x39, 0x41, 0xcf, 0x44, 0x55, 0xa8, 0xa6, 0xef, 0xc4, 0x8e, 0xed,
	0x0c, 0x62, 0x1c, 0xd9, 0x03, 0xcf, 0x97, 0x6e, 0x66, 0x8b, 0xc0, 0x72, 0xc3, 0xa6, 0x13, 0x3b,
	0x32, 0xc5, 0x5a, 0x9e, 0x8f, 0xbe, 0x83, 0xcd, 0x89, 0x36, 0x88, 0x06, 0x08, 0x71, 0x44, 0x62,
	0x09, 0x31, 0xb1, 0x94, 0xb5, 0xc2, 0x60, 0x5d, 0x60, 0x11, 0x0c, 0x12, 0xa3, 0x0e, 0x3c, 0x4c,
	0x23, 0x24, 0xeb, 0x20, 0x62, 0x8f, 0x7e, 0x9f, 0xa5, 0x4f, 0x5a, 0xba, 0xc2, 0xe2, 0xdc, 0x13,
	0x71, 0xc4, 0x62, 0x30, 0x12, 0x62, 0xda, 0xdc, 0xe7, 0xb9, 0x69, 0x8c, 0x7d, 0xfc, 0xc7, 0x10,
	0xbb, 0xb1, 0x58, 0xfc, 0xf5, 0x89, 0x65, 0x79, 0x94, 0x82, 0x54, 0xf6, 0x8d, 0x78, 0x00, 0x48,
	0xe4, 0xda, 0x43, 0x6f, 0x40, 0x5b, 0x3a, 0x72, 0x62, 0xf7, 0x54, 0x5a, 0xcd, 0x0a, 0x66, 0x46,
	0x6e, 0xdb, 0x1b, 0x74, 0x04, 0x82, 0x9e, 0x8a, 0x22, 0x87, 0x4e, 0x44, 0x70, 0x64, 0x7b, 0x6e,
	0xe4, 0xda, 0x38, 0x8a, 0x82, 0x48, 0xba, 0x95, 0xd5, 0xab, 0xc7, 0x40, 0xcd, 0x8d, 0x5c, 0x95,
	0x42, 0xe8, 0x09, 0xd4, 0x33, 0x91, 0x3d, 0xc4, 0xbe, 0x90, 0xac, 0x31, 0xc9, 0xcd, 0x54, 0xd2,
	0xc6, 0x3e, 0x17, 0xec, 0x02, 0x8b, 0x63, 0x9f, 0x3a, 0x51, 0xff, 0xcc, 0x89, 0xb0, 0xe0, 0x4b,
	0x19, 0xff, 0x50, 0x20, 0x9c, 0x7f, 0x17, 0x80, 0xf1, 0x5d, 0xba, 0x8b, 0x4b, 0xeb, 0x5b, 0x95,
	0xed, 0x6b, 0x06, 0xdb, 0x26, 0xd8, 0xb6, 0xde, 0xf8, 0xdb, 0x0c, 0x2c, 0x5b, 0xce, 0x8f, 0x43,
	0x9c, 0xdb, 0x17, 0x1f, 0x03, 0xc4, 0x74, 0x28, 0x7f, 0x1a, 0x2c, 0xb1, 0xed, 0x95, 0x31, 0xe9,
	0x19, 0x60, 0xcc, 0xc7, 0xc9, 0x4f, 0x9a, 0x81, 0xd3, 0x7d, 0x67, 0x84, 0xd9, 0x4e, 0x38, 0x2f,
	0xe0, 0xae, 0x33, 0xca, 0xc1, 0xc4, 0xbb, 0xc0, 0xe2, 0x18, 0xe0, 0xb0, 0xe9, 0x5d, 0x60, 0x3a,
	0x9f, 0xe0, 0x03, 0x8e, 0xd8, 0xb6, 0x97, 0xe3, 0xf1, 0x93, 0xe0, 0x66, 0x02, 0x59, 0x29, 0xff,
	0x21, 0x2c, 0x89, 0x8d, 0xdf, 0xf6, 0x7c, 0x7b, 0x4c, 0x30, 0xdb, 0x06, 0x17, 0x8d, 0x05, 0x31,
	0xaa, 0xf9, 0x47, 0x04, 0xd3, 0xae, 0xa7, 0x51, 0x0b, 0xf4, 0x59, 0x46, 0xaf, 0x27, 0xb0, 0x9a,
	0x97, 0xdd, 0x83, 0x2a, 0x3d, 0x8f, 0x3c, 0x9f, 0xe0, 0x28, 0x26, 0x6c, 0x77, 0xe4, 0xc7, 0x91,
	0xc6, 0x47, 0xd0, 0x0e, 0xdc, 0xcc, 0x08, 0xbc, 0xf4, 0x84, 0xed, 0x89, 0x8b, 0xc6, 0x72, 0x4a,
	0x63, 0x85, 0x27, 0x49, 0xb0, 0x3e, 0x1e, 0xe2, 0x18, 0x13, 0xb6, 0x09, 0xf2, 0x60, 0x4d, 0x3e,
	0x92, 0x04, 0xe3, 0x84, 0x24, 0x18, 0xa4, 0xc1, 0x38, 0x8d, 0x07, 0x6b, 0x28, 0x00, 0x59, 0x9b,
	0xd0, 0x73, 0xa8, 0x8a, 0x5a, 0xd1, 0x7f, 0xc5, 0x09, 0x58, 0xcf, 0x5a, 0x94, 0x3f, 0x03, 0xe3,
	0x74, 0xa0, 0x71, 0x0c, 0xb3, 0xf4, 0xc7, 0x98, 0xa0, 0x0e, 0xac, 0x92, 0xd0, 0xf1, 0xed, 0xc0,
	0xb7, 0xf9, 0x32, 0xc7, 0x84, 0x78, 0x81, 0x9f, 0x84, 0xda, 0xd8, 0xcd, 0x6e, 0x0c, 0x1d, 0x8f,
	0x3a, 0x30, 0x39, 0x41, 0xeb, 0x1b, 0x88, 0x0a, 0x75, 0x9f, 0x9d, 0xa5, 0x42, 0xd5, 0xf8, 0x53,
	0x05, 0x96, 0x4c, 0x76, 0x07, 0x49, 0x0f, 0xe9, 0x27, 0x00, 0xec, 0xf8, 0x67, 0xf9, 0xc4, 0x22,
	0xaa, 0xed, 0xf2, 0x5b, 0x89, 0x38, 0xa5, 0xc7, 0xc4, 0x98, 0x77, 0x92, 0x9f, 0x68, 0x0b, 0xae,
	0xf3, 0xd9, 0xd0, 0x15, 0x54, 0xdd, 0x03, 0x36, 0x1b, 0x7e, 0xf0, 0x73, 0x00, 0x3d, 0x80, 0x59,
	0x11, 0x6e, 0x86, 0x51, 0xaa, 0x29, 0x65, 0x4c, 0x0c, 0x01, 0x35, 0x4e, 0xe1, 0x3a, 0xaf, 0xd1,
	0x63, 0xb1, 0xf0, 0x93, 0x12, 0x51, 0x05, 0x5f, 0xc5, 0xe9, 0x35, 0x80, 0x3f, 0x08, 0x9c, 0xfe,
	0xf5, 0x64, 0x49, 0xb9, 0x89, 0xe5, 0x42, 0x49, 0x27, 0xaa, 0xa9, 0xc0, 0x7c, 0x1a, 0x09, 0xbd,
	0x00, 0x76, 0x50, 0x17, 0x2e, 0x25, 0x2b, 0x93, 0xf9, 0x78, 0x47, 0xd8, 0xb1, 0x9f, 0x5c, 0x4b,
	0x1c, 0xa8, 0xf1, 0xc2, 0x29, 0x81, 0x3f, 0xf0, 0x4e, 0xcc, 0x10, 0xbb, 0xff, 0xef, 0xe6, 0xec,
	0xc3, 0x72, 0x3e, 0x45, 0x87, 0x9c, 0xa0, 0x27, 0x70, 0x23, 0xc2, 0x7f, 0x18, 0x63, 0x12, 0x8b,
	0x98, 0xab, 0xbc, 0x94, 0x05, 0x27, 0x46, 0xc2, 0x6a, 0x1c, 0x40, 0x3d, 0x0f, 0xfe, 0xcf, 0x5d,
	0x6e, 0x5c, 0xc0, 0xda, 0xb4, 0x40, 0xd4, 0xd4, 0x76, 0xda, 0xde, 0xb2, 0x38, 0x02, 0x47, 0xcf,
	0x61, 0x2e, 0x12, 0x42, 0xe9, 0x2a, 0xf3, 0xbf, 0x7e, 0xc9, 0x7f, 0x12, 0xd9, 0x48, 0xa9, 0x3b,
	0x7f, 0xbe, 0x05, 0x90, 0xdd, 0x67, 0x51, 0x1d, 0x6a, 0x72, 0x4f, 0xb3, 0x15, 0xfd, 0xa8, 0x6b,
	0xa9, 0x86, 0xdd, 0xd5, 0xbb, 0x6a, 0xed, 0x0a, 0xda, 0x80, 0x5b, 0xf9, 0xd1, 0x37, 0x46, 0xcb,
	0x56, 0x0c, 0x55, 0xb6, 0xd4, 0x5a, 0x65, 0x1a, 0x76, 0xd4, 0x6b, 0x52, 0xec, 0xea, 0x34, 0xac,
	0xa9, 0xb6, 0x55, 0x4b, 0xad, 0xcd, 0xa0, 0x35, 0x58, 0x29, 0x62, 0x07, 0xaa, 0x55, 0xbb, 0x56,
	0x14, 0xc9, 0x4a, 0x3b, 0x49, 0x76, 0x7d, 0x1a, 0x26, 0x92, 0xcd, 0x4e, 0xc3, 0x44, 0xb2, 0x1b,
	0xc5, 0x64, 0x14, 0xa3, 0xc9, 0xe6, 0xd0, 0x1d, 0x90, 0xf2, 0x80, 0xd2, 0x3b, 0x52, 0xf6, 0x93,
	0x74, 0xf3, 0xd3, 0x51, 0x91, 0x10, 0xa6, 0xa3, 0x22, 0x65, 0x15, 0xad, 0xc3, 0xea, 0x65, 0x94,
	0x26, 0x5d, 0x40, 0x5b, 0x70, 0x67, 0x02, 0x32, 0xde, 0xf5, 0x2c, 0x9d, 0x8e, 0x68, 0xdd, 0x37,
	0xfa, 0x6b, 0xb5, 0xb6, 0x38, 0x9d, 0xf1, 0x5a, 0x7d, 0x97, 0x58, 0x5b, 0x2a, 0x67, 0x08, 0x7b,
	0xcb, 0xe5, 0x0c, 0x61, 0xb1, 0x86, 0x36, 0x61, 0x63, 0x3a, 0xc3, 0x50, 0xe5, 0x66, 0xed, 0x66,
	0x71, 0x82, 0x4d, 0xd5, 0x54, 0x0c, 0x59, 0xe7, 0xa5, 0x43, 0xe8, 0x1e, 0xdc, 0xce, 0xa3, 0x6a,
	0xb7, 0xd9, 0xd3, 0xb5, 0xae, 0x95, 0x58, 0x5c, 0x29, 0x25, 0x08, 0x87, 0xf5, 0x52, 0x82, 0x30,
	0xb8, 0x5a, 0x34, 0x90, 0x12, 0xa8, 0x81, 0x5b, 0x68, 0x17, 0x76, 0xf2, 0xe8, 0x41, 0xcb, 0xb2,
	0xd5, 0xb7, 0xb2, 0x62, 0xd9, 0x1d, 0xd9, 0x52, 0x0e, 0xed, 0x9e, 0xa1, 0xb7, 0xb4, 0xb6, 0x9a,
	0xf8, 0x59, 0x43, 0x2f, 0xe1, 0x69, 0x91, 0x7f, 0xa8, 0xca, 0x4d, 0xd5, 0xb0, 0x2d, 0x43, 0xee,
	0x9a, 0x3d, 0xdd, 0xd4, 0x2c, 0x4d, 0xef, 0x16, 0x85, 0x12, 0xfa, 0x06, 0x1e, 0x7f, 0x2a, 0x51,
	0xab, 0xad, 0x1f, 0xdb, 0x6a, 0xd7, 0x32, 0xd2, 0xf6, 0xac, 0xa3, 0x06, 0x6c, 0x4e, 0x48, 0x54,
	0xab, 0x67, 0xe8, 0x07, 0x86, 0xdc, 0xb1, 0xe5, 0x66, 0xd3, 0x50, 0x4d, 0xb3, 0xb6, 0x51, 0x6c,
	0x90, 0xdc, 0x6e, 0xeb, 0xca, 0xe1, 0x7e, 0xc6, 0xb8, 0x7d, 0xa9, 0x85, 0x7a, 0xb7, 0xa5, 0x1d,
	0x1c, 0x19, 0x6a, 0x5b, 0x6b, 0xd9, 0xfb, 0xcd, 0x56, 0xed, 0x4e, 0xb1, 0x85, 0x5a, 0xcf, 0x54,
	0x95, 0x6c, 0x05, 0xdf, 0x2d, 0xc3, 0x45, 0x0b, 0x36, 0xcb, 0x70, 0xd1, 0x81, 0x7b, 0xe8, 0x36,
	0xac, 0x4d, 0xc3, 0x69, 0x03, 0xb6, 0x8a, 0xf6, 0xda, 0x7b, 0xa6, 0x7a, 0xd0, 0x51, 0xb3, 0x25,
	0x70, 0xbf, 0x9c, 0x21, 0x0c, 0x34, 0xca, 0x19, 0xc2, 0xc2, 0x03, 0x74, 0x17, 0xd6, 0xa7, 0x33,
	0xa8, 0x89, 0x87, 0xc5, 0x4a, 0xb7, 0x9f, 0xb5, 0xf7, 0x4d, 0xd5, 0x78, 0xa3, 0x29, 0x69, 0x03,
	0xbf, 0x40, 0x5f, 0xc0, 0xfd, 0x3c, 0xa7, 0x73, 0xd4, 0xb6, 0x34, 0x45, 0x36, 0xad, 0x89, 0xa6,
	0x3d, 0xfa, 0x0c, 0x4d, 0x58, 0xfe, 0xf2, 0x33, 0x34, 0xe1, 0x7b, 0xbb, 0x68, 0xac, 0x40, 0xa3,
	0xe6, 0x7f, 0x86, 0x1e, 0x41, 0x23, 0xcf, 0x31, 0x55, 0xe5, 0xc8, 0xd0, 0xac, 0x77, 0x85, 0x15,
	0xb8, 0xf3, 0x39, 0x9e, 0xb0, 0xf6, 0xf3, 0xcf, 0xf1, 0x84, 0xb7, 0xaf, 0xd0, 0x03, 0xb8, 0xf7,
	0x29, 0x1e, 0x35, 0xf7, 0x18, 0xed, 0xc0, 0xa3, 0x69, 0xa4, 0x03, 0x43, 0x3f, 0xea, 0xf5, 0xf4,
	0xb6, 0xa6, 0xa4, 0xa5, 0xdb, 0xfd, 0x29, 0x5c, 0x61, 0xf2, 0xc9, 0x4f, 0xe1, 0x0a, 0xa3, 0x5f,
	0xa3, 0x2f, 0xe1, 0xc1, 0xe7, 0xb8, 0xd4, 0xec, 0x37, 0xe8, 0x21, 0x6c, 0x95, 0x12, 0x13, 0x9b,
	0x7b, 0x9f, 0x66, 0x09, 0x83, 0x4f, 0x3f, 0xcd, 0x12, 0xd6, 0x9e, 0xa1, 0xfb, 0x70, 0xb7, 0x9c,
	0x45, 0x4d, 0x3d, 0x2f, 0x2e, 0xee, 0xa6, 0x6e, 0x4e, 0xd6, 0xed, 0x45, 0x39, 0x43, 0x98, 0x79,
	0x59, 0xce, 0x10, 0x46, 0x7e, 0x51, 0x7c, 0x40, 0x32, 0x06, 0x35, 0xf1, 0xaa, 0xb8, 0xcb, 0xf6,
	0x0c, 0xfd, 0xed, 0xbb, 0xdc, 0x1e, 0xf1, 0xcb, 0x52, 0x82, 0xb0, 0xf0, 0x6d, 0x29, 0x41, 0x38,
	0xf8, 0x55, 0x71, 0x9f, 0x4e, 0x09, 0xd4, 0xc0, 0xaf, 0xa7, 0xca, 0x8d, 0xcc, 0xc0, 0x6f, 0x4a,
	0x09, 0xc2, 0xc0, 0x6f, 0x4b, 0x09, 0xc2, 0xc0, 0x77, 0x53, 0x0d, 0x18, 0xc2, 0x80, 0x5c, 0x94,
	0x7f, 0xaf, 0x9b, 0x4a, 0x5b, 0x36, 0xcd, 0xc4, 0xc0, 0x7e, 0x29, 0x41, 0x18, 0x50, 0x4a, 0x09,
	0xc2, 0x40, 0xb3, 0x68, 0x20, 0x25, 0x50, 0x03, 0x6a, 0x71, 0x17, 0x55, 0xf4, 0x5e, 0xba, 0xda,
	0x5a, 0x48, 0x82, 0xfa, 0x25, 0x90, 0xca, 0x0e, 0x8a, 0x8d, 0x35, 0xe4, 0xe3, 0x5c, 0xdf, 0x0e,
	0x4b, 0x60, 0x11, 0x57, 0x2b, 0x81, 0x85, 0xe3, 0xdf, 0x15, 0xaf, 0x4b, 0x02, 0xa6, 0x89, 0x5f,
	0x17, 0x67, 0x63, 0x29, 0xbd, 0x2c, 0x6f, 0x7b, 0x3a, 0x2a, 0xd2, 0x76, 0xa6, 0xa3, 0x22, 0x6b,
	0xb7, 0x78, 0x2b, 0xe2, 0x28, 0x4d, 0xaa, 0x5f, 0x12, 0xb6, 0xcd, 0x2c, 0x69, 0x6f, 0x3a, 0x2a,
	0x92, 0x7e, 0x3f, 0x1d, 0x15, 0x49, 0x8d, 0x4b, 0x49, 0x19, 0x4a, 0x93, 0x9a, 0x68, 0x05, 0x96,
	0x27, 0x36, 0x69, 0xf9, 0x6d, 0xcd, 0xda, 0xb9, 0x80, 0xf9, 0xf4, 0xa5, 0x9e, 0x32, 0x2c, 0x79,
	0xbf, 0xad, 0xda, 0xd6, 0xbb, 0x9e, 0x9a, 0x5c, 0x88, 0xeb, 0x50, 0xcb, 0x0d, 0x6a, 0xdd, 0xa6,
	0xfa, 0xb6, 0x56, 0x29, 0x50, 0x0f, 0x65, 0xf3, 0xb0, 0x76, 0x95, 0xb6, 0xb7, 0x30, 0x68, 0x5b,
	0x8a, 0xdc, 0xa9, 0xcd, 0x14, 0xe8, 0x6c, 0xf0, 0xda, 0xde, 0x3f, 0x2a, 0x30, 0xcb, 0xaf, 0xec,
	0xe8, 0x19, 0x54, 0x93, 0x4f, 0xb7, 0x07, 0x38, 0x46, 0x0b, 0xe2, 0xea, 0xaf, 0x8e, 0xc2, 0xf8,
	0x7c, 0x63, 0x75, 0xe2, 0xd3, 0x6e, 0x72, 0xb1, 0x6f, 0x5c, 0x41, 0x5f, 0xc3, 0x3c, 0xd7, 0x5f,
	0xd6, 0xac, 0xe4, 0x5e, 0x08, 0x72, 0x8a, 0x26, 0x2c, 0xe4, 0x5f, 0x12, 0x50, 0xfd, 0xd2, 0x7b,
	0x43, 0x87, 0x9c, 0x6c, 0xdc, 0x29, 0x7d, 0x9b, 0xe8, 0x90, 0x93, 0xc6, 0x95, 0xfd, 0x8d, 0x7f,
	0x7e, 0xdc, 0xac, 0xfc, 0xeb, 0xe3, 0x66, 0xe5, 0xdf, 0x1f, 0x37, 0x2b, 0x7f, 0xfd, 0xcf, 0xe6,
	0x95, 0x1f, 0xe6, 0x4e, 0x9d, 0x21, 0xfb, 0xb4, 0xfe, 0xe3, 0x2c, 0xfb, 0xf3, 0xf4, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xd1, 0x45, 0x9d, 0x0c, 0x94, 0x17, 0x00, 0x00,
}
