// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: system.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Table types
type TableType int32

const (
	TableType_TABLE_TYPE_NONE      TableType = 0
	TableType_TABLE_TYPE_INDEX     TableType = 1
	TableType_TABLE_TYPE_HASH      TableType = 2
	TableType_TABLE_TYPE_HASH_TCAM TableType = 3
	TableType_TABLE_TYPE_TCAM      TableType = 4
)

var TableType_name = map[int32]string{
	0: "TABLE_TYPE_NONE",
	1: "TABLE_TYPE_INDEX",
	2: "TABLE_TYPE_HASH",
	3: "TABLE_TYPE_HASH_TCAM",
	4: "TABLE_TYPE_TCAM",
}
var TableType_value = map[string]int32{
	"TABLE_TYPE_NONE":      0,
	"TABLE_TYPE_INDEX":     1,
	"TABLE_TYPE_HASH":      2,
	"TABLE_TYPE_HASH_TCAM": 3,
	"TABLE_TYPE_TCAM":      4,
}

func (x TableType) String() string {
	return proto.EnumName(TableType_name, int32(x))
}
func (TableType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSystem, []int{0} }

type DropStatsEntry struct {
	DropInputMapping                bool   `protobuf:"varint,1,opt,name=drop_input_mapping,json=dropInputMapping,proto3" json:"drop_input_mapping,omitempty"`
	DropInputMappingDejavu          bool   `protobuf:"varint,2,opt,name=drop_input_mapping_dejavu,json=dropInputMappingDejavu,proto3" json:"drop_input_mapping_dejavu,omitempty"`
	DropFlowHit                     bool   `protobuf:"varint,3,opt,name=drop_flow_hit,json=dropFlowHit,proto3" json:"drop_flow_hit,omitempty"`
	DropFlowMiss                    bool   `protobuf:"varint,4,opt,name=drop_flow_miss,json=dropFlowMiss,proto3" json:"drop_flow_miss,omitempty"`
	DropIpsg                        bool   `protobuf:"varint,5,opt,name=drop_ipsg,json=dropIpsg,proto3" json:"drop_ipsg,omitempty"`
	DropIngressPolicer              bool   `protobuf:"varint,6,opt,name=drop_ingress_policer,json=dropIngressPolicer,proto3" json:"drop_ingress_policer,omitempty"`
	DropEgressPolicer               bool   `protobuf:"varint,7,opt,name=drop_egress_policer,json=dropEgressPolicer,proto3" json:"drop_egress_policer,omitempty"`
	DropNacl                        bool   `protobuf:"varint,8,opt,name=drop_nacl,json=dropNacl,proto3" json:"drop_nacl,omitempty"`
	DropMalformedPkt                bool   `protobuf:"varint,9,opt,name=drop_malformed_pkt,json=dropMalformedPkt,proto3" json:"drop_malformed_pkt,omitempty"`
	DropPingOfDeath                 bool   `protobuf:"varint,10,opt,name=drop_ping_of_death,json=dropPingOfDeath,proto3" json:"drop_ping_of_death,omitempty"`
	DropFragmentTooSmall            bool   `protobuf:"varint,11,opt,name=drop_fragment_too_small,json=dropFragmentTooSmall,proto3" json:"drop_fragment_too_small,omitempty"`
	DropIpNormalization             bool   `protobuf:"varint,12,opt,name=drop_ip_normalization,json=dropIpNormalization,proto3" json:"drop_ip_normalization,omitempty"`
	DropTcpNormalization            bool   `protobuf:"varint,13,opt,name=drop_tcp_normalization,json=dropTcpNormalization,proto3" json:"drop_tcp_normalization,omitempty"`
	DropTcpXmasTreePkt              bool   `protobuf:"varint,14,opt,name=drop_tcp_xmas_tree_pkt,json=dropTcpXmasTreePkt,proto3" json:"drop_tcp_xmas_tree_pkt,omitempty"`
	DropTcpNonSynFirstPkt           bool   `protobuf:"varint,15,opt,name=drop_tcp_non_syn_first_pkt,json=dropTcpNonSynFirstPkt,proto3" json:"drop_tcp_non_syn_first_pkt,omitempty"`
	DropIcmpNormalization           bool   `protobuf:"varint,16,opt,name=drop_icmp_normalization,json=dropIcmpNormalization,proto3" json:"drop_icmp_normalization,omitempty"`
	DropIcmpSrcQuenchMsg            bool   `protobuf:"varint,17,opt,name=drop_icmp_src_quench_msg,json=dropIcmpSrcQuenchMsg,proto3" json:"drop_icmp_src_quench_msg,omitempty"`
	DropIcmpRedirectMsg             bool   `protobuf:"varint,18,opt,name=drop_icmp_redirect_msg,json=dropIcmpRedirectMsg,proto3" json:"drop_icmp_redirect_msg,omitempty"`
	DropIcmpInfoReqMsg              bool   `protobuf:"varint,19,opt,name=drop_icmp_info_req_msg,json=dropIcmpInfoReqMsg,proto3" json:"drop_icmp_info_req_msg,omitempty"`
	DropIcmpAddrReqMsg              bool   `protobuf:"varint,20,opt,name=drop_icmp_addr_req_msg,json=dropIcmpAddrReqMsg,proto3" json:"drop_icmp_addr_req_msg,omitempty"`
	DropIcmpTracerouteMsg           bool   `protobuf:"varint,21,opt,name=drop_icmp_traceroute_msg,json=dropIcmpTracerouteMsg,proto3" json:"drop_icmp_traceroute_msg,omitempty"`
	DropIcmpRsvdTypeMsg             bool   `protobuf:"varint,22,opt,name=drop_icmp_rsvd_type_msg,json=dropIcmpRsvdTypeMsg,proto3" json:"drop_icmp_rsvd_type_msg,omitempty"`
	DropInputPropertiesMiss         bool   `protobuf:"varint,23,opt,name=drop_input_properties_miss,json=dropInputPropertiesMiss,proto3" json:"drop_input_properties_miss,omitempty"`
	DropTcpOutOfWindow              bool   `protobuf:"varint,24,opt,name=drop_tcp_out_of_window,json=dropTcpOutOfWindow,proto3" json:"drop_tcp_out_of_window,omitempty"`
	DropTcpSplitHandshake           bool   `protobuf:"varint,25,opt,name=drop_tcp_split_handshake,json=dropTcpSplitHandshake,proto3" json:"drop_tcp_split_handshake,omitempty"`
	DropTcpWinZeroDrop              bool   `protobuf:"varint,26,opt,name=drop_tcp_win_zero_drop,json=dropTcpWinZeroDrop,proto3" json:"drop_tcp_win_zero_drop,omitempty"`
	DropTcpAckErr                   bool   `protobuf:"varint,27,opt,name=drop_tcp_ack_err,json=dropTcpAckErr,proto3" json:"drop_tcp_ack_err,omitempty"`
	DropTcpDataAfterFin             bool   `protobuf:"varint,28,opt,name=drop_tcp_data_after_fin,json=dropTcpDataAfterFin,proto3" json:"drop_tcp_data_after_fin,omitempty"`
	DropTcpNonRstPktAfterRst        bool   `protobuf:"varint,29,opt,name=drop_tcp_non_rst_pkt_after_rst,json=dropTcpNonRstPktAfterRst,proto3" json:"drop_tcp_non_rst_pkt_after_rst,omitempty"`
	DropTcpInvalidResponderFirstPkt bool   `protobuf:"varint,30,opt,name=drop_tcp_invalid_responder_first_pkt,json=dropTcpInvalidResponderFirstPkt,proto3" json:"drop_tcp_invalid_responder_first_pkt,omitempty"`
	DropTcpUnexpectedSyn            bool   `protobuf:"varint,31,opt,name=drop_tcp_unexpected_syn,json=dropTcpUnexpectedSyn,proto3" json:"drop_tcp_unexpected_syn,omitempty"`
	DropCount                       uint64 `protobuf:"varint,32,opt,name=drop_count,json=dropCount,proto3" json:"drop_count,omitempty"`
}

func (m *DropStatsEntry) Reset()                    { *m = DropStatsEntry{} }
func (m *DropStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*DropStatsEntry) ProtoMessage()               {}
func (*DropStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{0} }

func (m *DropStatsEntry) GetDropInputMapping() bool {
	if m != nil {
		return m.DropInputMapping
	}
	return false
}

func (m *DropStatsEntry) GetDropInputMappingDejavu() bool {
	if m != nil {
		return m.DropInputMappingDejavu
	}
	return false
}

func (m *DropStatsEntry) GetDropFlowHit() bool {
	if m != nil {
		return m.DropFlowHit
	}
	return false
}

func (m *DropStatsEntry) GetDropFlowMiss() bool {
	if m != nil {
		return m.DropFlowMiss
	}
	return false
}

func (m *DropStatsEntry) GetDropIpsg() bool {
	if m != nil {
		return m.DropIpsg
	}
	return false
}

func (m *DropStatsEntry) GetDropIngressPolicer() bool {
	if m != nil {
		return m.DropIngressPolicer
	}
	return false
}

func (m *DropStatsEntry) GetDropEgressPolicer() bool {
	if m != nil {
		return m.DropEgressPolicer
	}
	return false
}

func (m *DropStatsEntry) GetDropNacl() bool {
	if m != nil {
		return m.DropNacl
	}
	return false
}

func (m *DropStatsEntry) GetDropMalformedPkt() bool {
	if m != nil {
		return m.DropMalformedPkt
	}
	return false
}

func (m *DropStatsEntry) GetDropPingOfDeath() bool {
	if m != nil {
		return m.DropPingOfDeath
	}
	return false
}

func (m *DropStatsEntry) GetDropFragmentTooSmall() bool {
	if m != nil {
		return m.DropFragmentTooSmall
	}
	return false
}

func (m *DropStatsEntry) GetDropIpNormalization() bool {
	if m != nil {
		return m.DropIpNormalization
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpNormalization() bool {
	if m != nil {
		return m.DropTcpNormalization
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpXmasTreePkt() bool {
	if m != nil {
		return m.DropTcpXmasTreePkt
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpNonSynFirstPkt() bool {
	if m != nil {
		return m.DropTcpNonSynFirstPkt
	}
	return false
}

func (m *DropStatsEntry) GetDropIcmpNormalization() bool {
	if m != nil {
		return m.DropIcmpNormalization
	}
	return false
}

func (m *DropStatsEntry) GetDropIcmpSrcQuenchMsg() bool {
	if m != nil {
		return m.DropIcmpSrcQuenchMsg
	}
	return false
}

func (m *DropStatsEntry) GetDropIcmpRedirectMsg() bool {
	if m != nil {
		return m.DropIcmpRedirectMsg
	}
	return false
}

func (m *DropStatsEntry) GetDropIcmpInfoReqMsg() bool {
	if m != nil {
		return m.DropIcmpInfoReqMsg
	}
	return false
}

func (m *DropStatsEntry) GetDropIcmpAddrReqMsg() bool {
	if m != nil {
		return m.DropIcmpAddrReqMsg
	}
	return false
}

func (m *DropStatsEntry) GetDropIcmpTracerouteMsg() bool {
	if m != nil {
		return m.DropIcmpTracerouteMsg
	}
	return false
}

func (m *DropStatsEntry) GetDropIcmpRsvdTypeMsg() bool {
	if m != nil {
		return m.DropIcmpRsvdTypeMsg
	}
	return false
}

func (m *DropStatsEntry) GetDropInputPropertiesMiss() bool {
	if m != nil {
		return m.DropInputPropertiesMiss
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpOutOfWindow() bool {
	if m != nil {
		return m.DropTcpOutOfWindow
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpSplitHandshake() bool {
	if m != nil {
		return m.DropTcpSplitHandshake
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpWinZeroDrop() bool {
	if m != nil {
		return m.DropTcpWinZeroDrop
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpAckErr() bool {
	if m != nil {
		return m.DropTcpAckErr
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpDataAfterFin() bool {
	if m != nil {
		return m.DropTcpDataAfterFin
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpNonRstPktAfterRst() bool {
	if m != nil {
		return m.DropTcpNonRstPktAfterRst
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpInvalidResponderFirstPkt() bool {
	if m != nil {
		return m.DropTcpInvalidResponderFirstPkt
	}
	return false
}

func (m *DropStatsEntry) GetDropTcpUnexpectedSyn() bool {
	if m != nil {
		return m.DropTcpUnexpectedSyn
	}
	return false
}

func (m *DropStatsEntry) GetDropCount() uint64 {
	if m != nil {
		return m.DropCount
	}
	return 0
}

// TableStatsEntry captures table specific stats for h/w table health monitoring
type TableStatsEntry struct {
	TableType            TableType `protobuf:"varint,1,opt,name=table_type,json=tableType,proto3,enum=sys.TableType" json:"table_type,omitempty"`
	TableName            string    `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TableSize            uint32    `protobuf:"varint,3,opt,name=table_size,json=tableSize,proto3" json:"table_size,omitempty"`
	OverflowTableSize    uint32    `protobuf:"varint,4,opt,name=overflow_table_size,json=overflowTableSize,proto3" json:"overflow_table_size,omitempty"`
	EntriesInUse         uint32    `protobuf:"varint,5,opt,name=entries_in_use,json=entriesInUse,proto3" json:"entries_in_use,omitempty"`
	OverflowEntriesInUse uint32    `protobuf:"varint,6,opt,name=overflow_entries_in_use,json=overflowEntriesInUse,proto3" json:"overflow_entries_in_use,omitempty"`
	NumInserts           uint32    `protobuf:"varint,7,opt,name=num_inserts,json=numInserts,proto3" json:"num_inserts,omitempty"`
	NumInsertErrors      uint32    `protobuf:"varint,8,opt,name=num_insert_errors,json=numInsertErrors,proto3" json:"num_insert_errors,omitempty"`
	NumDeletes           uint32    `protobuf:"varint,9,opt,name=num_deletes,json=numDeletes,proto3" json:"num_deletes,omitempty"`
	NumDeleteErrors      uint32    `protobuf:"varint,10,opt,name=num_delete_errors,json=numDeleteErrors,proto3" json:"num_delete_errors,omitempty"`
}

func (m *TableStatsEntry) Reset()                    { *m = TableStatsEntry{} }
func (m *TableStatsEntry) String() string            { return proto.CompactTextString(m) }
func (*TableStatsEntry) ProtoMessage()               {}
func (*TableStatsEntry) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{1} }

func (m *TableStatsEntry) GetTableType() TableType {
	if m != nil {
		return m.TableType
	}
	return TableType_TABLE_TYPE_NONE
}

func (m *TableStatsEntry) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *TableStatsEntry) GetTableSize() uint32 {
	if m != nil {
		return m.TableSize
	}
	return 0
}

func (m *TableStatsEntry) GetOverflowTableSize() uint32 {
	if m != nil {
		return m.OverflowTableSize
	}
	return 0
}

func (m *TableStatsEntry) GetEntriesInUse() uint32 {
	if m != nil {
		return m.EntriesInUse
	}
	return 0
}

func (m *TableStatsEntry) GetOverflowEntriesInUse() uint32 {
	if m != nil {
		return m.OverflowEntriesInUse
	}
	return 0
}

func (m *TableStatsEntry) GetNumInserts() uint32 {
	if m != nil {
		return m.NumInserts
	}
	return 0
}

func (m *TableStatsEntry) GetNumInsertErrors() uint32 {
	if m != nil {
		return m.NumInsertErrors
	}
	return 0
}

func (m *TableStatsEntry) GetNumDeletes() uint32 {
	if m != nil {
		return m.NumDeletes
	}
	return 0
}

func (m *TableStatsEntry) GetNumDeleteErrors() uint32 {
	if m != nil {
		return m.NumDeleteErrors
	}
	return 0
}

// TableStats is container for statistics of all tables in the data path
type TableStats struct {
	TableStats []*TableStatsEntry `protobuf:"bytes,1,rep,name=table_stats,json=tableStats" json:"table_stats,omitempty"`
}

func (m *TableStats) Reset()                    { *m = TableStats{} }
func (m *TableStats) String() string            { return proto.CompactTextString(m) }
func (*TableStats) ProtoMessage()               {}
func (*TableStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{2} }

func (m *TableStats) GetTableStats() []*TableStatsEntry {
	if m != nil {
		return m.TableStats
	}
	return nil
}

// Status captures the operating status of various components in the HAL
// including "ready" status, thread health etc.
type Status struct {
	SpanOnDropSessions []*MirrorSessionId `protobuf:"bytes,1,rep,name=span_on_drop_sessions,json=spanOnDropSessions" json:"span_on_drop_sessions,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{3} }

func (m *Status) GetSpanOnDropSessions() []*MirrorSessionId {
	if m != nil {
		return m.SpanOnDropSessions
	}
	return nil
}

// Global system object
type SystemResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Stats     *Stats    `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
	Status    *Status   `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *SystemResponse) Reset()                    { *m = SystemResponse{} }
func (m *SystemResponse) String() string            { return proto.CompactTextString(m) }
func (*SystemResponse) ProtoMessage()               {}
func (*SystemResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{4} }

func (m *SystemResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SystemResponse) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *SystemResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Stats object
type Stats struct {
	DropStats  *DropStats  `protobuf:"bytes,1,opt,name=drop_stats,json=dropStats" json:"drop_stats,omitempty"`
	TableStats *TableStats `protobuf:"bytes,2,opt,name=table_stats,json=tableStats" json:"table_stats,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{5} }

func (m *Stats) GetDropStats() *DropStats {
	if m != nil {
		return m.DropStats
	}
	return nil
}

func (m *Stats) GetTableStats() *TableStats {
	if m != nil {
		return m.TableStats
	}
	return nil
}

// Drop Stats object
type DropStats struct {
	DropEntries []*DropStatsEntry `protobuf:"bytes,1,rep,name=drop_entries,json=dropEntries" json:"drop_entries,omitempty"`
}

func (m *DropStats) Reset()                    { *m = DropStats{} }
func (m *DropStats) String() string            { return proto.CompactTextString(m) }
func (*DropStats) ProtoMessage()               {}
func (*DropStats) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{6} }

func (m *DropStats) GetDropEntries() []*DropStatsEntry {
	if m != nil {
		return m.DropEntries
	}
	return nil
}

type SystemConfigSpec struct {
	SpanOnDropSessions []*MirrorSessionId `protobuf:"bytes,1,rep,name=span_on_drop_sessions,json=spanOnDropSessions" json:"span_on_drop_sessions,omitempty"`
}

func (m *SystemConfigSpec) Reset()                    { *m = SystemConfigSpec{} }
func (m *SystemConfigSpec) String() string            { return proto.CompactTextString(m) }
func (*SystemConfigSpec) ProtoMessage()               {}
func (*SystemConfigSpec) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{7} }

func (m *SystemConfigSpec) GetSpanOnDropSessions() []*MirrorSessionId {
	if m != nil {
		return m.SpanOnDropSessions
	}
	return nil
}

type SystemConfigMsg struct {
	Request []*SystemConfigSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SystemConfigMsg) Reset()                    { *m = SystemConfigMsg{} }
func (m *SystemConfigMsg) String() string            { return proto.CompactTextString(m) }
func (*SystemConfigMsg) ProtoMessage()               {}
func (*SystemConfigMsg) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{8} }

func (m *SystemConfigMsg) GetRequest() []*SystemConfigSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type SystemConfigResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SystemConfigResponse) Reset()                    { *m = SystemConfigResponse{} }
func (m *SystemConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*SystemConfigResponse) ProtoMessage()               {}
func (*SystemConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{9} }

func (m *SystemConfigResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type SystemConfigResponseMsg struct {
	Status   ApiStatus               `protobuf:"varint,1,opt,name=status,proto3,enum=types.ApiStatus" json:"status,omitempty"`
	Response []*SystemConfigResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *SystemConfigResponseMsg) Reset()                    { *m = SystemConfigResponseMsg{} }
func (m *SystemConfigResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SystemConfigResponseMsg) ProtoMessage()               {}
func (*SystemConfigResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSystem, []int{10} }

func (m *SystemConfigResponseMsg) GetStatus() ApiStatus {
	if m != nil {
		return m.Status
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SystemConfigResponseMsg) GetResponse() []*SystemConfigResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*DropStatsEntry)(nil), "sys.DropStatsEntry")
	proto.RegisterType((*TableStatsEntry)(nil), "sys.TableStatsEntry")
	proto.RegisterType((*TableStats)(nil), "sys.TableStats")
	proto.RegisterType((*Status)(nil), "sys.Status")
	proto.RegisterType((*SystemResponse)(nil), "sys.SystemResponse")
	proto.RegisterType((*Stats)(nil), "sys.Stats")
	proto.RegisterType((*DropStats)(nil), "sys.DropStats")
	proto.RegisterType((*SystemConfigSpec)(nil), "sys.SystemConfigSpec")
	proto.RegisterType((*SystemConfigMsg)(nil), "sys.SystemConfigMsg")
	proto.RegisterType((*SystemConfigResponse)(nil), "sys.SystemConfigResponse")
	proto.RegisterType((*SystemConfigResponseMsg)(nil), "sys.SystemConfigResponseMsg")
	proto.RegisterEnum("sys.TableType", TableType_name, TableType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for System service

type SystemClient interface {
	// System related APIs
	SystemGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemResponse, error)
	SystemConfig(ctx context.Context, in *SystemConfigMsg, opts ...grpc.CallOption) (*SystemConfigResponseMsg, error)
}

type systemClient struct {
	cc *grpc.ClientConn
}

func NewSystemClient(cc *grpc.ClientConn) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) SystemGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemResponse, error) {
	out := new(SystemResponse)
	err := grpc.Invoke(ctx, "/sys.System/SystemGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SystemConfig(ctx context.Context, in *SystemConfigMsg, opts ...grpc.CallOption) (*SystemConfigResponseMsg, error) {
	out := new(SystemConfigResponseMsg)
	err := grpc.Invoke(ctx, "/sys.System/SystemConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for System service

type SystemServer interface {
	// System related APIs
	SystemGet(context.Context, *Empty) (*SystemResponse, error)
	SystemConfig(context.Context, *SystemConfigMsg) (*SystemConfigResponseMsg, error)
}

func RegisterSystemServer(s *grpc.Server, srv SystemServer) {
	s.RegisterService(&_System_serviceDesc, srv)
}

func _System_SystemGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SystemGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/SystemGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SystemGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SystemConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemConfigMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SystemConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sys.System/SystemConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SystemConfig(ctx, req.(*SystemConfigMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _System_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sys.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemGet",
			Handler:    _System_SystemGet_Handler,
		},
		{
			MethodName: "SystemConfig",
			Handler:    _System_SystemConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}

func (m *DropStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DropInputMapping {
		dAtA[i] = 0x8
		i++
		if m.DropInputMapping {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropInputMappingDejavu {
		dAtA[i] = 0x10
		i++
		if m.DropInputMappingDejavu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropFlowHit {
		dAtA[i] = 0x18
		i++
		if m.DropFlowHit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropFlowMiss {
		dAtA[i] = 0x20
		i++
		if m.DropFlowMiss {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIpsg {
		dAtA[i] = 0x28
		i++
		if m.DropIpsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIngressPolicer {
		dAtA[i] = 0x30
		i++
		if m.DropIngressPolicer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropEgressPolicer {
		dAtA[i] = 0x38
		i++
		if m.DropEgressPolicer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropNacl {
		dAtA[i] = 0x40
		i++
		if m.DropNacl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropMalformedPkt {
		dAtA[i] = 0x48
		i++
		if m.DropMalformedPkt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropPingOfDeath {
		dAtA[i] = 0x50
		i++
		if m.DropPingOfDeath {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropFragmentTooSmall {
		dAtA[i] = 0x58
		i++
		if m.DropFragmentTooSmall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIpNormalization {
		dAtA[i] = 0x60
		i++
		if m.DropIpNormalization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpNormalization {
		dAtA[i] = 0x68
		i++
		if m.DropTcpNormalization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpXmasTreePkt {
		dAtA[i] = 0x70
		i++
		if m.DropTcpXmasTreePkt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpNonSynFirstPkt {
		dAtA[i] = 0x78
		i++
		if m.DropTcpNonSynFirstPkt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIcmpNormalization {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.DropIcmpNormalization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIcmpSrcQuenchMsg {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.DropIcmpSrcQuenchMsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIcmpRedirectMsg {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.DropIcmpRedirectMsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIcmpInfoReqMsg {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.DropIcmpInfoReqMsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIcmpAddrReqMsg {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropIcmpAddrReqMsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIcmpTracerouteMsg {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.DropIcmpTracerouteMsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropIcmpRsvdTypeMsg {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropIcmpRsvdTypeMsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropInputPropertiesMiss {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		if m.DropInputPropertiesMiss {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpOutOfWindow {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpOutOfWindow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpSplitHandshake {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpSplitHandshake {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpWinZeroDrop {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpWinZeroDrop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpAckErr {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpAckErr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpDataAfterFin {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpDataAfterFin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpNonRstPktAfterRst {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpNonRstPktAfterRst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpInvalidResponderFirstPkt {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpInvalidResponderFirstPkt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropTcpUnexpectedSyn {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if m.DropTcpUnexpectedSyn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DropCount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropCount))
	}
	return i, nil
}

func (m *TableStatsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableStatsEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TableType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TableType))
	}
	if len(m.TableName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(len(m.TableName)))
		i += copy(dAtA[i:], m.TableName)
	}
	if m.TableSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TableSize))
	}
	if m.OverflowTableSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.OverflowTableSize))
	}
	if m.EntriesInUse != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.EntriesInUse))
	}
	if m.OverflowEntriesInUse != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.OverflowEntriesInUse))
	}
	if m.NumInserts != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumInserts))
	}
	if m.NumInsertErrors != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumInsertErrors))
	}
	if m.NumDeletes != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumDeletes))
	}
	if m.NumDeleteErrors != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.NumDeleteErrors))
	}
	return i, nil
}

func (m *TableStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TableStats) > 0 {
		for _, msg := range m.TableStats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpanOnDropSessions) > 0 {
		for _, msg := range m.SpanOnDropSessions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SystemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Stats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Stats.Size()))
		n1, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Status.Size()))
		n2, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DropStats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.DropStats.Size()))
		n3, err := m.DropStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.TableStats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.TableStats.Size()))
		n4, err := m.TableStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *DropStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DropEntries) > 0 {
		for _, msg := range m.DropEntries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SystemConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpanOnDropSessions) > 0 {
		for _, msg := range m.SpanOnDropSessions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SystemConfigMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfigMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SystemConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *SystemConfigResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemConfigResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSystem(dAtA, i, uint64(m.Status))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSystem(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DropStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.DropInputMapping {
		n += 2
	}
	if m.DropInputMappingDejavu {
		n += 2
	}
	if m.DropFlowHit {
		n += 2
	}
	if m.DropFlowMiss {
		n += 2
	}
	if m.DropIpsg {
		n += 2
	}
	if m.DropIngressPolicer {
		n += 2
	}
	if m.DropEgressPolicer {
		n += 2
	}
	if m.DropNacl {
		n += 2
	}
	if m.DropMalformedPkt {
		n += 2
	}
	if m.DropPingOfDeath {
		n += 2
	}
	if m.DropFragmentTooSmall {
		n += 2
	}
	if m.DropIpNormalization {
		n += 2
	}
	if m.DropTcpNormalization {
		n += 2
	}
	if m.DropTcpXmasTreePkt {
		n += 2
	}
	if m.DropTcpNonSynFirstPkt {
		n += 2
	}
	if m.DropIcmpNormalization {
		n += 3
	}
	if m.DropIcmpSrcQuenchMsg {
		n += 3
	}
	if m.DropIcmpRedirectMsg {
		n += 3
	}
	if m.DropIcmpInfoReqMsg {
		n += 3
	}
	if m.DropIcmpAddrReqMsg {
		n += 3
	}
	if m.DropIcmpTracerouteMsg {
		n += 3
	}
	if m.DropIcmpRsvdTypeMsg {
		n += 3
	}
	if m.DropInputPropertiesMiss {
		n += 3
	}
	if m.DropTcpOutOfWindow {
		n += 3
	}
	if m.DropTcpSplitHandshake {
		n += 3
	}
	if m.DropTcpWinZeroDrop {
		n += 3
	}
	if m.DropTcpAckErr {
		n += 3
	}
	if m.DropTcpDataAfterFin {
		n += 3
	}
	if m.DropTcpNonRstPktAfterRst {
		n += 3
	}
	if m.DropTcpInvalidResponderFirstPkt {
		n += 3
	}
	if m.DropTcpUnexpectedSyn {
		n += 3
	}
	if m.DropCount != 0 {
		n += 2 + sovSystem(uint64(m.DropCount))
	}
	return n
}

func (m *TableStatsEntry) Size() (n int) {
	var l int
	_ = l
	if m.TableType != 0 {
		n += 1 + sovSystem(uint64(m.TableType))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.TableSize != 0 {
		n += 1 + sovSystem(uint64(m.TableSize))
	}
	if m.OverflowTableSize != 0 {
		n += 1 + sovSystem(uint64(m.OverflowTableSize))
	}
	if m.EntriesInUse != 0 {
		n += 1 + sovSystem(uint64(m.EntriesInUse))
	}
	if m.OverflowEntriesInUse != 0 {
		n += 1 + sovSystem(uint64(m.OverflowEntriesInUse))
	}
	if m.NumInserts != 0 {
		n += 1 + sovSystem(uint64(m.NumInserts))
	}
	if m.NumInsertErrors != 0 {
		n += 1 + sovSystem(uint64(m.NumInsertErrors))
	}
	if m.NumDeletes != 0 {
		n += 1 + sovSystem(uint64(m.NumDeletes))
	}
	if m.NumDeleteErrors != 0 {
		n += 1 + sovSystem(uint64(m.NumDeleteErrors))
	}
	return n
}

func (m *TableStats) Size() (n int) {
	var l int
	_ = l
	if len(m.TableStats) > 0 {
		for _, e := range m.TableStats {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if len(m.SpanOnDropSessions) > 0 {
		for _, e := range m.SpanOnDropSessions {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *Stats) Size() (n int) {
	var l int
	_ = l
	if m.DropStats != nil {
		l = m.DropStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	if m.TableStats != nil {
		l = m.TableStats.Size()
		n += 1 + l + sovSystem(uint64(l))
	}
	return n
}

func (m *DropStats) Size() (n int) {
	var l int
	_ = l
	if len(m.DropEntries) > 0 {
		for _, e := range m.DropEntries {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemConfigSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.SpanOnDropSessions) > 0 {
		for _, e := range m.SpanOnDropSessions {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemConfigMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func (m *SystemConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSystem(uint64(m.ApiStatus))
	}
	return n
}

func (m *SystemConfigResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovSystem(uint64(m.Status))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovSystem(uint64(l))
		}
	}
	return n
}

func sovSystem(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSystem(x uint64) (n int) {
	return sovSystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DropStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropInputMapping", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropInputMapping = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropInputMappingDejavu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropInputMappingDejavu = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropFlowHit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropFlowHit = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropFlowMiss", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropFlowMiss = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIpsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIpsg = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIngressPolicer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIngressPolicer = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropEgressPolicer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropEgressPolicer = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropNacl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropNacl = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropMalformedPkt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropMalformedPkt = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropPingOfDeath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropPingOfDeath = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropFragmentTooSmall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropFragmentTooSmall = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIpNormalization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIpNormalization = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpNormalization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpNormalization = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpXmasTreePkt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpXmasTreePkt = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpNonSynFirstPkt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpNonSynFirstPkt = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIcmpNormalization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIcmpNormalization = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIcmpSrcQuenchMsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIcmpSrcQuenchMsg = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIcmpRedirectMsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIcmpRedirectMsg = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIcmpInfoReqMsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIcmpInfoReqMsg = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIcmpAddrReqMsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIcmpAddrReqMsg = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIcmpTracerouteMsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIcmpTracerouteMsg = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropIcmpRsvdTypeMsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropIcmpRsvdTypeMsg = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropInputPropertiesMiss", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropInputPropertiesMiss = bool(v != 0)
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpOutOfWindow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpOutOfWindow = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpSplitHandshake", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpSplitHandshake = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpWinZeroDrop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpWinZeroDrop = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpAckErr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpAckErr = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpDataAfterFin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpDataAfterFin = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpNonRstPktAfterRst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpNonRstPktAfterRst = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpInvalidResponderFirstPkt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpInvalidResponderFirstPkt = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropTcpUnexpectedSyn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DropTcpUnexpectedSyn = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropCount", wireType)
			}
			m.DropCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableStatsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableStatsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableStatsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableType", wireType)
			}
			m.TableType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableType |= (TableType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableSize", wireType)
			}
			m.TableSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverflowTableSize", wireType)
			}
			m.OverflowTableSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverflowTableSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntriesInUse", wireType)
			}
			m.EntriesInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntriesInUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverflowEntriesInUse", wireType)
			}
			m.OverflowEntriesInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverflowEntriesInUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInserts", wireType)
			}
			m.NumInserts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInserts |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInsertErrors", wireType)
			}
			m.NumInsertErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInsertErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeletes", wireType)
			}
			m.NumDeletes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeletes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleteErrors", wireType)
			}
			m.NumDeleteErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeleteErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableStats = append(m.TableStats, &TableStatsEntry{})
			if err := m.TableStats[len(m.TableStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanOnDropSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanOnDropSessions = append(m.SpanOnDropSessions, &MirrorSessionId{})
			if err := m.SpanOnDropSessions[len(m.SpanOnDropSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &Stats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropStats == nil {
				m.DropStats = &DropStats{}
			}
			if err := m.DropStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TableStats == nil {
				m.TableStats = &TableStats{}
			}
			if err := m.TableStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DropEntries = append(m.DropEntries, &DropStatsEntry{})
			if err := m.DropEntries[len(m.DropEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanOnDropSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanOnDropSessions = append(m.SpanOnDropSessions, &MirrorSessionId{})
			if err := m.SpanOnDropSessions[len(m.SpanOnDropSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfigMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfigMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfigMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SystemConfigSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemConfigResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemConfigResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemConfigResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SystemConfigResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSystem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSystem
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSystem
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSystem(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSystem = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSystem   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("system.proto", fileDescriptorSystem) }

var fileDescriptorSystem = []byte{
	// 1428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xd1, 0x52, 0x1b, 0x37,
	0x14, 0xc5, 0x81, 0x10, 0x2c, 0x1b, 0x6c, 0x84, 0x09, 0x1b, 0x27, 0x21, 0x8c, 0x9b, 0x99, 0x32,
	0x69, 0x43, 0x32, 0x24, 0xa4, 0x93, 0xe9, 0x4b, 0x09, 0x98, 0xe0, 0x99, 0x1a, 0xe8, 0xda, 0x99,
	0xa4, 0x79, 0xd1, 0x28, 0xbb, 0xb2, 0x51, 0xf1, 0x4a, 0x8b, 0x24, 0x43, 0xcc, 0x53, 0x1f, 0xfb,
	0x09, 0xfd, 0x81, 0xfe, 0x4b, 0x1f, 0xfb, 0x09, 0x9d, 0xf4, 0xad, 0x5f, 0xd1, 0xd1, 0xd5, 0xee,
	0x7a, 0x6d, 0x9a, 0x97, 0x4e, 0x9f, 0xe2, 0xdc, 0x73, 0xce, 0xd5, 0xbd, 0x47, 0x57, 0x2b, 0x81,
	0xca, 0x7a, 0xa4, 0x0d, 0x8b, 0xb6, 0x62, 0x25, 0x8d, 0xc4, 0xb3, 0x7a, 0xa4, 0xeb, 0x25, 0x33,
	0x8a, 0x99, 0x76, 0x91, 0x7a, 0xc5, 0xb0, 0x01, 0x8b, 0x98, 0x51, 0x23, 0x17, 0x68, 0xfc, 0x5d,
	0x46, 0x4b, 0xfb, 0x4a, 0xc6, 0x1d, 0x43, 0x8d, 0x6e, 0x0a, 0xa3, 0x46, 0xf8, 0x6b, 0x84, 0x43,
	0x25, 0x63, 0xc2, 0x45, 0x3c, 0x34, 0x24, 0xa2, 0x71, 0xcc, 0x45, 0xdf, 0x2b, 0x6c, 0x14, 0x36,
	0x17, 0xfc, 0xaa, 0x45, 0x5a, 0x16, 0x68, 0xbb, 0x38, 0x7e, 0x89, 0xee, 0x5c, 0x67, 0x93, 0x90,
	0xfd, 0x44, 0x2f, 0x86, 0xde, 0x0d, 0x10, 0xdd, 0x9e, 0x16, 0xed, 0x03, 0x8a, 0x1b, 0x68, 0x11,
	0xa4, 0xbd, 0x81, 0xbc, 0x24, 0xa7, 0xdc, 0x78, 0xb3, 0x40, 0x2f, 0xd9, 0xe0, 0xc1, 0x40, 0x5e,
	0x1e, 0x72, 0x83, 0x1f, 0xa2, 0xa5, 0x31, 0x27, 0xe2, 0x5a, 0x7b, 0x73, 0x40, 0x2a, 0xa7, 0xa4,
	0x36, 0xd7, 0x1a, 0xdf, 0x45, 0x45, 0x57, 0x44, 0xac, 0xfb, 0xde, 0x4d, 0x20, 0x2c, 0xc0, 0xa2,
	0xb1, 0xee, 0xe3, 0xa7, 0xa8, 0x96, 0x54, 0xd8, 0x57, 0x4c, 0x6b, 0x12, 0xcb, 0x01, 0x0f, 0x98,
	0xf2, 0xe6, 0x81, 0x87, 0x5d, 0x71, 0x00, 0x9d, 0x38, 0x04, 0x6f, 0xa1, 0x15, 0x50, 0xb0, 0x49,
	0xc1, 0x2d, 0x10, 0x2c, 0x5b, 0xa8, 0x39, 0xc1, 0x4f, 0x97, 0x17, 0x34, 0x18, 0x78, 0x0b, 0xe3,
	0xe5, 0x8f, 0x68, 0x30, 0xc8, 0xec, 0x8c, 0xe8, 0xa0, 0x27, 0x55, 0xc4, 0x42, 0x12, 0x9f, 0x19,
	0xaf, 0x38, 0xb6, 0xb3, 0x9d, 0x02, 0x27, 0x67, 0x06, 0x7f, 0x95, 0xb0, 0xc1, 0x45, 0xd9, 0x23,
	0x21, 0xa3, 0xe6, 0xd4, 0x43, 0xc0, 0xae, 0x58, 0xe4, 0x84, 0x8b, 0xfe, 0x71, 0x6f, 0xdf, 0x86,
	0xf1, 0x0e, 0x5a, 0x73, 0xe6, 0x28, 0xda, 0x8f, 0x98, 0x30, 0xc4, 0x48, 0x49, 0x74, 0x44, 0x07,
	0x03, 0xaf, 0x04, 0x0a, 0x68, 0xfc, 0x20, 0x41, 0xbb, 0x52, 0x76, 0x2c, 0x86, 0xb7, 0xd1, 0x6a,
	0xe2, 0x16, 0x11, 0x52, 0x45, 0x74, 0xc0, 0xaf, 0xa8, 0xe1, 0x52, 0x78, 0x65, 0x10, 0xad, 0x38,
	0xe7, 0x8e, 0xf2, 0x10, 0x7e, 0x8e, 0x60, 0x17, 0x89, 0x09, 0xa6, 0x45, 0x8b, 0xe3, 0x95, 0xba,
	0xc1, 0x94, 0x6a, 0x3b, 0xa7, 0xfa, 0x18, 0x51, 0x4d, 0x8c, 0x62, 0x0c, 0xfa, 0x5f, 0x1a, 0x9b,
	0xdf, 0x0d, 0xe2, 0x77, 0x11, 0xd5, 0x5d, 0xc5, 0x98, 0x75, 0xe0, 0x25, 0xaa, 0xe7, 0x56, 0x12,
	0x44, 0x8f, 0x04, 0xe9, 0x71, 0xa5, 0x0d, 0xe8, 0x2a, 0xa0, 0x5b, 0xcd, 0x56, 0x13, 0x9d, 0x91,
	0x38, 0xb0, 0xa8, 0x95, 0xbe, 0x48, 0xfc, 0xe0, 0x41, 0x34, 0x5d, 0x65, 0x75, 0xac, 0x6b, 0x05,
	0xd1, 0x54, 0x99, 0x2f, 0x90, 0x37, 0xd6, 0x69, 0x15, 0x90, 0xf3, 0x21, 0x13, 0xc1, 0x29, 0x89,
	0x74, 0xdf, 0x5b, 0x1e, 0xb7, 0x67, 0x85, 0x1d, 0x15, 0xfc, 0x00, 0x60, 0x5b, 0xf7, 0xf1, 0xb3,
	0xa4, 0x3d, 0xd0, 0x29, 0x16, 0x72, 0xc5, 0x02, 0x03, 0x2a, 0x9c, 0x73, 0x32, 0x88, 0x62, 0x3f,
	0xc1, 0xac, 0x68, 0x3b, 0x2f, 0xe2, 0xa2, 0x27, 0x89, 0x62, 0xe7, 0x20, 0x5a, 0xc9, 0x0d, 0x64,
	0x10, 0xc5, 0x2d, 0xd1, 0x93, 0x3e, 0x3b, 0xbf, 0xa6, 0xa1, 0x61, 0xa8, 0x32, 0x4d, 0x6d, 0x52,
	0xb3, 0x1b, 0x86, 0x2a, 0xd1, 0x7c, 0x93, 0x6f, 0xca, 0x28, 0x1a, 0x30, 0x25, 0x87, 0x86, 0x81,
	0x6a, 0x75, 0xd2, 0x8d, 0x6e, 0x86, 0x5a, 0xe1, 0xf3, 0xbc, 0x8b, 0x4a, 0x5f, 0x84, 0xc4, 0x7e,
	0x41, 0x40, 0x77, 0x7b, 0xaa, 0x2d, 0x7d, 0x11, 0x76, 0x47, 0x31, 0xa8, 0xbe, 0x4d, 0xb6, 0xcd,
	0x7d, 0x07, 0x62, 0x25, 0x63, 0xa6, 0x0c, 0x67, 0xda, 0x1d, 0xda, 0x35, 0x10, 0xae, 0x65, 0x1f,
	0x82, 0x93, 0x0c, 0x87, 0xf3, 0x9b, 0x9f, 0x13, 0x39, 0x34, 0x76, 0xf0, 0x2f, 0xb9, 0x08, 0xe5,
	0xa5, 0xe7, 0x4d, 0xcc, 0xc9, 0xf1, 0xd0, 0x1c, 0xf7, 0xde, 0x02, 0x92, 0xf5, 0x67, 0x35, 0x3a,
	0x1e, 0x70, 0x43, 0x4e, 0xa9, 0x08, 0xf5, 0x29, 0x3d, 0x63, 0xde, 0x9d, 0x89, 0x29, 0xe9, 0x58,
	0xf4, 0x30, 0x05, 0x27, 0x16, 0xbb, 0xe4, 0x82, 0x5c, 0x31, 0x25, 0x89, 0x8d, 0x78, 0xf5, 0x89,
	0xc5, 0xde, 0x72, 0xf1, 0x9e, 0x29, 0x69, 0xbf, 0x8e, 0xf8, 0x4b, 0x54, 0xcd, 0x34, 0x34, 0x38,
	0x23, 0x4c, 0x29, 0xef, 0x2e, 0xb0, 0x17, 0x13, 0xf6, 0x6e, 0x70, 0xd6, 0x54, 0x2a, 0x33, 0xcf,
	0x12, 0x43, 0x6a, 0x28, 0xa1, 0x3d, 0xc3, 0x14, 0xe9, 0x71, 0xe1, 0xdd, 0x1b, 0x9b, 0xd7, 0x0d,
	0xe2, 0x7d, 0x6a, 0xe8, 0xae, 0xc5, 0x0e, 0xb8, 0xc0, 0xdf, 0xa1, 0xf5, 0x89, 0x99, 0x4f, 0xa6,
	0x3d, 0x11, 0x2b, 0x6d, 0xbc, 0xfb, 0x20, 0xf6, 0xc6, 0x73, 0xef, 0xc3, 0xc8, 0x43, 0x06, 0x5f,
	0x1b, 0xdc, 0x46, 0x0f, 0xb3, 0x0c, 0x5c, 0x5c, 0xd0, 0x01, 0x0f, 0x89, 0x62, 0x3a, 0x96, 0x22,
	0x84, 0xe5, 0xd3, 0xf3, 0xb3, 0x0e, 0x79, 0x1e, 0x24, 0x79, 0x5a, 0x8e, 0xe9, 0xa7, 0xc4, 0xec,
	0x24, 0xed, 0xe4, 0xda, 0x18, 0x0a, 0xf6, 0x31, 0x66, 0x81, 0x61, 0xa1, 0x3d, 0x8b, 0xde, 0x83,
	0x89, 0xf3, 0xfe, 0x26, 0x03, 0x3b, 0x23, 0x81, 0xef, 0x23, 0x04, 0xb2, 0x40, 0x0e, 0x85, 0xf1,
	0x36, 0x36, 0x0a, 0x9b, 0x73, 0x3e, 0x7c, 0x1a, 0xf7, 0x6c, 0xa0, 0xf1, 0xdb, 0x2c, 0xaa, 0x74,
	0xe9, 0x87, 0x01, 0xcb, 0xdd, 0x36, 0x8f, 0x11, 0x32, 0x36, 0x04, 0x43, 0x06, 0xb7, 0xcc, 0xd2,
	0xf6, 0xd2, 0x96, 0x1e, 0xe9, 0x2d, 0x60, 0xda, 0xf1, 0xf2, 0x8b, 0x26, 0xfd, 0x69, 0x57, 0x70,
	0x74, 0x41, 0x23, 0x06, 0xf7, 0x4b, 0x31, 0x81, 0x8f, 0x68, 0x94, 0x83, 0x35, 0xbf, 0x62, 0x70,
	0x9f, 0x2c, 0x26, 0x70, 0x87, 0x5f, 0x31, 0xfb, 0x61, 0x97, 0x17, 0x4c, 0xc1, 0x65, 0x92, 0xe3,
	0xcd, 0x01, 0x6f, 0x39, 0x85, 0xba, 0x19, 0xff, 0x21, 0x5a, 0x62, 0xc2, 0x28, 0x3b, 0xc6, 0x5c,
	0x90, 0xa1, 0x66, 0x70, 0xb9, 0x2c, 0xfa, 0xe5, 0x24, 0xda, 0x12, 0x6f, 0x34, 0xb3, 0x66, 0x65,
	0x59, 0xa7, 0xe8, 0xf3, 0x40, 0xaf, 0xa5, 0x70, 0x33, 0x2f, 0x7b, 0x80, 0x4a, 0x62, 0x18, 0x11,
	0x2e, 0x34, 0x53, 0x46, 0xc3, 0xed, 0xb2, 0xe8, 0x23, 0x31, 0x8c, 0x5a, 0x2e, 0x82, 0x1f, 0xa1,
	0xe5, 0x31, 0xc1, 0x8e, 0x9c, 0x54, 0x1a, 0xae, 0x97, 0x45, 0xbf, 0x92, 0xd1, 0x9a, 0x10, 0x4e,
	0x93, 0x85, 0x6c, 0xc0, 0x0c, 0xd3, 0x70, 0xbd, 0xb8, 0x64, 0xfb, 0x2e, 0x92, 0x26, 0x73, 0x84,
	0x34, 0x19, 0xca, 0x92, 0x39, 0x9a, 0x4b, 0xd6, 0xd8, 0x43, 0x68, 0xbc, 0x4d, 0x78, 0x07, 0x95,
	0x12, 0xaf, 0xec, 0x7f, 0xbd, 0xc2, 0xc6, 0xec, 0x66, 0x69, 0xbb, 0x36, 0xde, 0xa2, 0xf1, 0x66,
	0xfa, 0xce, 0x7c, 0x08, 0x34, 0xde, 0xa2, 0x79, 0xfb, 0x63, 0xa8, 0x71, 0x1b, 0xad, 0xea, 0x98,
	0x0a, 0x22, 0x05, 0x1c, 0x33, 0xa2, 0x99, 0xd6, 0x5c, 0x8a, 0x34, 0x55, 0x7d, 0x6b, 0xfc, 0x28,
	0x69, 0x73, 0x5b, 0x41, 0xc7, 0x11, 0x5a, 0xa1, 0x8f, 0xad, 0xf0, 0x58, 0xc0, 0x0b, 0x25, 0x51,
	0x35, 0x7e, 0x29, 0xa0, 0xa5, 0x0e, 0x3c, 0x73, 0xdc, 0xdc, 0x6a, 0x86, 0x9f, 0x20, 0x44, 0x63,
	0x0e, 0x05, 0x0e, 0x75, 0x32, 0x44, 0xd5, 0x2d, 0xf7, 0xf0, 0xd9, 0x8d, 0xb9, 0xab, 0xc3, 0x2f,
	0xd2, 0xf4, 0x27, 0xde, 0x40, 0x37, 0x5d, 0x37, 0x76, 0x82, 0x4a, 0xdb, 0x08, 0xba, 0x81, 0xba,
	0x7d, 0x07, 0xe0, 0x2f, 0xd0, 0x7c, 0x92, 0x6e, 0x16, 0x28, 0xa5, 0x8c, 0x32, 0xd4, 0x7e, 0x02,
	0x35, 0x4e, 0xd1, 0x4d, 0xe7, 0xd1, 0xe3, 0x64, 0xf0, 0x53, 0x8b, 0xac, 0xc2, 0x4d, 0x71, 0xf6,
	0xb8, 0x72, 0x07, 0xc1, 0xd1, 0x9f, 0x4e, 0x5a, 0xea, 0x8a, 0xa8, 0x4c, 0x59, 0x3a, 0xe1, 0xe6,
	0x1e, 0x2a, 0x66, 0x99, 0xf0, 0x0b, 0x54, 0x76, 0xef, 0x13, 0x37, 0x4e, 0x89, 0x8f, 0x2b, 0x93,
	0xeb, 0xb9, 0x1d, 0x81, 0xc7, 0x54, 0x32, 0x76, 0x0d, 0x8a, 0xaa, 0xce, 0xb8, 0x3d, 0x29, 0x7a,
	0xbc, 0xdf, 0x89, 0x59, 0xf0, 0x7f, 0x6f, 0xce, 0x2b, 0x54, 0xc9, 0x2f, 0x61, 0x6f, 0x86, 0x27,
	0xe8, 0x96, 0x62, 0xe7, 0x43, 0xa6, 0x4d, 0x92, 0x73, 0xd5, 0x59, 0x39, 0x55, 0x89, 0x9f, 0xb2,
	0x1a, 0xaf, 0x51, 0x2d, 0x0f, 0xfe, 0xe7, 0x5d, 0x6e, 0x5c, 0xa1, 0xb5, 0x7f, 0x4b, 0x64, 0x8b,
	0xda, 0xcc, 0xb6, 0xf7, 0x73, 0x79, 0x12, 0x1c, 0xef, 0xa0, 0x05, 0x95, 0x08, 0xbd, 0x1b, 0x50,
	0xff, 0x9d, 0x6b, 0xf5, 0xa7, 0x99, 0xfd, 0x8c, 0xfa, 0xe8, 0x0a, 0x15, 0xb3, 0x0f, 0x18, 0x5e,
	0x41, 0x95, 0xee, 0xee, 0xab, 0xef, 0x9b, 0xa4, 0xfb, 0xe3, 0x49, 0x93, 0x1c, 0x1d, 0x1f, 0x35,
	0xab, 0x33, 0xb8, 0x86, 0xaa, 0xb9, 0x60, 0xeb, 0x68, 0xbf, 0xf9, 0xae, 0x5a, 0x98, 0xa2, 0x1e,
	0xee, 0x76, 0x0e, 0xab, 0x37, 0xb0, 0x87, 0x6a, 0x53, 0x41, 0xd2, 0xdd, 0xdb, 0x6d, 0x57, 0x67,
	0xa7, 0xe8, 0x10, 0x9c, 0xdb, 0xfe, 0xb9, 0x80, 0xe6, 0x5d, 0x79, 0xf8, 0x29, 0x2a, 0xba, 0x5f,
	0xaf, 0x99, 0xc1, 0xe5, 0xa4, 0xc9, 0x66, 0x14, 0x9b, 0x51, 0x7d, 0x25, 0xd7, 0x46, 0xda, 0x40,
	0x63, 0x06, 0xef, 0xa3, 0x72, 0xbe, 0x35, 0x5c, 0xbb, 0xd6, 0x6d, 0x5b, 0xf7, 0xeb, 0xf7, 0x3e,
	0xeb, 0x41, 0x5b, 0xf7, 0x1b, 0x33, 0xaf, 0xea, 0xbf, 0x7f, 0x5a, 0x2f, 0xfc, 0xf1, 0x69, 0xbd,
	0xf0, 0xe7, 0xa7, 0xf5, 0xc2, 0xaf, 0x7f, 0xad, 0xcf, 0xbc, 0x5f, 0x38, 0xa5, 0x03, 0xf8, 0x9b,
	0xe3, 0xc3, 0x3c, 0xfc, 0xf3, 0xec, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xc3, 0x66, 0x07,
	0xad, 0x0c, 0x00, 0x00,
}
