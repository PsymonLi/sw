// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proxyrcb.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ProxyrCbKeyHandle is used to operate on a proxyrcb either by its key or handle
type ProxyrCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*ProxyrCbKeyHandle_ProxyrcbId
	//	*ProxyrCbKeyHandle_ProxyrcbHandle
	KeyOrHandle isProxyrCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *ProxyrCbKeyHandle) Reset()                    { *m = ProxyrCbKeyHandle{} }
func (m *ProxyrCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbKeyHandle) ProtoMessage()               {}
func (*ProxyrCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{0} }

type isProxyrCbKeyHandle_KeyOrHandle interface {
	isProxyrCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyrCbKeyHandle_ProxyrcbId struct {
	ProxyrcbId uint32 `protobuf:"varint,1,opt,name=proxyrcb_id,json=proxyrcbId,proto3,oneof"`
}
type ProxyrCbKeyHandle_ProxyrcbHandle struct {
	ProxyrcbHandle uint64 `protobuf:"fixed64,2,opt,name=proxyrcb_handle,json=proxyrcbHandle,proto3,oneof"`
}

func (*ProxyrCbKeyHandle_ProxyrcbId) isProxyrCbKeyHandle_KeyOrHandle()     {}
func (*ProxyrCbKeyHandle_ProxyrcbHandle) isProxyrCbKeyHandle_KeyOrHandle() {}

func (m *ProxyrCbKeyHandle) GetKeyOrHandle() isProxyrCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxyrCbKeyHandle) GetProxyrcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*ProxyrCbKeyHandle_ProxyrcbId); ok {
		return x.ProxyrcbId
	}
	return 0
}

func (m *ProxyrCbKeyHandle) GetProxyrcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*ProxyrCbKeyHandle_ProxyrcbHandle); ok {
		return x.ProxyrcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxyrCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxyrCbKeyHandle_OneofMarshaler, _ProxyrCbKeyHandle_OneofUnmarshaler, _ProxyrCbKeyHandle_OneofSizer, []interface{}{
		(*ProxyrCbKeyHandle_ProxyrcbId)(nil),
		(*ProxyrCbKeyHandle_ProxyrcbHandle)(nil),
	}
}

func _ProxyrCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxyrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyrCbKeyHandle_ProxyrcbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ProxyrcbId))
	case *ProxyrCbKeyHandle_ProxyrcbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.ProxyrcbHandle))
	case nil:
	default:
		return fmt.Errorf("ProxyrCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _ProxyrCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxyrCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.proxyrcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.proxyrcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProxyrCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxyrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyrCbKeyHandle_ProxyrcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProxyrcbId))
	case *ProxyrCbKeyHandle_ProxyrcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProxyrCbSpec captures all the proxyrcb level configuration
type ProxyrCbSpec struct {
	Meta                    *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *ProxyrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi                      uint32             `protobuf:"varint,3,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci                      uint32             `protobuf:"varint,4,opt,name=ci,proto3" json:"ci,omitempty"`
	ProxyrcbFlags           uint32             `protobuf:"varint,5,opt,name=proxyrcb_flags,json=proxyrcbFlags,proto3" json:"proxyrcb_flags,omitempty"`
	MyTxqBase               uint64             `protobuf:"varint,6,opt,name=my_txq_base,json=myTxqBase,proto3" json:"my_txq_base,omitempty"`
	MyTxqRingSizeShift      uint32             `protobuf:"varint,7,opt,name=my_txq_ring_size_shift,json=myTxqRingSizeShift,proto3" json:"my_txq_ring_size_shift,omitempty"`
	MyTxqEntrySizeShift     uint32             `protobuf:"varint,8,opt,name=my_txq_entry_size_shift,json=myTxqEntrySizeShift,proto3" json:"my_txq_entry_size_shift,omitempty"`
	ChainRxqBase            uint64             `protobuf:"varint,9,opt,name=chain_rxq_base,json=chainRxqBase,proto3" json:"chain_rxq_base,omitempty"`
	ChainRxqRingIndicesAddr uint64             `protobuf:"varint,10,opt,name=chain_rxq_ring_indices_addr,json=chainRxqRingIndicesAddr,proto3" json:"chain_rxq_ring_indices_addr,omitempty"`
	ChainRxqRingSizeShift   uint32             `protobuf:"varint,11,opt,name=chain_rxq_ring_size_shift,json=chainRxqRingSizeShift,proto3" json:"chain_rxq_ring_size_shift,omitempty"`
	ChainRxqEntrySizeShift  uint32             `protobuf:"varint,12,opt,name=chain_rxq_entry_size_shift,json=chainRxqEntrySizeShift,proto3" json:"chain_rxq_entry_size_shift,omitempty"`
	ChainRxqRingIndexSelect uint32             `protobuf:"varint,13,opt,name=chain_rxq_ring_index_select,json=chainRxqRingIndexSelect,proto3" json:"chain_rxq_ring_index_select,omitempty"`
	RedirSpan               uint32             `protobuf:"varint,14,opt,name=redir_span,json=redirSpan,proto3" json:"redir_span,omitempty"`
	IpSa                    *IPAddress         `protobuf:"bytes,15,opt,name=ip_sa,json=ipSa" json:"ip_sa,omitempty"`
	IpDa                    *IPAddress         `protobuf:"bytes,16,opt,name=ip_da,json=ipDa" json:"ip_da,omitempty"`
	Sport                   uint32             `protobuf:"varint,17,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport                   uint32             `protobuf:"varint,18,opt,name=dport,proto3" json:"dport,omitempty"`
	Vrf                     uint32             `protobuf:"varint,19,opt,name=vrf,proto3" json:"vrf,omitempty"`
	Af                      uint32             `protobuf:"varint,20,opt,name=af,proto3" json:"af,omitempty"`
	IpProto                 IPProtocol         `protobuf:"varint,21,opt,name=ip_proto,json=ipProto,proto3,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	Dir                     uint32             `protobuf:"varint,22,opt,name=dir,proto3" json:"dir,omitempty"`
	Role                    uint32             `protobuf:"varint,23,opt,name=role,proto3" json:"role,omitempty"`
	RevCbId                 uint32             `protobuf:"varint,24,opt,name=rev_cb_id,json=revCbId,proto3" json:"rev_cb_id,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsRedir   uint64 `protobuf:"varint,25,opt,name=stat_pkts_redir,json=statPktsRedir,proto3" json:"stat_pkts_redir,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,26,opt,name=stat_pkts_discard,json=statPktsDiscard,proto3" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady          uint32 `protobuf:"varint,27,opt,name=stat_cb_not_ready,json=statCbNotReady,proto3" json:"stat_cb_not_ready,omitempty"`
	StatNullRingIndicesAddr uint32 `protobuf:"varint,28,opt,name=stat_null_ring_indices_addr,json=statNullRingIndicesAddr,proto3" json:"stat_null_ring_indices_addr,omitempty"`
	StatAolErr              uint32 `protobuf:"varint,29,opt,name=stat_aol_err,json=statAolErr,proto3" json:"stat_aol_err,omitempty"`
	StatRxqFull             uint32 `protobuf:"varint,30,opt,name=stat_rxq_full,json=statRxqFull,proto3" json:"stat_rxq_full,omitempty"`
	StatTxqEmpty            uint32 `protobuf:"varint,31,opt,name=stat_txq_empty,json=statTxqEmpty,proto3" json:"stat_txq_empty,omitempty"`
	StatSemAllocFull        uint32 `protobuf:"varint,32,opt,name=stat_sem_alloc_full,json=statSemAllocFull,proto3" json:"stat_sem_alloc_full,omitempty"`
	StatSemFreeFull         uint32 `protobuf:"varint,33,opt,name=stat_sem_free_full,json=statSemFreeFull,proto3" json:"stat_sem_free_full,omitempty"`
}

func (m *ProxyrCbSpec) Reset()                    { *m = ProxyrCbSpec{} }
func (m *ProxyrCbSpec) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbSpec) ProtoMessage()               {}
func (*ProxyrCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{1} }

func (m *ProxyrCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyrCbSpec) GetKeyOrHandle() *ProxyrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxyrCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *ProxyrCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *ProxyrCbSpec) GetProxyrcbFlags() uint32 {
	if m != nil {
		return m.ProxyrcbFlags
	}
	return 0
}

func (m *ProxyrCbSpec) GetMyTxqBase() uint64 {
	if m != nil {
		return m.MyTxqBase
	}
	return 0
}

func (m *ProxyrCbSpec) GetMyTxqRingSizeShift() uint32 {
	if m != nil {
		return m.MyTxqRingSizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetMyTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.MyTxqEntrySizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqBase() uint64 {
	if m != nil {
		return m.ChainRxqBase
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainRxqRingIndicesAddr
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainRxqRingSizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainRxqEntrySizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainRxqRingIndexSelect
	}
	return 0
}

func (m *ProxyrCbSpec) GetRedirSpan() uint32 {
	if m != nil {
		return m.RedirSpan
	}
	return 0
}

func (m *ProxyrCbSpec) GetIpSa() *IPAddress {
	if m != nil {
		return m.IpSa
	}
	return nil
}

func (m *ProxyrCbSpec) GetIpDa() *IPAddress {
	if m != nil {
		return m.IpDa
	}
	return nil
}

func (m *ProxyrCbSpec) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *ProxyrCbSpec) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *ProxyrCbSpec) GetVrf() uint32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

func (m *ProxyrCbSpec) GetAf() uint32 {
	if m != nil {
		return m.Af
	}
	return 0
}

func (m *ProxyrCbSpec) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *ProxyrCbSpec) GetDir() uint32 {
	if m != nil {
		return m.Dir
	}
	return 0
}

func (m *ProxyrCbSpec) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *ProxyrCbSpec) GetRevCbId() uint32 {
	if m != nil {
		return m.RevCbId
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatPktsRedir() uint64 {
	if m != nil {
		return m.StatPktsRedir
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatNullRingIndicesAddr() uint32 {
	if m != nil {
		return m.StatNullRingIndicesAddr
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatAolErr() uint32 {
	if m != nil {
		return m.StatAolErr
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatRxqFull() uint32 {
	if m != nil {
		return m.StatRxqFull
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatTxqEmpty() uint32 {
	if m != nil {
		return m.StatTxqEmpty
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatSemAllocFull() uint32 {
	if m != nil {
		return m.StatSemAllocFull
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatSemFreeFull() uint32 {
	if m != nil {
		return m.StatSemFreeFull
	}
	return 0
}

// ProxyrCbRequestMsg is batched add or modify proxyrcb request
type ProxyrCbRequestMsg struct {
	Request []*ProxyrCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyrCbRequestMsg) Reset()                    { *m = ProxyrCbRequestMsg{} }
func (m *ProxyrCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbRequestMsg) ProtoMessage()               {}
func (*ProxyrCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{2} }

func (m *ProxyrCbRequestMsg) GetRequest() []*ProxyrCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyrCbStatus is the operational status of a given proxyrcb
type ProxyrCbStatus struct {
	ProxyrcbHandle uint64 `protobuf:"fixed64,1,opt,name=proxyrcb_handle,json=proxyrcbHandle,proto3" json:"proxyrcb_handle,omitempty"`
}

func (m *ProxyrCbStatus) Reset()                    { *m = ProxyrCbStatus{} }
func (m *ProxyrCbStatus) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbStatus) ProtoMessage()               {}
func (*ProxyrCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{3} }

func (m *ProxyrCbStatus) GetProxyrcbHandle() uint64 {
	if m != nil {
		return m.ProxyrcbHandle
	}
	return 0
}

// ProxyrCbResponse is response to ProxyrCbSpec
type ProxyrCbResponse struct {
	ApiStatus      ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProxyrcbStatus *ProxyrCbStatus `protobuf:"bytes,2,opt,name=proxyrcb_status,json=proxyrcbStatus" json:"proxyrcb_status,omitempty"`
}

func (m *ProxyrCbResponse) Reset()                    { *m = ProxyrCbResponse{} }
func (m *ProxyrCbResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbResponse) ProtoMessage()               {}
func (*ProxyrCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{4} }

func (m *ProxyrCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyrCbResponse) GetProxyrcbStatus() *ProxyrCbStatus {
	if m != nil {
		return m.ProxyrcbStatus
	}
	return nil
}

// ProxyrCbResponseMsg is batched response to ProxyrCbRequestMsg
type ProxyrCbResponseMsg struct {
	Response []*ProxyrCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyrCbResponseMsg) Reset()                    { *m = ProxyrCbResponseMsg{} }
func (m *ProxyrCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbResponseMsg) ProtoMessage()               {}
func (*ProxyrCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{5} }

func (m *ProxyrCbResponseMsg) GetResponse() []*ProxyrCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxyrCbDeleteRequest is used to delete a proxyrcb
type ProxyrCbDeleteRequest struct {
	Meta        *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxyrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyrCbDeleteRequest) Reset()                    { *m = ProxyrCbDeleteRequest{} }
func (m *ProxyrCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbDeleteRequest) ProtoMessage()               {}
func (*ProxyrCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{6} }

func (m *ProxyrCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyrCbDeleteRequest) GetKeyOrHandle() *ProxyrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyrCbDeleteRequestMsg is used to delete a batch of proxyrcbs
type ProxyrCbDeleteRequestMsg struct {
	Request []*ProxyrCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyrCbDeleteRequestMsg) Reset()                    { *m = ProxyrCbDeleteRequestMsg{} }
func (m *ProxyrCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbDeleteRequestMsg) ProtoMessage()               {}
func (*ProxyrCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{7} }

func (m *ProxyrCbDeleteRequestMsg) GetRequest() []*ProxyrCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyrCbDeleteResponseMsg is batched response to ProxyrCbDeleteRequestMsg
type ProxyrCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxyrCbDeleteResponseMsg) Reset()         { *m = ProxyrCbDeleteResponseMsg{} }
func (m *ProxyrCbDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ProxyrCbDeleteResponseMsg) ProtoMessage()    {}
func (*ProxyrCbDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorProxyrcb, []int{8}
}

func (m *ProxyrCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// ProxyrCbGetRequest is used to get information about a proxyrcb
type ProxyrCbGetRequest struct {
	Meta        *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxyrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyrCbGetRequest) Reset()                    { *m = ProxyrCbGetRequest{} }
func (m *ProxyrCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetRequest) ProtoMessage()               {}
func (*ProxyrCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{9} }

func (m *ProxyrCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyrCbGetRequest) GetKeyOrHandle() *ProxyrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyrCbGetRequestMsg is batched GET requests for proxyrcbs
type ProxyrCbGetRequestMsg struct {
	Request []*ProxyrCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyrCbGetRequestMsg) Reset()                    { *m = ProxyrCbGetRequestMsg{} }
func (m *ProxyrCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetRequestMsg) ProtoMessage()               {}
func (*ProxyrCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{10} }

func (m *ProxyrCbGetRequestMsg) GetRequest() []*ProxyrCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyrCbStats is the statistics object for each proxyrcb
type ProxyrCbStats struct {
}

func (m *ProxyrCbStats) Reset()                    { *m = ProxyrCbStats{} }
func (m *ProxyrCbStats) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbStats) ProtoMessage()               {}
func (*ProxyrCbStats) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{11} }

// ProxyrCbGetResponse captures all the information about a proxyrcb
// only if api_status indicates success, other fields are valid
type ProxyrCbGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *ProxyrCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *ProxyrCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *ProxyrCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *ProxyrCbGetResponse) Reset()                    { *m = ProxyrCbGetResponse{} }
func (m *ProxyrCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetResponse) ProtoMessage()               {}
func (*ProxyrCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{12} }

func (m *ProxyrCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyrCbGetResponse) GetSpec() *ProxyrCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxyrCbGetResponse) GetStatus() *ProxyrCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProxyrCbGetResponse) GetStats() *ProxyrCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ProxyrCbGetResponseMsg is batched response to ProxyrCbGetRequestMsg
type ProxyrCbGetResponseMsg struct {
	Response []*ProxyrCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyrCbGetResponseMsg) Reset()                    { *m = ProxyrCbGetResponseMsg{} }
func (m *ProxyrCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetResponseMsg) ProtoMessage()               {}
func (*ProxyrCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyrcb, []int{13} }

func (m *ProxyrCbGetResponseMsg) GetResponse() []*ProxyrCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*ProxyrCbKeyHandle)(nil), "proxyrcb.ProxyrCbKeyHandle")
	proto.RegisterType((*ProxyrCbSpec)(nil), "proxyrcb.ProxyrCbSpec")
	proto.RegisterType((*ProxyrCbRequestMsg)(nil), "proxyrcb.ProxyrCbRequestMsg")
	proto.RegisterType((*ProxyrCbStatus)(nil), "proxyrcb.ProxyrCbStatus")
	proto.RegisterType((*ProxyrCbResponse)(nil), "proxyrcb.ProxyrCbResponse")
	proto.RegisterType((*ProxyrCbResponseMsg)(nil), "proxyrcb.ProxyrCbResponseMsg")
	proto.RegisterType((*ProxyrCbDeleteRequest)(nil), "proxyrcb.ProxyrCbDeleteRequest")
	proto.RegisterType((*ProxyrCbDeleteRequestMsg)(nil), "proxyrcb.ProxyrCbDeleteRequestMsg")
	proto.RegisterType((*ProxyrCbDeleteResponseMsg)(nil), "proxyrcb.ProxyrCbDeleteResponseMsg")
	proto.RegisterType((*ProxyrCbGetRequest)(nil), "proxyrcb.ProxyrCbGetRequest")
	proto.RegisterType((*ProxyrCbGetRequestMsg)(nil), "proxyrcb.ProxyrCbGetRequestMsg")
	proto.RegisterType((*ProxyrCbStats)(nil), "proxyrcb.ProxyrCbStats")
	proto.RegisterType((*ProxyrCbGetResponse)(nil), "proxyrcb.ProxyrCbGetResponse")
	proto.RegisterType((*ProxyrCbGetResponseMsg)(nil), "proxyrcb.ProxyrCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProxyrCb service

type ProxyrCbClient interface {
	ProxyrCbCreate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error)
	ProxyrCbUpdate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error)
	ProxyrCbDelete(ctx context.Context, in *ProxyrCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxyrCbDeleteResponseMsg, error)
	ProxyrCbGet(ctx context.Context, in *ProxyrCbGetRequestMsg, opts ...grpc.CallOption) (*ProxyrCbGetResponseMsg, error)
}

type proxyrCbClient struct {
	cc *grpc.ClientConn
}

func NewProxyrCbClient(cc *grpc.ClientConn) ProxyrCbClient {
	return &proxyrCbClient{cc}
}

func (c *proxyrCbClient) ProxyrCbCreate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error) {
	out := new(ProxyrCbResponseMsg)
	err := grpc.Invoke(ctx, "/proxyrcb.ProxyrCb/ProxyrCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyrCbClient) ProxyrCbUpdate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error) {
	out := new(ProxyrCbResponseMsg)
	err := grpc.Invoke(ctx, "/proxyrcb.ProxyrCb/ProxyrCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyrCbClient) ProxyrCbDelete(ctx context.Context, in *ProxyrCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxyrCbDeleteResponseMsg, error) {
	out := new(ProxyrCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/proxyrcb.ProxyrCb/ProxyrCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyrCbClient) ProxyrCbGet(ctx context.Context, in *ProxyrCbGetRequestMsg, opts ...grpc.CallOption) (*ProxyrCbGetResponseMsg, error) {
	out := new(ProxyrCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/proxyrcb.ProxyrCb/ProxyrCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProxyrCb service

type ProxyrCbServer interface {
	ProxyrCbCreate(context.Context, *ProxyrCbRequestMsg) (*ProxyrCbResponseMsg, error)
	ProxyrCbUpdate(context.Context, *ProxyrCbRequestMsg) (*ProxyrCbResponseMsg, error)
	ProxyrCbDelete(context.Context, *ProxyrCbDeleteRequestMsg) (*ProxyrCbDeleteResponseMsg, error)
	ProxyrCbGet(context.Context, *ProxyrCbGetRequestMsg) (*ProxyrCbGetResponseMsg, error)
}

func RegisterProxyrCbServer(s *grpc.Server, srv ProxyrCbServer) {
	s.RegisterService(&_ProxyrCb_serviceDesc, srv)
}

func _ProxyrCb_ProxyrCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyrCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyrCbServer).ProxyrCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyrcb.ProxyrCb/ProxyrCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyrCbServer).ProxyrCbCreate(ctx, req.(*ProxyrCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyrCb_ProxyrCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyrCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyrCbServer).ProxyrCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyrcb.ProxyrCb/ProxyrCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyrCbServer).ProxyrCbUpdate(ctx, req.(*ProxyrCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyrCb_ProxyrCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyrCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyrCbServer).ProxyrCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyrcb.ProxyrCb/ProxyrCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyrCbServer).ProxyrCbDelete(ctx, req.(*ProxyrCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyrCb_ProxyrCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyrCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyrCbServer).ProxyrCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyrcb.ProxyrCb/ProxyrCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyrCbServer).ProxyrCbGet(ctx, req.(*ProxyrCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProxyrCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxyrcb.ProxyrCb",
	HandlerType: (*ProxyrCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyrCbCreate",
			Handler:    _ProxyrCb_ProxyrCbCreate_Handler,
		},
		{
			MethodName: "ProxyrCbUpdate",
			Handler:    _ProxyrCb_ProxyrCbUpdate_Handler,
		},
		{
			MethodName: "ProxyrCbDelete",
			Handler:    _ProxyrCb_ProxyrCbDelete_Handler,
		},
		{
			MethodName: "ProxyrCbGet",
			Handler:    _ProxyrCb_ProxyrCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxyrcb.proto",
}

func (m *ProxyrCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ProxyrCbKeyHandle_ProxyrcbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintProxyrcb(dAtA, i, uint64(m.ProxyrcbId))
	return i, nil
}
func (m *ProxyrCbKeyHandle_ProxyrcbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ProxyrcbHandle))
	i += 8
	return i, nil
}
func (m *ProxyrCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n3, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Pi != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Ci))
	}
	if m.ProxyrcbFlags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.ProxyrcbFlags))
	}
	if m.MyTxqBase != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainRxqBase != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.ChainRxqBase))
	}
	if m.ChainRxqRingIndicesAddr != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.ChainRxqRingIndicesAddr))
	}
	if m.ChainRxqRingSizeShift != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.ChainRxqRingSizeShift))
	}
	if m.ChainRxqEntrySizeShift != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.ChainRxqEntrySizeShift))
	}
	if m.ChainRxqRingIndexSelect != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.ChainRxqRingIndexSelect))
	}
	if m.RedirSpan != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.RedirSpan))
	}
	if m.IpSa != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.IpSa.Size()))
		n4, err := m.IpSa.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.IpDa != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.IpDa.Size()))
		n5, err := m.IpDa.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Sport != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Sport))
	}
	if m.Dport != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Dport))
	}
	if m.Vrf != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Vrf))
	}
	if m.Af != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Af))
	}
	if m.IpProto != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.IpProto))
	}
	if m.Dir != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Dir))
	}
	if m.Role != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Role))
	}
	if m.RevCbId != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.RevCbId))
	}
	if m.StatPktsRedir != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.StatPktsRedir))
	}
	if m.StatPktsDiscard != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.StatPktsDiscard))
	}
	if m.StatCbNotReady != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.StatCbNotReady))
	}
	if m.StatNullRingIndicesAddr != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.StatNullRingIndicesAddr))
	}
	if m.StatAolErr != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.StatAolErr))
	}
	if m.StatRxqFull != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.StatRxqFull))
	}
	if m.StatTxqEmpty != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.StatTxqEmpty))
	}
	if m.StatSemAllocFull != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.StatSemAllocFull))
	}
	if m.StatSemFreeFull != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.StatSemFreeFull))
	}
	return i, nil
}

func (m *ProxyrCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyrCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyrcbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ProxyrcbHandle))
		i += 8
	}
	return i, nil
}

func (m *ProxyrCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.ProxyrcbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.ProxyrcbStatus.Size()))
		n6, err := m.ProxyrcbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ProxyrCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyrCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Meta.Size()))
		n7, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n8, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *ProxyrCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyrCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA10 := make([]byte, len(m.ApiStatus)*10)
		var j9 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *ProxyrCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Meta.Size()))
		n11, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n12, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ProxyrCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyrCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ProxyrCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Spec.Size()))
		n13, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Status.Size()))
		n14, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProxyrcb(dAtA, i, uint64(m.Stats.Size()))
		n15, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *ProxyrCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintProxyrcb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProxyrCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *ProxyrCbKeyHandle_ProxyrcbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovProxyrcb(uint64(m.ProxyrcbId))
	return n
}
func (m *ProxyrCbKeyHandle_ProxyrcbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *ProxyrCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	if m.Pi != 0 {
		n += 1 + sovProxyrcb(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovProxyrcb(uint64(m.Ci))
	}
	if m.ProxyrcbFlags != 0 {
		n += 1 + sovProxyrcb(uint64(m.ProxyrcbFlags))
	}
	if m.MyTxqBase != 0 {
		n += 1 + sovProxyrcb(uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		n += 1 + sovProxyrcb(uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		n += 1 + sovProxyrcb(uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainRxqBase != 0 {
		n += 1 + sovProxyrcb(uint64(m.ChainRxqBase))
	}
	if m.ChainRxqRingIndicesAddr != 0 {
		n += 1 + sovProxyrcb(uint64(m.ChainRxqRingIndicesAddr))
	}
	if m.ChainRxqRingSizeShift != 0 {
		n += 1 + sovProxyrcb(uint64(m.ChainRxqRingSizeShift))
	}
	if m.ChainRxqEntrySizeShift != 0 {
		n += 1 + sovProxyrcb(uint64(m.ChainRxqEntrySizeShift))
	}
	if m.ChainRxqRingIndexSelect != 0 {
		n += 1 + sovProxyrcb(uint64(m.ChainRxqRingIndexSelect))
	}
	if m.RedirSpan != 0 {
		n += 1 + sovProxyrcb(uint64(m.RedirSpan))
	}
	if m.IpSa != nil {
		l = m.IpSa.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	if m.IpDa != nil {
		l = m.IpDa.Size()
		n += 2 + l + sovProxyrcb(uint64(l))
	}
	if m.Sport != 0 {
		n += 2 + sovProxyrcb(uint64(m.Sport))
	}
	if m.Dport != 0 {
		n += 2 + sovProxyrcb(uint64(m.Dport))
	}
	if m.Vrf != 0 {
		n += 2 + sovProxyrcb(uint64(m.Vrf))
	}
	if m.Af != 0 {
		n += 2 + sovProxyrcb(uint64(m.Af))
	}
	if m.IpProto != 0 {
		n += 2 + sovProxyrcb(uint64(m.IpProto))
	}
	if m.Dir != 0 {
		n += 2 + sovProxyrcb(uint64(m.Dir))
	}
	if m.Role != 0 {
		n += 2 + sovProxyrcb(uint64(m.Role))
	}
	if m.RevCbId != 0 {
		n += 2 + sovProxyrcb(uint64(m.RevCbId))
	}
	if m.StatPktsRedir != 0 {
		n += 2 + sovProxyrcb(uint64(m.StatPktsRedir))
	}
	if m.StatPktsDiscard != 0 {
		n += 2 + sovProxyrcb(uint64(m.StatPktsDiscard))
	}
	if m.StatCbNotReady != 0 {
		n += 2 + sovProxyrcb(uint64(m.StatCbNotReady))
	}
	if m.StatNullRingIndicesAddr != 0 {
		n += 2 + sovProxyrcb(uint64(m.StatNullRingIndicesAddr))
	}
	if m.StatAolErr != 0 {
		n += 2 + sovProxyrcb(uint64(m.StatAolErr))
	}
	if m.StatRxqFull != 0 {
		n += 2 + sovProxyrcb(uint64(m.StatRxqFull))
	}
	if m.StatTxqEmpty != 0 {
		n += 2 + sovProxyrcb(uint64(m.StatTxqEmpty))
	}
	if m.StatSemAllocFull != 0 {
		n += 2 + sovProxyrcb(uint64(m.StatSemAllocFull))
	}
	if m.StatSemFreeFull != 0 {
		n += 2 + sovProxyrcb(uint64(m.StatSemFreeFull))
	}
	return n
}

func (m *ProxyrCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxyrcb(uint64(l))
		}
	}
	return n
}

func (m *ProxyrCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.ProxyrcbHandle != 0 {
		n += 9
	}
	return n
}

func (m *ProxyrCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovProxyrcb(uint64(m.ApiStatus))
	}
	if m.ProxyrcbStatus != nil {
		l = m.ProxyrcbStatus.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	return n
}

func (m *ProxyrCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovProxyrcb(uint64(l))
		}
	}
	return n
}

func (m *ProxyrCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	return n
}

func (m *ProxyrCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxyrcb(uint64(l))
		}
	}
	return n
}

func (m *ProxyrCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovProxyrcb(uint64(e))
		}
		n += 1 + sovProxyrcb(uint64(l)) + l
	}
	return n
}

func (m *ProxyrCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	return n
}

func (m *ProxyrCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxyrcb(uint64(l))
		}
	}
	return n
}

func (m *ProxyrCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ProxyrCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovProxyrcb(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovProxyrcb(uint64(l))
	}
	return n
}

func (m *ProxyrCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovProxyrcb(uint64(l))
		}
	}
	return n
}

func sovProxyrcb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProxyrcb(x uint64) (n int) {
	return sovProxyrcb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProxyrCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxyrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbFlags", wireType)
			}
			m.ProxyrcbFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyrcbFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqBase", wireType)
			}
			m.MyTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqRingSizeShift", wireType)
			}
			m.MyTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqEntrySizeShift", wireType)
			}
			m.MyTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqBase", wireType)
			}
			m.ChainRxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingIndicesAddr", wireType)
			}
			m.ChainRxqRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingIndicesAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingSizeShift", wireType)
			}
			m.ChainRxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqEntrySizeShift", wireType)
			}
			m.ChainRxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingIndexSelect", wireType)
			}
			m.ChainRxqRingIndexSelect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingIndexSelect |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirSpan", wireType)
			}
			m.RedirSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedirSpan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpSa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpSa == nil {
				m.IpSa = &IPAddress{}
			}
			if err := m.IpSa.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpDa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpDa == nil {
				m.IpDa = &IPAddress{}
			}
			if err := m.IpDa.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sport", wireType)
			}
			m.Sport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dport", wireType)
			}
			m.Dport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrf", wireType)
			}
			m.Vrf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vrf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Af", wireType)
			}
			m.Af = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Af |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProto", wireType)
			}
			m.IpProto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpProto |= (IPProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			m.Dir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dir |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevCbId", wireType)
			}
			m.RevCbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevCbId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPktsRedir", wireType)
			}
			m.StatPktsRedir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPktsRedir |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPktsDiscard", wireType)
			}
			m.StatPktsDiscard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPktsDiscard |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatCbNotReady", wireType)
			}
			m.StatCbNotReady = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatCbNotReady |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatNullRingIndicesAddr", wireType)
			}
			m.StatNullRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatNullRingIndicesAddr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatAolErr", wireType)
			}
			m.StatAolErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatAolErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatRxqFull", wireType)
			}
			m.StatRxqFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatRxqFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatTxqEmpty", wireType)
			}
			m.StatTxqEmpty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatTxqEmpty |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatSemAllocFull", wireType)
			}
			m.StatSemAllocFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatSemAllocFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatSemFreeFull", wireType)
			}
			m.StatSemFreeFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatSemFreeFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyrCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbHandle", wireType)
			}
			m.ProxyrcbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyrcbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyrcbStatus == nil {
				m.ProxyrcbStatus = &ProxyrCbStatus{}
			}
			if err := m.ProxyrcbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxyrCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxyrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyrCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProxyrcb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProxyrcb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProxyrcb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProxyrcb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxyrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyrCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ProxyrCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ProxyrCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &ProxyrCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxyrCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProxyrcb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProxyrcb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxyrcb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProxyrcb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProxyrcb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProxyrcb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProxyrcb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProxyrcb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proxyrcb.proto", fileDescriptorProxyrcb) }

var fileDescriptorProxyrcb = []byte{
	// 1129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xae, 0x13, 0xe7, 0xeb, 0x38, 0xb6, 0x93, 0x49, 0x9b, 0x4c, 0xdd, 0x26, 0x71, 0xf7, 0x7d,
	0x03, 0x69, 0xa1, 0xa1, 0x32, 0x08, 0x51, 0x84, 0x84, 0xf2, 0xd1, 0x90, 0x08, 0xd2, 0x44, 0x6b,
	0x7a, 0xc5, 0xc5, 0x6a, 0xbc, 0x3b, 0x4e, 0x86, 0xac, 0xbd, 0x9b, 0x99, 0x71, 0x64, 0x57, 0x48,
	0xdc, 0x71, 0xcb, 0xdf, 0xe2, 0x12, 0x89, 0x6b, 0x24, 0x94, 0x5f, 0x82, 0xe6, 0xcc, 0xae, 0xd7,
	0xac, 0x9d, 0x46, 0x42, 0xa8, 0x77, 0x3b, 0xe7, 0x3c, 0xcf, 0x33, 0xe7, 0x73, 0x6c, 0xa8, 0xc4,
	0x32, 0xea, 0x0f, 0xa4, 0xdf, 0xda, 0x89, 0x65, 0xa4, 0x23, 0x32, 0x9f, 0x9e, 0x6b, 0x25, 0x3d,
	0x88, 0xb9, 0xb2, 0x66, 0x47, 0xc2, 0xf2, 0x19, 0x3a, 0xf6, 0x5b, 0xdf, 0xf2, 0xc1, 0x11, 0xeb,
	0x06, 0x21, 0x27, 0x4f, 0xa0, 0x94, 0xa2, 0x3d, 0x11, 0xd0, 0x42, 0xbd, 0xb0, 0x5d, 0x3e, 0xba,
	0xe7, 0x42, 0x6a, 0x3c, 0x0e, 0xc8, 0x53, 0xa8, 0x0e, 0x21, 0x17, 0xc8, 0xa2, 0x53, 0xf5, 0xc2,
	0xf6, 0xec, 0xd1, 0x3d, 0x77, 0x78, 0xb3, 0x55, 0xdb, 0xab, 0x42, 0xf9, 0x92, 0x0f, 0xbc, 0x48,
	0x26, 0x40, 0xe7, 0x57, 0x80, 0xc5, 0xf4, 0xd2, 0x66, 0xcc, 0x7d, 0xb2, 0x05, 0xc5, 0x0e, 0xd7,
	0x0c, 0x2f, 0x2a, 0x35, 0x96, 0x77, 0x6c, 0x80, 0xa7, 0xad, 0x1f, 0xb9, 0xaf, 0x4f, 0xb8, 0x66,
	0x2e, 0xba, 0xc9, 0xd7, 0x39, 0x21, 0xbc, 0xb1, 0xd4, 0x78, 0xb4, 0x33, 0x4c, 0x75, 0x2c, 0x15,
	0xb7, 0x74, 0xc9, 0x07, 0xa7, 0x32, 0xc9, 0xab, 0x02, 0x53, 0xb1, 0xa0, 0xd3, 0x26, 0x1d, 0x77,
	0x2a, 0x16, 0xe6, 0xec, 0x0b, 0x5a, 0xb4, 0x67, 0x5f, 0x90, 0xad, 0xac, 0x6a, 0x5e, 0x3b, 0x64,
	0xe7, 0x8a, 0xce, 0xa0, 0xaf, 0x9c, 0x5a, 0x0f, 0x8d, 0x91, 0x6c, 0x40, 0xa9, 0x33, 0xf0, 0x74,
	0xff, 0xca, 0x6b, 0x31, 0xc5, 0xe9, 0x6c, 0xbd, 0xb0, 0x5d, 0x74, 0x17, 0x3a, 0x83, 0xef, 0xfb,
	0x57, 0x7b, 0x4c, 0x71, 0xd2, 0x80, 0xd5, 0xc4, 0x2f, 0x45, 0xf7, 0xdc, 0x53, 0xe2, 0x2d, 0xf7,
	0xd4, 0x85, 0x68, 0x6b, 0x3a, 0x87, 0x72, 0x04, 0xa1, 0xae, 0xe8, 0x9e, 0x37, 0xc5, 0x5b, 0xde,
	0x34, 0x1e, 0xf2, 0x19, 0xac, 0x25, 0x1c, 0xde, 0xd5, 0x72, 0x30, 0x4a, 0x9a, 0x47, 0xd2, 0x0a,
	0x92, 0x5e, 0x19, 0x67, 0xc6, 0xfa, 0x3f, 0x54, 0xfc, 0x0b, 0x26, 0xba, 0x9e, 0x4c, 0x83, 0x59,
	0xc0, 0x60, 0x16, 0xd1, 0xea, 0x26, 0xf1, 0x7c, 0x05, 0x8f, 0x32, 0x14, 0x86, 0x24, 0xba, 0x81,
	0xf0, 0xb9, 0xf2, 0x58, 0x10, 0x48, 0x0a, 0x48, 0x59, 0x4b, 0x29, 0x26, 0xae, 0x63, 0xeb, 0xdf,
	0x0d, 0x02, 0x49, 0xbe, 0x80, 0x87, 0x39, 0xf6, 0x48, 0x6c, 0x25, 0x8c, 0xed, 0xc1, 0x28, 0x37,
	0x8b, 0xee, 0x4b, 0xa8, 0x65, 0xcc, 0xb1, 0xb4, 0x16, 0x91, 0xba, 0x9a, 0x52, 0x73, 0x99, 0x4d,
	0x8c, 0x99, 0xf7, 0x3d, 0xc5, 0x43, 0xee, 0x6b, 0x5a, 0x46, 0x72, 0x3e, 0x66, 0xde, 0x6f, 0xa2,
	0x9b, 0xac, 0x03, 0x48, 0x1e, 0x08, 0xe9, 0xa9, 0x98, 0x75, 0x69, 0x05, 0xc1, 0x0b, 0x68, 0x69,
	0xc6, 0xac, 0x4b, 0xb6, 0x60, 0x46, 0xc4, 0x9e, 0x62, 0xb4, 0x8a, 0x03, 0xb4, 0x94, 0x0c, 0xdc,
	0xf1, 0x99, 0x49, 0x98, 0x2b, 0xe5, 0x16, 0x45, 0xdc, 0x64, 0x09, 0x2c, 0x60, 0x74, 0xe9, 0x76,
	0xd8, 0x01, 0x23, 0xf7, 0x61, 0x46, 0xc5, 0x91, 0xd4, 0x74, 0x19, 0xef, 0xb1, 0x07, 0x63, 0x0d,
	0xd0, 0x4a, 0xac, 0x15, 0x0f, 0x64, 0x09, 0xa6, 0xaf, 0x65, 0x9b, 0xae, 0xa0, 0xcd, 0x7c, 0x9a,
	0x19, 0x64, 0x6d, 0x7a, 0xdf, 0xce, 0x20, 0x6b, 0x93, 0x8f, 0x61, 0x5e, 0xc4, 0x1e, 0x2e, 0x27,
	0x7d, 0x50, 0x2f, 0x6c, 0x57, 0x86, 0xfb, 0x70, 0x7c, 0x76, 0x66, 0xac, 0x7e, 0x14, 0xba, 0x73,
	0x22, 0xc6, 0x6f, 0xa3, 0x17, 0x08, 0x49, 0x57, 0xad, 0x5e, 0x20, 0x24, 0x21, 0x50, 0x94, 0x51,
	0xc8, 0xe9, 0x1a, 0x9a, 0xf0, 0x9b, 0xd4, 0x60, 0x41, 0xf2, 0x6b, 0xcf, 0x6e, 0x33, 0x45, 0xc7,
	0x9c, 0xe4, 0xd7, 0xfb, 0x66, 0x91, 0x3f, 0x80, 0xaa, 0xd2, 0x4c, 0x7b, 0xf1, 0xa5, 0x56, 0x1e,
	0x96, 0x88, 0x3e, 0xc4, 0x81, 0x28, 0x1b, 0xf3, 0xd9, 0xa5, 0x56, 0xae, 0x31, 0x92, 0x67, 0xb0,
	0x9c, 0xe1, 0x02, 0xa1, 0x7c, 0x26, 0x03, 0x5a, 0x43, 0x64, 0x35, 0x45, 0x1e, 0x58, 0x33, 0x79,
	0x9a, 0x60, 0xfd, 0x96, 0xd7, 0x8d, 0xb4, 0x27, 0x39, 0x0b, 0x06, 0xf4, 0x11, 0xde, 0x5b, 0x31,
	0x8e, 0xfd, 0xd6, 0xeb, 0x48, 0xbb, 0xc6, 0x6a, 0xfa, 0x8c, 0xd0, 0x6e, 0x2f, 0x0c, 0x27, 0xcc,
	0xe6, 0x63, 0xdb, 0x67, 0x03, 0x79, 0xdd, 0x0b, 0xc3, 0xfc, 0x6c, 0xd6, 0x61, 0x11, 0xd9, 0x2c,
	0x0a, 0x3d, 0x2e, 0x25, 0x5d, 0x47, 0x38, 0x18, 0xdb, 0x6e, 0x14, 0xbe, 0x92, 0x92, 0x38, 0x80,
	0x79, 0xe0, 0x18, 0xb5, 0x7b, 0x61, 0x48, 0x37, 0x10, 0x52, 0x32, 0x46, 0xb7, 0x7f, 0x75, 0xd8,
	0x0b, 0x43, 0xb3, 0x45, 0x88, 0xc1, 0xed, 0xeb, 0xc4, 0x7a, 0x40, 0x37, 0x11, 0x84, 0xda, 0x66,
	0xe9, 0x8c, 0x8d, 0x3c, 0x87, 0x15, 0x44, 0x29, 0xde, 0xf1, 0x58, 0x18, 0x46, 0xbe, 0xd5, 0xab,
	0x23, 0x74, 0xc9, 0xb8, 0x9a, 0xbc, 0xb3, 0x6b, 0x1c, 0x28, 0xfa, 0x11, 0x90, 0x21, 0xbc, 0x2d,
	0x39, 0xb7, 0xe8, 0x27, 0x88, 0xae, 0x26, 0xe8, 0x43, 0xc9, 0xb9, 0x01, 0x3b, 0x87, 0x40, 0xd2,
	0xa7, 0xcb, 0xe5, 0x57, 0x3d, 0xae, 0xf4, 0x89, 0x3a, 0x27, 0x2f, 0x60, 0x4e, 0xda, 0x13, 0x2d,
	0xd4, 0xa7, 0xb7, 0x4b, 0x8d, 0xd5, 0xf1, 0x97, 0xce, 0xbc, 0x9f, 0x6e, 0x0a, 0x73, 0x5e, 0x42,
	0x65, 0xe8, 0xd0, 0x4c, 0xf7, 0x14, 0xf9, 0x70, 0xfc, 0x9d, 0x36, 0xaf, 0xec, 0x6c, 0xfe, 0x95,
	0x76, 0x7e, 0x29, 0xc0, 0x52, 0x16, 0x83, 0x8a, 0xa3, 0xae, 0xe2, 0xe4, 0x13, 0x00, 0x16, 0x0b,
	0x4f, 0xa1, 0x16, 0x12, 0x2b, 0xc3, 0x35, 0xd8, 0x8d, 0x85, 0xbd, 0xc3, 0x5d, 0x60, 0xe9, 0x27,
	0xd9, 0x1d, 0xb9, 0x2e, 0x61, 0xd9, 0x47, 0x9a, 0x4e, 0x08, 0xdd, 0xb2, 0x87, 0x81, 0xd8, 0xb3,
	0x73, 0x02, 0x2b, 0xf9, 0x38, 0x4c, 0x31, 0x3e, 0x87, 0x79, 0x99, 0x1c, 0x93, 0x6a, 0xd4, 0xc6,
	0x25, 0x53, 0x82, 0x3b, 0xc4, 0x3a, 0x3f, 0xc3, 0x83, 0xd4, 0x7b, 0xc0, 0x43, 0xae, 0x79, 0x52,
	0xe0, 0xf7, 0xf5, 0xa3, 0xe3, 0xbc, 0x01, 0x3a, 0x31, 0x00, 0x93, 0xd4, 0xcb, 0x7c, 0x87, 0x37,
	0xc7, 0x65, 0xff, 0x41, 0xca, 0x5a, 0xfd, 0x1d, 0x3c, 0xcc, 0x23, 0xb2, 0x62, 0xe5, 0xfb, 0x36,
	0x7d, 0x47, 0xdf, 0x9c, 0x9f, 0xb2, 0x01, 0xfc, 0x86, 0xeb, 0xf7, 0x5d, 0xa2, 0xd3, 0xac, 0x47,
	0xd9, 0xed, 0xb6, 0xe9, 0xb9, 0xfa, 0x3c, 0x1e, 0xd7, 0xcc, 0x18, 0x59, 0x71, 0xaa, 0x50, 0x1e,
	0x9d, 0x32, 0xe5, 0xfc, 0x51, 0xc8, 0xa6, 0x0a, 0x09, 0xff, 0x76, 0xc0, 0x9f, 0x41, 0x51, 0xc5,
	0xdc, 0x4f, 0x52, 0xbc, 0x6d, 0x21, 0x11, 0x43, 0x5e, 0xc0, 0x6c, 0x22, 0x3c, 0x7d, 0xc7, 0x0e,
	0x24, 0x38, 0xf2, 0x1c, 0x66, 0xcc, 0x97, 0xc2, 0xff, 0x24, 0xa5, 0xc6, 0xda, 0x64, 0x82, 0x72,
	0x2d, 0xca, 0x69, 0xc2, 0xea, 0x84, 0xa4, 0xec, 0x60, 0xe5, 0xb7, 0x65, 0xfd, 0x96, 0xca, 0xe5,
	0x17, 0xa6, 0xf1, 0xe7, 0x14, 0xcc, 0xa7, 0x08, 0x72, 0x9a, 0x3d, 0x28, 0xfb, 0x92, 0x33, 0xcd,
	0xc9, 0xe3, 0x49, 0x5b, 0x97, 0x36, 0xac, 0xb6, 0x7e, 0xfb, 0x4e, 0x9e, 0xa8, 0x73, 0xe7, 0xde,
	0xa8, 0xe0, 0x9b, 0x38, 0xf8, 0x0f, 0x04, 0x7f, 0xc8, 0x04, 0xed, 0x1e, 0x10, 0xe7, 0x8e, 0x1d,
	0x32, 0xb2, 0xff, 0xbb, 0x1d, 0x33, 0x2a, 0xee, 0x42, 0x69, 0xa4, 0x58, 0x64, 0xf3, 0x5d, 0xd3,
	0x67, 0x64, 0xeb, 0xef, 0x2c, 0x32, 0x6a, 0xee, 0x2d, 0xfe, 0x76, 0xb3, 0x51, 0xf8, 0xfd, 0x66,
	0xa3, 0xf0, 0xd7, 0xcd, 0x46, 0xa1, 0x35, 0x8b, 0xbf, 0xf4, 0x9f, 0xfe, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xb5, 0xf0, 0x75, 0x71, 0xaf, 0x0b, 0x00, 0x00,
}
