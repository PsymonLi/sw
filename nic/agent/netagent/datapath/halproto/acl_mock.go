// Code generated by MockGen. DO NOT EDIT.
// Source: acl.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisTCPSelector_TcpSyn is a mock of isTCPSelector_TcpSyn interface
type MockisTCPSelector_TcpSyn struct {
	ctrl     *gomock.Controller
	recorder *MockisTCPSelector_TcpSynMockRecorder
}

// MockisTCPSelector_TcpSynMockRecorder is the mock recorder for MockisTCPSelector_TcpSyn
type MockisTCPSelector_TcpSynMockRecorder struct {
	mock *MockisTCPSelector_TcpSyn
}

// NewMockisTCPSelector_TcpSyn creates a new mock instance
func NewMockisTCPSelector_TcpSyn(ctrl *gomock.Controller) *MockisTCPSelector_TcpSyn {
	mock := &MockisTCPSelector_TcpSyn{ctrl: ctrl}
	mock.recorder = &MockisTCPSelector_TcpSynMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTCPSelector_TcpSyn) EXPECT() *MockisTCPSelector_TcpSynMockRecorder {
	return m.recorder
}

// isTCPSelector_TcpSyn mocks base method
func (m *MockisTCPSelector_TcpSyn) isTCPSelector_TcpSyn() {
	m.ctrl.Call(m, "isTCPSelector_TcpSyn")
}

// isTCPSelector_TcpSyn indicates an expected call of isTCPSelector_TcpSyn
func (mr *MockisTCPSelector_TcpSynMockRecorder) isTCPSelector_TcpSyn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTCPSelector_TcpSyn", reflect.TypeOf((*MockisTCPSelector_TcpSyn)(nil).isTCPSelector_TcpSyn))
}

// MarshalTo mocks base method
func (m *MockisTCPSelector_TcpSyn) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTCPSelector_TcpSynMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTCPSelector_TcpSyn)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTCPSelector_TcpSyn) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTCPSelector_TcpSynMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTCPSelector_TcpSyn)(nil).Size))
}

// MockisTCPSelector_TcpAck is a mock of isTCPSelector_TcpAck interface
type MockisTCPSelector_TcpAck struct {
	ctrl     *gomock.Controller
	recorder *MockisTCPSelector_TcpAckMockRecorder
}

// MockisTCPSelector_TcpAckMockRecorder is the mock recorder for MockisTCPSelector_TcpAck
type MockisTCPSelector_TcpAckMockRecorder struct {
	mock *MockisTCPSelector_TcpAck
}

// NewMockisTCPSelector_TcpAck creates a new mock instance
func NewMockisTCPSelector_TcpAck(ctrl *gomock.Controller) *MockisTCPSelector_TcpAck {
	mock := &MockisTCPSelector_TcpAck{ctrl: ctrl}
	mock.recorder = &MockisTCPSelector_TcpAckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTCPSelector_TcpAck) EXPECT() *MockisTCPSelector_TcpAckMockRecorder {
	return m.recorder
}

// isTCPSelector_TcpAck mocks base method
func (m *MockisTCPSelector_TcpAck) isTCPSelector_TcpAck() {
	m.ctrl.Call(m, "isTCPSelector_TcpAck")
}

// isTCPSelector_TcpAck indicates an expected call of isTCPSelector_TcpAck
func (mr *MockisTCPSelector_TcpAckMockRecorder) isTCPSelector_TcpAck() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTCPSelector_TcpAck", reflect.TypeOf((*MockisTCPSelector_TcpAck)(nil).isTCPSelector_TcpAck))
}

// MarshalTo mocks base method
func (m *MockisTCPSelector_TcpAck) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTCPSelector_TcpAckMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTCPSelector_TcpAck)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTCPSelector_TcpAck) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTCPSelector_TcpAckMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTCPSelector_TcpAck)(nil).Size))
}

// MockisTCPSelector_TcpFin is a mock of isTCPSelector_TcpFin interface
type MockisTCPSelector_TcpFin struct {
	ctrl     *gomock.Controller
	recorder *MockisTCPSelector_TcpFinMockRecorder
}

// MockisTCPSelector_TcpFinMockRecorder is the mock recorder for MockisTCPSelector_TcpFin
type MockisTCPSelector_TcpFinMockRecorder struct {
	mock *MockisTCPSelector_TcpFin
}

// NewMockisTCPSelector_TcpFin creates a new mock instance
func NewMockisTCPSelector_TcpFin(ctrl *gomock.Controller) *MockisTCPSelector_TcpFin {
	mock := &MockisTCPSelector_TcpFin{ctrl: ctrl}
	mock.recorder = &MockisTCPSelector_TcpFinMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTCPSelector_TcpFin) EXPECT() *MockisTCPSelector_TcpFinMockRecorder {
	return m.recorder
}

// isTCPSelector_TcpFin mocks base method
func (m *MockisTCPSelector_TcpFin) isTCPSelector_TcpFin() {
	m.ctrl.Call(m, "isTCPSelector_TcpFin")
}

// isTCPSelector_TcpFin indicates an expected call of isTCPSelector_TcpFin
func (mr *MockisTCPSelector_TcpFinMockRecorder) isTCPSelector_TcpFin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTCPSelector_TcpFin", reflect.TypeOf((*MockisTCPSelector_TcpFin)(nil).isTCPSelector_TcpFin))
}

// MarshalTo mocks base method
func (m *MockisTCPSelector_TcpFin) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTCPSelector_TcpFinMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTCPSelector_TcpFin)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTCPSelector_TcpFin) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTCPSelector_TcpFinMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTCPSelector_TcpFin)(nil).Size))
}

// MockisTCPSelector_TcpRst is a mock of isTCPSelector_TcpRst interface
type MockisTCPSelector_TcpRst struct {
	ctrl     *gomock.Controller
	recorder *MockisTCPSelector_TcpRstMockRecorder
}

// MockisTCPSelector_TcpRstMockRecorder is the mock recorder for MockisTCPSelector_TcpRst
type MockisTCPSelector_TcpRstMockRecorder struct {
	mock *MockisTCPSelector_TcpRst
}

// NewMockisTCPSelector_TcpRst creates a new mock instance
func NewMockisTCPSelector_TcpRst(ctrl *gomock.Controller) *MockisTCPSelector_TcpRst {
	mock := &MockisTCPSelector_TcpRst{ctrl: ctrl}
	mock.recorder = &MockisTCPSelector_TcpRstMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTCPSelector_TcpRst) EXPECT() *MockisTCPSelector_TcpRstMockRecorder {
	return m.recorder
}

// isTCPSelector_TcpRst mocks base method
func (m *MockisTCPSelector_TcpRst) isTCPSelector_TcpRst() {
	m.ctrl.Call(m, "isTCPSelector_TcpRst")
}

// isTCPSelector_TcpRst indicates an expected call of isTCPSelector_TcpRst
func (mr *MockisTCPSelector_TcpRstMockRecorder) isTCPSelector_TcpRst() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTCPSelector_TcpRst", reflect.TypeOf((*MockisTCPSelector_TcpRst)(nil).isTCPSelector_TcpRst))
}

// MarshalTo mocks base method
func (m *MockisTCPSelector_TcpRst) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTCPSelector_TcpRstMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTCPSelector_TcpRst)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTCPSelector_TcpRst) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTCPSelector_TcpRstMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTCPSelector_TcpRst)(nil).Size))
}

// MockisTCPSelector_TcpUrg is a mock of isTCPSelector_TcpUrg interface
type MockisTCPSelector_TcpUrg struct {
	ctrl     *gomock.Controller
	recorder *MockisTCPSelector_TcpUrgMockRecorder
}

// MockisTCPSelector_TcpUrgMockRecorder is the mock recorder for MockisTCPSelector_TcpUrg
type MockisTCPSelector_TcpUrgMockRecorder struct {
	mock *MockisTCPSelector_TcpUrg
}

// NewMockisTCPSelector_TcpUrg creates a new mock instance
func NewMockisTCPSelector_TcpUrg(ctrl *gomock.Controller) *MockisTCPSelector_TcpUrg {
	mock := &MockisTCPSelector_TcpUrg{ctrl: ctrl}
	mock.recorder = &MockisTCPSelector_TcpUrgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTCPSelector_TcpUrg) EXPECT() *MockisTCPSelector_TcpUrgMockRecorder {
	return m.recorder
}

// isTCPSelector_TcpUrg mocks base method
func (m *MockisTCPSelector_TcpUrg) isTCPSelector_TcpUrg() {
	m.ctrl.Call(m, "isTCPSelector_TcpUrg")
}

// isTCPSelector_TcpUrg indicates an expected call of isTCPSelector_TcpUrg
func (mr *MockisTCPSelector_TcpUrgMockRecorder) isTCPSelector_TcpUrg() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTCPSelector_TcpUrg", reflect.TypeOf((*MockisTCPSelector_TcpUrg)(nil).isTCPSelector_TcpUrg))
}

// MarshalTo mocks base method
func (m *MockisTCPSelector_TcpUrg) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTCPSelector_TcpUrgMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTCPSelector_TcpUrg)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTCPSelector_TcpUrg) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTCPSelector_TcpUrgMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTCPSelector_TcpUrg)(nil).Size))
}

// MockisIPSelector_L4Selectors is a mock of isIPSelector_L4Selectors interface
type MockisIPSelector_L4Selectors struct {
	ctrl     *gomock.Controller
	recorder *MockisIPSelector_L4SelectorsMockRecorder
}

// MockisIPSelector_L4SelectorsMockRecorder is the mock recorder for MockisIPSelector_L4Selectors
type MockisIPSelector_L4SelectorsMockRecorder struct {
	mock *MockisIPSelector_L4Selectors
}

// NewMockisIPSelector_L4Selectors creates a new mock instance
func NewMockisIPSelector_L4Selectors(ctrl *gomock.Controller) *MockisIPSelector_L4Selectors {
	mock := &MockisIPSelector_L4Selectors{ctrl: ctrl}
	mock.recorder = &MockisIPSelector_L4SelectorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisIPSelector_L4Selectors) EXPECT() *MockisIPSelector_L4SelectorsMockRecorder {
	return m.recorder
}

// isIPSelector_L4Selectors mocks base method
func (m *MockisIPSelector_L4Selectors) isIPSelector_L4Selectors() {
	m.ctrl.Call(m, "isIPSelector_L4Selectors")
}

// isIPSelector_L4Selectors indicates an expected call of isIPSelector_L4Selectors
func (mr *MockisIPSelector_L4SelectorsMockRecorder) isIPSelector_L4Selectors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIPSelector_L4Selectors", reflect.TypeOf((*MockisIPSelector_L4Selectors)(nil).isIPSelector_L4Selectors))
}

// MarshalTo mocks base method
func (m *MockisIPSelector_L4Selectors) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisIPSelector_L4SelectorsMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisIPSelector_L4Selectors)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisIPSelector_L4Selectors) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisIPSelector_L4SelectorsMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisIPSelector_L4Selectors)(nil).Size))
}

// MockisAclSelector_SegSelector is a mock of isAclSelector_SegSelector interface
type MockisAclSelector_SegSelector struct {
	ctrl     *gomock.Controller
	recorder *MockisAclSelector_SegSelectorMockRecorder
}

// MockisAclSelector_SegSelectorMockRecorder is the mock recorder for MockisAclSelector_SegSelector
type MockisAclSelector_SegSelectorMockRecorder struct {
	mock *MockisAclSelector_SegSelector
}

// NewMockisAclSelector_SegSelector creates a new mock instance
func NewMockisAclSelector_SegSelector(ctrl *gomock.Controller) *MockisAclSelector_SegSelector {
	mock := &MockisAclSelector_SegSelector{ctrl: ctrl}
	mock.recorder = &MockisAclSelector_SegSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisAclSelector_SegSelector) EXPECT() *MockisAclSelector_SegSelectorMockRecorder {
	return m.recorder
}

// isAclSelector_SegSelector mocks base method
func (m *MockisAclSelector_SegSelector) isAclSelector_SegSelector() {
	m.ctrl.Call(m, "isAclSelector_SegSelector")
}

// isAclSelector_SegSelector indicates an expected call of isAclSelector_SegSelector
func (mr *MockisAclSelector_SegSelectorMockRecorder) isAclSelector_SegSelector() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAclSelector_SegSelector", reflect.TypeOf((*MockisAclSelector_SegSelector)(nil).isAclSelector_SegSelector))
}

// MarshalTo mocks base method
func (m *MockisAclSelector_SegSelector) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisAclSelector_SegSelectorMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisAclSelector_SegSelector)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisAclSelector_SegSelector) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisAclSelector_SegSelectorMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisAclSelector_SegSelector)(nil).Size))
}

// MockisAclSelector_PktSelector is a mock of isAclSelector_PktSelector interface
type MockisAclSelector_PktSelector struct {
	ctrl     *gomock.Controller
	recorder *MockisAclSelector_PktSelectorMockRecorder
}

// MockisAclSelector_PktSelectorMockRecorder is the mock recorder for MockisAclSelector_PktSelector
type MockisAclSelector_PktSelectorMockRecorder struct {
	mock *MockisAclSelector_PktSelector
}

// NewMockisAclSelector_PktSelector creates a new mock instance
func NewMockisAclSelector_PktSelector(ctrl *gomock.Controller) *MockisAclSelector_PktSelector {
	mock := &MockisAclSelector_PktSelector{ctrl: ctrl}
	mock.recorder = &MockisAclSelector_PktSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisAclSelector_PktSelector) EXPECT() *MockisAclSelector_PktSelectorMockRecorder {
	return m.recorder
}

// isAclSelector_PktSelector mocks base method
func (m *MockisAclSelector_PktSelector) isAclSelector_PktSelector() {
	m.ctrl.Call(m, "isAclSelector_PktSelector")
}

// isAclSelector_PktSelector indicates an expected call of isAclSelector_PktSelector
func (mr *MockisAclSelector_PktSelectorMockRecorder) isAclSelector_PktSelector() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAclSelector_PktSelector", reflect.TypeOf((*MockisAclSelector_PktSelector)(nil).isAclSelector_PktSelector))
}

// MarshalTo mocks base method
func (m *MockisAclSelector_PktSelector) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisAclSelector_PktSelectorMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisAclSelector_PktSelector)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisAclSelector_PktSelector) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisAclSelector_PktSelectorMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisAclSelector_PktSelector)(nil).Size))
}

// MockisAclStatus_QosClassPdStatus is a mock of isAclStatus_QosClassPdStatus interface
type MockisAclStatus_QosClassPdStatus struct {
	ctrl     *gomock.Controller
	recorder *MockisAclStatus_QosClassPdStatusMockRecorder
}

// MockisAclStatus_QosClassPdStatusMockRecorder is the mock recorder for MockisAclStatus_QosClassPdStatus
type MockisAclStatus_QosClassPdStatusMockRecorder struct {
	mock *MockisAclStatus_QosClassPdStatus
}

// NewMockisAclStatus_QosClassPdStatus creates a new mock instance
func NewMockisAclStatus_QosClassPdStatus(ctrl *gomock.Controller) *MockisAclStatus_QosClassPdStatus {
	mock := &MockisAclStatus_QosClassPdStatus{ctrl: ctrl}
	mock.recorder = &MockisAclStatus_QosClassPdStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisAclStatus_QosClassPdStatus) EXPECT() *MockisAclStatus_QosClassPdStatusMockRecorder {
	return m.recorder
}

// isAclStatus_QosClassPdStatus mocks base method
func (m *MockisAclStatus_QosClassPdStatus) isAclStatus_QosClassPdStatus() {
	m.ctrl.Call(m, "isAclStatus_QosClassPdStatus")
}

// isAclStatus_QosClassPdStatus indicates an expected call of isAclStatus_QosClassPdStatus
func (mr *MockisAclStatus_QosClassPdStatusMockRecorder) isAclStatus_QosClassPdStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAclStatus_QosClassPdStatus", reflect.TypeOf((*MockisAclStatus_QosClassPdStatus)(nil).isAclStatus_QosClassPdStatus))
}

// MarshalTo mocks base method
func (m *MockisAclStatus_QosClassPdStatus) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisAclStatus_QosClassPdStatusMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisAclStatus_QosClassPdStatus)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisAclStatus_QosClassPdStatus) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisAclStatus_QosClassPdStatusMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisAclStatus_QosClassPdStatus)(nil).Size))
}

// MockAclClient is a mock of AclClient interface
type MockAclClient struct {
	ctrl     *gomock.Controller
	recorder *MockAclClientMockRecorder
}

// MockAclClientMockRecorder is the mock recorder for MockAclClient
type MockAclClientMockRecorder struct {
	mock *MockAclClient
}

// NewMockAclClient creates a new mock instance
func NewMockAclClient(ctrl *gomock.Controller) *MockAclClient {
	mock := &MockAclClient{ctrl: ctrl}
	mock.recorder = &MockAclClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAclClient) EXPECT() *MockAclClientMockRecorder {
	return m.recorder
}

// AclCreate mocks base method
func (m *MockAclClient) AclCreate(ctx context.Context, in *AclRequestMsg, opts ...grpc.CallOption) (*AclResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AclCreate", varargs...)
	ret0, _ := ret[0].(*AclResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclCreate indicates an expected call of AclCreate
func (mr *MockAclClientMockRecorder) AclCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclCreate", reflect.TypeOf((*MockAclClient)(nil).AclCreate), varargs...)
}

// AclUpdate mocks base method
func (m *MockAclClient) AclUpdate(ctx context.Context, in *AclRequestMsg, opts ...grpc.CallOption) (*AclResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AclUpdate", varargs...)
	ret0, _ := ret[0].(*AclResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclUpdate indicates an expected call of AclUpdate
func (mr *MockAclClientMockRecorder) AclUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclUpdate", reflect.TypeOf((*MockAclClient)(nil).AclUpdate), varargs...)
}

// AclDelete mocks base method
func (m *MockAclClient) AclDelete(ctx context.Context, in *AclDeleteRequestMsg, opts ...grpc.CallOption) (*AclDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AclDelete", varargs...)
	ret0, _ := ret[0].(*AclDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclDelete indicates an expected call of AclDelete
func (mr *MockAclClientMockRecorder) AclDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclDelete", reflect.TypeOf((*MockAclClient)(nil).AclDelete), varargs...)
}

// AclGet mocks base method
func (m *MockAclClient) AclGet(ctx context.Context, in *AclGetRequestMsg, opts ...grpc.CallOption) (*AclGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AclGet", varargs...)
	ret0, _ := ret[0].(*AclGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclGet indicates an expected call of AclGet
func (mr *MockAclClientMockRecorder) AclGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclGet", reflect.TypeOf((*MockAclClient)(nil).AclGet), varargs...)
}

// MockAclServer is a mock of AclServer interface
type MockAclServer struct {
	ctrl     *gomock.Controller
	recorder *MockAclServerMockRecorder
}

// MockAclServerMockRecorder is the mock recorder for MockAclServer
type MockAclServerMockRecorder struct {
	mock *MockAclServer
}

// NewMockAclServer creates a new mock instance
func NewMockAclServer(ctrl *gomock.Controller) *MockAclServer {
	mock := &MockAclServer{ctrl: ctrl}
	mock.recorder = &MockAclServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAclServer) EXPECT() *MockAclServerMockRecorder {
	return m.recorder
}

// AclCreate mocks base method
func (m *MockAclServer) AclCreate(arg0 context.Context, arg1 *AclRequestMsg) (*AclResponseMsg, error) {
	ret := m.ctrl.Call(m, "AclCreate", arg0, arg1)
	ret0, _ := ret[0].(*AclResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclCreate indicates an expected call of AclCreate
func (mr *MockAclServerMockRecorder) AclCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclCreate", reflect.TypeOf((*MockAclServer)(nil).AclCreate), arg0, arg1)
}

// AclUpdate mocks base method
func (m *MockAclServer) AclUpdate(arg0 context.Context, arg1 *AclRequestMsg) (*AclResponseMsg, error) {
	ret := m.ctrl.Call(m, "AclUpdate", arg0, arg1)
	ret0, _ := ret[0].(*AclResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclUpdate indicates an expected call of AclUpdate
func (mr *MockAclServerMockRecorder) AclUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclUpdate", reflect.TypeOf((*MockAclServer)(nil).AclUpdate), arg0, arg1)
}

// AclDelete mocks base method
func (m *MockAclServer) AclDelete(arg0 context.Context, arg1 *AclDeleteRequestMsg) (*AclDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "AclDelete", arg0, arg1)
	ret0, _ := ret[0].(*AclDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclDelete indicates an expected call of AclDelete
func (mr *MockAclServerMockRecorder) AclDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclDelete", reflect.TypeOf((*MockAclServer)(nil).AclDelete), arg0, arg1)
}

// AclGet mocks base method
func (m *MockAclServer) AclGet(arg0 context.Context, arg1 *AclGetRequestMsg) (*AclGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "AclGet", arg0, arg1)
	ret0, _ := ret[0].(*AclGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclGet indicates an expected call of AclGet
func (mr *MockAclServerMockRecorder) AclGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclGet", reflect.TypeOf((*MockAclServer)(nil).AclGet), arg0, arg1)
}
