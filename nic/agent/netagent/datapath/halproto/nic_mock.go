// Code generated by MockGen. DO NOT EDIT.
// Source: nic.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockNicClient is a mock of NicClient interface
type MockNicClient struct {
	ctrl     *gomock.Controller
	recorder *MockNicClientMockRecorder
}

// MockNicClientMockRecorder is the mock recorder for MockNicClient
type MockNicClientMockRecorder struct {
	mock *MockNicClient
}

// NewMockNicClient creates a new mock instance
func NewMockNicClient(ctrl *gomock.Controller) *MockNicClient {
	mock := &MockNicClient{ctrl: ctrl}
	mock.recorder = &MockNicClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNicClient) EXPECT() *MockNicClientMockRecorder {
	return m.recorder
}

// DeviceCreate mocks base method
func (m *MockNicClient) DeviceCreate(ctx context.Context, in *DeviceRequestMsg, opts ...grpc.CallOption) (*DeviceResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeviceCreate", varargs...)
	ret0, _ := ret[0].(*DeviceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceCreate indicates an expected call of DeviceCreate
func (mr *MockNicClientMockRecorder) DeviceCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceCreate", reflect.TypeOf((*MockNicClient)(nil).DeviceCreate), varargs...)
}

// DeviceUpdate mocks base method
func (m *MockNicClient) DeviceUpdate(ctx context.Context, in *DeviceRequestMsg, opts ...grpc.CallOption) (*DeviceResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeviceUpdate", varargs...)
	ret0, _ := ret[0].(*DeviceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceUpdate indicates an expected call of DeviceUpdate
func (mr *MockNicClientMockRecorder) DeviceUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceUpdate", reflect.TypeOf((*MockNicClient)(nil).DeviceUpdate), varargs...)
}

// DeviceGet mocks base method
func (m *MockNicClient) DeviceGet(ctx context.Context, in *DeviceGetRequestMsg, opts ...grpc.CallOption) (*DeviceGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeviceGet", varargs...)
	ret0, _ := ret[0].(*DeviceGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceGet indicates an expected call of DeviceGet
func (mr *MockNicClientMockRecorder) DeviceGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGet", reflect.TypeOf((*MockNicClient)(nil).DeviceGet), varargs...)
}

// MockNicServer is a mock of NicServer interface
type MockNicServer struct {
	ctrl     *gomock.Controller
	recorder *MockNicServerMockRecorder
}

// MockNicServerMockRecorder is the mock recorder for MockNicServer
type MockNicServerMockRecorder struct {
	mock *MockNicServer
}

// NewMockNicServer creates a new mock instance
func NewMockNicServer(ctrl *gomock.Controller) *MockNicServer {
	mock := &MockNicServer{ctrl: ctrl}
	mock.recorder = &MockNicServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNicServer) EXPECT() *MockNicServerMockRecorder {
	return m.recorder
}

// DeviceCreate mocks base method
func (m *MockNicServer) DeviceCreate(arg0 context.Context, arg1 *DeviceRequestMsg) (*DeviceResponseMsg, error) {
	ret := m.ctrl.Call(m, "DeviceCreate", arg0, arg1)
	ret0, _ := ret[0].(*DeviceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceCreate indicates an expected call of DeviceCreate
func (mr *MockNicServerMockRecorder) DeviceCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceCreate", reflect.TypeOf((*MockNicServer)(nil).DeviceCreate), arg0, arg1)
}

// DeviceUpdate mocks base method
func (m *MockNicServer) DeviceUpdate(arg0 context.Context, arg1 *DeviceRequestMsg) (*DeviceResponseMsg, error) {
	ret := m.ctrl.Call(m, "DeviceUpdate", arg0, arg1)
	ret0, _ := ret[0].(*DeviceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceUpdate indicates an expected call of DeviceUpdate
func (mr *MockNicServerMockRecorder) DeviceUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceUpdate", reflect.TypeOf((*MockNicServer)(nil).DeviceUpdate), arg0, arg1)
}

// DeviceGet mocks base method
func (m *MockNicServer) DeviceGet(arg0 context.Context, arg1 *DeviceGetRequestMsg) (*DeviceGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "DeviceGet", arg0, arg1)
	ret0, _ := ret[0].(*DeviceGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceGet indicates an expected call of DeviceGet
func (mr *MockNicServerMockRecorder) DeviceGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceGet", reflect.TypeOf((*MockNicServer)(nil).DeviceGet), arg0, arg1)
}
