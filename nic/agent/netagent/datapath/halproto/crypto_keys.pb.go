// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crypto_keys.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CryptoKeyCreateRequest struct {
}

func (m *CryptoKeyCreateRequest) Reset()                    { *m = CryptoKeyCreateRequest{} }
func (m *CryptoKeyCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateRequest) ProtoMessage()               {}
func (*CryptoKeyCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorCryptoKeys, []int{0} }

type CryptoKeyCreateRequestMsg struct {
	Request []*CryptoKeyCreateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyCreateRequestMsg) Reset()         { *m = CryptoKeyCreateRequestMsg{} }
func (m *CryptoKeyCreateRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateRequestMsg) ProtoMessage()    {}
func (*CryptoKeyCreateRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{1}
}

func (m *CryptoKeyCreateRequestMsg) GetRequest() []*CryptoKeyCreateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyCreateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyCreateResponse) Reset()         { *m = CryptoKeyCreateResponse{} }
func (m *CryptoKeyCreateResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateResponse) ProtoMessage()    {}
func (*CryptoKeyCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{2}
}

func (m *CryptoKeyCreateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyCreateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyCreateResponseMsg struct {
	Response []*CryptoKeyCreateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyCreateResponseMsg) Reset()         { *m = CryptoKeyCreateResponseMsg{} }
func (m *CryptoKeyCreateResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateResponseMsg) ProtoMessage()    {}
func (*CryptoKeyCreateResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{3}
}

func (m *CryptoKeyCreateResponseMsg) GetResponse() []*CryptoKeyCreateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyCreateWithIdRequest struct {
	Keyindex      uint32 `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
	AllowDupAlloc uint32 `protobuf:"varint,2,opt,name=allow_dup_alloc,json=allowDupAlloc,proto3" json:"allow_dup_alloc,omitempty"`
}

func (m *CryptoKeyCreateWithIdRequest) Reset()         { *m = CryptoKeyCreateWithIdRequest{} }
func (m *CryptoKeyCreateWithIdRequest) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdRequest) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{4}
}

func (m *CryptoKeyCreateWithIdRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

func (m *CryptoKeyCreateWithIdRequest) GetAllowDupAlloc() uint32 {
	if m != nil {
		return m.AllowDupAlloc
	}
	return 0
}

type CryptoKeyCreateWithIdRequestMsg struct {
	Request []*CryptoKeyCreateWithIdRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyCreateWithIdRequestMsg) Reset()         { *m = CryptoKeyCreateWithIdRequestMsg{} }
func (m *CryptoKeyCreateWithIdRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdRequestMsg) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{5}
}

func (m *CryptoKeyCreateWithIdRequestMsg) GetRequest() []*CryptoKeyCreateWithIdRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyCreateWithIdResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyCreateWithIdResponse) Reset()         { *m = CryptoKeyCreateWithIdResponse{} }
func (m *CryptoKeyCreateWithIdResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdResponse) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{6}
}

func (m *CryptoKeyCreateWithIdResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyCreateWithIdResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyCreateWithIdResponseMsg struct {
	Response []*CryptoKeyCreateWithIdResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyCreateWithIdResponseMsg) Reset()         { *m = CryptoKeyCreateWithIdResponseMsg{} }
func (m *CryptoKeyCreateWithIdResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdResponseMsg) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{7}
}

func (m *CryptoKeyCreateWithIdResponseMsg) GetResponse() []*CryptoKeyCreateWithIdResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeySpec struct {
	Keyindex uint32        `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
	KeyType  CryptoKeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=types.CryptoKeyType" json:"key_type,omitempty"`
	KeySize  uint32        `protobuf:"varint,3,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	Key      []byte        `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CryptoKeySpec) Reset()                    { *m = CryptoKeySpec{} }
func (m *CryptoKeySpec) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeySpec) ProtoMessage()               {}
func (*CryptoKeySpec) Descriptor() ([]byte, []int) { return fileDescriptorCryptoKeys, []int{8} }

func (m *CryptoKeySpec) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

func (m *CryptoKeySpec) GetKeyType() CryptoKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoKeyType_CRYPTO_KEY_TYPE_AES128
}

func (m *CryptoKeySpec) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoKeySpec) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyReadRequest struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyReadRequest) Reset()                    { *m = CryptoKeyReadRequest{} }
func (m *CryptoKeyReadRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadRequest) ProtoMessage()               {}
func (*CryptoKeyReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorCryptoKeys, []int{9} }

func (m *CryptoKeyReadRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyReadRequestMsg struct {
	Request []*CryptoKeyReadRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyReadRequestMsg) Reset()         { *m = CryptoKeyReadRequestMsg{} }
func (m *CryptoKeyReadRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyReadRequestMsg) ProtoMessage()    {}
func (*CryptoKeyReadRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{10}
}

func (m *CryptoKeyReadRequestMsg) GetRequest() []*CryptoKeyReadRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyReadResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Key       *CryptoKeySpec `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoKeyReadResponse) Reset()                    { *m = CryptoKeyReadResponse{} }
func (m *CryptoKeyReadResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadResponse) ProtoMessage()               {}
func (*CryptoKeyReadResponse) Descriptor() ([]byte, []int) { return fileDescriptorCryptoKeys, []int{11} }

func (m *CryptoKeyReadResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyReadResponse) GetKey() *CryptoKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyReadResponseMsg struct {
	Response []*CryptoKeyReadResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyReadResponseMsg) Reset()         { *m = CryptoKeyReadResponseMsg{} }
func (m *CryptoKeyReadResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyReadResponseMsg) ProtoMessage()    {}
func (*CryptoKeyReadResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{12}
}

func (m *CryptoKeyReadResponseMsg) GetResponse() []*CryptoKeyReadResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyUpdateRequest struct {
	Key *CryptoKeySpec `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoKeyUpdateRequest) Reset()         { *m = CryptoKeyUpdateRequest{} }
func (m *CryptoKeyUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateRequest) ProtoMessage()    {}
func (*CryptoKeyUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{13}
}

func (m *CryptoKeyUpdateRequest) GetKey() *CryptoKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyUpdateRequestMsg struct {
	Request []*CryptoKeyUpdateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyUpdateRequestMsg) Reset()         { *m = CryptoKeyUpdateRequestMsg{} }
func (m *CryptoKeyUpdateRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateRequestMsg) ProtoMessage()    {}
func (*CryptoKeyUpdateRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{14}
}

func (m *CryptoKeyUpdateRequestMsg) GetRequest() []*CryptoKeyUpdateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyUpdateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyUpdateResponse) Reset()         { *m = CryptoKeyUpdateResponse{} }
func (m *CryptoKeyUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateResponse) ProtoMessage()    {}
func (*CryptoKeyUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{15}
}

func (m *CryptoKeyUpdateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyUpdateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyUpdateResponseMsg struct {
	Response []*CryptoKeyUpdateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyUpdateResponseMsg) Reset()         { *m = CryptoKeyUpdateResponseMsg{} }
func (m *CryptoKeyUpdateResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateResponseMsg) ProtoMessage()    {}
func (*CryptoKeyUpdateResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{16}
}

func (m *CryptoKeyUpdateResponseMsg) GetResponse() []*CryptoKeyUpdateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyDeleteRequest struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyDeleteRequest) Reset()         { *m = CryptoKeyDeleteRequest{} }
func (m *CryptoKeyDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteRequest) ProtoMessage()    {}
func (*CryptoKeyDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{17}
}

func (m *CryptoKeyDeleteRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyDeleteRequestMsg struct {
	Request []*CryptoKeyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyDeleteRequestMsg) Reset()         { *m = CryptoKeyDeleteRequestMsg{} }
func (m *CryptoKeyDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteRequestMsg) ProtoMessage()    {}
func (*CryptoKeyDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{18}
}

func (m *CryptoKeyDeleteRequestMsg) GetRequest() []*CryptoKeyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyDeleteResponse) Reset()         { *m = CryptoKeyDeleteResponse{} }
func (m *CryptoKeyDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteResponse) ProtoMessage()    {}
func (*CryptoKeyDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{19}
}

func (m *CryptoKeyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyDeleteResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyDeleteResponseMsg struct {
	Response []*CryptoKeyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyDeleteResponseMsg) Reset()         { *m = CryptoKeyDeleteResponseMsg{} }
func (m *CryptoKeyDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteResponseMsg) ProtoMessage()    {}
func (*CryptoKeyDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCryptoKeys, []int{20}
}

func (m *CryptoKeyDeleteResponseMsg) GetResponse() []*CryptoKeyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*CryptoKeyCreateRequest)(nil), "cryptokey.CryptoKeyCreateRequest")
	proto.RegisterType((*CryptoKeyCreateRequestMsg)(nil), "cryptokey.CryptoKeyCreateRequestMsg")
	proto.RegisterType((*CryptoKeyCreateResponse)(nil), "cryptokey.CryptoKeyCreateResponse")
	proto.RegisterType((*CryptoKeyCreateResponseMsg)(nil), "cryptokey.CryptoKeyCreateResponseMsg")
	proto.RegisterType((*CryptoKeyCreateWithIdRequest)(nil), "cryptokey.CryptoKeyCreateWithIdRequest")
	proto.RegisterType((*CryptoKeyCreateWithIdRequestMsg)(nil), "cryptokey.CryptoKeyCreateWithIdRequestMsg")
	proto.RegisterType((*CryptoKeyCreateWithIdResponse)(nil), "cryptokey.CryptoKeyCreateWithIdResponse")
	proto.RegisterType((*CryptoKeyCreateWithIdResponseMsg)(nil), "cryptokey.CryptoKeyCreateWithIdResponseMsg")
	proto.RegisterType((*CryptoKeySpec)(nil), "cryptokey.CryptoKeySpec")
	proto.RegisterType((*CryptoKeyReadRequest)(nil), "cryptokey.CryptoKeyReadRequest")
	proto.RegisterType((*CryptoKeyReadRequestMsg)(nil), "cryptokey.CryptoKeyReadRequestMsg")
	proto.RegisterType((*CryptoKeyReadResponse)(nil), "cryptokey.CryptoKeyReadResponse")
	proto.RegisterType((*CryptoKeyReadResponseMsg)(nil), "cryptokey.CryptoKeyReadResponseMsg")
	proto.RegisterType((*CryptoKeyUpdateRequest)(nil), "cryptokey.CryptoKeyUpdateRequest")
	proto.RegisterType((*CryptoKeyUpdateRequestMsg)(nil), "cryptokey.CryptoKeyUpdateRequestMsg")
	proto.RegisterType((*CryptoKeyUpdateResponse)(nil), "cryptokey.CryptoKeyUpdateResponse")
	proto.RegisterType((*CryptoKeyUpdateResponseMsg)(nil), "cryptokey.CryptoKeyUpdateResponseMsg")
	proto.RegisterType((*CryptoKeyDeleteRequest)(nil), "cryptokey.CryptoKeyDeleteRequest")
	proto.RegisterType((*CryptoKeyDeleteRequestMsg)(nil), "cryptokey.CryptoKeyDeleteRequestMsg")
	proto.RegisterType((*CryptoKeyDeleteResponse)(nil), "cryptokey.CryptoKeyDeleteResponse")
	proto.RegisterType((*CryptoKeyDeleteResponseMsg)(nil), "cryptokey.CryptoKeyDeleteResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CryptoKey service

type CryptoKeyClient interface {
	CryptoKeyCreate(ctx context.Context, in *CryptoKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateResponseMsg, error)
	CryptoKeyCreateWithId(ctx context.Context, in *CryptoKeyCreateWithIdRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateWithIdResponseMsg, error)
	CryptoKeyRead(ctx context.Context, in *CryptoKeyReadRequestMsg, opts ...grpc.CallOption) (*CryptoKeyReadResponseMsg, error)
	CryptoKeyUpdate(ctx context.Context, in *CryptoKeyUpdateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyUpdateResponseMsg, error)
	CryptoKeyDelete(ctx context.Context, in *CryptoKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoKeyDeleteResponseMsg, error)
}

type cryptoKeyClient struct {
	cc *grpc.ClientConn
}

func NewCryptoKeyClient(cc *grpc.ClientConn) CryptoKeyClient {
	return &cryptoKeyClient{cc}
}

func (c *cryptoKeyClient) CryptoKeyCreate(ctx context.Context, in *CryptoKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateResponseMsg, error) {
	out := new(CryptoKeyCreateResponseMsg)
	err := grpc.Invoke(ctx, "/cryptokey.CryptoKey/CryptoKeyCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoKeyClient) CryptoKeyCreateWithId(ctx context.Context, in *CryptoKeyCreateWithIdRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateWithIdResponseMsg, error) {
	out := new(CryptoKeyCreateWithIdResponseMsg)
	err := grpc.Invoke(ctx, "/cryptokey.CryptoKey/CryptoKeyCreateWithId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoKeyClient) CryptoKeyRead(ctx context.Context, in *CryptoKeyReadRequestMsg, opts ...grpc.CallOption) (*CryptoKeyReadResponseMsg, error) {
	out := new(CryptoKeyReadResponseMsg)
	err := grpc.Invoke(ctx, "/cryptokey.CryptoKey/CryptoKeyRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoKeyClient) CryptoKeyUpdate(ctx context.Context, in *CryptoKeyUpdateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyUpdateResponseMsg, error) {
	out := new(CryptoKeyUpdateResponseMsg)
	err := grpc.Invoke(ctx, "/cryptokey.CryptoKey/CryptoKeyUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoKeyClient) CryptoKeyDelete(ctx context.Context, in *CryptoKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoKeyDeleteResponseMsg, error) {
	out := new(CryptoKeyDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/cryptokey.CryptoKey/CryptoKeyDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CryptoKey service

type CryptoKeyServer interface {
	CryptoKeyCreate(context.Context, *CryptoKeyCreateRequestMsg) (*CryptoKeyCreateResponseMsg, error)
	CryptoKeyCreateWithId(context.Context, *CryptoKeyCreateWithIdRequestMsg) (*CryptoKeyCreateWithIdResponseMsg, error)
	CryptoKeyRead(context.Context, *CryptoKeyReadRequestMsg) (*CryptoKeyReadResponseMsg, error)
	CryptoKeyUpdate(context.Context, *CryptoKeyUpdateRequestMsg) (*CryptoKeyUpdateResponseMsg, error)
	CryptoKeyDelete(context.Context, *CryptoKeyDeleteRequestMsg) (*CryptoKeyDeleteResponseMsg, error)
}

func RegisterCryptoKeyServer(s *grpc.Server, srv CryptoKeyServer) {
	s.RegisterService(&_CryptoKey_serviceDesc, srv)
}

func _CryptoKey_CryptoKeyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyCreateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyServer).CryptoKeyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptokey.CryptoKey/CryptoKeyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyServer).CryptoKeyCreate(ctx, req.(*CryptoKeyCreateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoKey_CryptoKeyCreateWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyCreateWithIdRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyServer).CryptoKeyCreateWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptokey.CryptoKey/CryptoKeyCreateWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyServer).CryptoKeyCreateWithId(ctx, req.(*CryptoKeyCreateWithIdRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoKey_CryptoKeyRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyReadRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyServer).CryptoKeyRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptokey.CryptoKey/CryptoKeyRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyServer).CryptoKeyRead(ctx, req.(*CryptoKeyReadRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoKey_CryptoKeyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyUpdateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyServer).CryptoKeyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptokey.CryptoKey/CryptoKeyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyServer).CryptoKeyUpdate(ctx, req.(*CryptoKeyUpdateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoKey_CryptoKeyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyServer).CryptoKeyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptokey.CryptoKey/CryptoKeyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyServer).CryptoKeyDelete(ctx, req.(*CryptoKeyDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CryptoKey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cryptokey.CryptoKey",
	HandlerType: (*CryptoKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CryptoKeyCreate",
			Handler:    _CryptoKey_CryptoKeyCreate_Handler,
		},
		{
			MethodName: "CryptoKeyCreateWithId",
			Handler:    _CryptoKey_CryptoKeyCreateWithId_Handler,
		},
		{
			MethodName: "CryptoKeyRead",
			Handler:    _CryptoKey_CryptoKeyRead_Handler,
		},
		{
			MethodName: "CryptoKeyUpdate",
			Handler:    _CryptoKey_CryptoKeyUpdate_Handler,
		},
		{
			MethodName: "CryptoKeyDelete",
			Handler:    _CryptoKey_CryptoKeyDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto_keys.proto",
}

func (m *CryptoKeyCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CryptoKeyCreateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyCreateResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyCreateWithIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateWithIdRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Keyindex))
	}
	if m.AllowDupAlloc != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.AllowDupAlloc))
	}
	return i, nil
}

func (m *CryptoKeyCreateWithIdRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateWithIdRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyCreateWithIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateWithIdResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyCreateWithIdResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateWithIdResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Keyindex))
	}
	if m.KeyType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.KeyType))
	}
	if m.KeySize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.KeySize))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *CryptoKeyReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyReadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyReadRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyReadRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyReadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Key.Size()))
		n1, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CryptoKeyReadResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyReadResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Key.Size()))
		n2, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CryptoKeyUpdateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyUpdateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyUpdateResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyUpdateResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCryptoKeys(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCryptoKeys(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCryptoKeys(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CryptoKeyCreateRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CryptoKeyCreateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyCreateResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCryptoKeys(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovCryptoKeys(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyCreateResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyCreateWithIdRequest) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovCryptoKeys(uint64(m.Keyindex))
	}
	if m.AllowDupAlloc != 0 {
		n += 1 + sovCryptoKeys(uint64(m.AllowDupAlloc))
	}
	return n
}

func (m *CryptoKeyCreateWithIdRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyCreateWithIdResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCryptoKeys(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovCryptoKeys(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyCreateWithIdResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeySpec) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovCryptoKeys(uint64(m.Keyindex))
	}
	if m.KeyType != 0 {
		n += 1 + sovCryptoKeys(uint64(m.KeyType))
	}
	if m.KeySize != 0 {
		n += 1 + sovCryptoKeys(uint64(m.KeySize))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCryptoKeys(uint64(l))
	}
	return n
}

func (m *CryptoKeyReadRequest) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovCryptoKeys(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyReadRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyReadResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCryptoKeys(uint64(m.ApiStatus))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCryptoKeys(uint64(l))
	}
	return n
}

func (m *CryptoKeyReadResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovCryptoKeys(uint64(l))
	}
	return n
}

func (m *CryptoKeyUpdateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCryptoKeys(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovCryptoKeys(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyUpdateResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovCryptoKeys(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCryptoKeys(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovCryptoKeys(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCryptoKeys(uint64(l))
		}
	}
	return n
}

func sovCryptoKeys(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCryptoKeys(x uint64) (n int) {
	return sovCryptoKeys(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CryptoKeyCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyCreateRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyCreateResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateWithIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDupAlloc", wireType)
			}
			m.AllowDupAlloc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowDupAlloc |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateWithIdRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyCreateWithIdRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateWithIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateWithIdResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyCreateWithIdResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (CryptoKeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyReadRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyReadRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyReadRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyReadRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &CryptoKeySpec{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyReadResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyReadResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyReadResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyReadResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &CryptoKeySpec{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyUpdateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyUpdateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyUpdateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyUpdateRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyUpdateResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyUpdateResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyUpdateResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyUpdateResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCryptoKeys(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCryptoKeys
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCryptoKeys(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCryptoKeys
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCryptoKeys
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCryptoKeys
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCryptoKeys
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCryptoKeys(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCryptoKeys = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCryptoKeys   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("crypto_keys.proto", fileDescriptorCryptoKeys) }

var fileDescriptorCryptoKeys = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x5f, 0x6f, 0xd3, 0x3e,
	0x14, 0x9d, 0x7f, 0x9d, 0x7e, 0x6b, 0x6f, 0xe9, 0x36, 0xac, 0x31, 0xd2, 0x0a, 0xba, 0x60, 0xfe,
	0x55, 0x43, 0xea, 0xa4, 0xc0, 0x0b, 0x02, 0x21, 0x95, 0xf5, 0x05, 0xa1, 0xbe, 0xa4, 0x43, 0x4c,
	0x13, 0x52, 0xc9, 0x5a, 0xd3, 0x46, 0xad, 0x56, 0x93, 0xa4, 0x82, 0xec, 0x8d, 0x47, 0xbe, 0x19,
	0x8f, 0x7c, 0x04, 0xd4, 0x4f, 0x82, 0x1c, 0xa7, 0xa9, 0x93, 0xb8, 0x4d, 0x86, 0xd4, 0xa7, 0x3a,
	0xf6, 0xbd, 0x3e, 0xf7, 0x9c, 0x6b, 0x1f, 0x17, 0x6e, 0xf7, 0x1d, 0x9f, 0x79, 0xd3, 0xde, 0x98,
	0xfa, 0x6e, 0x93, 0x39, 0x53, 0x6f, 0x8a, 0x4b, 0x62, 0x6a, 0x4c, 0xfd, 0x5a, 0xd9, 0xf3, 0x19,
	0x0d, 0xe7, 0x89, 0x06, 0x87, 0xa7, 0xc1, 0xca, 0x7b, 0xea, 0x9f, 0x3a, 0xd4, 0xf2, 0xa8, 0x49,
	0xbf, 0xce, 0xa8, 0xeb, 0x91, 0x73, 0xa8, 0xaa, 0x57, 0x3a, 0xee, 0x10, 0xbf, 0x82, 0x1d, 0x47,
	0x7c, 0x69, 0x48, 0x2f, 0x34, 0xca, 0xc6, 0x83, 0x66, 0x04, 0xd0, 0x54, 0xa7, 0x99, 0x8b, 0x0c,
	0xf2, 0x05, 0xee, 0xa6, 0x42, 0x5c, 0x36, 0xbd, 0x72, 0x29, 0x3e, 0x01, 0xb0, 0x98, 0xdd, 0x73,
	0x3d, 0xcb, 0x9b, 0xb9, 0x1a, 0xd2, 0x51, 0x63, 0xd7, 0xd8, 0x6f, 0x8a, 0x82, 0x5b, 0xcc, 0xee,
	0x06, 0xf3, 0x66, 0xc9, 0x5a, 0x0c, 0x71, 0x0d, 0x8a, 0x63, 0xea, 0xdb, 0x57, 0x03, 0xfa, 0x5d,
	0xfb, 0x4f, 0x47, 0x8d, 0x8a, 0x19, 0x7d, 0x93, 0x4f, 0x50, 0x5b, 0x81, 0xc3, 0x29, 0xbc, 0x81,
	0xa2, 0x13, 0x7e, 0x86, 0x1c, 0xc8, 0x3a, 0x0e, 0x22, 0xd2, 0x8c, 0x72, 0xc8, 0x25, 0xdc, 0x4b,
	0x04, 0x7d, 0xb4, 0xbd, 0xd1, 0xbb, 0x41, 0x48, 0x37, 0x56, 0x19, 0x8a, 0x57, 0x86, 0x9f, 0xc0,
	0x9e, 0x35, 0x99, 0x4c, 0xbf, 0xf5, 0x06, 0x33, 0xd6, 0xe3, 0xa3, 0x7e, 0x58, 0x7c, 0x25, 0x98,
	0x6e, 0xcf, 0x58, 0x8b, 0x4f, 0x92, 0x01, 0x1c, 0xad, 0xc3, 0xe0, 0x34, 0x5a, 0xc9, 0x4e, 0x3c,
	0x5d, 0xcd, 0x22, 0x96, 0xbc, 0xec, 0xc7, 0x04, 0xee, 0xaf, 0x08, 0xdc, 0x44, 0x57, 0x46, 0xa0,
	0xaf, 0x45, 0xe3, 0xa4, 0xda, 0xa9, 0xde, 0x34, 0xb2, 0x59, 0xa5, 0x3a, 0xf4, 0x13, 0x41, 0x25,
	0x8a, 0xed, 0x32, 0xda, 0x5f, 0xdb, 0x93, 0x93, 0x60, 0xad, 0xc7, 0x59, 0x05, 0x35, 0xef, 0x1a,
	0x07, 0x21, 0xc5, 0x68, 0x8f, 0x33, 0x9f, 0x51, 0x73, 0x67, 0x2c, 0x06, 0xb8, 0x2a, 0x12, 0x5c,
	0xfb, 0x9a, 0x6a, 0x85, 0x60, 0x33, 0xbe, 0xd4, 0xb5, 0xaf, 0x29, 0xde, 0x87, 0xc2, 0x98, 0xfa,
	0xda, 0xb6, 0x8e, 0x1a, 0xb7, 0x4c, 0x3e, 0x24, 0x06, 0x1c, 0x44, 0xdb, 0x98, 0xd4, 0xca, 0x73,
	0x4a, 0xc8, 0x99, 0x74, 0x4f, 0xa4, 0x1c, 0x2e, 0xd0, 0xcb, 0x64, 0xd7, 0x8f, 0x54, 0xfa, 0x48,
	0x49, 0xcb, 0x6e, 0x7b, 0x70, 0x27, 0x11, 0xf0, 0xaf, 0x5d, 0x3e, 0x16, 0x2c, 0xb9, 0x58, 0x65,
	0x43, 0x53, 0x15, 0xc0, 0x45, 0x17, 0xfc, 0xcf, 0x41, 0x53, 0xa2, 0x72, 0x32, 0xaf, 0x53, 0xdd,
	0xd6, 0x57, 0xb3, 0x49, 0x75, 0xb9, 0x2d, 0x39, 0xd8, 0x07, 0x36, 0x58, 0x1a, 0xce, 0xa2, 0x3e,
	0x94, 0xaf, 0xbe, 0xaa, 0x7a, 0x97, 0xfc, 0x6e, 0x17, 0x4b, 0x53, 0xbb, 0xdd, 0x22, 0x64, 0xd3,
	0x6e, 0x17, 0xc7, 0xb9, 0x81, 0xdb, 0xc5, 0x13, 0x25, 0x95, 0x5f, 0x48, 0x2a, 0xb7, 0xe9, 0x84,
	0x2e, 0x55, 0x5e, 0x77, 0x82, 0x65, 0x55, 0x63, 0x59, 0xf9, 0x55, 0x8d, 0xa5, 0xa9, 0x55, 0x5d,
	0x84, 0x6c, 0x5a, 0xd5, 0x38, 0xce, 0x0d, 0x54, 0x8d, 0x27, 0x2e, 0x55, 0x35, 0x7e, 0x6c, 0x43,
	0x29, 0x8a, 0xc2, 0x9f, 0x61, 0x2f, 0x61, 0x6d, 0xf8, 0x51, 0xe6, 0xb3, 0xda, 0x71, 0x87, 0xb5,
	0xc7, 0xd9, 0x0f, 0x57, 0xc7, 0x1d, 0x92, 0x2d, 0xec, 0x48, 0x77, 0x5f, 0x36, 0x4f, 0x7c, 0x9c,
	0xf3, 0xd1, 0xe0, 0x68, 0xcf, 0xf2, 0x5a, 0xb1, 0xc0, 0xbc, 0x90, 0x4c, 0x98, 0x5f, 0x61, 0x4c,
	0x32, 0xac, 0x8a, 0x63, 0x3c, 0xcc, 0x32, 0x00, 0xb1, 0xb7, 0xac, 0x98, 0x38, 0xba, 0x6a, 0xc5,
	0x92, 0x37, 0x5a, 0xad, 0x58, 0xea, 0xd6, 0x24, 0x10, 0x44, 0x1b, 0xd5, 0x08, 0xc9, 0xd3, 0xad,
	0x46, 0x48, 0x9d, 0x20, 0xb2, 0xf5, 0xf6, 0xf0, 0xd7, 0xbc, 0x8e, 0x7e, 0xcf, 0xeb, 0xe8, 0xcf,
	0xbc, 0x8e, 0x2e, 0x8a, 0x23, 0x6b, 0x12, 0xfc, 0x33, 0xbb, 0xfc, 0x3f, 0xf8, 0x79, 0xfe, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x65, 0x24, 0xab, 0x37, 0xcd, 0x09, 0x00, 0x00,
}
