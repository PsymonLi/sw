// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/crypto_keys.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CryptoKeyCreateRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
}

func (m *CryptoKeyCreateRequest) Reset()                    { *m = CryptoKeyCreateRequest{} }
func (m *CryptoKeyCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateRequest) ProtoMessage()               {}
func (*CryptoKeyCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CryptoKeyCreateRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type CryptoKeyCreateRequestMsg struct {
	Request []*CryptoKeyCreateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyCreateRequestMsg) Reset()                    { *m = CryptoKeyCreateRequestMsg{} }
func (m *CryptoKeyCreateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateRequestMsg) ProtoMessage()               {}
func (*CryptoKeyCreateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CryptoKeyCreateRequestMsg) GetRequest() []*CryptoKeyCreateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyCreateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyCreateResponse) Reset()                    { *m = CryptoKeyCreateResponse{} }
func (m *CryptoKeyCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateResponse) ProtoMessage()               {}
func (*CryptoKeyCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CryptoKeyCreateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyCreateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyCreateResponseMsg struct {
	Response []*CryptoKeyCreateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyCreateResponseMsg) Reset()                    { *m = CryptoKeyCreateResponseMsg{} }
func (m *CryptoKeyCreateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateResponseMsg) ProtoMessage()               {}
func (*CryptoKeyCreateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CryptoKeyCreateResponseMsg) GetResponse() []*CryptoKeyCreateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeySpec struct {
	Keyindex uint32        `protobuf:"varint,1,opt,name=keyindex" json:"keyindex,omitempty"`
	KeyType  CryptoKeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,enum=types.CryptoKeyType" json:"key_type,omitempty"`
	KeySize  uint32        `protobuf:"varint,3,opt,name=key_size,json=keySize" json:"key_size,omitempty"`
	Key      []byte        `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CryptoKeySpec) Reset()                    { *m = CryptoKeySpec{} }
func (m *CryptoKeySpec) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeySpec) ProtoMessage()               {}
func (*CryptoKeySpec) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CryptoKeySpec) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

func (m *CryptoKeySpec) GetKeyType() CryptoKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoKeyType_CRYPTO_KEY_TYPE_AES128
}

func (m *CryptoKeySpec) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoKeySpec) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyReadRequest struct {
	Meta     *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Keyindex uint32      `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyReadRequest) Reset()                    { *m = CryptoKeyReadRequest{} }
func (m *CryptoKeyReadRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadRequest) ProtoMessage()               {}
func (*CryptoKeyReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CryptoKeyReadRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CryptoKeyReadRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyReadRequestMsg struct {
	Request []*CryptoKeyReadRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyReadRequestMsg) Reset()                    { *m = CryptoKeyReadRequestMsg{} }
func (m *CryptoKeyReadRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadRequestMsg) ProtoMessage()               {}
func (*CryptoKeyReadRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *CryptoKeyReadRequestMsg) GetRequest() []*CryptoKeyReadRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyReadResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Key       *CryptoKeySpec `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoKeyReadResponse) Reset()                    { *m = CryptoKeyReadResponse{} }
func (m *CryptoKeyReadResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadResponse) ProtoMessage()               {}
func (*CryptoKeyReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *CryptoKeyReadResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyReadResponse) GetKey() *CryptoKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyReadResponseMsg struct {
	Response []*CryptoKeyReadResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyReadResponseMsg) Reset()                    { *m = CryptoKeyReadResponseMsg{} }
func (m *CryptoKeyReadResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadResponseMsg) ProtoMessage()               {}
func (*CryptoKeyReadResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *CryptoKeyReadResponseMsg) GetResponse() []*CryptoKeyReadResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyUpdateRequest struct {
	Meta *ObjectMeta    `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Key  *CryptoKeySpec `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoKeyUpdateRequest) Reset()                    { *m = CryptoKeyUpdateRequest{} }
func (m *CryptoKeyUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateRequest) ProtoMessage()               {}
func (*CryptoKeyUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *CryptoKeyUpdateRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CryptoKeyUpdateRequest) GetKey() *CryptoKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyUpdateRequestMsg struct {
	Request []*CryptoKeyUpdateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyUpdateRequestMsg) Reset()                    { *m = CryptoKeyUpdateRequestMsg{} }
func (m *CryptoKeyUpdateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateRequestMsg) ProtoMessage()               {}
func (*CryptoKeyUpdateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *CryptoKeyUpdateRequestMsg) GetRequest() []*CryptoKeyUpdateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyUpdateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyUpdateResponse) Reset()                    { *m = CryptoKeyUpdateResponse{} }
func (m *CryptoKeyUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateResponse) ProtoMessage()               {}
func (*CryptoKeyUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *CryptoKeyUpdateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyUpdateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyUpdateResponseMsg struct {
	Response []*CryptoKeyUpdateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyUpdateResponseMsg) Reset()                    { *m = CryptoKeyUpdateResponseMsg{} }
func (m *CryptoKeyUpdateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateResponseMsg) ProtoMessage()               {}
func (*CryptoKeyUpdateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *CryptoKeyUpdateResponseMsg) GetResponse() []*CryptoKeyUpdateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyDeleteRequest struct {
	Meta     *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Keyindex uint32      `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyDeleteRequest) Reset()                    { *m = CryptoKeyDeleteRequest{} }
func (m *CryptoKeyDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteRequest) ProtoMessage()               {}
func (*CryptoKeyDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *CryptoKeyDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CryptoKeyDeleteRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyDeleteRequestMsg struct {
	Request []*CryptoKeyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyDeleteRequestMsg) Reset()                    { *m = CryptoKeyDeleteRequestMsg{} }
func (m *CryptoKeyDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteRequestMsg) ProtoMessage()               {}
func (*CryptoKeyDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *CryptoKeyDeleteRequestMsg) GetRequest() []*CryptoKeyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex" json:"keyindex,omitempty"`
}

func (m *CryptoKeyDeleteResponse) Reset()                    { *m = CryptoKeyDeleteResponse{} }
func (m *CryptoKeyDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteResponse) ProtoMessage()               {}
func (*CryptoKeyDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *CryptoKeyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyDeleteResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyDeleteResponseMsg struct {
	Response []*CryptoKeyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyDeleteResponseMsg) Reset()                    { *m = CryptoKeyDeleteResponseMsg{} }
func (m *CryptoKeyDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteResponseMsg) ProtoMessage()               {}
func (*CryptoKeyDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *CryptoKeyDeleteResponseMsg) GetResponse() []*CryptoKeyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*CryptoKeyCreateRequest)(nil), "cryptokey.CryptoKeyCreateRequest")
	proto.RegisterType((*CryptoKeyCreateRequestMsg)(nil), "cryptokey.CryptoKeyCreateRequestMsg")
	proto.RegisterType((*CryptoKeyCreateResponse)(nil), "cryptokey.CryptoKeyCreateResponse")
	proto.RegisterType((*CryptoKeyCreateResponseMsg)(nil), "cryptokey.CryptoKeyCreateResponseMsg")
	proto.RegisterType((*CryptoKeySpec)(nil), "cryptokey.CryptoKeySpec")
	proto.RegisterType((*CryptoKeyReadRequest)(nil), "cryptokey.CryptoKeyReadRequest")
	proto.RegisterType((*CryptoKeyReadRequestMsg)(nil), "cryptokey.CryptoKeyReadRequestMsg")
	proto.RegisterType((*CryptoKeyReadResponse)(nil), "cryptokey.CryptoKeyReadResponse")
	proto.RegisterType((*CryptoKeyReadResponseMsg)(nil), "cryptokey.CryptoKeyReadResponseMsg")
	proto.RegisterType((*CryptoKeyUpdateRequest)(nil), "cryptokey.CryptoKeyUpdateRequest")
	proto.RegisterType((*CryptoKeyUpdateRequestMsg)(nil), "cryptokey.CryptoKeyUpdateRequestMsg")
	proto.RegisterType((*CryptoKeyUpdateResponse)(nil), "cryptokey.CryptoKeyUpdateResponse")
	proto.RegisterType((*CryptoKeyUpdateResponseMsg)(nil), "cryptokey.CryptoKeyUpdateResponseMsg")
	proto.RegisterType((*CryptoKeyDeleteRequest)(nil), "cryptokey.CryptoKeyDeleteRequest")
	proto.RegisterType((*CryptoKeyDeleteRequestMsg)(nil), "cryptokey.CryptoKeyDeleteRequestMsg")
	proto.RegisterType((*CryptoKeyDeleteResponse)(nil), "cryptokey.CryptoKeyDeleteResponse")
	proto.RegisterType((*CryptoKeyDeleteResponseMsg)(nil), "cryptokey.CryptoKeyDeleteResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CryptoKey service

type CryptoKeyClient interface {
	CryptoKeyCreate(ctx context.Context, in *CryptoKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateResponseMsg, error)
	CryptoKeyRead(ctx context.Context, in *CryptoKeyReadRequestMsg, opts ...grpc.CallOption) (*CryptoKeyReadResponseMsg, error)
	CryptoKeyUpdate(ctx context.Context, in *CryptoKeyUpdateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyUpdateResponseMsg, error)
	CryptoKeyDelete(ctx context.Context, in *CryptoKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoKeyDeleteResponseMsg, error)
}

type cryptoKeyClient struct {
	cc *grpc.ClientConn
}

func NewCryptoKeyClient(cc *grpc.ClientConn) CryptoKeyClient {
	return &cryptoKeyClient{cc}
}

func (c *cryptoKeyClient) CryptoKeyCreate(ctx context.Context, in *CryptoKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateResponseMsg, error) {
	out := new(CryptoKeyCreateResponseMsg)
	err := grpc.Invoke(ctx, "/cryptokey.CryptoKey/CryptoKeyCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoKeyClient) CryptoKeyRead(ctx context.Context, in *CryptoKeyReadRequestMsg, opts ...grpc.CallOption) (*CryptoKeyReadResponseMsg, error) {
	out := new(CryptoKeyReadResponseMsg)
	err := grpc.Invoke(ctx, "/cryptokey.CryptoKey/CryptoKeyRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoKeyClient) CryptoKeyUpdate(ctx context.Context, in *CryptoKeyUpdateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyUpdateResponseMsg, error) {
	out := new(CryptoKeyUpdateResponseMsg)
	err := grpc.Invoke(ctx, "/cryptokey.CryptoKey/CryptoKeyUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoKeyClient) CryptoKeyDelete(ctx context.Context, in *CryptoKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoKeyDeleteResponseMsg, error) {
	out := new(CryptoKeyDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/cryptokey.CryptoKey/CryptoKeyDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CryptoKey service

type CryptoKeyServer interface {
	CryptoKeyCreate(context.Context, *CryptoKeyCreateRequestMsg) (*CryptoKeyCreateResponseMsg, error)
	CryptoKeyRead(context.Context, *CryptoKeyReadRequestMsg) (*CryptoKeyReadResponseMsg, error)
	CryptoKeyUpdate(context.Context, *CryptoKeyUpdateRequestMsg) (*CryptoKeyUpdateResponseMsg, error)
	CryptoKeyDelete(context.Context, *CryptoKeyDeleteRequestMsg) (*CryptoKeyDeleteResponseMsg, error)
}

func RegisterCryptoKeyServer(s *grpc.Server, srv CryptoKeyServer) {
	s.RegisterService(&_CryptoKey_serviceDesc, srv)
}

func _CryptoKey_CryptoKeyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyCreateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyServer).CryptoKeyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptokey.CryptoKey/CryptoKeyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyServer).CryptoKeyCreate(ctx, req.(*CryptoKeyCreateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoKey_CryptoKeyRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyReadRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyServer).CryptoKeyRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptokey.CryptoKey/CryptoKeyRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyServer).CryptoKeyRead(ctx, req.(*CryptoKeyReadRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoKey_CryptoKeyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyUpdateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyServer).CryptoKeyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptokey.CryptoKey/CryptoKeyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyServer).CryptoKeyUpdate(ctx, req.(*CryptoKeyUpdateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoKey_CryptoKeyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoKeyServer).CryptoKeyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptokey.CryptoKey/CryptoKeyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoKeyServer).CryptoKeyDelete(ctx, req.(*CryptoKeyDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CryptoKey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cryptokey.CryptoKey",
	HandlerType: (*CryptoKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CryptoKeyCreate",
			Handler:    _CryptoKey_CryptoKeyCreate_Handler,
		},
		{
			MethodName: "CryptoKeyRead",
			Handler:    _CryptoKey_CryptoKeyRead_Handler,
		},
		{
			MethodName: "CryptoKeyUpdate",
			Handler:    _CryptoKey_CryptoKeyUpdate_Handler,
		},
		{
			MethodName: "CryptoKeyDelete",
			Handler:    _CryptoKey_CryptoKeyDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/crypto_keys.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/crypto_keys.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xad, 0x9b, 0xea, 0xd7, 0x64, 0xfa, 0x6b, 0x29, 0xab, 0x16, 0x9c, 0x5c, 0x6a, 0x16, 0x2a,
	0x45, 0x1c, 0x62, 0xc9, 0x9c, 0x10, 0x08, 0x04, 0xe5, 0x86, 0x22, 0x24, 0xa7, 0x48, 0xa5, 0x20,
	0x05, 0x37, 0x19, 0x52, 0xe3, 0x90, 0x18, 0xef, 0x56, 0xc2, 0xfd, 0x06, 0x1c, 0xf8, 0xce, 0xc8,
	0xbb, 0x8e, 0xb3, 0x6b, 0x6f, 0x93, 0x1a, 0xa9, 0xa7, 0xec, 0x9f, 0x79, 0x33, 0x6f, 0xde, 0xcc,
	0x6c, 0x0c, 0x47, 0xb3, 0x70, 0xe4, 0xc6, 0xc9, 0x9c, 0xcf, 0xdd, 0xcb, 0x60, 0xea, 0x8e, 0x92,
	0x34, 0xe6, 0xf3, 0x61, 0x84, 0x29, 0xeb, 0x89, 0x53, 0xd2, 0x92, 0x47, 0x11, 0xa6, 0x9d, 0xc3,
	0xa5, 0x2d, 0x4f, 0x63, 0xcc, 0x2d, 0xe8, 0x6b, 0x78, 0x70, 0x22, 0x6c, 0xde, 0x63, 0x7a, 0x92,
	0x60, 0xc0, 0xd1, 0xc7, 0x9f, 0x57, 0xc8, 0x38, 0x39, 0x86, 0xad, 0x1f, 0xc8, 0x03, 0xdb, 0x72,
	0xac, 0xee, 0x8e, 0x77, 0xbf, 0x27, 0x51, 0x1f, 0x2e, 0xbe, 0xe3, 0x88, 0xf7, 0x91, 0x07, 0xbe,
	0xb8, 0xa6, 0x67, 0xd0, 0x36, 0x3b, 0xe8, 0xb3, 0x09, 0x79, 0x01, 0xdb, 0x89, 0xdc, 0xd9, 0x96,
	0xd3, 0xe8, 0xee, 0x78, 0x8f, 0x7a, 0x05, 0xa3, 0x9e, 0x19, 0xe6, 0x2f, 0x10, 0xf4, 0x1b, 0x3c,
	0xac, 0x98, 0xb0, 0x78, 0x3e, 0x63, 0x48, 0x5c, 0x80, 0x20, 0x0e, 0x87, 0x8c, 0x07, 0xfc, 0x8a,
	0x09, 0x86, 0x7b, 0xde, 0x7e, 0xce, 0xf0, 0x4d, 0x1c, 0x0e, 0xc4, 0xb9, 0xdf, 0x0a, 0x16, 0x4b,
	0xd2, 0x81, 0x66, 0x84, 0x69, 0x38, 0x1b, 0xe3, 0x2f, 0x7b, 0xd3, 0xb1, 0xba, 0xbb, 0x7e, 0xb1,
	0xa7, 0x5f, 0xa0, 0x73, 0x43, 0x9c, 0x2c, 0x85, 0x57, 0xd0, 0x4c, 0xf2, 0x6d, 0x9e, 0x03, 0x5d,
	0x95, 0x83, 0xb4, 0xf4, 0x0b, 0x0c, 0xfd, 0x6d, 0xc1, 0x6e, 0x61, 0x35, 0x88, 0x71, 0xa4, 0x71,
	0xb1, 0x74, 0x2e, 0xc4, 0x15, 0x77, 0xc3, 0x2c, 0x13, 0xc1, 0x73, 0xcf, 0x3b, 0xc8, 0xd3, 0x2a,
	0x7c, 0x9c, 0xa6, 0x31, 0xfa, 0xdb, 0x91, 0x5c, 0x90, 0xb6, 0x04, 0xb0, 0xf0, 0x1a, 0xed, 0x86,
	0x70, 0x96, 0x5d, 0x0d, 0xc2, 0x6b, 0x24, 0xfb, 0xd0, 0x88, 0x30, 0xb5, 0xb7, 0x1c, 0xab, 0xfb,
	0xbf, 0x9f, 0x2d, 0xe9, 0x27, 0x38, 0x28, 0xdc, 0xf8, 0x18, 0x8c, 0xeb, 0x95, 0x7a, 0xa5, 0x88,
	0xa7, 0x4a, 0xb1, 0x14, 0xd7, 0x99, 0x82, 0xcf, 0xcb, 0x4d, 0x70, 0x64, 0x12, 0x50, 0x01, 0x2d,
	0x5b, 0x80, 0xc3, 0x61, 0xc9, 0xe0, 0x5f, 0x1b, 0xe0, 0xa9, 0x14, 0x63, 0x53, 0x64, 0x68, 0x9b,
	0x08, 0x64, 0xb5, 0x91, 0x32, 0x9d, 0x81, 0x6d, 0x8c, 0x9a, 0x25, 0xf3, 0xb2, 0xd2, 0x0e, 0xce,
	0xcd, 0xd9, 0x54, 0x9a, 0x21, 0x52, 0xa6, 0xed, 0x63, 0x3c, 0xae, 0x3d, 0x6d, 0x35, 0xd3, 0x68,
	0x9b, 0x83, 0xdd, 0x7e, 0x32, 0x35, 0x98, 0x79, 0x32, 0x17, 0x26, 0x77, 0x3d, 0x99, 0x7a, 0x9c,
	0x1a, 0x93, 0xa9, 0x03, 0x95, 0x62, 0x7c, 0x56, 0x8a, 0xf1, 0x0e, 0xa7, 0x58, 0xbb, 0x18, 0xab,
	0xa8, 0xab, 0xe2, 0x6b, 0xce, 0x6f, 0x2f, 0xbe, 0x06, 0x33, 0x8b, 0xbf, 0x30, 0xb9, 0x6b, 0xf1,
	0xf5, 0x38, 0x35, 0xc4, 0xd7, 0x81, 0x4b, 0xf1, 0xbd, 0x3f, 0x0d, 0x68, 0x15, 0x56, 0xe4, 0x2b,
	0xdc, 0x2b, 0xbd, 0xa4, 0xe4, 0xc9, 0xda, 0x7f, 0x8a, 0x3e, 0x9b, 0x74, 0x8e, 0xd7, 0xbf, 0xc5,
	0x7d, 0x36, 0xa1, 0x1b, 0xe4, 0x5c, 0x79, 0x85, 0xb3, 0xe1, 0x24, 0x74, 0xcd, 0x23, 0x94, 0x79,
	0x7f, 0xbc, 0x6e, 0xb4, 0xa5, 0x6f, 0x95, 0xbd, 0xec, 0x36, 0x33, 0xfb, 0xf2, 0x10, 0x9a, 0xd9,
	0x57, 0x1a, 0xbd, 0x14, 0x41, 0x4a, 0x6a, 0x8e, 0x50, 0xee, 0x34, 0x73, 0x84, 0x4a, 0x35, 0xe9,
	0xc6, 0x5b, 0x38, 0x6f, 0x5e, 0x06, 0x53, 0xf1, 0x4d, 0x70, 0xf1, 0x9f, 0xf8, 0x79, 0xf6, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xc6, 0xc4, 0xf8, 0xba, 0x5f, 0x08, 0x00, 0x00,
}
