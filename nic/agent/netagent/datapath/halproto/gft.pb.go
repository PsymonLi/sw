// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gft.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GftTableType int32

const (
	GftTableType_GFT_TABLE_TYPE_NONE                GftTableType = 0
	GftTableType_GFT_TABLE_TYPE_WILDCARD_INGRESS    GftTableType = 1
	GftTableType_GFT_TABLE_TYPE_WILDCARD_EGRESS     GftTableType = 2
	GftTableType_GFT_TABLE_TYPE_EXACT_MATCH_INGRESS GftTableType = 3
	GftTableType_GFT_TABLE_TYPE_EXACT_MATCH_EGRESS  GftTableType = 4
)

var GftTableType_name = map[int32]string{
	0: "GFT_TABLE_TYPE_NONE",
	1: "GFT_TABLE_TYPE_WILDCARD_INGRESS",
	2: "GFT_TABLE_TYPE_WILDCARD_EGRESS",
	3: "GFT_TABLE_TYPE_EXACT_MATCH_INGRESS",
	4: "GFT_TABLE_TYPE_EXACT_MATCH_EGRESS",
}
var GftTableType_value = map[string]int32{
	"GFT_TABLE_TYPE_NONE":                0,
	"GFT_TABLE_TYPE_WILDCARD_INGRESS":    1,
	"GFT_TABLE_TYPE_WILDCARD_EGRESS":     2,
	"GFT_TABLE_TYPE_EXACT_MATCH_INGRESS": 3,
	"GFT_TABLE_TYPE_EXACT_MATCH_EGRESS":  4,
}

func (x GftTableType) String() string {
	return proto.EnumName(GftTableType_name, int32(x))
}
func (GftTableType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGft, []int{0} }

type GftEthFields struct {
	DstMacAddr     uint64 `protobuf:"varint,1,opt,name=dst_mac_addr,json=dstMacAddr,proto3" json:"dst_mac_addr,omitempty"`
	SrcMacAddr     uint64 `protobuf:"varint,2,opt,name=src_mac_addr,json=srcMacAddr,proto3" json:"src_mac_addr,omitempty"`
	EthType        uint32 `protobuf:"varint,3,opt,name=eth_type,json=ethType,proto3" json:"eth_type,omitempty"`
	CustomerVlanId uint32 `protobuf:"varint,4,opt,name=customer_vlan_id,json=customerVlanId,proto3" json:"customer_vlan_id,omitempty"`
	ProviderVlanId uint32 `protobuf:"varint,5,opt,name=provider_vlan_id,json=providerVlanId,proto3" json:"provider_vlan_id,omitempty"`
	Priority       uint32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (m *GftEthFields) Reset()                    { *m = GftEthFields{} }
func (m *GftEthFields) String() string            { return proto.CompactTextString(m) }
func (*GftEthFields) ProtoMessage()               {}
func (*GftEthFields) Descriptor() ([]byte, []int) { return fileDescriptorGft, []int{0} }

func (m *GftEthFields) GetDstMacAddr() uint64 {
	if m != nil {
		return m.DstMacAddr
	}
	return 0
}

func (m *GftEthFields) GetSrcMacAddr() uint64 {
	if m != nil {
		return m.SrcMacAddr
	}
	return 0
}

func (m *GftEthFields) GetEthType() uint32 {
	if m != nil {
		return m.EthType
	}
	return 0
}

func (m *GftEthFields) GetCustomerVlanId() uint32 {
	if m != nil {
		return m.CustomerVlanId
	}
	return 0
}

func (m *GftEthFields) GetProviderVlanId() uint32 {
	if m != nil {
		return m.ProviderVlanId
	}
	return 0
}

func (m *GftEthFields) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type GftHeaderGroupExactMatchProfile struct {
}

func (m *GftHeaderGroupExactMatchProfile) Reset()         { *m = GftHeaderGroupExactMatchProfile{} }
func (m *GftHeaderGroupExactMatchProfile) String() string { return proto.CompactTextString(m) }
func (*GftHeaderGroupExactMatchProfile) ProtoMessage()    {}
func (*GftHeaderGroupExactMatchProfile) Descriptor() ([]byte, []int) {
	return fileDescriptorGft, []int{1}
}

func init() {
	proto.RegisterType((*GftEthFields)(nil), "gft.GftEthFields")
	proto.RegisterType((*GftHeaderGroupExactMatchProfile)(nil), "gft.GftHeaderGroupExactMatchProfile")
	proto.RegisterEnum("gft.GftTableType", GftTableType_name, GftTableType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gft service

type GftClient interface {
}

type gftClient struct {
	cc *grpc.ClientConn
}

func NewGftClient(cc *grpc.ClientConn) GftClient {
	return &gftClient{cc}
}

// Server API for Gft service

type GftServer interface {
}

func RegisterGftServer(s *grpc.Server, srv GftServer) {
	s.RegisterService(&_Gft_serviceDesc, srv)
}

var _Gft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gft.Gft",
	HandlerType: (*GftServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "gft.proto",
}

func (m *GftEthFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GftEthFields) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DstMacAddr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGft(dAtA, i, uint64(m.DstMacAddr))
	}
	if m.SrcMacAddr != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGft(dAtA, i, uint64(m.SrcMacAddr))
	}
	if m.EthType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGft(dAtA, i, uint64(m.EthType))
	}
	if m.CustomerVlanId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGft(dAtA, i, uint64(m.CustomerVlanId))
	}
	if m.ProviderVlanId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGft(dAtA, i, uint64(m.ProviderVlanId))
	}
	if m.Priority != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGft(dAtA, i, uint64(m.Priority))
	}
	return i, nil
}

func (m *GftHeaderGroupExactMatchProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GftHeaderGroupExactMatchProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintGft(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GftEthFields) Size() (n int) {
	var l int
	_ = l
	if m.DstMacAddr != 0 {
		n += 1 + sovGft(uint64(m.DstMacAddr))
	}
	if m.SrcMacAddr != 0 {
		n += 1 + sovGft(uint64(m.SrcMacAddr))
	}
	if m.EthType != 0 {
		n += 1 + sovGft(uint64(m.EthType))
	}
	if m.CustomerVlanId != 0 {
		n += 1 + sovGft(uint64(m.CustomerVlanId))
	}
	if m.ProviderVlanId != 0 {
		n += 1 + sovGft(uint64(m.ProviderVlanId))
	}
	if m.Priority != 0 {
		n += 1 + sovGft(uint64(m.Priority))
	}
	return n
}

func (m *GftHeaderGroupExactMatchProfile) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovGft(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGft(x uint64) (n int) {
	return sovGft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GftEthFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GftEthFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GftEthFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstMacAddr", wireType)
			}
			m.DstMacAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstMacAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcMacAddr", wireType)
			}
			m.SrcMacAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcMacAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthType", wireType)
			}
			m.EthType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerVlanId", wireType)
			}
			m.CustomerVlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerVlanId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderVlanId", wireType)
			}
			m.ProviderVlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProviderVlanId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GftHeaderGroupExactMatchProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GftHeaderGroupExactMatchProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GftHeaderGroupExactMatchProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGft
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGft
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGft(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGft = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGft   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gft.proto", fileDescriptorGft) }

var fileDescriptorGft = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd1, 0x4d, 0x8e, 0xda, 0x30,
	0x1c, 0x05, 0x70, 0x4c, 0x80, 0xa6, 0x2e, 0xad, 0x50, 0xba, 0x68, 0x9a, 0x45, 0x80, 0x54, 0xad,
	0x50, 0x17, 0x5d, 0xb4, 0x27, 0x08, 0x60, 0x02, 0x12, 0x50, 0x14, 0xa2, 0x7e, 0x6d, 0x2c, 0x13,
	0x3b, 0x24, 0x6a, 0x20, 0x91, 0xf3, 0x07, 0x95, 0x9b, 0xf4, 0x36, 0xdd, 0x76, 0x39, 0x17, 0x18,
	0x69, 0xc4, 0x5c, 0x64, 0x44, 0x02, 0xcc, 0x08, 0x69, 0x66, 0x65, 0xfb, 0xf9, 0xa7, 0x67, 0xcb,
	0xc6, 0xcf, 0x97, 0x01, 0x7c, 0x4a, 0x65, 0x02, 0x89, 0xa6, 0x2c, 0x03, 0x30, 0x5e, 0xc0, 0x2e,
	0x15, 0x59, 0x91, 0x18, 0xea, 0xef, 0xb0, 0x98, 0x59, 0xd7, 0x08, 0xd7, 0x9d, 0x00, 0x08, 0x84,
	0x83, 0x48, 0xc4, 0x3c, 0xd3, 0x5a, 0xb8, 0xce, 0x33, 0xa0, 0x2b, 0xe6, 0x53, 0xc6, 0xb9, 0xd4,
	0x51, 0x0b, 0x75, 0x2a, 0x2e, 0xe6, 0x19, 0x4c, 0x98, 0x6f, 0x73, 0x2e, 0x0f, 0x22, 0x93, 0xfe,
	0xbd, 0x28, 0x17, 0x22, 0x93, 0xfe, 0x49, 0xbc, 0xc5, 0xaa, 0x80, 0x90, 0x1e, 0x4e, 0xd4, 0x95,
	0x16, 0xea, 0xbc, 0x74, 0x9f, 0x09, 0x08, 0xbd, 0x5d, 0x2a, 0xb4, 0x0e, 0x6e, 0xf8, 0x9b, 0x0c,
	0x92, 0x95, 0x90, 0x74, 0x1b, 0xb3, 0x35, 0x8d, 0xb8, 0x5e, 0xc9, 0xc9, 0xab, 0x53, 0xfe, 0x2d,
	0x66, 0xeb, 0x11, 0x3f, 0xc8, 0x54, 0x26, 0xdb, 0x88, 0x3f, 0x90, 0xd5, 0x42, 0x9e, 0xf2, 0xa3,
	0x34, 0xb0, 0x9a, 0xca, 0x28, 0x91, 0x11, 0xec, 0xf4, 0x5a, 0x2e, 0xce, 0x6b, 0xab, 0x8d, 0x9b,
	0x4e, 0x00, 0x43, 0xc1, 0xb8, 0x90, 0x8e, 0x4c, 0x36, 0x29, 0xf9, 0xc3, 0x7c, 0x98, 0x30, 0xf0,
	0xc3, 0x99, 0x4c, 0x82, 0x28, 0x16, 0x1f, 0xff, 0x15, 0x4f, 0xe0, 0xb1, 0x45, 0x2c, 0xf2, 0x3b,
	0xbe, 0xc1, 0xaf, 0x9d, 0x81, 0x47, 0x3d, 0xbb, 0x3b, 0x26, 0xd4, 0xfb, 0x39, 0x23, 0x74, 0xfa,
	0x75, 0x4a, 0x1a, 0x25, 0xed, 0x1d, 0x6e, 0x5e, 0x6c, 0x7c, 0x1f, 0x8d, 0xfb, 0x3d, 0xdb, 0xed,
	0xd3, 0xd1, 0xd4, 0x71, 0xc9, 0x7c, 0xde, 0x40, 0x9a, 0x85, 0xcd, 0xc7, 0x10, 0x29, 0x4c, 0x59,
	0xfb, 0x80, 0xad, 0x0b, 0x43, 0x7e, 0xd8, 0x3d, 0x8f, 0x4e, 0x6c, 0xaf, 0x37, 0x3c, 0x77, 0x29,
	0xda, 0x7b, 0xdc, 0x7e, 0xc2, 0x1d, 0xeb, 0x2a, 0x9f, 0xab, 0x58, 0x71, 0x02, 0xe8, 0x1a, 0xff,
	0xf7, 0x26, 0xba, 0xda, 0x9b, 0xe8, 0x66, 0x6f, 0xa2, 0xbf, 0xb7, 0x66, 0xe9, 0x97, 0x1a, 0xb2,
	0x38, 0xff, 0xe7, 0x45, 0x2d, 0x1f, 0xbe, 0xdc, 0x05, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xb0, 0x43,
	0xb5, 0x17, 0x02, 0x00, 0x00,
}
