// Code generated by MockGen. DO NOT EDIT.
// Source: proxyrcb.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisProxyrCbKeyHandle_KeyOrHandle is a mock of isProxyrCbKeyHandle_KeyOrHandle interface
type MockisProxyrCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisProxyrCbKeyHandle_KeyOrHandle
type MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisProxyrCbKeyHandle_KeyOrHandle
}

// NewMockisProxyrCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisProxyrCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisProxyrCbKeyHandle_KeyOrHandle {
	mock := &MockisProxyrCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisProxyrCbKeyHandle_KeyOrHandle) EXPECT() *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isProxyrCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisProxyrCbKeyHandle_KeyOrHandle) isProxyrCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isProxyrCbKeyHandle_KeyOrHandle")
}

// isProxyrCbKeyHandle_KeyOrHandle indicates an expected call of isProxyrCbKeyHandle_KeyOrHandle
func (mr *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder) isProxyrCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isProxyrCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisProxyrCbKeyHandle_KeyOrHandle)(nil).isProxyrCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisProxyrCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisProxyrCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisProxyrCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisProxyrCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockProxyrCbClient is a mock of ProxyrCbClient interface
type MockProxyrCbClient struct {
	ctrl     *gomock.Controller
	recorder *MockProxyrCbClientMockRecorder
}

// MockProxyrCbClientMockRecorder is the mock recorder for MockProxyrCbClient
type MockProxyrCbClientMockRecorder struct {
	mock *MockProxyrCbClient
}

// NewMockProxyrCbClient creates a new mock instance
func NewMockProxyrCbClient(ctrl *gomock.Controller) *MockProxyrCbClient {
	mock := &MockProxyrCbClient{ctrl: ctrl}
	mock.recorder = &MockProxyrCbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxyrCbClient) EXPECT() *MockProxyrCbClientMockRecorder {
	return m.recorder
}

// ProxyrCbCreate mocks base method
func (m *MockProxyrCbClient) ProxyrCbCreate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyrCbCreate", varargs...)
	ret0, _ := ret[0].(*ProxyrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbCreate indicates an expected call of ProxyrCbCreate
func (mr *MockProxyrCbClientMockRecorder) ProxyrCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbCreate", reflect.TypeOf((*MockProxyrCbClient)(nil).ProxyrCbCreate), varargs...)
}

// ProxyrCbUpdate mocks base method
func (m *MockProxyrCbClient) ProxyrCbUpdate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyrCbUpdate", varargs...)
	ret0, _ := ret[0].(*ProxyrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbUpdate indicates an expected call of ProxyrCbUpdate
func (mr *MockProxyrCbClientMockRecorder) ProxyrCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbUpdate", reflect.TypeOf((*MockProxyrCbClient)(nil).ProxyrCbUpdate), varargs...)
}

// ProxyrCbDelete mocks base method
func (m *MockProxyrCbClient) ProxyrCbDelete(ctx context.Context, in *ProxyrCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxyrCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyrCbDelete", varargs...)
	ret0, _ := ret[0].(*ProxyrCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbDelete indicates an expected call of ProxyrCbDelete
func (mr *MockProxyrCbClientMockRecorder) ProxyrCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbDelete", reflect.TypeOf((*MockProxyrCbClient)(nil).ProxyrCbDelete), varargs...)
}

// ProxyrCbGet mocks base method
func (m *MockProxyrCbClient) ProxyrCbGet(ctx context.Context, in *ProxyrCbGetRequestMsg, opts ...grpc.CallOption) (*ProxyrCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyrCbGet", varargs...)
	ret0, _ := ret[0].(*ProxyrCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbGet indicates an expected call of ProxyrCbGet
func (mr *MockProxyrCbClientMockRecorder) ProxyrCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbGet", reflect.TypeOf((*MockProxyrCbClient)(nil).ProxyrCbGet), varargs...)
}

// MockProxyrCbServer is a mock of ProxyrCbServer interface
type MockProxyrCbServer struct {
	ctrl     *gomock.Controller
	recorder *MockProxyrCbServerMockRecorder
}

// MockProxyrCbServerMockRecorder is the mock recorder for MockProxyrCbServer
type MockProxyrCbServerMockRecorder struct {
	mock *MockProxyrCbServer
}

// NewMockProxyrCbServer creates a new mock instance
func NewMockProxyrCbServer(ctrl *gomock.Controller) *MockProxyrCbServer {
	mock := &MockProxyrCbServer{ctrl: ctrl}
	mock.recorder = &MockProxyrCbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProxyrCbServer) EXPECT() *MockProxyrCbServerMockRecorder {
	return m.recorder
}

// ProxyrCbCreate mocks base method
func (m *MockProxyrCbServer) ProxyrCbCreate(arg0 context.Context, arg1 *ProxyrCbRequestMsg) (*ProxyrCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyrCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*ProxyrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbCreate indicates an expected call of ProxyrCbCreate
func (mr *MockProxyrCbServerMockRecorder) ProxyrCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbCreate", reflect.TypeOf((*MockProxyrCbServer)(nil).ProxyrCbCreate), arg0, arg1)
}

// ProxyrCbUpdate mocks base method
func (m *MockProxyrCbServer) ProxyrCbUpdate(arg0 context.Context, arg1 *ProxyrCbRequestMsg) (*ProxyrCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyrCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*ProxyrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbUpdate indicates an expected call of ProxyrCbUpdate
func (mr *MockProxyrCbServerMockRecorder) ProxyrCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbUpdate", reflect.TypeOf((*MockProxyrCbServer)(nil).ProxyrCbUpdate), arg0, arg1)
}

// ProxyrCbDelete mocks base method
func (m *MockProxyrCbServer) ProxyrCbDelete(arg0 context.Context, arg1 *ProxyrCbDeleteRequestMsg) (*ProxyrCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyrCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*ProxyrCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbDelete indicates an expected call of ProxyrCbDelete
func (mr *MockProxyrCbServerMockRecorder) ProxyrCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbDelete", reflect.TypeOf((*MockProxyrCbServer)(nil).ProxyrCbDelete), arg0, arg1)
}

// ProxyrCbGet mocks base method
func (m *MockProxyrCbServer) ProxyrCbGet(arg0 context.Context, arg1 *ProxyrCbGetRequestMsg) (*ProxyrCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyrCbGet", arg0, arg1)
	ret0, _ := ret[0].(*ProxyrCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbGet indicates an expected call of ProxyrCbGet
func (mr *MockProxyrCbServerMockRecorder) ProxyrCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbGet", reflect.TypeOf((*MockProxyrCbServer)(nil).ProxyrCbGet), arg0, arg1)
}
