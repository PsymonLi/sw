// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/tls_proxy_cb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TlsCbKeyHandle is used to operate on a tlscb either by its key or handle
type TlsCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TlsCbKeyHandle_TlscbId
	//	*TlsCbKeyHandle_TlscbHandle
	KeyOrHandle isTlsCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TlsCbKeyHandle) Reset()                    { *m = TlsCbKeyHandle{} }
func (m *TlsCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TlsCbKeyHandle) ProtoMessage()               {}
func (*TlsCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{0} }

type isTlsCbKeyHandle_KeyOrHandle interface {
	isTlsCbKeyHandle_KeyOrHandle()
}

type TlsCbKeyHandle_TlscbId struct {
	TlscbId uint32 `protobuf:"varint,1,opt,name=tlscb_id,json=tlscbId,oneof"`
}
type TlsCbKeyHandle_TlscbHandle struct {
	TlscbHandle uint64 `protobuf:"fixed64,2,opt,name=tlscb_handle,json=tlscbHandle,oneof"`
}

func (*TlsCbKeyHandle_TlscbId) isTlsCbKeyHandle_KeyOrHandle()     {}
func (*TlsCbKeyHandle_TlscbHandle) isTlsCbKeyHandle_KeyOrHandle() {}

func (m *TlsCbKeyHandle) GetKeyOrHandle() isTlsCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsCbKeyHandle) GetTlscbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TlsCbKeyHandle_TlscbId); ok {
		return x.TlscbId
	}
	return 0
}

func (m *TlsCbKeyHandle) GetTlscbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TlsCbKeyHandle_TlscbHandle); ok {
		return x.TlscbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TlsCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TlsCbKeyHandle_OneofMarshaler, _TlsCbKeyHandle_OneofUnmarshaler, _TlsCbKeyHandle_OneofSizer, []interface{}{
		(*TlsCbKeyHandle_TlscbId)(nil),
		(*TlsCbKeyHandle_TlscbHandle)(nil),
	}
}

func _TlsCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TlsCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsCbKeyHandle_TlscbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TlscbId))
	case *TlsCbKeyHandle_TlscbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TlscbHandle))
	case nil:
	default:
		return fmt.Errorf("TlsCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TlsCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TlsCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tlscb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TlsCbKeyHandle_TlscbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tlscb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TlsCbKeyHandle_TlscbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TlsCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TlsCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsCbKeyHandle_TlscbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TlscbId))
	case *TlsCbKeyHandle_TlscbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TlsCbSpec captures all the tlscb level configuration
type TlsCbSpec struct {
	Meta                    *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *TlsCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	NicDecHead              uint32          `protobuf:"varint,3,opt,name=nic_dec_head,json=nicDecHead" json:"nic_dec_head,omitempty"`
	NicDecTail              uint32          `protobuf:"varint,4,opt,name=nic_dec_tail,json=nicDecTail" json:"nic_dec_tail,omitempty"`
	Command                 uint32          `protobuf:"varint,5,opt,name=command" json:"command,omitempty"`
	DebugDol                uint32          `protobuf:"varint,6,opt,name=debug_dol,json=debugDol" json:"debug_dol,omitempty"`
	SerqPi                  uint32          `protobuf:"varint,7,opt,name=serq_pi,json=serqPi" json:"serq_pi,omitempty"`
	SerqCi                  uint32          `protobuf:"varint,8,opt,name=serq_ci,json=serqCi" json:"serq_ci,omitempty"`
	BsqPi                   uint32          `protobuf:"varint,9,opt,name=bsq_pi,json=bsqPi" json:"bsq_pi,omitempty"`
	BsqCi                   uint32          `protobuf:"varint,10,opt,name=bsq_ci,json=bsqCi" json:"bsq_ci,omitempty"`
	CryptoKeyIdx            uint32          `protobuf:"varint,11,opt,name=crypto_key_idx,json=cryptoKeyIdx" json:"crypto_key_idx,omitempty"`
	SerqBase                uint32          `protobuf:"varint,12,opt,name=serq_base,json=serqBase" json:"serq_base,omitempty"`
	SesqBase                uint32          `protobuf:"varint,13,opt,name=sesq_base,json=sesqBase" json:"sesq_base,omitempty"`
	TnmdrAlloc              uint64          `protobuf:"fixed64,14,opt,name=tnmdr_alloc,json=tnmdrAlloc" json:"tnmdr_alloc,omitempty"`
	TnmprAlloc              uint64          `protobuf:"fixed64,15,opt,name=tnmpr_alloc,json=tnmprAlloc" json:"tnmpr_alloc,omitempty"`
	RnmdrFree               uint64          `protobuf:"fixed64,16,opt,name=rnmdr_free,json=rnmdrFree" json:"rnmdr_free,omitempty"`
	RnmprFree               uint64          `protobuf:"fixed64,17,opt,name=rnmpr_free,json=rnmprFree" json:"rnmpr_free,omitempty"`
	EncRequests             uint64          `protobuf:"fixed64,18,opt,name=enc_requests,json=encRequests" json:"enc_requests,omitempty"`
	EncCompletions          uint64          `protobuf:"fixed64,19,opt,name=enc_completions,json=encCompletions" json:"enc_completions,omitempty"`
	EncFailures             uint64          `protobuf:"fixed64,20,opt,name=enc_failures,json=encFailures" json:"enc_failures,omitempty"`
	DecRequests             uint64          `protobuf:"fixed64,21,opt,name=dec_requests,json=decRequests" json:"dec_requests,omitempty"`
	DecCompletions          uint64          `protobuf:"fixed64,22,opt,name=dec_completions,json=decCompletions" json:"dec_completions,omitempty"`
	DecFailures             uint64          `protobuf:"fixed64,23,opt,name=dec_failures,json=decFailures" json:"dec_failures,omitempty"`
	Salt                    uint32          `protobuf:"varint,24,opt,name=salt" json:"salt,omitempty"`
	ExplicitIv              uint64          `protobuf:"varint,25,opt,name=explicit_iv,json=explicitIv" json:"explicit_iv,omitempty"`
	PreDebugStage0_7Thread  uint32          `protobuf:"varint,26,opt,name=pre_debug_stage0_7_thread,json=preDebugStage07Thread" json:"pre_debug_stage0_7_thread,omitempty"`
	PostDebugStage0_7Thread uint32          `protobuf:"varint,27,opt,name=post_debug_stage0_7_thread,json=postDebugStage07Thread" json:"post_debug_stage0_7_thread,omitempty"`
	IsDecryptFlow           bool            `protobuf:"varint,28,opt,name=is_decrypt_flow,json=isDecryptFlow" json:"is_decrypt_flow,omitempty"`
	OtherFid                uint32          `protobuf:"varint,29,opt,name=other_fid,json=otherFid" json:"other_fid,omitempty"`
}

func (m *TlsCbSpec) Reset()                    { *m = TlsCbSpec{} }
func (m *TlsCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TlsCbSpec) ProtoMessage()               {}
func (*TlsCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{1} }

func (m *TlsCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TlsCbSpec) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsCbSpec) GetNicDecHead() uint32 {
	if m != nil {
		return m.NicDecHead
	}
	return 0
}

func (m *TlsCbSpec) GetNicDecTail() uint32 {
	if m != nil {
		return m.NicDecTail
	}
	return 0
}

func (m *TlsCbSpec) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *TlsCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TlsCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TlsCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

func (m *TlsCbSpec) GetBsqPi() uint32 {
	if m != nil {
		return m.BsqPi
	}
	return 0
}

func (m *TlsCbSpec) GetBsqCi() uint32 {
	if m != nil {
		return m.BsqCi
	}
	return 0
}

func (m *TlsCbSpec) GetCryptoKeyIdx() uint32 {
	if m != nil {
		return m.CryptoKeyIdx
	}
	return 0
}

func (m *TlsCbSpec) GetSerqBase() uint32 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TlsCbSpec) GetSesqBase() uint32 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TlsCbSpec) GetTnmdrAlloc() uint64 {
	if m != nil {
		return m.TnmdrAlloc
	}
	return 0
}

func (m *TlsCbSpec) GetTnmprAlloc() uint64 {
	if m != nil {
		return m.TnmprAlloc
	}
	return 0
}

func (m *TlsCbSpec) GetRnmdrFree() uint64 {
	if m != nil {
		return m.RnmdrFree
	}
	return 0
}

func (m *TlsCbSpec) GetRnmprFree() uint64 {
	if m != nil {
		return m.RnmprFree
	}
	return 0
}

func (m *TlsCbSpec) GetEncRequests() uint64 {
	if m != nil {
		return m.EncRequests
	}
	return 0
}

func (m *TlsCbSpec) GetEncCompletions() uint64 {
	if m != nil {
		return m.EncCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetEncFailures() uint64 {
	if m != nil {
		return m.EncFailures
	}
	return 0
}

func (m *TlsCbSpec) GetDecRequests() uint64 {
	if m != nil {
		return m.DecRequests
	}
	return 0
}

func (m *TlsCbSpec) GetDecCompletions() uint64 {
	if m != nil {
		return m.DecCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetDecFailures() uint64 {
	if m != nil {
		return m.DecFailures
	}
	return 0
}

func (m *TlsCbSpec) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *TlsCbSpec) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *TlsCbSpec) GetPreDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PreDebugStage0_7Thread
	}
	return 0
}

func (m *TlsCbSpec) GetPostDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PostDebugStage0_7Thread
	}
	return 0
}

func (m *TlsCbSpec) GetIsDecryptFlow() bool {
	if m != nil {
		return m.IsDecryptFlow
	}
	return false
}

func (m *TlsCbSpec) GetOtherFid() uint32 {
	if m != nil {
		return m.OtherFid
	}
	return 0
}

// TlsCbRequestMsg is batched add or modify tlscb request
type TlsCbRequestMsg struct {
	Request []*TlsCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbRequestMsg) Reset()                    { *m = TlsCbRequestMsg{} }
func (m *TlsCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbRequestMsg) ProtoMessage()               {}
func (*TlsCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{2} }

func (m *TlsCbRequestMsg) GetRequest() []*TlsCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbStatus is the operational status of a given tlscb
type TlsCbStatus struct {
	TlscbHandle uint64 `protobuf:"fixed64,1,opt,name=tlscb_handle,json=tlscbHandle" json:"tlscb_handle,omitempty"`
}

func (m *TlsCbStatus) Reset()                    { *m = TlsCbStatus{} }
func (m *TlsCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TlsCbStatus) ProtoMessage()               {}
func (*TlsCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{3} }

func (m *TlsCbStatus) GetTlscbHandle() uint64 {
	if m != nil {
		return m.TlscbHandle
	}
	return 0
}

// TlsCbResponse is response to TlsCbSpec
type TlsCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	TlscbStatus *TlsCbStatus `protobuf:"bytes,2,opt,name=tlscb_status,json=tlscbStatus" json:"tlscb_status,omitempty"`
}

func (m *TlsCbResponse) Reset()                    { *m = TlsCbResponse{} }
func (m *TlsCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TlsCbResponse) ProtoMessage()               {}
func (*TlsCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{4} }

func (m *TlsCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsCbResponse) GetTlscbStatus() *TlsCbStatus {
	if m != nil {
		return m.TlscbStatus
	}
	return nil
}

// TlsCbResponseMsg is batched response to TlsCbRequestMsg
type TlsCbResponseMsg struct {
	Response []*TlsCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsCbResponseMsg) Reset()                    { *m = TlsCbResponseMsg{} }
func (m *TlsCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbResponseMsg) ProtoMessage()               {}
func (*TlsCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{5} }

func (m *TlsCbResponseMsg) GetResponse() []*TlsCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TlsCbDeleteRequest is used to delete a tlscb
type TlsCbDeleteRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *TlsCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsCbDeleteRequest) Reset()                    { *m = TlsCbDeleteRequest{} }
func (m *TlsCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteRequest) ProtoMessage()               {}
func (*TlsCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{6} }

func (m *TlsCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TlsCbDeleteRequest) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsCbDeleteRequestMsg is used to delete a batch of tlscbs
type TlsCbDeleteRequestMsg struct {
	Request []*TlsCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbDeleteRequestMsg) Reset()                    { *m = TlsCbDeleteRequestMsg{} }
func (m *TlsCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteRequestMsg) ProtoMessage()               {}
func (*TlsCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{7} }

func (m *TlsCbDeleteRequestMsg) GetRequest() []*TlsCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbDeleteResponseMsg is batched response to TlsCbDeleteRequestMsg
type TlsCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TlsCbDeleteResponseMsg) Reset()                    { *m = TlsCbDeleteResponseMsg{} }
func (m *TlsCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteResponseMsg) ProtoMessage()               {}
func (*TlsCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{8} }

func (m *TlsCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TlsCbGetRequest is used to get information about a tlscb
type TlsCbGetRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *TlsCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsCbGetRequest) Reset()                    { *m = TlsCbGetRequest{} }
func (m *TlsCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetRequest) ProtoMessage()               {}
func (*TlsCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{9} }

func (m *TlsCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TlsCbGetRequest) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsCbGetRequestMsg is batched GET requests for tlscbs
type TlsCbGetRequestMsg struct {
	Request []*TlsCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbGetRequestMsg) Reset()                    { *m = TlsCbGetRequestMsg{} }
func (m *TlsCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetRequestMsg) ProtoMessage()               {}
func (*TlsCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{10} }

func (m *TlsCbGetRequestMsg) GetRequest() []*TlsCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbStats is the statistics object for each tlscb
type TlsCbStats struct {
}

func (m *TlsCbStats) Reset()                    { *m = TlsCbStats{} }
func (m *TlsCbStats) String() string            { return proto.CompactTextString(m) }
func (*TlsCbStats) ProtoMessage()               {}
func (*TlsCbStats) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{11} }

// TlsCbGetResponse captures all the information about a tlscb
// only if api_status indicates success, other fields are valid
type TlsCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TlsCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TlsCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TlsCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TlsCbGetResponse) Reset()                    { *m = TlsCbGetResponse{} }
func (m *TlsCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetResponse) ProtoMessage()               {}
func (*TlsCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{12} }

func (m *TlsCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsCbGetResponse) GetSpec() *TlsCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TlsCbGetResponse) GetStatus() *TlsCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TlsCbGetResponse) GetStats() *TlsCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TlsCbGetResponseMsg is batched response to TlsCbGetRequestMsg
type TlsCbGetResponseMsg struct {
	Response []*TlsCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsCbGetResponseMsg) Reset()                    { *m = TlsCbGetResponseMsg{} }
func (m *TlsCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetResponseMsg) ProtoMessage()               {}
func (*TlsCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor22, []int{13} }

func (m *TlsCbGetResponseMsg) GetResponse() []*TlsCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*TlsCbKeyHandle)(nil), "tlscb.TlsCbKeyHandle")
	proto.RegisterType((*TlsCbSpec)(nil), "tlscb.TlsCbSpec")
	proto.RegisterType((*TlsCbRequestMsg)(nil), "tlscb.TlsCbRequestMsg")
	proto.RegisterType((*TlsCbStatus)(nil), "tlscb.TlsCbStatus")
	proto.RegisterType((*TlsCbResponse)(nil), "tlscb.TlsCbResponse")
	proto.RegisterType((*TlsCbResponseMsg)(nil), "tlscb.TlsCbResponseMsg")
	proto.RegisterType((*TlsCbDeleteRequest)(nil), "tlscb.TlsCbDeleteRequest")
	proto.RegisterType((*TlsCbDeleteRequestMsg)(nil), "tlscb.TlsCbDeleteRequestMsg")
	proto.RegisterType((*TlsCbDeleteResponseMsg)(nil), "tlscb.TlsCbDeleteResponseMsg")
	proto.RegisterType((*TlsCbGetRequest)(nil), "tlscb.TlsCbGetRequest")
	proto.RegisterType((*TlsCbGetRequestMsg)(nil), "tlscb.TlsCbGetRequestMsg")
	proto.RegisterType((*TlsCbStats)(nil), "tlscb.TlsCbStats")
	proto.RegisterType((*TlsCbGetResponse)(nil), "tlscb.TlsCbGetResponse")
	proto.RegisterType((*TlsCbGetResponseMsg)(nil), "tlscb.TlsCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TlsCb service

type TlsCbClient interface {
	TlsCbCreate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error)
	TlsCbUpdate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error)
	TlsCbDelete(ctx context.Context, in *TlsCbDeleteRequestMsg, opts ...grpc.CallOption) (*TlsCbDeleteResponseMsg, error)
	TlsCbGet(ctx context.Context, in *TlsCbGetRequestMsg, opts ...grpc.CallOption) (*TlsCbGetResponseMsg, error)
}

type tlsCbClient struct {
	cc *grpc.ClientConn
}

func NewTlsCbClient(cc *grpc.ClientConn) TlsCbClient {
	return &tlsCbClient{cc}
}

func (c *tlsCbClient) TlsCbCreate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error) {
	out := new(TlsCbResponseMsg)
	err := grpc.Invoke(ctx, "/tlscb.TlsCb/TlsCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlsCbClient) TlsCbUpdate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error) {
	out := new(TlsCbResponseMsg)
	err := grpc.Invoke(ctx, "/tlscb.TlsCb/TlsCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlsCbClient) TlsCbDelete(ctx context.Context, in *TlsCbDeleteRequestMsg, opts ...grpc.CallOption) (*TlsCbDeleteResponseMsg, error) {
	out := new(TlsCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/tlscb.TlsCb/TlsCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlsCbClient) TlsCbGet(ctx context.Context, in *TlsCbGetRequestMsg, opts ...grpc.CallOption) (*TlsCbGetResponseMsg, error) {
	out := new(TlsCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/tlscb.TlsCb/TlsCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TlsCb service

type TlsCbServer interface {
	TlsCbCreate(context.Context, *TlsCbRequestMsg) (*TlsCbResponseMsg, error)
	TlsCbUpdate(context.Context, *TlsCbRequestMsg) (*TlsCbResponseMsg, error)
	TlsCbDelete(context.Context, *TlsCbDeleteRequestMsg) (*TlsCbDeleteResponseMsg, error)
	TlsCbGet(context.Context, *TlsCbGetRequestMsg) (*TlsCbGetResponseMsg, error)
}

func RegisterTlsCbServer(s *grpc.Server, srv TlsCbServer) {
	s.RegisterService(&_TlsCb_serviceDesc, srv)
}

func _TlsCb_TlsCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlsCbServer).TlsCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tlscb.TlsCb/TlsCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlsCbServer).TlsCbCreate(ctx, req.(*TlsCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TlsCb_TlsCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlsCbServer).TlsCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tlscb.TlsCb/TlsCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlsCbServer).TlsCbUpdate(ctx, req.(*TlsCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TlsCb_TlsCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlsCbServer).TlsCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tlscb.TlsCb/TlsCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlsCbServer).TlsCbDelete(ctx, req.(*TlsCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TlsCb_TlsCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlsCbServer).TlsCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tlscb.TlsCb/TlsCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlsCbServer).TlsCbGet(ctx, req.(*TlsCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _TlsCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tlscb.TlsCb",
	HandlerType: (*TlsCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TlsCbCreate",
			Handler:    _TlsCb_TlsCbCreate_Handler,
		},
		{
			MethodName: "TlsCbUpdate",
			Handler:    _TlsCb_TlsCbUpdate_Handler,
		},
		{
			MethodName: "TlsCbDelete",
			Handler:    _TlsCb_TlsCbDelete_Handler,
		},
		{
			MethodName: "TlsCbGet",
			Handler:    _TlsCb_TlsCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/tls_proxy_cb.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/tls_proxy_cb.proto", fileDescriptor22) }

var fileDescriptor22 = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x5d, 0x4f, 0x1b, 0x47,
	0x14, 0xc5, 0x01, 0x6c, 0x73, 0x6d, 0x3e, 0x32, 0x89, 0x61, 0x80, 0xa0, 0xba, 0xdb, 0xb4, 0x41,
	0x79, 0x00, 0x44, 0x54, 0xa5, 0xad, 0x54, 0xa9, 0xc1, 0x96, 0x0b, 0x4d, 0x50, 0xaa, 0x0d, 0x7d,
	0xe9, 0xcb, 0x6a, 0x3d, 0x7b, 0xc1, 0xd3, 0xac, 0x77, 0x37, 0x3b, 0x63, 0xc0, 0x7f, 0xa6, 0x3f,
	0xa5, 0x3f, 0xab, 0xcf, 0xd5, 0xdc, 0x99, 0x5d, 0x7f, 0x00, 0xaa, 0x14, 0xa9, 0x7d, 0x62, 0xe7,
	0x9c, 0x33, 0xe7, 0xcc, 0xdc, 0xb9, 0x33, 0x18, 0xda, 0x89, 0x14, 0x87, 0x59, 0x9e, 0xea, 0xf4,
	0x70, 0x10, 0xc6, 0x87, 0x3a, 0x56, 0x41, 0x96, 0xa7, 0xb7, 0xe3, 0x40, 0xf4, 0x0f, 0x08, 0x66,
	0xcb, 0x3a, 0x56, 0xa2, 0xbf, 0xd3, 0x9a, 0x08, 0xf5, 0x38, 0x43, 0x65, 0x59, 0x4f, 0xc0, 0xda,
	0x45, 0xac, 0x3a, 0xfd, 0xb7, 0x38, 0x3e, 0x0d, 0x93, 0x28, 0x46, 0xb6, 0x0b, 0x75, 0x9a, 0x11,
	0xc8, 0x88, 0x57, 0xda, 0x95, 0xfd, 0xd5, 0xd3, 0x05, 0xbf, 0x46, 0xc8, 0x59, 0xc4, 0xbe, 0x82,
	0xa6, 0x25, 0x07, 0x24, 0xe6, 0x8f, 0xda, 0x95, 0xfd, 0xea, 0xe9, 0x82, 0xdf, 0x20, 0xd4, 0x3a,
	0x9c, 0xac, 0xc3, 0xea, 0x47, 0x1c, 0x07, 0x69, 0xee, 0x54, 0xde, 0xdf, 0x35, 0x58, 0xa1, 0x94,
	0x0f, 0x19, 0x0a, 0xf6, 0x35, 0x2c, 0x0d, 0x51, 0x87, 0x64, 0xde, 0x38, 0x7e, 0x7c, 0x60, 0x97,
	0xf3, 0xbe, 0xff, 0x07, 0x0a, 0x7d, 0x8e, 0x3a, 0xf4, 0x89, 0x66, 0xdf, 0xcf, 0xb9, 0x50, 0x56,
	0xe3, 0xb8, 0x75, 0x40, 0x51, 0x07, 0xb3, 0xab, 0xf6, 0x1b, 0x1f, 0x71, 0xfc, 0x3e, 0x77, 0x5b,
	0x68, 0x43, 0x33, 0x91, 0x22, 0x88, 0x50, 0x04, 0x03, 0x0c, 0x23, 0xbe, 0x68, 0xb6, 0xe1, 0x43,
	0x22, 0x45, 0x17, 0xc5, 0x29, 0x86, 0xd1, 0xb4, 0x42, 0x87, 0x32, 0xe6, 0x4b, 0xd3, 0x8a, 0x8b,
	0x50, 0xc6, 0x8c, 0x43, 0x4d, 0xa4, 0xc3, 0x61, 0x98, 0x44, 0x7c, 0x99, 0xc8, 0x62, 0xc8, 0x76,
	0x61, 0x25, 0xc2, 0xfe, 0xe8, 0x2a, 0x88, 0xd2, 0x98, 0x57, 0x89, 0xab, 0x13, 0xd0, 0x4d, 0x63,
	0xb6, 0x05, 0x35, 0x85, 0xf9, 0xa7, 0x20, 0x93, 0xbc, 0x46, 0x54, 0xd5, 0x0c, 0x7f, 0x95, 0x25,
	0x21, 0x24, 0xaf, 0x4f, 0x88, 0x8e, 0x64, 0x2d, 0xa8, 0xf6, 0x15, 0x4d, 0x58, 0x21, 0x7c, 0xb9,
	0xaf, 0x8c, 0xde, 0xc1, 0x42, 0x72, 0x28, 0xe1, 0x8e, 0x64, 0xcf, 0x61, 0x4d, 0xe4, 0xe3, 0x4c,
	0xa7, 0x81, 0x29, 0x8e, 0x8c, 0x6e, 0x79, 0x83, 0xe8, 0xa6, 0x45, 0xdf, 0xe2, 0xf8, 0x2c, 0xba,
	0x35, 0x4b, 0xa4, 0xb0, 0x7e, 0xa8, 0x90, 0x37, 0xed, 0x12, 0x0d, 0x70, 0x12, 0x2a, 0xb4, 0xa4,
	0x72, 0xe4, 0x6a, 0x41, 0x2a, 0x4b, 0x7e, 0x01, 0x0d, 0x9d, 0x0c, 0xa3, 0x3c, 0x08, 0xe3, 0x38,
	0x15, 0x7c, 0xcd, 0x9c, 0xaf, 0x0f, 0x04, 0xbd, 0x31, 0x88, 0x13, 0x64, 0x85, 0x60, 0xbd, 0x14,
	0x64, 0x4e, 0xb0, 0x07, 0x90, 0x93, 0xc3, 0x65, 0x8e, 0xc8, 0x37, 0x88, 0x5f, 0x21, 0xa4, 0x97,
	0x23, 0x3a, 0x3a, 0x73, 0xf4, 0xe3, 0x92, 0xce, 0x2c, 0xfd, 0x25, 0x34, 0x31, 0x11, 0x41, 0x8e,
	0x9f, 0x46, 0xa8, 0xb4, 0xe2, 0x8c, 0x04, 0x0d, 0x4c, 0x84, 0xef, 0x20, 0xf6, 0x02, 0xd6, 0x8d,
	0x44, 0xa4, 0xc3, 0x2c, 0x46, 0x2d, 0xd3, 0x44, 0xf1, 0x27, 0xa4, 0x5a, 0xc3, 0x44, 0x74, 0x26,
	0x68, 0xe1, 0x75, 0x19, 0xca, 0x78, 0x94, 0xa3, 0xe2, 0x4f, 0x4b, 0xaf, 0x9e, 0x83, 0x8c, 0xc4,
	0xf4, 0x40, 0x19, 0xd7, 0xb2, 0x92, 0x08, 0x67, 0xe2, 0x8c, 0x64, 0x3a, 0x6e, 0xd3, 0xc6, 0x45,
	0x38, 0x1f, 0x67, 0x84, 0x65, 0xdc, 0x56, 0xe9, 0x55, 0xc6, 0x31, 0x58, 0x52, 0x61, 0xac, 0x39,
	0xa7, 0xaa, 0xd3, 0xb7, 0x29, 0x28, 0xde, 0x66, 0xb1, 0x14, 0x52, 0x07, 0xf2, 0x9a, 0x6f, 0xb7,
	0x2b, 0xfb, 0x4b, 0x3e, 0x14, 0xd0, 0xd9, 0x35, 0xfb, 0x0e, 0xb6, 0xb3, 0x1c, 0x03, 0xdb, 0x73,
	0x4a, 0x87, 0x57, 0x78, 0x14, 0xbc, 0x0e, 0xf4, 0x20, 0x37, 0xad, 0xbd, 0x43, 0x4e, 0xad, 0x2c,
	0xc7, 0xae, 0xe1, 0x3f, 0x10, 0xfd, 0xfa, 0x82, 0x48, 0xf6, 0x03, 0xec, 0x64, 0xa9, 0xd2, 0x0f,
	0x4c, 0xdd, 0xa5, 0xa9, 0x9b, 0x46, 0x71, 0xcf, 0xdc, 0x6f, 0x60, 0x5d, 0x2a, 0x73, 0x41, 0x4c,
	0x5f, 0x05, 0x97, 0x71, 0x7a, 0xc3, 0x9f, 0xb5, 0x2b, 0xfb, 0x75, 0x7f, 0x55, 0xaa, 0xae, 0x45,
	0x7b, 0x71, 0x7a, 0x63, 0xba, 0x29, 0xd5, 0x03, 0xcc, 0x83, 0x4b, 0x19, 0xf1, 0x3d, 0xdb, 0x4d,
	0x04, 0xf4, 0x64, 0xe4, 0xfd, 0x08, 0xeb, 0x74, 0x4f, 0x5d, 0x31, 0xcf, 0xd5, 0x15, 0x7b, 0x09,
	0x35, 0x57, 0x6d, 0x5e, 0x69, 0x2f, 0xee, 0x37, 0x8e, 0x37, 0xa6, 0x2f, 0xb4, 0x79, 0x20, 0xfc,
	0x42, 0xe0, 0x1d, 0x41, 0xc3, 0xa2, 0x3a, 0xd4, 0x23, 0x2a, 0xf0, 0xcc, 0xe3, 0x53, 0xb1, 0x05,
	0x9e, 0x7a, 0x7a, 0xbc, 0x1b, 0x58, 0x75, 0x81, 0x2a, 0x4b, 0x13, 0x85, 0xec, 0x10, 0x20, 0xcc,
	0xa4, 0xd9, 0xbb, 0x1e, 0x29, 0x9a, 0xb1, 0x66, 0x12, 0xe9, 0xc9, 0x79, 0x93, 0x49, 0xeb, 0xec,
	0xaf, 0x84, 0xc5, 0x27, 0xfb, 0xb6, 0x08, 0x71, 0x53, 0xec, 0xab, 0xc3, 0x66, 0x16, 0x69, 0x27,
	0xd9, 0x60, 0x3b, 0xf0, 0xba, 0xb0, 0x31, 0x13, 0x6c, 0xb6, 0x7a, 0x04, 0xf5, 0xdc, 0x0d, 0xdd,
	0x5e, 0x9f, 0x4e, 0xdb, 0x14, 0x52, 0xbf, 0x54, 0x79, 0xd7, 0xc0, 0x88, 0xea, 0x62, 0x8c, 0x1a,
	0x5d, 0xd5, 0xfe, 0xfb, 0x07, 0xd3, 0x7b, 0x07, 0xad, 0xbb, 0xb9, 0x66, 0x0b, 0xaf, 0xe6, 0x4f,
	0x6b, 0x7b, 0xda, 0x6d, 0x46, 0x3e, 0x39, 0xb6, 0x33, 0xd8, 0x9c, 0xa1, 0x27, 0x15, 0x99, 0x3f,
	0x8d, 0xc5, 0x7f, 0x39, 0x0d, 0x4f, 0xb9, 0x06, 0xfa, 0x19, 0xf5, 0xff, 0x57, 0x8d, 0x9e, 0x3b,
	0x85, 0x49, 0xa8, 0x3d, 0xcd, 0xb9, 0x52, 0x6c, 0x4e, 0x5b, 0x4d, 0xb4, 0x93, 0x3a, 0x34, 0x01,
	0xca, 0x7e, 0x51, 0xde, 0x5f, 0x15, 0xd7, 0x22, 0x24, 0xfd, 0xdc, 0xf6, 0x7c, 0x0e, 0x4b, 0x2a,
	0x43, 0xe1, 0x76, 0x73, 0xf7, 0xee, 0x10, 0xcb, 0x5e, 0x42, 0xd5, 0x59, 0x2e, 0x3e, 0xd8, 0xbe,
	0x4e, 0xc1, 0x5e, 0xc0, 0xb2, 0xf9, 0x52, 0xf4, 0x3f, 0x90, 0x0a, 0x3a, 0x2b, 0x55, 0xbe, 0xe5,
	0xbd, 0x5f, 0xe0, 0xc9, 0xfc, 0xfa, 0x6d, 0x8b, 0xcc, 0x77, 0xf9, 0xd6, 0x9d, 0xc2, 0xcc, 0x37,
	0xfa, 0xf1, 0x9f, 0x8f, 0x60, 0x99, 0x68, 0xf6, 0x93, 0xbb, 0xe3, 0x9d, 0x1c, 0x43, 0x8d, 0x6c,
	0x73, 0xf6, 0x86, 0x14, 0xd5, 0xdf, 0xd9, 0xba, 0xef, 0xe6, 0x9c, 0xab, 0x2b, 0x6f, 0xa1, 0x74,
	0xf8, 0x2d, 0x8b, 0x3e, 0xd3, 0xe1, 0x9d, 0x73, 0xb0, 0x0d, 0xcb, 0x9e, 0x3d, 0xd8, 0xe3, 0xc6,
	0x67, 0xef, 0x3e, 0x76, 0xda, 0xad, 0x03, 0xf5, 0x62, 0xe7, 0x6c, 0xfb, 0xfe, 0x1e, 0x31, 0x3e,
	0x3b, 0x0f, 0x54, 0x89, 0x4c, 0x4e, 0xe0, 0xf7, 0xfa, 0x20, 0x8c, 0xe9, 0x37, 0x5a, 0xbf, 0x4a,
	0x7f, 0x5e, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x01, 0x13, 0x99, 0x5f, 0xec, 0x09, 0x00, 0x00,
}
