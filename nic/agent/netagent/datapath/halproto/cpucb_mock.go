// Code generated by MockGen. DO NOT EDIT.
// Source: cpucb.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisCpuCbKeyHandle_KeyOrHandle is a mock of isCpuCbKeyHandle_KeyOrHandle interface
type MockisCpuCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisCpuCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisCpuCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisCpuCbKeyHandle_KeyOrHandle
type MockisCpuCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisCpuCbKeyHandle_KeyOrHandle
}

// NewMockisCpuCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisCpuCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisCpuCbKeyHandle_KeyOrHandle {
	mock := &MockisCpuCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisCpuCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCpuCbKeyHandle_KeyOrHandle) EXPECT() *MockisCpuCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isCpuCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisCpuCbKeyHandle_KeyOrHandle) isCpuCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isCpuCbKeyHandle_KeyOrHandle")
}

// isCpuCbKeyHandle_KeyOrHandle indicates an expected call of isCpuCbKeyHandle_KeyOrHandle
func (mr *MockisCpuCbKeyHandle_KeyOrHandleMockRecorder) isCpuCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCpuCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisCpuCbKeyHandle_KeyOrHandle)(nil).isCpuCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisCpuCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCpuCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCpuCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCpuCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCpuCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCpuCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockCpuCbClient is a mock of CpuCbClient interface
type MockCpuCbClient struct {
	ctrl     *gomock.Controller
	recorder *MockCpuCbClientMockRecorder
}

// MockCpuCbClientMockRecorder is the mock recorder for MockCpuCbClient
type MockCpuCbClientMockRecorder struct {
	mock *MockCpuCbClient
}

// NewMockCpuCbClient creates a new mock instance
func NewMockCpuCbClient(ctrl *gomock.Controller) *MockCpuCbClient {
	mock := &MockCpuCbClient{ctrl: ctrl}
	mock.recorder = &MockCpuCbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCpuCbClient) EXPECT() *MockCpuCbClientMockRecorder {
	return m.recorder
}

// CpuCbCreate mocks base method
func (m *MockCpuCbClient) CpuCbCreate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CpuCbCreate", varargs...)
	ret0, _ := ret[0].(*CpuCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CpuCbCreate indicates an expected call of CpuCbCreate
func (mr *MockCpuCbClientMockRecorder) CpuCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpuCbCreate", reflect.TypeOf((*MockCpuCbClient)(nil).CpuCbCreate), varargs...)
}

// CpuCbUpdate mocks base method
func (m *MockCpuCbClient) CpuCbUpdate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CpuCbUpdate", varargs...)
	ret0, _ := ret[0].(*CpuCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CpuCbUpdate indicates an expected call of CpuCbUpdate
func (mr *MockCpuCbClientMockRecorder) CpuCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpuCbUpdate", reflect.TypeOf((*MockCpuCbClient)(nil).CpuCbUpdate), varargs...)
}

// CpuCbDelete mocks base method
func (m *MockCpuCbClient) CpuCbDelete(ctx context.Context, in *CpuCbDeleteRequestMsg, opts ...grpc.CallOption) (*CpuCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CpuCbDelete", varargs...)
	ret0, _ := ret[0].(*CpuCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CpuCbDelete indicates an expected call of CpuCbDelete
func (mr *MockCpuCbClientMockRecorder) CpuCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpuCbDelete", reflect.TypeOf((*MockCpuCbClient)(nil).CpuCbDelete), varargs...)
}

// CpuCbGet mocks base method
func (m *MockCpuCbClient) CpuCbGet(ctx context.Context, in *CpuCbGetRequestMsg, opts ...grpc.CallOption) (*CpuCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CpuCbGet", varargs...)
	ret0, _ := ret[0].(*CpuCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CpuCbGet indicates an expected call of CpuCbGet
func (mr *MockCpuCbClientMockRecorder) CpuCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpuCbGet", reflect.TypeOf((*MockCpuCbClient)(nil).CpuCbGet), varargs...)
}

// MockCpuCbServer is a mock of CpuCbServer interface
type MockCpuCbServer struct {
	ctrl     *gomock.Controller
	recorder *MockCpuCbServerMockRecorder
}

// MockCpuCbServerMockRecorder is the mock recorder for MockCpuCbServer
type MockCpuCbServerMockRecorder struct {
	mock *MockCpuCbServer
}

// NewMockCpuCbServer creates a new mock instance
func NewMockCpuCbServer(ctrl *gomock.Controller) *MockCpuCbServer {
	mock := &MockCpuCbServer{ctrl: ctrl}
	mock.recorder = &MockCpuCbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCpuCbServer) EXPECT() *MockCpuCbServerMockRecorder {
	return m.recorder
}

// CpuCbCreate mocks base method
func (m *MockCpuCbServer) CpuCbCreate(arg0 context.Context, arg1 *CpuCbRequestMsg) (*CpuCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "CpuCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*CpuCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CpuCbCreate indicates an expected call of CpuCbCreate
func (mr *MockCpuCbServerMockRecorder) CpuCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpuCbCreate", reflect.TypeOf((*MockCpuCbServer)(nil).CpuCbCreate), arg0, arg1)
}

// CpuCbUpdate mocks base method
func (m *MockCpuCbServer) CpuCbUpdate(arg0 context.Context, arg1 *CpuCbRequestMsg) (*CpuCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "CpuCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*CpuCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CpuCbUpdate indicates an expected call of CpuCbUpdate
func (mr *MockCpuCbServerMockRecorder) CpuCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpuCbUpdate", reflect.TypeOf((*MockCpuCbServer)(nil).CpuCbUpdate), arg0, arg1)
}

// CpuCbDelete mocks base method
func (m *MockCpuCbServer) CpuCbDelete(arg0 context.Context, arg1 *CpuCbDeleteRequestMsg) (*CpuCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "CpuCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*CpuCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CpuCbDelete indicates an expected call of CpuCbDelete
func (mr *MockCpuCbServerMockRecorder) CpuCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpuCbDelete", reflect.TypeOf((*MockCpuCbServer)(nil).CpuCbDelete), arg0, arg1)
}

// CpuCbGet mocks base method
func (m *MockCpuCbServer) CpuCbGet(arg0 context.Context, arg1 *CpuCbGetRequestMsg) (*CpuCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "CpuCbGet", arg0, arg1)
	ret0, _ := ret[0].(*CpuCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CpuCbGet indicates an expected call of CpuCbGet
func (mr *MockCpuCbServerMockRecorder) CpuCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CpuCbGet", reflect.TypeOf((*MockCpuCbServer)(nil).CpuCbGet), arg0, arg1)
}
