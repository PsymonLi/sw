// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/rdma.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// types of interfaces
type RdmaServiceType int32

const (
	RdmaServiceType_RDMA_SERV_TYPE_RC     RdmaServiceType = 0
	RdmaServiceType_RDMA_SERV_TYPE_UC     RdmaServiceType = 1
	RdmaServiceType_RDMA_SERV_TYPE_RD     RdmaServiceType = 2
	RdmaServiceType_RDMA_SERV_TYPE_UD     RdmaServiceType = 3
	RdmaServiceType_RDMA_SERV_TYPE_CNP    RdmaServiceType = 4
	RdmaServiceType_RDMA_SERV_TYPE_XRC    RdmaServiceType = 5
	RdmaServiceType_RDMA_SERV_TYPE_VEND_1 RdmaServiceType = 6
	RdmaServiceType_RDMA_SERV_TYPE_VEND_2 RdmaServiceType = 7
)

var RdmaServiceType_name = map[int32]string{
	0: "RDMA_SERV_TYPE_RC",
	1: "RDMA_SERV_TYPE_UC",
	2: "RDMA_SERV_TYPE_RD",
	3: "RDMA_SERV_TYPE_UD",
	4: "RDMA_SERV_TYPE_CNP",
	5: "RDMA_SERV_TYPE_XRC",
	6: "RDMA_SERV_TYPE_VEND_1",
	7: "RDMA_SERV_TYPE_VEND_2",
}
var RdmaServiceType_value = map[string]int32{
	"RDMA_SERV_TYPE_RC":     0,
	"RDMA_SERV_TYPE_UC":     1,
	"RDMA_SERV_TYPE_RD":     2,
	"RDMA_SERV_TYPE_UD":     3,
	"RDMA_SERV_TYPE_CNP":    4,
	"RDMA_SERV_TYPE_XRC":    5,
	"RDMA_SERV_TYPE_VEND_1": 6,
	"RDMA_SERV_TYPE_VEND_2": 7,
}

func (x RdmaServiceType) String() string {
	return proto.EnumName(RdmaServiceType_name, int32(x))
}
func (RdmaServiceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

// **********************    Queue Pair  ********************************//
// RdmaQp object
type RdmaQpSpec struct {
	Meta          *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	QpNum         uint32          `protobuf:"varint,2,opt,name=qp_num,json=qpNum" json:"qp_num,omitempty"`
	HwLifId       uint32          `protobuf:"varint,3,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	SqWqeSize     uint32          `protobuf:"varint,4,opt,name=sq_wqe_size,json=sqWqeSize" json:"sq_wqe_size,omitempty"`
	RqWqeSize     uint32          `protobuf:"varint,5,opt,name=rq_wqe_size,json=rqWqeSize" json:"rq_wqe_size,omitempty"`
	NumSqWqes     uint32          `protobuf:"varint,6,opt,name=num_sq_wqes,json=numSqWqes" json:"num_sq_wqes,omitempty"`
	NumRqWqes     uint32          `protobuf:"varint,7,opt,name=num_rq_wqes,json=numRqWqes" json:"num_rq_wqes,omitempty"`
	NumRsqWqes    uint32          `protobuf:"varint,8,opt,name=num_rsq_wqes,json=numRsqWqes" json:"num_rsq_wqes,omitempty"`
	NumRrqWqes    uint32          `protobuf:"varint,9,opt,name=num_rrq_wqes,json=numRrqWqes" json:"num_rrq_wqes,omitempty"`
	Pd            uint32          `protobuf:"varint,10,opt,name=pd" json:"pd,omitempty"`
	Pmtu          uint32          `protobuf:"varint,11,opt,name=pmtu" json:"pmtu,omitempty"`
	HostmemPgSize uint32          `protobuf:"varint,12,opt,name=hostmem_pg_size,json=hostmemPgSize" json:"hostmem_pg_size,omitempty"`
	Svc           RdmaServiceType `protobuf:"varint,13,opt,name=svc,enum=rdma.RdmaServiceType" json:"svc,omitempty"`
	AtomicEnabled bool            `protobuf:"varint,14,opt,name=atomic_enabled,json=atomicEnabled" json:"atomic_enabled,omitempty"`
	SqLkey        uint32          `protobuf:"varint,15,opt,name=sq_lkey,json=sqLkey" json:"sq_lkey,omitempty"`
	RqLkey        uint32          `protobuf:"varint,16,opt,name=rq_lkey,json=rqLkey" json:"rq_lkey,omitempty"`
	RqCqNum       uint32          `protobuf:"varint,17,opt,name=rq_cq_num,json=rqCqNum" json:"rq_cq_num,omitempty"`
	SqCqNum       uint32          `protobuf:"varint,18,opt,name=sq_cq_num,json=sqCqNum" json:"sq_cq_num,omitempty"`
}

func (m *RdmaQpSpec) Reset()                    { *m = RdmaQpSpec{} }
func (m *RdmaQpSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpSpec) ProtoMessage()               {}
func (*RdmaQpSpec) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *RdmaQpSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RdmaQpSpec) GetQpNum() uint32 {
	if m != nil {
		return m.QpNum
	}
	return 0
}

func (m *RdmaQpSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaQpSpec) GetSqWqeSize() uint32 {
	if m != nil {
		return m.SqWqeSize
	}
	return 0
}

func (m *RdmaQpSpec) GetRqWqeSize() uint32 {
	if m != nil {
		return m.RqWqeSize
	}
	return 0
}

func (m *RdmaQpSpec) GetNumSqWqes() uint32 {
	if m != nil {
		return m.NumSqWqes
	}
	return 0
}

func (m *RdmaQpSpec) GetNumRqWqes() uint32 {
	if m != nil {
		return m.NumRqWqes
	}
	return 0
}

func (m *RdmaQpSpec) GetNumRsqWqes() uint32 {
	if m != nil {
		return m.NumRsqWqes
	}
	return 0
}

func (m *RdmaQpSpec) GetNumRrqWqes() uint32 {
	if m != nil {
		return m.NumRrqWqes
	}
	return 0
}

func (m *RdmaQpSpec) GetPd() uint32 {
	if m != nil {
		return m.Pd
	}
	return 0
}

func (m *RdmaQpSpec) GetPmtu() uint32 {
	if m != nil {
		return m.Pmtu
	}
	return 0
}

func (m *RdmaQpSpec) GetHostmemPgSize() uint32 {
	if m != nil {
		return m.HostmemPgSize
	}
	return 0
}

func (m *RdmaQpSpec) GetSvc() RdmaServiceType {
	if m != nil {
		return m.Svc
	}
	return RdmaServiceType_RDMA_SERV_TYPE_RC
}

func (m *RdmaQpSpec) GetAtomicEnabled() bool {
	if m != nil {
		return m.AtomicEnabled
	}
	return false
}

func (m *RdmaQpSpec) GetSqLkey() uint32 {
	if m != nil {
		return m.SqLkey
	}
	return 0
}

func (m *RdmaQpSpec) GetRqLkey() uint32 {
	if m != nil {
		return m.RqLkey
	}
	return 0
}

func (m *RdmaQpSpec) GetRqCqNum() uint32 {
	if m != nil {
		return m.RqCqNum
	}
	return 0
}

func (m *RdmaQpSpec) GetSqCqNum() uint32 {
	if m != nil {
		return m.SqCqNum
	}
	return 0
}

// RdmaQpRequestMsg is batched request used to create/update of Rdma QPs
type RdmaQpRequestMsg struct {
	Request []*RdmaQpSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaQpRequestMsg) Reset()                    { *m = RdmaQpRequestMsg{} }
func (m *RdmaQpRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpRequestMsg) ProtoMessage()               {}
func (*RdmaQpRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *RdmaQpRequestMsg) GetRequest() []*RdmaQpSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaQpResponse response to one RdmaQpSpec
type RdmaQpResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	// RdmaQpStatus        status           = 2;    // operational status
	RsqBaseAddr    uint32 `protobuf:"varint,3,opt,name=rsq_base_addr,json=rsqBaseAddr" json:"rsq_base_addr,omitempty"`
	RrqBaseAddr    uint32 `protobuf:"varint,4,opt,name=rrq_base_addr,json=rrqBaseAddr" json:"rrq_base_addr,omitempty"`
	HeaderTempAddr uint32 `protobuf:"varint,5,opt,name=header_temp_addr,json=headerTempAddr" json:"header_temp_addr,omitempty"`
}

func (m *RdmaQpResponse) Reset()                    { *m = RdmaQpResponse{} }
func (m *RdmaQpResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpResponse) ProtoMessage()               {}
func (*RdmaQpResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

func (m *RdmaQpResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RdmaQpResponse) GetRsqBaseAddr() uint32 {
	if m != nil {
		return m.RsqBaseAddr
	}
	return 0
}

func (m *RdmaQpResponse) GetRrqBaseAddr() uint32 {
	if m != nil {
		return m.RrqBaseAddr
	}
	return 0
}

func (m *RdmaQpResponse) GetHeaderTempAddr() uint32 {
	if m != nil {
		return m.HeaderTempAddr
	}
	return 0
}

// RdmaQpResponseMsg is response to RdmaQpRequestMsg
type RdmaQpResponseMsg struct {
	Response []*RdmaQpResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaQpResponseMsg) Reset()                    { *m = RdmaQpResponseMsg{} }
func (m *RdmaQpResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaQpResponseMsg) ProtoMessage()               {}
func (*RdmaQpResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

func (m *RdmaQpResponseMsg) GetResponse() []*RdmaQpResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// **********************   Completion Queue  *****************************//
// RdmaCq object
type RdmaCqSpec struct {
	Meta          *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	CqNum         uint32      `protobuf:"varint,2,opt,name=cq_num,json=cqNum" json:"cq_num,omitempty"`
	HwLifId       uint32      `protobuf:"varint,3,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	CqWqeSize     uint32      `protobuf:"varint,4,opt,name=cq_wqe_size,json=cqWqeSize" json:"cq_wqe_size,omitempty"`
	NumCqWqes     uint32      `protobuf:"varint,5,opt,name=num_cq_wqes,json=numCqWqes" json:"num_cq_wqes,omitempty"`
	HostmemPgSize uint32      `protobuf:"varint,7,opt,name=hostmem_pg_size,json=hostmemPgSize" json:"hostmem_pg_size,omitempty"`
	CqLkey        uint32      `protobuf:"varint,8,opt,name=cq_lkey,json=cqLkey" json:"cq_lkey,omitempty"`
	EqNum         uint32      `protobuf:"varint,9,opt,name=eq_num,json=eqNum" json:"eq_num,omitempty"`
}

func (m *RdmaCqSpec) Reset()                    { *m = RdmaCqSpec{} }
func (m *RdmaCqSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaCqSpec) ProtoMessage()               {}
func (*RdmaCqSpec) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{4} }

func (m *RdmaCqSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RdmaCqSpec) GetCqNum() uint32 {
	if m != nil {
		return m.CqNum
	}
	return 0
}

func (m *RdmaCqSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaCqSpec) GetCqWqeSize() uint32 {
	if m != nil {
		return m.CqWqeSize
	}
	return 0
}

func (m *RdmaCqSpec) GetNumCqWqes() uint32 {
	if m != nil {
		return m.NumCqWqes
	}
	return 0
}

func (m *RdmaCqSpec) GetHostmemPgSize() uint32 {
	if m != nil {
		return m.HostmemPgSize
	}
	return 0
}

func (m *RdmaCqSpec) GetCqLkey() uint32 {
	if m != nil {
		return m.CqLkey
	}
	return 0
}

func (m *RdmaCqSpec) GetEqNum() uint32 {
	if m != nil {
		return m.EqNum
	}
	return 0
}

// RdmaCqRequestMsg is batched request used to create/update of Rdma QPs
type RdmaCqRequestMsg struct {
	Request []*RdmaCqSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaCqRequestMsg) Reset()                    { *m = RdmaCqRequestMsg{} }
func (m *RdmaCqRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaCqRequestMsg) ProtoMessage()               {}
func (*RdmaCqRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{5} }

func (m *RdmaCqRequestMsg) GetRequest() []*RdmaCqSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaCqResponse response to one RdmaCqSpec
type RdmaCqResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RdmaCqResponse) Reset()                    { *m = RdmaCqResponse{} }
func (m *RdmaCqResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaCqResponse) ProtoMessage()               {}
func (*RdmaCqResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{6} }

func (m *RdmaCqResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RdmaCqResponseMsg is response to RdmaCqRequestMsg
type RdmaCqResponseMsg struct {
	Response []*RdmaCqResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaCqResponseMsg) Reset()                    { *m = RdmaCqResponseMsg{} }
func (m *RdmaCqResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaCqResponseMsg) ProtoMessage()               {}
func (*RdmaCqResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{7} }

func (m *RdmaCqResponseMsg) GetResponse() []*RdmaCqResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// **********************   Memory Registratin(MR)  *********************//
// RdmaMemReg object
type RdmaMemRegSpec struct {
	Meta           *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	HwLifId        uint64      `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	Pd             uint32      `protobuf:"varint,3,opt,name=pd" json:"pd,omitempty"`
	Va             uint64      `protobuf:"varint,4,opt,name=va" json:"va,omitempty"`
	Len            uint32      `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
	AcLocalWr      bool        `protobuf:"varint,6,opt,name=ac_local_wr,json=acLocalWr" json:"ac_local_wr,omitempty"`
	AcRemoteWr     bool        `protobuf:"varint,7,opt,name=ac_remote_wr,json=acRemoteWr" json:"ac_remote_wr,omitempty"`
	AcRemoteRd     bool        `protobuf:"varint,8,opt,name=ac_remote_rd,json=acRemoteRd" json:"ac_remote_rd,omitempty"`
	AcRemoteAtomic bool        `protobuf:"varint,9,opt,name=ac_remote_atomic,json=acRemoteAtomic" json:"ac_remote_atomic,omitempty"`
	Lkey           uint32      `protobuf:"varint,10,opt,name=lkey" json:"lkey,omitempty"`
	Rkey           uint32      `protobuf:"varint,11,opt,name=rkey" json:"rkey,omitempty"`
	HostmemPgSize  uint32      `protobuf:"varint,12,opt,name=hostmem_pg_size,json=hostmemPgSize" json:"hostmem_pg_size,omitempty"`
	VaPagesPhyAddr []uint64    `protobuf:"varint,13,rep,packed,name=va_pages_phy_addr,json=vaPagesPhyAddr" json:"va_pages_phy_addr,omitempty"`
}

func (m *RdmaMemRegSpec) Reset()                    { *m = RdmaMemRegSpec{} }
func (m *RdmaMemRegSpec) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemRegSpec) ProtoMessage()               {}
func (*RdmaMemRegSpec) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{8} }

func (m *RdmaMemRegSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RdmaMemRegSpec) GetHwLifId() uint64 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *RdmaMemRegSpec) GetPd() uint32 {
	if m != nil {
		return m.Pd
	}
	return 0
}

func (m *RdmaMemRegSpec) GetVa() uint64 {
	if m != nil {
		return m.Va
	}
	return 0
}

func (m *RdmaMemRegSpec) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *RdmaMemRegSpec) GetAcLocalWr() bool {
	if m != nil {
		return m.AcLocalWr
	}
	return false
}

func (m *RdmaMemRegSpec) GetAcRemoteWr() bool {
	if m != nil {
		return m.AcRemoteWr
	}
	return false
}

func (m *RdmaMemRegSpec) GetAcRemoteRd() bool {
	if m != nil {
		return m.AcRemoteRd
	}
	return false
}

func (m *RdmaMemRegSpec) GetAcRemoteAtomic() bool {
	if m != nil {
		return m.AcRemoteAtomic
	}
	return false
}

func (m *RdmaMemRegSpec) GetLkey() uint32 {
	if m != nil {
		return m.Lkey
	}
	return 0
}

func (m *RdmaMemRegSpec) GetRkey() uint32 {
	if m != nil {
		return m.Rkey
	}
	return 0
}

func (m *RdmaMemRegSpec) GetHostmemPgSize() uint32 {
	if m != nil {
		return m.HostmemPgSize
	}
	return 0
}

func (m *RdmaMemRegSpec) GetVaPagesPhyAddr() []uint64 {
	if m != nil {
		return m.VaPagesPhyAddr
	}
	return nil
}

// RdmaMemRegRequestMsg is batched request used to create/update of Rdma QPs
type RdmaMemRegRequestMsg struct {
	Request []*RdmaMemRegSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RdmaMemRegRequestMsg) Reset()                    { *m = RdmaMemRegRequestMsg{} }
func (m *RdmaMemRegRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemRegRequestMsg) ProtoMessage()               {}
func (*RdmaMemRegRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{9} }

func (m *RdmaMemRegRequestMsg) GetRequest() []*RdmaMemRegSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RdmaMemRegResponse response to one RdmaMemRegSpec
type RdmaMemRegResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RdmaMemRegResponse) Reset()                    { *m = RdmaMemRegResponse{} }
func (m *RdmaMemRegResponse) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemRegResponse) ProtoMessage()               {}
func (*RdmaMemRegResponse) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{10} }

func (m *RdmaMemRegResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RdmaMemRegResponseMsg is response to RdmaMemRegRequestMsg
type RdmaMemRegResponseMsg struct {
	Response []*RdmaMemRegResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RdmaMemRegResponseMsg) Reset()                    { *m = RdmaMemRegResponseMsg{} }
func (m *RdmaMemRegResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RdmaMemRegResponseMsg) ProtoMessage()               {}
func (*RdmaMemRegResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{11} }

func (m *RdmaMemRegResponseMsg) GetResponse() []*RdmaMemRegResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*RdmaQpSpec)(nil), "rdma.RdmaQpSpec")
	proto.RegisterType((*RdmaQpRequestMsg)(nil), "rdma.RdmaQpRequestMsg")
	proto.RegisterType((*RdmaQpResponse)(nil), "rdma.RdmaQpResponse")
	proto.RegisterType((*RdmaQpResponseMsg)(nil), "rdma.RdmaQpResponseMsg")
	proto.RegisterType((*RdmaCqSpec)(nil), "rdma.RdmaCqSpec")
	proto.RegisterType((*RdmaCqRequestMsg)(nil), "rdma.RdmaCqRequestMsg")
	proto.RegisterType((*RdmaCqResponse)(nil), "rdma.RdmaCqResponse")
	proto.RegisterType((*RdmaCqResponseMsg)(nil), "rdma.RdmaCqResponseMsg")
	proto.RegisterType((*RdmaMemRegSpec)(nil), "rdma.RdmaMemRegSpec")
	proto.RegisterType((*RdmaMemRegRequestMsg)(nil), "rdma.RdmaMemRegRequestMsg")
	proto.RegisterType((*RdmaMemRegResponse)(nil), "rdma.RdmaMemRegResponse")
	proto.RegisterType((*RdmaMemRegResponseMsg)(nil), "rdma.RdmaMemRegResponseMsg")
	proto.RegisterEnum("rdma.RdmaServiceType", RdmaServiceType_name, RdmaServiceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rdma service

type RdmaClient interface {
	// Queue Pair related APIs
	RdmaQpCreate(ctx context.Context, in *RdmaQpRequestMsg, opts ...grpc.CallOption) (*RdmaQpResponseMsg, error)
	RdmaQpUpdate(ctx context.Context, in *RdmaQpRequestMsg, opts ...grpc.CallOption) (*RdmaQpResponseMsg, error)
	// Completion Q related APIs
	RdmaCqCreate(ctx context.Context, in *RdmaCqRequestMsg, opts ...grpc.CallOption) (*RdmaCqResponseMsg, error)
	// Register Memory related APIs
	RdmaMemReg(ctx context.Context, in *RdmaMemRegRequestMsg, opts ...grpc.CallOption) (*RdmaMemRegResponseMsg, error)
}

type rdmaClient struct {
	cc *grpc.ClientConn
}

func NewRdmaClient(cc *grpc.ClientConn) RdmaClient {
	return &rdmaClient{cc}
}

func (c *rdmaClient) RdmaQpCreate(ctx context.Context, in *RdmaQpRequestMsg, opts ...grpc.CallOption) (*RdmaQpResponseMsg, error) {
	out := new(RdmaQpResponseMsg)
	err := grpc.Invoke(ctx, "/rdma.Rdma/RdmaQpCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdmaClient) RdmaQpUpdate(ctx context.Context, in *RdmaQpRequestMsg, opts ...grpc.CallOption) (*RdmaQpResponseMsg, error) {
	out := new(RdmaQpResponseMsg)
	err := grpc.Invoke(ctx, "/rdma.Rdma/RdmaQpUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdmaClient) RdmaCqCreate(ctx context.Context, in *RdmaCqRequestMsg, opts ...grpc.CallOption) (*RdmaCqResponseMsg, error) {
	out := new(RdmaCqResponseMsg)
	err := grpc.Invoke(ctx, "/rdma.Rdma/RdmaCqCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdmaClient) RdmaMemReg(ctx context.Context, in *RdmaMemRegRequestMsg, opts ...grpc.CallOption) (*RdmaMemRegResponseMsg, error) {
	out := new(RdmaMemRegResponseMsg)
	err := grpc.Invoke(ctx, "/rdma.Rdma/RdmaMemReg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rdma service

type RdmaServer interface {
	// Queue Pair related APIs
	RdmaQpCreate(context.Context, *RdmaQpRequestMsg) (*RdmaQpResponseMsg, error)
	RdmaQpUpdate(context.Context, *RdmaQpRequestMsg) (*RdmaQpResponseMsg, error)
	// Completion Q related APIs
	RdmaCqCreate(context.Context, *RdmaCqRequestMsg) (*RdmaCqResponseMsg, error)
	// Register Memory related APIs
	RdmaMemReg(context.Context, *RdmaMemRegRequestMsg) (*RdmaMemRegResponseMsg, error)
}

func RegisterRdmaServer(s *grpc.Server, srv RdmaServer) {
	s.RegisterService(&_Rdma_serviceDesc, srv)
}

func _Rdma_RdmaQpCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdmaQpRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdmaServer).RdmaQpCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdma.Rdma/RdmaQpCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdmaServer).RdmaQpCreate(ctx, req.(*RdmaQpRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rdma_RdmaQpUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdmaQpRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdmaServer).RdmaQpUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdma.Rdma/RdmaQpUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdmaServer).RdmaQpUpdate(ctx, req.(*RdmaQpRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rdma_RdmaCqCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdmaCqRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdmaServer).RdmaCqCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdma.Rdma/RdmaCqCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdmaServer).RdmaCqCreate(ctx, req.(*RdmaCqRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rdma_RdmaMemReg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdmaMemRegRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdmaServer).RdmaMemReg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdma.Rdma/RdmaMemReg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdmaServer).RdmaMemReg(ctx, req.(*RdmaMemRegRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rdma_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rdma.Rdma",
	HandlerType: (*RdmaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RdmaQpCreate",
			Handler:    _Rdma_RdmaQpCreate_Handler,
		},
		{
			MethodName: "RdmaQpUpdate",
			Handler:    _Rdma_RdmaQpUpdate_Handler,
		},
		{
			MethodName: "RdmaCqCreate",
			Handler:    _Rdma_RdmaCqCreate_Handler,
		},
		{
			MethodName: "RdmaMemReg",
			Handler:    _Rdma_RdmaMemReg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/rdma.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/rdma.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5f, 0x6f, 0xe2, 0xc6,
	0x17, 0x8d, 0xc1, 0xe1, 0xcf, 0x4d, 0x70, 0x9c, 0xd1, 0xb2, 0xf1, 0x8f, 0x9f, 0x54, 0x21, 0xa4,
	0x6d, 0xe9, 0x3e, 0x24, 0x2d, 0xed, 0x73, 0x25, 0xd6, 0xa1, 0x55, 0xa5, 0x90, 0xd2, 0x21, 0xbb,
	0xdb, 0xf6, 0x65, 0x34, 0xb1, 0x67, 0xc1, 0x5d, 0x0c, 0xf6, 0x8c, 0x21, 0x62, 0x3f, 0x44, 0x9f,
	0xfb, 0x31, 0x2a, 0xf5, 0xa3, 0xf4, 0xfb, 0x54, 0xd5, 0xcc, 0xd8, 0xd8, 0xfc, 0x59, 0x35, 0xbb,
	0x7d, 0x62, 0x7c, 0xce, 0xe1, 0x32, 0x97, 0x73, 0xee, 0x05, 0x70, 0xe6, 0x81, 0x77, 0x15, 0xf1,
	0x45, 0xb2, 0xb8, 0x9a, 0xd2, 0xd9, 0x15, 0xf7, 0x43, 0x7a, 0xa9, 0x1e, 0x91, 0x29, 0xcf, 0xad,
	0x66, 0xce, 0x27, 0xeb, 0x88, 0x09, 0x4d, 0x76, 0xfe, 0x30, 0x01, 0xb0, 0x1f, 0xd2, 0x1f, 0xa3,
	0x71, 0xc4, 0x3c, 0xf4, 0x0c, 0xcc, 0x90, 0x25, 0xd4, 0x31, 0xda, 0x46, 0xf7, 0xa4, 0x77, 0x7e,
	0xa9, 0xa5, 0x3f, 0xdc, 0xff, 0xca, 0xbc, 0x64, 0xc8, 0x12, 0x8a, 0x15, 0x8d, 0x9a, 0x50, 0x89,
	0x23, 0x32, 0x5f, 0x86, 0x4e, 0xa9, 0x6d, 0x74, 0x1b, 0xf8, 0x38, 0x8e, 0x6e, 0x97, 0x21, 0x6a,
	0x41, 0x7d, 0xfa, 0x40, 0x66, 0xc1, 0x1b, 0x12, 0xf8, 0x4e, 0x59, 0x31, 0xd5, 0xe9, 0xc3, 0x4d,
	0xf0, 0xe6, 0x7b, 0x1f, 0x7d, 0x02, 0x27, 0x22, 0x26, 0x0f, 0x31, 0x23, 0x22, 0x78, 0xc7, 0x1c,
	0x53, 0xb1, 0x75, 0x11, 0xbf, 0x8e, 0xd9, 0x38, 0x78, 0xc7, 0x24, 0xcf, 0x0b, 0xfc, 0xb1, 0xe6,
	0x79, 0x91, 0x9f, 0x2f, 0x43, 0xa2, 0x6b, 0x08, 0xa7, 0xa2, 0xf9, 0xf9, 0x32, 0x1c, 0x4b, 0x89,
	0xc8, 0x78, 0x9e, 0xf2, 0xd5, 0x0d, 0x8f, 0x35, 0xdf, 0x86, 0x53, 0xc5, 0x67, 0x05, 0x6a, 0x4a,
	0x00, 0x52, 0x20, 0xb6, 0x15, 0x59, 0x89, 0x7a, 0xae, 0xe0, 0x5a, 0x61, 0x41, 0x29, 0xf2, 0x1d,
	0x50, 0x78, 0x29, 0xf2, 0x11, 0x02, 0x33, 0x0a, 0x93, 0xa5, 0x73, 0xa2, 0x10, 0x75, 0x46, 0x9f,
	0xc2, 0xd9, 0x74, 0x21, 0x92, 0x90, 0x85, 0x24, 0x9a, 0xe8, 0x5e, 0x4e, 0x15, 0xdd, 0x48, 0xe1,
	0xd1, 0x44, 0xf5, 0xf3, 0x19, 0x94, 0xc5, 0xca, 0x73, 0x1a, 0x6d, 0xa3, 0x6b, 0xf5, 0x9a, 0x97,
	0xca, 0x2f, 0x69, 0xc4, 0x98, 0xf1, 0x55, 0xe0, 0xb1, 0xbb, 0x75, 0xc4, 0xb0, 0x54, 0xa0, 0x67,
	0x60, 0xd1, 0x64, 0x11, 0x06, 0x1e, 0x61, 0x73, 0x7a, 0x3f, 0x63, 0xbe, 0x63, 0xb5, 0x8d, 0x6e,
	0x0d, 0x37, 0x34, 0x3a, 0xd0, 0x20, 0xba, 0x80, 0xaa, 0x88, 0xc9, 0xec, 0x2d, 0x5b, 0x3b, 0x67,
	0xea, 0xf3, 0x2a, 0x22, 0xbe, 0x79, 0xcb, 0xd6, 0x92, 0xe0, 0x29, 0x61, 0x6b, 0x82, 0x6b, 0xa2,
	0x05, 0x75, 0x1e, 0x13, 0x2f, 0x56, 0x3e, 0x9e, 0x6b, 0xb7, 0x78, 0xec, 0xc6, 0xa9, 0x93, 0x62,
	0xc3, 0x21, 0xcd, 0x09, 0xcd, 0x75, 0xbe, 0x01, 0x5b, 0x27, 0x06, 0xb3, 0x78, 0xc9, 0x44, 0x32,
	0x14, 0x13, 0xf4, 0x1c, 0xaa, 0x5c, 0x3f, 0x39, 0x46, 0xbb, 0xdc, 0x3d, 0xe9, 0xd9, 0x79, 0x47,
	0x3a, 0x5a, 0x38, 0x13, 0x74, 0xfe, 0x34, 0xc0, 0xca, 0x0a, 0x88, 0x68, 0x31, 0x17, 0x0c, 0x5d,
	0x01, 0xd0, 0x28, 0x20, 0x22, 0xa1, 0xc9, 0x52, 0xa8, 0xf0, 0x59, 0x3d, 0x3b, 0x0d, 0x5f, 0x3f,
	0x0a, 0xc6, 0x0a, 0xc7, 0x75, 0x9a, 0x1d, 0x51, 0x07, 0x1a, 0xd2, 0xc9, 0x7b, 0x2a, 0x18, 0xa1,
	0xbe, 0xcf, 0xd3, 0xb4, 0x9d, 0x70, 0x11, 0xbf, 0xa0, 0x82, 0xf5, 0x7d, 0x9f, 0x2b, 0x0d, 0x2f,
	0x6a, 0xcc, 0x54, 0xc3, 0x73, 0x4d, 0x17, 0xec, 0x29, 0xa3, 0x3e, 0xe3, 0x24, 0x61, 0x61, 0xa4,
	0x65, 0x3a, 0x7a, 0x96, 0xc6, 0xef, 0x58, 0x18, 0x49, 0x65, 0x67, 0x00, 0xe7, 0xdb, 0x97, 0x96,
	0x6d, 0x7f, 0x01, 0x35, 0x9e, 0x3e, 0xa6, 0x7d, 0x3f, 0x29, 0xf6, 0x9d, 0x49, 0xf1, 0x46, 0xd5,
	0xf9, 0xdb, 0xd0, 0xf3, 0xe6, 0xc6, 0x1f, 0x38, 0x6f, 0xa9, 0x17, 0xe9, 0xbc, 0x79, 0xf1, 0x23,
	0xe6, 0xcd, 0xdb, 0x9f, 0x37, 0x6f, 0x77, 0x9e, 0xbc, 0x34, 0xec, 0xc7, 0x9b, 0x79, 0x71, 0x75,
	0xd6, 0x0f, 0xe4, 0xb8, 0x7a, 0x28, 0xc7, 0x17, 0x50, 0xf5, 0xd2, 0x78, 0xe9, 0x91, 0xaa, 0x78,
	0x3a, 0x5e, 0x4d, 0xa8, 0x30, 0x7d, 0x67, 0x3d, 0x48, 0xc7, 0xac, 0x98, 0x1e, 0x37, 0x7e, 0x64,
	0x7a, 0xf4, 0x17, 0x95, 0xa7, 0xa7, 0xaf, 0xc3, 0x23, 0xdf, 0xff, 0x91, 0xe1, 0xc9, 0xac, 0xcc,
	0x4b, 0xfc, 0xab, 0x95, 0xb9, 0xb4, 0x60, 0xe5, 0x6f, 0x65, 0x7d, 0x95, 0x21, 0x0b, 0x31, 0x9b,
	0x7c, 0x88, 0x9d, 0x5b, 0xbe, 0x49, 0x47, 0xcd, 0xdc, 0x37, 0xbd, 0x63, 0xca, 0x9b, 0x1d, 0x63,
	0x41, 0x69, 0x45, 0x95, 0x7d, 0x26, 0x2e, 0xad, 0x28, 0xb2, 0xa1, 0x3c, 0x63, 0xf3, 0xd4, 0x2f,
	0x79, 0x94, 0x4e, 0x52, 0x8f, 0xcc, 0x16, 0x1e, 0x9d, 0x91, 0x07, 0xae, 0x36, 0x63, 0x0d, 0xd7,
	0xa9, 0x77, 0x23, 0x91, 0xd7, 0x5c, 0xee, 0x35, 0xea, 0x11, 0xce, 0xc2, 0x45, 0xc2, 0xa4, 0xa0,
	0xaa, 0x04, 0x40, 0x3d, 0xac, 0xa0, 0x5d, 0x05, 0xf7, 0x95, 0x91, 0x05, 0x05, 0xf6, 0xe5, 0x9c,
	0xe4, 0x0a, 0xbd, 0x78, 0x94, 0xad, 0x35, 0x6c, 0x65, 0xaa, 0xbe, 0x42, 0xe5, 0x4e, 0x54, 0x61,
	0xd0, 0x5b, 0x52, 0x9d, 0x25, 0xc6, 0x25, 0x96, 0xee, 0x49, 0x79, 0x7e, 0xf4, 0x9e, 0xfc, 0x1c,
	0xce, 0x57, 0x94, 0x44, 0x74, 0xc2, 0x04, 0x89, 0xa6, 0x6b, 0x3d, 0xa2, 0x8d, 0x76, 0xb9, 0x6b,
	0x62, 0x6b, 0x45, 0x47, 0x12, 0x1f, 0x4d, 0xd7, 0x6a, 0x44, 0xbf, 0x85, 0x27, 0xb9, 0x1f, 0x85,
	0x78, 0x5d, 0xee, 0xc6, 0xab, 0xe0, 0x6c, 0x6e, 0x5e, 0x1e, 0xb1, 0x01, 0xa0, 0x62, 0x9d, 0x8f,
	0x8d, 0xd9, 0x10, 0x9a, 0xfb, 0x65, 0xe4, 0x7d, 0xbe, 0xde, 0x8b, 0x9a, 0xb3, 0x7b, 0xa1, 0xfd,
	0xb8, 0x3d, 0xff, 0xcb, 0x80, 0xb3, 0x9d, 0x1f, 0x08, 0xd4, 0x84, 0x73, 0x7c, 0x3d, 0xec, 0x93,
	0xf1, 0x00, 0xbf, 0x22, 0x77, 0x3f, 0x8f, 0x06, 0x04, 0xbb, 0xf6, 0xd1, 0x01, 0xf8, 0xa5, 0x6b,
	0x1b, 0x87, 0xd4, 0xd7, 0x76, 0xe9, 0x90, 0xfa, 0xda, 0x2e, 0xa3, 0xa7, 0x80, 0x76, 0x60, 0xf7,
	0x76, 0x64, 0x9b, 0x07, 0xf0, 0x9f, 0xb0, 0x6b, 0x1f, 0xa3, 0xff, 0x41, 0x73, 0x07, 0x7f, 0x35,
	0xb8, 0xbd, 0x26, 0x5f, 0xda, 0x95, 0xf7, 0x51, 0x3d, 0xbb, 0xda, 0xfb, 0xbd, 0x04, 0xa6, 0xec,
	0x0a, 0xf5, 0xe1, 0x54, 0x2f, 0x4d, 0x97, 0x33, 0x9a, 0x30, 0xf4, 0x74, 0x7b, 0x91, 0x66, 0x66,
	0xb6, 0x2e, 0x0e, 0x2d, 0xd8, 0xa1, 0x98, 0x74, 0x8e, 0xf2, 0x12, 0x2f, 0x23, 0xff, 0xbf, 0x95,
	0x70, 0xe3, 0xfd, 0x5b, 0x14, 0x37, 0x56, 0xb1, 0xc4, 0xd6, 0x1a, 0xe9, 0x1c, 0xa1, 0xef, 0xf4,
	0x82, 0xd7, 0x3e, 0xa2, 0xd6, 0xbe, 0xb3, 0x9b, 0x22, 0xff, 0x7f, 0x9f, 0xeb, 0xaa, 0xd0, 0x0b,
	0xf8, 0xa5, 0x36, 0xa5, 0x33, 0xf5, 0x37, 0xed, 0xbe, 0xa2, 0x5e, 0xbe, 0xfa, 0x27, 0x00, 0x00,
	0xff, 0xff, 0xbc, 0x60, 0x4b, 0x0f, 0xe6, 0x09, 0x00, 0x00,
}
