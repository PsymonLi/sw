// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Types of NAT
type NatType int32

const (
	NatType_NAT_TYPE_NONE      NatType = 0
	NatType_NAT_TYPE_SNAT      NatType = 1
	NatType_NAT_TYPE_DNAT      NatType = 2
	NatType_NAT_TYPE_TWICE_NAT NatType = 3
)

var NatType_name = map[int32]string{
	0: "NAT_TYPE_NONE",
	1: "NAT_TYPE_SNAT",
	2: "NAT_TYPE_DNAT",
	3: "NAT_TYPE_TWICE_NAT",
}
var NatType_value = map[string]int32{
	"NAT_TYPE_NONE":      0,
	"NAT_TYPE_SNAT":      1,
	"NAT_TYPE_DNAT":      2,
	"NAT_TYPE_TWICE_NAT": 3,
}

func (x NatType) String() string {
	return proto.EnumName(NatType_name, int32(x))
}
func (NatType) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

// Flow actions
type FlowAction int32

const (
	FlowAction_FLOW_ACTION_NONE  FlowAction = 0
	FlowAction_FLOW_ACTION_ALLOW FlowAction = 1
	FlowAction_FLOW_ACTION_DROP  FlowAction = 2
)

var FlowAction_name = map[int32]string{
	0: "FLOW_ACTION_NONE",
	1: "FLOW_ACTION_ALLOW",
	2: "FLOW_ACTION_DROP",
}
var FlowAction_value = map[string]int32{
	"FLOW_ACTION_NONE":  0,
	"FLOW_ACTION_ALLOW": 1,
	"FLOW_ACTION_DROP":  2,
}

func (x FlowAction) String() string {
	return proto.EnumName(FlowAction_name, int32(x))
}
func (FlowAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

// Flow TCP states
// TODO: Srini, please define all other states
type FlowTCPState int32

const (
	FlowTCPState_FLOW_TCP_STATE_NONE         FlowTCPState = 0
	FlowTCPState_FLOW_TCP_STATE_INIT         FlowTCPState = 1
	FlowTCPState_FLOW_TCP_STATE_SYN_SENT     FlowTCPState = 2
	FlowTCPState_FLOW_TCP_STATE_SYN_ACK_RCVD FlowTCPState = 3
	FlowTCPState_FLOW_TCP_STATE_CLOSING      FlowTCPState = 4
	FlowTCPState_FLOW_TCP_STATE_CLOSE_WAIT   FlowTCPState = 5
	FlowTCPState_FLOW_TCP_STATE_ESTABLISHED  FlowTCPState = 6
	FlowTCPState_FLOW_TCP_STATE_CLOSED       FlowTCPState = 7
)

var FlowTCPState_name = map[int32]string{
	0: "FLOW_TCP_STATE_NONE",
	1: "FLOW_TCP_STATE_INIT",
	2: "FLOW_TCP_STATE_SYN_SENT",
	3: "FLOW_TCP_STATE_SYN_ACK_RCVD",
	4: "FLOW_TCP_STATE_CLOSING",
	5: "FLOW_TCP_STATE_CLOSE_WAIT",
	6: "FLOW_TCP_STATE_ESTABLISHED",
	7: "FLOW_TCP_STATE_CLOSED",
}
var FlowTCPState_value = map[string]int32{
	"FLOW_TCP_STATE_NONE":         0,
	"FLOW_TCP_STATE_INIT":         1,
	"FLOW_TCP_STATE_SYN_SENT":     2,
	"FLOW_TCP_STATE_SYN_ACK_RCVD": 3,
	"FLOW_TCP_STATE_CLOSING":      4,
	"FLOW_TCP_STATE_CLOSE_WAIT":   5,
	"FLOW_TCP_STATE_ESTABLISHED":  6,
	"FLOW_TCP_STATE_CLOSED":       7,
}

func (x FlowTCPState) String() string {
	return proto.EnumName(FlowTCPState_name, int32(x))
}
func (FlowTCPState) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

// App Types ... In sync with p4/nw/include/defines.h
// TODO: Revisit once we decide if flow drives app_id or service_lif
type FlowType int32

const (
	FlowType_FLOW_TYPE_NONE        FlowType = 0
	FlowType_FLOW_TYPE_CLASSIC_NIC FlowType = 1
	FlowType_FLOW_TYPE_RDMA        FlowType = 2
	FlowType_FLOW_TYPE_TCPTLS      FlowType = 3
	FlowType_FLOW_TYPE_IPSEC       FlowType = 4
	FlowType_FLOW_TYPE_NDE         FlowType = 5
	FlowType_FLOW_TYPE_STORAGE     FlowType = 6
	FlowType_FLOW_TYPE_TELEMETRY   FlowType = 7
)

var FlowType_name = map[int32]string{
	0: "FLOW_TYPE_NONE",
	1: "FLOW_TYPE_CLASSIC_NIC",
	2: "FLOW_TYPE_RDMA",
	3: "FLOW_TYPE_TCPTLS",
	4: "FLOW_TYPE_IPSEC",
	5: "FLOW_TYPE_NDE",
	6: "FLOW_TYPE_STORAGE",
	7: "FLOW_TYPE_TELEMETRY",
}
var FlowType_value = map[string]int32{
	"FLOW_TYPE_NONE":        0,
	"FLOW_TYPE_CLASSIC_NIC": 1,
	"FLOW_TYPE_RDMA":        2,
	"FLOW_TYPE_TCPTLS":      3,
	"FLOW_TYPE_IPSEC":       4,
	"FLOW_TYPE_NDE":         5,
	"FLOW_TYPE_STORAGE":     6,
	"FLOW_TYPE_TELEMETRY":   7,
}

func (x FlowType) String() string {
	return proto.EnumName(FlowType_name, int32(x))
}
func (FlowType) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

// Key for L2 flows (i.e, non-IP flows)
type FlowKeyL2 struct {
	Smac        uint64 `protobuf:"fixed64,1,opt,name=smac" json:"smac,omitempty"`
	Dmac        uint64 `protobuf:"fixed64,2,opt,name=dmac" json:"dmac,omitempty"`
	EtherType   uint32 `protobuf:"varint,4,opt,name=ether_type,json=etherType" json:"ether_type,omitempty"`
	L2SegmentId uint32 `protobuf:"varint,3,opt,name=l2_segment_id,json=l2SegmentId" json:"l2_segment_id,omitempty"`
}

func (m *FlowKeyL2) Reset()                    { *m = FlowKeyL2{} }
func (m *FlowKeyL2) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyL2) ProtoMessage()               {}
func (*FlowKeyL2) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *FlowKeyL2) GetSmac() uint64 {
	if m != nil {
		return m.Smac
	}
	return 0
}

func (m *FlowKeyL2) GetDmac() uint64 {
	if m != nil {
		return m.Dmac
	}
	return 0
}

func (m *FlowKeyL2) GetEtherType() uint32 {
	if m != nil {
		return m.EtherType
	}
	return 0
}

func (m *FlowKeyL2) GetL2SegmentId() uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return 0
}

type FlowKeyTcpUdpInfo struct {
	Sport uint32 `protobuf:"varint,1,opt,name=sport" json:"sport,omitempty"`
	Dport uint32 `protobuf:"varint,2,opt,name=dport" json:"dport,omitempty"`
}

func (m *FlowKeyTcpUdpInfo) Reset()                    { *m = FlowKeyTcpUdpInfo{} }
func (m *FlowKeyTcpUdpInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyTcpUdpInfo) ProtoMessage()               {}
func (*FlowKeyTcpUdpInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *FlowKeyTcpUdpInfo) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *FlowKeyTcpUdpInfo) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

type FlowKeyICMPInfo struct {
	Type uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Code uint32 `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Id   uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *FlowKeyICMPInfo) Reset()                    { *m = FlowKeyICMPInfo{} }
func (m *FlowKeyICMPInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyICMPInfo) ProtoMessage()               {}
func (*FlowKeyICMPInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *FlowKeyICMPInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *FlowKeyICMPInfo) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FlowKeyICMPInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Key for IPv4 flows
type FlowKeyV4 struct {
	Sip     uint32     `protobuf:"fixed32,1,opt,name=sip" json:"sip,omitempty"`
	Dip     uint32     `protobuf:"fixed32,2,opt,name=dip" json:"dip,omitempty"`
	IpProto IPProtocol `protobuf:"varint,3,opt,name=ip_proto,json=ipProto,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	// TODO: add ICMP, AH, ESP etc. here
	//
	// Types that are valid to be assigned to L4Fields:
	//	*FlowKeyV4_TcpUdp
	//	*FlowKeyV4_Icmp
	L4Fields isFlowKeyV4_L4Fields `protobuf_oneof:"l4_fields"`
}

func (m *FlowKeyV4) Reset()                    { *m = FlowKeyV4{} }
func (m *FlowKeyV4) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyV4) ProtoMessage()               {}
func (*FlowKeyV4) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

type isFlowKeyV4_L4Fields interface {
	isFlowKeyV4_L4Fields()
}

type FlowKeyV4_TcpUdp struct {
	TcpUdp *FlowKeyTcpUdpInfo `protobuf:"bytes,4,opt,name=tcp_udp,json=tcpUdp,oneof"`
}
type FlowKeyV4_Icmp struct {
	Icmp *FlowKeyICMPInfo `protobuf:"bytes,5,opt,name=icmp,oneof"`
}

func (*FlowKeyV4_TcpUdp) isFlowKeyV4_L4Fields() {}
func (*FlowKeyV4_Icmp) isFlowKeyV4_L4Fields()   {}

func (m *FlowKeyV4) GetL4Fields() isFlowKeyV4_L4Fields {
	if m != nil {
		return m.L4Fields
	}
	return nil
}

func (m *FlowKeyV4) GetSip() uint32 {
	if m != nil {
		return m.Sip
	}
	return 0
}

func (m *FlowKeyV4) GetDip() uint32 {
	if m != nil {
		return m.Dip
	}
	return 0
}

func (m *FlowKeyV4) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IP_PROTO_NONE
}

func (m *FlowKeyV4) GetTcpUdp() *FlowKeyTcpUdpInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV4_TcpUdp); ok {
		return x.TcpUdp
	}
	return nil
}

func (m *FlowKeyV4) GetIcmp() *FlowKeyICMPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV4_Icmp); ok {
		return x.Icmp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowKeyV4) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowKeyV4_OneofMarshaler, _FlowKeyV4_OneofUnmarshaler, _FlowKeyV4_OneofSizer, []interface{}{
		(*FlowKeyV4_TcpUdp)(nil),
		(*FlowKeyV4_Icmp)(nil),
	}
}

func _FlowKeyV4_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowKeyV4)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV4_TcpUdp:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpUdp); err != nil {
			return err
		}
	case *FlowKeyV4_Icmp:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Icmp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowKeyV4.L4Fields has unexpected type %T", x)
	}
	return nil
}

func _FlowKeyV4_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowKeyV4)
	switch tag {
	case 4: // l4_fields.tcp_udp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyTcpUdpInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV4_TcpUdp{msg}
		return true, err
	case 5: // l4_fields.icmp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyICMPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV4_Icmp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowKeyV4_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowKeyV4)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV4_TcpUdp:
		s := proto.Size(x.TcpUdp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV4_Icmp:
		s := proto.Size(x.Icmp)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Key for IPv6 flows
type FlowKeyV6 struct {
	Sip     *IPAddress `protobuf:"bytes,1,opt,name=sip" json:"sip,omitempty"`
	Dip     *IPAddress `protobuf:"bytes,2,opt,name=dip" json:"dip,omitempty"`
	IpProto IPProtocol `protobuf:"varint,3,opt,name=ip_proto,json=ipProto,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	// TODO: add ICMPv6, AH, ESP etc. here
	//
	// Types that are valid to be assigned to L4Fields:
	//	*FlowKeyV6_TcpUdp
	//	*FlowKeyV6_Icmp
	L4Fields isFlowKeyV6_L4Fields `protobuf_oneof:"l4_fields"`
}

func (m *FlowKeyV6) Reset()                    { *m = FlowKeyV6{} }
func (m *FlowKeyV6) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyV6) ProtoMessage()               {}
func (*FlowKeyV6) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

type isFlowKeyV6_L4Fields interface {
	isFlowKeyV6_L4Fields()
}

type FlowKeyV6_TcpUdp struct {
	TcpUdp *FlowKeyTcpUdpInfo `protobuf:"bytes,4,opt,name=tcp_udp,json=tcpUdp,oneof"`
}
type FlowKeyV6_Icmp struct {
	Icmp *FlowKeyICMPInfo `protobuf:"bytes,5,opt,name=icmp,oneof"`
}

func (*FlowKeyV6_TcpUdp) isFlowKeyV6_L4Fields() {}
func (*FlowKeyV6_Icmp) isFlowKeyV6_L4Fields()   {}

func (m *FlowKeyV6) GetL4Fields() isFlowKeyV6_L4Fields {
	if m != nil {
		return m.L4Fields
	}
	return nil
}

func (m *FlowKeyV6) GetSip() *IPAddress {
	if m != nil {
		return m.Sip
	}
	return nil
}

func (m *FlowKeyV6) GetDip() *IPAddress {
	if m != nil {
		return m.Dip
	}
	return nil
}

func (m *FlowKeyV6) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IP_PROTO_NONE
}

func (m *FlowKeyV6) GetTcpUdp() *FlowKeyTcpUdpInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV6_TcpUdp); ok {
		return x.TcpUdp
	}
	return nil
}

func (m *FlowKeyV6) GetIcmp() *FlowKeyICMPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV6_Icmp); ok {
		return x.Icmp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowKeyV6) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowKeyV6_OneofMarshaler, _FlowKeyV6_OneofUnmarshaler, _FlowKeyV6_OneofSizer, []interface{}{
		(*FlowKeyV6_TcpUdp)(nil),
		(*FlowKeyV6_Icmp)(nil),
	}
}

func _FlowKeyV6_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowKeyV6)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV6_TcpUdp:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpUdp); err != nil {
			return err
		}
	case *FlowKeyV6_Icmp:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Icmp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowKeyV6.L4Fields has unexpected type %T", x)
	}
	return nil
}

func _FlowKeyV6_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowKeyV6)
	switch tag {
	case 4: // l4_fields.tcp_udp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyTcpUdpInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV6_TcpUdp{msg}
		return true, err
	case 5: // l4_fields.icmp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyICMPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV6_Icmp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowKeyV6_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowKeyV6)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV6_TcpUdp:
		s := proto.Size(x.TcpUdp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV6_Icmp:
		s := proto.Size(x.Icmp)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// FlowKey is the key for uni-directional flow
type FlowKey struct {
	// Types that are valid to be assigned to FlowKey:
	//	*FlowKey_L2Key
	//	*FlowKey_V4Key
	//	*FlowKey_V6Key
	FlowKey isFlowKey_FlowKey `protobuf_oneof:"flow_key"`
}

func (m *FlowKey) Reset()                    { *m = FlowKey{} }
func (m *FlowKey) String() string            { return proto.CompactTextString(m) }
func (*FlowKey) ProtoMessage()               {}
func (*FlowKey) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

type isFlowKey_FlowKey interface {
	isFlowKey_FlowKey()
}

type FlowKey_L2Key struct {
	L2Key *FlowKeyL2 `protobuf:"bytes,1,opt,name=l2_key,json=l2Key,oneof"`
}
type FlowKey_V4Key struct {
	V4Key *FlowKeyV4 `protobuf:"bytes,2,opt,name=v4_key,json=v4Key,oneof"`
}
type FlowKey_V6Key struct {
	V6Key *FlowKeyV6 `protobuf:"bytes,3,opt,name=v6_key,json=v6Key,oneof"`
}

func (*FlowKey_L2Key) isFlowKey_FlowKey() {}
func (*FlowKey_V4Key) isFlowKey_FlowKey() {}
func (*FlowKey_V6Key) isFlowKey_FlowKey() {}

func (m *FlowKey) GetFlowKey() isFlowKey_FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *FlowKey) GetL2Key() *FlowKeyL2 {
	if x, ok := m.GetFlowKey().(*FlowKey_L2Key); ok {
		return x.L2Key
	}
	return nil
}

func (m *FlowKey) GetV4Key() *FlowKeyV4 {
	if x, ok := m.GetFlowKey().(*FlowKey_V4Key); ok {
		return x.V4Key
	}
	return nil
}

func (m *FlowKey) GetV6Key() *FlowKeyV6 {
	if x, ok := m.GetFlowKey().(*FlowKey_V6Key); ok {
		return x.V6Key
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowKey_OneofMarshaler, _FlowKey_OneofUnmarshaler, _FlowKey_OneofSizer, []interface{}{
		(*FlowKey_L2Key)(nil),
		(*FlowKey_V4Key)(nil),
		(*FlowKey_V6Key)(nil),
	}
}

func _FlowKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowKey)
	// flow_key
	switch x := m.FlowKey.(type) {
	case *FlowKey_L2Key:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.L2Key); err != nil {
			return err
		}
	case *FlowKey_V4Key:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V4Key); err != nil {
			return err
		}
	case *FlowKey_V6Key:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V6Key); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowKey.FlowKey has unexpected type %T", x)
	}
	return nil
}

func _FlowKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowKey)
	switch tag {
	case 1: // flow_key.l2_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyL2)
		err := b.DecodeMessage(msg)
		m.FlowKey = &FlowKey_L2Key{msg}
		return true, err
	case 2: // flow_key.v4_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyV4)
		err := b.DecodeMessage(msg)
		m.FlowKey = &FlowKey_V4Key{msg}
		return true, err
	case 3: // flow_key.v6_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyV6)
		err := b.DecodeMessage(msg)
		m.FlowKey = &FlowKey_V6Key{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowKey)
	// flow_key
	switch x := m.FlowKey.(type) {
	case *FlowKey_L2Key:
		s := proto.Size(x.L2Key)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKey_V4Key:
		s := proto.Size(x.V4Key)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKey_V6Key:
		s := proto.Size(x.V6Key)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// FlowInfo contains flow information like counters, forwarding information,
// NAT rewrite information etc.
type FlowInfo struct {
	FlowAction   FlowAction   `protobuf:"varint,1,opt,name=flow_action,json=flowAction,enum=session.FlowAction" json:"flow_action,omitempty"`
	NatType      NatType      `protobuf:"varint,2,opt,name=nat_type,json=natType,enum=session.NatType" json:"nat_type,omitempty"`
	NatSip       *IPAddress   `protobuf:"bytes,3,opt,name=nat_sip,json=natSip" json:"nat_sip,omitempty"`
	NatSport     uint32       `protobuf:"varint,4,opt,name=nat_sport,json=natSport" json:"nat_sport,omitempty"`
	NatDip       *IPAddress   `protobuf:"bytes,5,opt,name=nat_dip,json=natDip" json:"nat_dip,omitempty"`
	NatDport     uint32       `protobuf:"varint,6,opt,name=nat_dport,json=natDport" json:"nat_dport,omitempty"`
	TcpState     FlowTCPState `protobuf:"varint,7,opt,name=tcp_state,json=tcpState,enum=session.FlowTCPState" json:"tcp_state,omitempty"`
	InQosActions *QOSActions  `protobuf:"bytes,8,opt,name=in_qos_actions,json=inQosActions" json:"in_qos_actions,omitempty"`
	EgQosActions *QOSActions  `protobuf:"bytes,9,opt,name=eg_qos_actions,json=egQosActions" json:"eg_qos_actions,omitempty"`
	QueueType    LifQType     `protobuf:"varint,10,opt,name=queue_type,json=queueType,enum=intf.LifQType" json:"queue_type,omitempty"`
}

func (m *FlowInfo) Reset()                    { *m = FlowInfo{} }
func (m *FlowInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowInfo) ProtoMessage()               {}
func (*FlowInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

func (m *FlowInfo) GetFlowAction() FlowAction {
	if m != nil {
		return m.FlowAction
	}
	return FlowAction_FLOW_ACTION_NONE
}

func (m *FlowInfo) GetNatType() NatType {
	if m != nil {
		return m.NatType
	}
	return NatType_NAT_TYPE_NONE
}

func (m *FlowInfo) GetNatSip() *IPAddress {
	if m != nil {
		return m.NatSip
	}
	return nil
}

func (m *FlowInfo) GetNatSport() uint32 {
	if m != nil {
		return m.NatSport
	}
	return 0
}

func (m *FlowInfo) GetNatDip() *IPAddress {
	if m != nil {
		return m.NatDip
	}
	return nil
}

func (m *FlowInfo) GetNatDport() uint32 {
	if m != nil {
		return m.NatDport
	}
	return 0
}

func (m *FlowInfo) GetTcpState() FlowTCPState {
	if m != nil {
		return m.TcpState
	}
	return FlowTCPState_FLOW_TCP_STATE_NONE
}

func (m *FlowInfo) GetInQosActions() *QOSActions {
	if m != nil {
		return m.InQosActions
	}
	return nil
}

func (m *FlowInfo) GetEgQosActions() *QOSActions {
	if m != nil {
		return m.EgQosActions
	}
	return nil
}

func (m *FlowInfo) GetQueueType() LifQType {
	if m != nil {
		return m.QueueType
	}
	return LifQType_LIF_QUEUE_TYPE_NONE
}

// ConnTrackInfo contains dynamic information that was recorded due to connection tracking
type ConnTrackInfo struct {
	FlowCreateTs  uint64 `protobuf:"fixed64,1,opt,name=flow_create_ts,json=flowCreateTs" json:"flow_create_ts,omitempty"`
	FlowBytes     uint64 `protobuf:"fixed64,2,opt,name=flow_bytes,json=flowBytes" json:"flow_bytes,omitempty"`
	FlowPackets   uint32 `protobuf:"fixed32,3,opt,name=flow_packets,json=flowPackets" json:"flow_packets,omitempty"`
	ExceptionBits uint32 `protobuf:"fixed32,4,opt,name=exception_bits,json=exceptionBits" json:"exception_bits,omitempty"`
	TcpSeqNum     uint32 `protobuf:"fixed32,5,opt,name=tcp_seq_num,json=tcpSeqNum" json:"tcp_seq_num,omitempty"`
	TcpAckNum     uint32 `protobuf:"fixed32,6,opt,name=tcp_ack_num,json=tcpAckNum" json:"tcp_ack_num,omitempty"`
	TcpWinSz      uint32 `protobuf:"varint,7,opt,name=tcp_win_sz,json=tcpWinSz" json:"tcp_win_sz,omitempty"`
	TcpWinScale   uint32 `protobuf:"varint,8,opt,name=tcp_win_scale,json=tcpWinScale" json:"tcp_win_scale,omitempty"`
	TcpMss        uint32 `protobuf:"varint,9,opt,name=tcp_mss,json=tcpMss" json:"tcp_mss,omitempty"`
}

func (m *ConnTrackInfo) Reset()                    { *m = ConnTrackInfo{} }
func (m *ConnTrackInfo) String() string            { return proto.CompactTextString(m) }
func (*ConnTrackInfo) ProtoMessage()               {}
func (*ConnTrackInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{7} }

func (m *ConnTrackInfo) GetFlowCreateTs() uint64 {
	if m != nil {
		return m.FlowCreateTs
	}
	return 0
}

func (m *ConnTrackInfo) GetFlowBytes() uint64 {
	if m != nil {
		return m.FlowBytes
	}
	return 0
}

func (m *ConnTrackInfo) GetFlowPackets() uint32 {
	if m != nil {
		return m.FlowPackets
	}
	return 0
}

func (m *ConnTrackInfo) GetExceptionBits() uint32 {
	if m != nil {
		return m.ExceptionBits
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpSeqNum() uint32 {
	if m != nil {
		return m.TcpSeqNum
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpAckNum() uint32 {
	if m != nil {
		return m.TcpAckNum
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpWinSz() uint32 {
	if m != nil {
		return m.TcpWinSz
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpWinScale() uint32 {
	if m != nil {
		return m.TcpWinScale
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpMss() uint32 {
	if m != nil {
		return m.TcpMss
	}
	return 0
}

// FlowData captures all the flow information
type FlowData struct {
	FlowInfo      *FlowInfo      `protobuf:"bytes,1,opt,name=flow_info,json=flowInfo" json:"flow_info,omitempty"`
	ConnTrackInfo *ConnTrackInfo `protobuf:"bytes,2,opt,name=conn_track_info,json=connTrackInfo" json:"conn_track_info,omitempty"`
}

func (m *FlowData) Reset()                    { *m = FlowData{} }
func (m *FlowData) String() string            { return proto.CompactTextString(m) }
func (*FlowData) ProtoMessage()               {}
func (*FlowData) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{8} }

func (m *FlowData) GetFlowInfo() *FlowInfo {
	if m != nil {
		return m.FlowInfo
	}
	return nil
}

func (m *FlowData) GetConnTrackInfo() *ConnTrackInfo {
	if m != nil {
		return m.ConnTrackInfo
	}
	return nil
}

// FlowSpec contains all information needed to install a uni-directional flow
//   - FlowKey is the key to uniquely identify a flow
//   - FlowInfo contains flow information like counters, forwarding information,
//     NAT rewrite information etc.
//   - ConnTrackInfo contains all the information gathered so far about the flow
//     when connection tracking is enabled. In vMotion case, this will be
//     carried from old location to new location
type FlowSpec struct {
	FlowKey  *FlowKey  `protobuf:"bytes,1,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	FlowData *FlowData `protobuf:"bytes,2,opt,name=flow_data,json=flowData" json:"flow_data,omitempty"`
}

func (m *FlowSpec) Reset()                    { *m = FlowSpec{} }
func (m *FlowSpec) String() string            { return proto.CompactTextString(m) }
func (*FlowSpec) ProtoMessage()               {}
func (*FlowSpec) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{9} }

func (m *FlowSpec) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *FlowSpec) GetFlowData() *FlowData {
	if m != nil {
		return m.FlowData
	}
	return nil
}

// SessionSpec represents a full session with forward and reverse flow
// It is possible to have a session with just one flow (for L2 mcast/bcast)
type SessionSpec struct {
	Meta             *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	SessionId        uint32      `protobuf:"fixed32,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	ConnTrackEn      bool        `protobuf:"varint,3,opt,name=conn_track_en,json=connTrackEn" json:"conn_track_en,omitempty"`
	TcpTsOption      bool        `protobuf:"varint,4,opt,name=tcp_ts_option,json=tcpTsOption" json:"tcp_ts_option,omitempty"`
	IflowSynAckDelta int32       `protobuf:"zigzag32,5,opt,name=iflow_syn_ack_delta,json=iflowSynAckDelta" json:"iflow_syn_ack_delta,omitempty"`
	InitiatorFlow    *FlowSpec   `protobuf:"bytes,6,opt,name=initiator_flow,json=initiatorFlow" json:"initiator_flow,omitempty"`
	ResponderFlow    *FlowSpec   `protobuf:"bytes,7,opt,name=responder_flow,json=responderFlow" json:"responder_flow,omitempty"`
}

func (m *SessionSpec) Reset()                    { *m = SessionSpec{} }
func (m *SessionSpec) String() string            { return proto.CompactTextString(m) }
func (*SessionSpec) ProtoMessage()               {}
func (*SessionSpec) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{10} }

func (m *SessionSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SessionSpec) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionSpec) GetConnTrackEn() bool {
	if m != nil {
		return m.ConnTrackEn
	}
	return false
}

func (m *SessionSpec) GetTcpTsOption() bool {
	if m != nil {
		return m.TcpTsOption
	}
	return false
}

func (m *SessionSpec) GetIflowSynAckDelta() int32 {
	if m != nil {
		return m.IflowSynAckDelta
	}
	return 0
}

func (m *SessionSpec) GetInitiatorFlow() *FlowSpec {
	if m != nil {
		return m.InitiatorFlow
	}
	return nil
}

func (m *SessionSpec) GetResponderFlow() *FlowSpec {
	if m != nil {
		return m.ResponderFlow
	}
	return nil
}

// SessionRequestMsg is batched session request message
type SessionRequestMsg struct {
	Request []*SessionSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SessionRequestMsg) Reset()                    { *m = SessionRequestMsg{} }
func (m *SessionRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionRequestMsg) ProtoMessage()               {}
func (*SessionRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{11} }

func (m *SessionRequestMsg) GetRequest() []*SessionSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// FlowStatus captures the operational status of flows
// TODO - add all the indices we allocated internally - rewrite indices,
// dst lif or mcast replication index, rtt info etc.
type FlowStatus struct {
	FlowHandle    uint64         `protobuf:"fixed64,1,opt,name=flow_handle,json=flowHandle" json:"flow_handle,omitempty"`
	ConnTrackInfo *ConnTrackInfo `protobuf:"bytes,2,opt,name=conn_track_info,json=connTrackInfo" json:"conn_track_info,omitempty"`
}

func (m *FlowStatus) Reset()                    { *m = FlowStatus{} }
func (m *FlowStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowStatus) ProtoMessage()               {}
func (*FlowStatus) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{12} }

func (m *FlowStatus) GetFlowHandle() uint64 {
	if m != nil {
		return m.FlowHandle
	}
	return 0
}

func (m *FlowStatus) GetConnTrackInfo() *ConnTrackInfo {
	if m != nil {
		return m.ConnTrackInfo
	}
	return nil
}

// SessionStatus captures the operational status of the session
type SessionStatus struct {
	SessionHandle uint64      `protobuf:"fixed64,1,opt,name=session_handle,json=sessionHandle" json:"session_handle,omitempty"`
	IflowStatus   *FlowStatus `protobuf:"bytes,2,opt,name=iflow_status,json=iflowStatus" json:"iflow_status,omitempty"`
	RflowStatus   *FlowStatus `protobuf:"bytes,3,opt,name=rflow_status,json=rflowStatus" json:"rflow_status,omitempty"`
}

func (m *SessionStatus) Reset()                    { *m = SessionStatus{} }
func (m *SessionStatus) String() string            { return proto.CompactTextString(m) }
func (*SessionStatus) ProtoMessage()               {}
func (*SessionStatus) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{13} }

func (m *SessionStatus) GetSessionHandle() uint64 {
	if m != nil {
		return m.SessionHandle
	}
	return 0
}

func (m *SessionStatus) GetIflowStatus() *FlowStatus {
	if m != nil {
		return m.IflowStatus
	}
	return nil
}

func (m *SessionStatus) GetRflowStatus() *FlowStatus {
	if m != nil {
		return m.RflowStatus
	}
	return nil
}

// SessionResponse is the response to one SessionSpec
type SessionResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SessionStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SessionResponse) Reset()                    { *m = SessionResponse{} }
func (m *SessionResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionResponse) ProtoMessage()               {}
func (*SessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{14} }

func (m *SessionResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SessionResponse) GetStatus() *SessionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SessionResponseMsg is the response to SessionRequestMsg
type SessionResponseMsg struct {
	Response []*SessionResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SessionResponseMsg) Reset()                    { *m = SessionResponseMsg{} }
func (m *SessionResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionResponseMsg) ProtoMessage()               {}
func (*SessionResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{15} }

func (m *SessionResponseMsg) GetResponse() []*SessionResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SessionDeleteRequest is used to delete a session
type SessionDeleteRequest struct {
	Meta          *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	SessionHandle uint64      `protobuf:"fixed64,2,opt,name=session_handle,json=sessionHandle" json:"session_handle,omitempty"`
}

func (m *SessionDeleteRequest) Reset()                    { *m = SessionDeleteRequest{} }
func (m *SessionDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteRequest) ProtoMessage()               {}
func (*SessionDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{16} }

func (m *SessionDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SessionDeleteRequest) GetSessionHandle() uint64 {
	if m != nil {
		return m.SessionHandle
	}
	return 0
}

// SessionDeleteRequestMsg is batched session delete request
type SessionDeleteRequestMsg struct {
	Request []*SessionDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SessionDeleteRequestMsg) Reset()                    { *m = SessionDeleteRequestMsg{} }
func (m *SessionDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteRequestMsg) ProtoMessage()               {}
func (*SessionDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{17} }

func (m *SessionDeleteRequestMsg) GetRequest() []*SessionDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SessionDeleteResponseMsg is batched response to SessionDeleteRequestMsg
type SessionDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SessionDeleteResponseMsg) Reset()                    { *m = SessionDeleteResponseMsg{} }
func (m *SessionDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteResponseMsg) ProtoMessage()               {}
func (*SessionDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{18} }

func (m *SessionDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// SessionGetRequest  is used to get information about a session
type SessionGetRequest struct {
	Meta          *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	SessionHandle uint64      `protobuf:"fixed64,2,opt,name=session_handle,json=sessionHandle" json:"session_handle,omitempty"`
}

func (m *SessionGetRequest) Reset()                    { *m = SessionGetRequest{} }
func (m *SessionGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionGetRequest) ProtoMessage()               {}
func (*SessionGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{19} }

func (m *SessionGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SessionGetRequest) GetSessionHandle() uint64 {
	if m != nil {
		return m.SessionHandle
	}
	return 0
}

// SessionGetRequestMsg  is batched get request
type SessionGetRequestMsg struct {
	Request []*SessionGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SessionGetRequestMsg) Reset()                    { *m = SessionGetRequestMsg{} }
func (m *SessionGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionGetRequestMsg) ProtoMessage()               {}
func (*SessionGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{20} }

func (m *SessionGetRequestMsg) GetRequest() []*SessionGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// FlowStats contains all the stats collected per flow
// TODO - Srini please add all that we have in P4 for now
type FlowStats struct {
	FlowPackets   uint32 `protobuf:"fixed32,1,opt,name=flow_packets,json=flowPackets" json:"flow_packets,omitempty"`
	FlowBytes     uint64 `protobuf:"fixed64,2,opt,name=flow_bytes,json=flowBytes" json:"flow_bytes,omitempty"`
	RexmitPackets uint32 `protobuf:"fixed32,3,opt,name=rexmit_packets,json=rexmitPackets" json:"rexmit_packets,omitempty"`
}

func (m *FlowStats) Reset()                    { *m = FlowStats{} }
func (m *FlowStats) String() string            { return proto.CompactTextString(m) }
func (*FlowStats) ProtoMessage()               {}
func (*FlowStats) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{21} }

func (m *FlowStats) GetFlowPackets() uint32 {
	if m != nil {
		return m.FlowPackets
	}
	return 0
}

func (m *FlowStats) GetFlowBytes() uint64 {
	if m != nil {
		return m.FlowBytes
	}
	return 0
}

func (m *FlowStats) GetRexmitPackets() uint32 {
	if m != nil {
		return m.RexmitPackets
	}
	return 0
}

// SessionStats captures statistics of all its constituent flows
type SessionStats struct {
	FlowStats []*FlowStats `protobuf:"bytes,1,rep,name=flow_stats,json=flowStats" json:"flow_stats,omitempty"`
}

func (m *SessionStats) Reset()                    { *m = SessionStats{} }
func (m *SessionStats) String() string            { return proto.CompactTextString(m) }
func (*SessionStats) ProtoMessage()               {}
func (*SessionStats) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{22} }

func (m *SessionStats) GetFlowStats() []*FlowStats {
	if m != nil {
		return m.FlowStats
	}
	return nil
}

// SessionGetResponse is response to one SessionGetRequest
type SessionGetResponse struct {
	SessionSpec   *SessionSpec   `protobuf:"bytes,1,opt,name=session_spec,json=sessionSpec" json:"session_spec,omitempty"`
	SessionStatus *SessionStatus `protobuf:"bytes,2,opt,name=session_status,json=sessionStatus" json:"session_status,omitempty"`
	SessionStats  *SessionStats  `protobuf:"bytes,3,opt,name=session_stats,json=sessionStats" json:"session_stats,omitempty"`
}

func (m *SessionGetResponse) Reset()                    { *m = SessionGetResponse{} }
func (m *SessionGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionGetResponse) ProtoMessage()               {}
func (*SessionGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{23} }

func (m *SessionGetResponse) GetSessionSpec() *SessionSpec {
	if m != nil {
		return m.SessionSpec
	}
	return nil
}

func (m *SessionGetResponse) GetSessionStatus() *SessionStatus {
	if m != nil {
		return m.SessionStatus
	}
	return nil
}

func (m *SessionGetResponse) GetSessionStats() *SessionStats {
	if m != nil {
		return m.SessionStats
	}
	return nil
}

// SesssionGetResponseMsg is batched response to SesssionGetRequestMsg
type SessionGetResponseMsg struct {
	Response []*SessionGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SessionGetResponseMsg) Reset()                    { *m = SessionGetResponseMsg{} }
func (m *SessionGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionGetResponseMsg) ProtoMessage()               {}
func (*SessionGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{24} }

func (m *SessionGetResponseMsg) GetResponse() []*SessionGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowKeyL2)(nil), "session.FlowKeyL2")
	proto.RegisterType((*FlowKeyTcpUdpInfo)(nil), "session.FlowKeyTcpUdpInfo")
	proto.RegisterType((*FlowKeyICMPInfo)(nil), "session.FlowKeyICMPInfo")
	proto.RegisterType((*FlowKeyV4)(nil), "session.FlowKeyV4")
	proto.RegisterType((*FlowKeyV6)(nil), "session.FlowKeyV6")
	proto.RegisterType((*FlowKey)(nil), "session.FlowKey")
	proto.RegisterType((*FlowInfo)(nil), "session.FlowInfo")
	proto.RegisterType((*ConnTrackInfo)(nil), "session.ConnTrackInfo")
	proto.RegisterType((*FlowData)(nil), "session.FlowData")
	proto.RegisterType((*FlowSpec)(nil), "session.FlowSpec")
	proto.RegisterType((*SessionSpec)(nil), "session.SessionSpec")
	proto.RegisterType((*SessionRequestMsg)(nil), "session.SessionRequestMsg")
	proto.RegisterType((*FlowStatus)(nil), "session.FlowStatus")
	proto.RegisterType((*SessionStatus)(nil), "session.SessionStatus")
	proto.RegisterType((*SessionResponse)(nil), "session.SessionResponse")
	proto.RegisterType((*SessionResponseMsg)(nil), "session.SessionResponseMsg")
	proto.RegisterType((*SessionDeleteRequest)(nil), "session.SessionDeleteRequest")
	proto.RegisterType((*SessionDeleteRequestMsg)(nil), "session.SessionDeleteRequestMsg")
	proto.RegisterType((*SessionDeleteResponseMsg)(nil), "session.SessionDeleteResponseMsg")
	proto.RegisterType((*SessionGetRequest)(nil), "session.SessionGetRequest")
	proto.RegisterType((*SessionGetRequestMsg)(nil), "session.SessionGetRequestMsg")
	proto.RegisterType((*FlowStats)(nil), "session.FlowStats")
	proto.RegisterType((*SessionStats)(nil), "session.SessionStats")
	proto.RegisterType((*SessionGetResponse)(nil), "session.SessionGetResponse")
	proto.RegisterType((*SessionGetResponseMsg)(nil), "session.SessionGetResponseMsg")
	proto.RegisterEnum("session.NatType", NatType_name, NatType_value)
	proto.RegisterEnum("session.FlowAction", FlowAction_name, FlowAction_value)
	proto.RegisterEnum("session.FlowTCPState", FlowTCPState_name, FlowTCPState_value)
	proto.RegisterEnum("session.FlowType", FlowType_name, FlowType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Session service

type SessionClient interface {
	SessionCreate(ctx context.Context, in *SessionRequestMsg, opts ...grpc.CallOption) (*SessionResponseMsg, error)
	SessionDelete(ctx context.Context, in *SessionDeleteRequestMsg, opts ...grpc.CallOption) (*SessionDeleteResponseMsg, error)
	SessionGet(ctx context.Context, in *SessionGetRequestMsg, opts ...grpc.CallOption) (*SessionGetResponseMsg, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) SessionCreate(ctx context.Context, in *SessionRequestMsg, opts ...grpc.CallOption) (*SessionResponseMsg, error) {
	out := new(SessionResponseMsg)
	err := grpc.Invoke(ctx, "/session.Session/SessionCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) SessionDelete(ctx context.Context, in *SessionDeleteRequestMsg, opts ...grpc.CallOption) (*SessionDeleteResponseMsg, error) {
	out := new(SessionDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/session.Session/SessionDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) SessionGet(ctx context.Context, in *SessionGetRequestMsg, opts ...grpc.CallOption) (*SessionGetResponseMsg, error) {
	out := new(SessionGetResponseMsg)
	err := grpc.Invoke(ctx, "/session.Session/SessionGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Session service

type SessionServer interface {
	SessionCreate(context.Context, *SessionRequestMsg) (*SessionResponseMsg, error)
	SessionDelete(context.Context, *SessionDeleteRequestMsg) (*SessionDeleteResponseMsg, error)
	SessionGet(context.Context, *SessionGetRequestMsg) (*SessionGetResponseMsg, error)
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_SessionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SessionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/SessionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SessionCreate(ctx, req.(*SessionRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_SessionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SessionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/SessionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SessionDelete(ctx, req.(*SessionDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_SessionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SessionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/SessionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SessionGet(ctx, req.(*SessionGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionCreate",
			Handler:    _Session_SessionCreate_Handler,
		},
		{
			MethodName: "SessionDelete",
			Handler:    _Session_SessionDelete_Handler,
		},
		{
			MethodName: "SessionGet",
			Handler:    _Session_SessionGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}

func init() { proto.RegisterFile("session.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 1768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4f, 0x6f, 0xdb, 0xc8,
	0x15, 0x8f, 0x24, 0x5b, 0x94, 0x9e, 0x2c, 0x9b, 0x9e, 0xc4, 0x89, 0xd6, 0x6e, 0xb2, 0x59, 0xa2,
	0x01, 0xd2, 0x6c, 0x57, 0x45, 0x55, 0xaf, 0xb7, 0x28, 0xd0, 0x16, 0xb2, 0xa4, 0x8d, 0xb5, 0x91,
	0x25, 0x65, 0xc8, 0xc6, 0xc8, 0x5e, 0x08, 0x86, 0x1c, 0x3b, 0xac, 0x25, 0x92, 0xd6, 0x8c, 0x93,
	0x75, 0x3e, 0x4b, 0xcf, 0xfd, 0x0e, 0x45, 0x81, 0x9e, 0x7b, 0x2a, 0xd0, 0xef, 0xd2, 0xde, 0x7a,
	0x28, 0xe6, 0xcd, 0x90, 0x92, 0x28, 0x39, 0xbb, 0x40, 0xd1, 0xc3, 0x9e, 0x34, 0xf3, 0x7b, 0x7f,
	0xe6, 0xbd, 0xf7, 0x7b, 0x6f, 0x86, 0x82, 0x3a, 0x67, 0x9c, 0x87, 0x71, 0xd4, 0x4c, 0x66, 0xb1,
	0x88, 0x89, 0xa1, 0xb7, 0xfb, 0x35, 0x71, 0x93, 0x30, 0xae, 0xd0, 0xfd, 0xea, 0x55, 0x9c, 0x2e,
	0x77, 0xc2, 0x48, 0xb0, 0xd9, 0xb9, 0xe7, 0x33, 0x05, 0x58, 0xef, 0xa0, 0xfa, 0xf5, 0x24, 0x7e,
	0xff, 0x82, 0xdd, 0x0c, 0x5a, 0x84, 0xc0, 0x06, 0x9f, 0x7a, 0x7e, 0xa3, 0xf0, 0xb8, 0xf0, 0xb4,
	0x4c, 0x71, 0x2d, 0xb1, 0x40, 0x62, 0x45, 0x85, 0xc9, 0x35, 0x79, 0x08, 0xc0, 0xc4, 0x5b, 0x36,
	0x73, 0xe5, 0x29, 0x8d, 0x8d, 0xc7, 0x85, 0xa7, 0x75, 0x5a, 0x45, 0xc4, 0xb9, 0x49, 0x18, 0xb1,
	0xa0, 0x3e, 0x69, 0xb9, 0x9c, 0x5d, 0x4c, 0x59, 0x24, 0xdc, 0x30, 0x68, 0x94, 0x50, 0xa3, 0x36,
	0x69, 0xd9, 0x0a, 0xeb, 0x07, 0xd6, 0xef, 0x61, 0x57, 0x9f, 0xeb, 0xf8, 0xc9, 0x1f, 0x82, 0xa4,
	0x1f, 0x9d, 0xc7, 0xe4, 0x1e, 0x6c, 0xf2, 0x24, 0x9e, 0x09, 0x0c, 0xa0, 0x4e, 0xd5, 0x46, 0xa2,
	0x01, 0xa2, 0x45, 0x85, 0xe2, 0xc6, 0xea, 0xc3, 0x8e, 0x76, 0xd0, 0xef, 0x9c, 0x8e, 0xd1, 0x9c,
	0xc0, 0x06, 0x06, 0xa4, 0xac, 0x71, 0x2d, 0x31, 0x3f, 0x0e, 0x98, 0xb6, 0xc5, 0x35, 0xd9, 0x86,
	0x62, 0x16, 0x54, 0x31, 0x0c, 0xac, 0x7f, 0x16, 0xb2, 0x22, 0xbc, 0x3a, 0x24, 0x26, 0x94, 0x78,
	0x98, 0xa0, 0x13, 0x83, 0xca, 0xa5, 0x44, 0x82, 0x30, 0x41, 0x17, 0x06, 0x95, 0x4b, 0xf2, 0x73,
	0xa8, 0x84, 0x89, 0x8b, 0x15, 0x44, 0x3f, 0xdb, 0xad, 0xdd, 0xa6, 0xaa, 0x78, 0x7f, 0x3c, 0x96,
	0xa8, 0x1f, 0x4f, 0xa8, 0x11, 0x26, 0xb8, 0x26, 0x5f, 0x82, 0x21, 0xfc, 0xc4, 0xbd, 0x0e, 0x12,
	0xac, 0x55, 0xad, 0xb5, 0xdf, 0x4c, 0x69, 0x5b, 0xa9, 0xc1, 0xc9, 0x1d, 0x5a, 0x16, 0xb8, 0x23,
	0x4d, 0xd8, 0x08, 0xfd, 0x69, 0xd2, 0xd8, 0x44, 0x9b, 0x46, 0xde, 0x26, 0x4d, 0xfb, 0xe4, 0x0e,
	0x45, 0xbd, 0xe3, 0x1a, 0x54, 0x27, 0x87, 0xee, 0x79, 0xc8, 0x26, 0x01, 0xb7, 0xfe, 0xbd, 0x90,
	0xd3, 0x11, 0xb1, 0xe6, 0x39, 0xd5, 0x5a, 0x66, 0x16, 0x6a, 0x3b, 0x08, 0x66, 0x8c, 0x73, 0x95,
	0xa5, 0x35, 0xcf, 0x72, 0xad, 0xce, 0x8f, 0x23, 0xef, 0x3f, 0x15, 0xc0, 0xd0, 0x8a, 0xe4, 0x73,
	0x28, 0x4f, 0x5a, 0xee, 0x25, 0xbb, 0xd1, 0x89, 0x93, 0xbc, 0xab, 0x41, 0xeb, 0xe4, 0x0e, 0xdd,
	0x9c, 0xb4, 0xb4, 0xf2, 0xbb, 0x43, 0x54, 0x2e, 0xae, 0x57, 0x7e, 0x75, 0x28, 0x95, 0xdf, 0x1d,
	0xa6, 0xca, 0x47, 0xa8, 0x5c, 0xba, 0x45, 0xf9, 0x08, 0x95, 0x8f, 0x5e, 0xb0, 0x9b, 0x63, 0x80,
	0xca, 0xf9, 0x24, 0x7e, 0x2f, 0xd5, 0xad, 0x7f, 0x94, 0xa0, 0x22, 0x55, 0xb0, 0x5f, 0x0f, 0xa1,
	0x86, 0x02, 0xcf, 0x17, 0x61, 0x1c, 0x61, 0x90, 0xdb, 0xad, 0xbb, 0x4b, 0xae, 0xda, 0x28, 0xa2,
	0x70, 0x9e, 0xad, 0xc9, 0xe7, 0x50, 0x89, 0x3c, 0xa1, 0x46, 0xaf, 0x88, 0x26, 0x66, 0x66, 0x32,
	0xf4, 0x84, 0x9c, 0x40, 0x6a, 0x44, 0x6a, 0x41, 0x7e, 0x06, 0x72, 0xe9, 0x4a, 0xf2, 0x4b, 0xb7,
	0x10, 0x5b, 0x8e, 0x3c, 0x61, 0x87, 0x09, 0x39, 0x80, 0x2a, 0xaa, 0xe2, 0xa8, 0xa9, 0x99, 0x96,
	0x07, 0xd9, 0x38, 0x83, 0xda, 0x8f, 0x6c, 0x90, 0xcd, 0x8f, 0xf8, 0xe9, 0xce, 0xfd, 0xa8, 0x91,
	0x2d, 0x67, 0x7e, 0xba, 0xe8, 0xa7, 0x05, 0x55, 0xd9, 0x12, 0x5c, 0x78, 0x82, 0x35, 0x0c, 0x8c,
	0x7e, 0x6f, 0x29, 0x61, 0xa7, 0x33, 0xb6, 0xa5, 0x90, 0x56, 0x84, 0x9f, 0xe0, 0x8a, 0x7c, 0x09,
	0xdb, 0x61, 0xe4, 0x5e, 0xc5, 0x5c, 0x17, 0x8a, 0x37, 0x2a, 0x18, 0xc2, 0x4e, 0x53, 0xde, 0x6b,
	0x2f, 0x47, 0xb6, 0x2a, 0x0c, 0xa7, 0x5b, 0x61, 0xf4, 0x32, 0xe6, 0x7a, 0x27, 0xcd, 0xd8, 0xc5,
	0x92, 0x59, 0xf5, 0x16, 0x33, 0x76, 0xb1, 0x60, 0xf6, 0x05, 0xc0, 0xd5, 0x35, 0xbb, 0x66, 0xaa,
	0xc0, 0x80, 0x21, 0x6e, 0x37, 0xc3, 0x48, 0x9c, 0x37, 0x07, 0xe1, 0xf9, 0x4b, 0x2c, 0x6f, 0x15,
	0x35, 0xe4, 0xd2, 0xfa, 0x4b, 0x11, 0xea, 0x9d, 0x38, 0x8a, 0x9c, 0x99, 0xe7, 0x5f, 0x22, 0xab,
	0x3f, 0x85, 0x6d, 0x64, 0xd5, 0x9f, 0x31, 0x4f, 0x30, 0x57, 0x70, 0x7d, 0x9d, 0x6e, 0x49, 0xb4,
	0x83, 0xa0, 0xc3, 0xe5, 0x15, 0x8a, 0x5a, 0x6f, 0x6e, 0x04, 0xe3, 0xfa, 0x72, 0xad, 0x4a, 0xe4,
	0x58, 0x02, 0xe4, 0x33, 0x40, 0x75, 0x37, 0xf1, 0xfc, 0x4b, 0x26, 0x38, 0x92, 0x67, 0x50, 0x6c,
	0x97, 0xb1, 0x82, 0xc8, 0x13, 0xd8, 0x66, 0xdf, 0xf9, 0x2c, 0x91, 0x61, 0xbb, 0x6f, 0x42, 0xc1,
	0x91, 0x34, 0x83, 0xd6, 0x33, 0xf4, 0x38, 0x14, 0x9c, 0x3c, 0x82, 0x1a, 0x56, 0x9c, 0x5d, 0xb9,
	0xd1, 0xf5, 0x14, 0xd9, 0x33, 0xa8, 0x24, 0xc1, 0x66, 0x57, 0xc3, 0xeb, 0x69, 0x2a, 0xf7, 0xfc,
	0x4b, 0x94, 0x97, 0x33, 0x79, 0xdb, 0xbf, 0x94, 0xf2, 0x9f, 0x00, 0x48, 0xf9, 0xfb, 0x30, 0x72,
	0xf9, 0x07, 0xa4, 0xac, 0x8e, 0xdc, 0x9c, 0x85, 0x91, 0xfd, 0x41, 0x5e, 0xf5, 0x99, 0xd4, 0xf7,
	0x26, 0x0c, 0xa9, 0xa9, 0xd3, 0x9a, 0x56, 0x90, 0x10, 0x79, 0xa0, 0xae, 0x81, 0x29, 0x57, 0x0c,
	0xd4, 0x71, 0xd0, 0x4f, 0x39, 0xb7, 0x3e, 0xa8, 0x59, 0xe8, 0x7a, 0xc2, 0x23, 0x4d, 0xc0, 0xec,
	0xdd, 0x30, 0x3a, 0x8f, 0xf5, 0xb8, 0xee, 0x2e, 0x35, 0x86, 0xac, 0x2d, 0xc5, 0x41, 0xc2, 0x2a,
	0xff, 0x0e, 0x76, 0xfc, 0x38, 0x8a, 0x5c, 0x21, 0xeb, 0xae, 0xac, 0xd4, 0xdc, 0xde, 0xcf, 0xac,
	0x96, 0x68, 0xa1, 0x75, 0x7f, 0x71, 0x6b, 0x5d, 0xa8, 0xb3, 0xed, 0x84, 0xf9, 0x72, 0xa2, 0xd2,
	0x01, 0xcd, 0xae, 0xc8, 0xdc, 0x3c, 0x53, 0xe3, 0x5c, 0x5f, 0x2a, 0x69, 0xa0, 0x81, 0x27, 0x3c,
	0x7d, 0xe4, 0x72, 0xa0, 0x32, 0x1d, 0x15, 0xa8, 0x5c, 0x59, 0x7f, 0x2b, 0x42, 0xcd, 0x56, 0x62,
	0x3c, 0xec, 0x09, 0x6c, 0x4c, 0x99, 0xf0, 0xb2, 0x1c, 0xd5, 0x18, 0x8d, 0xde, 0xfc, 0x91, 0xf9,
	0xe2, 0x94, 0x09, 0x8f, 0xa2, 0x58, 0xf6, 0x87, 0x76, 0x2a, 0x1f, 0x50, 0xf5, 0xf4, 0x54, 0x35,
	0xd2, 0x0f, 0x64, 0xdd, 0x17, 0xd2, 0x67, 0x11, 0x36, 0x48, 0x85, 0xd6, 0xb2, 0x24, 0x7b, 0x51,
	0xca, 0x8d, 0xe0, 0x6e, 0x8c, 0xed, 0x80, 0xfd, 0x51, 0x41, 0x6e, 0x1c, 0x3e, 0x42, 0x88, 0x7c,
	0x01, 0x77, 0x43, 0x4c, 0x87, 0xdf, 0x44, 0xd8, 0x03, 0x01, 0x9b, 0x08, 0x0f, 0xbb, 0x64, 0x97,
	0x9a, 0x28, 0xb2, 0x6f, 0xa2, 0xb6, 0x7f, 0xd9, 0x95, 0x38, 0xf9, 0xb5, 0x1c, 0xc5, 0x50, 0x84,
	0x9e, 0x88, 0x67, 0xae, 0x14, 0x62, 0xbf, 0xe4, 0x2b, 0x20, 0xf3, 0xa4, 0xf5, 0x4c, 0x51, 0x42,
	0xd2, 0x72, 0xc6, 0x78, 0x12, 0x47, 0x01, 0xd3, 0x96, 0xc6, 0xad, 0x96, 0x99, 0xa2, 0x84, 0xac,
	0x0e, 0xec, 0xea, 0xfa, 0x51, 0x76, 0x75, 0xcd, 0xb8, 0x38, 0xe5, 0x17, 0xa4, 0x09, 0xc6, 0x4c,
	0xed, 0x1a, 0x85, 0xc7, 0xa5, 0xa7, 0xb5, 0xd6, 0xbd, 0xcc, 0xcf, 0x42, 0xb1, 0x69, 0xaa, 0x64,
	0x4d, 0x01, 0xd0, 0xbf, 0xf0, 0xc4, 0x35, 0x27, 0x9f, 0xea, 0x8b, 0xf7, 0xad, 0x17, 0x05, 0x13,
	0xa6, 0xe7, 0x13, 0xe7, 0xf1, 0x04, 0x91, 0xff, 0xb9, 0xbb, 0xfe, 0x5c, 0x80, 0x7a, 0x1a, 0x87,
	0x3a, 0xf2, 0x09, 0x6c, 0xa7, 0x7c, 0x2e, 0x9d, 0x9a, 0x7e, 0xc0, 0xe9, 0x83, 0x8f, 0x60, 0x4b,
	0xf3, 0x81, 0x66, 0xfa, 0xd4, 0xe5, 0x37, 0x41, 0x79, 0xa4, 0x35, 0xc5, 0x8e, 0x72, 0x7f, 0x04,
	0x5b, 0xb3, 0x45, 0xbb, 0xd2, 0x47, 0xec, 0x66, 0x73, 0x3b, 0x6b, 0x06, 0x3b, 0x59, 0x71, 0x65,
	0xd1, 0x39, 0x23, 0xbf, 0x00, 0xf0, 0x92, 0x30, 0x75, 0x54, 0xd0, 0x2f, 0x8c, 0x6a, 0xd3, 0x76,
	0x12, 0x6a, 0x2f, 0x55, 0x2f, 0x5d, 0x92, 0x26, 0x94, 0x97, 0xa2, 0xbd, 0xbf, 0x42, 0x85, 0x32,
	0xd1, 0x5a, 0xd6, 0x37, 0x40, 0x72, 0x67, 0x4a, 0x46, 0x0f, 0xa1, 0x32, 0xd3, 0x5b, 0x4d, 0x69,
	0x23, 0xef, 0x27, 0x55, 0xa7, 0x99, 0xa6, 0x15, 0xc0, 0x3d, 0x2d, 0xec, 0xb2, 0x09, 0x13, 0x4c,
	0xb7, 0xc8, 0x0f, 0x9d, 0xb2, 0x55, 0x56, 0x8a, 0x6b, 0x58, 0xb1, 0x28, 0x3c, 0x58, 0x77, 0x8a,
	0x0c, 0xfb, 0xab, 0x7c, 0x23, 0x3e, 0xcc, 0x47, 0xbd, 0x64, 0x32, 0xef, 0xc8, 0x17, 0xd0, 0xc8,
	0x29, 0xcc, 0x6b, 0x91, 0xa7, 0xa0, 0xf4, 0x3d, 0x14, 0x58, 0x5e, 0x36, 0x23, 0xcf, 0x99, 0xf8,
	0xff, 0xd4, 0x60, 0x90, 0x55, 0x7a, 0x7e, 0x84, 0xe2, 0x2d, 0x57, 0x80, 0xfd, 0x7c, 0x01, 0xe6,
	0xfa, 0xf3, 0xec, 0x85, 0xfa, 0x3a, 0x95, 0xe1, 0xaf, 0x3e, 0x76, 0x85, 0xd5, 0xc7, 0xee, 0x7b,
	0x9e, 0xcb, 0x27, 0xf2, 0x76, 0xf9, 0x6e, 0x1a, 0x8a, 0xdc, 0x83, 0x59, 0x57, 0xa8, 0xf6, 0x62,
	0xb5, 0x61, 0x6b, 0xa1, 0x25, 0x39, 0xf9, 0xa5, 0xf6, 0x2a, 0x0b, 0xcd, 0x75, 0xf8, 0x64, 0x65,
	0x66, 0xb8, 0x3a, 0x09, 0x97, 0xd6, 0xdf, 0x0b, 0x59, 0xf7, 0x62, 0x5e, 0x7a, 0x68, 0xbe, 0x82,
	0xad, 0xb4, 0x88, 0x3c, 0x61, 0xbe, 0xae, 0xf9, 0xfa, 0x4b, 0xa9, 0xc6, 0x17, 0x9e, 0x83, 0xdf,
	0xce, 0xab, 0xff, 0x83, 0x86, 0x28, 0x65, 0x45, 0xcf, 0xde, 0x6f, 0xb2, 0x7f, 0x80, 0x3a, 0x09,
	0x35, 0xf8, 0x7b, 0xeb, 0xac, 0x39, 0xdd, 0x5a, 0x30, 0xe6, 0xd6, 0x18, 0xf6, 0x56, 0x33, 0x51,
	0x3d, 0x9d, 0x1f, 0xc5, 0x83, 0xb5, 0x9c, 0xe6, 0xa7, 0xf1, 0xd9, 0xb7, 0x60, 0xe8, 0x2f, 0x50,
	0xb2, 0x0b, 0xf5, 0x61, 0xdb, 0x71, 0x9d, 0xd7, 0xe3, 0x9e, 0x3b, 0x1c, 0x0d, 0x7b, 0xe6, 0x9d,
	0x25, 0xc8, 0x1e, 0xb6, 0x1d, 0xb3, 0xb0, 0x04, 0x75, 0x25, 0x54, 0x24, 0xf7, 0x81, 0x64, 0x90,
	0x73, 0xd6, 0xef, 0xf4, 0x5c, 0x89, 0x97, 0x9e, 0x8d, 0xd4, 0x0d, 0xae, 0x3f, 0x82, 0xef, 0x81,
	0xf9, 0xf5, 0x60, 0x74, 0xe6, 0xb6, 0x3b, 0x4e, 0x7f, 0x34, 0x4c, 0x4f, 0xd8, 0x83, 0xdd, 0x45,
	0xb4, 0x3d, 0x18, 0x8c, 0xce, 0xcc, 0x42, 0x5e, 0xb9, 0x4b, 0x47, 0x63, 0xb3, 0xf8, 0xec, 0x5f,
	0x05, 0xd8, 0x5a, 0xfc, 0xe2, 0x24, 0x0f, 0xe0, 0x2e, 0xaa, 0x39, 0x9d, 0xb1, 0x6b, 0x3b, 0x6d,
	0x27, 0x0b, 0x7c, 0x55, 0xd0, 0x1f, 0xf6, 0x65, 0xf8, 0x07, 0xf0, 0x20, 0x27, 0xb0, 0x5f, 0x0f,
	0x5d, 0xbb, 0x37, 0x94, 0x89, 0x7c, 0x0a, 0x07, 0x6b, 0x84, 0xed, 0xce, 0x0b, 0x97, 0x76, 0x5e,
	0x75, 0xcd, 0x12, 0xd9, 0x87, 0xfb, 0x39, 0x85, 0xce, 0x60, 0x64, 0xf7, 0x87, 0xcf, 0xcd, 0x0d,
	0xf2, 0x10, 0x3e, 0x59, 0x23, 0xeb, 0xb9, 0x67, 0xed, 0xbe, 0x63, 0x6e, 0x92, 0x47, 0xb0, 0x9f,
	0x13, 0xf7, 0x6c, 0xa7, 0x7d, 0x3c, 0xe8, 0xdb, 0x27, 0xbd, 0xae, 0x59, 0x26, 0x9f, 0xc0, 0xde,
	0x3a, 0xf3, 0xae, 0x69, 0x3c, 0xfb, 0x6b, 0x41, 0x7d, 0xf9, 0x38, 0xea, 0xdf, 0xf1, 0xb6, 0xd2,
	0x5b, 0xa0, 0x29, 0xb3, 0x95, 0x58, 0x67, 0xd0, 0xb6, 0xed, 0x7e, 0xc7, 0x1d, 0xf6, 0x3b, 0x66,
	0x61, 0x59, 0x9d, 0x76, 0x4f, 0xdb, 0x66, 0x31, 0x2b, 0xae, 0x22, 0xac, 0x33, 0x76, 0x06, 0xb6,
	0x59, 0x22, 0x77, 0x61, 0x67, 0x8e, 0xf6, 0xc7, 0x76, 0xaf, 0x63, 0x6e, 0x48, 0xb6, 0x17, 0x4e,
	0xeb, 0xf6, 0xcc, 0xcd, 0x8c, 0x31, 0xd5, 0x14, 0xce, 0x88, 0xb6, 0x9f, 0xf7, 0xcc, 0xf2, 0xbc,
	0xe2, 0xe8, 0xb4, 0x37, 0xe8, 0x9d, 0xf6, 0x1c, 0xfa, 0xda, 0x34, 0x5a, 0xff, 0x29, 0x80, 0xa1,
	0x5b, 0x90, 0x7c, 0x93, 0xbd, 0xb1, 0xea, 0xab, 0x9a, 0xec, 0xaf, 0x3e, 0x18, 0xe9, 0x35, 0xb5,
	0x7f, 0x70, 0xdb, 0x63, 0x72, 0xca, 0x2f, 0xac, 0x3b, 0xe4, 0x55, 0xe6, 0x4b, 0xdd, 0xc6, 0xe4,
	0xf1, 0x47, 0xaf, 0x71, 0xe9, 0xf1, 0xb3, 0xdb, 0x34, 0x16, 0xfd, 0x9e, 0x02, 0xcc, 0x27, 0x86,
	0x3c, 0xbc, 0xfd, 0x6a, 0x94, 0x1e, 0x1f, 0x7d, 0x64, 0xca, 0xd0, 0xdd, 0x31, 0x7c, 0x5b, 0x79,
	0xeb, 0x4d, 0xf0, 0xff, 0xf7, 0x9b, 0x32, 0xfe, 0xfc, 0xea, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xf1, 0xca, 0x72, 0x94, 0x03, 0x12, 0x00, 0x00,
}
