// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: session.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Types of NAT
type NatType int32

const (
	NatType_NAT_TYPE_NONE      NatType = 0
	NatType_NAT_TYPE_SNAT      NatType = 1
	NatType_NAT_TYPE_DNAT      NatType = 2
	NatType_NAT_TYPE_TWICE_NAT NatType = 3
)

var NatType_name = map[int32]string{
	0: "NAT_TYPE_NONE",
	1: "NAT_TYPE_SNAT",
	2: "NAT_TYPE_DNAT",
	3: "NAT_TYPE_TWICE_NAT",
}
var NatType_value = map[string]int32{
	"NAT_TYPE_NONE":      0,
	"NAT_TYPE_SNAT":      1,
	"NAT_TYPE_DNAT":      2,
	"NAT_TYPE_TWICE_NAT": 3,
}

func (x NatType) String() string {
	return proto.EnumName(NatType_name, int32(x))
}
func (NatType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{0} }

// Flow actions
type FlowAction int32

const (
	FlowAction_FLOW_ACTION_NONE  FlowAction = 0
	FlowAction_FLOW_ACTION_ALLOW FlowAction = 1
	FlowAction_FLOW_ACTION_DROP  FlowAction = 2
)

var FlowAction_name = map[int32]string{
	0: "FLOW_ACTION_NONE",
	1: "FLOW_ACTION_ALLOW",
	2: "FLOW_ACTION_DROP",
}
var FlowAction_value = map[string]int32{
	"FLOW_ACTION_NONE":  0,
	"FLOW_ACTION_ALLOW": 1,
	"FLOW_ACTION_DROP":  2,
}

func (x FlowAction) String() string {
	return proto.EnumName(FlowAction_name, int32(x))
}
func (FlowAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{1} }

// Flow TCP states
// TODO: Srini, please define all other states
type FlowTCPState int32

const (
	FlowTCPState_FLOW_TCP_STATE_INIT           FlowTCPState = 0
	FlowTCPState_FLOW_TCP_STATE_SYN_RCVD       FlowTCPState = 1
	FlowTCPState_FLOW_TCP_STATE_ACK_RCVD       FlowTCPState = 2
	FlowTCPState_FLOW_TCP_STATE_SYN_ACK_RCVD   FlowTCPState = 3
	FlowTCPState_FLOW_TCP_STATE_ESTABLISHED    FlowTCPState = 4
	FlowTCPState_FLOW_TCP_STATE_FIN_RCVD       FlowTCPState = 5
	FlowTCPState_FLOW_TCP_STATE_BIDIR_FIN_RCVD FlowTCPState = 6
	FlowTCPState_FLOW_TCP_STATE_RESET          FlowTCPState = 7
)

var FlowTCPState_name = map[int32]string{
	0: "FLOW_TCP_STATE_INIT",
	1: "FLOW_TCP_STATE_SYN_RCVD",
	2: "FLOW_TCP_STATE_ACK_RCVD",
	3: "FLOW_TCP_STATE_SYN_ACK_RCVD",
	4: "FLOW_TCP_STATE_ESTABLISHED",
	5: "FLOW_TCP_STATE_FIN_RCVD",
	6: "FLOW_TCP_STATE_BIDIR_FIN_RCVD",
	7: "FLOW_TCP_STATE_RESET",
}
var FlowTCPState_value = map[string]int32{
	"FLOW_TCP_STATE_INIT":           0,
	"FLOW_TCP_STATE_SYN_RCVD":       1,
	"FLOW_TCP_STATE_ACK_RCVD":       2,
	"FLOW_TCP_STATE_SYN_ACK_RCVD":   3,
	"FLOW_TCP_STATE_ESTABLISHED":    4,
	"FLOW_TCP_STATE_FIN_RCVD":       5,
	"FLOW_TCP_STATE_BIDIR_FIN_RCVD": 6,
	"FLOW_TCP_STATE_RESET":          7,
}

func (x FlowTCPState) String() string {
	return proto.EnumName(FlowTCPState_name, int32(x))
}
func (FlowTCPState) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{2} }

// App Types ... In sync with p4/nw/include/defines.h
// TODO: Revisit once we decide if flow drives app_id or service_lif
type FlowType int32

const (
	FlowType_FLOW_TYPE_NONE        FlowType = 0
	FlowType_FLOW_TYPE_CLASSIC_NIC FlowType = 1
	FlowType_FLOW_TYPE_RDMA        FlowType = 2
	FlowType_FLOW_TYPE_TCPTLS      FlowType = 3
	FlowType_FLOW_TYPE_IPSEC       FlowType = 4
	FlowType_FLOW_TYPE_NDE         FlowType = 5
	FlowType_FLOW_TYPE_STORAGE     FlowType = 6
	FlowType_FLOW_TYPE_TELEMETRY   FlowType = 7
)

var FlowType_name = map[int32]string{
	0: "FLOW_TYPE_NONE",
	1: "FLOW_TYPE_CLASSIC_NIC",
	2: "FLOW_TYPE_RDMA",
	3: "FLOW_TYPE_TCPTLS",
	4: "FLOW_TYPE_IPSEC",
	5: "FLOW_TYPE_NDE",
	6: "FLOW_TYPE_STORAGE",
	7: "FLOW_TYPE_TELEMETRY",
}
var FlowType_value = map[string]int32{
	"FLOW_TYPE_NONE":        0,
	"FLOW_TYPE_CLASSIC_NIC": 1,
	"FLOW_TYPE_RDMA":        2,
	"FLOW_TYPE_TCPTLS":      3,
	"FLOW_TYPE_IPSEC":       4,
	"FLOW_TYPE_NDE":         5,
	"FLOW_TYPE_STORAGE":     6,
	"FLOW_TYPE_TELEMETRY":   7,
}

func (x FlowType) String() string {
	return proto.EnumName(FlowType_name, int32(x))
}
func (FlowType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{3} }

// flow instance primary vs secondary
type FlowInstance int32

const (
	FlowInstance_FLOW_INSTANCE_NONE      FlowInstance = 0
	FlowInstance_FLOW_INSTANCE_PRIMARY   FlowInstance = 1
	FlowInstance_FLOW_INSTANCE_SECONDARY FlowInstance = 2
)

var FlowInstance_name = map[int32]string{
	0: "FLOW_INSTANCE_NONE",
	1: "FLOW_INSTANCE_PRIMARY",
	2: "FLOW_INSTANCE_SECONDARY",
}
var FlowInstance_value = map[string]int32{
	"FLOW_INSTANCE_NONE":      0,
	"FLOW_INSTANCE_PRIMARY":   1,
	"FLOW_INSTANCE_SECONDARY": 2,
}

func (x FlowInstance) String() string {
	return proto.EnumName(FlowInstance_name, int32(x))
}
func (FlowInstance) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{4} }

// Types of NAT
type FTPCmdType int32

const (
	FTPCmdType_FTP_CMD_REQUEST  FTPCmdType = 0
	FTPCmdType_FTP_CMD_RESPONSE FTPCmdType = 1
)

var FTPCmdType_name = map[int32]string{
	0: "FTP_CMD_REQUEST",
	1: "FTP_CMD_RESPONSE",
}
var FTPCmdType_value = map[string]int32{
	"FTP_CMD_REQUEST":  0,
	"FTP_CMD_RESPONSE": 1,
}

func (x FTPCmdType) String() string {
	return proto.EnumName(FTPCmdType_name, int32(x))
}
func (FTPCmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{5} }

// Key for L2 flows (i.e, non-IP flows)
type FlowKeyL2 struct {
	Smac        uint64 `protobuf:"fixed64,1,opt,name=smac,proto3" json:"smac,omitempty"`
	Dmac        uint64 `protobuf:"fixed64,2,opt,name=dmac,proto3" json:"dmac,omitempty"`
	EtherType   uint32 `protobuf:"varint,4,opt,name=ether_type,json=etherType,proto3" json:"ether_type,omitempty"`
	L2SegmentId uint32 `protobuf:"varint,3,opt,name=l2_segment_id,json=l2SegmentId,proto3" json:"l2_segment_id,omitempty"`
}

func (m *FlowKeyL2) Reset()                    { *m = FlowKeyL2{} }
func (m *FlowKeyL2) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyL2) ProtoMessage()               {}
func (*FlowKeyL2) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{0} }

func (m *FlowKeyL2) GetSmac() uint64 {
	if m != nil {
		return m.Smac
	}
	return 0
}

func (m *FlowKeyL2) GetDmac() uint64 {
	if m != nil {
		return m.Dmac
	}
	return 0
}

func (m *FlowKeyL2) GetEtherType() uint32 {
	if m != nil {
		return m.EtherType
	}
	return 0
}

func (m *FlowKeyL2) GetL2SegmentId() uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return 0
}

type FlowKeyTcpUdpInfo struct {
	Sport uint32 `protobuf:"varint,1,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport uint32 `protobuf:"varint,2,opt,name=dport,proto3" json:"dport,omitempty"`
}

func (m *FlowKeyTcpUdpInfo) Reset()                    { *m = FlowKeyTcpUdpInfo{} }
func (m *FlowKeyTcpUdpInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyTcpUdpInfo) ProtoMessage()               {}
func (*FlowKeyTcpUdpInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{1} }

func (m *FlowKeyTcpUdpInfo) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *FlowKeyTcpUdpInfo) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

type FlowKeyICMPInfo struct {
	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Code uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id   uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FlowKeyICMPInfo) Reset()                    { *m = FlowKeyICMPInfo{} }
func (m *FlowKeyICMPInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyICMPInfo) ProtoMessage()               {}
func (*FlowKeyICMPInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{2} }

func (m *FlowKeyICMPInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *FlowKeyICMPInfo) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FlowKeyICMPInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FlowKeyESPInfo struct {
	Spi uint32 `protobuf:"varint,1,opt,name=spi,proto3" json:"spi,omitempty"`
}

func (m *FlowKeyESPInfo) Reset()                    { *m = FlowKeyESPInfo{} }
func (m *FlowKeyESPInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyESPInfo) ProtoMessage()               {}
func (*FlowKeyESPInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{3} }

func (m *FlowKeyESPInfo) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

// Key for IPv4 flows
type FlowKeyV4 struct {
	Sip     uint32     `protobuf:"fixed32,1,opt,name=sip,proto3" json:"sip,omitempty"`
	Dip     uint32     `protobuf:"fixed32,2,opt,name=dip,proto3" json:"dip,omitempty"`
	IpProto IPProtocol `protobuf:"varint,3,opt,name=ip_proto,json=ipProto,proto3,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	// TODO: add AH etc. here
	//
	// Types that are valid to be assigned to L4Fields:
	//	*FlowKeyV4_TcpUdp
	//	*FlowKeyV4_Icmp
	//	*FlowKeyV4_Esp
	L4Fields isFlowKeyV4_L4Fields `protobuf_oneof:"l4_fields"`
}

func (m *FlowKeyV4) Reset()                    { *m = FlowKeyV4{} }
func (m *FlowKeyV4) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyV4) ProtoMessage()               {}
func (*FlowKeyV4) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{4} }

type isFlowKeyV4_L4Fields interface {
	isFlowKeyV4_L4Fields()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowKeyV4_TcpUdp struct {
	TcpUdp *FlowKeyTcpUdpInfo `protobuf:"bytes,4,opt,name=tcp_udp,json=tcpUdp,oneof"`
}
type FlowKeyV4_Icmp struct {
	Icmp *FlowKeyICMPInfo `protobuf:"bytes,5,opt,name=icmp,oneof"`
}
type FlowKeyV4_Esp struct {
	Esp *FlowKeyESPInfo `protobuf:"bytes,6,opt,name=esp,oneof"`
}

func (*FlowKeyV4_TcpUdp) isFlowKeyV4_L4Fields() {}
func (*FlowKeyV4_Icmp) isFlowKeyV4_L4Fields()   {}
func (*FlowKeyV4_Esp) isFlowKeyV4_L4Fields()    {}

func (m *FlowKeyV4) GetL4Fields() isFlowKeyV4_L4Fields {
	if m != nil {
		return m.L4Fields
	}
	return nil
}

func (m *FlowKeyV4) GetSip() uint32 {
	if m != nil {
		return m.Sip
	}
	return 0
}

func (m *FlowKeyV4) GetDip() uint32 {
	if m != nil {
		return m.Dip
	}
	return 0
}

func (m *FlowKeyV4) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *FlowKeyV4) GetTcpUdp() *FlowKeyTcpUdpInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV4_TcpUdp); ok {
		return x.TcpUdp
	}
	return nil
}

func (m *FlowKeyV4) GetIcmp() *FlowKeyICMPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV4_Icmp); ok {
		return x.Icmp
	}
	return nil
}

func (m *FlowKeyV4) GetEsp() *FlowKeyESPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV4_Esp); ok {
		return x.Esp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowKeyV4) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowKeyV4_OneofMarshaler, _FlowKeyV4_OneofUnmarshaler, _FlowKeyV4_OneofSizer, []interface{}{
		(*FlowKeyV4_TcpUdp)(nil),
		(*FlowKeyV4_Icmp)(nil),
		(*FlowKeyV4_Esp)(nil),
	}
}

func _FlowKeyV4_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowKeyV4)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV4_TcpUdp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpUdp); err != nil {
			return err
		}
	case *FlowKeyV4_Icmp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Icmp); err != nil {
			return err
		}
	case *FlowKeyV4_Esp:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Esp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowKeyV4.L4Fields has unexpected type %T", x)
	}
	return nil
}

func _FlowKeyV4_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowKeyV4)
	switch tag {
	case 4: // l4_fields.tcp_udp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyTcpUdpInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV4_TcpUdp{msg}
		return true, err
	case 5: // l4_fields.icmp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyICMPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV4_Icmp{msg}
		return true, err
	case 6: // l4_fields.esp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyESPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV4_Esp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowKeyV4_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowKeyV4)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV4_TcpUdp:
		s := proto.Size(x.TcpUdp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV4_Icmp:
		s := proto.Size(x.Icmp)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV4_Esp:
		s := proto.Size(x.Esp)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Key for IPv6 flows
type FlowKeyV6 struct {
	Sip     *IPAddress `protobuf:"bytes,1,opt,name=sip" json:"sip,omitempty"`
	Dip     *IPAddress `protobuf:"bytes,2,opt,name=dip" json:"dip,omitempty"`
	IpProto IPProtocol `protobuf:"varint,3,opt,name=ip_proto,json=ipProto,proto3,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	// TODO: add AH etc. here
	//
	// Types that are valid to be assigned to L4Fields:
	//	*FlowKeyV6_TcpUdp
	//	*FlowKeyV6_Icmp
	//	*FlowKeyV6_Esp
	L4Fields isFlowKeyV6_L4Fields `protobuf_oneof:"l4_fields"`
}

func (m *FlowKeyV6) Reset()                    { *m = FlowKeyV6{} }
func (m *FlowKeyV6) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyV6) ProtoMessage()               {}
func (*FlowKeyV6) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{5} }

type isFlowKeyV6_L4Fields interface {
	isFlowKeyV6_L4Fields()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowKeyV6_TcpUdp struct {
	TcpUdp *FlowKeyTcpUdpInfo `protobuf:"bytes,4,opt,name=tcp_udp,json=tcpUdp,oneof"`
}
type FlowKeyV6_Icmp struct {
	Icmp *FlowKeyICMPInfo `protobuf:"bytes,5,opt,name=icmp,oneof"`
}
type FlowKeyV6_Esp struct {
	Esp *FlowKeyESPInfo `protobuf:"bytes,6,opt,name=esp,oneof"`
}

func (*FlowKeyV6_TcpUdp) isFlowKeyV6_L4Fields() {}
func (*FlowKeyV6_Icmp) isFlowKeyV6_L4Fields()   {}
func (*FlowKeyV6_Esp) isFlowKeyV6_L4Fields()    {}

func (m *FlowKeyV6) GetL4Fields() isFlowKeyV6_L4Fields {
	if m != nil {
		return m.L4Fields
	}
	return nil
}

func (m *FlowKeyV6) GetSip() *IPAddress {
	if m != nil {
		return m.Sip
	}
	return nil
}

func (m *FlowKeyV6) GetDip() *IPAddress {
	if m != nil {
		return m.Dip
	}
	return nil
}

func (m *FlowKeyV6) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *FlowKeyV6) GetTcpUdp() *FlowKeyTcpUdpInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV6_TcpUdp); ok {
		return x.TcpUdp
	}
	return nil
}

func (m *FlowKeyV6) GetIcmp() *FlowKeyICMPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV6_Icmp); ok {
		return x.Icmp
	}
	return nil
}

func (m *FlowKeyV6) GetEsp() *FlowKeyESPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV6_Esp); ok {
		return x.Esp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowKeyV6) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowKeyV6_OneofMarshaler, _FlowKeyV6_OneofUnmarshaler, _FlowKeyV6_OneofSizer, []interface{}{
		(*FlowKeyV6_TcpUdp)(nil),
		(*FlowKeyV6_Icmp)(nil),
		(*FlowKeyV6_Esp)(nil),
	}
}

func _FlowKeyV6_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowKeyV6)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV6_TcpUdp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpUdp); err != nil {
			return err
		}
	case *FlowKeyV6_Icmp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Icmp); err != nil {
			return err
		}
	case *FlowKeyV6_Esp:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Esp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowKeyV6.L4Fields has unexpected type %T", x)
	}
	return nil
}

func _FlowKeyV6_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowKeyV6)
	switch tag {
	case 4: // l4_fields.tcp_udp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyTcpUdpInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV6_TcpUdp{msg}
		return true, err
	case 5: // l4_fields.icmp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyICMPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV6_Icmp{msg}
		return true, err
	case 6: // l4_fields.esp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyESPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV6_Esp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowKeyV6_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowKeyV6)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV6_TcpUdp:
		s := proto.Size(x.TcpUdp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV6_Icmp:
		s := proto.Size(x.Icmp)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV6_Esp:
		s := proto.Size(x.Esp)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// FlowKey is the key for uni-directional flow
type FlowKey struct {
	SrcVrfId uint64 `protobuf:"fixed64,1,opt,name=src_vrf_id,json=srcVrfId,proto3" json:"src_vrf_id,omitempty"`
	DstVrfId uint64 `protobuf:"fixed64,2,opt,name=dst_vrf_id,json=dstVrfId,proto3" json:"dst_vrf_id,omitempty"`
	// Types that are valid to be assigned to FlowKey:
	//	*FlowKey_L2Key
	//	*FlowKey_V4Key
	//	*FlowKey_V6Key
	FlowKey isFlowKey_FlowKey `protobuf_oneof:"flow_key"`
}

func (m *FlowKey) Reset()                    { *m = FlowKey{} }
func (m *FlowKey) String() string            { return proto.CompactTextString(m) }
func (*FlowKey) ProtoMessage()               {}
func (*FlowKey) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{6} }

type isFlowKey_FlowKey interface {
	isFlowKey_FlowKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowKey_L2Key struct {
	L2Key *FlowKeyL2 `protobuf:"bytes,3,opt,name=l2_key,json=l2Key,oneof"`
}
type FlowKey_V4Key struct {
	V4Key *FlowKeyV4 `protobuf:"bytes,4,opt,name=v4_key,json=v4Key,oneof"`
}
type FlowKey_V6Key struct {
	V6Key *FlowKeyV6 `protobuf:"bytes,5,opt,name=v6_key,json=v6Key,oneof"`
}

func (*FlowKey_L2Key) isFlowKey_FlowKey() {}
func (*FlowKey_V4Key) isFlowKey_FlowKey() {}
func (*FlowKey_V6Key) isFlowKey_FlowKey() {}

func (m *FlowKey) GetFlowKey() isFlowKey_FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *FlowKey) GetSrcVrfId() uint64 {
	if m != nil {
		return m.SrcVrfId
	}
	return 0
}

func (m *FlowKey) GetDstVrfId() uint64 {
	if m != nil {
		return m.DstVrfId
	}
	return 0
}

func (m *FlowKey) GetL2Key() *FlowKeyL2 {
	if x, ok := m.GetFlowKey().(*FlowKey_L2Key); ok {
		return x.L2Key
	}
	return nil
}

func (m *FlowKey) GetV4Key() *FlowKeyV4 {
	if x, ok := m.GetFlowKey().(*FlowKey_V4Key); ok {
		return x.V4Key
	}
	return nil
}

func (m *FlowKey) GetV6Key() *FlowKeyV6 {
	if x, ok := m.GetFlowKey().(*FlowKey_V6Key); ok {
		return x.V6Key
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowKey_OneofMarshaler, _FlowKey_OneofUnmarshaler, _FlowKey_OneofSizer, []interface{}{
		(*FlowKey_L2Key)(nil),
		(*FlowKey_V4Key)(nil),
		(*FlowKey_V6Key)(nil),
	}
}

func _FlowKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowKey)
	// flow_key
	switch x := m.FlowKey.(type) {
	case *FlowKey_L2Key:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.L2Key); err != nil {
			return err
		}
	case *FlowKey_V4Key:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V4Key); err != nil {
			return err
		}
	case *FlowKey_V6Key:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V6Key); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowKey.FlowKey has unexpected type %T", x)
	}
	return nil
}

func _FlowKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowKey)
	switch tag {
	case 3: // flow_key.l2_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyL2)
		err := b.DecodeMessage(msg)
		m.FlowKey = &FlowKey_L2Key{msg}
		return true, err
	case 4: // flow_key.v4_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyV4)
		err := b.DecodeMessage(msg)
		m.FlowKey = &FlowKey_V4Key{msg}
		return true, err
	case 5: // flow_key.v6_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyV6)
		err := b.DecodeMessage(msg)
		m.FlowKey = &FlowKey_V6Key{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowKey)
	// flow_key
	switch x := m.FlowKey.(type) {
	case *FlowKey_L2Key:
		s := proto.Size(x.L2Key)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKey_V4Key:
		s := proto.Size(x.V4Key)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKey_V6Key:
		s := proto.Size(x.V6Key)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// FlowInfo contains flow information like counters, forwarding information,
// NAT rewrite information etc.
type FlowInfo struct {
	FlowAction           FlowAction                `protobuf:"varint,1,opt,name=flow_action,json=flowAction,proto3,enum=session.FlowAction" json:"flow_action,omitempty"`
	FlowAge              uint32                    `protobuf:"varint,2,opt,name=flow_age,json=flowAge,proto3" json:"flow_age,omitempty"`
	TimeToAge            uint32                    `protobuf:"varint,3,opt,name=time_to_age,json=timeToAge,proto3" json:"time_to_age,omitempty"`
	LastPacketSeenTime   uint64                    `protobuf:"varint,4,opt,name=last_packet_seen_time,json=lastPacketSeenTime,proto3" json:"last_packet_seen_time,omitempty"`
	NatType              NatType                   `protobuf:"varint,5,opt,name=nat_type,json=natType,proto3,enum=session.NatType" json:"nat_type,omitempty"`
	NatSip               *IPAddress                `protobuf:"bytes,6,opt,name=nat_sip,json=natSip" json:"nat_sip,omitempty"`
	NatSport             uint32                    `protobuf:"varint,7,opt,name=nat_sport,json=natSport,proto3" json:"nat_sport,omitempty"`
	NatDip               *IPAddress                `protobuf:"bytes,8,opt,name=nat_dip,json=natDip" json:"nat_dip,omitempty"`
	NatDport             uint32                    `protobuf:"varint,9,opt,name=nat_dport,json=natDport,proto3" json:"nat_dport,omitempty"`
	NatDmac              uint64                    `protobuf:"fixed64,10,opt,name=nat_dmac,json=natDmac,proto3" json:"nat_dmac,omitempty"`
	TcpState             FlowTCPState              `protobuf:"varint,11,opt,name=tcp_state,json=tcpState,proto3,enum=session.FlowTCPState" json:"tcp_state,omitempty"`
	HalTcpState          FlowTCPState              `protobuf:"varint,12,opt,name=hal_tcp_state,json=halTcpState,proto3,enum=session.FlowTCPState" json:"hal_tcp_state,omitempty"`
	SourceLifCheckEnable bool                      `protobuf:"varint,13,opt,name=source_lif_check_enable,json=sourceLifCheckEnable,proto3" json:"source_lif_check_enable,omitempty"`
	ExpectedSourceLif    uint32                    `protobuf:"varint,14,opt,name=expected_source_lif,json=expectedSourceLif,proto3" json:"expected_source_lif,omitempty"`
	IngMirrorSessions    []*MirrorSessionKeyHandle `protobuf:"bytes,15,rep,name=ing_mirror_sessions,json=ingMirrorSessions" json:"ing_mirror_sessions,omitempty" venice:constraints={range:0-7}`
	EgrMirrorSessions    []*MirrorSessionKeyHandle `protobuf:"bytes,16,rep,name=egr_mirror_sessions,json=egrMirrorSessions" json:"egr_mirror_sessions,omitempty" venice:constraints={range:0-7}`
	IdleTimeout          uint32                    `protobuf:"varint,17,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
}

func (m *FlowInfo) Reset()                    { *m = FlowInfo{} }
func (m *FlowInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowInfo) ProtoMessage()               {}
func (*FlowInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{7} }

func (m *FlowInfo) GetFlowAction() FlowAction {
	if m != nil {
		return m.FlowAction
	}
	return FlowAction_FLOW_ACTION_NONE
}

func (m *FlowInfo) GetFlowAge() uint32 {
	if m != nil {
		return m.FlowAge
	}
	return 0
}

func (m *FlowInfo) GetTimeToAge() uint32 {
	if m != nil {
		return m.TimeToAge
	}
	return 0
}

func (m *FlowInfo) GetLastPacketSeenTime() uint64 {
	if m != nil {
		return m.LastPacketSeenTime
	}
	return 0
}

func (m *FlowInfo) GetNatType() NatType {
	if m != nil {
		return m.NatType
	}
	return NatType_NAT_TYPE_NONE
}

func (m *FlowInfo) GetNatSip() *IPAddress {
	if m != nil {
		return m.NatSip
	}
	return nil
}

func (m *FlowInfo) GetNatSport() uint32 {
	if m != nil {
		return m.NatSport
	}
	return 0
}

func (m *FlowInfo) GetNatDip() *IPAddress {
	if m != nil {
		return m.NatDip
	}
	return nil
}

func (m *FlowInfo) GetNatDport() uint32 {
	if m != nil {
		return m.NatDport
	}
	return 0
}

func (m *FlowInfo) GetNatDmac() uint64 {
	if m != nil {
		return m.NatDmac
	}
	return 0
}

func (m *FlowInfo) GetTcpState() FlowTCPState {
	if m != nil {
		return m.TcpState
	}
	return FlowTCPState_FLOW_TCP_STATE_INIT
}

func (m *FlowInfo) GetHalTcpState() FlowTCPState {
	if m != nil {
		return m.HalTcpState
	}
	return FlowTCPState_FLOW_TCP_STATE_INIT
}

func (m *FlowInfo) GetSourceLifCheckEnable() bool {
	if m != nil {
		return m.SourceLifCheckEnable
	}
	return false
}

func (m *FlowInfo) GetExpectedSourceLif() uint32 {
	if m != nil {
		return m.ExpectedSourceLif
	}
	return 0
}

func (m *FlowInfo) GetIngMirrorSessions() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.IngMirrorSessions
	}
	return nil
}

func (m *FlowInfo) GetEgrMirrorSessions() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.EgrMirrorSessions
	}
	return nil
}

func (m *FlowInfo) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

type ConnTrackExceptions struct {
	TcpSynRetransmit                bool `protobuf:"varint,1,opt,name=tcp_syn_retransmit,json=tcpSynRetransmit,proto3" json:"tcp_syn_retransmit,omitempty"`
	TcpWinZeroDrop                  bool `protobuf:"varint,2,opt,name=tcp_win_zero_drop,json=tcpWinZeroDrop,proto3" json:"tcp_win_zero_drop,omitempty"`
	TcpFullRetransmit               bool `protobuf:"varint,3,opt,name=tcp_full_retransmit,json=tcpFullRetransmit,proto3" json:"tcp_full_retransmit,omitempty"`
	TcpPartialOverlap               bool `protobuf:"varint,4,opt,name=tcp_partial_overlap,json=tcpPartialOverlap,proto3" json:"tcp_partial_overlap,omitempty"`
	TcpPacketReorder                bool `protobuf:"varint,5,opt,name=tcp_packet_reorder,json=tcpPacketReorder,proto3" json:"tcp_packet_reorder,omitempty"`
	TcpOutOfWindow                  bool `protobuf:"varint,6,opt,name=tcp_out_of_window,json=tcpOutOfWindow,proto3" json:"tcp_out_of_window,omitempty"`
	TcpInvalidAckNum                bool `protobuf:"varint,7,opt,name=tcp_invalid_ack_num,json=tcpInvalidAckNum,proto3" json:"tcp_invalid_ack_num,omitempty"`
	TcpNormalizationDrop            bool `protobuf:"varint,8,opt,name=tcp_normalization_drop,json=tcpNormalizationDrop,proto3" json:"tcp_normalization_drop,omitempty"`
	TcpSplitHandshakeDetected       bool `protobuf:"varint,9,opt,name=tcp_split_handshake_detected,json=tcpSplitHandshakeDetected,proto3" json:"tcp_split_handshake_detected,omitempty"`
	TcpDataAfterFin                 bool `protobuf:"varint,10,opt,name=tcp_data_after_fin,json=tcpDataAfterFin,proto3" json:"tcp_data_after_fin,omitempty"`
	TcpNonRstPktAfterRst            bool `protobuf:"varint,11,opt,name=tcp_non_rst_pkt_after_rst,json=tcpNonRstPktAfterRst,proto3" json:"tcp_non_rst_pkt_after_rst,omitempty"`
	TcpInvalidFirstPktFromResponder bool `protobuf:"varint,12,opt,name=tcp_invalid_first_pkt_from_responder,json=tcpInvalidFirstPktFromResponder,proto3" json:"tcp_invalid_first_pkt_from_responder,omitempty"`
	TcpUnexpectedPkt                bool `protobuf:"varint,13,opt,name=tcp_unexpected_pkt,json=tcpUnexpectedPkt,proto3" json:"tcp_unexpected_pkt,omitempty"`
	TcpRstWithInvalidAckNum         bool `protobuf:"varint,14,opt,name=tcp_rst_with_invalid_ack_num,json=tcpRstWithInvalidAckNum,proto3" json:"tcp_rst_with_invalid_ack_num,omitempty"`
}

func (m *ConnTrackExceptions) Reset()                    { *m = ConnTrackExceptions{} }
func (m *ConnTrackExceptions) String() string            { return proto.CompactTextString(m) }
func (*ConnTrackExceptions) ProtoMessage()               {}
func (*ConnTrackExceptions) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{8} }

func (m *ConnTrackExceptions) GetTcpSynRetransmit() bool {
	if m != nil {
		return m.TcpSynRetransmit
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpWinZeroDrop() bool {
	if m != nil {
		return m.TcpWinZeroDrop
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpFullRetransmit() bool {
	if m != nil {
		return m.TcpFullRetransmit
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpPartialOverlap() bool {
	if m != nil {
		return m.TcpPartialOverlap
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpPacketReorder() bool {
	if m != nil {
		return m.TcpPacketReorder
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpOutOfWindow() bool {
	if m != nil {
		return m.TcpOutOfWindow
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpInvalidAckNum() bool {
	if m != nil {
		return m.TcpInvalidAckNum
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpNormalizationDrop() bool {
	if m != nil {
		return m.TcpNormalizationDrop
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpSplitHandshakeDetected() bool {
	if m != nil {
		return m.TcpSplitHandshakeDetected
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpDataAfterFin() bool {
	if m != nil {
		return m.TcpDataAfterFin
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpNonRstPktAfterRst() bool {
	if m != nil {
		return m.TcpNonRstPktAfterRst
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpInvalidFirstPktFromResponder() bool {
	if m != nil {
		return m.TcpInvalidFirstPktFromResponder
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpUnexpectedPkt() bool {
	if m != nil {
		return m.TcpUnexpectedPkt
	}
	return false
}

func (m *ConnTrackExceptions) GetTcpRstWithInvalidAckNum() bool {
	if m != nil {
		return m.TcpRstWithInvalidAckNum
	}
	return false
}

// ConnTrackInfo contains dynamic information that was recorded due to connection tracking
type ConnTrackInfo struct {
	FlowCreateTs          uint64               `protobuf:"fixed64,1,opt,name=flow_create_ts,json=flowCreateTs,proto3" json:"flow_create_ts,omitempty"`
	FlowBytes             uint64               `protobuf:"fixed64,2,opt,name=flow_bytes,json=flowBytes,proto3" json:"flow_bytes,omitempty"`
	FlowPackets           uint32               `protobuf:"fixed32,3,opt,name=flow_packets,json=flowPackets,proto3" json:"flow_packets,omitempty"`
	Exceptions            *ConnTrackExceptions `protobuf:"bytes,4,opt,name=exceptions" json:"exceptions,omitempty"`
	TcpSeqNum             uint32               `protobuf:"fixed32,5,opt,name=tcp_seq_num,json=tcpSeqNum,proto3" json:"tcp_seq_num,omitempty"`
	TcpAckNum             uint32               `protobuf:"fixed32,6,opt,name=tcp_ack_num,json=tcpAckNum,proto3" json:"tcp_ack_num,omitempty"`
	TcpWinSz              uint32               `protobuf:"varint,7,opt,name=tcp_win_sz,json=tcpWinSz,proto3" json:"tcp_win_sz,omitempty"`
	TcpWinScale           uint32               `protobuf:"varint,8,opt,name=tcp_win_scale,json=tcpWinScale,proto3" json:"tcp_win_scale,omitempty"`
	TcpMss                uint32               `protobuf:"varint,9,opt,name=tcp_mss,json=tcpMss,proto3" json:"tcp_mss,omitempty"`
	TcpSackPermOptionSent bool                 `protobuf:"varint,10,opt,name=tcp_sack_perm_option_sent,json=tcpSackPermOptionSent,proto3" json:"tcp_sack_perm_option_sent,omitempty"`
	IflowSynAckDelta      int32                `protobuf:"zigzag32,11,opt,name=iflow_syn_ack_delta,json=iflowSynAckDelta,proto3" json:"iflow_syn_ack_delta,omitempty"`
	TcpWsOptionSent       bool                 `protobuf:"varint,12,opt,name=tcp_ws_option_sent,json=tcpWsOptionSent,proto3" json:"tcp_ws_option_sent,omitempty"`
	TcpTsOptionSent       bool                 `protobuf:"varint,13,opt,name=tcp_ts_option_sent,json=tcpTsOptionSent,proto3" json:"tcp_ts_option_sent,omitempty"`
}

func (m *ConnTrackInfo) Reset()                    { *m = ConnTrackInfo{} }
func (m *ConnTrackInfo) String() string            { return proto.CompactTextString(m) }
func (*ConnTrackInfo) ProtoMessage()               {}
func (*ConnTrackInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{9} }

func (m *ConnTrackInfo) GetFlowCreateTs() uint64 {
	if m != nil {
		return m.FlowCreateTs
	}
	return 0
}

func (m *ConnTrackInfo) GetFlowBytes() uint64 {
	if m != nil {
		return m.FlowBytes
	}
	return 0
}

func (m *ConnTrackInfo) GetFlowPackets() uint32 {
	if m != nil {
		return m.FlowPackets
	}
	return 0
}

func (m *ConnTrackInfo) GetExceptions() *ConnTrackExceptions {
	if m != nil {
		return m.Exceptions
	}
	return nil
}

func (m *ConnTrackInfo) GetTcpSeqNum() uint32 {
	if m != nil {
		return m.TcpSeqNum
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpAckNum() uint32 {
	if m != nil {
		return m.TcpAckNum
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpWinSz() uint32 {
	if m != nil {
		return m.TcpWinSz
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpWinScale() uint32 {
	if m != nil {
		return m.TcpWinScale
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpMss() uint32 {
	if m != nil {
		return m.TcpMss
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpSackPermOptionSent() bool {
	if m != nil {
		return m.TcpSackPermOptionSent
	}
	return false
}

func (m *ConnTrackInfo) GetIflowSynAckDelta() int32 {
	if m != nil {
		return m.IflowSynAckDelta
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpWsOptionSent() bool {
	if m != nil {
		return m.TcpWsOptionSent
	}
	return false
}

func (m *ConnTrackInfo) GetTcpTsOptionSent() bool {
	if m != nil {
		return m.TcpTsOptionSent
	}
	return false
}

type TelemetryInfo struct {
	IngressMirrorSessionEnable bool   `protobuf:"varint,1,opt,name=ingress_mirror_session_enable,json=ingressMirrorSessionEnable,proto3" json:"ingress_mirror_session_enable,omitempty"`
	EgressMirrorSessionEnable  bool   `protobuf:"varint,2,opt,name=egress_mirror_session_enable,json=egressMirrorSessionEnable,proto3" json:"egress_mirror_session_enable,omitempty"`
	IngressMirrorSession       uint32 `protobuf:"varint,3,opt,name=ingress_mirror_session,json=ingressMirrorSession,proto3" json:"ingress_mirror_session,omitempty"`
	EgressMirrorSession        uint32 `protobuf:"varint,4,opt,name=egress_mirror_session,json=egressMirrorSession,proto3" json:"egress_mirror_session,omitempty"`
	FlowExportEnableBitmap     uint32 `protobuf:"varint,5,opt,name=flow_export_enable_bitmap,json=flowExportEnableBitmap,proto3" json:"flow_export_enable_bitmap,omitempty"`
	FlowExportId1              uint32 `protobuf:"varint,6,opt,name=flow_export_id1,json=flowExportId1,proto3" json:"flow_export_id1,omitempty"`
	FlowExportId2              uint32 `protobuf:"varint,7,opt,name=flow_export_id2,json=flowExportId2,proto3" json:"flow_export_id2,omitempty"`
	FlowExportId3              uint32 `protobuf:"varint,8,opt,name=flow_export_id3,json=flowExportId3,proto3" json:"flow_export_id3,omitempty"`
	FlowExportId4              uint32 `protobuf:"varint,9,opt,name=flow_export_id4,json=flowExportId4,proto3" json:"flow_export_id4,omitempty"`
}

func (m *TelemetryInfo) Reset()                    { *m = TelemetryInfo{} }
func (m *TelemetryInfo) String() string            { return proto.CompactTextString(m) }
func (*TelemetryInfo) ProtoMessage()               {}
func (*TelemetryInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{10} }

func (m *TelemetryInfo) GetIngressMirrorSessionEnable() bool {
	if m != nil {
		return m.IngressMirrorSessionEnable
	}
	return false
}

func (m *TelemetryInfo) GetEgressMirrorSessionEnable() bool {
	if m != nil {
		return m.EgressMirrorSessionEnable
	}
	return false
}

func (m *TelemetryInfo) GetIngressMirrorSession() uint32 {
	if m != nil {
		return m.IngressMirrorSession
	}
	return 0
}

func (m *TelemetryInfo) GetEgressMirrorSession() uint32 {
	if m != nil {
		return m.EgressMirrorSession
	}
	return 0
}

func (m *TelemetryInfo) GetFlowExportEnableBitmap() uint32 {
	if m != nil {
		return m.FlowExportEnableBitmap
	}
	return 0
}

func (m *TelemetryInfo) GetFlowExportId1() uint32 {
	if m != nil {
		return m.FlowExportId1
	}
	return 0
}

func (m *TelemetryInfo) GetFlowExportId2() uint32 {
	if m != nil {
		return m.FlowExportId2
	}
	return 0
}

func (m *TelemetryInfo) GetFlowExportId3() uint32 {
	if m != nil {
		return m.FlowExportId3
	}
	return 0
}

func (m *TelemetryInfo) GetFlowExportId4() uint32 {
	if m != nil {
		return m.FlowExportId4
	}
	return 0
}

// FlowData captures all the flow information
type FlowData struct {
	FlowInfo      *FlowInfo      `protobuf:"bytes,1,opt,name=flow_info,json=flowInfo" json:"flow_info,omitempty"`
	ConnTrackInfo *ConnTrackInfo `protobuf:"bytes,2,opt,name=conn_track_info,json=connTrackInfo" json:"conn_track_info,omitempty"`
	TelemetryInfo *TelemetryInfo `protobuf:"bytes,3,opt,name=telemetry_info,json=telemetryInfo" json:"telemetry_info,omitempty"`
}

func (m *FlowData) Reset()                    { *m = FlowData{} }
func (m *FlowData) String() string            { return proto.CompactTextString(m) }
func (*FlowData) ProtoMessage()               {}
func (*FlowData) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{11} }

func (m *FlowData) GetFlowInfo() *FlowInfo {
	if m != nil {
		return m.FlowInfo
	}
	return nil
}

func (m *FlowData) GetConnTrackInfo() *ConnTrackInfo {
	if m != nil {
		return m.ConnTrackInfo
	}
	return nil
}

func (m *FlowData) GetTelemetryInfo() *TelemetryInfo {
	if m != nil {
		return m.TelemetryInfo
	}
	return nil
}

// FlowSpec contains all information needed to install a uni-directional flow
//   - FlowKey is the key to uniquely identify a flow
//   - FlowInfo contains flow information like counters, forwarding information,
//     NAT rewrite information etc.
//   - ConnTrackInfo contains all the information gathered so far about the flow
//     when connection tracking is enabled. In vMotion case, this will be
//     carried from old location to new location
type FlowSpec struct {
	FlowKey  *FlowKey  `protobuf:"bytes,1,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	FlowData *FlowData `protobuf:"bytes,2,opt,name=flow_data,json=flowData" json:"flow_data,omitempty"`
}

func (m *FlowSpec) Reset()                    { *m = FlowSpec{} }
func (m *FlowSpec) String() string            { return proto.CompactTextString(m) }
func (*FlowSpec) ProtoMessage()               {}
func (*FlowSpec) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{12} }

func (m *FlowSpec) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *FlowSpec) GetFlowData() *FlowData {
	if m != nil {
		return m.FlowData
	}
	return nil
}

// SessionSpec represents a full session with forward and reverse flow
// It is possible to have a session with just one flow (for L2 mcast/bcast)
type SessionSpec struct {
	VrfKeyHandle *VrfKeyHandle `protobuf:"bytes,1,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty"`
	// session_id is unique session identifier
	SessionId         uint32    `protobuf:"fixed32,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty" venice:key`
	ConnTrackEn       bool      `protobuf:"varint,3,opt,name=conn_track_en,json=connTrackEn,proto3" json:"conn_track_en,omitempty"`
	TcpTsOption       bool      `protobuf:"varint,4,opt,name=tcp_ts_option,json=tcpTsOption,proto3" json:"tcp_ts_option,omitempty"`
	TcpSackPermOption bool      `protobuf:"varint,5,opt,name=tcp_sack_perm_option,json=tcpSackPermOption,proto3" json:"tcp_sack_perm_option,omitempty"`
	InitiatorFlow     *FlowSpec `protobuf:"bytes,6,opt,name=initiator_flow,json=initiatorFlow" json:"initiator_flow,omitempty"`
	ResponderFlow     *FlowSpec `protobuf:"bytes,7,opt,name=responder_flow,json=responderFlow" json:"responder_flow,omitempty"`
	PeerInitiatorFlow *FlowSpec `protobuf:"bytes,8,opt,name=peer_initiator_flow,json=peerInitiatorFlow" json:"peer_initiator_flow,omitempty"`
	PeerResponderFlow *FlowSpec `protobuf:"bytes,9,opt,name=peer_responder_flow,json=peerResponderFlow" json:"peer_responder_flow,omitempty"`
	Deleting          bool      `protobuf:"varint,10,opt,name=deleting,proto3" json:"deleting,omitempty"`
	TcpAgingEnqueued  bool      `protobuf:"varint,11,opt,name=tcp_aging_enqueued,json=tcpAgingEnqueued,proto3" json:"tcp_aging_enqueued,omitempty"`
}

func (m *SessionSpec) Reset()                    { *m = SessionSpec{} }
func (m *SessionSpec) String() string            { return proto.CompactTextString(m) }
func (*SessionSpec) ProtoMessage()               {}
func (*SessionSpec) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{13} }

func (m *SessionSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *SessionSpec) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionSpec) GetConnTrackEn() bool {
	if m != nil {
		return m.ConnTrackEn
	}
	return false
}

func (m *SessionSpec) GetTcpTsOption() bool {
	if m != nil {
		return m.TcpTsOption
	}
	return false
}

func (m *SessionSpec) GetTcpSackPermOption() bool {
	if m != nil {
		return m.TcpSackPermOption
	}
	return false
}

func (m *SessionSpec) GetInitiatorFlow() *FlowSpec {
	if m != nil {
		return m.InitiatorFlow
	}
	return nil
}

func (m *SessionSpec) GetResponderFlow() *FlowSpec {
	if m != nil {
		return m.ResponderFlow
	}
	return nil
}

func (m *SessionSpec) GetPeerInitiatorFlow() *FlowSpec {
	if m != nil {
		return m.PeerInitiatorFlow
	}
	return nil
}

func (m *SessionSpec) GetPeerResponderFlow() *FlowSpec {
	if m != nil {
		return m.PeerResponderFlow
	}
	return nil
}

func (m *SessionSpec) GetDeleting() bool {
	if m != nil {
		return m.Deleting
	}
	return false
}

func (m *SessionSpec) GetTcpAgingEnqueued() bool {
	if m != nil {
		return m.TcpAgingEnqueued
	}
	return false
}

// SessionRequestMsg is batched session request message
type SessionRequestMsg struct {
	Request []*SessionSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SessionRequestMsg) Reset()                    { *m = SessionRequestMsg{} }
func (m *SessionRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionRequestMsg) ProtoMessage()               {}
func (*SessionRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{14} }

func (m *SessionRequestMsg) GetRequest() []*SessionSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// FlowStatus captures the operational status of flows
// TODO - add all the indices we allocated internally - rewrite indices,
// dst lif or mcast replication index, rtt info etc.
type FlowStatus struct {
	FlowHandle    uint64         `protobuf:"fixed64,1,opt,name=flow_handle,json=flowHandle,proto3" json:"flow_handle,omitempty"`
	ConnTrackInfo *ConnTrackInfo `protobuf:"bytes,2,opt,name=conn_track_info,json=connTrackInfo" json:"conn_track_info,omitempty"`
	TelemetryInfo *TelemetryInfo `protobuf:"bytes,3,opt,name=telemetry_info,json=telemetryInfo" json:"telemetry_info,omitempty"`
	FlowColl      bool           `protobuf:"varint,4,opt,name=flow_coll,json=flowColl,proto3" json:"flow_coll,omitempty"`
	FlowHash      uint32         `protobuf:"varint,5,opt,name=flow_hash,json=flowHash,proto3" json:"flow_hash,omitempty"`
	FlowDirection FlowDirection  `protobuf:"varint,6,opt,name=flow_direction,json=flowDirection,proto3,enum=types.FlowDirection" json:"flow_direction,omitempty"`
	FlowInstance  FlowInstance   `protobuf:"varint,7,opt,name=flow_instance,json=flowInstance,proto3,enum=session.FlowInstance" json:"flow_instance,omitempty"`
}

func (m *FlowStatus) Reset()                    { *m = FlowStatus{} }
func (m *FlowStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowStatus) ProtoMessage()               {}
func (*FlowStatus) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{15} }

func (m *FlowStatus) GetFlowHandle() uint64 {
	if m != nil {
		return m.FlowHandle
	}
	return 0
}

func (m *FlowStatus) GetConnTrackInfo() *ConnTrackInfo {
	if m != nil {
		return m.ConnTrackInfo
	}
	return nil
}

func (m *FlowStatus) GetTelemetryInfo() *TelemetryInfo {
	if m != nil {
		return m.TelemetryInfo
	}
	return nil
}

func (m *FlowStatus) GetFlowColl() bool {
	if m != nil {
		return m.FlowColl
	}
	return false
}

func (m *FlowStatus) GetFlowHash() uint32 {
	if m != nil {
		return m.FlowHash
	}
	return 0
}

func (m *FlowStatus) GetFlowDirection() FlowDirection {
	if m != nil {
		return m.FlowDirection
	}
	return FlowDirection_FLOW_DIRECTION_NONE
}

func (m *FlowStatus) GetFlowInstance() FlowInstance {
	if m != nil {
		return m.FlowInstance
	}
	return FlowInstance_FLOW_INSTANCE_NONE
}

type ALGStatus struct {
	SrcIp     *IPAddress `protobuf:"bytes,1,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	DstIp     *IPAddress `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`
	Proto     uint32     `protobuf:"varint,3,opt,name=proto,proto3" json:"proto,omitempty"`
	Sport     uint32     `protobuf:"varint,4,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport     uint32     `protobuf:"varint,5,opt,name=dport,proto3" json:"dport,omitempty"`
	Iscontrol bool       `protobuf:"varint,6,opt,name=iscontrol,proto3" json:"iscontrol,omitempty"`
}

func (m *ALGStatus) Reset()                    { *m = ALGStatus{} }
func (m *ALGStatus) String() string            { return proto.CompactTextString(m) }
func (*ALGStatus) ProtoMessage()               {}
func (*ALGStatus) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{16} }

func (m *ALGStatus) GetSrcIp() *IPAddress {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (m *ALGStatus) GetDstIp() *IPAddress {
	if m != nil {
		return m.DstIp
	}
	return nil
}

func (m *ALGStatus) GetProto() uint32 {
	if m != nil {
		return m.Proto
	}
	return 0
}

func (m *ALGStatus) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *ALGStatus) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *ALGStatus) GetIscontrol() bool {
	if m != nil {
		return m.Iscontrol
	}
	return false
}

type EXPECTEDFlow struct {
	FlowKey     *FlowGateKey `protobuf:"bytes,1,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	IdleTimeout uint32       `protobuf:"varint,2,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
}

func (m *EXPECTEDFlow) Reset()                    { *m = EXPECTEDFlow{} }
func (m *EXPECTEDFlow) String() string            { return proto.CompactTextString(m) }
func (*EXPECTEDFlow) ProtoMessage()               {}
func (*EXPECTEDFlow) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{17} }

func (m *EXPECTEDFlow) GetFlowKey() *FlowGateKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *EXPECTEDFlow) GetIdleTimeout() uint32 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

type EXPECTEDFlows struct {
	Flow []*EXPECTEDFlow `protobuf:"bytes,1,rep,name=flow" json:"flow,omitempty"`
}

func (m *EXPECTEDFlows) Reset()                    { *m = EXPECTEDFlows{} }
func (m *EXPECTEDFlows) String() string            { return proto.CompactTextString(m) }
func (*EXPECTEDFlows) ProtoMessage()               {}
func (*EXPECTEDFlows) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{18} }

func (m *EXPECTEDFlows) GetFlow() []*EXPECTEDFlow {
	if m != nil {
		return m.Flow
	}
	return nil
}

type ACTIVESessions struct {
	ActiveSession []*FlowGateKey `protobuf:"bytes,1,rep,name=active_session,json=activeSession" json:"active_session,omitempty"`
}

func (m *ACTIVESessions) Reset()                    { *m = ACTIVESessions{} }
func (m *ACTIVESessions) String() string            { return proto.CompactTextString(m) }
func (*ACTIVESessions) ProtoMessage()               {}
func (*ACTIVESessions) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{19} }

func (m *ACTIVESessions) GetActiveSession() []*FlowGateKey {
	if m != nil {
		return m.ActiveSession
	}
	return nil
}

type TCPSegment struct {
	Start uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (m *TCPSegment) Reset()                    { *m = TCPSegment{} }
func (m *TCPSegment) String() string            { return proto.CompactTextString(m) }
func (*TCPSegment) ProtoMessage()               {}
func (*TCPSegment) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{20} }

func (m *TCPSegment) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *TCPSegment) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

// TCPBuffer captures TCP Buffer information used by ALG Apps
type TCPBuffer struct {
	CurrentSeq  uint32        `protobuf:"varint,1,opt,name=current_seq,json=currentSeq,proto3" json:"current_seq,omitempty"`
	EndBuffSeq  uint32        `protobuf:"varint,2,opt,name=end_buff_seq,json=endBuffSeq,proto3" json:"end_buff_seq,omitempty"`
	BuffSize    uint32        `protobuf:"varint,3,opt,name=buff_size,json=buffSize,proto3" json:"buff_size,omitempty"`
	NumSegments uint32        `protobuf:"varint,4,opt,name=num_segments,json=numSegments,proto3" json:"num_segments,omitempty"`
	Segments    []*TCPSegment `protobuf:"bytes,5,rep,name=segments" json:"segments,omitempty"`
	CurrentSlab uint32        `protobuf:"varint,6,opt,name=current_slab,json=currentSlab,proto3" json:"current_slab,omitempty"`
	Payload     []byte        `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *TCPBuffer) Reset()                    { *m = TCPBuffer{} }
func (m *TCPBuffer) String() string            { return proto.CompactTextString(m) }
func (*TCPBuffer) ProtoMessage()               {}
func (*TCPBuffer) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{21} }

func (m *TCPBuffer) GetCurrentSeq() uint32 {
	if m != nil {
		return m.CurrentSeq
	}
	return 0
}

func (m *TCPBuffer) GetEndBuffSeq() uint32 {
	if m != nil {
		return m.EndBuffSeq
	}
	return 0
}

func (m *TCPBuffer) GetBuffSize() uint32 {
	if m != nil {
		return m.BuffSize
	}
	return 0
}

func (m *TCPBuffer) GetNumSegments() uint32 {
	if m != nil {
		return m.NumSegments
	}
	return 0
}

func (m *TCPBuffer) GetSegments() []*TCPSegment {
	if m != nil {
		return m.Segments
	}
	return nil
}

func (m *TCPBuffer) GetCurrentSlab() uint32 {
	if m != nil {
		return m.CurrentSlab
	}
	return 0
}

func (m *TCPBuffer) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// TFTPInfo captures the operational status of TFTP ALG session
type TFTPALGInfo struct {
	Iscontrol     bool   `protobuf:"varint,1,opt,name=iscontrol,proto3" json:"iscontrol,omitempty"`
	ParseError    uint32 `protobuf:"varint,2,opt,name=parse_error,json=parseError,proto3" json:"parse_error,omitempty"`
	UnknownOpcode uint32 `protobuf:"varint,3,opt,name=unknown_opcode,json=unknownOpcode,proto3" json:"unknown_opcode,omitempty"`
	Tftpop        uint32 `protobuf:"varint,4,opt,name=tftpop,proto3" json:"tftpop,omitempty"`
}

func (m *TFTPALGInfo) Reset()                    { *m = TFTPALGInfo{} }
func (m *TFTPALGInfo) String() string            { return proto.CompactTextString(m) }
func (*TFTPALGInfo) ProtoMessage()               {}
func (*TFTPALGInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{22} }

func (m *TFTPALGInfo) GetIscontrol() bool {
	if m != nil {
		return m.Iscontrol
	}
	return false
}

func (m *TFTPALGInfo) GetParseError() uint32 {
	if m != nil {
		return m.ParseError
	}
	return 0
}

func (m *TFTPALGInfo) GetUnknownOpcode() uint32 {
	if m != nil {
		return m.UnknownOpcode
	}
	return 0
}

func (m *TFTPALGInfo) GetTftpop() uint32 {
	if m != nil {
		return m.Tftpop
	}
	return 0
}

type SUNRPCInfo struct {
	Xid     uint32 `protobuf:"varint,1,opt,name=xid,proto3" json:"xid,omitempty"`
	ProgNum uint32 `protobuf:"varint,2,opt,name=prog_num,json=progNum,proto3" json:"prog_num,omitempty"`
	Rpcvers uint32 `protobuf:"varint,3,opt,name=rpcvers,proto3" json:"rpcvers,omitempty"`
}

func (m *SUNRPCInfo) Reset()                    { *m = SUNRPCInfo{} }
func (m *SUNRPCInfo) String() string            { return proto.CompactTextString(m) }
func (*SUNRPCInfo) ProtoMessage()               {}
func (*SUNRPCInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{23} }

func (m *SUNRPCInfo) GetXid() uint32 {
	if m != nil {
		return m.Xid
	}
	return 0
}

func (m *SUNRPCInfo) GetProgNum() uint32 {
	if m != nil {
		return m.ProgNum
	}
	return 0
}

func (m *SUNRPCInfo) GetRpcvers() uint32 {
	if m != nil {
		return m.Rpcvers
	}
	return 0
}

type MSRPCInfo struct {
	DataRep      uint32 `protobuf:"varint,1,opt,name=data_rep,json=dataRep,proto3" json:"data_rep,omitempty"`
	CallId       uint32 `protobuf:"varint,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	ActId        []byte `protobuf:"bytes,3,opt,name=act_id,json=actId,proto3" json:"act_id,omitempty"`
	Uuid         []byte `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Msrpc_64Bit  uint32 `protobuf:"varint,5,opt,name=msrpc_64bit,json=msrpc64bit,proto3" json:"msrpc_64bit,omitempty"`
	MsrpcCtxtId  []byte `protobuf:"bytes,6,opt,name=msrpc_ctxt_id,json=msrpcCtxtId,proto3" json:"msrpc_ctxt_id,omitempty"`
	NumMsrpcCtxt uint32 `protobuf:"varint,7,opt,name=num_msrpc_ctxt,json=numMsrpcCtxt,proto3" json:"num_msrpc_ctxt,omitempty"`
}

func (m *MSRPCInfo) Reset()                    { *m = MSRPCInfo{} }
func (m *MSRPCInfo) String() string            { return proto.CompactTextString(m) }
func (*MSRPCInfo) ProtoMessage()               {}
func (*MSRPCInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{24} }

func (m *MSRPCInfo) GetDataRep() uint32 {
	if m != nil {
		return m.DataRep
	}
	return 0
}

func (m *MSRPCInfo) GetCallId() uint32 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *MSRPCInfo) GetActId() []byte {
	if m != nil {
		return m.ActId
	}
	return nil
}

func (m *MSRPCInfo) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *MSRPCInfo) GetMsrpc_64Bit() uint32 {
	if m != nil {
		return m.Msrpc_64Bit
	}
	return 0
}

func (m *MSRPCInfo) GetMsrpcCtxtId() []byte {
	if m != nil {
		return m.MsrpcCtxtId
	}
	return nil
}

func (m *MSRPCInfo) GetNumMsrpcCtxt() uint32 {
	if m != nil {
		return m.NumMsrpcCtxt
	}
	return 0
}

// RPCInfo captures the operational status of SUNRPC/MSFT RPC ALG session
type RPCALGInfo struct {
	Iscontrol          bool       `protobuf:"varint,1,opt,name=iscontrol,proto3" json:"iscontrol,omitempty"`
	ParseError         uint32     `protobuf:"varint,2,opt,name=parse_error,json=parseError,proto3" json:"parse_error,omitempty"`
	NumDataSess        uint32     `protobuf:"varint,3,opt,name=num_data_sess,json=numDataSess,proto3" json:"num_data_sess,omitempty"`
	NumExpFlows        uint32     `protobuf:"varint,4,opt,name=num_exp_flows,json=numExpFlows,proto3" json:"num_exp_flows,omitempty"`
	MaxpktSizeExceeded uint32     `protobuf:"varint,5,opt,name=maxpkt_size_exceeded,json=maxpktSizeExceeded,proto3" json:"maxpkt_size_exceeded,omitempty"`
	Pkt                []byte     `protobuf:"bytes,6,opt,name=pkt,proto3" json:"pkt,omitempty"`
	PayloadOffset      uint32     `protobuf:"varint,7,opt,name=payload_offset,json=payloadOffset,proto3" json:"payload_offset,omitempty"`
	RpcFragCont        uint32     `protobuf:"varint,8,opt,name=rpc_frag_cont,json=rpcFragCont,proto3" json:"rpc_frag_cont,omitempty"`
	Ip                 *IPAddress `protobuf:"bytes,9,opt,name=ip" json:"ip,omitempty"`
	Prot               uint32     `protobuf:"varint,10,opt,name=prot,proto3" json:"prot,omitempty"`
	Dport              uint32     `protobuf:"varint,11,opt,name=dport,proto3" json:"dport,omitempty"`
	Vers               uint32     `protobuf:"varint,12,opt,name=vers,proto3" json:"vers,omitempty"`
	PktType            uint32     `protobuf:"varint,13,opt,name=pkt_type,json=pktType,proto3" json:"pkt_type,omitempty"`
	// Types that are valid to be assigned to AlgInfo:
	//	*RPCALGInfo_SunRpcInfo
	//	*RPCALGInfo_MsRpcInfo
	AlgInfo         isRPCALGInfo_AlgInfo `protobuf_oneof:"alg_info"`
	IflowTcpBuf     *TCPBuffer           `protobuf:"bytes,16,opt,name=iflow_tcp_buf,json=iflowTcpBuf" json:"iflow_tcp_buf,omitempty"`
	RflowTcpBuf     *TCPBuffer           `protobuf:"bytes,17,opt,name=rflow_tcp_buf,json=rflowTcpBuf" json:"rflow_tcp_buf,omitempty"`
	ExpectedFlows   *EXPECTEDFlows       `protobuf:"bytes,18,opt,name=expected_flows,json=expectedFlows" json:"expected_flows,omitempty"`
	CreatedSessions *ACTIVESessions      `protobuf:"bytes,19,opt,name=created_sessions,json=createdSessions" json:"created_sessions,omitempty"`
}

func (m *RPCALGInfo) Reset()                    { *m = RPCALGInfo{} }
func (m *RPCALGInfo) String() string            { return proto.CompactTextString(m) }
func (*RPCALGInfo) ProtoMessage()               {}
func (*RPCALGInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{25} }

type isRPCALGInfo_AlgInfo interface {
	isRPCALGInfo_AlgInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RPCALGInfo_SunRpcInfo struct {
	SunRpcInfo *SUNRPCInfo `protobuf:"bytes,14,opt,name=sun_rpc_info,json=sunRpcInfo,oneof"`
}
type RPCALGInfo_MsRpcInfo struct {
	MsRpcInfo *MSRPCInfo `protobuf:"bytes,15,opt,name=ms_rpc_info,json=msRpcInfo,oneof"`
}

func (*RPCALGInfo_SunRpcInfo) isRPCALGInfo_AlgInfo() {}
func (*RPCALGInfo_MsRpcInfo) isRPCALGInfo_AlgInfo()  {}

func (m *RPCALGInfo) GetAlgInfo() isRPCALGInfo_AlgInfo {
	if m != nil {
		return m.AlgInfo
	}
	return nil
}

func (m *RPCALGInfo) GetIscontrol() bool {
	if m != nil {
		return m.Iscontrol
	}
	return false
}

func (m *RPCALGInfo) GetParseError() uint32 {
	if m != nil {
		return m.ParseError
	}
	return 0
}

func (m *RPCALGInfo) GetNumDataSess() uint32 {
	if m != nil {
		return m.NumDataSess
	}
	return 0
}

func (m *RPCALGInfo) GetNumExpFlows() uint32 {
	if m != nil {
		return m.NumExpFlows
	}
	return 0
}

func (m *RPCALGInfo) GetMaxpktSizeExceeded() uint32 {
	if m != nil {
		return m.MaxpktSizeExceeded
	}
	return 0
}

func (m *RPCALGInfo) GetPkt() []byte {
	if m != nil {
		return m.Pkt
	}
	return nil
}

func (m *RPCALGInfo) GetPayloadOffset() uint32 {
	if m != nil {
		return m.PayloadOffset
	}
	return 0
}

func (m *RPCALGInfo) GetRpcFragCont() uint32 {
	if m != nil {
		return m.RpcFragCont
	}
	return 0
}

func (m *RPCALGInfo) GetIp() *IPAddress {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *RPCALGInfo) GetProt() uint32 {
	if m != nil {
		return m.Prot
	}
	return 0
}

func (m *RPCALGInfo) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *RPCALGInfo) GetVers() uint32 {
	if m != nil {
		return m.Vers
	}
	return 0
}

func (m *RPCALGInfo) GetPktType() uint32 {
	if m != nil {
		return m.PktType
	}
	return 0
}

func (m *RPCALGInfo) GetSunRpcInfo() *SUNRPCInfo {
	if x, ok := m.GetAlgInfo().(*RPCALGInfo_SunRpcInfo); ok {
		return x.SunRpcInfo
	}
	return nil
}

func (m *RPCALGInfo) GetMsRpcInfo() *MSRPCInfo {
	if x, ok := m.GetAlgInfo().(*RPCALGInfo_MsRpcInfo); ok {
		return x.MsRpcInfo
	}
	return nil
}

func (m *RPCALGInfo) GetIflowTcpBuf() *TCPBuffer {
	if m != nil {
		return m.IflowTcpBuf
	}
	return nil
}

func (m *RPCALGInfo) GetRflowTcpBuf() *TCPBuffer {
	if m != nil {
		return m.RflowTcpBuf
	}
	return nil
}

func (m *RPCALGInfo) GetExpectedFlows() *EXPECTEDFlows {
	if m != nil {
		return m.ExpectedFlows
	}
	return nil
}

func (m *RPCALGInfo) GetCreatedSessions() *ACTIVESessions {
	if m != nil {
		return m.CreatedSessions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RPCALGInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RPCALGInfo_OneofMarshaler, _RPCALGInfo_OneofUnmarshaler, _RPCALGInfo_OneofSizer, []interface{}{
		(*RPCALGInfo_SunRpcInfo)(nil),
		(*RPCALGInfo_MsRpcInfo)(nil),
	}
}

func _RPCALGInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RPCALGInfo)
	// alg_info
	switch x := m.AlgInfo.(type) {
	case *RPCALGInfo_SunRpcInfo:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SunRpcInfo); err != nil {
			return err
		}
	case *RPCALGInfo_MsRpcInfo:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MsRpcInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RPCALGInfo.AlgInfo has unexpected type %T", x)
	}
	return nil
}

func _RPCALGInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RPCALGInfo)
	switch tag {
	case 14: // alg_info.sun_rpc_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SUNRPCInfo)
		err := b.DecodeMessage(msg)
		m.AlgInfo = &RPCALGInfo_SunRpcInfo{msg}
		return true, err
	case 15: // alg_info.ms_rpc_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MSRPCInfo)
		err := b.DecodeMessage(msg)
		m.AlgInfo = &RPCALGInfo_MsRpcInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RPCALGInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RPCALGInfo)
	// alg_info
	switch x := m.AlgInfo.(type) {
	case *RPCALGInfo_SunRpcInfo:
		s := proto.Size(x.SunRpcInfo)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RPCALGInfo_MsRpcInfo:
		s := proto.Size(x.MsRpcInfo)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SIPInfo captures the operational status of SIP ALG session
type SIPALGInfo struct {
	ParseError uint32 `protobuf:"varint,1,opt,name=parse_error,json=parseError,proto3" json:"parse_error,omitempty"`
}

func (m *SIPALGInfo) Reset()                    { *m = SIPALGInfo{} }
func (m *SIPALGInfo) String() string            { return proto.CompactTextString(m) }
func (*SIPALGInfo) ProtoMessage()               {}
func (*SIPALGInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{26} }

func (m *SIPALGInfo) GetParseError() uint32 {
	if m != nil {
		return m.ParseError
	}
	return 0
}

// FTPInfo captures the operational status of FTP ALG session
type FTPALGInfo struct {
	Iscontrol       bool            `protobuf:"varint,1,opt,name=iscontrol,proto3" json:"iscontrol,omitempty"`
	ParseError      uint32          `protobuf:"varint,2,opt,name=parse_error,json=parseError,proto3" json:"parse_error,omitempty"`
	NumDataSess     uint32          `protobuf:"varint,3,opt,name=num_data_sess,json=numDataSess,proto3" json:"num_data_sess,omitempty"`
	NumExpFlows     uint32          `protobuf:"varint,4,opt,name=num_exp_flows,json=numExpFlows,proto3" json:"num_exp_flows,omitempty"`
	IflowTcpBuf     *TCPBuffer      `protobuf:"bytes,5,opt,name=iflow_tcp_buf,json=iflowTcpBuf" json:"iflow_tcp_buf,omitempty"`
	RflowTcpBuf     *TCPBuffer      `protobuf:"bytes,6,opt,name=rflow_tcp_buf,json=rflowTcpBuf" json:"rflow_tcp_buf,omitempty"`
	ExpectedCmdType FTPCmdType      `protobuf:"varint,7,opt,name=expected_cmd_type,json=expectedCmdType,proto3,enum=session.FTPCmdType" json:"expected_cmd_type,omitempty"`
	ExpectedFlows   *EXPECTEDFlows  `protobuf:"bytes,8,opt,name=expected_flows,json=expectedFlows" json:"expected_flows,omitempty"`
	CreatedSessions *ACTIVESessions `protobuf:"bytes,9,opt,name=created_sessions,json=createdSessions" json:"created_sessions,omitempty"`
}

func (m *FTPALGInfo) Reset()                    { *m = FTPALGInfo{} }
func (m *FTPALGInfo) String() string            { return proto.CompactTextString(m) }
func (*FTPALGInfo) ProtoMessage()               {}
func (*FTPALGInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{27} }

func (m *FTPALGInfo) GetIscontrol() bool {
	if m != nil {
		return m.Iscontrol
	}
	return false
}

func (m *FTPALGInfo) GetParseError() uint32 {
	if m != nil {
		return m.ParseError
	}
	return 0
}

func (m *FTPALGInfo) GetNumDataSess() uint32 {
	if m != nil {
		return m.NumDataSess
	}
	return 0
}

func (m *FTPALGInfo) GetNumExpFlows() uint32 {
	if m != nil {
		return m.NumExpFlows
	}
	return 0
}

func (m *FTPALGInfo) GetIflowTcpBuf() *TCPBuffer {
	if m != nil {
		return m.IflowTcpBuf
	}
	return nil
}

func (m *FTPALGInfo) GetRflowTcpBuf() *TCPBuffer {
	if m != nil {
		return m.RflowTcpBuf
	}
	return nil
}

func (m *FTPALGInfo) GetExpectedCmdType() FTPCmdType {
	if m != nil {
		return m.ExpectedCmdType
	}
	return FTPCmdType_FTP_CMD_REQUEST
}

func (m *FTPALGInfo) GetExpectedFlows() *EXPECTEDFlows {
	if m != nil {
		return m.ExpectedFlows
	}
	return nil
}

func (m *FTPALGInfo) GetCreatedSessions() *ACTIVESessions {
	if m != nil {
		return m.CreatedSessions
	}
	return nil
}

type RTSPCtrlSessInfo struct {
	VrfId           uint64          `protobuf:"fixed64,1,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	ServerIp        *IPAddress      `protobuf:"bytes,2,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort      uint32          `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	SessionId       []byte          `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ExpectedFlows   *EXPECTEDFlows  `protobuf:"bytes,5,opt,name=expected_flows,json=expectedFlows" json:"expected_flows,omitempty"`
	CreatedSessions *ACTIVESessions `protobuf:"bytes,6,opt,name=created_sessions,json=createdSessions" json:"created_sessions,omitempty"`
}

func (m *RTSPCtrlSessInfo) Reset()                    { *m = RTSPCtrlSessInfo{} }
func (m *RTSPCtrlSessInfo) String() string            { return proto.CompactTextString(m) }
func (*RTSPCtrlSessInfo) ProtoMessage()               {}
func (*RTSPCtrlSessInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{28} }

func (m *RTSPCtrlSessInfo) GetVrfId() uint64 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *RTSPCtrlSessInfo) GetServerIp() *IPAddress {
	if m != nil {
		return m.ServerIp
	}
	return nil
}

func (m *RTSPCtrlSessInfo) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *RTSPCtrlSessInfo) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *RTSPCtrlSessInfo) GetExpectedFlows() *EXPECTEDFlows {
	if m != nil {
		return m.ExpectedFlows
	}
	return nil
}

func (m *RTSPCtrlSessInfo) GetCreatedSessions() *ACTIVESessions {
	if m != nil {
		return m.CreatedSessions
	}
	return nil
}

type RTSPCtrlSessions struct {
	Session []*RTSPCtrlSessInfo `protobuf:"bytes,1,rep,name=session" json:"session,omitempty"`
}

func (m *RTSPCtrlSessions) Reset()                    { *m = RTSPCtrlSessions{} }
func (m *RTSPCtrlSessions) String() string            { return proto.CompactTextString(m) }
func (*RTSPCtrlSessions) ProtoMessage()               {}
func (*RTSPCtrlSessions) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{29} }

func (m *RTSPCtrlSessions) GetSession() []*RTSPCtrlSessInfo {
	if m != nil {
		return m.Session
	}
	return nil
}

// RTSPALGInfo captures the operational status of RTSP ALG session
type RTSPALGInfo struct {
	Iscontrol       bool              `protobuf:"varint,1,opt,name=iscontrol,proto3" json:"iscontrol,omitempty"`
	Sessionid       string            `protobuf:"bytes,2,opt,name=sessionid,proto3" json:"sessionid,omitempty"`
	ParseErrors     uint32            `protobuf:"varint,3,opt,name=parse_errors,json=parseErrors,proto3" json:"parse_errors,omitempty"`
	NumDataSess     uint32            `protobuf:"varint,4,opt,name=num_data_sess,json=numDataSess,proto3" json:"num_data_sess,omitempty"`
	NumExpFlows     uint32            `protobuf:"varint,5,opt,name=num_exp_flows,json=numExpFlows,proto3" json:"num_exp_flows,omitempty"`
	NumRtspSessions uint32            `protobuf:"varint,6,opt,name=num_rtsp_sessions,json=numRtspSessions,proto3" json:"num_rtsp_sessions,omitempty"`
	IflowTcpBuf     *TCPBuffer        `protobuf:"bytes,7,opt,name=iflow_tcp_buf,json=iflowTcpBuf" json:"iflow_tcp_buf,omitempty"`
	RflowTcpBuf     *TCPBuffer        `protobuf:"bytes,8,opt,name=rflow_tcp_buf,json=rflowTcpBuf" json:"rflow_tcp_buf,omitempty"`
	CtrlSessions    *RTSPCtrlSessions `protobuf:"bytes,9,opt,name=ctrl_sessions,json=ctrlSessions" json:"ctrl_sessions,omitempty"`
}

func (m *RTSPALGInfo) Reset()                    { *m = RTSPALGInfo{} }
func (m *RTSPALGInfo) String() string            { return proto.CompactTextString(m) }
func (*RTSPALGInfo) ProtoMessage()               {}
func (*RTSPALGInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{30} }

func (m *RTSPALGInfo) GetIscontrol() bool {
	if m != nil {
		return m.Iscontrol
	}
	return false
}

func (m *RTSPALGInfo) GetSessionid() string {
	if m != nil {
		return m.Sessionid
	}
	return ""
}

func (m *RTSPALGInfo) GetParseErrors() uint32 {
	if m != nil {
		return m.ParseErrors
	}
	return 0
}

func (m *RTSPALGInfo) GetNumDataSess() uint32 {
	if m != nil {
		return m.NumDataSess
	}
	return 0
}

func (m *RTSPALGInfo) GetNumExpFlows() uint32 {
	if m != nil {
		return m.NumExpFlows
	}
	return 0
}

func (m *RTSPALGInfo) GetNumRtspSessions() uint32 {
	if m != nil {
		return m.NumRtspSessions
	}
	return 0
}

func (m *RTSPALGInfo) GetIflowTcpBuf() *TCPBuffer {
	if m != nil {
		return m.IflowTcpBuf
	}
	return nil
}

func (m *RTSPALGInfo) GetRflowTcpBuf() *TCPBuffer {
	if m != nil {
		return m.RflowTcpBuf
	}
	return nil
}

func (m *RTSPALGInfo) GetCtrlSessions() *RTSPCtrlSessions {
	if m != nil {
		return m.CtrlSessions
	}
	return nil
}

// DNSALGInfo captures the operational status of DNS ALG session
type DNSALGInfo struct {
	ParseErrors   uint32 `protobuf:"varint,1,opt,name=parse_errors,json=parseErrors,proto3" json:"parse_errors,omitempty"`
	DnsId         uint32 `protobuf:"varint,2,opt,name=dns_id,json=dnsId,proto3" json:"dns_id,omitempty"`
	TimeRemaining uint32 `protobuf:"varint,3,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
}

func (m *DNSALGInfo) Reset()                    { *m = DNSALGInfo{} }
func (m *DNSALGInfo) String() string            { return proto.CompactTextString(m) }
func (*DNSALGInfo) ProtoMessage()               {}
func (*DNSALGInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{31} }

func (m *DNSALGInfo) GetParseErrors() uint32 {
	if m != nil {
		return m.ParseErrors
	}
	return 0
}

func (m *DNSALGInfo) GetDnsId() uint32 {
	if m != nil {
		return m.DnsId
	}
	return 0
}

func (m *DNSALGInfo) GetTimeRemaining() uint32 {
	if m != nil {
		return m.TimeRemaining
	}
	return 0
}

// SessionStatus captures the operational status of the session
type SessionStatus struct {
	SessionHandle   uint64      `protobuf:"fixed64,1,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
	IflowStatus     *FlowStatus `protobuf:"bytes,2,opt,name=iflow_status,json=iflowStatus" json:"iflow_status,omitempty"`
	RflowStatus     *FlowStatus `protobuf:"bytes,3,opt,name=rflow_status,json=rflowStatus" json:"rflow_status,omitempty"`
	PeerIflowStatus *FlowStatus `protobuf:"bytes,4,opt,name=peer_iflow_status,json=peerIflowStatus" json:"peer_iflow_status,omitempty"`
	PeerRflowStatus *FlowStatus `protobuf:"bytes,5,opt,name=peer_rflow_status,json=peerRflowStatus" json:"peer_rflow_status,omitempty"`
	AppId           uint32      `protobuf:"varint,6,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppIdState      uint32      `protobuf:"varint,7,opt,name=app_id_state,json=appIdState,proto3" json:"app_id_state,omitempty"`
	Alg             ALGName     `protobuf:"varint,8,opt,name=alg,proto3,enum=nwsec.ALGName" json:"alg,omitempty"`
	// Types that are valid to be assigned to AlgInfo:
	//	*SessionStatus_TftpInfo
	//	*SessionStatus_RpcInfo
	//	*SessionStatus_SipInfo
	//	*SessionStatus_RtspInfo
	//	*SessionStatus_DnsInfo
	//	*SessionStatus_FtpInfo
	AlgInfo        isSessionStatus_AlgInfo `protobuf_oneof:"alg_info"`
	SessionSyncing bool                    `protobuf:"varint,15,opt,name=session_syncing,json=sessionSyncing,proto3" json:"session_syncing,omitempty"`
	LookupVrf      uint64                  `protobuf:"fixed64,16,opt,name=lookup_vrf,json=lookupVrf,proto3" json:"lookup_vrf,omitempty"`
	Smac           uint64                  `protobuf:"fixed64,17,opt,name=smac,proto3" json:"smac,omitempty"`
	Dmac           uint64                  `protobuf:"fixed64,18,opt,name=dmac,proto3" json:"dmac,omitempty"`
	L2SegId        uint32                  `protobuf:"varint,19,opt,name=l2seg_id,json=l2segId,proto3" json:"l2seg_id,omitempty"`
}

func (m *SessionStatus) Reset()                    { *m = SessionStatus{} }
func (m *SessionStatus) String() string            { return proto.CompactTextString(m) }
func (*SessionStatus) ProtoMessage()               {}
func (*SessionStatus) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{32} }

type isSessionStatus_AlgInfo interface {
	isSessionStatus_AlgInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SessionStatus_TftpInfo struct {
	TftpInfo *TFTPALGInfo `protobuf:"bytes,9,opt,name=tftp_info,json=tftpInfo,oneof"`
}
type SessionStatus_RpcInfo struct {
	RpcInfo *RPCALGInfo `protobuf:"bytes,10,opt,name=rpc_info,json=rpcInfo,oneof"`
}
type SessionStatus_SipInfo struct {
	SipInfo *SIPALGInfo `protobuf:"bytes,11,opt,name=sip_info,json=sipInfo,oneof"`
}
type SessionStatus_RtspInfo struct {
	RtspInfo *RTSPALGInfo `protobuf:"bytes,12,opt,name=rtsp_info,json=rtspInfo,oneof"`
}
type SessionStatus_DnsInfo struct {
	DnsInfo *DNSALGInfo `protobuf:"bytes,13,opt,name=dns_info,json=dnsInfo,oneof"`
}
type SessionStatus_FtpInfo struct {
	FtpInfo *FTPALGInfo `protobuf:"bytes,14,opt,name=ftp_info,json=ftpInfo,oneof"`
}

func (*SessionStatus_TftpInfo) isSessionStatus_AlgInfo() {}
func (*SessionStatus_RpcInfo) isSessionStatus_AlgInfo()  {}
func (*SessionStatus_SipInfo) isSessionStatus_AlgInfo()  {}
func (*SessionStatus_RtspInfo) isSessionStatus_AlgInfo() {}
func (*SessionStatus_DnsInfo) isSessionStatus_AlgInfo()  {}
func (*SessionStatus_FtpInfo) isSessionStatus_AlgInfo()  {}

func (m *SessionStatus) GetAlgInfo() isSessionStatus_AlgInfo {
	if m != nil {
		return m.AlgInfo
	}
	return nil
}

func (m *SessionStatus) GetSessionHandle() uint64 {
	if m != nil {
		return m.SessionHandle
	}
	return 0
}

func (m *SessionStatus) GetIflowStatus() *FlowStatus {
	if m != nil {
		return m.IflowStatus
	}
	return nil
}

func (m *SessionStatus) GetRflowStatus() *FlowStatus {
	if m != nil {
		return m.RflowStatus
	}
	return nil
}

func (m *SessionStatus) GetPeerIflowStatus() *FlowStatus {
	if m != nil {
		return m.PeerIflowStatus
	}
	return nil
}

func (m *SessionStatus) GetPeerRflowStatus() *FlowStatus {
	if m != nil {
		return m.PeerRflowStatus
	}
	return nil
}

func (m *SessionStatus) GetAppId() uint32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *SessionStatus) GetAppIdState() uint32 {
	if m != nil {
		return m.AppIdState
	}
	return 0
}

func (m *SessionStatus) GetAlg() ALGName {
	if m != nil {
		return m.Alg
	}
	return ALGName_APP_SVC_NONE
}

func (m *SessionStatus) GetTftpInfo() *TFTPALGInfo {
	if x, ok := m.GetAlgInfo().(*SessionStatus_TftpInfo); ok {
		return x.TftpInfo
	}
	return nil
}

func (m *SessionStatus) GetRpcInfo() *RPCALGInfo {
	if x, ok := m.GetAlgInfo().(*SessionStatus_RpcInfo); ok {
		return x.RpcInfo
	}
	return nil
}

func (m *SessionStatus) GetSipInfo() *SIPALGInfo {
	if x, ok := m.GetAlgInfo().(*SessionStatus_SipInfo); ok {
		return x.SipInfo
	}
	return nil
}

func (m *SessionStatus) GetRtspInfo() *RTSPALGInfo {
	if x, ok := m.GetAlgInfo().(*SessionStatus_RtspInfo); ok {
		return x.RtspInfo
	}
	return nil
}

func (m *SessionStatus) GetDnsInfo() *DNSALGInfo {
	if x, ok := m.GetAlgInfo().(*SessionStatus_DnsInfo); ok {
		return x.DnsInfo
	}
	return nil
}

func (m *SessionStatus) GetFtpInfo() *FTPALGInfo {
	if x, ok := m.GetAlgInfo().(*SessionStatus_FtpInfo); ok {
		return x.FtpInfo
	}
	return nil
}

func (m *SessionStatus) GetSessionSyncing() bool {
	if m != nil {
		return m.SessionSyncing
	}
	return false
}

func (m *SessionStatus) GetLookupVrf() uint64 {
	if m != nil {
		return m.LookupVrf
	}
	return 0
}

func (m *SessionStatus) GetSmac() uint64 {
	if m != nil {
		return m.Smac
	}
	return 0
}

func (m *SessionStatus) GetDmac() uint64 {
	if m != nil {
		return m.Dmac
	}
	return 0
}

func (m *SessionStatus) GetL2SegId() uint32 {
	if m != nil {
		return m.L2SegId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SessionStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SessionStatus_OneofMarshaler, _SessionStatus_OneofUnmarshaler, _SessionStatus_OneofSizer, []interface{}{
		(*SessionStatus_TftpInfo)(nil),
		(*SessionStatus_RpcInfo)(nil),
		(*SessionStatus_SipInfo)(nil),
		(*SessionStatus_RtspInfo)(nil),
		(*SessionStatus_DnsInfo)(nil),
		(*SessionStatus_FtpInfo)(nil),
	}
}

func _SessionStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SessionStatus)
	// alg_info
	switch x := m.AlgInfo.(type) {
	case *SessionStatus_TftpInfo:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TftpInfo); err != nil {
			return err
		}
	case *SessionStatus_RpcInfo:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RpcInfo); err != nil {
			return err
		}
	case *SessionStatus_SipInfo:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SipInfo); err != nil {
			return err
		}
	case *SessionStatus_RtspInfo:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RtspInfo); err != nil {
			return err
		}
	case *SessionStatus_DnsInfo:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DnsInfo); err != nil {
			return err
		}
	case *SessionStatus_FtpInfo:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FtpInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SessionStatus.AlgInfo has unexpected type %T", x)
	}
	return nil
}

func _SessionStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SessionStatus)
	switch tag {
	case 9: // alg_info.tftp_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TFTPALGInfo)
		err := b.DecodeMessage(msg)
		m.AlgInfo = &SessionStatus_TftpInfo{msg}
		return true, err
	case 10: // alg_info.rpc_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RPCALGInfo)
		err := b.DecodeMessage(msg)
		m.AlgInfo = &SessionStatus_RpcInfo{msg}
		return true, err
	case 11: // alg_info.sip_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SIPALGInfo)
		err := b.DecodeMessage(msg)
		m.AlgInfo = &SessionStatus_SipInfo{msg}
		return true, err
	case 12: // alg_info.rtsp_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RTSPALGInfo)
		err := b.DecodeMessage(msg)
		m.AlgInfo = &SessionStatus_RtspInfo{msg}
		return true, err
	case 13: // alg_info.dns_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DNSALGInfo)
		err := b.DecodeMessage(msg)
		m.AlgInfo = &SessionStatus_DnsInfo{msg}
		return true, err
	case 14: // alg_info.ftp_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FTPALGInfo)
		err := b.DecodeMessage(msg)
		m.AlgInfo = &SessionStatus_FtpInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SessionStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SessionStatus)
	// alg_info
	switch x := m.AlgInfo.(type) {
	case *SessionStatus_TftpInfo:
		s := proto.Size(x.TftpInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SessionStatus_RpcInfo:
		s := proto.Size(x.RpcInfo)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SessionStatus_SipInfo:
		s := proto.Size(x.SipInfo)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SessionStatus_RtspInfo:
		s := proto.Size(x.RtspInfo)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SessionStatus_DnsInfo:
		s := proto.Size(x.DnsInfo)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SessionStatus_FtpInfo:
		s := proto.Size(x.FtpInfo)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SessionResponse is the response to one SessionSpec
type SessionResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SessionStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SessionResponse) Reset()                    { *m = SessionResponse{} }
func (m *SessionResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionResponse) ProtoMessage()               {}
func (*SessionResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{33} }

func (m *SessionResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SessionResponse) GetStatus() *SessionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SessionResponseMsg is the response to SessionRequestMsg
type SessionResponseMsg struct {
	Response []*SessionResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SessionResponseMsg) Reset()                    { *m = SessionResponseMsg{} }
func (m *SessionResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionResponseMsg) ProtoMessage()               {}
func (*SessionResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{34} }

func (m *SessionResponseMsg) GetResponse() []*SessionResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SessionDeleteRequest is used to delete a session
type SessionDeleteRequest struct {
	// session_handle is the handle of the session
	//
	// Types that are valid to be assigned to GetBy:
	//	*SessionDeleteRequest_SessionHandle
	//	*SessionDeleteRequest_SessionFilter
	GetBy isSessionDeleteRequest_GetBy `protobuf_oneof:"get_by"`
}

func (m *SessionDeleteRequest) Reset()                    { *m = SessionDeleteRequest{} }
func (m *SessionDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteRequest) ProtoMessage()               {}
func (*SessionDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{35} }

type isSessionDeleteRequest_GetBy interface {
	isSessionDeleteRequest_GetBy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SessionDeleteRequest_SessionHandle struct {
	SessionHandle uint64 `protobuf:"fixed64,1,opt,name=session_handle,json=sessionHandle,proto3,oneof"`
}
type SessionDeleteRequest_SessionFilter struct {
	SessionFilter *SessionFilter `protobuf:"bytes,2,opt,name=session_filter,json=sessionFilter,oneof"`
}

func (*SessionDeleteRequest_SessionHandle) isSessionDeleteRequest_GetBy() {}
func (*SessionDeleteRequest_SessionFilter) isSessionDeleteRequest_GetBy() {}

func (m *SessionDeleteRequest) GetGetBy() isSessionDeleteRequest_GetBy {
	if m != nil {
		return m.GetBy
	}
	return nil
}

func (m *SessionDeleteRequest) GetSessionHandle() uint64 {
	if x, ok := m.GetGetBy().(*SessionDeleteRequest_SessionHandle); ok {
		return x.SessionHandle
	}
	return 0
}

func (m *SessionDeleteRequest) GetSessionFilter() *SessionFilter {
	if x, ok := m.GetGetBy().(*SessionDeleteRequest_SessionFilter); ok {
		return x.SessionFilter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SessionDeleteRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SessionDeleteRequest_OneofMarshaler, _SessionDeleteRequest_OneofUnmarshaler, _SessionDeleteRequest_OneofSizer, []interface{}{
		(*SessionDeleteRequest_SessionHandle)(nil),
		(*SessionDeleteRequest_SessionFilter)(nil),
	}
}

func _SessionDeleteRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SessionDeleteRequest)
	// get_by
	switch x := m.GetBy.(type) {
	case *SessionDeleteRequest_SessionHandle:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.SessionHandle))
	case *SessionDeleteRequest_SessionFilter:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionFilter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SessionDeleteRequest.GetBy has unexpected type %T", x)
	}
	return nil
}

func _SessionDeleteRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SessionDeleteRequest)
	switch tag {
	case 1: // get_by.session_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.GetBy = &SessionDeleteRequest_SessionHandle{x}
		return true, err
	case 2: // get_by.session_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionFilter)
		err := b.DecodeMessage(msg)
		m.GetBy = &SessionDeleteRequest_SessionFilter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SessionDeleteRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SessionDeleteRequest)
	// get_by
	switch x := m.GetBy.(type) {
	case *SessionDeleteRequest_SessionHandle:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *SessionDeleteRequest_SessionFilter:
		s := proto.Size(x.SessionFilter)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SessionDeleteRequestMsg is batched session delete request
type SessionDeleteRequestMsg struct {
	Request []*SessionDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SessionDeleteRequestMsg) Reset()                    { *m = SessionDeleteRequestMsg{} }
func (m *SessionDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteRequestMsg) ProtoMessage()               {}
func (*SessionDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{36} }

func (m *SessionDeleteRequestMsg) GetRequest() []*SessionDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SessionDeleteResponse is response to session delete request
type SessionDeleteResponse struct {
	ApiStatus     ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	SessionHandle uint64    `protobuf:"fixed64,2,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
}

func (m *SessionDeleteResponse) Reset()                    { *m = SessionDeleteResponse{} }
func (m *SessionDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteResponse) ProtoMessage()               {}
func (*SessionDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{37} }

func (m *SessionDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SessionDeleteResponse) GetSessionHandle() uint64 {
	if m != nil {
		return m.SessionHandle
	}
	return 0
}

// SessionDeleteResponseMsg is batched response to SessionDeleteRequestMsg
type SessionDeleteResponseMsg struct {
	Response []*SessionDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SessionDeleteResponseMsg) Reset()                    { *m = SessionDeleteResponseMsg{} }
func (m *SessionDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteResponseMsg) ProtoMessage()               {}
func (*SessionDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{38} }

func (m *SessionDeleteResponseMsg) GetResponse() []*SessionDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type SessionFilter struct {
	SrcIp       *IPAddress `protobuf:"bytes,1,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	DstIp       *IPAddress `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`
	SrcPort     uint32     `protobuf:"varint,3,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort     uint32     `protobuf:"varint,4,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	IpProto     IPProtocol `protobuf:"varint,5,opt,name=ip_proto,json=ipProto,proto3,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	VrfId       uint64     `protobuf:"fixed64,6,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	L2SegmentId uint32     `protobuf:"varint,7,opt,name=l2_segment_id,json=l2SegmentId,proto3" json:"l2_segment_id,omitempty"`
	Alg         ALGName    `protobuf:"varint,8,opt,name=alg,proto3,enum=nwsec.ALGName" json:"alg,omitempty"`
}

func (m *SessionFilter) Reset()                    { *m = SessionFilter{} }
func (m *SessionFilter) String() string            { return proto.CompactTextString(m) }
func (*SessionFilter) ProtoMessage()               {}
func (*SessionFilter) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{39} }

func (m *SessionFilter) GetSrcIp() *IPAddress {
	if m != nil {
		return m.SrcIp
	}
	return nil
}

func (m *SessionFilter) GetDstIp() *IPAddress {
	if m != nil {
		return m.DstIp
	}
	return nil
}

func (m *SessionFilter) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *SessionFilter) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *SessionFilter) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *SessionFilter) GetVrfId() uint64 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *SessionFilter) GetL2SegmentId() uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return 0
}

func (m *SessionFilter) GetAlg() ALGName {
	if m != nil {
		return m.Alg
	}
	return ALGName_APP_SVC_NONE
}

// SessionGetRequest  is used to get information about a session
type SessionGetRequest struct {
	// session_handle is the handle of the session
	//
	// Types that are valid to be assigned to GetBy:
	//	*SessionGetRequest_SessionHandle
	//	*SessionGetRequest_SessionFilter
	GetBy isSessionGetRequest_GetBy `protobuf_oneof:"get_by"`
}

func (m *SessionGetRequest) Reset()                    { *m = SessionGetRequest{} }
func (m *SessionGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionGetRequest) ProtoMessage()               {}
func (*SessionGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{40} }

type isSessionGetRequest_GetBy interface {
	isSessionGetRequest_GetBy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SessionGetRequest_SessionHandle struct {
	SessionHandle uint64 `protobuf:"fixed64,1,opt,name=session_handle,json=sessionHandle,proto3,oneof"`
}
type SessionGetRequest_SessionFilter struct {
	SessionFilter *SessionFilter `protobuf:"bytes,2,opt,name=session_filter,json=sessionFilter,oneof"`
}

func (*SessionGetRequest_SessionHandle) isSessionGetRequest_GetBy() {}
func (*SessionGetRequest_SessionFilter) isSessionGetRequest_GetBy() {}

func (m *SessionGetRequest) GetGetBy() isSessionGetRequest_GetBy {
	if m != nil {
		return m.GetBy
	}
	return nil
}

func (m *SessionGetRequest) GetSessionHandle() uint64 {
	if x, ok := m.GetGetBy().(*SessionGetRequest_SessionHandle); ok {
		return x.SessionHandle
	}
	return 0
}

func (m *SessionGetRequest) GetSessionFilter() *SessionFilter {
	if x, ok := m.GetGetBy().(*SessionGetRequest_SessionFilter); ok {
		return x.SessionFilter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SessionGetRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SessionGetRequest_OneofMarshaler, _SessionGetRequest_OneofUnmarshaler, _SessionGetRequest_OneofSizer, []interface{}{
		(*SessionGetRequest_SessionHandle)(nil),
		(*SessionGetRequest_SessionFilter)(nil),
	}
}

func _SessionGetRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SessionGetRequest)
	// get_by
	switch x := m.GetBy.(type) {
	case *SessionGetRequest_SessionHandle:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.SessionHandle))
	case *SessionGetRequest_SessionFilter:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionFilter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SessionGetRequest.GetBy has unexpected type %T", x)
	}
	return nil
}

func _SessionGetRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SessionGetRequest)
	switch tag {
	case 1: // get_by.session_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.GetBy = &SessionGetRequest_SessionHandle{x}
		return true, err
	case 2: // get_by.session_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionFilter)
		err := b.DecodeMessage(msg)
		m.GetBy = &SessionGetRequest_SessionFilter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SessionGetRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SessionGetRequest)
	// get_by
	switch x := m.GetBy.(type) {
	case *SessionGetRequest_SessionHandle:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *SessionGetRequest_SessionFilter:
		s := proto.Size(x.SessionFilter)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SessionGetRequestMsg  is batched get request
type SessionGetRequestMsg struct {
	Request []*SessionGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SessionGetRequestMsg) Reset()                    { *m = SessionGetRequestMsg{} }
func (m *SessionGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionGetRequestMsg) ProtoMessage()               {}
func (*SessionGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{41} }

func (m *SessionGetRequestMsg) GetRequest() []*SessionGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// FlowStats contains all the stats collected per flow
type FlowStats struct {
	FlowPermittedPackets uint64 `protobuf:"fixed64,1,opt,name=flow_permitted_packets,json=flowPermittedPackets,proto3" json:"flow_permitted_packets,omitempty"`
	FlowPermittedBytes   uint64 `protobuf:"fixed64,2,opt,name=flow_permitted_bytes,json=flowPermittedBytes,proto3" json:"flow_permitted_bytes,omitempty"`
	FlowDroppedPackets   uint64 `protobuf:"fixed64,3,opt,name=flow_dropped_packets,json=flowDroppedPackets,proto3" json:"flow_dropped_packets,omitempty"`
	FlowDroppedBytes     uint64 `protobuf:"fixed64,4,opt,name=flow_dropped_bytes,json=flowDroppedBytes,proto3" json:"flow_dropped_bytes,omitempty"`
	NumTcpTicklesSent    uint64 `protobuf:"fixed64,5,opt,name=num_tcp_tickles_sent,json=numTcpTicklesSent,proto3" json:"num_tcp_tickles_sent,omitempty"`
	NumTcpRstSent        uint64 `protobuf:"fixed64,6,opt,name=num_tcp_rst_sent,json=numTcpRstSent,proto3" json:"num_tcp_rst_sent,omitempty"`
}

func (m *FlowStats) Reset()                    { *m = FlowStats{} }
func (m *FlowStats) String() string            { return proto.CompactTextString(m) }
func (*FlowStats) ProtoMessage()               {}
func (*FlowStats) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{42} }

func (m *FlowStats) GetFlowPermittedPackets() uint64 {
	if m != nil {
		return m.FlowPermittedPackets
	}
	return 0
}

func (m *FlowStats) GetFlowPermittedBytes() uint64 {
	if m != nil {
		return m.FlowPermittedBytes
	}
	return 0
}

func (m *FlowStats) GetFlowDroppedPackets() uint64 {
	if m != nil {
		return m.FlowDroppedPackets
	}
	return 0
}

func (m *FlowStats) GetFlowDroppedBytes() uint64 {
	if m != nil {
		return m.FlowDroppedBytes
	}
	return 0
}

func (m *FlowStats) GetNumTcpTicklesSent() uint64 {
	if m != nil {
		return m.NumTcpTicklesSent
	}
	return 0
}

func (m *FlowStats) GetNumTcpRstSent() uint64 {
	if m != nil {
		return m.NumTcpRstSent
	}
	return 0
}

// SessionStats captures statistics of all its constituent flows
type SessionStats struct {
	InitiatorFlowStats     *FlowStats `protobuf:"bytes,1,opt,name=initiator_flow_stats,json=initiatorFlowStats" json:"initiator_flow_stats,omitempty"`
	ResponderFlowStats     *FlowStats `protobuf:"bytes,2,opt,name=responder_flow_stats,json=responderFlowStats" json:"responder_flow_stats,omitempty"`
	PeerInitiatorFlowStats *FlowStats `protobuf:"bytes,3,opt,name=peer_initiator_flow_stats,json=peerInitiatorFlowStats" json:"peer_initiator_flow_stats,omitempty"`
	PeerResponderFlowStats *FlowStats `protobuf:"bytes,4,opt,name=peer_responder_flow_stats,json=peerResponderFlowStats" json:"peer_responder_flow_stats,omitempty"`
}

func (m *SessionStats) Reset()                    { *m = SessionStats{} }
func (m *SessionStats) String() string            { return proto.CompactTextString(m) }
func (*SessionStats) ProtoMessage()               {}
func (*SessionStats) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{43} }

func (m *SessionStats) GetInitiatorFlowStats() *FlowStats {
	if m != nil {
		return m.InitiatorFlowStats
	}
	return nil
}

func (m *SessionStats) GetResponderFlowStats() *FlowStats {
	if m != nil {
		return m.ResponderFlowStats
	}
	return nil
}

func (m *SessionStats) GetPeerInitiatorFlowStats() *FlowStats {
	if m != nil {
		return m.PeerInitiatorFlowStats
	}
	return nil
}

func (m *SessionStats) GetPeerResponderFlowStats() *FlowStats {
	if m != nil {
		return m.PeerResponderFlowStats
	}
	return nil
}

// SessionGetResponse is response to one SessionGetRequest
type SessionGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *SessionSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SessionStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SessionStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SessionGetResponse) Reset()                    { *m = SessionGetResponse{} }
func (m *SessionGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionGetResponse) ProtoMessage()               {}
func (*SessionGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{44} }

func (m *SessionGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SessionGetResponse) GetSpec() *SessionSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SessionGetResponse) GetStatus() *SessionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SessionGetResponse) GetStats() *SessionStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SesssionGetResponseMsg is batched response to SesssionGetRequestMsg
type SessionGetResponseMsg struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*SessionGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *SessionGetResponseMsg) Reset()                    { *m = SessionGetResponseMsg{} }
func (m *SessionGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionGetResponseMsg) ProtoMessage()               {}
func (*SessionGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{45} }

func (m *SessionGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SessionGetResponseMsg) GetResponse() []*SessionGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowKeyL2)(nil), "session.FlowKeyL2")
	proto.RegisterType((*FlowKeyTcpUdpInfo)(nil), "session.FlowKeyTcpUdpInfo")
	proto.RegisterType((*FlowKeyICMPInfo)(nil), "session.FlowKeyICMPInfo")
	proto.RegisterType((*FlowKeyESPInfo)(nil), "session.FlowKeyESPInfo")
	proto.RegisterType((*FlowKeyV4)(nil), "session.FlowKeyV4")
	proto.RegisterType((*FlowKeyV6)(nil), "session.FlowKeyV6")
	proto.RegisterType((*FlowKey)(nil), "session.FlowKey")
	proto.RegisterType((*FlowInfo)(nil), "session.FlowInfo")
	proto.RegisterType((*ConnTrackExceptions)(nil), "session.ConnTrackExceptions")
	proto.RegisterType((*ConnTrackInfo)(nil), "session.ConnTrackInfo")
	proto.RegisterType((*TelemetryInfo)(nil), "session.TelemetryInfo")
	proto.RegisterType((*FlowData)(nil), "session.FlowData")
	proto.RegisterType((*FlowSpec)(nil), "session.FlowSpec")
	proto.RegisterType((*SessionSpec)(nil), "session.SessionSpec")
	proto.RegisterType((*SessionRequestMsg)(nil), "session.SessionRequestMsg")
	proto.RegisterType((*FlowStatus)(nil), "session.FlowStatus")
	proto.RegisterType((*ALGStatus)(nil), "session.ALGStatus")
	proto.RegisterType((*EXPECTEDFlow)(nil), "session.EXPECTEDFlow")
	proto.RegisterType((*EXPECTEDFlows)(nil), "session.EXPECTEDFlows")
	proto.RegisterType((*ACTIVESessions)(nil), "session.ACTIVESessions")
	proto.RegisterType((*TCPSegment)(nil), "session.TCPSegment")
	proto.RegisterType((*TCPBuffer)(nil), "session.TCPBuffer")
	proto.RegisterType((*TFTPALGInfo)(nil), "session.TFTPALGInfo")
	proto.RegisterType((*SUNRPCInfo)(nil), "session.SUNRPCInfo")
	proto.RegisterType((*MSRPCInfo)(nil), "session.MSRPCInfo")
	proto.RegisterType((*RPCALGInfo)(nil), "session.RPCALGInfo")
	proto.RegisterType((*SIPALGInfo)(nil), "session.SIPALGInfo")
	proto.RegisterType((*FTPALGInfo)(nil), "session.FTPALGInfo")
	proto.RegisterType((*RTSPCtrlSessInfo)(nil), "session.RTSPCtrlSessInfo")
	proto.RegisterType((*RTSPCtrlSessions)(nil), "session.RTSPCtrlSessions")
	proto.RegisterType((*RTSPALGInfo)(nil), "session.RTSPALGInfo")
	proto.RegisterType((*DNSALGInfo)(nil), "session.DNSALGInfo")
	proto.RegisterType((*SessionStatus)(nil), "session.SessionStatus")
	proto.RegisterType((*SessionResponse)(nil), "session.SessionResponse")
	proto.RegisterType((*SessionResponseMsg)(nil), "session.SessionResponseMsg")
	proto.RegisterType((*SessionDeleteRequest)(nil), "session.SessionDeleteRequest")
	proto.RegisterType((*SessionDeleteRequestMsg)(nil), "session.SessionDeleteRequestMsg")
	proto.RegisterType((*SessionDeleteResponse)(nil), "session.SessionDeleteResponse")
	proto.RegisterType((*SessionDeleteResponseMsg)(nil), "session.SessionDeleteResponseMsg")
	proto.RegisterType((*SessionFilter)(nil), "session.SessionFilter")
	proto.RegisterType((*SessionGetRequest)(nil), "session.SessionGetRequest")
	proto.RegisterType((*SessionGetRequestMsg)(nil), "session.SessionGetRequestMsg")
	proto.RegisterType((*FlowStats)(nil), "session.FlowStats")
	proto.RegisterType((*SessionStats)(nil), "session.SessionStats")
	proto.RegisterType((*SessionGetResponse)(nil), "session.SessionGetResponse")
	proto.RegisterType((*SessionGetResponseMsg)(nil), "session.SessionGetResponseMsg")
	proto.RegisterEnum("session.NatType", NatType_name, NatType_value)
	proto.RegisterEnum("session.FlowAction", FlowAction_name, FlowAction_value)
	proto.RegisterEnum("session.FlowTCPState", FlowTCPState_name, FlowTCPState_value)
	proto.RegisterEnum("session.FlowType", FlowType_name, FlowType_value)
	proto.RegisterEnum("session.FlowInstance", FlowInstance_name, FlowInstance_value)
	proto.RegisterEnum("session.FTPCmdType", FTPCmdType_name, FTPCmdType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Session service

type SessionClient interface {
	SessionCreate(ctx context.Context, in *SessionRequestMsg, opts ...grpc.CallOption) (*SessionResponseMsg, error)
	SessionDelete(ctx context.Context, in *SessionDeleteRequestMsg, opts ...grpc.CallOption) (*SessionDeleteResponseMsg, error)
	SessionGet(ctx context.Context, in *SessionGetRequestMsg, opts ...grpc.CallOption) (Session_SessionGetClient, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) SessionCreate(ctx context.Context, in *SessionRequestMsg, opts ...grpc.CallOption) (*SessionResponseMsg, error) {
	out := new(SessionResponseMsg)
	err := grpc.Invoke(ctx, "/session.Session/SessionCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) SessionDelete(ctx context.Context, in *SessionDeleteRequestMsg, opts ...grpc.CallOption) (*SessionDeleteResponseMsg, error) {
	out := new(SessionDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/session.Session/SessionDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) SessionGet(ctx context.Context, in *SessionGetRequestMsg, opts ...grpc.CallOption) (Session_SessionGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Session_serviceDesc.Streams[0], c.cc, "/session.Session/SessionGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionSessionGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Session_SessionGetClient interface {
	Recv() (*SessionGetResponseMsg, error)
	grpc.ClientStream
}

type sessionSessionGetClient struct {
	grpc.ClientStream
}

func (x *sessionSessionGetClient) Recv() (*SessionGetResponseMsg, error) {
	m := new(SessionGetResponseMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Session service

type SessionServer interface {
	SessionCreate(context.Context, *SessionRequestMsg) (*SessionResponseMsg, error)
	SessionDelete(context.Context, *SessionDeleteRequestMsg) (*SessionDeleteResponseMsg, error)
	SessionGet(*SessionGetRequestMsg, Session_SessionGetServer) error
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_SessionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SessionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/SessionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SessionCreate(ctx, req.(*SessionRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_SessionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SessionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/SessionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SessionDelete(ctx, req.(*SessionDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_SessionGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionGetRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SessionServer).SessionGet(m, &sessionSessionGetServer{stream})
}

type Session_SessionGetServer interface {
	Send(*SessionGetResponseMsg) error
	grpc.ServerStream
}

type sessionSessionGetServer struct {
	grpc.ServerStream
}

func (x *sessionSessionGetServer) Send(m *SessionGetResponseMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionCreate",
			Handler:    _Session_SessionCreate_Handler,
		},
		{
			MethodName: "SessionDelete",
			Handler:    _Session_SessionDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SessionGet",
			Handler:       _Session_SessionGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "session.proto",
}

func (m *FlowKeyL2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyL2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Smac != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Smac))
		i += 8
	}
	if m.Dmac != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Dmac))
		i += 8
	}
	if m.L2SegmentId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.L2SegmentId))
	}
	if m.EtherType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.EtherType))
	}
	return i, nil
}

func (m *FlowKeyTcpUdpInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyTcpUdpInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sport != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Sport))
	}
	if m.Dport != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Dport))
	}
	return i, nil
}

func (m *FlowKeyICMPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyICMPInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Type))
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *FlowKeyESPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyESPInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Spi != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Spi))
	}
	return i, nil
}

func (m *FlowKeyV4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyV4) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sip != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Sip))
		i += 4
	}
	if m.Dip != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Dip))
		i += 4
	}
	if m.IpProto != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IpProto))
	}
	if m.L4Fields != nil {
		nn1, err := m.L4Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *FlowKeyV4_TcpUdp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcpUdp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpUdp.Size()))
		n2, err := m.TcpUdp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *FlowKeyV4_Icmp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Icmp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Icmp.Size()))
		n3, err := m.Icmp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *FlowKeyV4_Esp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Esp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Esp.Size()))
		n4, err := m.Esp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *FlowKeyV6) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyV6) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sip != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Sip.Size()))
		n5, err := m.Sip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Dip != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Dip.Size()))
		n6, err := m.Dip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.IpProto != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IpProto))
	}
	if m.L4Fields != nil {
		nn7, err := m.L4Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *FlowKeyV6_TcpUdp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcpUdp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpUdp.Size()))
		n8, err := m.TcpUdp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *FlowKeyV6_Icmp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Icmp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Icmp.Size()))
		n9, err := m.Icmp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *FlowKeyV6_Esp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Esp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Esp.Size()))
		n10, err := m.Esp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *FlowKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcVrfId != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SrcVrfId))
		i += 8
	}
	if m.DstVrfId != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DstVrfId))
		i += 8
	}
	if m.FlowKey != nil {
		nn11, err := m.FlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *FlowKey_L2Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.L2Key != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.L2Key.Size()))
		n12, err := m.L2Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *FlowKey_V4Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.V4Key != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.V4Key.Size()))
		n13, err := m.V4Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *FlowKey_V6Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.V6Key != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.V6Key.Size()))
		n14, err := m.V6Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *FlowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowAction != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowAction))
	}
	if m.FlowAge != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowAge))
	}
	if m.TimeToAge != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TimeToAge))
	}
	if m.LastPacketSeenTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.LastPacketSeenTime))
	}
	if m.NatType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatType))
	}
	if m.NatSip != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatSip.Size()))
		n15, err := m.NatSip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.NatSport != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatSport))
	}
	if m.NatDip != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatDip.Size()))
		n16, err := m.NatDip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.NatDport != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatDport))
	}
	if m.NatDmac != 0 {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.NatDmac))
		i += 8
	}
	if m.TcpState != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpState))
	}
	if m.HalTcpState != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.HalTcpState))
	}
	if m.SourceLifCheckEnable {
		dAtA[i] = 0x68
		i++
		if m.SourceLifCheckEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ExpectedSourceLif != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ExpectedSourceLif))
	}
	if len(m.IngMirrorSessions) > 0 {
		for _, msg := range m.IngMirrorSessions {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EgrMirrorSessions) > 0 {
		for _, msg := range m.EgrMirrorSessions {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IdleTimeout))
	}
	return i, nil
}

func (m *ConnTrackExceptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnTrackExceptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TcpSynRetransmit {
		dAtA[i] = 0x8
		i++
		if m.TcpSynRetransmit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpWinZeroDrop {
		dAtA[i] = 0x10
		i++
		if m.TcpWinZeroDrop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpFullRetransmit {
		dAtA[i] = 0x18
		i++
		if m.TcpFullRetransmit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpPartialOverlap {
		dAtA[i] = 0x20
		i++
		if m.TcpPartialOverlap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpPacketReorder {
		dAtA[i] = 0x28
		i++
		if m.TcpPacketReorder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpOutOfWindow {
		dAtA[i] = 0x30
		i++
		if m.TcpOutOfWindow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpInvalidAckNum {
		dAtA[i] = 0x38
		i++
		if m.TcpInvalidAckNum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpNormalizationDrop {
		dAtA[i] = 0x40
		i++
		if m.TcpNormalizationDrop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpSplitHandshakeDetected {
		dAtA[i] = 0x48
		i++
		if m.TcpSplitHandshakeDetected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpDataAfterFin {
		dAtA[i] = 0x50
		i++
		if m.TcpDataAfterFin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpNonRstPktAfterRst {
		dAtA[i] = 0x58
		i++
		if m.TcpNonRstPktAfterRst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpInvalidFirstPktFromResponder {
		dAtA[i] = 0x60
		i++
		if m.TcpInvalidFirstPktFromResponder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpUnexpectedPkt {
		dAtA[i] = 0x68
		i++
		if m.TcpUnexpectedPkt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpRstWithInvalidAckNum {
		dAtA[i] = 0x70
		i++
		if m.TcpRstWithInvalidAckNum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ConnTrackInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnTrackInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowCreateTs != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.FlowCreateTs))
		i += 8
	}
	if m.FlowBytes != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.FlowBytes))
		i += 8
	}
	if m.FlowPackets != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.FlowPackets))
		i += 4
	}
	if m.Exceptions != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Exceptions.Size()))
		n17, err := m.Exceptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.TcpSeqNum != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TcpSeqNum))
		i += 4
	}
	if m.TcpAckNum != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TcpAckNum))
		i += 4
	}
	if m.TcpWinSz != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpWinSz))
	}
	if m.TcpWinScale != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpWinScale))
	}
	if m.TcpMss != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpMss))
	}
	if m.TcpSackPermOptionSent {
		dAtA[i] = 0x50
		i++
		if m.TcpSackPermOptionSent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IflowSynAckDelta != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSession(dAtA, i, uint64((uint32(m.IflowSynAckDelta)<<1)^uint32((m.IflowSynAckDelta>>31))))
	}
	if m.TcpWsOptionSent {
		dAtA[i] = 0x60
		i++
		if m.TcpWsOptionSent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpTsOptionSent {
		dAtA[i] = 0x68
		i++
		if m.TcpTsOptionSent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TelemetryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IngressMirrorSessionEnable {
		dAtA[i] = 0x8
		i++
		if m.IngressMirrorSessionEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EgressMirrorSessionEnable {
		dAtA[i] = 0x10
		i++
		if m.EgressMirrorSessionEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IngressMirrorSession != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IngressMirrorSession))
	}
	if m.EgressMirrorSession != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.EgressMirrorSession))
	}
	if m.FlowExportEnableBitmap != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowExportEnableBitmap))
	}
	if m.FlowExportId1 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowExportId1))
	}
	if m.FlowExportId2 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowExportId2))
	}
	if m.FlowExportId3 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowExportId3))
	}
	if m.FlowExportId4 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowExportId4))
	}
	return i, nil
}

func (m *FlowData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowInfo.Size()))
		n18, err := m.FlowInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.ConnTrackInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ConnTrackInfo.Size()))
		n19, err := m.ConnTrackInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.TelemetryInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TelemetryInfo.Size()))
		n20, err := m.TelemetryInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *FlowSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowKey.Size()))
		n21, err := m.FlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.FlowData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowData.Size()))
		n22, err := m.FlowData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *SessionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VrfKeyHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.VrfKeyHandle.Size()))
		n23, err := m.VrfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.SessionId))
		i += 4
	}
	if m.ConnTrackEn {
		dAtA[i] = 0x18
		i++
		if m.ConnTrackEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpTsOption {
		dAtA[i] = 0x20
		i++
		if m.TcpTsOption {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpSackPermOption {
		dAtA[i] = 0x28
		i++
		if m.TcpSackPermOption {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InitiatorFlow != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.InitiatorFlow.Size()))
		n24, err := m.InitiatorFlow.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.ResponderFlow != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ResponderFlow.Size()))
		n25, err := m.ResponderFlow.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.PeerInitiatorFlow != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.PeerInitiatorFlow.Size()))
		n26, err := m.PeerInitiatorFlow.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.PeerResponderFlow != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.PeerResponderFlow.Size()))
		n27, err := m.PeerResponderFlow.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Deleting {
		dAtA[i] = 0x50
		i++
		if m.Deleting {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpAgingEnqueued {
		dAtA[i] = 0x58
		i++
		if m.TcpAgingEnqueued {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SessionRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.FlowHandle))
		i += 8
	}
	if m.ConnTrackInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ConnTrackInfo.Size()))
		n28, err := m.ConnTrackInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.TelemetryInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TelemetryInfo.Size()))
		n29, err := m.TelemetryInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.FlowColl {
		dAtA[i] = 0x20
		i++
		if m.FlowColl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FlowHash != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowHash))
	}
	if m.FlowDirection != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowDirection))
	}
	if m.FlowInstance != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowInstance))
	}
	return i, nil
}

func (m *ALGStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ALGStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcIp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.SrcIp.Size()))
		n30, err := m.SrcIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.DstIp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.DstIp.Size()))
		n31, err := m.DstIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.Proto != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Proto))
	}
	if m.Sport != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Sport))
	}
	if m.Dport != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Dport))
	}
	if m.Iscontrol {
		dAtA[i] = 0x30
		i++
		if m.Iscontrol {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EXPECTEDFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EXPECTEDFlow) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowKey.Size()))
		n32, err := m.FlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.IdleTimeout != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IdleTimeout))
	}
	return i, nil
}

func (m *EXPECTEDFlows) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EXPECTEDFlows) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Flow) > 0 {
		for _, msg := range m.Flow {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ACTIVESessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACTIVESessions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActiveSession) > 0 {
		for _, msg := range m.ActiveSession {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TCPSegment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPSegment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.End))
	}
	return i, nil
}

func (m *TCPBuffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPBuffer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentSeq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CurrentSeq))
	}
	if m.EndBuffSeq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.EndBuffSeq))
	}
	if m.BuffSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.BuffSize))
	}
	if m.NumSegments != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NumSegments))
	}
	if len(m.Segments) > 0 {
		for _, msg := range m.Segments {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CurrentSlab != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CurrentSlab))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *TFTPALGInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TFTPALGInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iscontrol {
		dAtA[i] = 0x8
		i++
		if m.Iscontrol {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ParseError != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ParseError))
	}
	if m.UnknownOpcode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.UnknownOpcode))
	}
	if m.Tftpop != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Tftpop))
	}
	return i, nil
}

func (m *SUNRPCInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SUNRPCInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Xid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Xid))
	}
	if m.ProgNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ProgNum))
	}
	if m.Rpcvers != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Rpcvers))
	}
	return i, nil
}

func (m *MSRPCInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSRPCInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataRep != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.DataRep))
	}
	if m.CallId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CallId))
	}
	if len(m.ActId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.ActId)))
		i += copy(dAtA[i:], m.ActId)
	}
	if len(m.Uuid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	if m.Msrpc_64Bit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Msrpc_64Bit))
	}
	if len(m.MsrpcCtxtId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.MsrpcCtxtId)))
		i += copy(dAtA[i:], m.MsrpcCtxtId)
	}
	if m.NumMsrpcCtxt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NumMsrpcCtxt))
	}
	return i, nil
}

func (m *RPCALGInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCALGInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iscontrol {
		dAtA[i] = 0x8
		i++
		if m.Iscontrol {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ParseError != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ParseError))
	}
	if m.NumDataSess != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NumDataSess))
	}
	if m.NumExpFlows != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NumExpFlows))
	}
	if m.MaxpktSizeExceeded != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.MaxpktSizeExceeded))
	}
	if len(m.Pkt) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Pkt)))
		i += copy(dAtA[i:], m.Pkt)
	}
	if m.PayloadOffset != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.PayloadOffset))
	}
	if m.RpcFragCont != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.RpcFragCont))
	}
	if m.Ip != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Ip.Size()))
		n33, err := m.Ip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Prot != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Prot))
	}
	if m.Dport != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Dport))
	}
	if m.Vers != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Vers))
	}
	if m.PktType != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.PktType))
	}
	if m.AlgInfo != nil {
		nn34, err := m.AlgInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn34
	}
	if m.IflowTcpBuf != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IflowTcpBuf.Size()))
		n35, err := m.IflowTcpBuf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.RflowTcpBuf != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.RflowTcpBuf.Size()))
		n36, err := m.RflowTcpBuf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.ExpectedFlows != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ExpectedFlows.Size()))
		n37, err := m.ExpectedFlows.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.CreatedSessions != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CreatedSessions.Size()))
		n38, err := m.CreatedSessions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *RPCALGInfo_SunRpcInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SunRpcInfo != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.SunRpcInfo.Size()))
		n39, err := m.SunRpcInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *RPCALGInfo_MsRpcInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MsRpcInfo != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.MsRpcInfo.Size()))
		n40, err := m.MsRpcInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *SIPALGInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SIPALGInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ParseError != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ParseError))
	}
	return i, nil
}

func (m *FTPALGInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FTPALGInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iscontrol {
		dAtA[i] = 0x8
		i++
		if m.Iscontrol {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ParseError != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ParseError))
	}
	if m.NumDataSess != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NumDataSess))
	}
	if m.NumExpFlows != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NumExpFlows))
	}
	if m.IflowTcpBuf != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IflowTcpBuf.Size()))
		n41, err := m.IflowTcpBuf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.RflowTcpBuf != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.RflowTcpBuf.Size()))
		n42, err := m.RflowTcpBuf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.ExpectedCmdType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ExpectedCmdType))
	}
	if m.ExpectedFlows != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ExpectedFlows.Size()))
		n43, err := m.ExpectedFlows.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.CreatedSessions != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CreatedSessions.Size()))
		n44, err := m.CreatedSessions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *RTSPCtrlSessInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RTSPCtrlSessInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VrfId != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.VrfId))
		i += 8
	}
	if m.ServerIp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ServerIp.Size()))
		n45, err := m.ServerIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.ServerPort != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ServerPort))
	}
	if len(m.SessionId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.SessionId)))
		i += copy(dAtA[i:], m.SessionId)
	}
	if m.ExpectedFlows != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ExpectedFlows.Size()))
		n46, err := m.ExpectedFlows.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.CreatedSessions != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CreatedSessions.Size()))
		n47, err := m.CreatedSessions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}

func (m *RTSPCtrlSessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RTSPCtrlSessions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Session) > 0 {
		for _, msg := range m.Session {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RTSPALGInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RTSPALGInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iscontrol {
		dAtA[i] = 0x8
		i++
		if m.Iscontrol {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Sessionid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Sessionid)))
		i += copy(dAtA[i:], m.Sessionid)
	}
	if m.ParseErrors != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ParseErrors))
	}
	if m.NumDataSess != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NumDataSess))
	}
	if m.NumExpFlows != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NumExpFlows))
	}
	if m.NumRtspSessions != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NumRtspSessions))
	}
	if m.IflowTcpBuf != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IflowTcpBuf.Size()))
		n48, err := m.IflowTcpBuf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.RflowTcpBuf != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.RflowTcpBuf.Size()))
		n49, err := m.RflowTcpBuf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.CtrlSessions != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CtrlSessions.Size()))
		n50, err := m.CtrlSessions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *DNSALGInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSALGInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ParseErrors != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ParseErrors))
	}
	if m.DnsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.DnsId))
	}
	if m.TimeRemaining != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TimeRemaining))
	}
	return i, nil
}

func (m *SessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SessionHandle))
		i += 8
	}
	if m.IflowStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IflowStatus.Size()))
		n51, err := m.IflowStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if m.RflowStatus != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.RflowStatus.Size()))
		n52, err := m.RflowStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	if m.PeerIflowStatus != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.PeerIflowStatus.Size()))
		n53, err := m.PeerIflowStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.PeerRflowStatus != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.PeerRflowStatus.Size()))
		n54, err := m.PeerRflowStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	if m.AppId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.AppId))
	}
	if m.AppIdState != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.AppIdState))
	}
	if m.Alg != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Alg))
	}
	if m.AlgInfo != nil {
		nn55, err := m.AlgInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn55
	}
	if m.SessionSyncing {
		dAtA[i] = 0x78
		i++
		if m.SessionSyncing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LookupVrf != 0 {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.LookupVrf))
		i += 8
	}
	if m.Smac != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Smac))
		i += 8
	}
	if m.Dmac != 0 {
		dAtA[i] = 0x91
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Dmac))
		i += 8
	}
	if m.L2SegId != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.L2SegId))
	}
	return i, nil
}

func (m *SessionStatus_TftpInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TftpInfo != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TftpInfo.Size()))
		n56, err := m.TftpInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *SessionStatus_RpcInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RpcInfo != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.RpcInfo.Size()))
		n57, err := m.RpcInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *SessionStatus_SipInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SipInfo != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.SipInfo.Size()))
		n58, err := m.SipInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *SessionStatus_RtspInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RtspInfo != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.RtspInfo.Size()))
		n59, err := m.RtspInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *SessionStatus_DnsInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DnsInfo != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.DnsInfo.Size()))
		n60, err := m.DnsInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}
func (m *SessionStatus_FtpInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FtpInfo != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FtpInfo.Size()))
		n61, err := m.FtpInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *SessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Status.Size()))
		n62, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}

func (m *SessionResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SessionDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GetBy != nil {
		nn63, err := m.GetBy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn63
	}
	return i, nil
}

func (m *SessionDeleteRequest_SessionHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x9
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SessionHandle))
	i += 8
	return i, nil
}
func (m *SessionDeleteRequest_SessionFilter) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionFilter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.SessionFilter.Size()))
		n64, err := m.SessionFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *SessionDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SessionDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ApiStatus))
	}
	if m.SessionHandle != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SessionHandle))
		i += 8
	}
	return i, nil
}

func (m *SessionDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SessionFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcIp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.SrcIp.Size()))
		n65, err := m.SrcIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.DstIp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.DstIp.Size()))
		n66, err := m.DstIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if m.SrcPort != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.SrcPort))
	}
	if m.DstPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.DstPort))
	}
	if m.IpProto != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IpProto))
	}
	if m.VrfId != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.VrfId))
		i += 8
	}
	if m.L2SegmentId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.L2SegmentId))
	}
	if m.Alg != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Alg))
	}
	return i, nil
}

func (m *SessionGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GetBy != nil {
		nn67, err := m.GetBy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn67
	}
	return i, nil
}

func (m *SessionGetRequest_SessionHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x9
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SessionHandle))
	i += 8
	return i, nil
}
func (m *SessionGetRequest_SessionFilter) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionFilter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.SessionFilter.Size()))
		n68, err := m.SessionFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}
func (m *SessionGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowPermittedPackets != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.FlowPermittedPackets))
		i += 8
	}
	if m.FlowPermittedBytes != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.FlowPermittedBytes))
		i += 8
	}
	if m.FlowDroppedPackets != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.FlowDroppedPackets))
		i += 8
	}
	if m.FlowDroppedBytes != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.FlowDroppedBytes))
		i += 8
	}
	if m.NumTcpTicklesSent != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.NumTcpTicklesSent))
		i += 8
	}
	if m.NumTcpRstSent != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.NumTcpRstSent))
		i += 8
	}
	return i, nil
}

func (m *SessionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InitiatorFlowStats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.InitiatorFlowStats.Size()))
		n69, err := m.InitiatorFlowStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	if m.ResponderFlowStats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ResponderFlowStats.Size()))
		n70, err := m.ResponderFlowStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	if m.PeerInitiatorFlowStats != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.PeerInitiatorFlowStats.Size()))
		n71, err := m.PeerInitiatorFlowStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.PeerResponderFlowStats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.PeerResponderFlowStats.Size()))
		n72, err := m.PeerResponderFlowStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}

func (m *SessionGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Spec.Size()))
		n73, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Status.Size()))
		n74, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Stats.Size()))
		n75, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func (m *SessionGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintSession(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FlowKeyL2) Size() (n int) {
	var l int
	_ = l
	if m.Smac != 0 {
		n += 9
	}
	if m.Dmac != 0 {
		n += 9
	}
	if m.L2SegmentId != 0 {
		n += 1 + sovSession(uint64(m.L2SegmentId))
	}
	if m.EtherType != 0 {
		n += 1 + sovSession(uint64(m.EtherType))
	}
	return n
}

func (m *FlowKeyTcpUdpInfo) Size() (n int) {
	var l int
	_ = l
	if m.Sport != 0 {
		n += 1 + sovSession(uint64(m.Sport))
	}
	if m.Dport != 0 {
		n += 1 + sovSession(uint64(m.Dport))
	}
	return n
}

func (m *FlowKeyICMPInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSession(uint64(m.Type))
	}
	if m.Code != 0 {
		n += 1 + sovSession(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovSession(uint64(m.Id))
	}
	return n
}

func (m *FlowKeyESPInfo) Size() (n int) {
	var l int
	_ = l
	if m.Spi != 0 {
		n += 1 + sovSession(uint64(m.Spi))
	}
	return n
}

func (m *FlowKeyV4) Size() (n int) {
	var l int
	_ = l
	if m.Sip != 0 {
		n += 5
	}
	if m.Dip != 0 {
		n += 5
	}
	if m.IpProto != 0 {
		n += 1 + sovSession(uint64(m.IpProto))
	}
	if m.L4Fields != nil {
		n += m.L4Fields.Size()
	}
	return n
}

func (m *FlowKeyV4_TcpUdp) Size() (n int) {
	var l int
	_ = l
	if m.TcpUdp != nil {
		l = m.TcpUdp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV4_Icmp) Size() (n int) {
	var l int
	_ = l
	if m.Icmp != nil {
		l = m.Icmp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV4_Esp) Size() (n int) {
	var l int
	_ = l
	if m.Esp != nil {
		l = m.Esp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV6) Size() (n int) {
	var l int
	_ = l
	if m.Sip != nil {
		l = m.Sip.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Dip != nil {
		l = m.Dip.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.IpProto != 0 {
		n += 1 + sovSession(uint64(m.IpProto))
	}
	if m.L4Fields != nil {
		n += m.L4Fields.Size()
	}
	return n
}

func (m *FlowKeyV6_TcpUdp) Size() (n int) {
	var l int
	_ = l
	if m.TcpUdp != nil {
		l = m.TcpUdp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV6_Icmp) Size() (n int) {
	var l int
	_ = l
	if m.Icmp != nil {
		l = m.Icmp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV6_Esp) Size() (n int) {
	var l int
	_ = l
	if m.Esp != nil {
		l = m.Esp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKey) Size() (n int) {
	var l int
	_ = l
	if m.SrcVrfId != 0 {
		n += 9
	}
	if m.DstVrfId != 0 {
		n += 9
	}
	if m.FlowKey != nil {
		n += m.FlowKey.Size()
	}
	return n
}

func (m *FlowKey_L2Key) Size() (n int) {
	var l int
	_ = l
	if m.L2Key != nil {
		l = m.L2Key.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKey_V4Key) Size() (n int) {
	var l int
	_ = l
	if m.V4Key != nil {
		l = m.V4Key.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKey_V6Key) Size() (n int) {
	var l int
	_ = l
	if m.V6Key != nil {
		l = m.V6Key.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowInfo) Size() (n int) {
	var l int
	_ = l
	if m.FlowAction != 0 {
		n += 1 + sovSession(uint64(m.FlowAction))
	}
	if m.FlowAge != 0 {
		n += 1 + sovSession(uint64(m.FlowAge))
	}
	if m.TimeToAge != 0 {
		n += 1 + sovSession(uint64(m.TimeToAge))
	}
	if m.LastPacketSeenTime != 0 {
		n += 1 + sovSession(uint64(m.LastPacketSeenTime))
	}
	if m.NatType != 0 {
		n += 1 + sovSession(uint64(m.NatType))
	}
	if m.NatSip != nil {
		l = m.NatSip.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.NatSport != 0 {
		n += 1 + sovSession(uint64(m.NatSport))
	}
	if m.NatDip != nil {
		l = m.NatDip.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.NatDport != 0 {
		n += 1 + sovSession(uint64(m.NatDport))
	}
	if m.NatDmac != 0 {
		n += 9
	}
	if m.TcpState != 0 {
		n += 1 + sovSession(uint64(m.TcpState))
	}
	if m.HalTcpState != 0 {
		n += 1 + sovSession(uint64(m.HalTcpState))
	}
	if m.SourceLifCheckEnable {
		n += 2
	}
	if m.ExpectedSourceLif != 0 {
		n += 1 + sovSession(uint64(m.ExpectedSourceLif))
	}
	if len(m.IngMirrorSessions) > 0 {
		for _, e := range m.IngMirrorSessions {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	if len(m.EgrMirrorSessions) > 0 {
		for _, e := range m.EgrMirrorSessions {
			l = e.Size()
			n += 2 + l + sovSession(uint64(l))
		}
	}
	if m.IdleTimeout != 0 {
		n += 2 + sovSession(uint64(m.IdleTimeout))
	}
	return n
}

func (m *ConnTrackExceptions) Size() (n int) {
	var l int
	_ = l
	if m.TcpSynRetransmit {
		n += 2
	}
	if m.TcpWinZeroDrop {
		n += 2
	}
	if m.TcpFullRetransmit {
		n += 2
	}
	if m.TcpPartialOverlap {
		n += 2
	}
	if m.TcpPacketReorder {
		n += 2
	}
	if m.TcpOutOfWindow {
		n += 2
	}
	if m.TcpInvalidAckNum {
		n += 2
	}
	if m.TcpNormalizationDrop {
		n += 2
	}
	if m.TcpSplitHandshakeDetected {
		n += 2
	}
	if m.TcpDataAfterFin {
		n += 2
	}
	if m.TcpNonRstPktAfterRst {
		n += 2
	}
	if m.TcpInvalidFirstPktFromResponder {
		n += 2
	}
	if m.TcpUnexpectedPkt {
		n += 2
	}
	if m.TcpRstWithInvalidAckNum {
		n += 2
	}
	return n
}

func (m *ConnTrackInfo) Size() (n int) {
	var l int
	_ = l
	if m.FlowCreateTs != 0 {
		n += 9
	}
	if m.FlowBytes != 0 {
		n += 9
	}
	if m.FlowPackets != 0 {
		n += 5
	}
	if m.Exceptions != nil {
		l = m.Exceptions.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.TcpSeqNum != 0 {
		n += 5
	}
	if m.TcpAckNum != 0 {
		n += 5
	}
	if m.TcpWinSz != 0 {
		n += 1 + sovSession(uint64(m.TcpWinSz))
	}
	if m.TcpWinScale != 0 {
		n += 1 + sovSession(uint64(m.TcpWinScale))
	}
	if m.TcpMss != 0 {
		n += 1 + sovSession(uint64(m.TcpMss))
	}
	if m.TcpSackPermOptionSent {
		n += 2
	}
	if m.IflowSynAckDelta != 0 {
		n += 1 + sozSession(uint64(m.IflowSynAckDelta))
	}
	if m.TcpWsOptionSent {
		n += 2
	}
	if m.TcpTsOptionSent {
		n += 2
	}
	return n
}

func (m *TelemetryInfo) Size() (n int) {
	var l int
	_ = l
	if m.IngressMirrorSessionEnable {
		n += 2
	}
	if m.EgressMirrorSessionEnable {
		n += 2
	}
	if m.IngressMirrorSession != 0 {
		n += 1 + sovSession(uint64(m.IngressMirrorSession))
	}
	if m.EgressMirrorSession != 0 {
		n += 1 + sovSession(uint64(m.EgressMirrorSession))
	}
	if m.FlowExportEnableBitmap != 0 {
		n += 1 + sovSession(uint64(m.FlowExportEnableBitmap))
	}
	if m.FlowExportId1 != 0 {
		n += 1 + sovSession(uint64(m.FlowExportId1))
	}
	if m.FlowExportId2 != 0 {
		n += 1 + sovSession(uint64(m.FlowExportId2))
	}
	if m.FlowExportId3 != 0 {
		n += 1 + sovSession(uint64(m.FlowExportId3))
	}
	if m.FlowExportId4 != 0 {
		n += 1 + sovSession(uint64(m.FlowExportId4))
	}
	return n
}

func (m *FlowData) Size() (n int) {
	var l int
	_ = l
	if m.FlowInfo != nil {
		l = m.FlowInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ConnTrackInfo != nil {
		l = m.ConnTrackInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.TelemetryInfo != nil {
		l = m.TelemetryInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *FlowSpec) Size() (n int) {
	var l int
	_ = l
	if m.FlowKey != nil {
		l = m.FlowKey.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.FlowData != nil {
		l = m.FlowData.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionSpec) Size() (n int) {
	var l int
	_ = l
	if m.VrfKeyHandle != nil {
		l = m.VrfKeyHandle.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.SessionId != 0 {
		n += 5
	}
	if m.ConnTrackEn {
		n += 2
	}
	if m.TcpTsOption {
		n += 2
	}
	if m.TcpSackPermOption {
		n += 2
	}
	if m.InitiatorFlow != nil {
		l = m.InitiatorFlow.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ResponderFlow != nil {
		l = m.ResponderFlow.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.PeerInitiatorFlow != nil {
		l = m.PeerInitiatorFlow.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.PeerResponderFlow != nil {
		l = m.PeerResponderFlow.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Deleting {
		n += 2
	}
	if m.TcpAgingEnqueued {
		n += 2
	}
	return n
}

func (m *SessionRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *FlowStatus) Size() (n int) {
	var l int
	_ = l
	if m.FlowHandle != 0 {
		n += 9
	}
	if m.ConnTrackInfo != nil {
		l = m.ConnTrackInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.TelemetryInfo != nil {
		l = m.TelemetryInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.FlowColl {
		n += 2
	}
	if m.FlowHash != 0 {
		n += 1 + sovSession(uint64(m.FlowHash))
	}
	if m.FlowDirection != 0 {
		n += 1 + sovSession(uint64(m.FlowDirection))
	}
	if m.FlowInstance != 0 {
		n += 1 + sovSession(uint64(m.FlowInstance))
	}
	return n
}

func (m *ALGStatus) Size() (n int) {
	var l int
	_ = l
	if m.SrcIp != nil {
		l = m.SrcIp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.DstIp != nil {
		l = m.DstIp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Proto != 0 {
		n += 1 + sovSession(uint64(m.Proto))
	}
	if m.Sport != 0 {
		n += 1 + sovSession(uint64(m.Sport))
	}
	if m.Dport != 0 {
		n += 1 + sovSession(uint64(m.Dport))
	}
	if m.Iscontrol {
		n += 2
	}
	return n
}

func (m *EXPECTEDFlow) Size() (n int) {
	var l int
	_ = l
	if m.FlowKey != nil {
		l = m.FlowKey.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.IdleTimeout != 0 {
		n += 1 + sovSession(uint64(m.IdleTimeout))
	}
	return n
}

func (m *EXPECTEDFlows) Size() (n int) {
	var l int
	_ = l
	if len(m.Flow) > 0 {
		for _, e := range m.Flow {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *ACTIVESessions) Size() (n int) {
	var l int
	_ = l
	if len(m.ActiveSession) > 0 {
		for _, e := range m.ActiveSession {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *TCPSegment) Size() (n int) {
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovSession(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovSession(uint64(m.End))
	}
	return n
}

func (m *TCPBuffer) Size() (n int) {
	var l int
	_ = l
	if m.CurrentSeq != 0 {
		n += 1 + sovSession(uint64(m.CurrentSeq))
	}
	if m.EndBuffSeq != 0 {
		n += 1 + sovSession(uint64(m.EndBuffSeq))
	}
	if m.BuffSize != 0 {
		n += 1 + sovSession(uint64(m.BuffSize))
	}
	if m.NumSegments != 0 {
		n += 1 + sovSession(uint64(m.NumSegments))
	}
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	if m.CurrentSlab != 0 {
		n += 1 + sovSession(uint64(m.CurrentSlab))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *TFTPALGInfo) Size() (n int) {
	var l int
	_ = l
	if m.Iscontrol {
		n += 2
	}
	if m.ParseError != 0 {
		n += 1 + sovSession(uint64(m.ParseError))
	}
	if m.UnknownOpcode != 0 {
		n += 1 + sovSession(uint64(m.UnknownOpcode))
	}
	if m.Tftpop != 0 {
		n += 1 + sovSession(uint64(m.Tftpop))
	}
	return n
}

func (m *SUNRPCInfo) Size() (n int) {
	var l int
	_ = l
	if m.Xid != 0 {
		n += 1 + sovSession(uint64(m.Xid))
	}
	if m.ProgNum != 0 {
		n += 1 + sovSession(uint64(m.ProgNum))
	}
	if m.Rpcvers != 0 {
		n += 1 + sovSession(uint64(m.Rpcvers))
	}
	return n
}

func (m *MSRPCInfo) Size() (n int) {
	var l int
	_ = l
	if m.DataRep != 0 {
		n += 1 + sovSession(uint64(m.DataRep))
	}
	if m.CallId != 0 {
		n += 1 + sovSession(uint64(m.CallId))
	}
	l = len(m.ActId)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Msrpc_64Bit != 0 {
		n += 1 + sovSession(uint64(m.Msrpc_64Bit))
	}
	l = len(m.MsrpcCtxtId)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.NumMsrpcCtxt != 0 {
		n += 1 + sovSession(uint64(m.NumMsrpcCtxt))
	}
	return n
}

func (m *RPCALGInfo) Size() (n int) {
	var l int
	_ = l
	if m.Iscontrol {
		n += 2
	}
	if m.ParseError != 0 {
		n += 1 + sovSession(uint64(m.ParseError))
	}
	if m.NumDataSess != 0 {
		n += 1 + sovSession(uint64(m.NumDataSess))
	}
	if m.NumExpFlows != 0 {
		n += 1 + sovSession(uint64(m.NumExpFlows))
	}
	if m.MaxpktSizeExceeded != 0 {
		n += 1 + sovSession(uint64(m.MaxpktSizeExceeded))
	}
	l = len(m.Pkt)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.PayloadOffset != 0 {
		n += 1 + sovSession(uint64(m.PayloadOffset))
	}
	if m.RpcFragCont != 0 {
		n += 1 + sovSession(uint64(m.RpcFragCont))
	}
	if m.Ip != nil {
		l = m.Ip.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Prot != 0 {
		n += 1 + sovSession(uint64(m.Prot))
	}
	if m.Dport != 0 {
		n += 1 + sovSession(uint64(m.Dport))
	}
	if m.Vers != 0 {
		n += 1 + sovSession(uint64(m.Vers))
	}
	if m.PktType != 0 {
		n += 1 + sovSession(uint64(m.PktType))
	}
	if m.AlgInfo != nil {
		n += m.AlgInfo.Size()
	}
	if m.IflowTcpBuf != nil {
		l = m.IflowTcpBuf.Size()
		n += 2 + l + sovSession(uint64(l))
	}
	if m.RflowTcpBuf != nil {
		l = m.RflowTcpBuf.Size()
		n += 2 + l + sovSession(uint64(l))
	}
	if m.ExpectedFlows != nil {
		l = m.ExpectedFlows.Size()
		n += 2 + l + sovSession(uint64(l))
	}
	if m.CreatedSessions != nil {
		l = m.CreatedSessions.Size()
		n += 2 + l + sovSession(uint64(l))
	}
	return n
}

func (m *RPCALGInfo_SunRpcInfo) Size() (n int) {
	var l int
	_ = l
	if m.SunRpcInfo != nil {
		l = m.SunRpcInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *RPCALGInfo_MsRpcInfo) Size() (n int) {
	var l int
	_ = l
	if m.MsRpcInfo != nil {
		l = m.MsRpcInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *SIPALGInfo) Size() (n int) {
	var l int
	_ = l
	if m.ParseError != 0 {
		n += 1 + sovSession(uint64(m.ParseError))
	}
	return n
}

func (m *FTPALGInfo) Size() (n int) {
	var l int
	_ = l
	if m.Iscontrol {
		n += 2
	}
	if m.ParseError != 0 {
		n += 1 + sovSession(uint64(m.ParseError))
	}
	if m.NumDataSess != 0 {
		n += 1 + sovSession(uint64(m.NumDataSess))
	}
	if m.NumExpFlows != 0 {
		n += 1 + sovSession(uint64(m.NumExpFlows))
	}
	if m.IflowTcpBuf != nil {
		l = m.IflowTcpBuf.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.RflowTcpBuf != nil {
		l = m.RflowTcpBuf.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ExpectedCmdType != 0 {
		n += 1 + sovSession(uint64(m.ExpectedCmdType))
	}
	if m.ExpectedFlows != nil {
		l = m.ExpectedFlows.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.CreatedSessions != nil {
		l = m.CreatedSessions.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *RTSPCtrlSessInfo) Size() (n int) {
	var l int
	_ = l
	if m.VrfId != 0 {
		n += 9
	}
	if m.ServerIp != nil {
		l = m.ServerIp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ServerPort != 0 {
		n += 1 + sovSession(uint64(m.ServerPort))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ExpectedFlows != nil {
		l = m.ExpectedFlows.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.CreatedSessions != nil {
		l = m.CreatedSessions.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *RTSPCtrlSessions) Size() (n int) {
	var l int
	_ = l
	if len(m.Session) > 0 {
		for _, e := range m.Session {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *RTSPALGInfo) Size() (n int) {
	var l int
	_ = l
	if m.Iscontrol {
		n += 2
	}
	l = len(m.Sessionid)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ParseErrors != 0 {
		n += 1 + sovSession(uint64(m.ParseErrors))
	}
	if m.NumDataSess != 0 {
		n += 1 + sovSession(uint64(m.NumDataSess))
	}
	if m.NumExpFlows != 0 {
		n += 1 + sovSession(uint64(m.NumExpFlows))
	}
	if m.NumRtspSessions != 0 {
		n += 1 + sovSession(uint64(m.NumRtspSessions))
	}
	if m.IflowTcpBuf != nil {
		l = m.IflowTcpBuf.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.RflowTcpBuf != nil {
		l = m.RflowTcpBuf.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.CtrlSessions != nil {
		l = m.CtrlSessions.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *DNSALGInfo) Size() (n int) {
	var l int
	_ = l
	if m.ParseErrors != 0 {
		n += 1 + sovSession(uint64(m.ParseErrors))
	}
	if m.DnsId != 0 {
		n += 1 + sovSession(uint64(m.DnsId))
	}
	if m.TimeRemaining != 0 {
		n += 1 + sovSession(uint64(m.TimeRemaining))
	}
	return n
}

func (m *SessionStatus) Size() (n int) {
	var l int
	_ = l
	if m.SessionHandle != 0 {
		n += 9
	}
	if m.IflowStatus != nil {
		l = m.IflowStatus.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.RflowStatus != nil {
		l = m.RflowStatus.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.PeerIflowStatus != nil {
		l = m.PeerIflowStatus.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.PeerRflowStatus != nil {
		l = m.PeerRflowStatus.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovSession(uint64(m.AppId))
	}
	if m.AppIdState != 0 {
		n += 1 + sovSession(uint64(m.AppIdState))
	}
	if m.Alg != 0 {
		n += 1 + sovSession(uint64(m.Alg))
	}
	if m.AlgInfo != nil {
		n += m.AlgInfo.Size()
	}
	if m.SessionSyncing {
		n += 2
	}
	if m.LookupVrf != 0 {
		n += 10
	}
	if m.Smac != 0 {
		n += 10
	}
	if m.Dmac != 0 {
		n += 10
	}
	if m.L2SegId != 0 {
		n += 2 + sovSession(uint64(m.L2SegId))
	}
	return n
}

func (m *SessionStatus_TftpInfo) Size() (n int) {
	var l int
	_ = l
	if m.TftpInfo != nil {
		l = m.TftpInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *SessionStatus_RpcInfo) Size() (n int) {
	var l int
	_ = l
	if m.RpcInfo != nil {
		l = m.RpcInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *SessionStatus_SipInfo) Size() (n int) {
	var l int
	_ = l
	if m.SipInfo != nil {
		l = m.SipInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *SessionStatus_RtspInfo) Size() (n int) {
	var l int
	_ = l
	if m.RtspInfo != nil {
		l = m.RtspInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *SessionStatus_DnsInfo) Size() (n int) {
	var l int
	_ = l
	if m.DnsInfo != nil {
		l = m.DnsInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *SessionStatus_FtpInfo) Size() (n int) {
	var l int
	_ = l
	if m.FtpInfo != nil {
		l = m.FtpInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *SessionResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSession(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *SessionDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.GetBy != nil {
		n += m.GetBy.Size()
	}
	return n
}

func (m *SessionDeleteRequest_SessionHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *SessionDeleteRequest_SessionFilter) Size() (n int) {
	var l int
	_ = l
	if m.SessionFilter != nil {
		l = m.SessionFilter.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *SessionDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *SessionDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSession(uint64(m.ApiStatus))
	}
	if m.SessionHandle != 0 {
		n += 9
	}
	return n
}

func (m *SessionDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *SessionFilter) Size() (n int) {
	var l int
	_ = l
	if m.SrcIp != nil {
		l = m.SrcIp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.DstIp != nil {
		l = m.DstIp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.SrcPort != 0 {
		n += 1 + sovSession(uint64(m.SrcPort))
	}
	if m.DstPort != 0 {
		n += 1 + sovSession(uint64(m.DstPort))
	}
	if m.IpProto != 0 {
		n += 1 + sovSession(uint64(m.IpProto))
	}
	if m.VrfId != 0 {
		n += 9
	}
	if m.L2SegmentId != 0 {
		n += 1 + sovSession(uint64(m.L2SegmentId))
	}
	if m.Alg != 0 {
		n += 1 + sovSession(uint64(m.Alg))
	}
	return n
}

func (m *SessionGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.GetBy != nil {
		n += m.GetBy.Size()
	}
	return n
}

func (m *SessionGetRequest_SessionHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *SessionGetRequest_SessionFilter) Size() (n int) {
	var l int
	_ = l
	if m.SessionFilter != nil {
		l = m.SessionFilter.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *SessionGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *FlowStats) Size() (n int) {
	var l int
	_ = l
	if m.FlowPermittedPackets != 0 {
		n += 9
	}
	if m.FlowPermittedBytes != 0 {
		n += 9
	}
	if m.FlowDroppedPackets != 0 {
		n += 9
	}
	if m.FlowDroppedBytes != 0 {
		n += 9
	}
	if m.NumTcpTicklesSent != 0 {
		n += 9
	}
	if m.NumTcpRstSent != 0 {
		n += 9
	}
	return n
}

func (m *SessionStats) Size() (n int) {
	var l int
	_ = l
	if m.InitiatorFlowStats != nil {
		l = m.InitiatorFlowStats.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ResponderFlowStats != nil {
		l = m.ResponderFlowStats.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.PeerInitiatorFlowStats != nil {
		l = m.PeerInitiatorFlowStats.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.PeerResponderFlowStats != nil {
		l = m.PeerResponderFlowStats.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSession(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSession(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func sovSession(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSession(x uint64) (n int) {
	return sovSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowKeyL2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyL2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyL2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smac", wireType)
			}
			m.Smac = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Smac = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmac", wireType)
			}
			m.Dmac = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Dmac = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentId", wireType)
			}
			m.L2SegmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2SegmentId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtherType", wireType)
			}
			m.EtherType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtherType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyTcpUdpInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyTcpUdpInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyTcpUdpInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sport", wireType)
			}
			m.Sport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dport", wireType)
			}
			m.Dport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyICMPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyICMPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyICMPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyESPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyESPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyESPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyV4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyV4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyV4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sip", wireType)
			}
			m.Sip = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sip = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dip", wireType)
			}
			m.Dip = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Dip = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProto", wireType)
			}
			m.IpProto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpProto |= (IPProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpUdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyTcpUdpInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV4_TcpUdp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icmp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyICMPInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV4_Icmp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Esp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyESPInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV4_Esp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyV6) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyV6: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyV6: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sip == nil {
				m.Sip = &IPAddress{}
			}
			if err := m.Sip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dip == nil {
				m.Dip = &IPAddress{}
			}
			if err := m.Dip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProto", wireType)
			}
			m.IpProto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpProto |= (IPProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpUdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyTcpUdpInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV6_TcpUdp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icmp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyICMPInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV6_Icmp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Esp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyESPInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV6_Esp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcVrfId", wireType)
			}
			m.SrcVrfId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcVrfId = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstVrfId", wireType)
			}
			m.DstVrfId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DstVrfId = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyL2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowKey = &FlowKey_L2Key{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyV4{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowKey = &FlowKey_V4Key{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyV6{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowKey = &FlowKey_V6Key{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowAction", wireType)
			}
			m.FlowAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowAction |= (FlowAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowAge", wireType)
			}
			m.FlowAge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowAge |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeToAge", wireType)
			}
			m.TimeToAge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeToAge |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPacketSeenTime", wireType)
			}
			m.LastPacketSeenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPacketSeenTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatType", wireType)
			}
			m.NatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatType |= (NatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatSip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NatSip == nil {
				m.NatSip = &IPAddress{}
			}
			if err := m.NatSip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatSport", wireType)
			}
			m.NatSport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatSport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatDip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NatDip == nil {
				m.NatDip = &IPAddress{}
			}
			if err := m.NatDip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatDport", wireType)
			}
			m.NatDport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatDport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatDmac", wireType)
			}
			m.NatDmac = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.NatDmac = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpState", wireType)
			}
			m.TcpState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpState |= (FlowTCPState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HalTcpState", wireType)
			}
			m.HalTcpState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HalTcpState |= (FlowTCPState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceLifCheckEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SourceLifCheckEnable = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedSourceLif", wireType)
			}
			m.ExpectedSourceLif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedSourceLif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngMirrorSessions = append(m.IngMirrorSessions, &MirrorSessionKeyHandle{})
			if err := m.IngMirrorSessions[len(m.IngMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EgrMirrorSessions = append(m.EgrMirrorSessions, &MirrorSessionKeyHandle{})
			if err := m.EgrMirrorSessions[len(m.EgrMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnTrackExceptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnTrackExceptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnTrackExceptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSynRetransmit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpSynRetransmit = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpWinZeroDrop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpWinZeroDrop = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpFullRetransmit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpFullRetransmit = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpPartialOverlap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpPartialOverlap = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpPacketReorder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpPacketReorder = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpOutOfWindow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpOutOfWindow = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpInvalidAckNum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpInvalidAckNum = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpNormalizationDrop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpNormalizationDrop = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSplitHandshakeDetected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpSplitHandshakeDetected = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpDataAfterFin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpDataAfterFin = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpNonRstPktAfterRst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpNonRstPktAfterRst = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpInvalidFirstPktFromResponder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpInvalidFirstPktFromResponder = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpUnexpectedPkt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpUnexpectedPkt = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpRstWithInvalidAckNum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpRstWithInvalidAckNum = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnTrackInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnTrackInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnTrackInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCreateTs", wireType)
			}
			m.FlowCreateTs = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowCreateTs = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowBytes", wireType)
			}
			m.FlowBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowBytes = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPackets", wireType)
			}
			m.FlowPackets = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowPackets = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exceptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exceptions == nil {
				m.Exceptions = &ConnTrackExceptions{}
			}
			if err := m.Exceptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSeqNum", wireType)
			}
			m.TcpSeqNum = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpSeqNum = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAckNum", wireType)
			}
			m.TcpAckNum = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpAckNum = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpWinSz", wireType)
			}
			m.TcpWinSz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpWinSz |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpWinScale", wireType)
			}
			m.TcpWinScale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpWinScale |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpMss", wireType)
			}
			m.TcpMss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpMss |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSackPermOptionSent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpSackPermOptionSent = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflowSynAckDelta", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.IflowSynAckDelta = v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpWsOptionSent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpWsOptionSent = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpTsOptionSent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpTsOptionSent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressMirrorSessionEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IngressMirrorSessionEnable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressMirrorSessionEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EgressMirrorSessionEnable = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressMirrorSession", wireType)
			}
			m.IngressMirrorSession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IngressMirrorSession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressMirrorSession", wireType)
			}
			m.EgressMirrorSession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EgressMirrorSession |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowExportEnableBitmap", wireType)
			}
			m.FlowExportEnableBitmap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowExportEnableBitmap |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowExportId1", wireType)
			}
			m.FlowExportId1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowExportId1 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowExportId2", wireType)
			}
			m.FlowExportId2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowExportId2 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowExportId3", wireType)
			}
			m.FlowExportId3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowExportId3 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowExportId4", wireType)
			}
			m.FlowExportId4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowExportId4 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowInfo == nil {
				m.FlowInfo = &FlowInfo{}
			}
			if err := m.FlowInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnTrackInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnTrackInfo == nil {
				m.ConnTrackInfo = &ConnTrackInfo{}
			}
			if err := m.ConnTrackInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TelemetryInfo == nil {
				m.TelemetryInfo = &TelemetryInfo{}
			}
			if err := m.TelemetryInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowKey == nil {
				m.FlowKey = &FlowKey{}
			}
			if err := m.FlowKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowData == nil {
				m.FlowData = &FlowData{}
			}
			if err := m.FlowData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VrfKeyHandle == nil {
				m.VrfKeyHandle = &VrfKeyHandle{}
			}
			if err := m.VrfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnTrackEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConnTrackEn = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpTsOption", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpTsOption = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSackPermOption", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpSackPermOption = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitiatorFlow == nil {
				m.InitiatorFlow = &FlowSpec{}
			}
			if err := m.InitiatorFlow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponderFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponderFlow == nil {
				m.ResponderFlow = &FlowSpec{}
			}
			if err := m.ResponderFlow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInitiatorFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerInitiatorFlow == nil {
				m.PeerInitiatorFlow = &FlowSpec{}
			}
			if err := m.PeerInitiatorFlow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerResponderFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerResponderFlow == nil {
				m.PeerResponderFlow = &FlowSpec{}
			}
			if err := m.PeerResponderFlow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleting = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAgingEnqueued", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpAgingEnqueued = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SessionSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowHandle", wireType)
			}
			m.FlowHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnTrackInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnTrackInfo == nil {
				m.ConnTrackInfo = &ConnTrackInfo{}
			}
			if err := m.ConnTrackInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelemetryInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TelemetryInfo == nil {
				m.TelemetryInfo = &TelemetryInfo{}
			}
			if err := m.TelemetryInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowColl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowColl = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowHash", wireType)
			}
			m.FlowHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowHash |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowDirection", wireType)
			}
			m.FlowDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowDirection |= (FlowDirection(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowInstance", wireType)
			}
			m.FlowInstance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowInstance |= (FlowInstance(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ALGStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ALGStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ALGStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcIp == nil {
				m.SrcIp = &IPAddress{}
			}
			if err := m.SrcIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstIp == nil {
				m.DstIp = &IPAddress{}
			}
			if err := m.DstIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			m.Proto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proto |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sport", wireType)
			}
			m.Sport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dport", wireType)
			}
			m.Dport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iscontrol", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Iscontrol = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EXPECTEDFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EXPECTEDFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EXPECTEDFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowKey == nil {
				m.FlowKey = &FlowGateKey{}
			}
			if err := m.FlowKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleTimeout", wireType)
			}
			m.IdleTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EXPECTEDFlows) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EXPECTEDFlows: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EXPECTEDFlows: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flow = append(m.Flow, &EXPECTEDFlow{})
			if err := m.Flow[len(m.Flow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACTIVESessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACTIVESessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACTIVESessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveSession = append(m.ActiveSession, &FlowGateKey{})
			if err := m.ActiveSession[len(m.ActiveSession)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPSegment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPSegment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPSegment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPBuffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPBuffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPBuffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSeq", wireType)
			}
			m.CurrentSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSeq |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBuffSeq", wireType)
			}
			m.EndBuffSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBuffSeq |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffSize", wireType)
			}
			m.BuffSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSegments", wireType)
			}
			m.NumSegments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSegments |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, &TCPSegment{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSlab", wireType)
			}
			m.CurrentSlab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSlab |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TFTPALGInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TFTPALGInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TFTPALGInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iscontrol", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Iscontrol = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParseError", wireType)
			}
			m.ParseError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParseError |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnknownOpcode", wireType)
			}
			m.UnknownOpcode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnknownOpcode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tftpop", wireType)
			}
			m.Tftpop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tftpop |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SUNRPCInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SUNRPCInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SUNRPCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			m.Xid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgNum", wireType)
			}
			m.ProgNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpcvers", wireType)
			}
			m.Rpcvers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rpcvers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSRPCInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSRPCInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSRPCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRep", wireType)
			}
			m.DataRep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRep |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActId = append(m.ActId[:0], dAtA[iNdEx:postIndex]...)
			if m.ActId == nil {
				m.ActId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = append(m.Uuid[:0], dAtA[iNdEx:postIndex]...)
			if m.Uuid == nil {
				m.Uuid = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msrpc_64Bit", wireType)
			}
			m.Msrpc_64Bit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msrpc_64Bit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsrpcCtxtId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsrpcCtxtId = append(m.MsrpcCtxtId[:0], dAtA[iNdEx:postIndex]...)
			if m.MsrpcCtxtId == nil {
				m.MsrpcCtxtId = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMsrpcCtxt", wireType)
			}
			m.NumMsrpcCtxt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumMsrpcCtxt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCALGInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCALGInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCALGInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iscontrol", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Iscontrol = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParseError", wireType)
			}
			m.ParseError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParseError |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDataSess", wireType)
			}
			m.NumDataSess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDataSess |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumExpFlows", wireType)
			}
			m.NumExpFlows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumExpFlows |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxpktSizeExceeded", wireType)
			}
			m.MaxpktSizeExceeded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxpktSizeExceeded |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pkt = append(m.Pkt[:0], dAtA[iNdEx:postIndex]...)
			if m.Pkt == nil {
				m.Pkt = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadOffset", wireType)
			}
			m.PayloadOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayloadOffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcFragCont", wireType)
			}
			m.RpcFragCont = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpcFragCont |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ip == nil {
				m.Ip = &IPAddress{}
			}
			if err := m.Ip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prot", wireType)
			}
			m.Prot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dport", wireType)
			}
			m.Dport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vers", wireType)
			}
			m.Vers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktType", wireType)
			}
			m.PktType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PktType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SunRpcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SUNRPCInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgInfo = &RPCALGInfo_SunRpcInfo{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsRpcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MSRPCInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgInfo = &RPCALGInfo_MsRpcInfo{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflowTcpBuf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IflowTcpBuf == nil {
				m.IflowTcpBuf = &TCPBuffer{}
			}
			if err := m.IflowTcpBuf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RflowTcpBuf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RflowTcpBuf == nil {
				m.RflowTcpBuf = &TCPBuffer{}
			}
			if err := m.RflowTcpBuf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedFlows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpectedFlows == nil {
				m.ExpectedFlows = &EXPECTEDFlows{}
			}
			if err := m.ExpectedFlows.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedSessions == nil {
				m.CreatedSessions = &ACTIVESessions{}
			}
			if err := m.CreatedSessions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SIPALGInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SIPALGInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SIPALGInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParseError", wireType)
			}
			m.ParseError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParseError |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FTPALGInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FTPALGInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FTPALGInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iscontrol", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Iscontrol = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParseError", wireType)
			}
			m.ParseError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParseError |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDataSess", wireType)
			}
			m.NumDataSess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDataSess |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumExpFlows", wireType)
			}
			m.NumExpFlows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumExpFlows |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflowTcpBuf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IflowTcpBuf == nil {
				m.IflowTcpBuf = &TCPBuffer{}
			}
			if err := m.IflowTcpBuf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RflowTcpBuf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RflowTcpBuf == nil {
				m.RflowTcpBuf = &TCPBuffer{}
			}
			if err := m.RflowTcpBuf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedCmdType", wireType)
			}
			m.ExpectedCmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedCmdType |= (FTPCmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedFlows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpectedFlows == nil {
				m.ExpectedFlows = &EXPECTEDFlows{}
			}
			if err := m.ExpectedFlows.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedSessions == nil {
				m.CreatedSessions = &ACTIVESessions{}
			}
			if err := m.CreatedSessions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RTSPCtrlSessInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RTSPCtrlSessInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RTSPCtrlSessInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfId = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerIp == nil {
				m.ServerIp = &IPAddress{}
			}
			if err := m.ServerIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = append(m.SessionId[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionId == nil {
				m.SessionId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedFlows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpectedFlows == nil {
				m.ExpectedFlows = &EXPECTEDFlows{}
			}
			if err := m.ExpectedFlows.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedSessions == nil {
				m.CreatedSessions = &ACTIVESessions{}
			}
			if err := m.CreatedSessions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RTSPCtrlSessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RTSPCtrlSessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RTSPCtrlSessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = append(m.Session, &RTSPCtrlSessInfo{})
			if err := m.Session[len(m.Session)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RTSPALGInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RTSPALGInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RTSPALGInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iscontrol", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Iscontrol = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessionid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessionid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParseErrors", wireType)
			}
			m.ParseErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParseErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDataSess", wireType)
			}
			m.NumDataSess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDataSess |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumExpFlows", wireType)
			}
			m.NumExpFlows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumExpFlows |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRtspSessions", wireType)
			}
			m.NumRtspSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRtspSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflowTcpBuf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IflowTcpBuf == nil {
				m.IflowTcpBuf = &TCPBuffer{}
			}
			if err := m.IflowTcpBuf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RflowTcpBuf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RflowTcpBuf == nil {
				m.RflowTcpBuf = &TCPBuffer{}
			}
			if err := m.RflowTcpBuf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtrlSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CtrlSessions == nil {
				m.CtrlSessions = &RTSPCtrlSessions{}
			}
			if err := m.CtrlSessions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSALGInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSALGInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSALGInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParseErrors", wireType)
			}
			m.ParseErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParseErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsId", wireType)
			}
			m.DnsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DnsId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeRemaining", wireType)
			}
			m.TimeRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeRemaining |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			m.SessionHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflowStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IflowStatus == nil {
				m.IflowStatus = &FlowStatus{}
			}
			if err := m.IflowStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RflowStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RflowStatus == nil {
				m.RflowStatus = &FlowStatus{}
			}
			if err := m.RflowStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIflowStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerIflowStatus == nil {
				m.PeerIflowStatus = &FlowStatus{}
			}
			if err := m.PeerIflowStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerRflowStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerRflowStatus == nil {
				m.PeerRflowStatus = &FlowStatus{}
			}
			if err := m.PeerRflowStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppIdState", wireType)
			}
			m.AppIdState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppIdState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alg", wireType)
			}
			m.Alg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Alg |= (ALGName(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TftpInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TFTPALGInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgInfo = &SessionStatus_TftpInfo{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RPCALGInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgInfo = &SessionStatus_RpcInfo{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SIPALGInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgInfo = &SessionStatus_SipInfo{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RtspInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RTSPALGInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgInfo = &SessionStatus_RtspInfo{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DNSALGInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgInfo = &SessionStatus_DnsInfo{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtpInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FTPALGInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlgInfo = &SessionStatus_FtpInfo{v}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionSyncing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SessionSyncing = bool(v != 0)
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookupVrf", wireType)
			}
			m.LookupVrf = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.LookupVrf = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smac", wireType)
			}
			m.Smac = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Smac = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmac", wireType)
			}
			m.Dmac = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Dmac = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegId", wireType)
			}
			m.L2SegId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2SegId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SessionStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SessionResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GetBy = &SessionDeleteRequest_SessionHandle{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GetBy = &SessionDeleteRequest_SessionFilter{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SessionDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			m.SessionHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SessionDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcIp == nil {
				m.SrcIp = &IPAddress{}
			}
			if err := m.SrcIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstIp == nil {
				m.DstIp = &IPAddress{}
			}
			if err := m.DstIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			m.SrcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			m.DstPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProto", wireType)
			}
			m.IpProto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpProto |= (IPProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfId = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentId", wireType)
			}
			m.L2SegmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2SegmentId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alg", wireType)
			}
			m.Alg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Alg |= (ALGName(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.GetBy = &SessionGetRequest_SessionHandle{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.GetBy = &SessionGetRequest_SessionFilter{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SessionGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPermittedPackets", wireType)
			}
			m.FlowPermittedPackets = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowPermittedPackets = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPermittedBytes", wireType)
			}
			m.FlowPermittedBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowPermittedBytes = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowDroppedPackets", wireType)
			}
			m.FlowDroppedPackets = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowDroppedPackets = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowDroppedBytes", wireType)
			}
			m.FlowDroppedBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowDroppedBytes = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTcpTicklesSent", wireType)
			}
			m.NumTcpTicklesSent = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumTcpTicklesSent = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTcpRstSent", wireType)
			}
			m.NumTcpRstSent = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumTcpRstSent = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorFlowStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitiatorFlowStats == nil {
				m.InitiatorFlowStats = &FlowStats{}
			}
			if err := m.InitiatorFlowStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponderFlowStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponderFlowStats == nil {
				m.ResponderFlowStats = &FlowStats{}
			}
			if err := m.ResponderFlowStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerInitiatorFlowStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerInitiatorFlowStats == nil {
				m.PeerInitiatorFlowStats = &FlowStats{}
			}
			if err := m.PeerInitiatorFlowStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerResponderFlowStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerResponderFlowStats == nil {
				m.PeerResponderFlowStats = &FlowStats{}
			}
			if err := m.PeerResponderFlowStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SessionSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SessionStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SessionStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SessionGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSession
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSession
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSession(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSession = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSession   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("session.proto", fileDescriptorSession) }

var fileDescriptorSession = []byte{
	// 4449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcd, 0x6f, 0x23, 0x47,
	0x76, 0x17, 0x25, 0xf1, 0xeb, 0x49, 0xa4, 0xa8, 0x92, 0x34, 0x23, 0xcd, 0xb7, 0x1b, 0xde, 0xd8,
	0x9e, 0xf1, 0xc8, 0xb6, 0x46, 0x3b, 0xb3, 0x76, 0xe2, 0x1d, 0x50, 0x24, 0x35, 0xe2, 0x5a, 0x1f,
	0x4c, 0x93, 0x9e, 0x89, 0x7d, 0x48, 0xa7, 0xa7, 0xbb, 0x48, 0x35, 0xd8, 0xec, 0xee, 0xe9, 0x2a,
	0x6a, 0x46, 0x13, 0xe4, 0x90, 0x4b, 0x2e, 0x7b, 0x09, 0x90, 0x43, 0x80, 0xe4, 0xb6, 0xf7, 0x1c,
	0x72, 0x4b, 0x10, 0xe4, 0x9c, 0x1c, 0xf6, 0x90, 0x4b, 0x80, 0x3d, 0x79, 0x03, 0xff, 0x03, 0x01,
	0x7c, 0x5e, 0x2c, 0x82, 0x57, 0x55, 0xdd, 0xec, 0x6e, 0x52, 0xf2, 0xd8, 0xeb, 0x20, 0xc1, 0x9e,
	0xd8, 0xf5, 0xde, 0xef, 0xbd, 0xaa, 0x7a, 0xf5, 0xde, 0xab, 0x57, 0x55, 0x84, 0x0a, 0xa3, 0x8c,
	0x39, 0xbe, 0xb7, 0x1d, 0x84, 0x3e, 0xf7, 0x49, 0x51, 0x35, 0xaf, 0x2d, 0xf1, 0xf3, 0x80, 0x32,
	0x49, 0xbd, 0xb6, 0xe4, 0xbd, 0x64, 0xd4, 0x52, 0x8d, 0xd2, 0xf0, 0x54, 0x7e, 0x69, 0x67, 0x50,
	0xde, 0x77, 0xfd, 0x97, 0x9f, 0xd1, 0xf3, 0xc3, 0x1d, 0x42, 0x60, 0x91, 0x8d, 0x4c, 0x6b, 0x33,
	0x77, 0x27, 0xf7, 0x6e, 0x41, 0x17, 0xdf, 0x48, 0xb3, 0x91, 0x36, 0x2f, 0x69, 0xf8, 0x4d, 0x34,
	0xa8, 0xb8, 0x3b, 0x06, 0xa3, 0x83, 0x11, 0xf5, 0xb8, 0xe1, 0xd8, 0x9b, 0x0b, 0x77, 0x72, 0xef,
	0x56, 0xf4, 0x25, 0x77, 0xa7, 0x2b, 0x69, 0x6d, 0x9b, 0xdc, 0x04, 0xa0, 0xfc, 0x94, 0x86, 0x06,
	0x0e, 0x62, 0x73, 0x51, 0x00, 0xca, 0x82, 0xd2, 0x3b, 0x0f, 0xa8, 0xf6, 0x18, 0x56, 0x55, 0xbf,
	0x3d, 0x2b, 0xf8, 0xdc, 0x0e, 0xda, 0x5e, 0xdf, 0x27, 0xeb, 0x90, 0x67, 0x81, 0x1f, 0x72, 0x31,
	0x80, 0x8a, 0x2e, 0x1b, 0x48, 0xb5, 0x05, 0x75, 0x5e, 0x52, 0x45, 0x43, 0x6b, 0xc3, 0x8a, 0x52,
	0xd0, 0x6e, 0x1c, 0x75, 0x84, 0x38, 0x81, 0x45, 0xd1, 0x99, 0x94, 0x16, 0xdf, 0x48, 0xb3, 0x7c,
	0x9b, 0x2a, 0x59, 0xf1, 0x4d, 0xaa, 0x30, 0x1f, 0x8f, 0x79, 0xde, 0xb1, 0x35, 0x0d, 0xaa, 0x4a,
	0x55, 0xab, 0x2b, 0x35, 0xd5, 0x60, 0x81, 0x05, 0x8e, 0x52, 0x84, 0x9f, 0xda, 0x6f, 0x73, 0xb1,
	0xa1, 0x9e, 0xee, 0x0a, 0xbe, 0x13, 0x08, 0x7e, 0x51, 0xc7, 0x4f, 0xa4, 0xd8, 0x4e, 0x20, 0xba,
	0x29, 0xea, 0xf8, 0x49, 0xde, 0x87, 0x92, 0x13, 0x18, 0xc2, 0xca, 0xa2, 0xaf, 0xea, 0xce, 0xea,
	0xb6, 0x5c, 0x90, 0x76, 0xa7, 0x83, 0x54, 0xcb, 0x77, 0xf5, 0xa2, 0x13, 0x88, 0x6f, 0xf2, 0x63,
	0x28, 0x72, 0x2b, 0x30, 0xc6, 0x76, 0x20, 0x6c, 0xb5, 0xb4, 0x73, 0x6d, 0x3b, 0x5a, 0xd5, 0x29,
	0x3b, 0x1d, 0xcc, 0xe9, 0x05, 0x2e, 0x5a, 0x64, 0x1b, 0x16, 0x1d, 0x6b, 0x14, 0x6c, 0xe6, 0x85,
	0xcc, 0x66, 0x56, 0x26, 0x32, 0xcd, 0xc1, 0x9c, 0x2e, 0x70, 0xe4, 0x1e, 0x2c, 0x50, 0x16, 0x6c,
	0x16, 0x04, 0xfc, 0x6a, 0x16, 0xae, 0xa6, 0x7f, 0x30, 0xa7, 0x23, 0x6a, 0x6f, 0x09, 0xca, 0xee,
	0xae, 0xd1, 0x77, 0xa8, 0x6b, 0x33, 0xed, 0x17, 0xf3, 0x13, 0x03, 0x3c, 0x24, 0xda, 0xc4, 0x00,
	0x4b, 0x3b, 0xb5, 0x78, 0x5e, 0x75, 0xdb, 0x0e, 0x29, 0x63, 0xd2, 0x24, 0xda, 0xc4, 0x24, 0x33,
	0x31, 0xbf, 0x87, 0x46, 0xfa, 0x55, 0x0e, 0x8a, 0x0a, 0x46, 0x6e, 0x00, 0xb0, 0xd0, 0x32, 0xce,
	0xc2, 0x3e, 0x46, 0x88, 0x0c, 0xa9, 0x12, 0x0b, 0xad, 0xa7, 0x61, 0xbf, 0x6d, 0x23, 0xd7, 0x66,
	0x3c, 0xe2, 0xca, 0xe0, 0x2a, 0xd9, 0x8c, 0x4b, 0xee, 0x3d, 0x28, 0xb8, 0x3b, 0xc6, 0x90, 0x9e,
	0x0b, 0xa3, 0x2c, 0xed, 0x90, 0xec, 0x20, 0x0e, 0x77, 0x0e, 0xe6, 0xf4, 0xbc, 0xbb, 0x83, 0x1d,
	0xdd, 0x83, 0xc2, 0xd9, 0xae, 0x00, 0x2f, 0xce, 0x06, 0x3f, 0xdd, 0x45, 0xf0, 0xd9, 0x6e, 0x04,
	0x7e, 0x28, 0xc0, 0xf9, 0x0b, 0xc0, 0x0f, 0x05, 0xf8, 0xe1, 0x67, 0xf4, 0x7c, 0x0f, 0xa0, 0xd4,
	0x77, 0xfd, 0x97, 0x08, 0xd7, 0x7e, 0x5d, 0x80, 0x12, 0x42, 0x44, 0x7c, 0xec, 0xc2, 0x92, 0x60,
	0x98, 0x16, 0x77, 0x7c, 0x4f, 0x4c, 0xae, 0xba, 0xb3, 0x96, 0x52, 0x55, 0x17, 0x2c, 0x1d, 0xfa,
	0xf1, 0x37, 0xd9, 0x52, 0xea, 0xcc, 0x41, 0x14, 0x8f, 0x45, 0xc1, 0x1d, 0x50, 0x72, 0x0b, 0x96,
	0xb8, 0x33, 0xa2, 0x06, 0xf7, 0x05, 0x57, 0xc6, 0x66, 0x19, 0x49, 0x3d, 0x1f, 0xf9, 0x1f, 0xc1,
	0x86, 0x6b, 0x32, 0x6e, 0x04, 0xa6, 0x35, 0xa4, 0xdc, 0x60, 0x94, 0x7a, 0x06, 0x72, 0xc5, 0x94,
	0x17, 0x75, 0x82, 0xcc, 0x8e, 0xe0, 0x75, 0x29, 0xf5, 0x7a, 0xce, 0x88, 0x92, 0x7b, 0x50, 0xf2,
	0x4c, 0x2e, 0xd3, 0x4f, 0x5e, 0x0c, 0xb0, 0x16, 0x0f, 0xf0, 0xd8, 0xe4, 0x98, 0x85, 0xf4, 0xa2,
	0x27, 0x3f, 0xc8, 0x7b, 0x80, 0x9f, 0x06, 0xfa, 0x74, 0xe1, 0x02, 0x7f, 0x2d, 0x78, 0x26, 0xef,
	0x3a, 0x01, 0xb9, 0x0e, 0x65, 0x01, 0x15, 0x29, 0xa9, 0x28, 0x06, 0x8a, 0x1d, 0x75, 0x45, 0xae,
	0x52, 0x7a, 0xd0, 0xef, 0x4b, 0x97, 0xe8, 0x69, 0x4e, 0xf4, 0xc8, 0xd4, 0x56, 0x8e, 0xf5, 0x34,
	0x85, 0x9e, 0x2d, 0x39, 0x78, 0x91, 0x79, 0x41, 0x38, 0x07, 0xea, 0x6d, 0x62, 0xf2, 0xdd, 0x81,
	0x32, 0x06, 0x01, 0xe3, 0x26, 0xa7, 0x9b, 0x4b, 0x62, 0x62, 0x1b, 0x29, 0xcb, 0xf7, 0x1a, 0x9d,
	0x2e, 0x32, 0xf5, 0x12, 0xb7, 0x02, 0xf1, 0x45, 0x3e, 0x86, 0xca, 0xa9, 0xe9, 0x1a, 0x13, 0xb9,
	0xe5, 0xcb, 0xe4, 0x96, 0x4e, 0x4d, 0xb7, 0x17, 0x89, 0xfe, 0x18, 0xae, 0x32, 0x7f, 0x1c, 0x5a,
	0xd4, 0x70, 0x9d, 0xbe, 0x61, 0x9d, 0x52, 0x6b, 0x68, 0x50, 0xcf, 0x7c, 0xee, 0xd2, 0xcd, 0xca,
	0x9d, 0xdc, 0xbb, 0x25, 0x7d, 0x5d, 0xb2, 0x0f, 0x9d, 0x7e, 0x03, 0x99, 0x2d, 0xc1, 0x23, 0xdb,
	0xb0, 0x46, 0x5f, 0x05, 0xd4, 0xe2, 0xd4, 0x36, 0x26, 0xf2, 0x9b, 0x55, 0x31, 0xcf, 0xd5, 0x88,
	0xd5, 0x8d, 0x44, 0x89, 0x07, 0x6b, 0x8e, 0x37, 0x30, 0x46, 0x4e, 0x18, 0xfa, 0xa1, 0xa1, 0x86,
	0xc5, 0x36, 0x57, 0xee, 0x2c, 0x88, 0x30, 0x1f, 0x9e, 0x6e, 0x1f, 0x09, 0x56, 0x57, 0x72, 0x3e,
	0xa3, 0xe7, 0x07, 0xa6, 0x67, 0xbb, 0x74, 0x4f, 0xfb, 0xe6, 0xab, 0xdb, 0xb7, 0xce, 0xa8, 0xe7,
	0x58, 0xf4, 0x13, 0xcb, 0xf7, 0x18, 0x0f, 0x4d, 0xc7, 0xe3, 0xec, 0xd3, 0x3f, 0x0f, 0x4d, 0x6f,
	0x40, 0x3f, 0xf9, 0xf0, 0xfe, 0xa3, 0xbf, 0xd0, 0x57, 0x1d, 0x6f, 0x90, 0x12, 0x67, 0xd8, 0x1f,
	0x1d, 0x84, 0x53, 0xfd, 0xd5, 0x7e, 0x98, 0xfe, 0xe8, 0x20, 0xcc, 0xf4, 0xf7, 0x16, 0x2c, 0x3b,
	0xb6, 0x4b, 0x85, 0xd3, 0xfa, 0x63, 0xbe, 0xb9, 0x2a, 0x77, 0x4c, 0xa4, 0xf5, 0x24, 0x49, 0xfb,
	0xef, 0x3c, 0xac, 0x35, 0x7c, 0xcf, 0xeb, 0x85, 0xa6, 0x35, 0x6c, 0xbd, 0xb2, 0x68, 0xc0, 0x85,
	0xe8, 0xfb, 0x40, 0xc4, 0xc2, 0x9d, 0x7b, 0x46, 0x48, 0x79, 0x68, 0x7a, 0x6c, 0xe4, 0xc8, 0x2d,
	0xb2, 0xa4, 0xd7, 0x70, 0x89, 0xcf, 0x3d, 0x3d, 0xa6, 0x93, 0xf7, 0x60, 0x15, 0xd1, 0x2f, 0x1d,
	0xcf, 0x78, 0x4d, 0x43, 0xdf, 0xb0, 0x43, 0x5f, 0xe6, 0xe0, 0x92, 0x5e, 0xe5, 0x56, 0xf0, 0xcc,
	0xf1, 0xbe, 0xa4, 0xa1, 0xdf, 0x0c, 0x7d, 0xcc, 0x8b, 0x6b, 0x08, 0xed, 0x8f, 0x5d, 0x37, 0xa9,
	0x79, 0x41, 0x80, 0x51, 0xcb, 0xfe, 0xd8, 0x75, 0x13, 0xaa, 0x15, 0x3e, 0x30, 0x43, 0xee, 0x98,
	0xae, 0xe1, 0x9f, 0xd1, 0xd0, 0x35, 0x65, 0x2a, 0x96, 0xf8, 0x8e, 0xe4, 0x9c, 0x48, 0x46, 0x34,
	0x70, 0x15, 0xb3, 0x21, 0xf5, 0x43, 0x9b, 0x86, 0x22, 0x16, 0xe5, 0xc0, 0x65, 0xc0, 0xea, 0x92,
	0x1e, 0x0d, 0xdc, 0x1f, 0x73, 0xc3, 0xef, 0xe3, 0xf8, 0x6d, 0xff, 0xa5, 0x08, 0x46, 0x39, 0xf0,
	0x93, 0x31, 0x3f, 0xe9, 0x3f, 0x13, 0x54, 0x72, 0x5f, 0x0e, 0xc4, 0xf1, 0xce, 0x4c, 0xd7, 0xb1,
	0x0d, 0xd3, 0x1a, 0x1a, 0xde, 0x78, 0x24, 0x82, 0x51, 0x6a, 0x6e, 0x4b, 0x4e, 0xdd, 0x1a, 0x1e,
	0x8f, 0x47, 0x64, 0x17, 0xae, 0x20, 0xdc, 0xf3, 0xc3, 0x91, 0xe9, 0x3a, 0xaf, 0x4d, 0x34, 0xab,
	0xb4, 0x4b, 0x49, 0x7a, 0x30, 0xb7, 0x82, 0xe3, 0x24, 0x53, 0x58, 0xe7, 0x31, 0xdc, 0x10, 0x66,
	0x0f, 0x5c, 0x87, 0x1b, 0xa7, 0xa6, 0x67, 0xb3, 0x53, 0x73, 0x48, 0x0d, 0x9b, 0x72, 0xe1, 0xba,
	0x22, 0x64, 0x4b, 0xfa, 0x16, 0x2e, 0x00, 0x42, 0x0e, 0x22, 0x44, 0x53, 0x01, 0xc8, 0x3d, 0x39,
	0x7d, 0xdb, 0xe4, 0xa6, 0x61, 0xf6, 0x39, 0x0d, 0x8d, 0xbe, 0xe3, 0x89, 0x68, 0x2e, 0xe9, 0x2b,
	0xdc, 0x0a, 0x9a, 0x26, 0x37, 0xeb, 0x48, 0xdf, 0x77, 0x3c, 0xf2, 0x08, 0xb6, 0xe4, 0x18, 0x3d,
	0x23, 0xc4, 0x3c, 0x37, 0xe4, 0x4a, 0x26, 0x64, 0x5c, 0x44, 0x79, 0x34, 0x4c, 0x4f, 0x67, 0xbc,
	0x33, 0xe4, 0x42, 0x50, 0x67, 0x9c, 0x1c, 0xc1, 0xdb, 0x49, 0x5b, 0xf4, 0x9d, 0x48, 0xbc, 0x1f,
	0xfa, 0x23, 0x23, 0xa4, 0x2c, 0xf0, 0x3d, 0x34, 0xfb, 0xb2, 0xd0, 0x71, 0x7b, 0x62, 0x9c, 0x7d,
	0x44, 0x76, 0x86, 0x7c, 0x3f, 0xf4, 0x47, 0x7a, 0x04, 0x8b, 0xd6, 0x6c, 0xec, 0xc5, 0xd1, 0x1b,
	0x0c, 0xb9, 0x8a, 0x74, 0xb4, 0xec, 0xe7, 0x31, 0xa3, 0x33, 0xe4, 0xe4, 0x53, 0x69, 0x23, 0xec,
	0xf2, 0xa5, 0xc3, 0x4f, 0xa7, 0x56, 0xa4, 0x2a, 0xe4, 0xae, 0x72, 0x2b, 0xd0, 0x19, 0x7f, 0xe6,
	0xf0, 0xd3, 0xd4, 0xc2, 0x68, 0x7f, 0xb3, 0x08, 0x95, 0xd8, 0xe3, 0xc5, 0xc6, 0xf2, 0x36, 0x54,
	0xc5, 0x16, 0x61, 0x85, 0xd4, 0xe4, 0xd4, 0xe0, 0x4c, 0x6d, 0x9c, 0xcb, 0x48, 0x6d, 0x08, 0x62,
	0x8f, 0x61, 0x6d, 0x29, 0x50, 0xcf, 0xcf, 0x39, 0x65, 0x6a, 0xf3, 0x2c, 0x23, 0x65, 0x0f, 0x09,
	0x18, 0x6b, 0x82, 0x2d, 0x1d, 0x8f, 0x09, 0x87, 0x2e, 0xea, 0x62, 0xc7, 0x92, 0x2e, 0xc7, 0xc8,
	0x1f, 0x01, 0xd0, 0x38, 0xc2, 0xd4, 0xbe, 0x79, 0x23, 0xce, 0x86, 0x33, 0xa2, 0x50, 0x4f, 0xe0,
	0xc5, 0x6e, 0x85, 0xae, 0x41, 0x5f, 0x88, 0x59, 0xe6, 0x85, 0x7e, 0xcc, 0xca, 0x5d, 0xfa, 0x02,
	0x1d, 0x4e, 0xf1, 0x23, 0x2b, 0x14, 0x62, 0xbe, 0x72, 0xc8, 0x1b, 0x00, 0x51, 0x8c, 0xb2, 0xd7,
	0xd1, 0x1e, 0x22, 0x83, 0xb3, 0xfb, 0x1a, 0xab, 0xeb, 0x98, 0x6b, 0x99, 0x2e, 0x15, 0x5e, 0x5a,
	0xd1, 0x97, 0x14, 0x00, 0x49, 0xe4, 0xaa, 0xac, 0x84, 0x46, 0x8c, 0xa9, 0xad, 0x03, 0x6b, 0x9d,
	0x23, 0xc6, 0xc8, 0x4f, 0xa4, 0x1f, 0x31, 0xec, 0x3b, 0xa0, 0xe1, 0xc8, 0xf0, 0xc5, 0x98, 0x0d,
	0x46, 0x3d, 0xae, 0x7c, 0x6f, 0x03, 0x07, 0x6a, 0x5a, 0xc3, 0x0e, 0x0d, 0x47, 0x27, 0x82, 0xdb,
	0xa5, 0x1e, 0xc7, 0xa0, 0x72, 0x84, 0xd9, 0x30, 0xd1, 0xa0, 0xb8, 0x4d, 0x5d, 0x6e, 0x0a, 0xdf,
	0x5b, 0xd5, 0x6b, 0x82, 0xd5, 0x3d, 0xf7, 0xea, 0xd6, 0xb0, 0x89, 0xf4, 0xc8, 0xbb, 0x5f, 0xb2,
	0x54, 0x0f, 0xcb, 0xb1, 0x77, 0x3f, 0x63, 0x09, 0xdd, 0x0a, 0xcc, 0xd3, 0xe0, 0x4a, 0x0c, 0xee,
	0x25, 0xc0, 0xda, 0xaf, 0x16, 0xa0, 0xd2, 0xa3, 0x2e, 0x1d, 0x51, 0x1e, 0x9e, 0x0b, 0xaf, 0xa8,
	0xc3, 0x4d, 0xc7, 0x1b, 0xe0, 0xee, 0x99, 0x49, 0xd8, 0xd1, 0x4e, 0x24, 0x93, 0xe1, 0x35, 0x05,
	0x4a, 0xa5, 0x5e, 0xb5, 0x1f, 0x3d, 0x86, 0x1b, 0xf4, 0x32, 0x0d, 0x32, 0x43, 0x6e, 0xd1, 0x0b,
	0x15, 0xec, 0xc2, 0x95, 0xd9, 0x63, 0x50, 0xc5, 0xca, 0xfa, 0xac, 0xce, 0xc9, 0x0e, 0x6c, 0xcc,
	0xec, 0x56, 0x1d, 0x88, 0xd6, 0x66, 0xf4, 0x47, 0x3e, 0x86, 0x2d, 0xb1, 0x0e, 0xf4, 0x15, 0x96,
	0x02, 0x6a, 0x80, 0xc6, 0x73, 0x87, 0x8f, 0x4c, 0x59, 0xc3, 0x56, 0xf4, 0x2b, 0x08, 0x68, 0x09,
	0xbe, 0x1c, 0xde, 0x9e, 0xe0, 0x92, 0x3f, 0x80, 0x95, 0xa4, 0xa8, 0x63, 0x7f, 0x24, 0x9c, 0xaf,
	0xa2, 0x57, 0x26, 0x02, 0x6d, 0xfb, 0xa3, 0x69, 0xdc, 0x8e, 0xf2, 0xc2, 0x14, 0x6e, 0x67, 0x1a,
	0xf7, 0x40, 0x39, 0x63, 0x0a, 0xf7, 0x60, 0x1a, 0xb7, 0xab, 0xdc, 0x32, 0x85, 0xdb, 0xd5, 0xfe,
	0x39, 0x27, 0x8b, 0x48, 0x4c, 0x7d, 0x64, 0x1b, 0x44, 0xcc, 0x1a, 0x8e, 0xd7, 0xf7, 0xd5, 0x49,
	0x62, 0x35, 0x55, 0x90, 0xe0, 0xda, 0xeb, 0xa2, 0x64, 0x14, 0x5e, 0xf0, 0x53, 0x58, 0xb1, 0x7c,
	0xcf, 0x33, 0x38, 0x46, 0xa6, 0x94, 0x92, 0x67, 0x8b, 0x2b, 0xd3, 0x81, 0x2b, 0x44, 0x2b, 0x56,
	0x2a, 0xb7, 0x7c, 0x0a, 0x55, 0x1e, 0xb9, 0x95, 0x14, 0x5f, 0xc8, 0x88, 0xa7, 0xbc, 0x4e, 0xaf,
	0xf0, 0x64, 0x53, 0x1b, 0xc8, 0xa1, 0x77, 0x03, 0x6a, 0x61, 0x6d, 0x19, 0x15, 0xc6, 0xf1, 0x19,
	0x28, 0x53, 0x47, 0xcb, 0xda, 0x16, 0x4b, 0xee, 0x68, 0x9e, 0xb8, 0x11, 0xa8, 0x11, 0xa7, 0xe7,
	0x89, 0xd6, 0x90, 0xf3, 0xc4, 0x2f, 0xed, 0x1f, 0x17, 0x61, 0x49, 0xf9, 0x82, 0xe8, 0xec, 0x21,
	0x54, 0xf1, 0x98, 0x30, 0xa4, 0xe7, 0x62, 0x1b, 0x52, 0xee, 0x8e, 0x5d, 0x0e, 0x4f, 0xb7, 0x9f,
	0x86, 0xfd, 0xb8, 0x36, 0xd1, 0x97, 0xcf, 0x12, 0x2d, 0x72, 0x1f, 0x20, 0x72, 0x72, 0x75, 0xc4,
	0x28, 0xee, 0x55, 0xbf, 0xf9, 0xea, 0x36, 0xa8, 0xea, 0x65, 0x48, 0xcf, 0xf5, 0xb2, 0x42, 0xb4,
	0x6d, 0x4c, 0x3b, 0x09, 0xf3, 0x52, 0x4f, 0xd5, 0x01, 0x4b, 0xb1, 0x11, 0x5b, 0x5e, 0x94, 0x9a,
	0xe2, 0x38, 0x56, 0x7b, 0xff, 0x52, 0x22, 0x84, 0xc9, 0x07, 0xb0, 0x3e, 0x2b, 0x03, 0xa9, 0x7d,
	0x7f, 0x75, 0x2a, 0xf9, 0x90, 0x9f, 0x40, 0xd5, 0xf1, 0x1c, 0xee, 0x98, 0xdc, 0x0f, 0x0d, 0xb4,
	0x82, 0x2a, 0xc1, 0xd3, 0x46, 0x42, 0x53, 0xe8, 0x95, 0x18, 0x88, 0x24, 0x94, 0x8c, 0x37, 0x38,
	0x29, 0x59, 0xbc, 0x50, 0x32, 0x06, 0x0a, 0xc9, 0x3a, 0xac, 0x05, 0x94, 0x86, 0x46, 0xa6, 0xe3,
	0xd2, 0x45, 0xe2, 0xab, 0x88, 0x6e, 0xa7, 0x3a, 0x8f, 0x54, 0x64, 0x46, 0x50, 0xbe, 0x54, 0x85,
	0x9e, 0x1a, 0xc5, 0x35, 0x28, 0xd9, 0xd4, 0xa5, 0xdc, 0xf1, 0x06, 0x2a, 0x37, 0xc7, 0xed, 0x68,
	0x23, 0x36, 0x07, 0x58, 0x16, 0x53, 0xef, 0xc5, 0x98, 0x8e, 0xa9, 0xad, 0x2a, 0x01, 0xdc, 0x88,
	0xeb, 0xc8, 0x68, 0x29, 0xba, 0xd6, 0x80, 0x55, 0xe5, 0x32, 0x3a, 0x7d, 0x31, 0xa6, 0x8c, 0x1f,
	0xb1, 0x01, 0xd9, 0x86, 0x62, 0x28, 0x5b, 0x9b, 0x39, 0x51, 0xd7, 0xae, 0xc7, 0xa3, 0x4a, 0xf8,
	0x97, 0x1e, 0x81, 0xb4, 0x5f, 0xcf, 0x03, 0x88, 0xe1, 0x72, 0x93, 0x8f, 0x19, 0xb9, 0xad, 0x0e,
	0x79, 0x09, 0xa7, 0x2b, 0xc8, 0xf3, 0x9c, 0x72, 0xb0, 0xff, 0xdb, 0x80, 0xc4, 0x03, 0x94, 0xac,
	0x15, 0x7c, 0xd7, 0x55, 0x8e, 0x28, 0x82, 0xa8, 0xe1, 0xbb, 0x6e, 0xcc, 0x3c, 0x35, 0xd9, 0xa9,
	0x4a, 0x9a, 0x25, 0x39, 0x74, 0x76, 0x4a, 0xfe, 0x50, 0x55, 0x19, 0xb6, 0x13, 0x52, 0x79, 0x82,
	0x2d, 0x88, 0xf3, 0xd0, 0xba, 0x3a, 0xac, 0x89, 0xa0, 0x8c, 0x78, 0x32, 0x87, 0xc5, 0x4d, 0xf2,
	0x09, 0x54, 0x54, 0xda, 0x62, 0xdc, 0xf4, 0x2c, 0x2a, 0x7c, 0x2e, 0x7b, 0x96, 0x6a, 0x2b, 0xa6,
	0x2c, 0x5c, 0xa2, 0x96, 0xf6, 0xaf, 0x39, 0x28, 0xd7, 0x0f, 0x9f, 0x28, 0x03, 0xbf, 0x03, 0x05,
	0x16, 0x5a, 0xc6, 0x25, 0xf7, 0x28, 0x79, 0x16, 0x5a, 0xed, 0x00, 0x81, 0x36, 0xe3, 0xc6, 0x25,
	0x97, 0x29, 0x79, 0x9b, 0xf1, 0x76, 0x40, 0xd6, 0x21, 0x3f, 0xb9, 0x4b, 0xa9, 0xe8, 0xb2, 0x31,
	0xb9, 0x56, 0x5b, 0x9c, 0x79, 0xad, 0x96, 0x4f, 0x5c, 0xab, 0x91, 0x1b, 0x50, 0x76, 0x98, 0xe5,
	0x7b, 0x3c, 0xf4, 0x5d, 0x55, 0x7d, 0x4f, 0x08, 0xda, 0x9f, 0xc1, 0x72, 0xeb, 0x4f, 0x3a, 0xad,
	0x46, 0xaf, 0xd5, 0x14, 0x0e, 0x7c, 0x7f, 0x2a, 0x0f, 0x92, 0x6d, 0x79, 0xcf, 0x88, 0xec, 0x27,
	0x26, 0xa7, 0xa9, 0x4c, 0x98, 0x3d, 0x04, 0xcd, 0x4f, 0x1f, 0x82, 0x3e, 0x81, 0x4a, 0xb2, 0x07,
	0x46, 0xde, 0x83, 0x45, 0x11, 0x57, 0xd2, 0x83, 0x27, 0x56, 0x4e, 0xa2, 0x74, 0x01, 0xd1, 0x3e,
	0x83, 0x6a, 0xbd, 0xd1, 0x6b, 0x3f, 0x6d, 0xc5, 0xa7, 0xae, 0x8f, 0xa1, 0x6a, 0x5a, 0xdc, 0x39,
	0xa3, 0xf1, 0xbe, 0x2b, 0xd5, 0xcc, 0x1a, 0x65, 0x45, 0x22, 0x95, 0xac, 0xb6, 0x0b, 0x80, 0x07,
	0x62, 0x79, 0x9f, 0x29, 0x4c, 0xc8, 0xcd, 0xc4, 0xcd, 0x24, 0x36, 0x48, 0x0d, 0x16, 0xa8, 0x67,
	0xab, 0x69, 0xe0, 0xa7, 0xf6, 0x9b, 0x1c, 0x94, 0x7b, 0x8d, 0xce, 0xde, 0xb8, 0xdf, 0xa7, 0x21,
	0x46, 0x90, 0x35, 0x0e, 0x43, 0xea, 0x71, 0xac, 0x15, 0x95, 0x2c, 0x28, 0x52, 0x97, 0xbe, 0x20,
	0x77, 0x60, 0x99, 0x7a, 0xb6, 0xf1, 0x7c, 0xdc, 0xef, 0x0b, 0x84, 0xd4, 0x04, 0xd4, 0xb3, 0x51,
	0x03, 0x22, 0xae, 0x43, 0x59, 0x72, 0x9d, 0xd7, 0xd1, 0xb5, 0x48, 0x09, 0x09, 0x5d, 0xe7, 0x35,
	0x45, 0x7b, 0x7a, 0xe3, 0x51, 0x74, 0x11, 0xcb, 0xd4, 0xfa, 0x2e, 0x79, 0xe3, 0x91, 0x1a, 0x37,
	0x23, 0x1f, 0x40, 0x29, 0x66, 0xe7, 0xc5, 0xdc, 0x27, 0xd7, 0x34, 0x93, 0xf9, 0xe9, 0x31, 0x08,
	0x75, 0xc6, 0x63, 0x76, 0xcd, 0xe7, 0xaa, 0x7e, 0x88, 0xe6, 0xd1, 0x75, 0xcd, 0xe7, 0x64, 0x13,
	0x8a, 0x81, 0x79, 0xee, 0xfa, 0xa6, 0x2d, 0x7c, 0x7f, 0x59, 0x8f, 0x9a, 0xda, 0xcf, 0x73, 0xb0,
	0xd4, 0xdb, 0xef, 0x75, 0xea, 0x87, 0x4f, 0x44, 0x88, 0xa6, 0xbc, 0x29, 0x97, 0xf1, 0x26, 0x34,
	0x4f, 0x60, 0x86, 0x8c, 0x1a, 0x14, 0xcb, 0x9f, 0x68, 0xf2, 0x82, 0xd4, 0x42, 0x0a, 0xf9, 0x11,
	0x54, 0xc7, 0xde, 0xd0, 0xf3, 0x5f, 0x7a, 0x86, 0x1f, 0x88, 0x6b, 0x5c, 0x69, 0x81, 0x8a, 0xa2,
	0x9e, 0x08, 0x22, 0xb9, 0x02, 0x05, 0xde, 0xe7, 0x81, 0x1f, 0x28, 0x03, 0xa8, 0x96, 0xd6, 0x05,
	0xe8, 0x7e, 0x7e, 0xac, 0x77, 0x1a, 0xd1, 0x9d, 0xee, 0x2b, 0x75, 0x11, 0x57, 0xd1, 0xf1, 0x93,
	0x6c, 0x41, 0x29, 0x08, 0xfd, 0x81, 0xa8, 0xd1, 0xd5, 0x7d, 0x14, 0xb6, 0xb1, 0x42, 0xdf, 0x84,
	0x62, 0x18, 0x58, 0x67, 0x34, 0x64, 0xaa, 0xcb, 0xa8, 0xa9, 0xfd, 0x67, 0x0e, 0xca, 0x47, 0xdd,
	0x48, 0xe9, 0x16, 0x94, 0xc4, 0xf9, 0x2e, 0xa4, 0x81, 0xd2, 0x5c, 0xc4, 0xb6, 0x4e, 0x03, 0x2c,
	0xd1, 0x2d, 0xd3, 0x75, 0xa3, 0xbd, 0xb7, 0xa2, 0x17, 0xb0, 0xd9, 0xb6, 0xc9, 0x06, 0x14, 0x4c,
	0x2b, 0xbe, 0x36, 0x5f, 0xd6, 0xf3, 0xa6, 0xc5, 0xdb, 0x36, 0x21, 0xb0, 0x38, 0x1e, 0x3b, 0xb6,
	0x98, 0xc3, 0xb2, 0x2e, 0xbe, 0xd1, 0x42, 0x23, 0x16, 0x06, 0x96, 0xf1, 0x70, 0xf7, 0xb9, 0x13,
	0x45, 0x2a, 0x08, 0x92, 0xa0, 0xe0, 0x86, 0x2c, 0x01, 0x16, 0x7f, 0x25, 0x54, 0x16, 0x84, 0xb4,
	0x94, 0x6a, 0xf0, 0x57, 0xa8, 0xf8, 0x6d, 0xa8, 0xa2, 0x97, 0x4c, 0x70, 0xaa, 0xd6, 0x43, 0xdf,
	0x39, 0x8a, 0x70, 0xda, 0xcf, 0x0b, 0x00, 0x7a, 0xa7, 0xf1, 0x03, 0xad, 0x9c, 0x06, 0x15, 0xec,
	0x53, 0xd8, 0x06, 0xdd, 0x2d, 0x7a, 0x21, 0xf0, 0xc6, 0x23, 0xac, 0x71, 0x30, 0xc8, 0x22, 0x0c,
	0x7d, 0x15, 0x88, 0x9d, 0x33, 0xe9, 0xbe, 0xad, 0x57, 0x81, 0x8c, 0xfe, 0x0f, 0x61, 0x7d, 0x64,
	0xbe, 0xc2, 0xe3, 0x2c, 0x06, 0x80, 0x81, 0x67, 0x30, 0x6a, 0x53, 0x5b, 0x59, 0x82, 0x48, 0x1e,
	0xc6, 0x42, 0x4b, 0x71, 0x70, 0x99, 0xf1, 0xc4, 0x2a, 0xed, 0x80, 0x9f, 0xe8, 0x45, 0xca, 0x3f,
	0x0d, 0xbf, 0xdf, 0x67, 0x34, 0x9a, 0x7f, 0x45, 0x51, 0x4f, 0x04, 0x11, 0x87, 0x83, 0x06, 0xea,
	0x87, 0xe6, 0xc0, 0xc0, 0x79, 0x46, 0xc7, 0xae, 0x30, 0xb0, 0xf6, 0x43, 0x73, 0xd0, 0xf0, 0x3d,
	0x4e, 0xee, 0xc0, 0xbc, 0x13, 0xa8, 0x2d, 0x7e, 0x3a, 0x09, 0xcf, 0x3b, 0x01, 0xae, 0x22, 0x26,
	0x5d, 0xb1, 0x9d, 0x57, 0x74, 0xf1, 0x3d, 0xc9, 0xb4, 0x4b, 0xc9, 0x4c, 0x4b, 0x60, 0x51, 0xf8,
	0xd7, 0xb2, 0x44, 0xe2, 0xb7, 0xf0, 0xc8, 0xa1, 0xba, 0xb3, 0xac, 0x28, 0x8f, 0x1c, 0xca, 0x1b,
	0xca, 0x47, 0xb0, 0xcc, 0xc6, 0x9e, 0x81, 0x43, 0x14, 0x5b, 0x65, 0x55, 0x0c, 0x62, 0x12, 0xcc,
	0x13, 0x4f, 0x3f, 0x98, 0xd3, 0x81, 0x8d, 0x3d, 0x3d, 0xb0, 0xa2, 0xbb, 0xda, 0x11, 0x9b, 0xc8,
	0xad, 0x64, 0xae, 0x7d, 0x63, 0x5f, 0x3e, 0x98, 0xd3, 0xcb, 0x23, 0x16, 0x49, 0x3d, 0x84, 0x8a,
	0x3c, 0x0d, 0x62, 0x11, 0xf2, 0x7c, 0xdc, 0xdf, 0xac, 0x65, 0xe4, 0xe2, 0x2c, 0xa7, 0x2f, 0x09,
	0x60, 0xcf, 0x0a, 0xf6, 0xc6, 0x7d, 0x94, 0x0b, 0x53, 0x72, 0xab, 0x17, 0xcb, 0x85, 0x09, 0xb9,
	0x4f, 0xa1, 0x1a, 0xdf, 0x38, 0x48, 0x6f, 0x20, 0x99, 0x5a, 0x20, 0xb5, 0x2d, 0xe8, 0x95, 0x08,
	0x2d, 0xfd, 0x64, 0x0f, 0x6a, 0xf2, 0xca, 0xc0, 0x9e, 0xdc, 0xe5, 0xad, 0x65, 0xee, 0xef, 0xd3,
	0x7b, 0x83, 0xbe, 0xa2, 0x04, 0x22, 0xc2, 0x1e, 0x40, 0xc9, 0x74, 0x07, 0xc2, 0x4a, 0xda, 0x7d,
	0x80, 0x6e, 0x3b, 0x4e, 0x63, 0x19, 0x77, 0xcf, 0x65, 0xdd, 0x5d, 0xfb, 0xb7, 0x05, 0x80, 0x1f,
	0x2e, 0xed, 0xfd, 0x50, 0xc1, 0x33, 0xb5, 0x86, 0xf9, 0xef, 0xb9, 0x86, 0x85, 0x37, 0x5b, 0xc3,
	0xc7, 0x10, 0x5f, 0xec, 0x1a, 0xd6, 0xc8, 0x96, 0x6e, 0x5c, 0xcc, 0xbe, 0x0d, 0xf4, 0x3a, 0x8d,
	0x91, 0x2d, 0x6e, 0xdf, 0x57, 0x22, 0xb4, 0x22, 0xcc, 0x70, 0x82, 0xd2, 0xef, 0xea, 0x04, 0xe5,
	0xef, 0xe6, 0x04, 0xda, 0xdf, 0xcf, 0x43, 0x4d, 0xef, 0x75, 0x3b, 0x0d, 0x1e, 0xba, 0x48, 0x14,
	0xeb, 0xb9, 0x01, 0x85, 0xd4, 0x33, 0x4e, 0xfe, 0x4c, 0xbc, 0xd2, 0xdc, 0x87, 0x32, 0xa3, 0xe1,
	0x19, 0x1e, 0x23, 0x2e, 0xae, 0xcc, 0x4a, 0x12, 0xd2, 0x0e, 0x70, 0xdd, 0x15, 0x5c, 0x24, 0x03,
	0xb9, 0xa8, 0x20, 0x49, 0x1d, 0xcc, 0x08, 0x37, 0x53, 0x07, 0x36, 0xb9, 0x0f, 0x24, 0x0e, 0x68,
	0xd3, 0xd6, 0xc9, 0xff, 0xae, 0xd6, 0x29, 0x7c, 0x47, 0xeb, 0x3c, 0x49, 0x1b, 0x47, 0xd4, 0x58,
	0x0f, 0xa0, 0x98, 0x2e, 0xae, 0xb6, 0x62, 0x75, 0x59, 0x43, 0xea, 0x11, 0x52, 0xfb, 0xeb, 0x05,
	0x58, 0x42, 0xee, 0x9b, 0x45, 0xcc, 0x0d, 0x88, 0xcc, 0xa0, 0x36, 0xd3, 0xb2, 0x3e, 0x21, 0x60,
	0xc5, 0x92, 0x88, 0xa7, 0x38, 0x5a, 0x26, 0x01, 0xc5, 0xa6, 0x23, 0x6a, 0xf1, 0x0d, 0x22, 0x2a,
	0x3f, 0x1d, 0x51, 0x77, 0x61, 0x15, 0x31, 0x21, 0x67, 0x41, 0xda, 0x88, 0x15, 0x7d, 0xc5, 0x1b,
	0x8f, 0x74, 0xce, 0x82, 0xd8, 0x2e, 0x53, 0xd1, 0x57, 0xfc, 0x9e, 0xd1, 0x57, 0x7a, 0xb3, 0xe8,
	0xfb, 0x29, 0x54, 0x2c, 0x1e, 0xba, 0x59, 0xd7, 0x9f, 0xbd, 0x1a, 0x62, 0x79, 0x97, 0xad, 0x44,
	0x4b, 0x1b, 0x01, 0x34, 0x8f, 0xbb, 0xd1, 0x82, 0x64, 0x8d, 0x9a, 0x9b, 0x36, 0xea, 0x06, 0x14,
	0x6c, 0x8f, 0x4d, 0xea, 0x9b, 0xbc, 0xed, 0xb1, 0xb6, 0x8d, 0xdb, 0xad, 0x78, 0xca, 0x0b, 0xe9,
	0xc8, 0x74, 0x3c, 0x3c, 0xda, 0xaa, 0xa2, 0x0d, 0xa9, 0x7a, 0x44, 0xd4, 0x7e, 0x59, 0x80, 0x4a,
	0x74, 0x0a, 0x95, 0xc7, 0xa1, 0x1f, 0x41, 0x35, 0x72, 0xff, 0xd4, 0x91, 0x33, 0xfa, 0x7b, 0x83,
	0x3a, 0x75, 0x3e, 0x84, 0x65, 0x75, 0x4f, 0x29, 0xc4, 0x54, 0xe0, 0xa5, 0x1f, 0x1f, 0xa5, 0x46,
	0x65, 0x57, 0xa5, 0xfe, 0x21, 0x2c, 0x87, 0x49, 0xb9, 0x85, 0x4b, 0xe4, 0xc2, 0x84, 0xdc, 0x63,
	0x58, 0x95, 0x57, 0x05, 0x49, 0xe1, 0xc5, 0x8b, 0x85, 0x57, 0xc4, 0x55, 0xc1, 0x0c, 0x05, 0xa9,
	0xde, 0xf3, 0xdf, 0xa2, 0x40, 0x4f, 0x28, 0xc0, 0x82, 0x31, 0x08, 0xa2, 0xea, 0xae, 0xa2, 0xe7,
	0xcd, 0x20, 0x68, 0xdb, 0x78, 0x78, 0x90, 0x64, 0xf5, 0xa6, 0x27, 0xab, 0x1a, 0x10, 0x4c, 0xf9,
	0x76, 0x77, 0x07, 0x16, 0x4c, 0x77, 0x20, 0x1c, 0xa8, 0xba, 0x53, 0x55, 0x67, 0x9e, 0xfa, 0xe1,
	0x93, 0x63, 0x73, 0x44, 0x75, 0x64, 0x91, 0x07, 0x50, 0xc6, 0x62, 0x59, 0x96, 0x06, 0xd2, 0x61,
	0x26, 0x97, 0x04, 0x89, 0x4a, 0xfe, 0x60, 0x4e, 0x2f, 0x21, 0x50, 0xf8, 0xc6, 0x87, 0x50, 0x8a,
	0xcb, 0x09, 0xc8, 0xcc, 0x63, 0x52, 0x42, 0x1e, 0xcc, 0x89, 0xa2, 0x39, 0x92, 0x60, 0x8e, 0xea,
	0x65, 0x29, 0x5b, 0xb8, 0xb4, 0x13, 0x9d, 0x14, 0x99, 0x23, 0xfb, 0x78, 0x00, 0x65, 0x11, 0x65,
	0x42, 0x64, 0x39, 0x33, 0xb0, 0x44, 0xe6, 0xc0, 0x81, 0x21, 0x30, 0xea, 0x46, 0x78, 0x24, 0xca,
	0x54, 0x32, 0xdd, 0x4c, 0x7c, 0x1b, 0xbb, 0x41, 0x57, 0x55, 0x12, 0xf1, 0xf4, 0xb3, 0x15, 0x55,
	0x6a, 0xf6, 0xc5, 0x68, 0xf2, 0xef, 0xc0, 0x4a, 0xe4, 0xa5, 0xec, 0xdc, 0xb3, 0xd0, 0xbf, 0x57,
	0xe4, 0x23, 0x95, 0x22, 0x77, 0x25, 0x15, 0xb3, 0xb9, 0xeb, 0xfb, 0xc3, 0x71, 0x60, 0x9c, 0x85,
	0xb2, 0x7c, 0x2a, 0xe8, 0x65, 0x49, 0x79, 0x1a, 0xf6, 0xe3, 0xff, 0xda, 0xac, 0xce, 0xf8, 0xaf,
	0x0d, 0x49, 0xfc, 0xd7, 0x66, 0x0b, 0x4a, 0xee, 0x0e, 0xa3, 0x03, 0x5c, 0xfe, 0x35, 0x59, 0x12,
	0x8a, 0x76, 0xdb, 0x4e, 0x15, 0x2c, 0x21, 0xac, 0xc4, 0x17, 0x40, 0x2c, 0xf0, 0x3d, 0x46, 0xc9,
	0x07, 0x00, 0x66, 0xe0, 0x44, 0x0e, 0x97, 0x53, 0x4f, 0xe0, 0x72, 0x7f, 0xaa, 0x07, 0x8e, 0xf2,
	0xb6, 0xb2, 0x19, 0x7d, 0x92, 0x6d, 0x28, 0xa4, 0x62, 0xea, 0xca, 0xd4, 0x75, 0x91, 0x14, 0x51,
	0x28, 0xed, 0x67, 0x40, 0x32, 0x7d, 0x1e, 0xb1, 0x01, 0xd9, 0x85, 0x52, 0xa8, 0x9a, 0x6a, 0x43,
	0xd8, 0xcc, 0xea, 0x89, 0xe0, 0x7a, 0x8c, 0xd4, 0xfe, 0x2e, 0x07, 0xeb, 0x8a, 0xdb, 0xa4, 0x2e,
	0xe5, 0x54, 0xdd, 0x63, 0x91, 0x47, 0xb3, 0xb3, 0x42, 0xf6, 0x26, 0xf3, 0x60, 0x2e, 0x9b, 0x27,
	0x1e, 0x4f, 0x04, 0xfb, 0x8e, 0xcb, 0x69, 0x78, 0xd1, 0xac, 0xf6, 0x05, 0x37, 0xa1, 0x40, 0x12,
	0xf6, 0x4a, 0x50, 0x18, 0x50, 0x6e, 0x3c, 0x3f, 0xd7, 0x74, 0xb8, 0x3a, 0x6b, 0x6c, 0x38, 0xdb,
	0x47, 0xd9, 0x3b, 0xb6, 0x9b, 0x59, 0xf5, 0x29, 0x91, 0xc9, 0x65, 0xdb, 0x5f, 0xe5, 0x60, 0x23,
	0x83, 0x50, 0xeb, 0xb6, 0xff, 0x26, 0xeb, 0xb6, 0xb7, 0xf1, 0xcd, 0x57, 0xb7, 0x57, 0xd5, 0xfc,
	0x27, 0xf0, 0xe4, 0x72, 0x4e, 0xe7, 0xd3, 0xf9, 0x19, 0xf9, 0x54, 0x7b, 0x0a, 0x9b, 0x33, 0xc7,
	0x81, 0xb3, 0xfb, 0x64, 0x6a, 0x2d, 0x6f, 0x5d, 0x34, 0xbd, 0xa9, 0x15, 0xfd, 0xc5, 0x7c, 0x9c,
	0xe0, 0xa5, 0x41, 0xff, 0x17, 0xee, 0xbb, 0xb6, 0xa0, 0x84, 0x1a, 0x13, 0xf5, 0x54, 0x91, 0x85,
	0x56, 0x47, 0xfd, 0x83, 0x02, 0x75, 0x24, 0xee, 0xbd, 0x8a, 0x36, 0xe3, 0x82, 0x95, 0xfc, 0xd3,
	0x51, 0xfe, 0x5b, 0xff, 0x74, 0x34, 0x29, 0xfe, 0x0a, 0xc9, 0xe2, 0x6f, 0xea, 0x3f, 0x70, 0xc5,
	0xe9, 0xff, 0xc0, 0x7d, 0x6b, 0xfe, 0xd5, 0xfe, 0x36, 0x17, 0x5f, 0xdc, 0x3e, 0xa1, 0xfc, 0xff,
	0x93, 0xcf, 0x1f, 0xc6, 0xf1, 0x38, 0x19, 0x98, 0x0c, 0xef, 0x8c, 0xc3, 0x5f, 0xcb, 0xea, 0x9e,
	0xe0, 0x27, 0xde, 0xfe, 0x0f, 0xea, 0xdf, 0x63, 0xe8, 0x9a, 0x8c, 0xec, 0xc2, 0x15, 0xf9, 0x40,
	0x4b, 0xc3, 0x91, 0xc3, 0xc5, 0x23, 0xb3, 0x7a, 0xaa, 0x95, 0x3b, 0xfe, 0xba, 0x78, 0xaa, 0x8d,
	0x98, 0xd1, 0x9b, 0xed, 0x87, 0xb0, 0x9e, 0x91, 0x4a, 0xbe, 0xff, 0x92, 0x94, 0x8c, 0x7c, 0x08,
	0x8e, 0x24, 0xec, 0xd0, 0x0f, 0x82, 0x44, 0x2f, 0x0b, 0x13, 0x89, 0xa6, 0x64, 0x45, 0x7d, 0xbc,
	0x0f, 0x24, 0x25, 0x21, 0x7b, 0x58, 0x14, 0xf8, 0x5a, 0x02, 0x2f, 0xf5, 0x7f, 0x00, 0xeb, 0x58,
	0x0e, 0x8a, 0x27, 0x11, 0xc7, 0x1a, 0xba, 0x94, 0xc9, 0x87, 0xcd, 0xbc, 0xc0, 0x63, 0xa9, 0xd8,
	0xb3, 0x82, 0x9e, 0xe4, 0x88, 0x77, 0xd0, 0x77, 0xa0, 0x16, 0x09, 0x84, 0x8c, 0x4b, 0xb0, 0xf4,
	0xaa, 0x8a, 0x04, 0xeb, 0x8c, 0x8b, 0x37, 0xd0, 0x7f, 0x9a, 0x87, 0xe5, 0x44, 0xd2, 0x65, 0xa4,
	0x09, 0xeb, 0xe9, 0xb7, 0x0a, 0x11, 0xf0, 0x2c, 0xbe, 0x75, 0xcd, 0xd6, 0x11, 0x4c, 0x27, 0xa9,
	0xb7, 0x92, 0x58, 0x4b, 0xfa, 0xb9, 0x42, 0x69, 0x99, 0xbf, 0x58, 0x4b, 0xea, 0xdd, 0x44, 0x6a,
	0x39, 0x82, 0xad, 0x19, 0x8f, 0x27, 0x4a, 0xd5, 0xc2, 0x85, 0xaa, 0xae, 0x4c, 0xbd, 0xa1, 0xa4,
	0xd5, 0xcd, 0x1c, 0xd9, 0xe2, 0xe5, 0xea, 0xf4, 0xa9, 0xd1, 0x69, 0xbf, 0xcc, 0xc5, 0xdb, 0x92,
	0xf0, 0xc4, 0xef, 0xbb, 0x1b, 0xbe, 0x0b, 0x8b, 0x2c, 0xa0, 0x96, 0xb2, 0xcd, 0xec, 0xa7, 0x13,
	0x81, 0x48, 0xec, 0x9b, 0x0b, 0x6f, 0xb2, 0x6f, 0x92, 0x7b, 0xe2, 0x32, 0x39, 0x9e, 0xdc, 0xc6,
	0x2c, 0x38, 0xd3, 0x25, 0x46, 0xfb, 0xcb, 0xc9, 0x3e, 0x91, 0x98, 0x0e, 0x46, 0xe2, 0x77, 0x9e,
	0xd1, 0xa3, 0x44, 0x36, 0x9f, 0x17, 0xb1, 0x7b, 0x7d, 0x66, 0xec, 0x66, 0x53, 0xf9, 0xdd, 0x2f,
	0xa1, 0xa8, 0xfe, 0x31, 0x47, 0x56, 0xa1, 0x72, 0x5c, 0xef, 0x19, 0xbd, 0x2f, 0x3a, 0x2d, 0xe3,
	0xf8, 0xe4, 0xb8, 0x55, 0x9b, 0x4b, 0x91, 0xba, 0xc7, 0xf5, 0x5e, 0x2d, 0x97, 0x22, 0x35, 0x91,
	0x34, 0x4f, 0xae, 0x00, 0x89, 0x49, 0xbd, 0x67, 0xed, 0x46, 0xcb, 0x40, 0xfa, 0xc2, 0xdd, 0x13,
	0xf9, 0xe6, 0xa4, 0xfe, 0x22, 0xb8, 0x0e, 0xb5, 0xfd, 0xc3, 0x93, 0x67, 0x06, 0x1e, 0x44, 0x4f,
	0x8e, 0xa3, 0x1e, 0x36, 0x60, 0x35, 0x49, 0xad, 0x1f, 0x1e, 0x9e, 0x3c, 0xab, 0xe5, 0xb2, 0xe0,
	0xa6, 0x7e, 0xd2, 0xa9, 0xcd, 0xdf, 0xfd, 0x4d, 0x0e, 0x96, 0x93, 0x7f, 0x67, 0x23, 0x57, 0x61,
	0x4d, 0xc0, 0x7a, 0x8d, 0x8e, 0xd1, 0xed, 0xd5, 0x7b, 0x2d, 0xa3, 0x7d, 0xdc, 0xee, 0xd5, 0xe6,
	0xc8, 0x75, 0xb8, 0x9a, 0x61, 0x74, 0xbf, 0x38, 0x36, 0xf4, 0xc6, 0xd3, 0x66, 0x2d, 0x37, 0x83,
	0x59, 0x6f, 0x7c, 0x26, 0x99, 0xf3, 0xe4, 0x36, 0x5c, 0x9f, 0x21, 0x19, 0x03, 0x16, 0xc8, 0x2d,
	0xb8, 0x96, 0x01, 0xb4, 0xba, 0xbd, 0xfa, 0xde, 0x61, 0xbb, 0x7b, 0xd0, 0x6a, 0xd6, 0x16, 0x67,
	0x68, 0xdf, 0x6f, 0xab, 0xae, 0xf3, 0xe4, 0x2d, 0xb8, 0x99, 0x61, 0xee, 0xb5, 0x9b, 0x6d, 0x7d,
	0x02, 0x29, 0x90, 0x4d, 0x58, 0xcf, 0x40, 0xf4, 0x56, 0xb7, 0xd5, 0xab, 0x15, 0xef, 0xfe, 0x8b,
	0x7a, 0x62, 0xef, 0xc9, 0x7f, 0x3f, 0x57, 0x25, 0x2c, 0xb1, 0x5c, 0x5b, 0xb0, 0x31, 0xa1, 0x35,
	0x0e, 0xeb, 0xdd, 0x6e, 0xbb, 0x61, 0x1c, 0xb7, 0x1b, 0xb5, 0x5c, 0x1a, 0xae, 0x37, 0x8f, 0xea,
	0xb5, 0xf9, 0xd8, 0xc8, 0x72, 0xe1, 0x1a, 0x9d, 0xde, 0x61, 0xb7, 0xb6, 0x40, 0xd6, 0x60, 0x65,
	0x42, 0x6d, 0x77, 0xba, 0xad, 0x46, 0x6d, 0x11, 0x57, 0x3d, 0xd1, 0x5b, 0xb3, 0x55, 0xcb, 0xc7,
	0x2b, 0x27, 0x9d, 0xa3, 0x77, 0xa2, 0xd7, 0x9f, 0xb4, 0x6a, 0x85, 0xc9, 0x92, 0x08, 0xa5, 0xad,
	0xc3, 0xd6, 0x51, 0xab, 0xa7, 0x7f, 0x51, 0x2b, 0xde, 0xfd, 0x53, 0xb9, 0x76, 0xd1, 0x83, 0x19,
	0x7a, 0x8d, 0x00, 0xb6, 0x8f, 0xbb, 0xbd, 0xfa, 0x71, 0x63, 0x6a, 0x12, 0x31, 0xbd, 0xa3, 0xb7,
	0x8f, 0xea, 0xfa, 0x17, 0x89, 0x85, 0x8b, 0x59, 0xdd, 0x56, 0xe3, 0xe4, 0xb8, 0x89, 0xcc, 0xf9,
	0xbb, 0x8f, 0xc4, 0x3d, 0x5d, 0x74, 0xdf, 0x84, 0xb3, 0xe8, 0x75, 0x8c, 0xc6, 0x51, 0xd3, 0xd0,
	0x5b, 0x7f, 0xfc, 0x79, 0xab, 0x8b, 0x5e, 0x81, 0x13, 0x8e, 0x89, 0xdd, 0xce, 0xc9, 0x71, 0xb7,
	0x55, 0xcb, 0xed, 0xfc, 0x36, 0x07, 0xc5, 0xe8, 0x0f, 0x1a, 0x3f, 0x8b, 0x0b, 0x1b, 0xf9, 0x8f,
	0x24, 0x72, 0x6d, 0xba, 0xc0, 0x8d, 0xf6, 0xcb, 0x6b, 0xd7, 0x2f, 0x2a, 0x7e, 0x8f, 0xd8, 0x40,
	0x9b, 0x23, 0x4f, 0x63, 0x5d, 0xb2, 0x90, 0x22, 0x77, 0x2e, 0xad, 0x1f, 0x51, 0xe3, 0x5b, 0x97,
	0x97, 0x60, 0x52, 0xef, 0x09, 0xc0, 0x24, 0xa4, 0xc9, 0xcd, 0x8b, 0xf7, 0x68, 0xd4, 0x78, 0xeb,
	0x92, 0x34, 0x20, 0xd4, 0x7d, 0x98, 0xdb, 0xbb, 0xf2, 0xef, 0x5f, 0xdf, 0xca, 0xfd, 0xc7, 0xd7,
	0xb7, 0x72, 0xff, 0xf5, 0xf5, 0xad, 0xdc, 0x97, 0xa5, 0x53, 0xd3, 0x15, 0x05, 0xd4, 0xf3, 0x82,
	0xf8, 0x79, 0xf0, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x3a, 0x2d, 0x5a, 0x85, 0x30, 0x00,
	0x00,
}
