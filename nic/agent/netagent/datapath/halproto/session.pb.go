// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nic/proto/hal/session.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ObjectMeta from nic/proto/types.proto

// Ignoring public import of EncapInfo from nic/proto/types.proto

// Ignoring public import of IPAddress from nic/proto/types.proto

// Ignoring public import of IPPrefix from nic/proto/types.proto

// Ignoring public import of L4PortRange from nic/proto/types.proto

// Ignoring public import of Empty from nic/proto/types.proto

// Ignoring public import of IPProtocol from nic/proto/types.proto

// Ignoring public import of ICMPMsgType from nic/proto/types.proto

// Ignoring public import of ApiStatus from nic/proto/types.proto

// Ignoring public import of L2SegmentType from nic/proto/types.proto

// Ignoring public import of encapType from nic/proto/types.proto

// Ignoring public import of IPAddressFamily from nic/proto/types.proto

// Ignoring public import of WRingType from nic/proto/types.proto

// Ignoring public import of ProxyType from nic/proto/types.proto

// Ignoring public import of CryptoKeyType from nic/proto/types.proto

// Types of NAT
type NatType int32

const (
	NatType_NAT_TYPE_NONE      NatType = 0
	NatType_NAT_TYPE_SNAT      NatType = 1
	NatType_NAT_TYPE_DNAT      NatType = 2
	NatType_NAT_TYPE_TWICE_NAT NatType = 3
)

var NatType_name = map[int32]string{
	0: "NAT_TYPE_NONE",
	1: "NAT_TYPE_SNAT",
	2: "NAT_TYPE_DNAT",
	3: "NAT_TYPE_TWICE_NAT",
}
var NatType_value = map[string]int32{
	"NAT_TYPE_NONE":      0,
	"NAT_TYPE_SNAT":      1,
	"NAT_TYPE_DNAT":      2,
	"NAT_TYPE_TWICE_NAT": 3,
}

func (x NatType) String() string {
	return proto.EnumName(NatType_name, int32(x))
}
func (NatType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{0} }

// Flow actions
type FlowAction int32

const (
	FlowAction_FLOW_ACTION_NONE  FlowAction = 0
	FlowAction_FLOW_ACTION_ALLOW FlowAction = 1
	FlowAction_FLOW_ACTION_DROP  FlowAction = 2
)

var FlowAction_name = map[int32]string{
	0: "FLOW_ACTION_NONE",
	1: "FLOW_ACTION_ALLOW",
	2: "FLOW_ACTION_DROP",
}
var FlowAction_value = map[string]int32{
	"FLOW_ACTION_NONE":  0,
	"FLOW_ACTION_ALLOW": 1,
	"FLOW_ACTION_DROP":  2,
}

func (x FlowAction) String() string {
	return proto.EnumName(FlowAction_name, int32(x))
}
func (FlowAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{1} }

// Flow TCP states
// TODO: Srini, please define all other states
type FlowTCPState int32

const (
	FlowTCPState_FLOW_TCP_STATE_INIT           FlowTCPState = 0
	FlowTCPState_FLOW_TCP_STATE_SYN_RCVD       FlowTCPState = 1
	FlowTCPState_FLOW_TCP_STATE_ACK_RCVD       FlowTCPState = 2
	FlowTCPState_FLOW_TCP_STATE_SYN_ACK_RCVD   FlowTCPState = 3
	FlowTCPState_FLOW_TCP_STATE_ESTABLISHED    FlowTCPState = 4
	FlowTCPState_FLOW_TCP_STATE_FIN_RCVD       FlowTCPState = 5
	FlowTCPState_FLOW_TCP_STATE_BIDIR_FIN_RCVD FlowTCPState = 6
	FlowTCPState_FLOW_TCP_STATE_RESET          FlowTCPState = 7
)

var FlowTCPState_name = map[int32]string{
	0: "FLOW_TCP_STATE_INIT",
	1: "FLOW_TCP_STATE_SYN_RCVD",
	2: "FLOW_TCP_STATE_ACK_RCVD",
	3: "FLOW_TCP_STATE_SYN_ACK_RCVD",
	4: "FLOW_TCP_STATE_ESTABLISHED",
	5: "FLOW_TCP_STATE_FIN_RCVD",
	6: "FLOW_TCP_STATE_BIDIR_FIN_RCVD",
	7: "FLOW_TCP_STATE_RESET",
}
var FlowTCPState_value = map[string]int32{
	"FLOW_TCP_STATE_INIT":           0,
	"FLOW_TCP_STATE_SYN_RCVD":       1,
	"FLOW_TCP_STATE_ACK_RCVD":       2,
	"FLOW_TCP_STATE_SYN_ACK_RCVD":   3,
	"FLOW_TCP_STATE_ESTABLISHED":    4,
	"FLOW_TCP_STATE_FIN_RCVD":       5,
	"FLOW_TCP_STATE_BIDIR_FIN_RCVD": 6,
	"FLOW_TCP_STATE_RESET":          7,
}

func (x FlowTCPState) String() string {
	return proto.EnumName(FlowTCPState_name, int32(x))
}
func (FlowTCPState) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{2} }

// App Types ... In sync with p4/nw/include/defines.h
// TODO: Revisit once we decide if flow drives app_id or service_lif
type FlowType int32

const (
	FlowType_FLOW_TYPE_NONE        FlowType = 0
	FlowType_FLOW_TYPE_CLASSIC_NIC FlowType = 1
	FlowType_FLOW_TYPE_RDMA        FlowType = 2
	FlowType_FLOW_TYPE_TCPTLS      FlowType = 3
	FlowType_FLOW_TYPE_IPSEC       FlowType = 4
	FlowType_FLOW_TYPE_NDE         FlowType = 5
	FlowType_FLOW_TYPE_STORAGE     FlowType = 6
	FlowType_FLOW_TYPE_TELEMETRY   FlowType = 7
)

var FlowType_name = map[int32]string{
	0: "FLOW_TYPE_NONE",
	1: "FLOW_TYPE_CLASSIC_NIC",
	2: "FLOW_TYPE_RDMA",
	3: "FLOW_TYPE_TCPTLS",
	4: "FLOW_TYPE_IPSEC",
	5: "FLOW_TYPE_NDE",
	6: "FLOW_TYPE_STORAGE",
	7: "FLOW_TYPE_TELEMETRY",
}
var FlowType_value = map[string]int32{
	"FLOW_TYPE_NONE":        0,
	"FLOW_TYPE_CLASSIC_NIC": 1,
	"FLOW_TYPE_RDMA":        2,
	"FLOW_TYPE_TCPTLS":      3,
	"FLOW_TYPE_IPSEC":       4,
	"FLOW_TYPE_NDE":         5,
	"FLOW_TYPE_STORAGE":     6,
	"FLOW_TYPE_TELEMETRY":   7,
}

func (x FlowType) String() string {
	return proto.EnumName(FlowType_name, int32(x))
}
func (FlowType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{3} }

// Key for L2 flows (i.e, non-IP flows)
type FlowKeyL2 struct {
	Smac        uint64 `protobuf:"fixed64,1,opt,name=smac,proto3" json:"smac,omitempty"`
	Dmac        uint64 `protobuf:"fixed64,2,opt,name=dmac,proto3" json:"dmac,omitempty"`
	EtherType   uint32 `protobuf:"varint,4,opt,name=ether_type,json=etherType,proto3" json:"ether_type,omitempty"`
	L2SegmentId uint32 `protobuf:"varint,3,opt,name=l2_segment_id,json=l2SegmentId,proto3" json:"l2_segment_id,omitempty"`
}

func (m *FlowKeyL2) Reset()                    { *m = FlowKeyL2{} }
func (m *FlowKeyL2) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyL2) ProtoMessage()               {}
func (*FlowKeyL2) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{0} }

func (m *FlowKeyL2) GetSmac() uint64 {
	if m != nil {
		return m.Smac
	}
	return 0
}

func (m *FlowKeyL2) GetDmac() uint64 {
	if m != nil {
		return m.Dmac
	}
	return 0
}

func (m *FlowKeyL2) GetEtherType() uint32 {
	if m != nil {
		return m.EtherType
	}
	return 0
}

func (m *FlowKeyL2) GetL2SegmentId() uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return 0
}

type FlowKeyTcpUdpInfo struct {
	Sport uint32 `protobuf:"varint,1,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport uint32 `protobuf:"varint,2,opt,name=dport,proto3" json:"dport,omitempty"`
}

func (m *FlowKeyTcpUdpInfo) Reset()                    { *m = FlowKeyTcpUdpInfo{} }
func (m *FlowKeyTcpUdpInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyTcpUdpInfo) ProtoMessage()               {}
func (*FlowKeyTcpUdpInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{1} }

func (m *FlowKeyTcpUdpInfo) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *FlowKeyTcpUdpInfo) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

type FlowKeyICMPInfo struct {
	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Code uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Id   uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FlowKeyICMPInfo) Reset()                    { *m = FlowKeyICMPInfo{} }
func (m *FlowKeyICMPInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyICMPInfo) ProtoMessage()               {}
func (*FlowKeyICMPInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{2} }

func (m *FlowKeyICMPInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *FlowKeyICMPInfo) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FlowKeyICMPInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FlowKeyESPInfo struct {
	Spi uint32 `protobuf:"varint,1,opt,name=spi,proto3" json:"spi,omitempty"`
}

func (m *FlowKeyESPInfo) Reset()                    { *m = FlowKeyESPInfo{} }
func (m *FlowKeyESPInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyESPInfo) ProtoMessage()               {}
func (*FlowKeyESPInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{3} }

func (m *FlowKeyESPInfo) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

// Key for IPv4 flows
type FlowKeyV4 struct {
	Sip     uint32     `protobuf:"fixed32,1,opt,name=sip,proto3" json:"sip,omitempty"`
	Dip     uint32     `protobuf:"fixed32,2,opt,name=dip,proto3" json:"dip,omitempty"`
	IpProto IPProtocol `protobuf:"varint,3,opt,name=ip_proto,json=ipProto,proto3,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	// TODO: add AH etc. here
	//
	// Types that are valid to be assigned to L4Fields:
	//	*FlowKeyV4_TcpUdp
	//	*FlowKeyV4_Icmp
	//	*FlowKeyV4_Esp
	L4Fields isFlowKeyV4_L4Fields `protobuf_oneof:"l4_fields"`
}

func (m *FlowKeyV4) Reset()                    { *m = FlowKeyV4{} }
func (m *FlowKeyV4) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyV4) ProtoMessage()               {}
func (*FlowKeyV4) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{4} }

type isFlowKeyV4_L4Fields interface {
	isFlowKeyV4_L4Fields()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowKeyV4_TcpUdp struct {
	TcpUdp *FlowKeyTcpUdpInfo `protobuf:"bytes,4,opt,name=tcp_udp,json=tcpUdp,oneof"`
}
type FlowKeyV4_Icmp struct {
	Icmp *FlowKeyICMPInfo `protobuf:"bytes,5,opt,name=icmp,oneof"`
}
type FlowKeyV4_Esp struct {
	Esp *FlowKeyESPInfo `protobuf:"bytes,6,opt,name=esp,oneof"`
}

func (*FlowKeyV4_TcpUdp) isFlowKeyV4_L4Fields() {}
func (*FlowKeyV4_Icmp) isFlowKeyV4_L4Fields()   {}
func (*FlowKeyV4_Esp) isFlowKeyV4_L4Fields()    {}

func (m *FlowKeyV4) GetL4Fields() isFlowKeyV4_L4Fields {
	if m != nil {
		return m.L4Fields
	}
	return nil
}

func (m *FlowKeyV4) GetSip() uint32 {
	if m != nil {
		return m.Sip
	}
	return 0
}

func (m *FlowKeyV4) GetDip() uint32 {
	if m != nil {
		return m.Dip
	}
	return 0
}

func (m *FlowKeyV4) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *FlowKeyV4) GetTcpUdp() *FlowKeyTcpUdpInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV4_TcpUdp); ok {
		return x.TcpUdp
	}
	return nil
}

func (m *FlowKeyV4) GetIcmp() *FlowKeyICMPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV4_Icmp); ok {
		return x.Icmp
	}
	return nil
}

func (m *FlowKeyV4) GetEsp() *FlowKeyESPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV4_Esp); ok {
		return x.Esp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowKeyV4) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowKeyV4_OneofMarshaler, _FlowKeyV4_OneofUnmarshaler, _FlowKeyV4_OneofSizer, []interface{}{
		(*FlowKeyV4_TcpUdp)(nil),
		(*FlowKeyV4_Icmp)(nil),
		(*FlowKeyV4_Esp)(nil),
	}
}

func _FlowKeyV4_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowKeyV4)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV4_TcpUdp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpUdp); err != nil {
			return err
		}
	case *FlowKeyV4_Icmp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Icmp); err != nil {
			return err
		}
	case *FlowKeyV4_Esp:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Esp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowKeyV4.L4Fields has unexpected type %T", x)
	}
	return nil
}

func _FlowKeyV4_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowKeyV4)
	switch tag {
	case 4: // l4_fields.tcp_udp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyTcpUdpInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV4_TcpUdp{msg}
		return true, err
	case 5: // l4_fields.icmp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyICMPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV4_Icmp{msg}
		return true, err
	case 6: // l4_fields.esp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyESPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV4_Esp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowKeyV4_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowKeyV4)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV4_TcpUdp:
		s := proto.Size(x.TcpUdp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV4_Icmp:
		s := proto.Size(x.Icmp)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV4_Esp:
		s := proto.Size(x.Esp)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Key for IPv6 flows
type FlowKeyV6 struct {
	Sip     *IPAddress `protobuf:"bytes,1,opt,name=sip" json:"sip,omitempty"`
	Dip     *IPAddress `protobuf:"bytes,2,opt,name=dip" json:"dip,omitempty"`
	IpProto IPProtocol `protobuf:"varint,3,opt,name=ip_proto,json=ipProto,proto3,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	// TODO: add AH etc. here
	//
	// Types that are valid to be assigned to L4Fields:
	//	*FlowKeyV6_TcpUdp
	//	*FlowKeyV6_Icmp
	//	*FlowKeyV6_Esp
	L4Fields isFlowKeyV6_L4Fields `protobuf_oneof:"l4_fields"`
}

func (m *FlowKeyV6) Reset()                    { *m = FlowKeyV6{} }
func (m *FlowKeyV6) String() string            { return proto.CompactTextString(m) }
func (*FlowKeyV6) ProtoMessage()               {}
func (*FlowKeyV6) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{5} }

type isFlowKeyV6_L4Fields interface {
	isFlowKeyV6_L4Fields()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowKeyV6_TcpUdp struct {
	TcpUdp *FlowKeyTcpUdpInfo `protobuf:"bytes,4,opt,name=tcp_udp,json=tcpUdp,oneof"`
}
type FlowKeyV6_Icmp struct {
	Icmp *FlowKeyICMPInfo `protobuf:"bytes,5,opt,name=icmp,oneof"`
}
type FlowKeyV6_Esp struct {
	Esp *FlowKeyESPInfo `protobuf:"bytes,6,opt,name=esp,oneof"`
}

func (*FlowKeyV6_TcpUdp) isFlowKeyV6_L4Fields() {}
func (*FlowKeyV6_Icmp) isFlowKeyV6_L4Fields()   {}
func (*FlowKeyV6_Esp) isFlowKeyV6_L4Fields()    {}

func (m *FlowKeyV6) GetL4Fields() isFlowKeyV6_L4Fields {
	if m != nil {
		return m.L4Fields
	}
	return nil
}

func (m *FlowKeyV6) GetSip() *IPAddress {
	if m != nil {
		return m.Sip
	}
	return nil
}

func (m *FlowKeyV6) GetDip() *IPAddress {
	if m != nil {
		return m.Dip
	}
	return nil
}

func (m *FlowKeyV6) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *FlowKeyV6) GetTcpUdp() *FlowKeyTcpUdpInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV6_TcpUdp); ok {
		return x.TcpUdp
	}
	return nil
}

func (m *FlowKeyV6) GetIcmp() *FlowKeyICMPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV6_Icmp); ok {
		return x.Icmp
	}
	return nil
}

func (m *FlowKeyV6) GetEsp() *FlowKeyESPInfo {
	if x, ok := m.GetL4Fields().(*FlowKeyV6_Esp); ok {
		return x.Esp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowKeyV6) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowKeyV6_OneofMarshaler, _FlowKeyV6_OneofUnmarshaler, _FlowKeyV6_OneofSizer, []interface{}{
		(*FlowKeyV6_TcpUdp)(nil),
		(*FlowKeyV6_Icmp)(nil),
		(*FlowKeyV6_Esp)(nil),
	}
}

func _FlowKeyV6_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowKeyV6)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV6_TcpUdp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpUdp); err != nil {
			return err
		}
	case *FlowKeyV6_Icmp:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Icmp); err != nil {
			return err
		}
	case *FlowKeyV6_Esp:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Esp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowKeyV6.L4Fields has unexpected type %T", x)
	}
	return nil
}

func _FlowKeyV6_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowKeyV6)
	switch tag {
	case 4: // l4_fields.tcp_udp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyTcpUdpInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV6_TcpUdp{msg}
		return true, err
	case 5: // l4_fields.icmp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyICMPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV6_Icmp{msg}
		return true, err
	case 6: // l4_fields.esp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyESPInfo)
		err := b.DecodeMessage(msg)
		m.L4Fields = &FlowKeyV6_Esp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowKeyV6_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowKeyV6)
	// l4_fields
	switch x := m.L4Fields.(type) {
	case *FlowKeyV6_TcpUdp:
		s := proto.Size(x.TcpUdp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV6_Icmp:
		s := proto.Size(x.Icmp)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKeyV6_Esp:
		s := proto.Size(x.Esp)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// FlowKey is the key for uni-directional flow
type FlowKey struct {
	// Types that are valid to be assigned to FlowKey:
	//	*FlowKey_L2Key
	//	*FlowKey_V4Key
	//	*FlowKey_V6Key
	FlowKey isFlowKey_FlowKey `protobuf_oneof:"flow_key"`
}

func (m *FlowKey) Reset()                    { *m = FlowKey{} }
func (m *FlowKey) String() string            { return proto.CompactTextString(m) }
func (*FlowKey) ProtoMessage()               {}
func (*FlowKey) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{6} }

type isFlowKey_FlowKey interface {
	isFlowKey_FlowKey()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FlowKey_L2Key struct {
	L2Key *FlowKeyL2 `protobuf:"bytes,1,opt,name=l2_key,json=l2Key,oneof"`
}
type FlowKey_V4Key struct {
	V4Key *FlowKeyV4 `protobuf:"bytes,2,opt,name=v4_key,json=v4Key,oneof"`
}
type FlowKey_V6Key struct {
	V6Key *FlowKeyV6 `protobuf:"bytes,3,opt,name=v6_key,json=v6Key,oneof"`
}

func (*FlowKey_L2Key) isFlowKey_FlowKey() {}
func (*FlowKey_V4Key) isFlowKey_FlowKey() {}
func (*FlowKey_V6Key) isFlowKey_FlowKey() {}

func (m *FlowKey) GetFlowKey() isFlowKey_FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *FlowKey) GetL2Key() *FlowKeyL2 {
	if x, ok := m.GetFlowKey().(*FlowKey_L2Key); ok {
		return x.L2Key
	}
	return nil
}

func (m *FlowKey) GetV4Key() *FlowKeyV4 {
	if x, ok := m.GetFlowKey().(*FlowKey_V4Key); ok {
		return x.V4Key
	}
	return nil
}

func (m *FlowKey) GetV6Key() *FlowKeyV6 {
	if x, ok := m.GetFlowKey().(*FlowKey_V6Key); ok {
		return x.V6Key
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowKey_OneofMarshaler, _FlowKey_OneofUnmarshaler, _FlowKey_OneofSizer, []interface{}{
		(*FlowKey_L2Key)(nil),
		(*FlowKey_V4Key)(nil),
		(*FlowKey_V6Key)(nil),
	}
}

func _FlowKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowKey)
	// flow_key
	switch x := m.FlowKey.(type) {
	case *FlowKey_L2Key:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.L2Key); err != nil {
			return err
		}
	case *FlowKey_V4Key:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V4Key); err != nil {
			return err
		}
	case *FlowKey_V6Key:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.V6Key); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowKey.FlowKey has unexpected type %T", x)
	}
	return nil
}

func _FlowKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowKey)
	switch tag {
	case 1: // flow_key.l2_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyL2)
		err := b.DecodeMessage(msg)
		m.FlowKey = &FlowKey_L2Key{msg}
		return true, err
	case 2: // flow_key.v4_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyV4)
		err := b.DecodeMessage(msg)
		m.FlowKey = &FlowKey_V4Key{msg}
		return true, err
	case 3: // flow_key.v6_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FlowKeyV6)
		err := b.DecodeMessage(msg)
		m.FlowKey = &FlowKey_V6Key{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowKey)
	// flow_key
	switch x := m.FlowKey.(type) {
	case *FlowKey_L2Key:
		s := proto.Size(x.L2Key)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKey_V4Key:
		s := proto.Size(x.V4Key)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowKey_V6Key:
		s := proto.Size(x.V6Key)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// FlowInfo contains flow information like counters, forwarding information,
// NAT rewrite information etc.
type FlowInfo struct {
	FlowAction        FlowAction         `protobuf:"varint,1,opt,name=flow_action,json=flowAction,proto3,enum=session.FlowAction" json:"flow_action,omitempty"`
	NatType           NatType            `protobuf:"varint,2,opt,name=nat_type,json=natType,proto3,enum=session.NatType" json:"nat_type,omitempty"`
	NatSip            *IPAddress         `protobuf:"bytes,3,opt,name=nat_sip,json=natSip" json:"nat_sip,omitempty"`
	NatSport          uint32             `protobuf:"varint,4,opt,name=nat_sport,json=natSport,proto3" json:"nat_sport,omitempty"`
	NatDip            *IPAddress         `protobuf:"bytes,5,opt,name=nat_dip,json=natDip" json:"nat_dip,omitempty"`
	NatDport          uint32             `protobuf:"varint,6,opt,name=nat_dport,json=natDport,proto3" json:"nat_dport,omitempty"`
	TcpState          FlowTCPState       `protobuf:"varint,7,opt,name=tcp_state,json=tcpState,proto3,enum=session.FlowTCPState" json:"tcp_state,omitempty"`
	InQosActions      *QOSActions        `protobuf:"bytes,8,opt,name=in_qos_actions,json=inQosActions" json:"in_qos_actions,omitempty"`
	EgQosActions      *QOSActions        `protobuf:"bytes,9,opt,name=eg_qos_actions,json=egQosActions" json:"eg_qos_actions,omitempty"`
	IngMirrorSessions []*MirrorSessionId `protobuf:"bytes,10,rep,name=ing_mirror_sessions,json=ingMirrorSessions" json:"ing_mirror_sessions,omitempty"`
	EgrMirrorSessions []*MirrorSessionId `protobuf:"bytes,11,rep,name=egr_mirror_sessions,json=egrMirrorSessions" json:"egr_mirror_sessions,omitempty"`
}

func (m *FlowInfo) Reset()                    { *m = FlowInfo{} }
func (m *FlowInfo) String() string            { return proto.CompactTextString(m) }
func (*FlowInfo) ProtoMessage()               {}
func (*FlowInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{7} }

func (m *FlowInfo) GetFlowAction() FlowAction {
	if m != nil {
		return m.FlowAction
	}
	return FlowAction_FLOW_ACTION_NONE
}

func (m *FlowInfo) GetNatType() NatType {
	if m != nil {
		return m.NatType
	}
	return NatType_NAT_TYPE_NONE
}

func (m *FlowInfo) GetNatSip() *IPAddress {
	if m != nil {
		return m.NatSip
	}
	return nil
}

func (m *FlowInfo) GetNatSport() uint32 {
	if m != nil {
		return m.NatSport
	}
	return 0
}

func (m *FlowInfo) GetNatDip() *IPAddress {
	if m != nil {
		return m.NatDip
	}
	return nil
}

func (m *FlowInfo) GetNatDport() uint32 {
	if m != nil {
		return m.NatDport
	}
	return 0
}

func (m *FlowInfo) GetTcpState() FlowTCPState {
	if m != nil {
		return m.TcpState
	}
	return FlowTCPState_FLOW_TCP_STATE_INIT
}

func (m *FlowInfo) GetInQosActions() *QOSActions {
	if m != nil {
		return m.InQosActions
	}
	return nil
}

func (m *FlowInfo) GetEgQosActions() *QOSActions {
	if m != nil {
		return m.EgQosActions
	}
	return nil
}

func (m *FlowInfo) GetIngMirrorSessions() []*MirrorSessionId {
	if m != nil {
		return m.IngMirrorSessions
	}
	return nil
}

func (m *FlowInfo) GetEgrMirrorSessions() []*MirrorSessionId {
	if m != nil {
		return m.EgrMirrorSessions
	}
	return nil
}

// ConnTrackInfo contains dynamic information that was recorded due to connection tracking
type ConnTrackInfo struct {
	FlowCreateTs  uint64 `protobuf:"fixed64,1,opt,name=flow_create_ts,json=flowCreateTs,proto3" json:"flow_create_ts,omitempty"`
	FlowBytes     uint64 `protobuf:"fixed64,2,opt,name=flow_bytes,json=flowBytes,proto3" json:"flow_bytes,omitempty"`
	FlowPackets   uint32 `protobuf:"fixed32,3,opt,name=flow_packets,json=flowPackets,proto3" json:"flow_packets,omitempty"`
	ExceptionBits uint32 `protobuf:"fixed32,4,opt,name=exception_bits,json=exceptionBits,proto3" json:"exception_bits,omitempty"`
	TcpSeqNum     uint32 `protobuf:"fixed32,5,opt,name=tcp_seq_num,json=tcpSeqNum,proto3" json:"tcp_seq_num,omitempty"`
	TcpAckNum     uint32 `protobuf:"fixed32,6,opt,name=tcp_ack_num,json=tcpAckNum,proto3" json:"tcp_ack_num,omitempty"`
	TcpWinSz      uint32 `protobuf:"varint,7,opt,name=tcp_win_sz,json=tcpWinSz,proto3" json:"tcp_win_sz,omitempty"`
	TcpWinScale   uint32 `protobuf:"varint,8,opt,name=tcp_win_scale,json=tcpWinScale,proto3" json:"tcp_win_scale,omitempty"`
	TcpMss        uint32 `protobuf:"varint,9,opt,name=tcp_mss,json=tcpMss,proto3" json:"tcp_mss,omitempty"`
}

func (m *ConnTrackInfo) Reset()                    { *m = ConnTrackInfo{} }
func (m *ConnTrackInfo) String() string            { return proto.CompactTextString(m) }
func (*ConnTrackInfo) ProtoMessage()               {}
func (*ConnTrackInfo) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{8} }

func (m *ConnTrackInfo) GetFlowCreateTs() uint64 {
	if m != nil {
		return m.FlowCreateTs
	}
	return 0
}

func (m *ConnTrackInfo) GetFlowBytes() uint64 {
	if m != nil {
		return m.FlowBytes
	}
	return 0
}

func (m *ConnTrackInfo) GetFlowPackets() uint32 {
	if m != nil {
		return m.FlowPackets
	}
	return 0
}

func (m *ConnTrackInfo) GetExceptionBits() uint32 {
	if m != nil {
		return m.ExceptionBits
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpSeqNum() uint32 {
	if m != nil {
		return m.TcpSeqNum
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpAckNum() uint32 {
	if m != nil {
		return m.TcpAckNum
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpWinSz() uint32 {
	if m != nil {
		return m.TcpWinSz
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpWinScale() uint32 {
	if m != nil {
		return m.TcpWinScale
	}
	return 0
}

func (m *ConnTrackInfo) GetTcpMss() uint32 {
	if m != nil {
		return m.TcpMss
	}
	return 0
}

// FlowData captures all the flow information
type FlowData struct {
	FlowInfo      *FlowInfo      `protobuf:"bytes,1,opt,name=flow_info,json=flowInfo" json:"flow_info,omitempty"`
	ConnTrackInfo *ConnTrackInfo `protobuf:"bytes,2,opt,name=conn_track_info,json=connTrackInfo" json:"conn_track_info,omitempty"`
}

func (m *FlowData) Reset()                    { *m = FlowData{} }
func (m *FlowData) String() string            { return proto.CompactTextString(m) }
func (*FlowData) ProtoMessage()               {}
func (*FlowData) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{9} }

func (m *FlowData) GetFlowInfo() *FlowInfo {
	if m != nil {
		return m.FlowInfo
	}
	return nil
}

func (m *FlowData) GetConnTrackInfo() *ConnTrackInfo {
	if m != nil {
		return m.ConnTrackInfo
	}
	return nil
}

// FlowSpec contains all information needed to install a uni-directional flow
//   - FlowKey is the key to uniquely identify a flow
//   - FlowInfo contains flow information like counters, forwarding information,
//     NAT rewrite information etc.
//   - ConnTrackInfo contains all the information gathered so far about the flow
//     when connection tracking is enabled. In vMotion case, this will be
//     carried from old location to new location
type FlowSpec struct {
	FlowKey  *FlowKey  `protobuf:"bytes,1,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	FlowData *FlowData `protobuf:"bytes,2,opt,name=flow_data,json=flowData" json:"flow_data,omitempty"`
}

func (m *FlowSpec) Reset()                    { *m = FlowSpec{} }
func (m *FlowSpec) String() string            { return proto.CompactTextString(m) }
func (*FlowSpec) ProtoMessage()               {}
func (*FlowSpec) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{10} }

func (m *FlowSpec) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *FlowSpec) GetFlowData() *FlowData {
	if m != nil {
		return m.FlowData
	}
	return nil
}

// SessionSpec represents a full session with forward and reverse flow
// It is possible to have a session with just one flow (for L2 mcast/bcast)
type SessionSpec struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// session_id is unique session identifier
	SessionId        uint32    `protobuf:"fixed32,2,opt,name=session_id,json=sessionId,proto3" json:"key"`
	ConnTrackEn      bool      `protobuf:"varint,3,opt,name=conn_track_en,json=connTrackEn,proto3" json:"conn_track_en,omitempty"`
	TcpTsOption      bool      `protobuf:"varint,4,opt,name=tcp_ts_option,json=tcpTsOption,proto3" json:"tcp_ts_option,omitempty"`
	IflowSynAckDelta int32     `protobuf:"zigzag32,5,opt,name=iflow_syn_ack_delta,json=iflowSynAckDelta,proto3" json:"iflow_syn_ack_delta,omitempty"`
	InitiatorFlow    *FlowSpec `protobuf:"bytes,6,opt,name=initiator_flow,json=initiatorFlow" json:"initiator_flow,omitempty"`
	ResponderFlow    *FlowSpec `protobuf:"bytes,7,opt,name=responder_flow,json=responderFlow" json:"responder_flow,omitempty"`
}

func (m *SessionSpec) Reset()                    { *m = SessionSpec{} }
func (m *SessionSpec) String() string            { return proto.CompactTextString(m) }
func (*SessionSpec) ProtoMessage()               {}
func (*SessionSpec) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{11} }

func (m *SessionSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SessionSpec) GetSessionId() uint32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionSpec) GetConnTrackEn() bool {
	if m != nil {
		return m.ConnTrackEn
	}
	return false
}

func (m *SessionSpec) GetTcpTsOption() bool {
	if m != nil {
		return m.TcpTsOption
	}
	return false
}

func (m *SessionSpec) GetIflowSynAckDelta() int32 {
	if m != nil {
		return m.IflowSynAckDelta
	}
	return 0
}

func (m *SessionSpec) GetInitiatorFlow() *FlowSpec {
	if m != nil {
		return m.InitiatorFlow
	}
	return nil
}

func (m *SessionSpec) GetResponderFlow() *FlowSpec {
	if m != nil {
		return m.ResponderFlow
	}
	return nil
}

// SessionRequestMsg is batched session request message
type SessionRequestMsg struct {
	Request []*SessionSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SessionRequestMsg) Reset()                    { *m = SessionRequestMsg{} }
func (m *SessionRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionRequestMsg) ProtoMessage()               {}
func (*SessionRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{12} }

func (m *SessionRequestMsg) GetRequest() []*SessionSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// FlowStatus captures the operational status of flows
// TODO - add all the indices we allocated internally - rewrite indices,
// dst lif or mcast replication index, rtt info etc.
type FlowStatus struct {
	FlowHandle    uint64         `protobuf:"fixed64,1,opt,name=flow_handle,json=flowHandle,proto3" json:"flow_handle,omitempty"`
	ConnTrackInfo *ConnTrackInfo `protobuf:"bytes,2,opt,name=conn_track_info,json=connTrackInfo" json:"conn_track_info,omitempty"`
	FlowColl      bool           `protobuf:"varint,3,opt,name=flow_coll,json=flowColl,proto3" json:"flow_coll,omitempty"`
}

func (m *FlowStatus) Reset()                    { *m = FlowStatus{} }
func (m *FlowStatus) String() string            { return proto.CompactTextString(m) }
func (*FlowStatus) ProtoMessage()               {}
func (*FlowStatus) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{13} }

func (m *FlowStatus) GetFlowHandle() uint64 {
	if m != nil {
		return m.FlowHandle
	}
	return 0
}

func (m *FlowStatus) GetConnTrackInfo() *ConnTrackInfo {
	if m != nil {
		return m.ConnTrackInfo
	}
	return nil
}

func (m *FlowStatus) GetFlowColl() bool {
	if m != nil {
		return m.FlowColl
	}
	return false
}

// SessionStatus captures the operational status of the session
type SessionStatus struct {
	SessionHandle uint64      `protobuf:"fixed64,1,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
	IflowStatus   *FlowStatus `protobuf:"bytes,2,opt,name=iflow_status,json=iflowStatus" json:"iflow_status,omitempty"`
	RflowStatus   *FlowStatus `protobuf:"bytes,3,opt,name=rflow_status,json=rflowStatus" json:"rflow_status,omitempty"`
}

func (m *SessionStatus) Reset()                    { *m = SessionStatus{} }
func (m *SessionStatus) String() string            { return proto.CompactTextString(m) }
func (*SessionStatus) ProtoMessage()               {}
func (*SessionStatus) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{14} }

func (m *SessionStatus) GetSessionHandle() uint64 {
	if m != nil {
		return m.SessionHandle
	}
	return 0
}

func (m *SessionStatus) GetIflowStatus() *FlowStatus {
	if m != nil {
		return m.IflowStatus
	}
	return nil
}

func (m *SessionStatus) GetRflowStatus() *FlowStatus {
	if m != nil {
		return m.RflowStatus
	}
	return nil
}

// SessionResponse is the response to one SessionSpec
type SessionResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *SessionStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SessionResponse) Reset()                    { *m = SessionResponse{} }
func (m *SessionResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionResponse) ProtoMessage()               {}
func (*SessionResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{15} }

func (m *SessionResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SessionResponse) GetStatus() *SessionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SessionResponseMsg is the response to SessionRequestMsg
type SessionResponseMsg struct {
	Response []*SessionResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SessionResponseMsg) Reset()                    { *m = SessionResponseMsg{} }
func (m *SessionResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionResponseMsg) ProtoMessage()               {}
func (*SessionResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{16} }

func (m *SessionResponseMsg) GetResponse() []*SessionResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SessionDeleteRequest is used to delete a session
type SessionDeleteRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// session_handle is the handle of the session
	SessionHandle uint64 `protobuf:"fixed64,2,opt,name=session_handle,json=sessionHandle,proto3" json:"key"`
}

func (m *SessionDeleteRequest) Reset()                    { *m = SessionDeleteRequest{} }
func (m *SessionDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteRequest) ProtoMessage()               {}
func (*SessionDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{17} }

func (m *SessionDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SessionDeleteRequest) GetSessionHandle() uint64 {
	if m != nil {
		return m.SessionHandle
	}
	return 0
}

// SessionDeleteRequestMsg is batched session delete request
type SessionDeleteRequestMsg struct {
	Request []*SessionDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SessionDeleteRequestMsg) Reset()                    { *m = SessionDeleteRequestMsg{} }
func (m *SessionDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteRequestMsg) ProtoMessage()               {}
func (*SessionDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{18} }

func (m *SessionDeleteRequestMsg) GetRequest() []*SessionDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SessionDeleteResponseMsg is batched response to SessionDeleteRequestMsg
type SessionDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *SessionDeleteResponseMsg) Reset()                    { *m = SessionDeleteResponseMsg{} }
func (m *SessionDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionDeleteResponseMsg) ProtoMessage()               {}
func (*SessionDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{19} }

func (m *SessionDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// SessionGetRequest  is used to get information about a session
type SessionGetRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// session_handle is the handle of the session
	SessionHandle uint64 `protobuf:"fixed64,2,opt,name=session_handle,json=sessionHandle,proto3" json:"key"`
}

func (m *SessionGetRequest) Reset()                    { *m = SessionGetRequest{} }
func (m *SessionGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SessionGetRequest) ProtoMessage()               {}
func (*SessionGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{20} }

func (m *SessionGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SessionGetRequest) GetSessionHandle() uint64 {
	if m != nil {
		return m.SessionHandle
	}
	return 0
}

// SessionGetRequestMsg  is batched get request
type SessionGetRequestMsg struct {
	Request []*SessionGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SessionGetRequestMsg) Reset()                    { *m = SessionGetRequestMsg{} }
func (m *SessionGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionGetRequestMsg) ProtoMessage()               {}
func (*SessionGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{21} }

func (m *SessionGetRequestMsg) GetRequest() []*SessionGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// FlowStats contains all the stats collected per flow
// TODO - Srini please add all that we have in P4 for now
type FlowStats struct {
	FlowPackets   uint32 `protobuf:"fixed32,1,opt,name=flow_packets,json=flowPackets,proto3" json:"flow_packets,omitempty"`
	FlowBytes     uint64 `protobuf:"fixed64,2,opt,name=flow_bytes,json=flowBytes,proto3" json:"flow_bytes,omitempty"`
	RexmitPackets uint32 `protobuf:"fixed32,3,opt,name=rexmit_packets,json=rexmitPackets,proto3" json:"rexmit_packets,omitempty"`
}

func (m *FlowStats) Reset()                    { *m = FlowStats{} }
func (m *FlowStats) String() string            { return proto.CompactTextString(m) }
func (*FlowStats) ProtoMessage()               {}
func (*FlowStats) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{22} }

func (m *FlowStats) GetFlowPackets() uint32 {
	if m != nil {
		return m.FlowPackets
	}
	return 0
}

func (m *FlowStats) GetFlowBytes() uint64 {
	if m != nil {
		return m.FlowBytes
	}
	return 0
}

func (m *FlowStats) GetRexmitPackets() uint32 {
	if m != nil {
		return m.RexmitPackets
	}
	return 0
}

// SessionStats captures statistics of all its constituent flows
type SessionStats struct {
	FlowStats []*FlowStats `protobuf:"bytes,1,rep,name=flow_stats,json=flowStats" json:"flow_stats,omitempty"`
}

func (m *SessionStats) Reset()                    { *m = SessionStats{} }
func (m *SessionStats) String() string            { return proto.CompactTextString(m) }
func (*SessionStats) ProtoMessage()               {}
func (*SessionStats) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{23} }

func (m *SessionStats) GetFlowStats() []*FlowStats {
	if m != nil {
		return m.FlowStats
	}
	return nil
}

// SessionGetResponse is response to one SessionGetRequest
type SessionGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *SessionSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SessionStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SessionStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SessionGetResponse) Reset()                    { *m = SessionGetResponse{} }
func (m *SessionGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SessionGetResponse) ProtoMessage()               {}
func (*SessionGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{24} }

func (m *SessionGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SessionGetResponse) GetSpec() *SessionSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SessionGetResponse) GetStatus() *SessionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SessionGetResponse) GetStats() *SessionStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SesssionGetResponseMsg is batched response to SesssionGetRequestMsg
type SessionGetResponseMsg struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*SessionGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *SessionGetResponseMsg) Reset()                    { *m = SessionGetResponseMsg{} }
func (m *SessionGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionGetResponseMsg) ProtoMessage()               {}
func (*SessionGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{25} }

func (m *SessionGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SessionGetResponseMsg) GetResponse() []*SessionGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*FlowKeyL2)(nil), "session.FlowKeyL2")
	proto.RegisterType((*FlowKeyTcpUdpInfo)(nil), "session.FlowKeyTcpUdpInfo")
	proto.RegisterType((*FlowKeyICMPInfo)(nil), "session.FlowKeyICMPInfo")
	proto.RegisterType((*FlowKeyESPInfo)(nil), "session.FlowKeyESPInfo")
	proto.RegisterType((*FlowKeyV4)(nil), "session.FlowKeyV4")
	proto.RegisterType((*FlowKeyV6)(nil), "session.FlowKeyV6")
	proto.RegisterType((*FlowKey)(nil), "session.FlowKey")
	proto.RegisterType((*FlowInfo)(nil), "session.FlowInfo")
	proto.RegisterType((*ConnTrackInfo)(nil), "session.ConnTrackInfo")
	proto.RegisterType((*FlowData)(nil), "session.FlowData")
	proto.RegisterType((*FlowSpec)(nil), "session.FlowSpec")
	proto.RegisterType((*SessionSpec)(nil), "session.SessionSpec")
	proto.RegisterType((*SessionRequestMsg)(nil), "session.SessionRequestMsg")
	proto.RegisterType((*FlowStatus)(nil), "session.FlowStatus")
	proto.RegisterType((*SessionStatus)(nil), "session.SessionStatus")
	proto.RegisterType((*SessionResponse)(nil), "session.SessionResponse")
	proto.RegisterType((*SessionResponseMsg)(nil), "session.SessionResponseMsg")
	proto.RegisterType((*SessionDeleteRequest)(nil), "session.SessionDeleteRequest")
	proto.RegisterType((*SessionDeleteRequestMsg)(nil), "session.SessionDeleteRequestMsg")
	proto.RegisterType((*SessionDeleteResponseMsg)(nil), "session.SessionDeleteResponseMsg")
	proto.RegisterType((*SessionGetRequest)(nil), "session.SessionGetRequest")
	proto.RegisterType((*SessionGetRequestMsg)(nil), "session.SessionGetRequestMsg")
	proto.RegisterType((*FlowStats)(nil), "session.FlowStats")
	proto.RegisterType((*SessionStats)(nil), "session.SessionStats")
	proto.RegisterType((*SessionGetResponse)(nil), "session.SessionGetResponse")
	proto.RegisterType((*SessionGetResponseMsg)(nil), "session.SessionGetResponseMsg")
	proto.RegisterEnum("session.NatType", NatType_name, NatType_value)
	proto.RegisterEnum("session.FlowAction", FlowAction_name, FlowAction_value)
	proto.RegisterEnum("session.FlowTCPState", FlowTCPState_name, FlowTCPState_value)
	proto.RegisterEnum("session.FlowType", FlowType_name, FlowType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Session service

type SessionClient interface {
	SessionCreate(ctx context.Context, in *SessionRequestMsg, opts ...grpc.CallOption) (*SessionResponseMsg, error)
	SessionDelete(ctx context.Context, in *SessionDeleteRequestMsg, opts ...grpc.CallOption) (*SessionDeleteResponseMsg, error)
	SessionGet(ctx context.Context, in *SessionGetRequestMsg, opts ...grpc.CallOption) (*SessionGetResponseMsg, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) SessionCreate(ctx context.Context, in *SessionRequestMsg, opts ...grpc.CallOption) (*SessionResponseMsg, error) {
	out := new(SessionResponseMsg)
	err := grpc.Invoke(ctx, "/session.Session/SessionCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) SessionDelete(ctx context.Context, in *SessionDeleteRequestMsg, opts ...grpc.CallOption) (*SessionDeleteResponseMsg, error) {
	out := new(SessionDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/session.Session/SessionDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) SessionGet(ctx context.Context, in *SessionGetRequestMsg, opts ...grpc.CallOption) (*SessionGetResponseMsg, error) {
	out := new(SessionGetResponseMsg)
	err := grpc.Invoke(ctx, "/session.Session/SessionGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Session service

type SessionServer interface {
	SessionCreate(context.Context, *SessionRequestMsg) (*SessionResponseMsg, error)
	SessionDelete(context.Context, *SessionDeleteRequestMsg) (*SessionDeleteResponseMsg, error)
	SessionGet(context.Context, *SessionGetRequestMsg) (*SessionGetResponseMsg, error)
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_SessionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SessionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/SessionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SessionCreate(ctx, req.(*SessionRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_SessionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SessionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/SessionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SessionDelete(ctx, req.(*SessionDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_SessionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).SessionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Session/SessionGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).SessionGet(ctx, req.(*SessionGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionCreate",
			Handler:    _Session_SessionCreate_Handler,
		},
		{
			MethodName: "SessionDelete",
			Handler:    _Session_SessionDelete_Handler,
		},
		{
			MethodName: "SessionGet",
			Handler:    _Session_SessionGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/session.proto",
}

func (m *FlowKeyL2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyL2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Smac != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Session(dAtA, i, uint64(m.Smac))
	}
	if m.Dmac != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Session(dAtA, i, uint64(m.Dmac))
	}
	if m.L2SegmentId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.L2SegmentId))
	}
	if m.EtherType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.EtherType))
	}
	return i, nil
}

func (m *FlowKeyTcpUdpInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyTcpUdpInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sport != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Sport))
	}
	if m.Dport != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Dport))
	}
	return i, nil
}

func (m *FlowKeyICMPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyICMPInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Type))
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *FlowKeyESPInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyESPInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Spi != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Spi))
	}
	return i, nil
}

func (m *FlowKeyV4) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyV4) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sip != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Session(dAtA, i, uint32(m.Sip))
	}
	if m.Dip != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Session(dAtA, i, uint32(m.Dip))
	}
	if m.IpProto != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IpProto))
	}
	if m.L4Fields != nil {
		nn1, err := m.L4Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *FlowKeyV4_TcpUdp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcpUdp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpUdp.Size()))
		n2, err := m.TcpUdp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *FlowKeyV4_Icmp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Icmp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Icmp.Size()))
		n3, err := m.Icmp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *FlowKeyV4_Esp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Esp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Esp.Size()))
		n4, err := m.Esp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *FlowKeyV6) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKeyV6) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sip != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Sip.Size()))
		n5, err := m.Sip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Dip != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Dip.Size()))
		n6, err := m.Dip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.IpProto != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IpProto))
	}
	if m.L4Fields != nil {
		nn7, err := m.L4Fields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *FlowKeyV6_TcpUdp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcpUdp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpUdp.Size()))
		n8, err := m.TcpUdp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *FlowKeyV6_Icmp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Icmp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Icmp.Size()))
		n9, err := m.Icmp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *FlowKeyV6_Esp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Esp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Esp.Size()))
		n10, err := m.Esp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *FlowKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowKey != nil {
		nn11, err := m.FlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *FlowKey_L2Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.L2Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.L2Key.Size()))
		n12, err := m.L2Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *FlowKey_V4Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.V4Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.V4Key.Size()))
		n13, err := m.V4Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *FlowKey_V6Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.V6Key != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.V6Key.Size()))
		n14, err := m.V6Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *FlowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowAction != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowAction))
	}
	if m.NatType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatType))
	}
	if m.NatSip != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatSip.Size()))
		n15, err := m.NatSip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.NatSport != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatSport))
	}
	if m.NatDip != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatDip.Size()))
		n16, err := m.NatDip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.NatDport != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.NatDport))
	}
	if m.TcpState != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpState))
	}
	if m.InQosActions != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.InQosActions.Size()))
		n17, err := m.InQosActions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.EgQosActions != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.EgQosActions.Size()))
		n18, err := m.EgQosActions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.IngMirrorSessions) > 0 {
		for _, msg := range m.IngMirrorSessions {
			dAtA[i] = 0x52
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EgrMirrorSessions) > 0 {
		for _, msg := range m.EgrMirrorSessions {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConnTrackInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnTrackInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowCreateTs != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Session(dAtA, i, uint64(m.FlowCreateTs))
	}
	if m.FlowBytes != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Session(dAtA, i, uint64(m.FlowBytes))
	}
	if m.FlowPackets != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Session(dAtA, i, uint32(m.FlowPackets))
	}
	if m.ExceptionBits != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Session(dAtA, i, uint32(m.ExceptionBits))
	}
	if m.TcpSeqNum != 0 {
		dAtA[i] = 0x2d
		i++
		i = encodeFixed32Session(dAtA, i, uint32(m.TcpSeqNum))
	}
	if m.TcpAckNum != 0 {
		dAtA[i] = 0x35
		i++
		i = encodeFixed32Session(dAtA, i, uint32(m.TcpAckNum))
	}
	if m.TcpWinSz != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpWinSz))
	}
	if m.TcpWinScale != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpWinScale))
	}
	if m.TcpMss != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.TcpMss))
	}
	return i, nil
}

func (m *FlowData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowInfo.Size()))
		n19, err := m.FlowInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.ConnTrackInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ConnTrackInfo.Size()))
		n20, err := m.ConnTrackInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *FlowSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowKey.Size()))
		n21, err := m.FlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.FlowData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.FlowData.Size()))
		n22, err := m.FlowData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *SessionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Meta.Size()))
		n23, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.SessionId != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Session(dAtA, i, uint32(m.SessionId))
	}
	if m.ConnTrackEn {
		dAtA[i] = 0x18
		i++
		if m.ConnTrackEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TcpTsOption {
		dAtA[i] = 0x20
		i++
		if m.TcpTsOption {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IflowSynAckDelta != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64((uint32(m.IflowSynAckDelta)<<1)^uint32((m.IflowSynAckDelta>>31))))
	}
	if m.InitiatorFlow != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.InitiatorFlow.Size()))
		n24, err := m.InitiatorFlow.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.ResponderFlow != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ResponderFlow.Size()))
		n25, err := m.ResponderFlow.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *SessionRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowHandle != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Session(dAtA, i, uint64(m.FlowHandle))
	}
	if m.ConnTrackInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ConnTrackInfo.Size()))
		n26, err := m.ConnTrackInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.FlowColl {
		dAtA[i] = 0x18
		i++
		if m.FlowColl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SessionHandle != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Session(dAtA, i, uint64(m.SessionHandle))
	}
	if m.IflowStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.IflowStatus.Size()))
		n27, err := m.IflowStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.RflowStatus != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.RflowStatus.Size()))
		n28, err := m.RflowStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *SessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Status.Size()))
		n29, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *SessionResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SessionDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Meta.Size()))
		n30, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.SessionHandle != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Session(dAtA, i, uint64(m.SessionHandle))
	}
	return i, nil
}

func (m *SessionDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SessionDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA32 := make([]byte, len(m.ApiStatus)*10)
		var j31 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(j31))
		i += copy(dAtA[i:], dAtA32[:j31])
	}
	return i, nil
}

func (m *SessionGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Meta.Size()))
		n33, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.SessionHandle != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Session(dAtA, i, uint64(m.SessionHandle))
	}
	return i, nil
}

func (m *SessionGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowPackets != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Session(dAtA, i, uint32(m.FlowPackets))
	}
	if m.FlowBytes != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Session(dAtA, i, uint64(m.FlowBytes))
	}
	if m.RexmitPackets != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Session(dAtA, i, uint32(m.RexmitPackets))
	}
	return i, nil
}

func (m *SessionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FlowStats) > 0 {
		for _, msg := range m.FlowStats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SessionGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Spec.Size()))
		n34, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Status.Size()))
		n35, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Stats.Size()))
		n36, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *SessionGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Session(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Session(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSession(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FlowKeyL2) Size() (n int) {
	var l int
	_ = l
	if m.Smac != 0 {
		n += 9
	}
	if m.Dmac != 0 {
		n += 9
	}
	if m.L2SegmentId != 0 {
		n += 1 + sovSession(uint64(m.L2SegmentId))
	}
	if m.EtherType != 0 {
		n += 1 + sovSession(uint64(m.EtherType))
	}
	return n
}

func (m *FlowKeyTcpUdpInfo) Size() (n int) {
	var l int
	_ = l
	if m.Sport != 0 {
		n += 1 + sovSession(uint64(m.Sport))
	}
	if m.Dport != 0 {
		n += 1 + sovSession(uint64(m.Dport))
	}
	return n
}

func (m *FlowKeyICMPInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSession(uint64(m.Type))
	}
	if m.Code != 0 {
		n += 1 + sovSession(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovSession(uint64(m.Id))
	}
	return n
}

func (m *FlowKeyESPInfo) Size() (n int) {
	var l int
	_ = l
	if m.Spi != 0 {
		n += 1 + sovSession(uint64(m.Spi))
	}
	return n
}

func (m *FlowKeyV4) Size() (n int) {
	var l int
	_ = l
	if m.Sip != 0 {
		n += 5
	}
	if m.Dip != 0 {
		n += 5
	}
	if m.IpProto != 0 {
		n += 1 + sovSession(uint64(m.IpProto))
	}
	if m.L4Fields != nil {
		n += m.L4Fields.Size()
	}
	return n
}

func (m *FlowKeyV4_TcpUdp) Size() (n int) {
	var l int
	_ = l
	if m.TcpUdp != nil {
		l = m.TcpUdp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV4_Icmp) Size() (n int) {
	var l int
	_ = l
	if m.Icmp != nil {
		l = m.Icmp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV4_Esp) Size() (n int) {
	var l int
	_ = l
	if m.Esp != nil {
		l = m.Esp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV6) Size() (n int) {
	var l int
	_ = l
	if m.Sip != nil {
		l = m.Sip.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Dip != nil {
		l = m.Dip.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.IpProto != 0 {
		n += 1 + sovSession(uint64(m.IpProto))
	}
	if m.L4Fields != nil {
		n += m.L4Fields.Size()
	}
	return n
}

func (m *FlowKeyV6_TcpUdp) Size() (n int) {
	var l int
	_ = l
	if m.TcpUdp != nil {
		l = m.TcpUdp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV6_Icmp) Size() (n int) {
	var l int
	_ = l
	if m.Icmp != nil {
		l = m.Icmp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKeyV6_Esp) Size() (n int) {
	var l int
	_ = l
	if m.Esp != nil {
		l = m.Esp.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKey) Size() (n int) {
	var l int
	_ = l
	if m.FlowKey != nil {
		n += m.FlowKey.Size()
	}
	return n
}

func (m *FlowKey_L2Key) Size() (n int) {
	var l int
	_ = l
	if m.L2Key != nil {
		l = m.L2Key.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKey_V4Key) Size() (n int) {
	var l int
	_ = l
	if m.V4Key != nil {
		l = m.V4Key.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowKey_V6Key) Size() (n int) {
	var l int
	_ = l
	if m.V6Key != nil {
		l = m.V6Key.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}
func (m *FlowInfo) Size() (n int) {
	var l int
	_ = l
	if m.FlowAction != 0 {
		n += 1 + sovSession(uint64(m.FlowAction))
	}
	if m.NatType != 0 {
		n += 1 + sovSession(uint64(m.NatType))
	}
	if m.NatSip != nil {
		l = m.NatSip.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.NatSport != 0 {
		n += 1 + sovSession(uint64(m.NatSport))
	}
	if m.NatDip != nil {
		l = m.NatDip.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.NatDport != 0 {
		n += 1 + sovSession(uint64(m.NatDport))
	}
	if m.TcpState != 0 {
		n += 1 + sovSession(uint64(m.TcpState))
	}
	if m.InQosActions != nil {
		l = m.InQosActions.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.EgQosActions != nil {
		l = m.EgQosActions.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if len(m.IngMirrorSessions) > 0 {
		for _, e := range m.IngMirrorSessions {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	if len(m.EgrMirrorSessions) > 0 {
		for _, e := range m.EgrMirrorSessions {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *ConnTrackInfo) Size() (n int) {
	var l int
	_ = l
	if m.FlowCreateTs != 0 {
		n += 9
	}
	if m.FlowBytes != 0 {
		n += 9
	}
	if m.FlowPackets != 0 {
		n += 5
	}
	if m.ExceptionBits != 0 {
		n += 5
	}
	if m.TcpSeqNum != 0 {
		n += 5
	}
	if m.TcpAckNum != 0 {
		n += 5
	}
	if m.TcpWinSz != 0 {
		n += 1 + sovSession(uint64(m.TcpWinSz))
	}
	if m.TcpWinScale != 0 {
		n += 1 + sovSession(uint64(m.TcpWinScale))
	}
	if m.TcpMss != 0 {
		n += 1 + sovSession(uint64(m.TcpMss))
	}
	return n
}

func (m *FlowData) Size() (n int) {
	var l int
	_ = l
	if m.FlowInfo != nil {
		l = m.FlowInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ConnTrackInfo != nil {
		l = m.ConnTrackInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *FlowSpec) Size() (n int) {
	var l int
	_ = l
	if m.FlowKey != nil {
		l = m.FlowKey.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.FlowData != nil {
		l = m.FlowData.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.SessionId != 0 {
		n += 5
	}
	if m.ConnTrackEn {
		n += 2
	}
	if m.TcpTsOption {
		n += 2
	}
	if m.IflowSynAckDelta != 0 {
		n += 1 + sozSession(uint64(m.IflowSynAckDelta))
	}
	if m.InitiatorFlow != nil {
		l = m.InitiatorFlow.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ResponderFlow != nil {
		l = m.ResponderFlow.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *FlowStatus) Size() (n int) {
	var l int
	_ = l
	if m.FlowHandle != 0 {
		n += 9
	}
	if m.ConnTrackInfo != nil {
		l = m.ConnTrackInfo.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.FlowColl {
		n += 2
	}
	return n
}

func (m *SessionStatus) Size() (n int) {
	var l int
	_ = l
	if m.SessionHandle != 0 {
		n += 9
	}
	if m.IflowStatus != nil {
		l = m.IflowStatus.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.RflowStatus != nil {
		l = m.RflowStatus.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSession(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *SessionDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.SessionHandle != 0 {
		n += 9
	}
	return n
}

func (m *SessionDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *SessionDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovSession(uint64(e))
		}
		n += 1 + sovSession(uint64(l)) + l
	}
	return n
}

func (m *SessionGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.SessionHandle != 0 {
		n += 9
	}
	return n
}

func (m *SessionGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *FlowStats) Size() (n int) {
	var l int
	_ = l
	if m.FlowPackets != 0 {
		n += 5
	}
	if m.FlowBytes != 0 {
		n += 9
	}
	if m.RexmitPackets != 0 {
		n += 5
	}
	return n
}

func (m *SessionStats) Size() (n int) {
	var l int
	_ = l
	if len(m.FlowStats) > 0 {
		for _, e := range m.FlowStats {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *SessionGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSession(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovSession(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func sovSession(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSession(x uint64) (n int) {
	return sovSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowKeyL2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyL2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyL2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smac", wireType)
			}
			m.Smac = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Smac = uint64(dAtA[iNdEx-8])
			m.Smac |= uint64(dAtA[iNdEx-7]) << 8
			m.Smac |= uint64(dAtA[iNdEx-6]) << 16
			m.Smac |= uint64(dAtA[iNdEx-5]) << 24
			m.Smac |= uint64(dAtA[iNdEx-4]) << 32
			m.Smac |= uint64(dAtA[iNdEx-3]) << 40
			m.Smac |= uint64(dAtA[iNdEx-2]) << 48
			m.Smac |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmac", wireType)
			}
			m.Dmac = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Dmac = uint64(dAtA[iNdEx-8])
			m.Dmac |= uint64(dAtA[iNdEx-7]) << 8
			m.Dmac |= uint64(dAtA[iNdEx-6]) << 16
			m.Dmac |= uint64(dAtA[iNdEx-5]) << 24
			m.Dmac |= uint64(dAtA[iNdEx-4]) << 32
			m.Dmac |= uint64(dAtA[iNdEx-3]) << 40
			m.Dmac |= uint64(dAtA[iNdEx-2]) << 48
			m.Dmac |= uint64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentId", wireType)
			}
			m.L2SegmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2SegmentId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtherType", wireType)
			}
			m.EtherType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EtherType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyTcpUdpInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyTcpUdpInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyTcpUdpInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sport", wireType)
			}
			m.Sport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dport", wireType)
			}
			m.Dport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyICMPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyICMPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyICMPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyESPInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyESPInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyESPInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyV4) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyV4: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyV4: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sip", wireType)
			}
			m.Sip = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Sip = uint32(dAtA[iNdEx-4])
			m.Sip |= uint32(dAtA[iNdEx-3]) << 8
			m.Sip |= uint32(dAtA[iNdEx-2]) << 16
			m.Sip |= uint32(dAtA[iNdEx-1]) << 24
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dip", wireType)
			}
			m.Dip = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Dip = uint32(dAtA[iNdEx-4])
			m.Dip |= uint32(dAtA[iNdEx-3]) << 8
			m.Dip |= uint32(dAtA[iNdEx-2]) << 16
			m.Dip |= uint32(dAtA[iNdEx-1]) << 24
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProto", wireType)
			}
			m.IpProto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpProto |= (IPProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpUdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyTcpUdpInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV4_TcpUdp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icmp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyICMPInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV4_Icmp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Esp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyESPInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV4_Esp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKeyV6) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKeyV6: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKeyV6: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sip == nil {
				m.Sip = &IPAddress{}
			}
			if err := m.Sip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dip == nil {
				m.Dip = &IPAddress{}
			}
			if err := m.Dip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProto", wireType)
			}
			m.IpProto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpProto |= (IPProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpUdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyTcpUdpInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV6_TcpUdp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icmp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyICMPInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV6_Icmp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Esp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyESPInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Fields = &FlowKeyV6_Esp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyL2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowKey = &FlowKey_L2Key{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyV4{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowKey = &FlowKey_V4Key{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FlowKeyV6{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FlowKey = &FlowKey_V6Key{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowAction", wireType)
			}
			m.FlowAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowAction |= (FlowAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatType", wireType)
			}
			m.NatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatType |= (NatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatSip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NatSip == nil {
				m.NatSip = &IPAddress{}
			}
			if err := m.NatSip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatSport", wireType)
			}
			m.NatSport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatSport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatDip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NatDip == nil {
				m.NatDip = &IPAddress{}
			}
			if err := m.NatDip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatDport", wireType)
			}
			m.NatDport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatDport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpState", wireType)
			}
			m.TcpState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpState |= (FlowTCPState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InQosActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InQosActions == nil {
				m.InQosActions = &QOSActions{}
			}
			if err := m.InQosActions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgQosActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EgQosActions == nil {
				m.EgQosActions = &QOSActions{}
			}
			if err := m.EgQosActions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngMirrorSessions = append(m.IngMirrorSessions, &MirrorSessionId{})
			if err := m.IngMirrorSessions[len(m.IngMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EgrMirrorSessions = append(m.EgrMirrorSessions, &MirrorSessionId{})
			if err := m.EgrMirrorSessions[len(m.EgrMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnTrackInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnTrackInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnTrackInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowCreateTs", wireType)
			}
			m.FlowCreateTs = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.FlowCreateTs = uint64(dAtA[iNdEx-8])
			m.FlowCreateTs |= uint64(dAtA[iNdEx-7]) << 8
			m.FlowCreateTs |= uint64(dAtA[iNdEx-6]) << 16
			m.FlowCreateTs |= uint64(dAtA[iNdEx-5]) << 24
			m.FlowCreateTs |= uint64(dAtA[iNdEx-4]) << 32
			m.FlowCreateTs |= uint64(dAtA[iNdEx-3]) << 40
			m.FlowCreateTs |= uint64(dAtA[iNdEx-2]) << 48
			m.FlowCreateTs |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowBytes", wireType)
			}
			m.FlowBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.FlowBytes = uint64(dAtA[iNdEx-8])
			m.FlowBytes |= uint64(dAtA[iNdEx-7]) << 8
			m.FlowBytes |= uint64(dAtA[iNdEx-6]) << 16
			m.FlowBytes |= uint64(dAtA[iNdEx-5]) << 24
			m.FlowBytes |= uint64(dAtA[iNdEx-4]) << 32
			m.FlowBytes |= uint64(dAtA[iNdEx-3]) << 40
			m.FlowBytes |= uint64(dAtA[iNdEx-2]) << 48
			m.FlowBytes |= uint64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPackets", wireType)
			}
			m.FlowPackets = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.FlowPackets = uint32(dAtA[iNdEx-4])
			m.FlowPackets |= uint32(dAtA[iNdEx-3]) << 8
			m.FlowPackets |= uint32(dAtA[iNdEx-2]) << 16
			m.FlowPackets |= uint32(dAtA[iNdEx-1]) << 24
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptionBits", wireType)
			}
			m.ExceptionBits = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.ExceptionBits = uint32(dAtA[iNdEx-4])
			m.ExceptionBits |= uint32(dAtA[iNdEx-3]) << 8
			m.ExceptionBits |= uint32(dAtA[iNdEx-2]) << 16
			m.ExceptionBits |= uint32(dAtA[iNdEx-1]) << 24
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSeqNum", wireType)
			}
			m.TcpSeqNum = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.TcpSeqNum = uint32(dAtA[iNdEx-4])
			m.TcpSeqNum |= uint32(dAtA[iNdEx-3]) << 8
			m.TcpSeqNum |= uint32(dAtA[iNdEx-2]) << 16
			m.TcpSeqNum |= uint32(dAtA[iNdEx-1]) << 24
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAckNum", wireType)
			}
			m.TcpAckNum = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.TcpAckNum = uint32(dAtA[iNdEx-4])
			m.TcpAckNum |= uint32(dAtA[iNdEx-3]) << 8
			m.TcpAckNum |= uint32(dAtA[iNdEx-2]) << 16
			m.TcpAckNum |= uint32(dAtA[iNdEx-1]) << 24
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpWinSz", wireType)
			}
			m.TcpWinSz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpWinSz |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpWinScale", wireType)
			}
			m.TcpWinScale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpWinScale |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpMss", wireType)
			}
			m.TcpMss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpMss |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowInfo == nil {
				m.FlowInfo = &FlowInfo{}
			}
			if err := m.FlowInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnTrackInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnTrackInfo == nil {
				m.ConnTrackInfo = &ConnTrackInfo{}
			}
			if err := m.ConnTrackInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowKey == nil {
				m.FlowKey = &FlowKey{}
			}
			if err := m.FlowKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowData == nil {
				m.FlowData = &FlowData{}
			}
			if err := m.FlowData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.SessionId = uint32(dAtA[iNdEx-4])
			m.SessionId |= uint32(dAtA[iNdEx-3]) << 8
			m.SessionId |= uint32(dAtA[iNdEx-2]) << 16
			m.SessionId |= uint32(dAtA[iNdEx-1]) << 24
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnTrackEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConnTrackEn = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpTsOption", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TcpTsOption = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflowSynAckDelta", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.IflowSynAckDelta = v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitiatorFlow == nil {
				m.InitiatorFlow = &FlowSpec{}
			}
			if err := m.InitiatorFlow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponderFlow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponderFlow == nil {
				m.ResponderFlow = &FlowSpec{}
			}
			if err := m.ResponderFlow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SessionSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowHandle", wireType)
			}
			m.FlowHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.FlowHandle = uint64(dAtA[iNdEx-8])
			m.FlowHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.FlowHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.FlowHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.FlowHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.FlowHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.FlowHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.FlowHandle |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnTrackInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnTrackInfo == nil {
				m.ConnTrackInfo = &ConnTrackInfo{}
			}
			if err := m.ConnTrackInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowColl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowColl = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			m.SessionHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.SessionHandle = uint64(dAtA[iNdEx-8])
			m.SessionHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.SessionHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.SessionHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.SessionHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.SessionHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.SessionHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.SessionHandle |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IflowStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IflowStatus == nil {
				m.IflowStatus = &FlowStatus{}
			}
			if err := m.IflowStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RflowStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RflowStatus == nil {
				m.RflowStatus = &FlowStatus{}
			}
			if err := m.RflowStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SessionStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SessionResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			m.SessionHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.SessionHandle = uint64(dAtA[iNdEx-8])
			m.SessionHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.SessionHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.SessionHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.SessionHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.SessionHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.SessionHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.SessionHandle |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SessionDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSession
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSession
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSession
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSession
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			m.SessionHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.SessionHandle = uint64(dAtA[iNdEx-8])
			m.SessionHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.SessionHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.SessionHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.SessionHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.SessionHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.SessionHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.SessionHandle |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SessionGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowPackets", wireType)
			}
			m.FlowPackets = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.FlowPackets = uint32(dAtA[iNdEx-4])
			m.FlowPackets |= uint32(dAtA[iNdEx-3]) << 8
			m.FlowPackets |= uint32(dAtA[iNdEx-2]) << 16
			m.FlowPackets |= uint32(dAtA[iNdEx-1]) << 24
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowBytes", wireType)
			}
			m.FlowBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.FlowBytes = uint64(dAtA[iNdEx-8])
			m.FlowBytes |= uint64(dAtA[iNdEx-7]) << 8
			m.FlowBytes |= uint64(dAtA[iNdEx-6]) << 16
			m.FlowBytes |= uint64(dAtA[iNdEx-5]) << 24
			m.FlowBytes |= uint64(dAtA[iNdEx-4]) << 32
			m.FlowBytes |= uint64(dAtA[iNdEx-3]) << 40
			m.FlowBytes |= uint64(dAtA[iNdEx-2]) << 48
			m.FlowBytes |= uint64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RexmitPackets", wireType)
			}
			m.RexmitPackets = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.RexmitPackets = uint32(dAtA[iNdEx-4])
			m.RexmitPackets |= uint32(dAtA[iNdEx-3]) << 8
			m.RexmitPackets |= uint32(dAtA[iNdEx-2]) << 16
			m.RexmitPackets |= uint32(dAtA[iNdEx-1]) << 24
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowStats = append(m.FlowStats, &FlowStats{})
			if err := m.FlowStats[len(m.FlowStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SessionSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SessionStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SessionStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SessionGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSession
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSession
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSession(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSession = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSession   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nic/proto/hal/session.proto", fileDescriptorSession) }

var fileDescriptorSession = []byte{
	// 1897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x4f, 0x73, 0x1b, 0x4b,
	0x11, 0xf7, 0x4a, 0xb6, 0x24, 0xb7, 0x2c, 0x7b, 0x3d, 0xb6, 0x9f, 0x85, 0x8d, 0x9d, 0x64, 0x8b,
	0x50, 0x21, 0x01, 0xa7, 0x10, 0x7e, 0x7e, 0x9c, 0xa0, 0x64, 0x49, 0x79, 0x56, 0x22, 0x4b, 0x7a,
	0xb3, 0x4b, 0x52, 0x79, 0x97, 0xad, 0xcd, 0x6a, 0xac, 0xec, 0xf3, 0x6a, 0x77, 0xad, 0x19, 0x27,
	0x4f, 0xb9, 0x71, 0xe5, 0x13, 0x70, 0xe0, 0xc4, 0x81, 0xaf, 0x40, 0x51, 0x7c, 0x00, 0x38, 0x70,
	0xe0, 0x13, 0x50, 0x54, 0xb8, 0xf1, 0x19, 0x5e, 0x51, 0xd4, 0xf4, 0x8c, 0x56, 0x7f, 0x2c, 0x27,
	0xaf, 0xa0, 0xb8, 0x70, 0x9b, 0xe9, 0xfe, 0x75, 0x4f, 0x4f, 0xf7, 0xaf, 0x7b, 0x56, 0x82, 0xfd,
	0x28, 0xf0, 0x1f, 0x27, 0xc3, 0x58, 0xc4, 0x8f, 0x5f, 0x7b, 0xe1, 0x63, 0xce, 0x38, 0x0f, 0xe2,
	0xe8, 0x08, 0x25, 0x24, 0xaf, 0xb7, 0x7b, 0x3b, 0x13, 0x94, 0x18, 0x25, 0x8c, 0x2b, 0xfd, 0xde,
	0xee, 0xac, 0xf1, 0x55, 0x3c, 0x56, 0x1c, 0xcc, 0x2a, 0x04, 0x0b, 0xd9, 0x80, 0x89, 0xe1, 0x48,
	0xa9, 0xad, 0x37, 0xb0, 0xfa, 0x24, 0x8c, 0xdf, 0x3e, 0x63, 0xa3, 0x56, 0x85, 0x10, 0x58, 0xe6,
	0x03, 0xcf, 0x2f, 0x1b, 0x77, 0x8d, 0x07, 0x39, 0x8a, 0x6b, 0x29, 0xeb, 0x49, 0x59, 0x46, 0xc9,
	0xe4, 0x9a, 0x58, 0x50, 0x0a, 0x2b, 0x2e, 0x67, 0xfd, 0x01, 0x8b, 0x84, 0x1b, 0xf4, 0xca, 0xd9,
	0xbb, 0xc6, 0x83, 0x12, 0x2d, 0x86, 0x15, 0x5b, 0xc9, 0x9a, 0x3d, 0x72, 0x00, 0xc0, 0xc4, 0x6b,
	0x36, 0x74, 0x65, 0x94, 0xe5, 0x65, 0x04, 0xac, 0xa2, 0xc4, 0x19, 0x25, 0xcc, 0xfa, 0x39, 0x6c,
	0xea, 0x73, 0x1d, 0x3f, 0xf9, 0x45, 0x2f, 0x69, 0x46, 0x17, 0x31, 0xd9, 0x86, 0x15, 0x9e, 0xc4,
	0x43, 0x81, 0x01, 0x94, 0xa8, 0xda, 0x48, 0x69, 0x0f, 0xa5, 0x19, 0x25, 0xc5, 0x8d, 0xd5, 0x84,
	0x0d, 0xed, 0xa0, 0x59, 0x3b, 0xef, 0xa2, 0x39, 0x81, 0x65, 0x3c, 0x4c, 0x59, 0xe3, 0x5a, 0xca,
	0xfc, 0xb8, 0xc7, 0xb4, 0x2d, 0xae, 0xc9, 0x3a, 0x64, 0xd2, 0x98, 0x33, 0x41, 0xcf, 0xb2, 0x60,
	0x5d, 0xbb, 0x6a, 0xd8, 0xca, 0x93, 0x09, 0x59, 0x9e, 0x04, 0xda, 0x91, 0x5c, 0x5a, 0xff, 0x32,
	0xd2, 0x44, 0x3d, 0x3f, 0x46, 0x7d, 0x90, 0xa0, 0x3e, 0x4f, 0xe5, 0x52, 0x4a, 0x7a, 0x41, 0x82,
	0xc7, 0xe4, 0xa9, 0x5c, 0x92, 0x1f, 0x42, 0x21, 0x48, 0x5c, 0xcc, 0x32, 0x9e, 0xb5, 0x5e, 0xd9,
	0x3c, 0x52, 0x15, 0x6b, 0x76, 0xbb, 0x52, 0xea, 0xc7, 0x21, 0xcd, 0x07, 0x09, 0xae, 0xc9, 0xa7,
	0x90, 0x17, 0x7e, 0xe2, 0x5e, 0xf7, 0x12, 0xcc, 0x55, 0xb1, 0xb2, 0x77, 0x34, 0x26, 0xc0, 0x8d,
	0x3c, 0x9d, 0x2d, 0xd1, 0x9c, 0xc0, 0x1d, 0x39, 0x82, 0xe5, 0xc0, 0x1f, 0x24, 0xe5, 0x15, 0xb4,
	0x29, 0xcf, 0xdb, 0x8c, 0x53, 0x73, 0xb6, 0x44, 0x11, 0x47, 0x1e, 0x41, 0x96, 0xf1, 0xa4, 0x9c,
	0x43, 0xf8, 0xee, 0x3c, 0x5c, 0x5f, 0xff, 0x6c, 0x89, 0x4a, 0xd4, 0x69, 0x11, 0x56, 0xc3, 0x63,
	0xf7, 0x22, 0x60, 0x61, 0x8f, 0x5b, 0xbf, 0xcd, 0x4c, 0x12, 0x70, 0x42, 0xac, 0x49, 0x02, 0x8a,
	0x15, 0x33, 0xbd, 0x57, 0xb5, 0xd7, 0x1b, 0x32, 0xce, 0x55, 0x4a, 0xac, 0x49, 0x4a, 0x16, 0x62,
	0xfe, 0x0f, 0x93, 0xf4, 0x1b, 0x03, 0xf2, 0x1a, 0x46, 0x1e, 0x41, 0x2e, 0xac, 0xb8, 0x97, 0x6c,
	0xa4, 0xb3, 0x44, 0xe6, 0x1d, 0xb5, 0x2a, 0x67, 0x4b, 0x74, 0x25, 0xac, 0x68, 0xf0, 0x9b, 0x63,
	0x04, 0x67, 0x16, 0x83, 0x9f, 0x1f, 0x4b, 0xf0, 0x9b, 0xe3, 0x31, 0xf8, 0x04, 0xc1, 0xd9, 0x5b,
	0xc0, 0x27, 0x08, 0x3e, 0x79, 0xc6, 0x46, 0xa7, 0x00, 0x85, 0x8b, 0x30, 0x7e, 0x2b, 0xe1, 0xd6,
	0xef, 0x97, 0xa1, 0x20, 0x21, 0xc8, 0xf1, 0x63, 0x28, 0xa2, 0xc2, 0xf3, 0x45, 0x10, 0x47, 0x18,
	0xe4, 0x7a, 0x65, 0x6b, 0xc6, 0x55, 0x15, 0x55, 0x14, 0x2e, 0xd2, 0x35, 0x79, 0x04, 0x85, 0xc8,
	0x13, 0xaa, 0xa9, 0x33, 0x68, 0x62, 0xa6, 0x26, 0x6d, 0x4f, 0xc8, 0xde, 0xa6, 0xf9, 0x48, 0x2d,
	0xc8, 0x0f, 0x40, 0x2e, 0x5d, 0xc9, 0x94, 0xec, 0x2d, 0x2c, 0xc8, 0x45, 0x9e, 0xb0, 0x83, 0x84,
	0xec, 0xc3, 0x2a, 0x42, 0xb1, 0xd1, 0xd5, 0xb4, 0x90, 0x07, 0xd9, 0x38, 0x01, 0xb4, 0x1f, 0xc9,
	0xa6, 0x95, 0x0f, 0xf8, 0xa9, 0x4f, 0xfc, 0xa8, 0x81, 0x91, 0x4b, 0xfd, 0xd4, 0xd1, 0x4f, 0x05,
	0x56, 0x25, 0x7f, 0xb8, 0xf0, 0x04, 0x2b, 0xe7, 0x31, 0xfa, 0x9d, 0x99, 0x0b, 0x3b, 0xb5, 0xae,
	0x2d, 0x95, 0xb4, 0x20, 0xfc, 0x04, 0x57, 0xe4, 0x53, 0x58, 0x0f, 0x22, 0xf7, 0x2a, 0xe6, 0x3a,
	0x51, 0xbc, 0x5c, 0xc0, 0x10, 0x36, 0x8e, 0xe4, 0x8c, 0xfd, 0xa2, 0x63, 0xab, 0xc4, 0x70, 0xba,
	0x16, 0x44, 0x5f, 0xc4, 0x5c, 0xef, 0xa4, 0x19, 0xeb, 0xcf, 0x98, 0xad, 0xde, 0x62, 0xc6, 0xfa,
	0x53, 0x66, 0x4f, 0x61, 0x2b, 0x88, 0xfa, 0xee, 0x20, 0x18, 0x0e, 0xe3, 0xa1, 0xab, 0x43, 0xe3,
	0x65, 0xb8, 0x9b, 0x45, 0xb6, 0x4f, 0xa6, 0xf7, 0x39, 0x22, 0x6c, 0x05, 0x68, 0xf6, 0xe8, 0x66,
	0x10, 0xf5, 0x67, 0x64, 0xe8, 0x8b, 0xf5, 0x87, 0x37, 0x7c, 0x15, 0x3f, 0xee, 0x8b, 0xf5, 0x87,
	0xb3, 0xbe, 0xac, 0x3f, 0x64, 0xa0, 0x54, 0x8b, 0xa3, 0xc8, 0x19, 0x7a, 0xfe, 0x25, 0xd2, 0xe7,
	0x7b, 0xb0, 0x8e, 0xf4, 0xf1, 0x87, 0xcc, 0x13, 0xcc, 0x15, 0x5c, 0xbf, 0x1a, 0x6b, 0x52, 0x5a,
	0x43, 0xa1, 0xc3, 0xe5, 0x2b, 0x80, 0xa8, 0x57, 0x23, 0xc1, 0xb8, 0x7e, 0x43, 0x56, 0xa5, 0xe4,
	0x54, 0x0a, 0xc8, 0x3d, 0x40, 0xb8, 0x9b, 0x78, 0xfe, 0x25, 0x13, 0x1c, 0x59, 0x92, 0xa7, 0xc8,
	0xcb, 0xae, 0x12, 0x91, 0xfb, 0xb0, 0xce, 0xbe, 0xf6, 0x59, 0x22, 0xf3, 0xe3, 0xbe, 0x0a, 0x04,
	0x47, 0x76, 0xe4, 0x69, 0x29, 0x95, 0x9e, 0x06, 0x82, 0x93, 0x43, 0x28, 0x62, 0x69, 0xd9, 0x95,
	0x1b, 0x5d, 0x0f, 0x90, 0x26, 0x79, 0x2a, 0xab, 0x6d, 0xb3, 0xab, 0xf6, 0xf5, 0x60, 0xac, 0xf7,
	0xfc, 0x4b, 0xd4, 0xe7, 0x52, 0x7d, 0xd5, 0xbf, 0x94, 0xfa, 0xef, 0x02, 0x48, 0xfd, 0xdb, 0x20,
	0x72, 0xf9, 0x3b, 0xe4, 0x46, 0x09, 0x49, 0xf0, 0x22, 0x88, 0xec, 0x77, 0xf2, 0xc1, 0x4b, 0xb5,
	0xbe, 0x17, 0x32, 0xe4, 0x40, 0x89, 0x16, 0x35, 0x40, 0x8a, 0xc8, 0xae, 0x1a, 0x4e, 0x03, 0xae,
	0x4a, 0x5d, 0xc2, 0xf1, 0x73, 0xce, 0xb9, 0xf5, 0x4e, 0x35, 0x5d, 0xdd, 0x13, 0x1e, 0x39, 0x02,
	0xbc, 0xbd, 0x1b, 0x44, 0x17, 0xb1, 0x9e, 0x0b, 0x9b, 0x33, 0x0c, 0x94, 0xb9, 0xa5, 0xd8, 0xb1,
	0x98, 0xe5, 0x9f, 0xc1, 0x86, 0x1f, 0x47, 0x91, 0x2b, 0x64, 0xde, 0x95, 0x95, 0x1a, 0x10, 0x9f,
	0xa4, 0x56, 0x33, 0x65, 0xa1, 0x25, 0x7f, 0x7a, 0x6b, 0xf5, 0xd5, 0xd9, 0x76, 0xc2, 0x7c, 0xd9,
	0xba, 0xe3, 0x49, 0x90, 0x0e, 0xee, 0xb9, 0xc1, 0x41, 0xf3, 0x17, 0x7a, 0x7a, 0x8d, 0x03, 0xed,
	0x79, 0xc2, 0xd3, 0x47, 0xce, 0x06, 0x2a, 0xaf, 0xa3, 0x02, 0x95, 0x2b, 0xeb, 0x4f, 0x19, 0x28,
	0x6a, 0xb6, 0xe0, 0x61, 0xf7, 0x61, 0x79, 0xc0, 0x84, 0x97, 0xde, 0x51, 0xf5, 0x6b, 0xe7, 0xd5,
	0x57, 0xcc, 0x17, 0xe7, 0x4c, 0x78, 0x14, 0xd5, 0xe4, 0xfb, 0x00, 0xda, 0xa9, 0xfc, 0x8c, 0xc0,
	0xd7, 0xf3, 0x34, 0xff, 0xcf, 0xbf, 0xdd, 0xc9, 0x5e, 0xb2, 0x11, 0x5d, 0xe5, 0x63, 0x4a, 0xca,
	0x02, 0x4c, 0xe5, 0x81, 0x45, 0xc8, 0x94, 0x02, 0x2d, 0xa6, 0xb7, 0x6d, 0x44, 0xe3, 0x22, 0x09,
	0xee, 0xc6, 0xc8, 0x0b, 0x24, 0x4a, 0x01, 0x8b, 0xe4, 0xf0, 0x0e, 0x8a, 0xc8, 0x8f, 0x60, 0x2b,
	0xc0, 0x7b, 0xf1, 0x51, 0x84, 0x64, 0xe8, 0xb1, 0x50, 0x78, 0x48, 0x97, 0x4d, 0x6a, 0xa2, 0xca,
	0x1e, 0x45, 0x55, 0xff, 0xb2, 0x2e, 0xe5, 0xe4, 0xa7, 0xb2, 0xf9, 0x03, 0x11, 0x78, 0x22, 0x1e,
	0xba, 0x52, 0xa9, 0x1f, 0x85, 0xd9, 0x54, 0xc8, 0x0b, 0xd3, 0x52, 0x0a, 0x94, 0x22, 0x69, 0x39,
	0x64, 0x3c, 0x89, 0xa3, 0x1e, 0xd3, 0x96, 0xf9, 0x5b, 0x2d, 0x53, 0xa0, 0x14, 0x59, 0x35, 0xd8,
	0xd4, 0x89, 0xa4, 0xec, 0xea, 0x9a, 0x71, 0x71, 0xce, 0xfb, 0xe4, 0x08, 0xf2, 0x43, 0xb5, 0x2b,
	0x1b, 0xd8, 0xbf, 0xdb, 0xa9, 0x9f, 0xa9, 0xac, 0xd3, 0x31, 0xc8, 0xfa, 0x95, 0x01, 0x80, 0x07,
	0x08, 0x4f, 0x5c, 0x73, 0x72, 0x47, 0xcf, 0xfa, 0xd7, 0x5e, 0xd4, 0x0b, 0x99, 0xee, 0x54, 0xec,
	0xcc, 0x33, 0x94, 0xfc, 0xb7, 0x3c, 0x93, 0x63, 0x57, 0x4d, 0x83, 0x38, 0x0c, 0x75, 0x6d, 0x90,
	0x1b, 0xb5, 0x38, 0x0c, 0xad, 0xdf, 0x19, 0x50, 0x1a, 0x47, 0xa9, 0xe2, 0xb9, 0x0f, 0xeb, 0xe3,
	0xb2, 0xcf, 0x84, 0x54, 0xd2, 0x52, 0x1d, 0xd5, 0x09, 0xac, 0xe9, 0x6a, 0xa1, 0x99, 0x0e, 0x69,
	0xf6, 0x8d, 0x52, 0x1e, 0x69, 0x51, 0xd5, 0x4e, 0xb9, 0x3f, 0x81, 0xb5, 0xe1, 0xb4, 0x5d, 0xf6,
	0x03, 0x76, 0xc3, 0x89, 0x9d, 0x35, 0x84, 0x8d, 0x34, 0xf5, 0xb2, 0x24, 0x9c, 0x91, 0xc7, 0x00,
	0x5e, 0x12, 0x8c, 0x1d, 0x19, 0xfa, 0xc5, 0x53, 0x6c, 0xae, 0x26, 0x81, 0xf6, 0xb2, 0xea, 0x8d,
	0x97, 0xe4, 0x08, 0x72, 0x33, 0xd1, 0x7e, 0x72, 0xa3, 0x50, 0xca, 0x44, 0xa3, 0xac, 0xa7, 0x40,
	0xe6, 0xce, 0x94, 0xf5, 0x3e, 0x86, 0xc2, 0x50, 0x6f, 0x75, 0xc1, 0xcb, 0xf3, 0x7e, 0xc6, 0x70,
	0x9a, 0x22, 0xad, 0x01, 0x6c, 0x6b, 0x65, 0x9d, 0x85, 0x4c, 0x30, 0x4d, 0xa0, 0x6f, 0xdb, 0x8c,
	0x47, 0x37, 0xaa, 0x82, 0x03, 0x7b, 0xd2, 0x90, 0xb3, 0xe5, 0xb1, 0x28, 0xec, 0x2e, 0x3a, 0x4e,
	0xc6, 0xff, 0xd9, 0x3c, 0x5f, 0x0f, 0xe6, 0xc3, 0x9f, 0x31, 0x99, 0x10, 0xf7, 0x19, 0x94, 0xe7,
	0x00, 0x93, 0xa4, 0xcc, 0xd7, 0x22, 0xfb, 0x91, 0x5a, 0x58, 0x5f, 0xa5, 0xad, 0xf4, 0x39, 0x13,
	0xff, 0xe3, 0x64, 0xb4, 0xd2, 0xdc, 0x4f, 0xce, 0x52, 0x95, 0x9c, 0xcb, 0xc4, 0xde, 0x7c, 0x26,
	0x26, 0xf8, 0x49, 0x1a, 0x84, 0xfa, 0xd8, 0x96, 0xf7, 0xb8, 0xf9, 0x4a, 0x1a, 0x37, 0x5f, 0xc9,
	0x8f, 0xbc, 0xb3, 0xf7, 0xe5, 0x34, 0xfa, 0x7a, 0x10, 0x88, 0xb9, 0x97, 0xb6, 0xa4, 0xa4, 0xda,
	0x8b, 0x55, 0x85, 0xb5, 0x29, 0x92, 0x72, 0xf2, 0x63, 0xed, 0x55, 0x66, 0x9c, 0xeb, 0xf0, 0xc9,
	0x8d, 0x2e, 0xe2, 0xea, 0x24, 0x5c, 0x5a, 0x7f, 0x31, 0x52, 0x3e, 0xe3, 0xbd, 0xfe, 0xd3, 0x36,
	0x7a, 0x00, 0xcb, 0x3c, 0x61, 0xbe, 0x6e, 0xa2, 0xc5, 0xd3, 0x0e, 0x11, 0x53, 0x0d, 0x97, 0xfd,
	0x36, 0x0d, 0x47, 0x1e, 0xc1, 0x8a, 0xba, 0x8f, 0xfa, 0x09, 0xb1, 0xb3, 0x08, 0xce, 0xa9, 0xc2,
	0x58, 0xbf, 0x34, 0x60, 0xe7, 0xe6, 0x75, 0x16, 0x91, 0xf1, 0xa3, 0x37, 0xfa, 0x6c, 0xaa, 0xa5,
	0x33, 0x98, 0xca, 0xfd, 0x85, 0x4c, 0x98, 0xef, 0xea, 0x87, 0x5f, 0x42, 0x5e, 0x7f, 0x59, 0x93,
	0x4d, 0x28, 0xb5, 0xab, 0x8e, 0xeb, 0xbc, 0xec, 0x36, 0xdc, 0x76, 0xa7, 0xdd, 0x30, 0x97, 0x66,
	0x44, 0x76, 0xbb, 0xea, 0x98, 0xc6, 0x8c, 0xa8, 0x2e, 0x45, 0x19, 0xf2, 0x09, 0x90, 0x54, 0xe4,
	0xbc, 0x68, 0xd6, 0x1a, 0xae, 0x94, 0x67, 0x1f, 0x76, 0xd4, 0x33, 0xa1, 0x3f, 0xee, 0xb7, 0xc1,
	0x7c, 0xd2, 0xea, 0xbc, 0x70, 0xab, 0x35, 0xa7, 0xd9, 0x69, 0x8f, 0x4f, 0xd8, 0x81, 0xcd, 0x69,
	0x69, 0xb5, 0xd5, 0xea, 0xbc, 0x30, 0x8d, 0x79, 0x70, 0x9d, 0x76, 0xba, 0x66, 0xe6, 0xe1, 0x37,
	0x06, 0xac, 0x4d, 0x7f, 0x49, 0x93, 0x5d, 0xd8, 0x42, 0x98, 0x53, 0xeb, 0xba, 0xb6, 0x53, 0x75,
	0x1a, 0x6e, 0xb3, 0xdd, 0x74, 0xcc, 0x25, 0xb2, 0x0f, 0xbb, 0x73, 0x0a, 0xfb, 0x65, 0xdb, 0xa5,
	0xb5, 0xe7, 0x75, 0xd3, 0x58, 0xa0, 0xac, 0xd6, 0x9e, 0x29, 0x65, 0x86, 0xdc, 0x81, 0xfd, 0x05,
	0x96, 0x29, 0x20, 0x4b, 0x0e, 0x61, 0x6f, 0x0e, 0xd0, 0xb0, 0x9d, 0xea, 0x69, 0xab, 0x69, 0x9f,
	0x35, 0xea, 0xe6, 0xf2, 0x02, 0xef, 0x4f, 0x9a, 0xfa, 0xe8, 0x15, 0x72, 0x0f, 0x0e, 0xe6, 0x94,
	0xa7, 0xcd, 0x7a, 0x93, 0x4e, 0x20, 0x39, 0x52, 0x86, 0xed, 0x39, 0x08, 0x6d, 0xd8, 0x0d, 0xc7,
	0xcc, 0x3f, 0xfc, 0xa3, 0xa1, 0x3e, 0xb8, 0x1c, 0xf5, 0xdf, 0xc3, 0xba, 0x82, 0x4d, 0x95, 0xeb,
	0x3b, 0xb0, 0x33, 0x91, 0xd5, 0x5a, 0x55, 0xdb, 0x6e, 0xd6, 0xdc, 0x76, 0xb3, 0x66, 0x1a, 0xb3,
	0x70, 0x5a, 0x3f, 0xaf, 0x9a, 0x99, 0x34, 0xc9, 0xaa, 0x70, 0xb5, 0xae, 0xd3, 0xb2, 0xcd, 0x2c,
	0xd9, 0x82, 0x8d, 0x89, 0xb4, 0xd9, 0xb5, 0x1b, 0x35, 0x73, 0x59, 0x56, 0x7d, 0xea, 0xb4, 0x7a,
	0xc3, 0x5c, 0x49, 0x2b, 0xa7, 0xc8, 0xe1, 0x74, 0x68, 0xf5, 0xf3, 0x86, 0x99, 0x9b, 0x94, 0x04,
	0x9d, 0x36, 0x5a, 0x8d, 0xf3, 0x86, 0x43, 0x5f, 0x9a, 0xf9, 0xca, 0x37, 0x06, 0xe4, 0x35, 0x15,
	0xc9, 0xd3, 0xf4, 0xcd, 0x56, 0x1f, 0xf3, 0x64, 0xef, 0xe6, 0x03, 0x34, 0x1e, 0x72, 0x7b, 0xfb,
	0xb7, 0x3d, 0x4e, 0xe7, 0xbc, 0x6f, 0x2d, 0x91, 0xe7, 0xa9, 0x2f, 0x35, 0xd4, 0xc9, 0xdd, 0x0f,
	0xbe, 0x06, 0xd2, 0xe3, 0xbd, 0xdb, 0x10, 0xd3, 0x7e, 0xcf, 0x01, 0x26, 0x9d, 0x43, 0x0e, 0x6e,
	0x1f, 0xac, 0xd2, 0xe3, 0xe1, 0x07, 0xba, 0x0d, 0xdd, 0x9d, 0xee, 0xfd, 0xf9, 0xfd, 0xa1, 0xf1,
	0xd7, 0xf7, 0x87, 0xc6, 0xdf, 0xdf, 0x1f, 0x1a, 0xbf, 0xfe, 0xc7, 0xe1, 0xd2, 0x97, 0x85, 0xd7,
	0x5e, 0x88, 0x7f, 0x4e, 0x74, 0x97, 0x5e, 0xe5, 0x70, 0xf1, 0x93, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x07, 0xe9, 0xd1, 0xa6, 0xa7, 0x13, 0x00, 0x00,
}
