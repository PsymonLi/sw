// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: barco_rings.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetOpaqueTagAddrRequest struct {
	RingType BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
}

func (m *GetOpaqueTagAddrRequest) Reset()         { *m = GetOpaqueTagAddrRequest{} }
func (m *GetOpaqueTagAddrRequest) String() string { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrRequest) ProtoMessage()    {}
func (*GetOpaqueTagAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{0}
}

func (m *GetOpaqueTagAddrRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

type GetOpaqueTagAddrRequestMsg struct {
	Request []*GetOpaqueTagAddrRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GetOpaqueTagAddrRequestMsg) Reset()         { *m = GetOpaqueTagAddrRequestMsg{} }
func (m *GetOpaqueTagAddrRequestMsg) String() string { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrRequestMsg) ProtoMessage()    {}
func (*GetOpaqueTagAddrRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{1}
}

func (m *GetOpaqueTagAddrRequestMsg) GetRequest() []*GetOpaqueTagAddrRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type GetOpaqueTagAddrResponse struct {
	OpaqueTagAddr uint64    `protobuf:"varint,1,opt,name=opaque_tag_addr,json=opaqueTagAddr,proto3" json:"opaque_tag_addr,omitempty"`
	ApiStatus     ApiStatus `protobuf:"varint,2,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *GetOpaqueTagAddrResponse) Reset()         { *m = GetOpaqueTagAddrResponse{} }
func (m *GetOpaqueTagAddrResponse) String() string { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrResponse) ProtoMessage()    {}
func (*GetOpaqueTagAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{2}
}

func (m *GetOpaqueTagAddrResponse) GetOpaqueTagAddr() uint64 {
	if m != nil {
		return m.OpaqueTagAddr
	}
	return 0
}

func (m *GetOpaqueTagAddrResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type GetOpaqueTagAddrResponseMsg struct {
	Response []*GetOpaqueTagAddrResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GetOpaqueTagAddrResponseMsg) Reset()         { *m = GetOpaqueTagAddrResponseMsg{} }
func (m *GetOpaqueTagAddrResponseMsg) String() string { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrResponseMsg) ProtoMessage()    {}
func (*GetOpaqueTagAddrResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{3}
}

func (m *GetOpaqueTagAddrResponseMsg) GetResponse() []*GetOpaqueTagAddrResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// BarcoGetReqDescrEntryRequest - get request descriptor entry from a barco ring slot
type BarcoGetReqDescrEntryRequest struct {
	RingType  BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
	SlotIndex uint32     `protobuf:"varint,2,opt,name=slot_index,json=slotIndex,proto3" json:"slot_index,omitempty"`
}

func (m *BarcoGetReqDescrEntryRequest) Reset()         { *m = BarcoGetReqDescrEntryRequest{} }
func (m *BarcoGetReqDescrEntryRequest) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryRequest) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{4}
}

func (m *BarcoGetReqDescrEntryRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetReqDescrEntryRequest) GetSlotIndex() uint32 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

// BarcoGetReqDescrEntryRequestMsg is batched GET requests for barco rings
type BarcoGetReqDescrEntryRequestMsg struct {
	Request []*BarcoGetReqDescrEntryRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BarcoGetReqDescrEntryRequestMsg) Reset()         { *m = BarcoGetReqDescrEntryRequestMsg{} }
func (m *BarcoGetReqDescrEntryRequestMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryRequestMsg) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{5}
}

func (m *BarcoGetReqDescrEntryRequestMsg) GetRequest() []*BarcoGetReqDescrEntryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// Required fields of the Barco Symmetric crypto Request descriptor
type BarcoSymmReqDescrMsg struct {
	IlistAddr          uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr,proto3" json:"ilist_addr,omitempty"`
	OlistAddr          uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr,proto3" json:"olist_addr,omitempty"`
	Command            uint32 `protobuf:"varint,3,opt,name=command,proto3" json:"command,omitempty"`
	KeyDescIndex       uint32 `protobuf:"varint,4,opt,name=key_desc_index,json=keyDescIndex,proto3" json:"key_desc_index,omitempty"`
	IvAddr             uint64 `protobuf:"fixed64,5,opt,name=iv_addr,json=ivAddr,proto3" json:"iv_addr,omitempty"`
	StatusAddr         uint64 `protobuf:"fixed64,6,opt,name=status_addr,json=statusAddr,proto3" json:"status_addr,omitempty"`
	DoorbellAddr       uint64 `protobuf:"fixed64,7,opt,name=doorbell_addr,json=doorbellAddr,proto3" json:"doorbell_addr,omitempty"`
	DoorbellData       uint64 `protobuf:"fixed64,8,opt,name=doorbell_data,json=doorbellData,proto3" json:"doorbell_data,omitempty"`
	Salt               uint32 `protobuf:"varint,9,opt,name=salt,proto3" json:"salt,omitempty"`
	ExplicitIv         uint64 `protobuf:"fixed64,10,opt,name=explicit_iv,json=explicitIv,proto3" json:"explicit_iv,omitempty"`
	HeaderSize         uint32 `protobuf:"varint,11,opt,name=header_size,json=headerSize,proto3" json:"header_size,omitempty"`
	BarcoStatus        uint32 `protobuf:"varint,12,opt,name=barco_status,json=barcoStatus,proto3" json:"barco_status,omitempty"`
	SecondKeyDescIndex uint32 `protobuf:"varint,13,opt,name=second_key_desc_index,json=secondKeyDescIndex,proto3" json:"second_key_desc_index,omitempty"`
}

func (m *BarcoSymmReqDescrMsg) Reset()                    { *m = BarcoSymmReqDescrMsg{} }
func (m *BarcoSymmReqDescrMsg) String() string            { return proto.CompactTextString(m) }
func (*BarcoSymmReqDescrMsg) ProtoMessage()               {}
func (*BarcoSymmReqDescrMsg) Descriptor() ([]byte, []int) { return fileDescriptorBarcoRings, []int{6} }

func (m *BarcoSymmReqDescrMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetIvAddr() uint64 {
	if m != nil {
		return m.IvAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetDoorbellAddr() uint64 {
	if m != nil {
		return m.DoorbellAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetDoorbellData() uint64 {
	if m != nil {
		return m.DoorbellData
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetHeaderSize() uint32 {
	if m != nil {
		return m.HeaderSize
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetBarcoStatus() uint32 {
	if m != nil {
		return m.BarcoStatus
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetSecondKeyDescIndex() uint32 {
	if m != nil {
		return m.SecondKeyDescIndex
	}
	return 0
}

// Required fields of the Barco ASymmetric crypto Request descriptor
type BarcoASymReqDescrMsg struct {
	IlistAddr      uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr,proto3" json:"ilist_addr,omitempty"`
	OlistAddr      uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr,proto3" json:"olist_addr,omitempty"`
	KeyDescIndex   uint32 `protobuf:"varint,3,opt,name=key_desc_index,json=keyDescIndex,proto3" json:"key_desc_index,omitempty"`
	StatusAddr     uint64 `protobuf:"fixed64,4,opt,name=status_addr,json=statusAddr,proto3" json:"status_addr,omitempty"`
	OpaqueTagValue uint32 `protobuf:"varint,5,opt,name=opaque_tag_value,json=opaqueTagValue,proto3" json:"opaque_tag_value,omitempty"`
	OpaqueTagWrEn  uint32 `protobuf:"varint,6,opt,name=opaque_tag_wr_en,json=opaqueTagWrEn,proto3" json:"opaque_tag_wr_en,omitempty"`
	FlagA          uint32 `protobuf:"varint,7,opt,name=flag_a,json=flagA,proto3" json:"flag_a,omitempty"`
	FlagB          uint32 `protobuf:"varint,8,opt,name=flag_b,json=flagB,proto3" json:"flag_b,omitempty"`
}

func (m *BarcoASymReqDescrMsg) Reset()                    { *m = BarcoASymReqDescrMsg{} }
func (m *BarcoASymReqDescrMsg) String() string            { return proto.CompactTextString(m) }
func (*BarcoASymReqDescrMsg) ProtoMessage()               {}
func (*BarcoASymReqDescrMsg) Descriptor() ([]byte, []int) { return fileDescriptorBarcoRings, []int{7} }

func (m *BarcoASymReqDescrMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetOpaqueTagValue() uint32 {
	if m != nil {
		return m.OpaqueTagValue
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetOpaqueTagWrEn() uint32 {
	if m != nil {
		return m.OpaqueTagWrEn
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetFlagA() uint32 {
	if m != nil {
		return m.FlagA
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetFlagB() uint32 {
	if m != nil {
		return m.FlagB
	}
	return 0
}

// BarcoGetReqDescrEntryResponse returns the barco request descriptor content
// only if api_status indicates success, other fields are valid
type BarcoGetReqDescrEntryResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	RingType  BarcoRings `protobuf:"varint,2,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
	SlotIndex uint32     `protobuf:"varint,3,opt,name=slot_index,json=slotIndex,proto3" json:"slot_index,omitempty"`
	// Types that are valid to be assigned to ReqDescrMsg:
	//	*BarcoGetReqDescrEntryResponse_SymmReqDescr
	//	*BarcoGetReqDescrEntryResponse_AsymReqDescr
	ReqDescrMsg isBarcoGetReqDescrEntryResponse_ReqDescrMsg `protobuf_oneof:"ReqDescrMsg"`
}

func (m *BarcoGetReqDescrEntryResponse) Reset()         { *m = BarcoGetReqDescrEntryResponse{} }
func (m *BarcoGetReqDescrEntryResponse) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryResponse) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{8}
}

type isBarcoGetReqDescrEntryResponse_ReqDescrMsg interface {
	isBarcoGetReqDescrEntryResponse_ReqDescrMsg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BarcoGetReqDescrEntryResponse_SymmReqDescr struct {
	SymmReqDescr *BarcoSymmReqDescrMsg `protobuf:"bytes,4,opt,name=symm_req_descr,json=symmReqDescr,oneof"`
}
type BarcoGetReqDescrEntryResponse_AsymReqDescr struct {
	AsymReqDescr *BarcoASymReqDescrMsg `protobuf:"bytes,5,opt,name=asym_req_descr,json=asymReqDescr,oneof"`
}

func (*BarcoGetReqDescrEntryResponse_SymmReqDescr) isBarcoGetReqDescrEntryResponse_ReqDescrMsg() {}
func (*BarcoGetReqDescrEntryResponse_AsymReqDescr) isBarcoGetReqDescrEntryResponse_ReqDescrMsg() {}

func (m *BarcoGetReqDescrEntryResponse) GetReqDescrMsg() isBarcoGetReqDescrEntryResponse_ReqDescrMsg {
	if m != nil {
		return m.ReqDescrMsg
	}
	return nil
}

func (m *BarcoGetReqDescrEntryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BarcoGetReqDescrEntryResponse) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetReqDescrEntryResponse) GetSlotIndex() uint32 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

func (m *BarcoGetReqDescrEntryResponse) GetSymmReqDescr() *BarcoSymmReqDescrMsg {
	if x, ok := m.GetReqDescrMsg().(*BarcoGetReqDescrEntryResponse_SymmReqDescr); ok {
		return x.SymmReqDescr
	}
	return nil
}

func (m *BarcoGetReqDescrEntryResponse) GetAsymReqDescr() *BarcoASymReqDescrMsg {
	if x, ok := m.GetReqDescrMsg().(*BarcoGetReqDescrEntryResponse_AsymReqDescr); ok {
		return x.AsymReqDescr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BarcoGetReqDescrEntryResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BarcoGetReqDescrEntryResponse_OneofMarshaler, _BarcoGetReqDescrEntryResponse_OneofUnmarshaler, _BarcoGetReqDescrEntryResponse_OneofSizer, []interface{}{
		(*BarcoGetReqDescrEntryResponse_SymmReqDescr)(nil),
		(*BarcoGetReqDescrEntryResponse_AsymReqDescr)(nil),
	}
}

func _BarcoGetReqDescrEntryResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BarcoGetReqDescrEntryResponse)
	// ReqDescrMsg
	switch x := m.ReqDescrMsg.(type) {
	case *BarcoGetReqDescrEntryResponse_SymmReqDescr:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SymmReqDescr); err != nil {
			return err
		}
	case *BarcoGetReqDescrEntryResponse_AsymReqDescr:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AsymReqDescr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BarcoGetReqDescrEntryResponse.ReqDescrMsg has unexpected type %T", x)
	}
	return nil
}

func _BarcoGetReqDescrEntryResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BarcoGetReqDescrEntryResponse)
	switch tag {
	case 4: // ReqDescrMsg.symm_req_descr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BarcoSymmReqDescrMsg)
		err := b.DecodeMessage(msg)
		m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_SymmReqDescr{msg}
		return true, err
	case 5: // ReqDescrMsg.asym_req_descr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BarcoASymReqDescrMsg)
		err := b.DecodeMessage(msg)
		m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_AsymReqDescr{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BarcoGetReqDescrEntryResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BarcoGetReqDescrEntryResponse)
	// ReqDescrMsg
	switch x := m.ReqDescrMsg.(type) {
	case *BarcoGetReqDescrEntryResponse_SymmReqDescr:
		s := proto.Size(x.SymmReqDescr)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BarcoGetReqDescrEntryResponse_AsymReqDescr:
		s := proto.Size(x.AsymReqDescr)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BarcoGetReqDescrEntryResponseMsg is batched response to BarcoGetReqDescrEntryRequestMsg
type BarcoGetReqDescrEntryResponseMsg struct {
	Response []*BarcoGetReqDescrEntryResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BarcoGetReqDescrEntryResponseMsg) Reset()         { *m = BarcoGetReqDescrEntryResponseMsg{} }
func (m *BarcoGetReqDescrEntryResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryResponseMsg) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{9}
}

func (m *BarcoGetReqDescrEntryResponseMsg) GetResponse() []*BarcoGetReqDescrEntryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// BarcoGetRingMetaRequest - get ring meta data for a barco ring
type BarcoGetRingMetaRequest struct {
	RingType BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
}

func (m *BarcoGetRingMetaRequest) Reset()         { *m = BarcoGetRingMetaRequest{} }
func (m *BarcoGetRingMetaRequest) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaRequest) ProtoMessage()    {}
func (*BarcoGetRingMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{10}
}

func (m *BarcoGetRingMetaRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

// BarcoGetRingMetaRequestMsg is batched GET requests for barco rings
type BarcoGetRingMetaRequestMsg struct {
	Request []*BarcoGetRingMetaRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BarcoGetRingMetaRequestMsg) Reset()         { *m = BarcoGetRingMetaRequestMsg{} }
func (m *BarcoGetRingMetaRequestMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaRequestMsg) ProtoMessage()    {}
func (*BarcoGetRingMetaRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{11}
}

func (m *BarcoGetRingMetaRequestMsg) GetRequest() []*BarcoGetRingMetaRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// BarcoGetRingMetaResponse returns the barco ring meta data
// only if api_status indicates success, other fields are valid
type BarcoGetRingMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	RingType  BarcoRings `protobuf:"varint,2,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
	Pi        uint32     `protobuf:"varint,3,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci        uint32     `protobuf:"varint,4,opt,name=ci,proto3" json:"ci,omitempty"`
}

func (m *BarcoGetRingMetaResponse) Reset()         { *m = BarcoGetRingMetaResponse{} }
func (m *BarcoGetRingMetaResponse) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaResponse) ProtoMessage()    {}
func (*BarcoGetRingMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{12}
}

func (m *BarcoGetRingMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BarcoGetRingMetaResponse) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetRingMetaResponse) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *BarcoGetRingMetaResponse) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

// BarcoGetRingMetaResponseMsg is batched response to BarcoGetRingMetaRequestMsg
type BarcoGetRingMetaResponseMsg struct {
	Response []*BarcoGetRingMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BarcoGetRingMetaResponseMsg) Reset()         { *m = BarcoGetRingMetaResponseMsg{} }
func (m *BarcoGetRingMetaResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaResponseMsg) ProtoMessage()    {}
func (*BarcoGetRingMetaResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorBarcoRings, []int{13}
}

func (m *BarcoGetRingMetaResponseMsg) GetResponse() []*BarcoGetRingMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*GetOpaqueTagAddrRequest)(nil), "barcoRings.GetOpaqueTagAddrRequest")
	proto.RegisterType((*GetOpaqueTagAddrRequestMsg)(nil), "barcoRings.GetOpaqueTagAddrRequestMsg")
	proto.RegisterType((*GetOpaqueTagAddrResponse)(nil), "barcoRings.GetOpaqueTagAddrResponse")
	proto.RegisterType((*GetOpaqueTagAddrResponseMsg)(nil), "barcoRings.GetOpaqueTagAddrResponseMsg")
	proto.RegisterType((*BarcoGetReqDescrEntryRequest)(nil), "barcoRings.BarcoGetReqDescrEntryRequest")
	proto.RegisterType((*BarcoGetReqDescrEntryRequestMsg)(nil), "barcoRings.BarcoGetReqDescrEntryRequestMsg")
	proto.RegisterType((*BarcoSymmReqDescrMsg)(nil), "barcoRings.BarcoSymmReqDescrMsg")
	proto.RegisterType((*BarcoASymReqDescrMsg)(nil), "barcoRings.BarcoASymReqDescrMsg")
	proto.RegisterType((*BarcoGetReqDescrEntryResponse)(nil), "barcoRings.BarcoGetReqDescrEntryResponse")
	proto.RegisterType((*BarcoGetReqDescrEntryResponseMsg)(nil), "barcoRings.BarcoGetReqDescrEntryResponseMsg")
	proto.RegisterType((*BarcoGetRingMetaRequest)(nil), "barcoRings.BarcoGetRingMetaRequest")
	proto.RegisterType((*BarcoGetRingMetaRequestMsg)(nil), "barcoRings.BarcoGetRingMetaRequestMsg")
	proto.RegisterType((*BarcoGetRingMetaResponse)(nil), "barcoRings.BarcoGetRingMetaResponse")
	proto.RegisterType((*BarcoGetRingMetaResponseMsg)(nil), "barcoRings.BarcoGetRingMetaResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BarcoRings service

type BarcoRingsClient interface {
	GetOpaqueTagAddr(ctx context.Context, in *GetOpaqueTagAddrRequestMsg, opts ...grpc.CallOption) (*GetOpaqueTagAddrResponseMsg, error)
	BarcoGetReqDescrEntry(ctx context.Context, in *BarcoGetReqDescrEntryRequestMsg, opts ...grpc.CallOption) (*BarcoGetReqDescrEntryResponseMsg, error)
	BarcoGetRingMeta(ctx context.Context, in *BarcoGetRingMetaRequestMsg, opts ...grpc.CallOption) (*BarcoGetRingMetaResponseMsg, error)
}

type barcoRingsClient struct {
	cc *grpc.ClientConn
}

func NewBarcoRingsClient(cc *grpc.ClientConn) BarcoRingsClient {
	return &barcoRingsClient{cc}
}

func (c *barcoRingsClient) GetOpaqueTagAddr(ctx context.Context, in *GetOpaqueTagAddrRequestMsg, opts ...grpc.CallOption) (*GetOpaqueTagAddrResponseMsg, error) {
	out := new(GetOpaqueTagAddrResponseMsg)
	err := grpc.Invoke(ctx, "/barcoRings.BarcoRings/GetOpaqueTagAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barcoRingsClient) BarcoGetReqDescrEntry(ctx context.Context, in *BarcoGetReqDescrEntryRequestMsg, opts ...grpc.CallOption) (*BarcoGetReqDescrEntryResponseMsg, error) {
	out := new(BarcoGetReqDescrEntryResponseMsg)
	err := grpc.Invoke(ctx, "/barcoRings.BarcoRings/BarcoGetReqDescrEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barcoRingsClient) BarcoGetRingMeta(ctx context.Context, in *BarcoGetRingMetaRequestMsg, opts ...grpc.CallOption) (*BarcoGetRingMetaResponseMsg, error) {
	out := new(BarcoGetRingMetaResponseMsg)
	err := grpc.Invoke(ctx, "/barcoRings.BarcoRings/BarcoGetRingMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BarcoRings service

type BarcoRingsServer interface {
	GetOpaqueTagAddr(context.Context, *GetOpaqueTagAddrRequestMsg) (*GetOpaqueTagAddrResponseMsg, error)
	BarcoGetReqDescrEntry(context.Context, *BarcoGetReqDescrEntryRequestMsg) (*BarcoGetReqDescrEntryResponseMsg, error)
	BarcoGetRingMeta(context.Context, *BarcoGetRingMetaRequestMsg) (*BarcoGetRingMetaResponseMsg, error)
}

func RegisterBarcoRingsServer(s *grpc.Server, srv BarcoRingsServer) {
	s.RegisterService(&_BarcoRings_serviceDesc, srv)
}

func _BarcoRings_GetOpaqueTagAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpaqueTagAddrRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarcoRingsServer).GetOpaqueTagAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barcoRings.BarcoRings/GetOpaqueTagAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarcoRingsServer).GetOpaqueTagAddr(ctx, req.(*GetOpaqueTagAddrRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarcoRings_BarcoGetReqDescrEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarcoGetReqDescrEntryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarcoRingsServer).BarcoGetReqDescrEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barcoRings.BarcoRings/BarcoGetReqDescrEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarcoRingsServer).BarcoGetReqDescrEntry(ctx, req.(*BarcoGetReqDescrEntryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarcoRings_BarcoGetRingMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarcoGetRingMetaRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarcoRingsServer).BarcoGetRingMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barcoRings.BarcoRings/BarcoGetRingMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarcoRingsServer).BarcoGetRingMeta(ctx, req.(*BarcoGetRingMetaRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _BarcoRings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "barcoRings.BarcoRings",
	HandlerType: (*BarcoRingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpaqueTagAddr",
			Handler:    _BarcoRings_GetOpaqueTagAddr_Handler,
		},
		{
			MethodName: "BarcoGetReqDescrEntry",
			Handler:    _BarcoRings_BarcoGetReqDescrEntry_Handler,
		},
		{
			MethodName: "BarcoGetRingMeta",
			Handler:    _BarcoRings_BarcoGetRingMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "barco_rings.proto",
}

func (m *GetOpaqueTagAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpaqueTagAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.RingType))
	}
	return i, nil
}

func (m *GetOpaqueTagAddrRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpaqueTagAddrRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBarcoRings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetOpaqueTagAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpaqueTagAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpaqueTagAddr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.OpaqueTagAddr))
	}
	if m.ApiStatus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *GetOpaqueTagAddrResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpaqueTagAddrResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBarcoRings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoGetReqDescrEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetReqDescrEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.RingType))
	}
	if m.SlotIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.SlotIndex))
	}
	return i, nil
}

func (m *BarcoGetReqDescrEntryRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetReqDescrEntryRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBarcoRings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoSymmReqDescrMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoSymmReqDescrMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IlistAddr != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.IlistAddr))
	}
	if m.OlistAddr != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.OlistAddr))
	}
	if m.Command != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.Command))
	}
	if m.KeyDescIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.KeyDescIndex))
	}
	if m.IvAddr != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.IvAddr))
	}
	if m.StatusAddr != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.StatusAddr))
	}
	if m.DoorbellAddr != 0 {
		dAtA[i] = 0x39
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.DoorbellAddr))
	}
	if m.DoorbellData != 0 {
		dAtA[i] = 0x41
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.DoorbellData))
	}
	if m.Salt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		dAtA[i] = 0x51
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.ExplicitIv))
	}
	if m.HeaderSize != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.HeaderSize))
	}
	if m.BarcoStatus != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.BarcoStatus))
	}
	if m.SecondKeyDescIndex != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.SecondKeyDescIndex))
	}
	return i, nil
}

func (m *BarcoASymReqDescrMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoASymReqDescrMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IlistAddr != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.IlistAddr))
	}
	if m.OlistAddr != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.OlistAddr))
	}
	if m.KeyDescIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.KeyDescIndex))
	}
	if m.StatusAddr != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64BarcoRings(dAtA, i, uint64(m.StatusAddr))
	}
	if m.OpaqueTagValue != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.OpaqueTagValue))
	}
	if m.OpaqueTagWrEn != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.OpaqueTagWrEn))
	}
	if m.FlagA != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.FlagA))
	}
	if m.FlagB != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.FlagB))
	}
	return i, nil
}

func (m *BarcoGetReqDescrEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetReqDescrEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.RingType))
	}
	if m.SlotIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.SlotIndex))
	}
	if m.ReqDescrMsg != nil {
		nn1, err := m.ReqDescrMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *BarcoGetReqDescrEntryResponse_SymmReqDescr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SymmReqDescr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.SymmReqDescr.Size()))
		n2, err := m.SymmReqDescr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *BarcoGetReqDescrEntryResponse_AsymReqDescr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AsymReqDescr != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.AsymReqDescr.Size()))
		n3, err := m.AsymReqDescr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *BarcoGetReqDescrEntryResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetReqDescrEntryResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBarcoRings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoGetRingMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.RingType))
	}
	return i, nil
}

func (m *BarcoGetRingMetaRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBarcoRings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoGetRingMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.RingType))
	}
	if m.Pi != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBarcoRings(dAtA, i, uint64(m.Ci))
	}
	return i, nil
}

func (m *BarcoGetRingMetaResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBarcoRings(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64BarcoRings(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BarcoRings(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBarcoRings(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetOpaqueTagAddrRequest) Size() (n int) {
	var l int
	_ = l
	if m.RingType != 0 {
		n += 1 + sovBarcoRings(uint64(m.RingType))
	}
	return n
}

func (m *GetOpaqueTagAddrRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovBarcoRings(uint64(l))
		}
	}
	return n
}

func (m *GetOpaqueTagAddrResponse) Size() (n int) {
	var l int
	_ = l
	if m.OpaqueTagAddr != 0 {
		n += 1 + sovBarcoRings(uint64(m.OpaqueTagAddr))
	}
	if m.ApiStatus != 0 {
		n += 1 + sovBarcoRings(uint64(m.ApiStatus))
	}
	return n
}

func (m *GetOpaqueTagAddrResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovBarcoRings(uint64(l))
		}
	}
	return n
}

func (m *BarcoGetReqDescrEntryRequest) Size() (n int) {
	var l int
	_ = l
	if m.RingType != 0 {
		n += 1 + sovBarcoRings(uint64(m.RingType))
	}
	if m.SlotIndex != 0 {
		n += 1 + sovBarcoRings(uint64(m.SlotIndex))
	}
	return n
}

func (m *BarcoGetReqDescrEntryRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovBarcoRings(uint64(l))
		}
	}
	return n
}

func (m *BarcoSymmReqDescrMsg) Size() (n int) {
	var l int
	_ = l
	if m.IlistAddr != 0 {
		n += 9
	}
	if m.OlistAddr != 0 {
		n += 9
	}
	if m.Command != 0 {
		n += 1 + sovBarcoRings(uint64(m.Command))
	}
	if m.KeyDescIndex != 0 {
		n += 1 + sovBarcoRings(uint64(m.KeyDescIndex))
	}
	if m.IvAddr != 0 {
		n += 9
	}
	if m.StatusAddr != 0 {
		n += 9
	}
	if m.DoorbellAddr != 0 {
		n += 9
	}
	if m.DoorbellData != 0 {
		n += 9
	}
	if m.Salt != 0 {
		n += 1 + sovBarcoRings(uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		n += 9
	}
	if m.HeaderSize != 0 {
		n += 1 + sovBarcoRings(uint64(m.HeaderSize))
	}
	if m.BarcoStatus != 0 {
		n += 1 + sovBarcoRings(uint64(m.BarcoStatus))
	}
	if m.SecondKeyDescIndex != 0 {
		n += 1 + sovBarcoRings(uint64(m.SecondKeyDescIndex))
	}
	return n
}

func (m *BarcoASymReqDescrMsg) Size() (n int) {
	var l int
	_ = l
	if m.IlistAddr != 0 {
		n += 9
	}
	if m.OlistAddr != 0 {
		n += 9
	}
	if m.KeyDescIndex != 0 {
		n += 1 + sovBarcoRings(uint64(m.KeyDescIndex))
	}
	if m.StatusAddr != 0 {
		n += 9
	}
	if m.OpaqueTagValue != 0 {
		n += 1 + sovBarcoRings(uint64(m.OpaqueTagValue))
	}
	if m.OpaqueTagWrEn != 0 {
		n += 1 + sovBarcoRings(uint64(m.OpaqueTagWrEn))
	}
	if m.FlagA != 0 {
		n += 1 + sovBarcoRings(uint64(m.FlagA))
	}
	if m.FlagB != 0 {
		n += 1 + sovBarcoRings(uint64(m.FlagB))
	}
	return n
}

func (m *BarcoGetReqDescrEntryResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovBarcoRings(uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		n += 1 + sovBarcoRings(uint64(m.RingType))
	}
	if m.SlotIndex != 0 {
		n += 1 + sovBarcoRings(uint64(m.SlotIndex))
	}
	if m.ReqDescrMsg != nil {
		n += m.ReqDescrMsg.Size()
	}
	return n
}

func (m *BarcoGetReqDescrEntryResponse_SymmReqDescr) Size() (n int) {
	var l int
	_ = l
	if m.SymmReqDescr != nil {
		l = m.SymmReqDescr.Size()
		n += 1 + l + sovBarcoRings(uint64(l))
	}
	return n
}
func (m *BarcoGetReqDescrEntryResponse_AsymReqDescr) Size() (n int) {
	var l int
	_ = l
	if m.AsymReqDescr != nil {
		l = m.AsymReqDescr.Size()
		n += 1 + l + sovBarcoRings(uint64(l))
	}
	return n
}
func (m *BarcoGetReqDescrEntryResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovBarcoRings(uint64(l))
		}
	}
	return n
}

func (m *BarcoGetRingMetaRequest) Size() (n int) {
	var l int
	_ = l
	if m.RingType != 0 {
		n += 1 + sovBarcoRings(uint64(m.RingType))
	}
	return n
}

func (m *BarcoGetRingMetaRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovBarcoRings(uint64(l))
		}
	}
	return n
}

func (m *BarcoGetRingMetaResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovBarcoRings(uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		n += 1 + sovBarcoRings(uint64(m.RingType))
	}
	if m.Pi != 0 {
		n += 1 + sovBarcoRings(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovBarcoRings(uint64(m.Ci))
	}
	return n
}

func (m *BarcoGetRingMetaResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovBarcoRings(uint64(l))
		}
	}
	return n
}

func sovBarcoRings(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBarcoRings(x uint64) (n int) {
	return sovBarcoRings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetOpaqueTagAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpaqueTagAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpaqueTagAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpaqueTagAddrRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpaqueTagAddrRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpaqueTagAddrRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBarcoRings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &GetOpaqueTagAddrRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpaqueTagAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpaqueTagAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpaqueTagAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpaqueTagAddr", wireType)
			}
			m.OpaqueTagAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpaqueTagAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpaqueTagAddrResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpaqueTagAddrResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpaqueTagAddrResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBarcoRings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &GetOpaqueTagAddrResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetReqDescrEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIndex", wireType)
			}
			m.SlotIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetReqDescrEntryRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBarcoRings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &BarcoGetReqDescrEntryRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoSymmReqDescrMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoSymmReqDescrMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoSymmReqDescrMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IlistAddr", wireType)
			}
			m.IlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.IlistAddr = uint64(dAtA[iNdEx-8])
			m.IlistAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.IlistAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.IlistAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.IlistAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.IlistAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.IlistAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.IlistAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OlistAddr", wireType)
			}
			m.OlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.OlistAddr = uint64(dAtA[iNdEx-8])
			m.OlistAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.OlistAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.OlistAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.OlistAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.OlistAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.OlistAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.OlistAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyDescIndex", wireType)
			}
			m.KeyDescIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyDescIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IvAddr", wireType)
			}
			m.IvAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.IvAddr = uint64(dAtA[iNdEx-8])
			m.IvAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.IvAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.IvAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.IvAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.IvAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.IvAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.IvAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusAddr", wireType)
			}
			m.StatusAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.StatusAddr = uint64(dAtA[iNdEx-8])
			m.StatusAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.StatusAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.StatusAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.StatusAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.StatusAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.StatusAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.StatusAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellAddr", wireType)
			}
			m.DoorbellAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.DoorbellAddr = uint64(dAtA[iNdEx-8])
			m.DoorbellAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.DoorbellAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.DoorbellAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.DoorbellAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.DoorbellAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.DoorbellAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.DoorbellAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellData", wireType)
			}
			m.DoorbellData = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.DoorbellData = uint64(dAtA[iNdEx-8])
			m.DoorbellData |= uint64(dAtA[iNdEx-7]) << 8
			m.DoorbellData |= uint64(dAtA[iNdEx-6]) << 16
			m.DoorbellData |= uint64(dAtA[iNdEx-5]) << 24
			m.DoorbellData |= uint64(dAtA[iNdEx-4]) << 32
			m.DoorbellData |= uint64(dAtA[iNdEx-3]) << 40
			m.DoorbellData |= uint64(dAtA[iNdEx-2]) << 48
			m.DoorbellData |= uint64(dAtA[iNdEx-1]) << 56
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitIv", wireType)
			}
			m.ExplicitIv = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.ExplicitIv = uint64(dAtA[iNdEx-8])
			m.ExplicitIv |= uint64(dAtA[iNdEx-7]) << 8
			m.ExplicitIv |= uint64(dAtA[iNdEx-6]) << 16
			m.ExplicitIv |= uint64(dAtA[iNdEx-5]) << 24
			m.ExplicitIv |= uint64(dAtA[iNdEx-4]) << 32
			m.ExplicitIv |= uint64(dAtA[iNdEx-3]) << 40
			m.ExplicitIv |= uint64(dAtA[iNdEx-2]) << 48
			m.ExplicitIv |= uint64(dAtA[iNdEx-1]) << 56
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderSize", wireType)
			}
			m.HeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcoStatus", wireType)
			}
			m.BarcoStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcoStatus |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondKeyDescIndex", wireType)
			}
			m.SecondKeyDescIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondKeyDescIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoASymReqDescrMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoASymReqDescrMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoASymReqDescrMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IlistAddr", wireType)
			}
			m.IlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.IlistAddr = uint64(dAtA[iNdEx-8])
			m.IlistAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.IlistAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.IlistAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.IlistAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.IlistAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.IlistAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.IlistAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OlistAddr", wireType)
			}
			m.OlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.OlistAddr = uint64(dAtA[iNdEx-8])
			m.OlistAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.OlistAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.OlistAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.OlistAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.OlistAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.OlistAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.OlistAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyDescIndex", wireType)
			}
			m.KeyDescIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyDescIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusAddr", wireType)
			}
			m.StatusAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.StatusAddr = uint64(dAtA[iNdEx-8])
			m.StatusAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.StatusAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.StatusAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.StatusAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.StatusAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.StatusAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.StatusAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpaqueTagValue", wireType)
			}
			m.OpaqueTagValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpaqueTagValue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpaqueTagWrEn", wireType)
			}
			m.OpaqueTagWrEn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpaqueTagWrEn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagA", wireType)
			}
			m.FlagA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagA |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagB", wireType)
			}
			m.FlagB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagB |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetReqDescrEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIndex", wireType)
			}
			m.SlotIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymmReqDescr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBarcoRings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BarcoSymmReqDescrMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_SymmReqDescr{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsymReqDescr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBarcoRings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BarcoASymReqDescrMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_AsymReqDescr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetReqDescrEntryResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBarcoRings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &BarcoGetReqDescrEntryResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBarcoRings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &BarcoGetRingMetaRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBarcoRings
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &BarcoGetRingMetaResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBarcoRings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBarcoRings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBarcoRings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBarcoRings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBarcoRings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBarcoRings
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBarcoRings
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBarcoRings(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBarcoRings = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBarcoRings   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("barco_rings.proto", fileDescriptorBarcoRings) }

var fileDescriptorBarcoRings = []byte{
	// 851 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x5f, 0x8f, 0xda, 0x46,
	0x10, 0x3f, 0x9b, 0x3b, 0xee, 0x18, 0x30, 0x25, 0xab, 0x9e, 0xce, 0xa2, 0x85, 0x50, 0x27, 0x4a,
	0xa8, 0x5a, 0x51, 0x95, 0x3e, 0x57, 0x2a, 0x28, 0xa7, 0x04, 0x55, 0xa7, 0x4a, 0x26, 0x6a, 0xa5,
	0xf6, 0xc1, 0x5a, 0xec, 0x2d, 0x59, 0xc5, 0xd8, 0xc6, 0xbb, 0xd0, 0x38, 0x9f, 0xa4, 0x52, 0xfb,
	0x69, 0xaa, 0x3e, 0xf4, 0x31, 0x1f, 0xa1, 0xba, 0x7e, 0x91, 0x6a, 0x77, 0x0d, 0x18, 0x3b, 0xe6,
	0xe8, 0x1f, 0xe5, 0x09, 0xf6, 0x37, 0xbf, 0x99, 0xdd, 0xd9, 0xdf, 0xcc, 0xac, 0xe1, 0xde, 0x0c,
	0xc7, 0x6e, 0xe8, 0xc4, 0x34, 0x98, 0xb3, 0x41, 0x14, 0x87, 0x3c, 0x44, 0x20, 0x21, 0x5b, 0x20,
	0xed, 0x3a, 0x4f, 0x22, 0x92, 0x1a, 0xac, 0x09, 0x5c, 0x3d, 0x25, 0xfc, 0x9b, 0x08, 0x2f, 0x57,
	0xe4, 0x39, 0x9e, 0x8f, 0x3c, 0x2f, 0xb6, 0xc9, 0x72, 0x45, 0x18, 0x47, 0x03, 0xa8, 0x89, 0x10,
	0x8e, 0xa0, 0x9b, 0x5a, 0x4f, 0xeb, 0x37, 0x87, 0xf7, 0x06, 0xca, 0x77, 0xbc, 0x8d, 0x66, 0x5f,
	0x08, 0xce, 0xf3, 0x24, 0x22, 0xd6, 0x0f, 0xd0, 0x2e, 0x09, 0x75, 0xc3, 0xe6, 0xe8, 0x4b, 0x38,
	0x8f, 0xd5, 0xca, 0xd4, 0x7a, 0x95, 0x7e, 0x7d, 0xf8, 0x60, 0xb0, 0x3b, 0xd3, 0xa0, 0xc4, 0xd1,
	0xde, 0xf8, 0x58, 0x0c, 0xcc, 0x22, 0x87, 0x45, 0x61, 0xc0, 0x08, 0x7a, 0x04, 0xef, 0x85, 0xd2,
	0xe0, 0x70, 0x3c, 0x77, 0xb0, 0xe7, 0xc5, 0xf2, 0xb8, 0xa7, 0xb6, 0x11, 0x66, 0xf9, 0xe8, 0x33,
	0x00, 0x1c, 0x51, 0x87, 0x71, 0xcc, 0x57, 0xcc, 0xd4, 0x65, 0x46, 0xad, 0x34, 0xa3, 0x51, 0x44,
	0xa7, 0x12, 0xb7, 0x6b, 0x78, 0xf3, 0xd7, 0x72, 0xe0, 0x83, 0xb2, 0x4d, 0x45, 0x4a, 0x5f, 0xc1,
	0x45, 0x9c, 0x2e, 0xd3, 0x9c, 0x1e, 0x1e, 0xce, 0x49, 0x71, 0xed, 0xad, 0x97, 0xb5, 0x80, 0x0f,
	0xe5, 0x55, 0x3e, 0x25, 0xdc, 0x26, 0xcb, 0x27, 0x84, 0xb9, 0xf1, 0x75, 0xc0, 0xe3, 0xe4, 0x5f,
	0x4a, 0x80, 0x3a, 0x00, 0xcc, 0x0f, 0xb9, 0x43, 0x03, 0x8f, 0xbc, 0x92, 0x19, 0x1a, 0x76, 0x4d,
	0x20, 0x13, 0x01, 0x58, 0x04, 0xee, 0x1f, 0xda, 0x4e, 0xe4, 0x34, 0xce, 0xcb, 0xd4, 0xcf, 0xa6,
	0x74, 0xc8, 0x7b, 0xa7, 0xd5, 0xef, 0x15, 0x78, 0x5f, 0x32, 0xa7, 0xc9, 0x62, 0xb1, 0xa1, 0x8a,
	0xe0, 0x1d, 0x00, 0xea, 0x53, 0xc6, 0x77, 0x1a, 0x55, 0xed, 0x9a, 0x44, 0xa4, 0x3e, 0x1d, 0x80,
	0x70, 0x67, 0xd6, 0x95, 0x39, 0xdc, 0x9a, 0x4d, 0x38, 0x77, 0xc3, 0xc5, 0x02, 0x07, 0x9e, 0x59,
	0x91, 0x99, 0x6d, 0x96, 0xe8, 0x21, 0x34, 0x5f, 0x92, 0xc4, 0xf1, 0x08, 0x73, 0xd3, 0xd4, 0x4f,
	0x25, 0xa1, 0xf1, 0x92, 0x24, 0x62, 0x73, 0x99, 0x3d, 0xba, 0x82, 0x73, 0xba, 0x56, 0xb1, 0xcf,
	0x64, 0xec, 0x2a, 0x5d, 0xcb, 0xc0, 0xf7, 0xa1, 0xae, 0x6a, 0x42, 0x19, 0xab, 0xd2, 0x08, 0x0a,
	0x92, 0x84, 0x07, 0x60, 0x78, 0x61, 0x18, 0xcf, 0x88, 0xef, 0x2b, 0xca, 0xb9, 0xa4, 0x34, 0x36,
	0x60, 0x81, 0xe4, 0x61, 0x8e, 0xcd, 0x8b, 0x7d, 0xd2, 0x13, 0xcc, 0x31, 0x42, 0x70, 0xca, 0xb0,
	0xcf, 0xcd, 0x9a, 0x3c, 0x9f, 0xfc, 0x2f, 0xb6, 0x27, 0xaf, 0x22, 0x9f, 0xba, 0x94, 0x3b, 0x74,
	0x6d, 0x82, 0xda, 0x7e, 0x03, 0x4d, 0xd6, 0x82, 0xf0, 0x82, 0x60, 0x8f, 0xc4, 0x0e, 0xa3, 0xaf,
	0x89, 0x59, 0x97, 0xbe, 0xa0, 0xa0, 0x29, 0x7d, 0x4d, 0xd0, 0x47, 0xd0, 0x50, 0x2d, 0x9f, 0x96,
	0x76, 0x43, 0x32, 0xea, 0x12, 0x53, 0xa5, 0x8c, 0x3e, 0x87, 0x4b, 0x46, 0xdc, 0x30, 0xf0, 0x9c,
	0xdc, 0x4d, 0x19, 0x92, 0x8b, 0x94, 0xf1, 0xeb, 0xcc, 0x7d, 0x59, 0xbf, 0xea, 0xa9, 0x8c, 0xa3,
	0x69, 0xf2, 0x3f, 0xca, 0x58, 0x14, 0xab, 0xf2, 0x16, 0xb1, 0x72, 0x9a, 0x9c, 0x16, 0x34, 0xe9,
	0x43, 0x2b, 0xd3, 0xf4, 0x6b, 0xec, 0xaf, 0x88, 0x94, 0xd5, 0xb0, 0x9b, 0xdb, 0xae, 0xff, 0x56,
	0xa0, 0xe8, 0xf1, 0x1e, 0xf3, 0xa7, 0xd8, 0x21, 0x81, 0xd4, 0xd8, 0xc8, 0xcc, 0x87, 0xef, 0xe2,
	0xeb, 0x00, 0x5d, 0x42, 0xf5, 0x47, 0x5f, 0x4c, 0x10, 0xa9, 0xaf, 0x61, 0x9f, 0x89, 0xd5, 0x68,
	0x0b, 0xcf, 0xa4, 0xa2, 0x29, 0x3c, 0xb6, 0x7e, 0xd3, 0xa1, 0x53, 0xd2, 0x0f, 0xe9, 0x5c, 0xda,
	0x9f, 0x37, 0xda, 0x9d, 0xf3, 0x66, 0xbf, 0xdd, 0xf5, 0x7f, 0xda, 0xee, 0x95, 0x5c, 0xbb, 0xa3,
	0x67, 0xd0, 0x64, 0xc9, 0x62, 0xe1, 0xc4, 0x64, 0x29, 0xaf, 0x5b, 0x5d, 0x63, 0x7d, 0xd8, 0x2b,
	0xb4, 0x74, 0xae, 0x51, 0x9f, 0x9d, 0xd8, 0x0d, 0x96, 0x81, 0x44, 0x24, 0xcc, 0x92, 0x6c, 0xa4,
	0xb3, 0x92, 0x48, 0xb9, 0x5a, 0x11, 0x91, 0x84, 0xe7, 0x06, 0x1a, 0x1b, 0x50, 0xcf, 0x98, 0x2d,
	0x0a, 0xbd, 0x83, 0x77, 0x28, 0xca, 0xed, 0xba, 0x30, 0x66, 0x3f, 0x3e, 0x62, 0x26, 0x15, 0x66,
	0xed, 0x04, 0xae, 0xb6, 0x54, 0x1a, 0xcc, 0x6f, 0x08, 0xc7, 0xff, 0xe1, 0xa5, 0x2b, 0x09, 0x75,
	0xf7, 0x4b, 0x57, 0xe2, 0xb8, 0x9b, 0x9e, 0xbf, 0x68, 0x60, 0x16, 0x49, 0xef, 0xaa, 0xa4, 0x9a,
	0xa0, 0x47, 0x34, 0x2d, 0x25, 0x3d, 0xa2, 0x62, 0xed, 0xd2, 0x74, 0x9c, 0xea, 0x2e, 0x15, 0x4f,
	0x62, 0xd9, 0xe1, 0x8e, 0x78, 0x12, 0xcb, 0x5c, 0x77, 0x32, 0x0d, 0xdf, 0xe8, 0x00, 0xbb, 0x93,
	0x21, 0x02, 0xad, 0xfc, 0x3b, 0x8a, 0x1e, 0x1d, 0xf1, 0xe5, 0x70, 0xc3, 0xe6, 0xed, 0xc7, 0xc7,
	0xbc, 0xc6, 0xa2, 0x0a, 0x4f, 0x10, 0x87, 0xcb, 0xb7, 0xd6, 0x11, 0xfa, 0xe4, 0xd8, 0xe7, 0x4f,
	0x6c, 0xf8, 0xe9, 0xd1, 0x75, 0xa9, 0x76, 0x25, 0xd0, 0xca, 0xdf, 0xc8, 0x7e, 0x72, 0xe5, 0x55,
	0xb6, 0x9f, 0xdc, 0x01, 0x49, 0xac, 0x93, 0x71, 0xfb, 0x8f, 0xdb, 0xae, 0xf6, 0xe6, 0xb6, 0xab,
	0xfd, 0x79, 0xdb, 0xd5, 0x7e, 0xfe, 0xab, 0x7b, 0xf2, 0xfd, 0xc5, 0x0b, 0xec, 0xcb, 0xef, 0xbf,
	0x59, 0x55, 0xfe, 0x7c, 0xf1, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0x85, 0x67, 0x8c, 0x34,
	0x0a, 0x00, 0x00,
}
