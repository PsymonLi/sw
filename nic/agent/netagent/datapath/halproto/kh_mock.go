// Code generated by MockGen. DO NOT EDIT.
// Source: kh.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockisSecurityProfileKeyHandle_KeyOrHandle is a mock of isSecurityProfileKeyHandle_KeyOrHandle interface
type MockisSecurityProfileKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisSecurityProfileKeyHandle_KeyOrHandleMockRecorder
}

// MockisSecurityProfileKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisSecurityProfileKeyHandle_KeyOrHandle
type MockisSecurityProfileKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisSecurityProfileKeyHandle_KeyOrHandle
}

// NewMockisSecurityProfileKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisSecurityProfileKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisSecurityProfileKeyHandle_KeyOrHandle {
	mock := &MockisSecurityProfileKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisSecurityProfileKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisSecurityProfileKeyHandle_KeyOrHandle) EXPECT() *MockisSecurityProfileKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isSecurityProfileKeyHandle_KeyOrHandle mocks base method
func (m *MockisSecurityProfileKeyHandle_KeyOrHandle) isSecurityProfileKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isSecurityProfileKeyHandle_KeyOrHandle")
}

// isSecurityProfileKeyHandle_KeyOrHandle indicates an expected call of isSecurityProfileKeyHandle_KeyOrHandle
func (mr *MockisSecurityProfileKeyHandle_KeyOrHandleMockRecorder) isSecurityProfileKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSecurityProfileKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisSecurityProfileKeyHandle_KeyOrHandle)(nil).isSecurityProfileKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisSecurityProfileKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisSecurityProfileKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisSecurityProfileKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisSecurityProfileKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisSecurityProfileKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisSecurityProfileKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisCollectorKeyHandle_KeyOrHandle is a mock of isCollectorKeyHandle_KeyOrHandle interface
type MockisCollectorKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisCollectorKeyHandle_KeyOrHandleMockRecorder
}

// MockisCollectorKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisCollectorKeyHandle_KeyOrHandle
type MockisCollectorKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisCollectorKeyHandle_KeyOrHandle
}

// NewMockisCollectorKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisCollectorKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisCollectorKeyHandle_KeyOrHandle {
	mock := &MockisCollectorKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisCollectorKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCollectorKeyHandle_KeyOrHandle) EXPECT() *MockisCollectorKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isCollectorKeyHandle_KeyOrHandle mocks base method
func (m *MockisCollectorKeyHandle_KeyOrHandle) isCollectorKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isCollectorKeyHandle_KeyOrHandle")
}

// isCollectorKeyHandle_KeyOrHandle indicates an expected call of isCollectorKeyHandle_KeyOrHandle
func (mr *MockisCollectorKeyHandle_KeyOrHandleMockRecorder) isCollectorKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCollectorKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisCollectorKeyHandle_KeyOrHandle)(nil).isCollectorKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisCollectorKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCollectorKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCollectorKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCollectorKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCollectorKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCollectorKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisExportControlKeyHandle_KeyOrHandle is a mock of isExportControlKeyHandle_KeyOrHandle interface
type MockisExportControlKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisExportControlKeyHandle_KeyOrHandleMockRecorder
}

// MockisExportControlKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisExportControlKeyHandle_KeyOrHandle
type MockisExportControlKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisExportControlKeyHandle_KeyOrHandle
}

// NewMockisExportControlKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisExportControlKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisExportControlKeyHandle_KeyOrHandle {
	mock := &MockisExportControlKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisExportControlKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisExportControlKeyHandle_KeyOrHandle) EXPECT() *MockisExportControlKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isExportControlKeyHandle_KeyOrHandle mocks base method
func (m *MockisExportControlKeyHandle_KeyOrHandle) isExportControlKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isExportControlKeyHandle_KeyOrHandle")
}

// isExportControlKeyHandle_KeyOrHandle indicates an expected call of isExportControlKeyHandle_KeyOrHandle
func (mr *MockisExportControlKeyHandle_KeyOrHandleMockRecorder) isExportControlKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isExportControlKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisExportControlKeyHandle_KeyOrHandle)(nil).isExportControlKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisExportControlKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisExportControlKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisExportControlKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisExportControlKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisExportControlKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisExportControlKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisFlowMonitorRuleKeyHandle_KeyOrHandle is a mock of isFlowMonitorRuleKeyHandle_KeyOrHandle interface
type MockisFlowMonitorRuleKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisFlowMonitorRuleKeyHandle_KeyOrHandleMockRecorder
}

// MockisFlowMonitorRuleKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisFlowMonitorRuleKeyHandle_KeyOrHandle
type MockisFlowMonitorRuleKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisFlowMonitorRuleKeyHandle_KeyOrHandle
}

// NewMockisFlowMonitorRuleKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisFlowMonitorRuleKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisFlowMonitorRuleKeyHandle_KeyOrHandle {
	mock := &MockisFlowMonitorRuleKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisFlowMonitorRuleKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisFlowMonitorRuleKeyHandle_KeyOrHandle) EXPECT() *MockisFlowMonitorRuleKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isFlowMonitorRuleKeyHandle_KeyOrHandle mocks base method
func (m *MockisFlowMonitorRuleKeyHandle_KeyOrHandle) isFlowMonitorRuleKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isFlowMonitorRuleKeyHandle_KeyOrHandle")
}

// isFlowMonitorRuleKeyHandle_KeyOrHandle indicates an expected call of isFlowMonitorRuleKeyHandle_KeyOrHandle
func (mr *MockisFlowMonitorRuleKeyHandle_KeyOrHandleMockRecorder) isFlowMonitorRuleKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isFlowMonitorRuleKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisFlowMonitorRuleKeyHandle_KeyOrHandle)(nil).isFlowMonitorRuleKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisFlowMonitorRuleKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisFlowMonitorRuleKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisFlowMonitorRuleKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisFlowMonitorRuleKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisFlowMonitorRuleKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisFlowMonitorRuleKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisDropMonitorRuleKeyHandle_KeyOrHandle is a mock of isDropMonitorRuleKeyHandle_KeyOrHandle interface
type MockisDropMonitorRuleKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisDropMonitorRuleKeyHandle_KeyOrHandleMockRecorder
}

// MockisDropMonitorRuleKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisDropMonitorRuleKeyHandle_KeyOrHandle
type MockisDropMonitorRuleKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisDropMonitorRuleKeyHandle_KeyOrHandle
}

// NewMockisDropMonitorRuleKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisDropMonitorRuleKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisDropMonitorRuleKeyHandle_KeyOrHandle {
	mock := &MockisDropMonitorRuleKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisDropMonitorRuleKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisDropMonitorRuleKeyHandle_KeyOrHandle) EXPECT() *MockisDropMonitorRuleKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isDropMonitorRuleKeyHandle_KeyOrHandle mocks base method
func (m *MockisDropMonitorRuleKeyHandle_KeyOrHandle) isDropMonitorRuleKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isDropMonitorRuleKeyHandle_KeyOrHandle")
}

// isDropMonitorRuleKeyHandle_KeyOrHandle indicates an expected call of isDropMonitorRuleKeyHandle_KeyOrHandle
func (mr *MockisDropMonitorRuleKeyHandle_KeyOrHandleMockRecorder) isDropMonitorRuleKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDropMonitorRuleKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisDropMonitorRuleKeyHandle_KeyOrHandle)(nil).isDropMonitorRuleKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisDropMonitorRuleKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisDropMonitorRuleKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisDropMonitorRuleKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisDropMonitorRuleKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisDropMonitorRuleKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisDropMonitorRuleKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisMirrorSessionKeyHandle_KeyOrHandle is a mock of isMirrorSessionKeyHandle_KeyOrHandle interface
type MockisMirrorSessionKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisMirrorSessionKeyHandle_KeyOrHandleMockRecorder
}

// MockisMirrorSessionKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisMirrorSessionKeyHandle_KeyOrHandle
type MockisMirrorSessionKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisMirrorSessionKeyHandle_KeyOrHandle
}

// NewMockisMirrorSessionKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisMirrorSessionKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisMirrorSessionKeyHandle_KeyOrHandle {
	mock := &MockisMirrorSessionKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisMirrorSessionKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisMirrorSessionKeyHandle_KeyOrHandle) EXPECT() *MockisMirrorSessionKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isMirrorSessionKeyHandle_KeyOrHandle mocks base method
func (m *MockisMirrorSessionKeyHandle_KeyOrHandle) isMirrorSessionKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isMirrorSessionKeyHandle_KeyOrHandle")
}

// isMirrorSessionKeyHandle_KeyOrHandle indicates an expected call of isMirrorSessionKeyHandle_KeyOrHandle
func (mr *MockisMirrorSessionKeyHandle_KeyOrHandleMockRecorder) isMirrorSessionKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isMirrorSessionKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisMirrorSessionKeyHandle_KeyOrHandle)(nil).isMirrorSessionKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisMirrorSessionKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisMirrorSessionKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisMirrorSessionKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisMirrorSessionKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisMirrorSessionKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisMirrorSessionKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisVrfKeyHandle_KeyOrHandle is a mock of isVrfKeyHandle_KeyOrHandle interface
type MockisVrfKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisVrfKeyHandle_KeyOrHandleMockRecorder
}

// MockisVrfKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisVrfKeyHandle_KeyOrHandle
type MockisVrfKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisVrfKeyHandle_KeyOrHandle
}

// NewMockisVrfKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisVrfKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisVrfKeyHandle_KeyOrHandle {
	mock := &MockisVrfKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisVrfKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisVrfKeyHandle_KeyOrHandle) EXPECT() *MockisVrfKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isVrfKeyHandle_KeyOrHandle mocks base method
func (m *MockisVrfKeyHandle_KeyOrHandle) isVrfKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isVrfKeyHandle_KeyOrHandle")
}

// isVrfKeyHandle_KeyOrHandle indicates an expected call of isVrfKeyHandle_KeyOrHandle
func (mr *MockisVrfKeyHandle_KeyOrHandleMockRecorder) isVrfKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isVrfKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisVrfKeyHandle_KeyOrHandle)(nil).isVrfKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisVrfKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisVrfKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisVrfKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisVrfKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisVrfKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisVrfKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisNetworkKeyHandle_KeyOrHandle is a mock of isNetworkKeyHandle_KeyOrHandle interface
type MockisNetworkKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisNetworkKeyHandle_KeyOrHandleMockRecorder
}

// MockisNetworkKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisNetworkKeyHandle_KeyOrHandle
type MockisNetworkKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisNetworkKeyHandle_KeyOrHandle
}

// NewMockisNetworkKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisNetworkKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisNetworkKeyHandle_KeyOrHandle {
	mock := &MockisNetworkKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisNetworkKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNetworkKeyHandle_KeyOrHandle) EXPECT() *MockisNetworkKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isNetworkKeyHandle_KeyOrHandle mocks base method
func (m *MockisNetworkKeyHandle_KeyOrHandle) isNetworkKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isNetworkKeyHandle_KeyOrHandle")
}

// isNetworkKeyHandle_KeyOrHandle indicates an expected call of isNetworkKeyHandle_KeyOrHandle
func (mr *MockisNetworkKeyHandle_KeyOrHandleMockRecorder) isNetworkKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNetworkKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisNetworkKeyHandle_KeyOrHandle)(nil).isNetworkKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisNetworkKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisNetworkKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisNetworkKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisNetworkKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisNetworkKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisNetworkKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisNexthopKeyHandle_KeyOrHandle is a mock of isNexthopKeyHandle_KeyOrHandle interface
type MockisNexthopKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisNexthopKeyHandle_KeyOrHandleMockRecorder
}

// MockisNexthopKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisNexthopKeyHandle_KeyOrHandle
type MockisNexthopKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisNexthopKeyHandle_KeyOrHandle
}

// NewMockisNexthopKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisNexthopKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisNexthopKeyHandle_KeyOrHandle {
	mock := &MockisNexthopKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisNexthopKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNexthopKeyHandle_KeyOrHandle) EXPECT() *MockisNexthopKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isNexthopKeyHandle_KeyOrHandle mocks base method
func (m *MockisNexthopKeyHandle_KeyOrHandle) isNexthopKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isNexthopKeyHandle_KeyOrHandle")
}

// isNexthopKeyHandle_KeyOrHandle indicates an expected call of isNexthopKeyHandle_KeyOrHandle
func (mr *MockisNexthopKeyHandle_KeyOrHandleMockRecorder) isNexthopKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNexthopKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisNexthopKeyHandle_KeyOrHandle)(nil).isNexthopKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisNexthopKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisNexthopKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisNexthopKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisNexthopKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisNexthopKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisNexthopKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisRouteKeyHandle_KeyOrHandle is a mock of isRouteKeyHandle_KeyOrHandle interface
type MockisRouteKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisRouteKeyHandle_KeyOrHandleMockRecorder
}

// MockisRouteKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisRouteKeyHandle_KeyOrHandle
type MockisRouteKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisRouteKeyHandle_KeyOrHandle
}

// NewMockisRouteKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisRouteKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisRouteKeyHandle_KeyOrHandle {
	mock := &MockisRouteKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisRouteKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRouteKeyHandle_KeyOrHandle) EXPECT() *MockisRouteKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isRouteKeyHandle_KeyOrHandle mocks base method
func (m *MockisRouteKeyHandle_KeyOrHandle) isRouteKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isRouteKeyHandle_KeyOrHandle")
}

// isRouteKeyHandle_KeyOrHandle indicates an expected call of isRouteKeyHandle_KeyOrHandle
func (mr *MockisRouteKeyHandle_KeyOrHandleMockRecorder) isRouteKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRouteKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisRouteKeyHandle_KeyOrHandle)(nil).isRouteKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisRouteKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisRouteKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRouteKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisRouteKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisRouteKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRouteKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisL2SegmentKeyHandle_KeyOrHandle is a mock of isL2SegmentKeyHandle_KeyOrHandle interface
type MockisL2SegmentKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder
}

// MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisL2SegmentKeyHandle_KeyOrHandle
type MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisL2SegmentKeyHandle_KeyOrHandle
}

// NewMockisL2SegmentKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisL2SegmentKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisL2SegmentKeyHandle_KeyOrHandle {
	mock := &MockisL2SegmentKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisL2SegmentKeyHandle_KeyOrHandle) EXPECT() *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isL2SegmentKeyHandle_KeyOrHandle mocks base method
func (m *MockisL2SegmentKeyHandle_KeyOrHandle) isL2SegmentKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isL2SegmentKeyHandle_KeyOrHandle")
}

// isL2SegmentKeyHandle_KeyOrHandle indicates an expected call of isL2SegmentKeyHandle_KeyOrHandle
func (mr *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder) isL2SegmentKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isL2SegmentKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisL2SegmentKeyHandle_KeyOrHandle)(nil).isL2SegmentKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisL2SegmentKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisL2SegmentKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisL2SegmentKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisL2SegmentKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle is a mock of isSecurityPolicyKeyHandle_PolicyKeyOrHandle interface
type MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandleMockRecorder
}

// MockisSecurityPolicyKeyHandle_PolicyKeyOrHandleMockRecorder is the mock recorder for MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle
type MockisSecurityPolicyKeyHandle_PolicyKeyOrHandleMockRecorder struct {
	mock *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle
}

// NewMockisSecurityPolicyKeyHandle_PolicyKeyOrHandle creates a new mock instance
func NewMockisSecurityPolicyKeyHandle_PolicyKeyOrHandle(ctrl *gomock.Controller) *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle {
	mock := &MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisSecurityPolicyKeyHandle_PolicyKeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle) EXPECT() *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandleMockRecorder {
	return m.recorder
}

// isSecurityPolicyKeyHandle_PolicyKeyOrHandle mocks base method
func (m *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle) isSecurityPolicyKeyHandle_PolicyKeyOrHandle() {
	m.ctrl.Call(m, "isSecurityPolicyKeyHandle_PolicyKeyOrHandle")
}

// isSecurityPolicyKeyHandle_PolicyKeyOrHandle indicates an expected call of isSecurityPolicyKeyHandle_PolicyKeyOrHandle
func (mr *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandleMockRecorder) isSecurityPolicyKeyHandle_PolicyKeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSecurityPolicyKeyHandle_PolicyKeyOrHandle", reflect.TypeOf((*MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle)(nil).isSecurityPolicyKeyHandle_PolicyKeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisSecurityPolicyKeyHandle_PolicyKeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisSecurityPolicyKeyHandle_PolicyKeyOrHandle)(nil).Size))
}

// MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle is a mock of isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle interface
type MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandleMockRecorder
}

// MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandleMockRecorder is the mock recorder for MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle
type MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandleMockRecorder struct {
	mock *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle
}

// NewMockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle creates a new mock instance
func NewMockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle(ctrl *gomock.Controller) *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle {
	mock := &MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle) EXPECT() *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandleMockRecorder {
	return m.recorder
}

// isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle mocks base method
func (m *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle) isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle() {
	m.ctrl.Call(m, "isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle")
}

// isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle indicates an expected call of isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle
func (mr *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandleMockRecorder) isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle", reflect.TypeOf((*MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle)(nil).isSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisSecurityGroupPolicyKeyHandle_PolicyKeyOrHandle)(nil).Size))
}

// MockisSecurityGroupKeyHandle_KeyOrHandle is a mock of isSecurityGroupKeyHandle_KeyOrHandle interface
type MockisSecurityGroupKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisSecurityGroupKeyHandle_KeyOrHandleMockRecorder
}

// MockisSecurityGroupKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisSecurityGroupKeyHandle_KeyOrHandle
type MockisSecurityGroupKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisSecurityGroupKeyHandle_KeyOrHandle
}

// NewMockisSecurityGroupKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisSecurityGroupKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisSecurityGroupKeyHandle_KeyOrHandle {
	mock := &MockisSecurityGroupKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisSecurityGroupKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisSecurityGroupKeyHandle_KeyOrHandle) EXPECT() *MockisSecurityGroupKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isSecurityGroupKeyHandle_KeyOrHandle mocks base method
func (m *MockisSecurityGroupKeyHandle_KeyOrHandle) isSecurityGroupKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isSecurityGroupKeyHandle_KeyOrHandle")
}

// isSecurityGroupKeyHandle_KeyOrHandle indicates an expected call of isSecurityGroupKeyHandle_KeyOrHandle
func (mr *MockisSecurityGroupKeyHandle_KeyOrHandleMockRecorder) isSecurityGroupKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSecurityGroupKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisSecurityGroupKeyHandle_KeyOrHandle)(nil).isSecurityGroupKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisSecurityGroupKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisSecurityGroupKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisSecurityGroupKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisSecurityGroupKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisSecurityGroupKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisSecurityGroupKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisPortKeyHandle_KeyOrHandle is a mock of isPortKeyHandle_KeyOrHandle interface
type MockisPortKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisPortKeyHandle_KeyOrHandleMockRecorder
}

// MockisPortKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisPortKeyHandle_KeyOrHandle
type MockisPortKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisPortKeyHandle_KeyOrHandle
}

// NewMockisPortKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisPortKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisPortKeyHandle_KeyOrHandle {
	mock := &MockisPortKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisPortKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisPortKeyHandle_KeyOrHandle) EXPECT() *MockisPortKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isPortKeyHandle_KeyOrHandle mocks base method
func (m *MockisPortKeyHandle_KeyOrHandle) isPortKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isPortKeyHandle_KeyOrHandle")
}

// isPortKeyHandle_KeyOrHandle indicates an expected call of isPortKeyHandle_KeyOrHandle
func (mr *MockisPortKeyHandle_KeyOrHandleMockRecorder) isPortKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPortKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisPortKeyHandle_KeyOrHandle)(nil).isPortKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisPortKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisPortKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisPortKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisPortKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisPortKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisPortKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisLifKeyHandle_KeyOrHandle is a mock of isLifKeyHandle_KeyOrHandle interface
type MockisLifKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisLifKeyHandle_KeyOrHandleMockRecorder
}

// MockisLifKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisLifKeyHandle_KeyOrHandle
type MockisLifKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisLifKeyHandle_KeyOrHandle
}

// NewMockisLifKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisLifKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisLifKeyHandle_KeyOrHandle {
	mock := &MockisLifKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisLifKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisLifKeyHandle_KeyOrHandle) EXPECT() *MockisLifKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isLifKeyHandle_KeyOrHandle mocks base method
func (m *MockisLifKeyHandle_KeyOrHandle) isLifKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isLifKeyHandle_KeyOrHandle")
}

// isLifKeyHandle_KeyOrHandle indicates an expected call of isLifKeyHandle_KeyOrHandle
func (mr *MockisLifKeyHandle_KeyOrHandleMockRecorder) isLifKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isLifKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisLifKeyHandle_KeyOrHandle)(nil).isLifKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisLifKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisLifKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisLifKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisLifKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisLifKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisLifKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisInterfaceKeyHandle_KeyOrHandle is a mock of isInterfaceKeyHandle_KeyOrHandle interface
type MockisInterfaceKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisInterfaceKeyHandle_KeyOrHandleMockRecorder
}

// MockisInterfaceKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisInterfaceKeyHandle_KeyOrHandle
type MockisInterfaceKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisInterfaceKeyHandle_KeyOrHandle
}

// NewMockisInterfaceKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisInterfaceKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisInterfaceKeyHandle_KeyOrHandle {
	mock := &MockisInterfaceKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisInterfaceKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisInterfaceKeyHandle_KeyOrHandle) EXPECT() *MockisInterfaceKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isInterfaceKeyHandle_KeyOrHandle mocks base method
func (m *MockisInterfaceKeyHandle_KeyOrHandle) isInterfaceKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isInterfaceKeyHandle_KeyOrHandle")
}

// isInterfaceKeyHandle_KeyOrHandle indicates an expected call of isInterfaceKeyHandle_KeyOrHandle
func (mr *MockisInterfaceKeyHandle_KeyOrHandleMockRecorder) isInterfaceKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isInterfaceKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisInterfaceKeyHandle_KeyOrHandle)(nil).isInterfaceKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisInterfaceKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisInterfaceKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisInterfaceKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisInterfaceKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisInterfaceKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisInterfaceKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisEndpointKey_EndpointL2L3Key is a mock of isEndpointKey_EndpointL2L3Key interface
type MockisEndpointKey_EndpointL2L3Key struct {
	ctrl     *gomock.Controller
	recorder *MockisEndpointKey_EndpointL2L3KeyMockRecorder
}

// MockisEndpointKey_EndpointL2L3KeyMockRecorder is the mock recorder for MockisEndpointKey_EndpointL2L3Key
type MockisEndpointKey_EndpointL2L3KeyMockRecorder struct {
	mock *MockisEndpointKey_EndpointL2L3Key
}

// NewMockisEndpointKey_EndpointL2L3Key creates a new mock instance
func NewMockisEndpointKey_EndpointL2L3Key(ctrl *gomock.Controller) *MockisEndpointKey_EndpointL2L3Key {
	mock := &MockisEndpointKey_EndpointL2L3Key{ctrl: ctrl}
	mock.recorder = &MockisEndpointKey_EndpointL2L3KeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisEndpointKey_EndpointL2L3Key) EXPECT() *MockisEndpointKey_EndpointL2L3KeyMockRecorder {
	return m.recorder
}

// isEndpointKey_EndpointL2L3Key mocks base method
func (m *MockisEndpointKey_EndpointL2L3Key) isEndpointKey_EndpointL2L3Key() {
	m.ctrl.Call(m, "isEndpointKey_EndpointL2L3Key")
}

// isEndpointKey_EndpointL2L3Key indicates an expected call of isEndpointKey_EndpointL2L3Key
func (mr *MockisEndpointKey_EndpointL2L3KeyMockRecorder) isEndpointKey_EndpointL2L3Key() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEndpointKey_EndpointL2L3Key", reflect.TypeOf((*MockisEndpointKey_EndpointL2L3Key)(nil).isEndpointKey_EndpointL2L3Key))
}

// MarshalTo mocks base method
func (m *MockisEndpointKey_EndpointL2L3Key) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisEndpointKey_EndpointL2L3KeyMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisEndpointKey_EndpointL2L3Key)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisEndpointKey_EndpointL2L3Key) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisEndpointKey_EndpointL2L3KeyMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisEndpointKey_EndpointL2L3Key)(nil).Size))
}

// MockisEndpointKeyHandle_KeyOrHandle is a mock of isEndpointKeyHandle_KeyOrHandle interface
type MockisEndpointKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisEndpointKeyHandle_KeyOrHandleMockRecorder
}

// MockisEndpointKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisEndpointKeyHandle_KeyOrHandle
type MockisEndpointKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisEndpointKeyHandle_KeyOrHandle
}

// NewMockisEndpointKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisEndpointKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisEndpointKeyHandle_KeyOrHandle {
	mock := &MockisEndpointKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisEndpointKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisEndpointKeyHandle_KeyOrHandle) EXPECT() *MockisEndpointKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isEndpointKeyHandle_KeyOrHandle mocks base method
func (m *MockisEndpointKeyHandle_KeyOrHandle) isEndpointKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isEndpointKeyHandle_KeyOrHandle")
}

// isEndpointKeyHandle_KeyOrHandle indicates an expected call of isEndpointKeyHandle_KeyOrHandle
func (mr *MockisEndpointKeyHandle_KeyOrHandleMockRecorder) isEndpointKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEndpointKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisEndpointKeyHandle_KeyOrHandle)(nil).isEndpointKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisEndpointKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisEndpointKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisEndpointKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisEndpointKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisEndpointKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisEndpointKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisFilterKeyHandle_KeyOrHandle is a mock of isFilterKeyHandle_KeyOrHandle interface
type MockisFilterKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisFilterKeyHandle_KeyOrHandleMockRecorder
}

// MockisFilterKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisFilterKeyHandle_KeyOrHandle
type MockisFilterKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisFilterKeyHandle_KeyOrHandle
}

// NewMockisFilterKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisFilterKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisFilterKeyHandle_KeyOrHandle {
	mock := &MockisFilterKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisFilterKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisFilterKeyHandle_KeyOrHandle) EXPECT() *MockisFilterKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isFilterKeyHandle_KeyOrHandle mocks base method
func (m *MockisFilterKeyHandle_KeyOrHandle) isFilterKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isFilterKeyHandle_KeyOrHandle")
}

// isFilterKeyHandle_KeyOrHandle indicates an expected call of isFilterKeyHandle_KeyOrHandle
func (mr *MockisFilterKeyHandle_KeyOrHandleMockRecorder) isFilterKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isFilterKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisFilterKeyHandle_KeyOrHandle)(nil).isFilterKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisFilterKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisFilterKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisFilterKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisFilterKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisFilterKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisFilterKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisMulticastEntryKey_IpOrMac is a mock of isMulticastEntryKey_IpOrMac interface
type MockisMulticastEntryKey_IpOrMac struct {
	ctrl     *gomock.Controller
	recorder *MockisMulticastEntryKey_IpOrMacMockRecorder
}

// MockisMulticastEntryKey_IpOrMacMockRecorder is the mock recorder for MockisMulticastEntryKey_IpOrMac
type MockisMulticastEntryKey_IpOrMacMockRecorder struct {
	mock *MockisMulticastEntryKey_IpOrMac
}

// NewMockisMulticastEntryKey_IpOrMac creates a new mock instance
func NewMockisMulticastEntryKey_IpOrMac(ctrl *gomock.Controller) *MockisMulticastEntryKey_IpOrMac {
	mock := &MockisMulticastEntryKey_IpOrMac{ctrl: ctrl}
	mock.recorder = &MockisMulticastEntryKey_IpOrMacMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisMulticastEntryKey_IpOrMac) EXPECT() *MockisMulticastEntryKey_IpOrMacMockRecorder {
	return m.recorder
}

// isMulticastEntryKey_IpOrMac mocks base method
func (m *MockisMulticastEntryKey_IpOrMac) isMulticastEntryKey_IpOrMac() {
	m.ctrl.Call(m, "isMulticastEntryKey_IpOrMac")
}

// isMulticastEntryKey_IpOrMac indicates an expected call of isMulticastEntryKey_IpOrMac
func (mr *MockisMulticastEntryKey_IpOrMacMockRecorder) isMulticastEntryKey_IpOrMac() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isMulticastEntryKey_IpOrMac", reflect.TypeOf((*MockisMulticastEntryKey_IpOrMac)(nil).isMulticastEntryKey_IpOrMac))
}

// MarshalTo mocks base method
func (m *MockisMulticastEntryKey_IpOrMac) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisMulticastEntryKey_IpOrMacMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisMulticastEntryKey_IpOrMac)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisMulticastEntryKey_IpOrMac) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisMulticastEntryKey_IpOrMacMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisMulticastEntryKey_IpOrMac)(nil).Size))
}

// MockisMulticastEntryKeyHandle_KeyOrHandle is a mock of isMulticastEntryKeyHandle_KeyOrHandle interface
type MockisMulticastEntryKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisMulticastEntryKeyHandle_KeyOrHandleMockRecorder
}

// MockisMulticastEntryKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisMulticastEntryKeyHandle_KeyOrHandle
type MockisMulticastEntryKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisMulticastEntryKeyHandle_KeyOrHandle
}

// NewMockisMulticastEntryKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisMulticastEntryKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisMulticastEntryKeyHandle_KeyOrHandle {
	mock := &MockisMulticastEntryKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisMulticastEntryKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisMulticastEntryKeyHandle_KeyOrHandle) EXPECT() *MockisMulticastEntryKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isMulticastEntryKeyHandle_KeyOrHandle mocks base method
func (m *MockisMulticastEntryKeyHandle_KeyOrHandle) isMulticastEntryKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isMulticastEntryKeyHandle_KeyOrHandle")
}

// isMulticastEntryKeyHandle_KeyOrHandle indicates an expected call of isMulticastEntryKeyHandle_KeyOrHandle
func (mr *MockisMulticastEntryKeyHandle_KeyOrHandleMockRecorder) isMulticastEntryKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isMulticastEntryKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisMulticastEntryKeyHandle_KeyOrHandle)(nil).isMulticastEntryKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisMulticastEntryKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisMulticastEntryKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisMulticastEntryKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisMulticastEntryKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisMulticastEntryKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisMulticastEntryKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisAclKeyHandle_KeyOrHandle is a mock of isAclKeyHandle_KeyOrHandle interface
type MockisAclKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisAclKeyHandle_KeyOrHandleMockRecorder
}

// MockisAclKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisAclKeyHandle_KeyOrHandle
type MockisAclKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisAclKeyHandle_KeyOrHandle
}

// NewMockisAclKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisAclKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisAclKeyHandle_KeyOrHandle {
	mock := &MockisAclKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisAclKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisAclKeyHandle_KeyOrHandle) EXPECT() *MockisAclKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isAclKeyHandle_KeyOrHandle mocks base method
func (m *MockisAclKeyHandle_KeyOrHandle) isAclKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isAclKeyHandle_KeyOrHandle")
}

// isAclKeyHandle_KeyOrHandle indicates an expected call of isAclKeyHandle_KeyOrHandle
func (mr *MockisAclKeyHandle_KeyOrHandleMockRecorder) isAclKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAclKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisAclKeyHandle_KeyOrHandle)(nil).isAclKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisAclKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisAclKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisAclKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisAclKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisAclKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisAclKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisGftExactMatchProfileKeyHandle_KeyOrHandle is a mock of isGftExactMatchProfileKeyHandle_KeyOrHandle interface
type MockisGftExactMatchProfileKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisGftExactMatchProfileKeyHandle_KeyOrHandleMockRecorder
}

// MockisGftExactMatchProfileKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisGftExactMatchProfileKeyHandle_KeyOrHandle
type MockisGftExactMatchProfileKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisGftExactMatchProfileKeyHandle_KeyOrHandle
}

// NewMockisGftExactMatchProfileKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisGftExactMatchProfileKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisGftExactMatchProfileKeyHandle_KeyOrHandle {
	mock := &MockisGftExactMatchProfileKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisGftExactMatchProfileKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGftExactMatchProfileKeyHandle_KeyOrHandle) EXPECT() *MockisGftExactMatchProfileKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isGftExactMatchProfileKeyHandle_KeyOrHandle mocks base method
func (m *MockisGftExactMatchProfileKeyHandle_KeyOrHandle) isGftExactMatchProfileKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isGftExactMatchProfileKeyHandle_KeyOrHandle")
}

// isGftExactMatchProfileKeyHandle_KeyOrHandle indicates an expected call of isGftExactMatchProfileKeyHandle_KeyOrHandle
func (mr *MockisGftExactMatchProfileKeyHandle_KeyOrHandleMockRecorder) isGftExactMatchProfileKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGftExactMatchProfileKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisGftExactMatchProfileKeyHandle_KeyOrHandle)(nil).isGftExactMatchProfileKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisGftExactMatchProfileKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisGftExactMatchProfileKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisGftExactMatchProfileKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisGftExactMatchProfileKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisGftExactMatchProfileKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisGftExactMatchProfileKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle is a mock of isGftHeaderTranspositionProfileKeyHandle_KeyOrHandle interface
type MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandleMockRecorder
}

// MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle
type MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle
}

// NewMockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle {
	mock := &MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle) EXPECT() *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isGftHeaderTranspositionProfileKeyHandle_KeyOrHandle mocks base method
func (m *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle) isGftHeaderTranspositionProfileKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isGftHeaderTranspositionProfileKeyHandle_KeyOrHandle")
}

// isGftHeaderTranspositionProfileKeyHandle_KeyOrHandle indicates an expected call of isGftHeaderTranspositionProfileKeyHandle_KeyOrHandle
func (mr *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandleMockRecorder) isGftHeaderTranspositionProfileKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGftHeaderTranspositionProfileKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle)(nil).isGftHeaderTranspositionProfileKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisGftHeaderTranspositionProfileKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle is a mock of isGftExactMatchFlowEntryKeyHandle_KeyOrHandle interface
type MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandleMockRecorder
}

// MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle
type MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle
}

// NewMockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle {
	mock := &MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle) EXPECT() *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isGftExactMatchFlowEntryKeyHandle_KeyOrHandle mocks base method
func (m *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle) isGftExactMatchFlowEntryKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isGftExactMatchFlowEntryKeyHandle_KeyOrHandle")
}

// isGftExactMatchFlowEntryKeyHandle_KeyOrHandle indicates an expected call of isGftExactMatchFlowEntryKeyHandle_KeyOrHandle
func (mr *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandleMockRecorder) isGftExactMatchFlowEntryKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isGftExactMatchFlowEntryKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle)(nil).isGftExactMatchFlowEntryKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisGftExactMatchFlowEntryKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisNatPoolKeyHandle_KeyOrHandle is a mock of isNatPoolKeyHandle_KeyOrHandle interface
type MockisNatPoolKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisNatPoolKeyHandle_KeyOrHandleMockRecorder
}

// MockisNatPoolKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisNatPoolKeyHandle_KeyOrHandle
type MockisNatPoolKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisNatPoolKeyHandle_KeyOrHandle
}

// NewMockisNatPoolKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisNatPoolKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisNatPoolKeyHandle_KeyOrHandle {
	mock := &MockisNatPoolKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisNatPoolKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNatPoolKeyHandle_KeyOrHandle) EXPECT() *MockisNatPoolKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isNatPoolKeyHandle_KeyOrHandle mocks base method
func (m *MockisNatPoolKeyHandle_KeyOrHandle) isNatPoolKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isNatPoolKeyHandle_KeyOrHandle")
}

// isNatPoolKeyHandle_KeyOrHandle indicates an expected call of isNatPoolKeyHandle_KeyOrHandle
func (mr *MockisNatPoolKeyHandle_KeyOrHandleMockRecorder) isNatPoolKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNatPoolKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisNatPoolKeyHandle_KeyOrHandle)(nil).isNatPoolKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisNatPoolKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisNatPoolKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisNatPoolKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisNatPoolKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisNatPoolKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisNatPoolKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisNatPolicyKeyHandle_KeyOrHandle is a mock of isNatPolicyKeyHandle_KeyOrHandle interface
type MockisNatPolicyKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisNatPolicyKeyHandle_KeyOrHandleMockRecorder
}

// MockisNatPolicyKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisNatPolicyKeyHandle_KeyOrHandle
type MockisNatPolicyKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisNatPolicyKeyHandle_KeyOrHandle
}

// NewMockisNatPolicyKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisNatPolicyKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisNatPolicyKeyHandle_KeyOrHandle {
	mock := &MockisNatPolicyKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisNatPolicyKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNatPolicyKeyHandle_KeyOrHandle) EXPECT() *MockisNatPolicyKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isNatPolicyKeyHandle_KeyOrHandle mocks base method
func (m *MockisNatPolicyKeyHandle_KeyOrHandle) isNatPolicyKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isNatPolicyKeyHandle_KeyOrHandle")
}

// isNatPolicyKeyHandle_KeyOrHandle indicates an expected call of isNatPolicyKeyHandle_KeyOrHandle
func (mr *MockisNatPolicyKeyHandle_KeyOrHandleMockRecorder) isNatPolicyKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNatPolicyKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisNatPolicyKeyHandle_KeyOrHandle)(nil).isNatPolicyKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisNatPolicyKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisNatPolicyKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisNatPolicyKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisNatPolicyKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisNatPolicyKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisNatPolicyKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisNatMappingKeyHandle_KeyOrHandle is a mock of isNatMappingKeyHandle_KeyOrHandle interface
type MockisNatMappingKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisNatMappingKeyHandle_KeyOrHandleMockRecorder
}

// MockisNatMappingKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisNatMappingKeyHandle_KeyOrHandle
type MockisNatMappingKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisNatMappingKeyHandle_KeyOrHandle
}

// NewMockisNatMappingKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisNatMappingKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisNatMappingKeyHandle_KeyOrHandle {
	mock := &MockisNatMappingKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisNatMappingKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisNatMappingKeyHandle_KeyOrHandle) EXPECT() *MockisNatMappingKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isNatMappingKeyHandle_KeyOrHandle mocks base method
func (m *MockisNatMappingKeyHandle_KeyOrHandle) isNatMappingKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isNatMappingKeyHandle_KeyOrHandle")
}

// isNatMappingKeyHandle_KeyOrHandle indicates an expected call of isNatMappingKeyHandle_KeyOrHandle
func (mr *MockisNatMappingKeyHandle_KeyOrHandleMockRecorder) isNatMappingKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isNatMappingKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisNatMappingKeyHandle_KeyOrHandle)(nil).isNatMappingKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisNatMappingKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisNatMappingKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisNatMappingKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisNatMappingKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisNatMappingKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisNatMappingKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisIpsecRuleKeyHandle_KeyOrHandle is a mock of isIpsecRuleKeyHandle_KeyOrHandle interface
type MockisIpsecRuleKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisIpsecRuleKeyHandle_KeyOrHandleMockRecorder
}

// MockisIpsecRuleKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisIpsecRuleKeyHandle_KeyOrHandle
type MockisIpsecRuleKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisIpsecRuleKeyHandle_KeyOrHandle
}

// NewMockisIpsecRuleKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisIpsecRuleKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisIpsecRuleKeyHandle_KeyOrHandle {
	mock := &MockisIpsecRuleKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisIpsecRuleKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisIpsecRuleKeyHandle_KeyOrHandle) EXPECT() *MockisIpsecRuleKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isIpsecRuleKeyHandle_KeyOrHandle mocks base method
func (m *MockisIpsecRuleKeyHandle_KeyOrHandle) isIpsecRuleKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isIpsecRuleKeyHandle_KeyOrHandle")
}

// isIpsecRuleKeyHandle_KeyOrHandle indicates an expected call of isIpsecRuleKeyHandle_KeyOrHandle
func (mr *MockisIpsecRuleKeyHandle_KeyOrHandleMockRecorder) isIpsecRuleKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIpsecRuleKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisIpsecRuleKeyHandle_KeyOrHandle)(nil).isIpsecRuleKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisIpsecRuleKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisIpsecRuleKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisIpsecRuleKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisIpsecRuleKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisIpsecRuleKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisIpsecRuleKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisIpsecSAEncryptKeyHandle_KeyOrHandle is a mock of isIpsecSAEncryptKeyHandle_KeyOrHandle interface
type MockisIpsecSAEncryptKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisIpsecSAEncryptKeyHandle_KeyOrHandleMockRecorder
}

// MockisIpsecSAEncryptKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisIpsecSAEncryptKeyHandle_KeyOrHandle
type MockisIpsecSAEncryptKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisIpsecSAEncryptKeyHandle_KeyOrHandle
}

// NewMockisIpsecSAEncryptKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisIpsecSAEncryptKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisIpsecSAEncryptKeyHandle_KeyOrHandle {
	mock := &MockisIpsecSAEncryptKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisIpsecSAEncryptKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisIpsecSAEncryptKeyHandle_KeyOrHandle) EXPECT() *MockisIpsecSAEncryptKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isIpsecSAEncryptKeyHandle_KeyOrHandle mocks base method
func (m *MockisIpsecSAEncryptKeyHandle_KeyOrHandle) isIpsecSAEncryptKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isIpsecSAEncryptKeyHandle_KeyOrHandle")
}

// isIpsecSAEncryptKeyHandle_KeyOrHandle indicates an expected call of isIpsecSAEncryptKeyHandle_KeyOrHandle
func (mr *MockisIpsecSAEncryptKeyHandle_KeyOrHandleMockRecorder) isIpsecSAEncryptKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIpsecSAEncryptKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisIpsecSAEncryptKeyHandle_KeyOrHandle)(nil).isIpsecSAEncryptKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisIpsecSAEncryptKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisIpsecSAEncryptKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisIpsecSAEncryptKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisIpsecSAEncryptKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisIpsecSAEncryptKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisIpsecSAEncryptKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisIpsecSADecryptKeyHandle_KeyOrHandle is a mock of isIpsecSADecryptKeyHandle_KeyOrHandle interface
type MockisIpsecSADecryptKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisIpsecSADecryptKeyHandle_KeyOrHandleMockRecorder
}

// MockisIpsecSADecryptKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisIpsecSADecryptKeyHandle_KeyOrHandle
type MockisIpsecSADecryptKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisIpsecSADecryptKeyHandle_KeyOrHandle
}

// NewMockisIpsecSADecryptKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisIpsecSADecryptKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisIpsecSADecryptKeyHandle_KeyOrHandle {
	mock := &MockisIpsecSADecryptKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisIpsecSADecryptKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisIpsecSADecryptKeyHandle_KeyOrHandle) EXPECT() *MockisIpsecSADecryptKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isIpsecSADecryptKeyHandle_KeyOrHandle mocks base method
func (m *MockisIpsecSADecryptKeyHandle_KeyOrHandle) isIpsecSADecryptKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isIpsecSADecryptKeyHandle_KeyOrHandle")
}

// isIpsecSADecryptKeyHandle_KeyOrHandle indicates an expected call of isIpsecSADecryptKeyHandle_KeyOrHandle
func (mr *MockisIpsecSADecryptKeyHandle_KeyOrHandleMockRecorder) isIpsecSADecryptKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIpsecSADecryptKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisIpsecSADecryptKeyHandle_KeyOrHandle)(nil).isIpsecSADecryptKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisIpsecSADecryptKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisIpsecSADecryptKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisIpsecSADecryptKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisIpsecSADecryptKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisIpsecSADecryptKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisIpsecSADecryptKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisTcpProxyRuleKeyHandle_KeyOrHandle is a mock of isTcpProxyRuleKeyHandle_KeyOrHandle interface
type MockisTcpProxyRuleKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisTcpProxyRuleKeyHandle_KeyOrHandleMockRecorder
}

// MockisTcpProxyRuleKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisTcpProxyRuleKeyHandle_KeyOrHandle
type MockisTcpProxyRuleKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisTcpProxyRuleKeyHandle_KeyOrHandle
}

// NewMockisTcpProxyRuleKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisTcpProxyRuleKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisTcpProxyRuleKeyHandle_KeyOrHandle {
	mock := &MockisTcpProxyRuleKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisTcpProxyRuleKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTcpProxyRuleKeyHandle_KeyOrHandle) EXPECT() *MockisTcpProxyRuleKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isTcpProxyRuleKeyHandle_KeyOrHandle mocks base method
func (m *MockisTcpProxyRuleKeyHandle_KeyOrHandle) isTcpProxyRuleKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isTcpProxyRuleKeyHandle_KeyOrHandle")
}

// isTcpProxyRuleKeyHandle_KeyOrHandle indicates an expected call of isTcpProxyRuleKeyHandle_KeyOrHandle
func (mr *MockisTcpProxyRuleKeyHandle_KeyOrHandleMockRecorder) isTcpProxyRuleKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTcpProxyRuleKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisTcpProxyRuleKeyHandle_KeyOrHandle)(nil).isTcpProxyRuleKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisTcpProxyRuleKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTcpProxyRuleKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTcpProxyRuleKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTcpProxyRuleKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTcpProxyRuleKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTcpProxyRuleKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisQosClassKeyHandle_KeyOrHandle is a mock of isQosClassKeyHandle_KeyOrHandle interface
type MockisQosClassKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisQosClassKeyHandle_KeyOrHandleMockRecorder
}

// MockisQosClassKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisQosClassKeyHandle_KeyOrHandle
type MockisQosClassKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisQosClassKeyHandle_KeyOrHandle
}

// NewMockisQosClassKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisQosClassKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisQosClassKeyHandle_KeyOrHandle {
	mock := &MockisQosClassKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisQosClassKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisQosClassKeyHandle_KeyOrHandle) EXPECT() *MockisQosClassKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isQosClassKeyHandle_KeyOrHandle mocks base method
func (m *MockisQosClassKeyHandle_KeyOrHandle) isQosClassKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isQosClassKeyHandle_KeyOrHandle")
}

// isQosClassKeyHandle_KeyOrHandle indicates an expected call of isQosClassKeyHandle_KeyOrHandle
func (mr *MockisQosClassKeyHandle_KeyOrHandleMockRecorder) isQosClassKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isQosClassKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisQosClassKeyHandle_KeyOrHandle)(nil).isQosClassKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisQosClassKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisQosClassKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisQosClassKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisQosClassKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisQosClassKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisQosClassKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisCoppKeyHandle_KeyOrHandle is a mock of isCoppKeyHandle_KeyOrHandle interface
type MockisCoppKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisCoppKeyHandle_KeyOrHandleMockRecorder
}

// MockisCoppKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisCoppKeyHandle_KeyOrHandle
type MockisCoppKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisCoppKeyHandle_KeyOrHandle
}

// NewMockisCoppKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisCoppKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisCoppKeyHandle_KeyOrHandle {
	mock := &MockisCoppKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisCoppKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCoppKeyHandle_KeyOrHandle) EXPECT() *MockisCoppKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isCoppKeyHandle_KeyOrHandle mocks base method
func (m *MockisCoppKeyHandle_KeyOrHandle) isCoppKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isCoppKeyHandle_KeyOrHandle")
}

// isCoppKeyHandle_KeyOrHandle indicates an expected call of isCoppKeyHandle_KeyOrHandle
func (mr *MockisCoppKeyHandle_KeyOrHandleMockRecorder) isCoppKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCoppKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisCoppKeyHandle_KeyOrHandle)(nil).isCoppKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisCoppKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCoppKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCoppKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCoppKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCoppKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCoppKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisAppKeyHandle_KeyOrHandle is a mock of isAppKeyHandle_KeyOrHandle interface
type MockisAppKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisAppKeyHandle_KeyOrHandleMockRecorder
}

// MockisAppKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisAppKeyHandle_KeyOrHandle
type MockisAppKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisAppKeyHandle_KeyOrHandle
}

// NewMockisAppKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisAppKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisAppKeyHandle_KeyOrHandle {
	mock := &MockisAppKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisAppKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisAppKeyHandle_KeyOrHandle) EXPECT() *MockisAppKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isAppKeyHandle_KeyOrHandle mocks base method
func (m *MockisAppKeyHandle_KeyOrHandle) isAppKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isAppKeyHandle_KeyOrHandle")
}

// isAppKeyHandle_KeyOrHandle indicates an expected call of isAppKeyHandle_KeyOrHandle
func (mr *MockisAppKeyHandle_KeyOrHandleMockRecorder) isAppKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAppKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisAppKeyHandle_KeyOrHandle)(nil).isAppKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisAppKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisAppKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisAppKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisAppKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisAppKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisAppKeyHandle_KeyOrHandle)(nil).Size))
}
