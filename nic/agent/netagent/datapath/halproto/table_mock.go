// Code generated by MockGen. DO NOT EDIT.
// Source: table.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisTableMetadata_Metadata is a mock of isTableMetadata_Metadata interface
type MockisTableMetadata_Metadata struct {
	ctrl     *gomock.Controller
	recorder *MockisTableMetadata_MetadataMockRecorder
}

// MockisTableMetadata_MetadataMockRecorder is the mock recorder for MockisTableMetadata_Metadata
type MockisTableMetadata_MetadataMockRecorder struct {
	mock *MockisTableMetadata_Metadata
}

// NewMockisTableMetadata_Metadata creates a new mock instance
func NewMockisTableMetadata_Metadata(ctrl *gomock.Controller) *MockisTableMetadata_Metadata {
	mock := &MockisTableMetadata_Metadata{ctrl: ctrl}
	mock.recorder = &MockisTableMetadata_MetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTableMetadata_Metadata) EXPECT() *MockisTableMetadata_MetadataMockRecorder {
	return m.recorder
}

// isTableMetadata_Metadata mocks base method
func (m *MockisTableMetadata_Metadata) isTableMetadata_Metadata() {
	m.ctrl.Call(m, "isTableMetadata_Metadata")
}

// isTableMetadata_Metadata indicates an expected call of isTableMetadata_Metadata
func (mr *MockisTableMetadata_MetadataMockRecorder) isTableMetadata_Metadata() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTableMetadata_Metadata", reflect.TypeOf((*MockisTableMetadata_Metadata)(nil).isTableMetadata_Metadata))
}

// MarshalTo mocks base method
func (m *MockisTableMetadata_Metadata) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTableMetadata_MetadataMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTableMetadata_Metadata)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTableMetadata_Metadata) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTableMetadata_MetadataMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTableMetadata_Metadata)(nil).Size))
}

// MockisTableIdName_IdOrName is a mock of isTableIdName_IdOrName interface
type MockisTableIdName_IdOrName struct {
	ctrl     *gomock.Controller
	recorder *MockisTableIdName_IdOrNameMockRecorder
}

// MockisTableIdName_IdOrNameMockRecorder is the mock recorder for MockisTableIdName_IdOrName
type MockisTableIdName_IdOrNameMockRecorder struct {
	mock *MockisTableIdName_IdOrName
}

// NewMockisTableIdName_IdOrName creates a new mock instance
func NewMockisTableIdName_IdOrName(ctrl *gomock.Controller) *MockisTableIdName_IdOrName {
	mock := &MockisTableIdName_IdOrName{ctrl: ctrl}
	mock.recorder = &MockisTableIdName_IdOrNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTableIdName_IdOrName) EXPECT() *MockisTableIdName_IdOrNameMockRecorder {
	return m.recorder
}

// isTableIdName_IdOrName mocks base method
func (m *MockisTableIdName_IdOrName) isTableIdName_IdOrName() {
	m.ctrl.Call(m, "isTableIdName_IdOrName")
}

// isTableIdName_IdOrName indicates an expected call of isTableIdName_IdOrName
func (mr *MockisTableIdName_IdOrNameMockRecorder) isTableIdName_IdOrName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTableIdName_IdOrName", reflect.TypeOf((*MockisTableIdName_IdOrName)(nil).isTableIdName_IdOrName))
}

// MarshalTo mocks base method
func (m *MockisTableIdName_IdOrName) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTableIdName_IdOrNameMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTableIdName_IdOrName)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTableIdName_IdOrName) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTableIdName_IdOrNameMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTableIdName_IdOrName)(nil).Size))
}

// MockisTableResponse_TableEntry is a mock of isTableResponse_TableEntry interface
type MockisTableResponse_TableEntry struct {
	ctrl     *gomock.Controller
	recorder *MockisTableResponse_TableEntryMockRecorder
}

// MockisTableResponse_TableEntryMockRecorder is the mock recorder for MockisTableResponse_TableEntry
type MockisTableResponse_TableEntryMockRecorder struct {
	mock *MockisTableResponse_TableEntry
}

// NewMockisTableResponse_TableEntry creates a new mock instance
func NewMockisTableResponse_TableEntry(ctrl *gomock.Controller) *MockisTableResponse_TableEntry {
	mock := &MockisTableResponse_TableEntry{ctrl: ctrl}
	mock.recorder = &MockisTableResponse_TableEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTableResponse_TableEntry) EXPECT() *MockisTableResponse_TableEntryMockRecorder {
	return m.recorder
}

// isTableResponse_TableEntry mocks base method
func (m *MockisTableResponse_TableEntry) isTableResponse_TableEntry() {
	m.ctrl.Call(m, "isTableResponse_TableEntry")
}

// isTableResponse_TableEntry indicates an expected call of isTableResponse_TableEntry
func (mr *MockisTableResponse_TableEntryMockRecorder) isTableResponse_TableEntry() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTableResponse_TableEntry", reflect.TypeOf((*MockisTableResponse_TableEntry)(nil).isTableResponse_TableEntry))
}

// MarshalTo mocks base method
func (m *MockisTableResponse_TableEntry) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTableResponse_TableEntryMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTableResponse_TableEntry)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTableResponse_TableEntry) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTableResponse_TableEntryMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTableResponse_TableEntry)(nil).Size))
}

// MockTableClient is a mock of TableClient interface
type MockTableClient struct {
	ctrl     *gomock.Controller
	recorder *MockTableClientMockRecorder
}

// MockTableClientMockRecorder is the mock recorder for MockTableClient
type MockTableClientMockRecorder struct {
	mock *MockTableClient
}

// NewMockTableClient creates a new mock instance
func NewMockTableClient(ctrl *gomock.Controller) *MockTableClient {
	mock := &MockTableClient{ctrl: ctrl}
	mock.recorder = &MockTableClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTableClient) EXPECT() *MockTableClientMockRecorder {
	return m.recorder
}

// TableMetadataGet mocks base method
func (m *MockTableClient) TableMetadataGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TableMetadataResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TableMetadataGet", varargs...)
	ret0, _ := ret[0].(*TableMetadataResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableMetadataGet indicates an expected call of TableMetadataGet
func (mr *MockTableClientMockRecorder) TableMetadataGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableMetadataGet", reflect.TypeOf((*MockTableClient)(nil).TableMetadataGet), varargs...)
}

// TableGet mocks base method
func (m *MockTableClient) TableGet(ctx context.Context, in *TableRequestMsg, opts ...grpc.CallOption) (*TableResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TableGet", varargs...)
	ret0, _ := ret[0].(*TableResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableGet indicates an expected call of TableGet
func (mr *MockTableClientMockRecorder) TableGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableGet", reflect.TypeOf((*MockTableClient)(nil).TableGet), varargs...)
}

// MockTableServer is a mock of TableServer interface
type MockTableServer struct {
	ctrl     *gomock.Controller
	recorder *MockTableServerMockRecorder
}

// MockTableServerMockRecorder is the mock recorder for MockTableServer
type MockTableServerMockRecorder struct {
	mock *MockTableServer
}

// NewMockTableServer creates a new mock instance
func NewMockTableServer(ctrl *gomock.Controller) *MockTableServer {
	mock := &MockTableServer{ctrl: ctrl}
	mock.recorder = &MockTableServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTableServer) EXPECT() *MockTableServerMockRecorder {
	return m.recorder
}

// TableMetadataGet mocks base method
func (m *MockTableServer) TableMetadataGet(arg0 context.Context, arg1 *Empty) (*TableMetadataResponseMsg, error) {
	ret := m.ctrl.Call(m, "TableMetadataGet", arg0, arg1)
	ret0, _ := ret[0].(*TableMetadataResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableMetadataGet indicates an expected call of TableMetadataGet
func (mr *MockTableServerMockRecorder) TableMetadataGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableMetadataGet", reflect.TypeOf((*MockTableServer)(nil).TableMetadataGet), arg0, arg1)
}

// TableGet mocks base method
func (m *MockTableServer) TableGet(arg0 context.Context, arg1 *TableRequestMsg) (*TableResponseMsg, error) {
	ret := m.ctrl.Call(m, "TableGet", arg0, arg1)
	ret0, _ := ret[0].(*TableResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TableGet indicates an expected call of TableGet
func (mr *MockTableServerMockRecorder) TableGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableGet", reflect.TypeOf((*MockTableServer)(nil).TableGet), arg0, arg1)
}
