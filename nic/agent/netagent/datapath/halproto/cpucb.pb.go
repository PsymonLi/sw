// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/cpucb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CpuCbKeyHandle is used to operate on a cpu_cb either by its key or handle
type CpuCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*CpuCbKeyHandle_CpucbId
	//	*CpuCbKeyHandle_CpucbHandle
	KeyOrHandle isCpuCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *CpuCbKeyHandle) Reset()                    { *m = CpuCbKeyHandle{} }
func (m *CpuCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*CpuCbKeyHandle) ProtoMessage()               {}
func (*CpuCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type isCpuCbKeyHandle_KeyOrHandle interface {
	isCpuCbKeyHandle_KeyOrHandle()
}

type CpuCbKeyHandle_CpucbId struct {
	CpucbId uint32 `protobuf:"varint,1,opt,name=cpucb_id,json=cpucbId,oneof"`
}
type CpuCbKeyHandle_CpucbHandle struct {
	CpucbHandle uint64 `protobuf:"fixed64,2,opt,name=cpucb_handle,json=cpucbHandle,oneof"`
}

func (*CpuCbKeyHandle_CpucbId) isCpuCbKeyHandle_KeyOrHandle()     {}
func (*CpuCbKeyHandle_CpucbHandle) isCpuCbKeyHandle_KeyOrHandle() {}

func (m *CpuCbKeyHandle) GetKeyOrHandle() isCpuCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *CpuCbKeyHandle) GetCpucbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*CpuCbKeyHandle_CpucbId); ok {
		return x.CpucbId
	}
	return 0
}

func (m *CpuCbKeyHandle) GetCpucbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*CpuCbKeyHandle_CpucbHandle); ok {
		return x.CpucbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CpuCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CpuCbKeyHandle_OneofMarshaler, _CpuCbKeyHandle_OneofUnmarshaler, _CpuCbKeyHandle_OneofSizer, []interface{}{
		(*CpuCbKeyHandle_CpucbId)(nil),
		(*CpuCbKeyHandle_CpucbHandle)(nil),
	}
}

func _CpuCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CpuCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *CpuCbKeyHandle_CpucbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.CpucbId))
	case *CpuCbKeyHandle_CpucbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.CpucbHandle))
	case nil:
	default:
		return fmt.Errorf("CpuCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _CpuCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CpuCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.cpucb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &CpuCbKeyHandle_CpucbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.cpucb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &CpuCbKeyHandle_CpucbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _CpuCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CpuCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *CpuCbKeyHandle_CpucbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.CpucbId))
	case *CpuCbKeyHandle_CpucbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CpuCbSpec captures all the cpu_cb level configuration
type CpuCbSpec struct {
	KeyOrHandle *CpuCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	DebugDol    uint32          `protobuf:"varint,2,opt,name=debug_dol,json=debugDol" json:"debug_dol,omitempty"`
}

func (m *CpuCbSpec) Reset()                    { *m = CpuCbSpec{} }
func (m *CpuCbSpec) String() string            { return proto.CompactTextString(m) }
func (*CpuCbSpec) ProtoMessage()               {}
func (*CpuCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CpuCbSpec) GetKeyOrHandle() *CpuCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *CpuCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

// CpuCbRequestMsg is batched add or modify cpucb request
type CpuCbRequestMsg struct {
	Request []*CpuCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CpuCbRequestMsg) Reset()                    { *m = CpuCbRequestMsg{} }
func (m *CpuCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbRequestMsg) ProtoMessage()               {}
func (*CpuCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CpuCbRequestMsg) GetRequest() []*CpuCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// CpuCbStatus is the operational status of a given cpucb
type CpuCbStatus struct {
	CpucbHandle uint64 `protobuf:"fixed64,1,opt,name=cpucb_handle,json=cpucbHandle" json:"cpucb_handle,omitempty"`
}

func (m *CpuCbStatus) Reset()                    { *m = CpuCbStatus{} }
func (m *CpuCbStatus) String() string            { return proto.CompactTextString(m) }
func (*CpuCbStatus) ProtoMessage()               {}
func (*CpuCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *CpuCbStatus) GetCpucbHandle() uint64 {
	if m != nil {
		return m.CpucbHandle
	}
	return 0
}

// CpuCbResponse is response to CpuCbSpec
type CpuCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	CpucbStatus *CpuCbStatus `protobuf:"bytes,2,opt,name=cpucb_status,json=cpucbStatus" json:"cpucb_status,omitempty"`
}

func (m *CpuCbResponse) Reset()                    { *m = CpuCbResponse{} }
func (m *CpuCbResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuCbResponse) ProtoMessage()               {}
func (*CpuCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *CpuCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CpuCbResponse) GetCpucbStatus() *CpuCbStatus {
	if m != nil {
		return m.CpucbStatus
	}
	return nil
}

// CpuCbResponseMsg is batched response to CpuCbRequestMsg
type CpuCbResponseMsg struct {
	Response []*CpuCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CpuCbResponseMsg) Reset()                    { *m = CpuCbResponseMsg{} }
func (m *CpuCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbResponseMsg) ProtoMessage()               {}
func (*CpuCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *CpuCbResponseMsg) GetResponse() []*CpuCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// CpuCbDeleteRequest is used to delete a cpucb
type CpuCbDeleteRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *CpuCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CpuCbDeleteRequest) Reset()                    { *m = CpuCbDeleteRequest{} }
func (m *CpuCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteRequest) ProtoMessage()               {}
func (*CpuCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *CpuCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CpuCbDeleteRequest) GetKeyOrHandle() *CpuCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CpuCbDeleteRequestMsg is used to delete a batch of cpucbs
type CpuCbDeleteRequestMsg struct {
	Request []*CpuCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CpuCbDeleteRequestMsg) Reset()                    { *m = CpuCbDeleteRequestMsg{} }
func (m *CpuCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteRequestMsg) ProtoMessage()               {}
func (*CpuCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *CpuCbDeleteRequestMsg) GetRequest() []*CpuCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// CpuCbDeleteResponseMsg is batched response to CpuCbDeleteRequestMsg
type CpuCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *CpuCbDeleteResponseMsg) Reset()                    { *m = CpuCbDeleteResponseMsg{} }
func (m *CpuCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteResponseMsg) ProtoMessage()               {}
func (*CpuCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *CpuCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// CpuCbGetRequest is used to get information about a cpucb
type CpuCbGetRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *CpuCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CpuCbGetRequest) Reset()                    { *m = CpuCbGetRequest{} }
func (m *CpuCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetRequest) ProtoMessage()               {}
func (*CpuCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *CpuCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CpuCbGetRequest) GetKeyOrHandle() *CpuCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CpuCbGetRequestMsg is batched GET requests for cpucbs
type CpuCbGetRequestMsg struct {
	Request []*CpuCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CpuCbGetRequestMsg) Reset()                    { *m = CpuCbGetRequestMsg{} }
func (m *CpuCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetRequestMsg) ProtoMessage()               {}
func (*CpuCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *CpuCbGetRequestMsg) GetRequest() []*CpuCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// CpuCbStats is the statistics object for each cpucb
type CpuCbStats struct {
}

func (m *CpuCbStats) Reset()                    { *m = CpuCbStats{} }
func (m *CpuCbStats) String() string            { return proto.CompactTextString(m) }
func (*CpuCbStats) ProtoMessage()               {}
func (*CpuCbStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

// CpuCbGetResponse captures all the information about a cpucb
// only if api_status indicates success, other fields are valid
type CpuCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *CpuCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *CpuCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *CpuCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *CpuCbGetResponse) Reset()                    { *m = CpuCbGetResponse{} }
func (m *CpuCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetResponse) ProtoMessage()               {}
func (*CpuCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *CpuCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CpuCbGetResponse) GetSpec() *CpuCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CpuCbGetResponse) GetStatus() *CpuCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CpuCbGetResponse) GetStats() *CpuCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// CpuCbGetResponseMsg is batched response to CpuCbGetRequestMsg
type CpuCbGetResponseMsg struct {
	Response []*CpuCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CpuCbGetResponseMsg) Reset()                    { *m = CpuCbGetResponseMsg{} }
func (m *CpuCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetResponseMsg) ProtoMessage()               {}
func (*CpuCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *CpuCbGetResponseMsg) GetResponse() []*CpuCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*CpuCbKeyHandle)(nil), "cpucb.CpuCbKeyHandle")
	proto.RegisterType((*CpuCbSpec)(nil), "cpucb.CpuCbSpec")
	proto.RegisterType((*CpuCbRequestMsg)(nil), "cpucb.CpuCbRequestMsg")
	proto.RegisterType((*CpuCbStatus)(nil), "cpucb.CpuCbStatus")
	proto.RegisterType((*CpuCbResponse)(nil), "cpucb.CpuCbResponse")
	proto.RegisterType((*CpuCbResponseMsg)(nil), "cpucb.CpuCbResponseMsg")
	proto.RegisterType((*CpuCbDeleteRequest)(nil), "cpucb.CpuCbDeleteRequest")
	proto.RegisterType((*CpuCbDeleteRequestMsg)(nil), "cpucb.CpuCbDeleteRequestMsg")
	proto.RegisterType((*CpuCbDeleteResponseMsg)(nil), "cpucb.CpuCbDeleteResponseMsg")
	proto.RegisterType((*CpuCbGetRequest)(nil), "cpucb.CpuCbGetRequest")
	proto.RegisterType((*CpuCbGetRequestMsg)(nil), "cpucb.CpuCbGetRequestMsg")
	proto.RegisterType((*CpuCbStats)(nil), "cpucb.CpuCbStats")
	proto.RegisterType((*CpuCbGetResponse)(nil), "cpucb.CpuCbGetResponse")
	proto.RegisterType((*CpuCbGetResponseMsg)(nil), "cpucb.CpuCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CpuCb service

type CpuCbClient interface {
	CpuCbCreate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error)
	CpuCbUpdate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error)
	CpuCbDelete(ctx context.Context, in *CpuCbDeleteRequestMsg, opts ...grpc.CallOption) (*CpuCbDeleteResponseMsg, error)
	CpuCbGet(ctx context.Context, in *CpuCbGetRequestMsg, opts ...grpc.CallOption) (*CpuCbGetResponseMsg, error)
}

type cpuCbClient struct {
	cc *grpc.ClientConn
}

func NewCpuCbClient(cc *grpc.ClientConn) CpuCbClient {
	return &cpuCbClient{cc}
}

func (c *cpuCbClient) CpuCbCreate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error) {
	out := new(CpuCbResponseMsg)
	err := grpc.Invoke(ctx, "/cpucb.CpuCb/CpuCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuCbClient) CpuCbUpdate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error) {
	out := new(CpuCbResponseMsg)
	err := grpc.Invoke(ctx, "/cpucb.CpuCb/CpuCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuCbClient) CpuCbDelete(ctx context.Context, in *CpuCbDeleteRequestMsg, opts ...grpc.CallOption) (*CpuCbDeleteResponseMsg, error) {
	out := new(CpuCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/cpucb.CpuCb/CpuCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuCbClient) CpuCbGet(ctx context.Context, in *CpuCbGetRequestMsg, opts ...grpc.CallOption) (*CpuCbGetResponseMsg, error) {
	out := new(CpuCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/cpucb.CpuCb/CpuCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CpuCb service

type CpuCbServer interface {
	CpuCbCreate(context.Context, *CpuCbRequestMsg) (*CpuCbResponseMsg, error)
	CpuCbUpdate(context.Context, *CpuCbRequestMsg) (*CpuCbResponseMsg, error)
	CpuCbDelete(context.Context, *CpuCbDeleteRequestMsg) (*CpuCbDeleteResponseMsg, error)
	CpuCbGet(context.Context, *CpuCbGetRequestMsg) (*CpuCbGetResponseMsg, error)
}

func RegisterCpuCbServer(s *grpc.Server, srv CpuCbServer) {
	s.RegisterService(&_CpuCb_serviceDesc, srv)
}

func _CpuCb_CpuCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuCbServer).CpuCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpucb.CpuCb/CpuCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuCbServer).CpuCbCreate(ctx, req.(*CpuCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuCb_CpuCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuCbServer).CpuCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpucb.CpuCb/CpuCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuCbServer).CpuCbUpdate(ctx, req.(*CpuCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuCb_CpuCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuCbServer).CpuCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpucb.CpuCb/CpuCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuCbServer).CpuCbDelete(ctx, req.(*CpuCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuCb_CpuCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuCbServer).CpuCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpucb.CpuCb/CpuCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuCbServer).CpuCbGet(ctx, req.(*CpuCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CpuCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpucb.CpuCb",
	HandlerType: (*CpuCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CpuCbCreate",
			Handler:    _CpuCb_CpuCbCreate_Handler,
		},
		{
			MethodName: "CpuCbUpdate",
			Handler:    _CpuCb_CpuCbUpdate_Handler,
		},
		{
			MethodName: "CpuCbDelete",
			Handler:    _CpuCb_CpuCbDelete_Handler,
		},
		{
			MethodName: "CpuCbGet",
			Handler:    _CpuCb_CpuCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/cpucb.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/cpucb.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdf, 0x6f, 0x12, 0x41,
	0x10, 0x2e, 0x3f, 0x0b, 0x43, 0x69, 0x71, 0x15, 0x0a, 0xa8, 0x09, 0xae, 0x1a, 0x49, 0x1f, 0xa0,
	0xa1, 0xf1, 0xc1, 0x07, 0x13, 0x2d, 0x44, 0xa9, 0x96, 0x34, 0x39, 0xe3, 0x8b, 0x2f, 0xe4, 0xb8,
	0x9b, 0x00, 0xf6, 0xe4, 0xce, 0xdb, 0x45, 0xc3, 0x3f, 0xe3, 0x9f, 0xe2, 0xdf, 0x66, 0x6e, 0x76,
	0x8f, 0xe3, 0x0e, 0x88, 0xa6, 0x0f, 0x3e, 0x71, 0xbb, 0xf3, 0xcd, 0x37, 0x33, 0xdf, 0x7c, 0x1b,
	0xa0, 0xb1, 0x98, 0x5b, 0x5d, 0xcf, 0x77, 0xa5, 0xdb, 0x9d, 0x99, 0x4e, 0xd7, 0xf2, 0x96, 0xd6,
	0xa4, 0x43, 0x67, 0x96, 0xa3, 0x43, 0xb3, 0x1a, 0x21, 0xe4, 0xca, 0x43, 0xa1, 0xa2, 0xdc, 0x82,
	0xe3, 0xbe, 0xb7, 0xec, 0x4f, 0x3e, 0xe2, 0x6a, 0x68, 0x2e, 0x6c, 0x07, 0xd9, 0x43, 0x28, 0x50,
	0xc6, 0x78, 0x6e, 0xd7, 0x53, 0xad, 0x54, 0xbb, 0x3c, 0x3c, 0x30, 0x0e, 0xe9, 0xe6, 0xca, 0x66,
	0x4f, 0xe1, 0x48, 0x05, 0x67, 0x04, 0xae, 0xa7, 0x5b, 0xa9, 0x76, 0x7e, 0x78, 0x60, 0x94, 0xe8,
	0x56, 0x31, 0x5c, 0x9e, 0x40, 0xf9, 0x16, 0x57, 0x63, 0xd7, 0xd7, 0x28, 0x6e, 0x41, 0x91, 0x8a,
	0x7c, 0xf2, 0xd0, 0x62, 0xaf, 0x12, 0x51, 0x2a, 0x52, 0xea, 0x55, 0x3b, 0xaa, 0xe9, 0x78, 0x37,
	0x46, 0xe9, 0x16, 0x57, 0x37, 0xfe, 0xba, 0xb5, 0xa2, 0x8d, 0x93, 0xe5, 0x74, 0x6c, 0xbb, 0x0e,
	0x95, 0x2e, 0x1b, 0x05, 0xba, 0x18, 0xb8, 0x0e, 0x7f, 0x0d, 0x27, 0x94, 0x6b, 0xe0, 0xf7, 0x25,
	0x0a, 0x39, 0x12, 0x53, 0x76, 0x06, 0x87, 0xbe, 0x3a, 0xd5, 0x53, 0xad, 0x4c, 0xbb, 0xd4, 0xab,
	0x6c, 0x16, 0x09, 0xba, 0x31, 0x42, 0x00, 0x3f, 0x87, 0x92, 0xba, 0x95, 0xa6, 0x5c, 0x0a, 0xf6,
	0x24, 0x31, 0x68, 0xd0, 0x64, 0x3e, 0x36, 0x26, 0xff, 0x09, 0x65, 0x5d, 0x50, 0x78, 0xee, 0x42,
	0x20, 0xeb, 0x02, 0x98, 0xde, 0x7c, 0x2c, 0x88, 0x81, 0x32, 0x8e, 0x7b, 0x95, 0x8e, 0x52, 0xfb,
	0xad, 0x37, 0x57, 0xcc, 0x46, 0xd1, 0x0c, 0x3f, 0xd9, 0xcb, 0xb0, 0x88, 0x4e, 0x49, 0x93, 0x12,
	0x2c, 0xd6, 0xa4, 0x4a, 0x52, 0x85, 0xd5, 0x81, 0x0f, 0xa0, 0x12, 0x2b, 0x1c, 0x8c, 0x7a, 0x0e,
	0x05, 0x5f, 0x1f, 0xf5, 0xac, 0x0f, 0x36, 0x69, 0x42, 0xa8, 0xb1, 0x46, 0xf1, 0x1f, 0xc0, 0x28,
	0x34, 0x40, 0x07, 0x25, 0x6a, 0xd5, 0xd8, 0x73, 0xc8, 0x7e, 0x43, 0x69, 0xea, 0xa5, 0xdc, 0xd3,
	0xdd, 0xdf, 0x4c, 0xbe, 0xa2, 0x25, 0x47, 0x28, 0x4d, 0x83, 0xc2, 0xdb, 0x4b, 0x4c, 0xff, 0xeb,
	0x12, 0xf9, 0x35, 0x54, 0xb7, 0xeb, 0x06, 0x23, 0x5c, 0x24, 0xb7, 0xd5, 0xd8, 0x64, 0x8b, 0xc1,
	0xa3, 0xb5, 0x5d, 0x41, 0x2d, 0x16, 0x8e, 0x14, 0x49, 0x6e, 0x23, 0xf3, 0x97, 0x6d, 0x70, 0xa1,
	0x0d, 0xf4, 0x1e, 0xe5, 0xff, 0x53, 0xe3, 0x9d, 0xde, 0x42, 0x54, 0x54, 0x6d, 0x33, 0x21, 0x45,
	0x6d, 0x93, 0x2a, 0xc2, 0x46, 0x3a, 0x1c, 0x01, 0xac, 0xfd, 0x22, 0xf8, 0xef, 0x94, 0xb6, 0x08,
	0x41, 0xef, 0x6a, 0xcf, 0x67, 0x90, 0x15, 0x1e, 0x5a, 0x7a, 0x9a, 0xed, 0xb7, 0x43, 0x51, 0x76,
	0x06, 0x79, 0x4d, 0x99, 0xd9, 0x6b, 0x5f, 0x8d, 0x60, 0x2f, 0x20, 0x17, 0x7c, 0x89, 0x7a, 0x56,
	0x0b, 0x9a, 0x80, 0x0a, 0x43, 0xc5, 0xf9, 0x07, 0xb8, 0x9f, 0xec, 0x5f, 0x59, 0x24, 0xe9, 0xf2,
	0xd3, 0x2d, 0x61, 0x92, 0x46, 0xef, 0xfd, 0x4a, 0x43, 0x8e, 0xc2, 0xec, 0x8d, 0x7e, 0xe3, 0x7d,
	0x1f, 0x4d, 0x89, 0xac, 0x16, 0x7f, 0x21, 0xa1, 0xfa, 0xcd, 0xd3, 0x5d, 0x2f, 0x67, 0x24, 0xa6,
	0xfc, 0x60, 0xcd, 0xf0, 0xd9, 0xb3, 0xef, 0xc8, 0x70, 0xad, 0x19, 0x94, 0x61, 0xd9, 0xa3, 0xbd,
	0x1e, 0x0f, 0x78, 0x1e, 0xef, 0x8a, 0x6e, 0xb2, 0xf5, 0xa1, 0x10, 0x4e, 0xce, 0x1a, 0xbb, 0x3d,
	0x12, 0xf0, 0x34, 0xf7, 0xa8, 0x44, 0x24, 0x97, 0xf0, 0xa5, 0x30, 0x33, 0x1d, 0xfa, 0x3f, 0x98,
	0xe4, 0xe9, 0xe7, 0xe2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x0e, 0x3b, 0xd4, 0x51, 0x06,
	0x00, 0x00,
}
