// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cpucb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// CpuCbKeyHandle is used to operate on a cpu_cb either by its key or handle
type CpuCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*CpuCbKeyHandle_CpucbId
	//	*CpuCbKeyHandle_CpucbHandle
	KeyOrHandle isCpuCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *CpuCbKeyHandle) Reset()                    { *m = CpuCbKeyHandle{} }
func (m *CpuCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*CpuCbKeyHandle) ProtoMessage()               {}
func (*CpuCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{0} }

type isCpuCbKeyHandle_KeyOrHandle interface {
	isCpuCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CpuCbKeyHandle_CpucbId struct {
	CpucbId uint32 `protobuf:"varint,1,opt,name=cpucb_id,json=cpucbId,proto3,oneof"`
}
type CpuCbKeyHandle_CpucbHandle struct {
	CpucbHandle uint64 `protobuf:"fixed64,2,opt,name=cpucb_handle,json=cpucbHandle,proto3,oneof"`
}

func (*CpuCbKeyHandle_CpucbId) isCpuCbKeyHandle_KeyOrHandle()     {}
func (*CpuCbKeyHandle_CpucbHandle) isCpuCbKeyHandle_KeyOrHandle() {}

func (m *CpuCbKeyHandle) GetKeyOrHandle() isCpuCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *CpuCbKeyHandle) GetCpucbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*CpuCbKeyHandle_CpucbId); ok {
		return x.CpucbId
	}
	return 0
}

func (m *CpuCbKeyHandle) GetCpucbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*CpuCbKeyHandle_CpucbHandle); ok {
		return x.CpucbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CpuCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CpuCbKeyHandle_OneofMarshaler, _CpuCbKeyHandle_OneofUnmarshaler, _CpuCbKeyHandle_OneofSizer, []interface{}{
		(*CpuCbKeyHandle_CpucbId)(nil),
		(*CpuCbKeyHandle_CpucbHandle)(nil),
	}
}

func _CpuCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CpuCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *CpuCbKeyHandle_CpucbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.CpucbId))
	case *CpuCbKeyHandle_CpucbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.CpucbHandle))
	case nil:
	default:
		return fmt.Errorf("CpuCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _CpuCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CpuCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.cpucb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &CpuCbKeyHandle_CpucbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.cpucb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &CpuCbKeyHandle_CpucbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _CpuCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CpuCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *CpuCbKeyHandle_CpucbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.CpucbId))
	case *CpuCbKeyHandle_CpucbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CpuCbSpec captures all the cpu_cb level configuration
type CpuCbSpec struct {
	KeyOrHandle *CpuCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	DebugDol    uint32          `protobuf:"varint,2,opt,name=debug_dol,json=debugDol,proto3" json:"debug_dol,omitempty"`
}

func (m *CpuCbSpec) Reset()                    { *m = CpuCbSpec{} }
func (m *CpuCbSpec) String() string            { return proto.CompactTextString(m) }
func (*CpuCbSpec) ProtoMessage()               {}
func (*CpuCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{1} }

func (m *CpuCbSpec) GetKeyOrHandle() *CpuCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *CpuCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

// CpuCbRequestMsg is batched add or modify cpucb request
type CpuCbRequestMsg struct {
	Request []*CpuCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CpuCbRequestMsg) Reset()                    { *m = CpuCbRequestMsg{} }
func (m *CpuCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbRequestMsg) ProtoMessage()               {}
func (*CpuCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{2} }

func (m *CpuCbRequestMsg) GetRequest() []*CpuCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// CpuCbStatus is the operational status of a given cpucb
type CpuCbStatus struct {
	CpucbHandle uint64 `protobuf:"fixed64,1,opt,name=cpucb_handle,json=cpucbHandle,proto3" json:"cpucb_handle,omitempty"`
}

func (m *CpuCbStatus) Reset()                    { *m = CpuCbStatus{} }
func (m *CpuCbStatus) String() string            { return proto.CompactTextString(m) }
func (*CpuCbStatus) ProtoMessage()               {}
func (*CpuCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{3} }

func (m *CpuCbStatus) GetCpucbHandle() uint64 {
	if m != nil {
		return m.CpucbHandle
	}
	return 0
}

// CpuCbResponse is response to CpuCbSpec
type CpuCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	CpucbStatus *CpuCbStatus `protobuf:"bytes,2,opt,name=cpucb_status,json=cpucbStatus" json:"cpucb_status,omitempty"`
}

func (m *CpuCbResponse) Reset()                    { *m = CpuCbResponse{} }
func (m *CpuCbResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuCbResponse) ProtoMessage()               {}
func (*CpuCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{4} }

func (m *CpuCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CpuCbResponse) GetCpucbStatus() *CpuCbStatus {
	if m != nil {
		return m.CpucbStatus
	}
	return nil
}

// CpuCbResponseMsg is batched response to CpuCbRequestMsg
type CpuCbResponseMsg struct {
	Response []*CpuCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CpuCbResponseMsg) Reset()                    { *m = CpuCbResponseMsg{} }
func (m *CpuCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbResponseMsg) ProtoMessage()               {}
func (*CpuCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{5} }

func (m *CpuCbResponseMsg) GetResponse() []*CpuCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// CpuCbDeleteRequest is used to delete a cpucb
type CpuCbDeleteRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *CpuCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CpuCbDeleteRequest) Reset()                    { *m = CpuCbDeleteRequest{} }
func (m *CpuCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteRequest) ProtoMessage()               {}
func (*CpuCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{6} }

func (m *CpuCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CpuCbDeleteRequest) GetKeyOrHandle() *CpuCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CpuCbDeleteRequestMsg is used to delete a batch of cpucbs
type CpuCbDeleteRequestMsg struct {
	Request []*CpuCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CpuCbDeleteRequestMsg) Reset()                    { *m = CpuCbDeleteRequestMsg{} }
func (m *CpuCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteRequestMsg) ProtoMessage()               {}
func (*CpuCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{7} }

func (m *CpuCbDeleteRequestMsg) GetRequest() []*CpuCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// CpuCbDeleteResponseMsg is batched response to CpuCbDeleteRequestMsg
type CpuCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *CpuCbDeleteResponseMsg) Reset()                    { *m = CpuCbDeleteResponseMsg{} }
func (m *CpuCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbDeleteResponseMsg) ProtoMessage()               {}
func (*CpuCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{8} }

func (m *CpuCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// CpuCbGetRequest is used to get information about a cpucb
type CpuCbGetRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *CpuCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *CpuCbGetRequest) Reset()                    { *m = CpuCbGetRequest{} }
func (m *CpuCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetRequest) ProtoMessage()               {}
func (*CpuCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{9} }

func (m *CpuCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CpuCbGetRequest) GetKeyOrHandle() *CpuCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// CpuCbGetRequestMsg is batched GET requests for cpucbs
type CpuCbGetRequestMsg struct {
	Request []*CpuCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CpuCbGetRequestMsg) Reset()                    { *m = CpuCbGetRequestMsg{} }
func (m *CpuCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetRequestMsg) ProtoMessage()               {}
func (*CpuCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{10} }

func (m *CpuCbGetRequestMsg) GetRequest() []*CpuCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// CpuCbStats is the statistics object for each cpucb
type CpuCbStats struct {
}

func (m *CpuCbStats) Reset()                    { *m = CpuCbStats{} }
func (m *CpuCbStats) String() string            { return proto.CompactTextString(m) }
func (*CpuCbStats) ProtoMessage()               {}
func (*CpuCbStats) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{11} }

// CpuCbGetResponse captures all the information about a cpucb
// only if api_status indicates success, other fields are valid
type CpuCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *CpuCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *CpuCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *CpuCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *CpuCbGetResponse) Reset()                    { *m = CpuCbGetResponse{} }
func (m *CpuCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetResponse) ProtoMessage()               {}
func (*CpuCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{12} }

func (m *CpuCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CpuCbGetResponse) GetSpec() *CpuCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CpuCbGetResponse) GetStatus() *CpuCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CpuCbGetResponse) GetStats() *CpuCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// CpuCbGetResponseMsg is batched response to CpuCbGetRequestMsg
type CpuCbGetResponseMsg struct {
	Response []*CpuCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CpuCbGetResponseMsg) Reset()                    { *m = CpuCbGetResponseMsg{} }
func (m *CpuCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CpuCbGetResponseMsg) ProtoMessage()               {}
func (*CpuCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorCpucb, []int{13} }

func (m *CpuCbGetResponseMsg) GetResponse() []*CpuCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*CpuCbKeyHandle)(nil), "cpucb.CpuCbKeyHandle")
	proto.RegisterType((*CpuCbSpec)(nil), "cpucb.CpuCbSpec")
	proto.RegisterType((*CpuCbRequestMsg)(nil), "cpucb.CpuCbRequestMsg")
	proto.RegisterType((*CpuCbStatus)(nil), "cpucb.CpuCbStatus")
	proto.RegisterType((*CpuCbResponse)(nil), "cpucb.CpuCbResponse")
	proto.RegisterType((*CpuCbResponseMsg)(nil), "cpucb.CpuCbResponseMsg")
	proto.RegisterType((*CpuCbDeleteRequest)(nil), "cpucb.CpuCbDeleteRequest")
	proto.RegisterType((*CpuCbDeleteRequestMsg)(nil), "cpucb.CpuCbDeleteRequestMsg")
	proto.RegisterType((*CpuCbDeleteResponseMsg)(nil), "cpucb.CpuCbDeleteResponseMsg")
	proto.RegisterType((*CpuCbGetRequest)(nil), "cpucb.CpuCbGetRequest")
	proto.RegisterType((*CpuCbGetRequestMsg)(nil), "cpucb.CpuCbGetRequestMsg")
	proto.RegisterType((*CpuCbStats)(nil), "cpucb.CpuCbStats")
	proto.RegisterType((*CpuCbGetResponse)(nil), "cpucb.CpuCbGetResponse")
	proto.RegisterType((*CpuCbGetResponseMsg)(nil), "cpucb.CpuCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CpuCb service

type CpuCbClient interface {
	CpuCbCreate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error)
	CpuCbUpdate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error)
	CpuCbDelete(ctx context.Context, in *CpuCbDeleteRequestMsg, opts ...grpc.CallOption) (*CpuCbDeleteResponseMsg, error)
	CpuCbGet(ctx context.Context, in *CpuCbGetRequestMsg, opts ...grpc.CallOption) (*CpuCbGetResponseMsg, error)
}

type cpuCbClient struct {
	cc *grpc.ClientConn
}

func NewCpuCbClient(cc *grpc.ClientConn) CpuCbClient {
	return &cpuCbClient{cc}
}

func (c *cpuCbClient) CpuCbCreate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error) {
	out := new(CpuCbResponseMsg)
	err := grpc.Invoke(ctx, "/cpucb.CpuCb/CpuCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuCbClient) CpuCbUpdate(ctx context.Context, in *CpuCbRequestMsg, opts ...grpc.CallOption) (*CpuCbResponseMsg, error) {
	out := new(CpuCbResponseMsg)
	err := grpc.Invoke(ctx, "/cpucb.CpuCb/CpuCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuCbClient) CpuCbDelete(ctx context.Context, in *CpuCbDeleteRequestMsg, opts ...grpc.CallOption) (*CpuCbDeleteResponseMsg, error) {
	out := new(CpuCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/cpucb.CpuCb/CpuCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cpuCbClient) CpuCbGet(ctx context.Context, in *CpuCbGetRequestMsg, opts ...grpc.CallOption) (*CpuCbGetResponseMsg, error) {
	out := new(CpuCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/cpucb.CpuCb/CpuCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CpuCb service

type CpuCbServer interface {
	CpuCbCreate(context.Context, *CpuCbRequestMsg) (*CpuCbResponseMsg, error)
	CpuCbUpdate(context.Context, *CpuCbRequestMsg) (*CpuCbResponseMsg, error)
	CpuCbDelete(context.Context, *CpuCbDeleteRequestMsg) (*CpuCbDeleteResponseMsg, error)
	CpuCbGet(context.Context, *CpuCbGetRequestMsg) (*CpuCbGetResponseMsg, error)
}

func RegisterCpuCbServer(s *grpc.Server, srv CpuCbServer) {
	s.RegisterService(&_CpuCb_serviceDesc, srv)
}

func _CpuCb_CpuCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuCbServer).CpuCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpucb.CpuCb/CpuCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuCbServer).CpuCbCreate(ctx, req.(*CpuCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuCb_CpuCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuCbServer).CpuCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpucb.CpuCb/CpuCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuCbServer).CpuCbUpdate(ctx, req.(*CpuCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuCb_CpuCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuCbServer).CpuCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpucb.CpuCb/CpuCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuCbServer).CpuCbDelete(ctx, req.(*CpuCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _CpuCb_CpuCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpuCbServer).CpuCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpucb.CpuCb/CpuCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpuCbServer).CpuCbGet(ctx, req.(*CpuCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CpuCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpucb.CpuCb",
	HandlerType: (*CpuCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CpuCbCreate",
			Handler:    _CpuCb_CpuCbCreate_Handler,
		},
		{
			MethodName: "CpuCbUpdate",
			Handler:    _CpuCb_CpuCbUpdate_Handler,
		},
		{
			MethodName: "CpuCbDelete",
			Handler:    _CpuCb_CpuCbDelete_Handler,
		},
		{
			MethodName: "CpuCbGet",
			Handler:    _CpuCb_CpuCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpucb.proto",
}

func (m *CpuCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *CpuCbKeyHandle_CpucbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintCpucb(dAtA, i, uint64(m.CpucbId))
	return i, nil
}
func (m *CpuCbKeyHandle_CpucbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.CpucbHandle))
	i += 8
	return i, nil
}
func (m *CpuCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DebugDol != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.DebugDol))
	}
	return i, nil
}

func (m *CpuCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpucb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CpuCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CpucbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.CpucbHandle))
		i += 8
	}
	return i, nil
}

func (m *CpuCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.CpucbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.CpucbStatus.Size()))
		n3, err := m.CpucbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *CpuCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpucb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CpuCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.Meta.Size()))
		n4, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n5, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *CpuCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpucb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CpuCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA7 := make([]byte, len(m.ApiStatus)*10)
		var j6 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *CpuCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.Meta.Size()))
		n8, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n9, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *CpuCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpucb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CpuCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CpuCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.Spec.Size()))
		n10, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCpucb(dAtA, i, uint64(m.Stats.Size()))
		n12, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *CpuCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCpucb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintCpucb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CpuCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *CpuCbKeyHandle_CpucbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCpucb(uint64(m.CpucbId))
	return n
}
func (m *CpuCbKeyHandle_CpucbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *CpuCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovCpucb(uint64(l))
	}
	if m.DebugDol != 0 {
		n += 1 + sovCpucb(uint64(m.DebugDol))
	}
	return n
}

func (m *CpuCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpucb(uint64(l))
		}
	}
	return n
}

func (m *CpuCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.CpucbHandle != 0 {
		n += 9
	}
	return n
}

func (m *CpuCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpucb(uint64(m.ApiStatus))
	}
	if m.CpucbStatus != nil {
		l = m.CpucbStatus.Size()
		n += 1 + l + sovCpucb(uint64(l))
	}
	return n
}

func (m *CpuCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCpucb(uint64(l))
		}
	}
	return n
}

func (m *CpuCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCpucb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovCpucb(uint64(l))
	}
	return n
}

func (m *CpuCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpucb(uint64(l))
		}
	}
	return n
}

func (m *CpuCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovCpucb(uint64(e))
		}
		n += 1 + sovCpucb(uint64(l)) + l
	}
	return n
}

func (m *CpuCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovCpucb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovCpucb(uint64(l))
	}
	return n
}

func (m *CpuCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovCpucb(uint64(l))
		}
	}
	return n
}

func (m *CpuCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CpuCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovCpucb(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovCpucb(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovCpucb(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovCpucb(uint64(l))
	}
	return n
}

func (m *CpuCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovCpucb(uint64(l))
		}
	}
	return n
}

func sovCpucb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCpucb(x uint64) (n int) {
	return sovCpucb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CpuCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpucbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &CpuCbKeyHandle_CpucbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpucbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &CpuCbKeyHandle_CpucbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &CpuCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugDol", wireType)
			}
			m.DebugDol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugDol |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CpuCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpucbHandle", wireType)
			}
			m.CpucbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.CpucbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpucbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CpucbStatus == nil {
				m.CpucbStatus = &CpuCbStatus{}
			}
			if err := m.CpucbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CpuCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &CpuCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CpuCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCpucb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCpucb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCpucb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCpucb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &CpuCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CpuCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &CpuCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &CpuCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &CpuCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpucb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CpuCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpucb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCpucb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCpucb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCpucb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpucb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCpucb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCpucb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCpucb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCpucb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCpucb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cpucb.proto", fileDescriptorCpucb) }

var fileDescriptorCpucb = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcf, 0x6f, 0x12, 0x41,
	0x14, 0x66, 0xf9, 0x55, 0x78, 0x5b, 0x5a, 0x1c, 0x2d, 0xa5, 0xa8, 0x04, 0x47, 0x8d, 0xa4, 0x07,
	0x6c, 0x68, 0x3c, 0x78, 0x30, 0xd1, 0x42, 0x94, 0x6a, 0x49, 0x93, 0x35, 0x5e, 0xbc, 0x90, 0x65,
	0x77, 0x42, 0xb1, 0xd8, 0x1d, 0x77, 0x06, 0x0d, 0xff, 0x89, 0x27, 0xff, 0x14, 0xcf, 0x1e, 0xfd,
	0x13, 0x0c, 0xfe, 0x23, 0x66, 0xdf, 0xcc, 0xc2, 0xee, 0x02, 0xd1, 0xf4, 0xe0, 0x89, 0x9d, 0x79,
	0xdf, 0x7c, 0xdf, 0x9b, 0xef, 0x7d, 0x13, 0xc0, 0x74, 0xf8, 0xd4, 0x19, 0xb6, 0xb8, 0xef, 0x49,
	0x8f, 0xe4, 0x70, 0x51, 0x33, 0xe5, 0x8c, 0x33, 0xa1, 0xf6, 0xa8, 0x03, 0x3b, 0x1d, 0x3e, 0xed,
	0x0c, 0xdf, 0xb0, 0x59, 0xcf, 0xbe, 0x72, 0x27, 0x8c, 0xdc, 0x86, 0x02, 0xe2, 0x06, 0x63, 0xb7,
	0x6a, 0x34, 0x8c, 0x66, 0xa9, 0x97, 0xb2, 0xb6, 0x70, 0xe7, 0xd4, 0x25, 0xf7, 0x61, 0x5b, 0x15,
	0x2f, 0x10, 0x5c, 0x4d, 0x37, 0x8c, 0x66, 0xbe, 0x97, 0xb2, 0x94, 0x8e, 0x62, 0x38, 0xd9, 0x85,
	0xd2, 0x25, 0x9b, 0x0d, 0x3c, 0x5f, 0xa3, 0xa8, 0x03, 0x45, 0x14, 0x79, 0xcb, 0x99, 0x43, 0x9e,
	0x26, 0xaa, 0x28, 0x62, 0xb6, 0xf7, 0x5a, 0xaa, 0xd5, 0x78, 0x37, 0x96, 0x79, 0xc9, 0x66, 0xe7,
	0xfe, 0xa2, 0xb5, 0xa2, 0xcb, 0x86, 0xd3, 0xd1, 0xc0, 0xf5, 0x26, 0x28, 0x5d, 0xb2, 0x0a, 0xb8,
	0xd1, 0xf5, 0x26, 0xf4, 0x19, 0xec, 0xe2, 0x59, 0x8b, 0x7d, 0x9a, 0x32, 0x21, 0xfb, 0x62, 0x44,
	0x0e, 0x61, 0xcb, 0x57, 0xab, 0xaa, 0xd1, 0xc8, 0x34, 0xcd, 0x76, 0x39, 0x2a, 0x12, 0x74, 0x63,
	0x85, 0x00, 0x7a, 0x04, 0xa6, 0xda, 0x95, 0xb6, 0x9c, 0x0a, 0x72, 0x2f, 0x71, 0xd1, 0xa0, 0xc9,
	0x7c, 0xec, 0x9a, 0xf4, 0x0b, 0x94, 0xb4, 0xa0, 0xe0, 0xde, 0x95, 0x60, 0xe4, 0x31, 0x80, 0xcd,
	0xc7, 0x03, 0x81, 0x0c, 0x78, 0x62, 0xa7, 0x5d, 0x6e, 0x29, 0xb7, 0x5f, 0xf0, 0xb1, 0x62, 0xb6,
	0x8a, 0x76, 0xf8, 0x49, 0x9e, 0x84, 0x22, 0xfa, 0x48, 0x1a, 0x9d, 0x20, 0xb1, 0x26, 0xd5, 0x21,
	0x25, 0xac, 0x16, 0xb4, 0x0b, 0xe5, 0x98, 0x70, 0x70, 0xd5, 0x23, 0x28, 0xf8, 0x7a, 0xa9, 0xef,
	0x7a, 0x2b, 0x4a, 0x13, 0x42, 0xad, 0x05, 0x8a, 0x7e, 0x06, 0x82, 0xa5, 0x2e, 0x9b, 0x30, 0xc9,
	0xb4, 0x6b, 0xe4, 0x21, 0x64, 0x3f, 0x32, 0x69, 0xeb, 0xa1, 0xdc, 0xd0, 0xdd, 0x9f, 0x0f, 0x3f,
	0x30, 0x47, 0xf6, 0x99, 0xb4, 0x2d, 0x2c, 0xaf, 0x0e, 0x31, 0xfd, 0xaf, 0x43, 0xa4, 0x67, 0xb0,
	0xb7, 0xaa, 0x1b, 0x5c, 0xe1, 0x38, 0x39, 0xad, 0x83, 0x28, 0x5b, 0x0c, 0xbe, 0x1c, 0xdb, 0x29,
	0x54, 0x62, 0xe5, 0xa5, 0x23, 0xc9, 0x69, 0x64, 0xfe, 0x32, 0x0d, 0x2a, 0x74, 0x80, 0x5e, 0x31,
	0xf9, 0xff, 0xdc, 0x78, 0xa9, 0xa7, 0xb0, 0x14, 0x55, 0xd3, 0x4c, 0x58, 0x51, 0x89, 0x52, 0x2d,
	0xb1, 0x4b, 0x1f, 0xb6, 0x01, 0x16, 0x79, 0x11, 0xf4, 0xbb, 0xa1, 0x23, 0x82, 0xd0, 0xeb, 0xc6,
	0xf3, 0x01, 0x64, 0x05, 0x67, 0x8e, 0xbe, 0xcd, 0xea, 0xdb, 0xc1, 0x2a, 0x39, 0x84, 0xbc, 0xa6,
	0xcc, 0x6c, 0x8c, 0xaf, 0x46, 0x90, 0x47, 0x90, 0x0b, 0xbe, 0x44, 0x35, 0xab, 0x0d, 0x4d, 0x40,
	0x85, 0xa5, 0xea, 0xf4, 0x35, 0xdc, 0x4c, 0xf6, 0xaf, 0x22, 0x92, 0x4c, 0xf9, 0xfe, 0x8a, 0x31,
	0xc9, 0xa0, 0xb7, 0xbf, 0xa5, 0x21, 0x87, 0x65, 0xf2, 0x5c, 0xbf, 0xf1, 0x8e, 0xcf, 0x6c, 0xc9,
	0x48, 0x25, 0xfe, 0x42, 0x42, 0xf7, 0x6b, 0xfb, 0xeb, 0x5e, 0x4e, 0x5f, 0x8c, 0x68, 0x6a, 0xc1,
	0xf0, 0x8e, 0xbb, 0xd7, 0x64, 0x38, 0xd3, 0x0c, 0x2a, 0xb0, 0xe4, 0xce, 0xc6, 0x8c, 0x07, 0x3c,
	0x77, 0xd7, 0x55, 0xa3, 0x6c, 0x1d, 0x28, 0x84, 0x37, 0x27, 0x07, 0xeb, 0x33, 0x12, 0xf0, 0xd4,
	0x36, 0xb8, 0x84, 0x24, 0x27, 0xb5, 0x1f, 0xf3, 0xba, 0xf1, 0x73, 0x5e, 0x37, 0x7e, 0xcd, 0xeb,
	0xc6, 0xd7, 0xdf, 0xf5, 0xd4, 0xfb, 0xc2, 0x85, 0x3d, 0xc1, 0xff, 0x87, 0x61, 0x1e, 0x7f, 0x8e,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x7f, 0x04, 0x6a, 0x49, 0x06, 0x00, 0x00,
}
