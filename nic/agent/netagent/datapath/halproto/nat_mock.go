// Code generated by MockGen. DO NOT EDIT.
// Source: nat.pb.go

package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockNatClient is a mock of NatClient interface
type MockNatClient struct {
	ctrl     *gomock.Controller
	recorder *MockNatClientMockRecorder
}

// MockNatClientMockRecorder is the mock recorder for MockNatClient
type MockNatClientMockRecorder struct {
	mock *MockNatClient
}

// NewMockNatClient creates a new mock instance
func NewMockNatClient(ctrl *gomock.Controller) *MockNatClient {
	mock := &MockNatClient{ctrl: ctrl}
	mock.recorder = &MockNatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNatClient) EXPECT() *MockNatClientMockRecorder {
	return _m.recorder
}

// NatPoolCreate mocks base method
func (_m *MockNatClient) NatPoolCreate(ctx context.Context, in *NatPoolRequestMsg, opts ...grpc.CallOption) (*NatPoolResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatPoolCreate", _s...)
	ret0, _ := ret[0].(*NatPoolResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPoolCreate indicates an expected call of NatPoolCreate
func (_mr *MockNatClientMockRecorder) NatPoolCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPoolCreate", reflect.TypeOf((*MockNatClient)(nil).NatPoolCreate), _s...)
}

// NatPoolUpdate mocks base method
func (_m *MockNatClient) NatPoolUpdate(ctx context.Context, in *NatPoolRequestMsg, opts ...grpc.CallOption) (*NatPoolResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatPoolUpdate", _s...)
	ret0, _ := ret[0].(*NatPoolResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPoolUpdate indicates an expected call of NatPoolUpdate
func (_mr *MockNatClientMockRecorder) NatPoolUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPoolUpdate", reflect.TypeOf((*MockNatClient)(nil).NatPoolUpdate), _s...)
}

// NatPoolDelete mocks base method
func (_m *MockNatClient) NatPoolDelete(ctx context.Context, in *NatPoolDeleteRequestMsg, opts ...grpc.CallOption) (*NatPoolDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatPoolDelete", _s...)
	ret0, _ := ret[0].(*NatPoolDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPoolDelete indicates an expected call of NatPoolDelete
func (_mr *MockNatClientMockRecorder) NatPoolDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPoolDelete", reflect.TypeOf((*MockNatClient)(nil).NatPoolDelete), _s...)
}

// NatPoolGet mocks base method
func (_m *MockNatClient) NatPoolGet(ctx context.Context, in *NatPoolGetRequestMsg, opts ...grpc.CallOption) (*NatPoolGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatPoolGet", _s...)
	ret0, _ := ret[0].(*NatPoolGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPoolGet indicates an expected call of NatPoolGet
func (_mr *MockNatClientMockRecorder) NatPoolGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPoolGet", reflect.TypeOf((*MockNatClient)(nil).NatPoolGet), _s...)
}

// NatPolicyCreate mocks base method
func (_m *MockNatClient) NatPolicyCreate(ctx context.Context, in *NatPolicyRequestMsg, opts ...grpc.CallOption) (*NatPolicyResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatPolicyCreate", _s...)
	ret0, _ := ret[0].(*NatPolicyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPolicyCreate indicates an expected call of NatPolicyCreate
func (_mr *MockNatClientMockRecorder) NatPolicyCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPolicyCreate", reflect.TypeOf((*MockNatClient)(nil).NatPolicyCreate), _s...)
}

// NatPolicyUpdate mocks base method
func (_m *MockNatClient) NatPolicyUpdate(ctx context.Context, in *NatPolicyRequestMsg, opts ...grpc.CallOption) (*NatPolicyResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatPolicyUpdate", _s...)
	ret0, _ := ret[0].(*NatPolicyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPolicyUpdate indicates an expected call of NatPolicyUpdate
func (_mr *MockNatClientMockRecorder) NatPolicyUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPolicyUpdate", reflect.TypeOf((*MockNatClient)(nil).NatPolicyUpdate), _s...)
}

// NatPolicyDelete mocks base method
func (_m *MockNatClient) NatPolicyDelete(ctx context.Context, in *NatPolicyDeleteRequestMsg, opts ...grpc.CallOption) (*NatPolicyDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatPolicyDelete", _s...)
	ret0, _ := ret[0].(*NatPolicyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPolicyDelete indicates an expected call of NatPolicyDelete
func (_mr *MockNatClientMockRecorder) NatPolicyDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPolicyDelete", reflect.TypeOf((*MockNatClient)(nil).NatPolicyDelete), _s...)
}

// NatPolicyGet mocks base method
func (_m *MockNatClient) NatPolicyGet(ctx context.Context, in *NatPolicyGetRequestMsg, opts ...grpc.CallOption) (*NatPolicyGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatPolicyGet", _s...)
	ret0, _ := ret[0].(*NatPolicyGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPolicyGet indicates an expected call of NatPolicyGet
func (_mr *MockNatClientMockRecorder) NatPolicyGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPolicyGet", reflect.TypeOf((*MockNatClient)(nil).NatPolicyGet), _s...)
}

// NatMappingCreate mocks base method
func (_m *MockNatClient) NatMappingCreate(ctx context.Context, in *NatMappingRequestMsg, opts ...grpc.CallOption) (*NatMappingResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatMappingCreate", _s...)
	ret0, _ := ret[0].(*NatMappingResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatMappingCreate indicates an expected call of NatMappingCreate
func (_mr *MockNatClientMockRecorder) NatMappingCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatMappingCreate", reflect.TypeOf((*MockNatClient)(nil).NatMappingCreate), _s...)
}

// NatMappingDelete mocks base method
func (_m *MockNatClient) NatMappingDelete(ctx context.Context, in *NatMappingDeleteRequestMsg, opts ...grpc.CallOption) (*NatMappingDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatMappingDelete", _s...)
	ret0, _ := ret[0].(*NatMappingDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatMappingDelete indicates an expected call of NatMappingDelete
func (_mr *MockNatClientMockRecorder) NatMappingDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatMappingDelete", reflect.TypeOf((*MockNatClient)(nil).NatMappingDelete), _s...)
}

// NatMappingGet mocks base method
func (_m *MockNatClient) NatMappingGet(ctx context.Context, in *NatMappingGetRequestMsg, opts ...grpc.CallOption) (*NatMappingGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NatMappingGet", _s...)
	ret0, _ := ret[0].(*NatMappingGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatMappingGet indicates an expected call of NatMappingGet
func (_mr *MockNatClientMockRecorder) NatMappingGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatMappingGet", reflect.TypeOf((*MockNatClient)(nil).NatMappingGet), _s...)
}

// MockNatServer is a mock of NatServer interface
type MockNatServer struct {
	ctrl     *gomock.Controller
	recorder *MockNatServerMockRecorder
}

// MockNatServerMockRecorder is the mock recorder for MockNatServer
type MockNatServerMockRecorder struct {
	mock *MockNatServer
}

// NewMockNatServer creates a new mock instance
func NewMockNatServer(ctrl *gomock.Controller) *MockNatServer {
	mock := &MockNatServer{ctrl: ctrl}
	mock.recorder = &MockNatServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNatServer) EXPECT() *MockNatServerMockRecorder {
	return _m.recorder
}

// NatPoolCreate mocks base method
func (_m *MockNatServer) NatPoolCreate(_param0 context.Context, _param1 *NatPoolRequestMsg) (*NatPoolResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatPoolCreate", _param0, _param1)
	ret0, _ := ret[0].(*NatPoolResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPoolCreate indicates an expected call of NatPoolCreate
func (_mr *MockNatServerMockRecorder) NatPoolCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPoolCreate", reflect.TypeOf((*MockNatServer)(nil).NatPoolCreate), arg0, arg1)
}

// NatPoolUpdate mocks base method
func (_m *MockNatServer) NatPoolUpdate(_param0 context.Context, _param1 *NatPoolRequestMsg) (*NatPoolResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatPoolUpdate", _param0, _param1)
	ret0, _ := ret[0].(*NatPoolResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPoolUpdate indicates an expected call of NatPoolUpdate
func (_mr *MockNatServerMockRecorder) NatPoolUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPoolUpdate", reflect.TypeOf((*MockNatServer)(nil).NatPoolUpdate), arg0, arg1)
}

// NatPoolDelete mocks base method
func (_m *MockNatServer) NatPoolDelete(_param0 context.Context, _param1 *NatPoolDeleteRequestMsg) (*NatPoolDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatPoolDelete", _param0, _param1)
	ret0, _ := ret[0].(*NatPoolDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPoolDelete indicates an expected call of NatPoolDelete
func (_mr *MockNatServerMockRecorder) NatPoolDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPoolDelete", reflect.TypeOf((*MockNatServer)(nil).NatPoolDelete), arg0, arg1)
}

// NatPoolGet mocks base method
func (_m *MockNatServer) NatPoolGet(_param0 context.Context, _param1 *NatPoolGetRequestMsg) (*NatPoolGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatPoolGet", _param0, _param1)
	ret0, _ := ret[0].(*NatPoolGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPoolGet indicates an expected call of NatPoolGet
func (_mr *MockNatServerMockRecorder) NatPoolGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPoolGet", reflect.TypeOf((*MockNatServer)(nil).NatPoolGet), arg0, arg1)
}

// NatPolicyCreate mocks base method
func (_m *MockNatServer) NatPolicyCreate(_param0 context.Context, _param1 *NatPolicyRequestMsg) (*NatPolicyResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatPolicyCreate", _param0, _param1)
	ret0, _ := ret[0].(*NatPolicyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPolicyCreate indicates an expected call of NatPolicyCreate
func (_mr *MockNatServerMockRecorder) NatPolicyCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPolicyCreate", reflect.TypeOf((*MockNatServer)(nil).NatPolicyCreate), arg0, arg1)
}

// NatPolicyUpdate mocks base method
func (_m *MockNatServer) NatPolicyUpdate(_param0 context.Context, _param1 *NatPolicyRequestMsg) (*NatPolicyResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatPolicyUpdate", _param0, _param1)
	ret0, _ := ret[0].(*NatPolicyResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPolicyUpdate indicates an expected call of NatPolicyUpdate
func (_mr *MockNatServerMockRecorder) NatPolicyUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPolicyUpdate", reflect.TypeOf((*MockNatServer)(nil).NatPolicyUpdate), arg0, arg1)
}

// NatPolicyDelete mocks base method
func (_m *MockNatServer) NatPolicyDelete(_param0 context.Context, _param1 *NatPolicyDeleteRequestMsg) (*NatPolicyDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatPolicyDelete", _param0, _param1)
	ret0, _ := ret[0].(*NatPolicyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPolicyDelete indicates an expected call of NatPolicyDelete
func (_mr *MockNatServerMockRecorder) NatPolicyDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPolicyDelete", reflect.TypeOf((*MockNatServer)(nil).NatPolicyDelete), arg0, arg1)
}

// NatPolicyGet mocks base method
func (_m *MockNatServer) NatPolicyGet(_param0 context.Context, _param1 *NatPolicyGetRequestMsg) (*NatPolicyGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatPolicyGet", _param0, _param1)
	ret0, _ := ret[0].(*NatPolicyGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatPolicyGet indicates an expected call of NatPolicyGet
func (_mr *MockNatServerMockRecorder) NatPolicyGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatPolicyGet", reflect.TypeOf((*MockNatServer)(nil).NatPolicyGet), arg0, arg1)
}

// NatMappingCreate mocks base method
func (_m *MockNatServer) NatMappingCreate(_param0 context.Context, _param1 *NatMappingRequestMsg) (*NatMappingResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatMappingCreate", _param0, _param1)
	ret0, _ := ret[0].(*NatMappingResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatMappingCreate indicates an expected call of NatMappingCreate
func (_mr *MockNatServerMockRecorder) NatMappingCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatMappingCreate", reflect.TypeOf((*MockNatServer)(nil).NatMappingCreate), arg0, arg1)
}

// NatMappingDelete mocks base method
func (_m *MockNatServer) NatMappingDelete(_param0 context.Context, _param1 *NatMappingDeleteRequestMsg) (*NatMappingDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatMappingDelete", _param0, _param1)
	ret0, _ := ret[0].(*NatMappingDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatMappingDelete indicates an expected call of NatMappingDelete
func (_mr *MockNatServerMockRecorder) NatMappingDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatMappingDelete", reflect.TypeOf((*MockNatServer)(nil).NatMappingDelete), arg0, arg1)
}

// NatMappingGet mocks base method
func (_m *MockNatServer) NatMappingGet(_param0 context.Context, _param1 *NatMappingGetRequestMsg) (*NatMappingGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NatMappingGet", _param0, _param1)
	ret0, _ := ret[0].(*NatMappingGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatMappingGet indicates an expected call of NatMappingGet
func (_mr *MockNatServerMockRecorder) NatMappingGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NatMappingGet", reflect.TypeOf((*MockNatServer)(nil).NatMappingGet), arg0, arg1)
}
