// Code generated by MockGen. DO NOT EDIT.
// Source: event.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockisEventResponse_EventInfo is a mock of isEventResponse_EventInfo interface
type MockisEventResponse_EventInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisEventResponse_EventInfoMockRecorder
}

// MockisEventResponse_EventInfoMockRecorder is the mock recorder for MockisEventResponse_EventInfo
type MockisEventResponse_EventInfoMockRecorder struct {
	mock *MockisEventResponse_EventInfo
}

// NewMockisEventResponse_EventInfo creates a new mock instance
func NewMockisEventResponse_EventInfo(ctrl *gomock.Controller) *MockisEventResponse_EventInfo {
	mock := &MockisEventResponse_EventInfo{ctrl: ctrl}
	mock.recorder = &MockisEventResponse_EventInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisEventResponse_EventInfo) EXPECT() *MockisEventResponse_EventInfoMockRecorder {
	return m.recorder
}

// isEventResponse_EventInfo mocks base method
func (m *MockisEventResponse_EventInfo) isEventResponse_EventInfo() {
	m.ctrl.Call(m, "isEventResponse_EventInfo")
}

// isEventResponse_EventInfo indicates an expected call of isEventResponse_EventInfo
func (mr *MockisEventResponse_EventInfoMockRecorder) isEventResponse_EventInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEventResponse_EventInfo", reflect.TypeOf((*MockisEventResponse_EventInfo)(nil).isEventResponse_EventInfo))
}

// MarshalTo mocks base method
func (m *MockisEventResponse_EventInfo) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisEventResponse_EventInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisEventResponse_EventInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisEventResponse_EventInfo) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisEventResponse_EventInfoMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisEventResponse_EventInfo)(nil).Size))
}

// MockEventClient is a mock of EventClient interface
type MockEventClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventClientMockRecorder
}

// MockEventClientMockRecorder is the mock recorder for MockEventClient
type MockEventClientMockRecorder struct {
	mock *MockEventClient
}

// NewMockEventClient creates a new mock instance
func NewMockEventClient(ctrl *gomock.Controller) *MockEventClient {
	mock := &MockEventClient{ctrl: ctrl}
	mock.recorder = &MockEventClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventClient) EXPECT() *MockEventClientMockRecorder {
	return m.recorder
}

// EventListen mocks base method
func (m *MockEventClient) EventListen(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (Event_EventListenClient, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EventListen", varargs...)
	ret0, _ := ret[0].(Event_EventListenClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EventListen indicates an expected call of EventListen
func (mr *MockEventClientMockRecorder) EventListen(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventListen", reflect.TypeOf((*MockEventClient)(nil).EventListen), varargs...)
}

// MockEvent_EventListenClient is a mock of Event_EventListenClient interface
type MockEvent_EventListenClient struct {
	ctrl     *gomock.Controller
	recorder *MockEvent_EventListenClientMockRecorder
}

// MockEvent_EventListenClientMockRecorder is the mock recorder for MockEvent_EventListenClient
type MockEvent_EventListenClientMockRecorder struct {
	mock *MockEvent_EventListenClient
}

// NewMockEvent_EventListenClient creates a new mock instance
func NewMockEvent_EventListenClient(ctrl *gomock.Controller) *MockEvent_EventListenClient {
	mock := &MockEvent_EventListenClient{ctrl: ctrl}
	mock.recorder = &MockEvent_EventListenClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvent_EventListenClient) EXPECT() *MockEvent_EventListenClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockEvent_EventListenClient) Recv() (*EventResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockEvent_EventListenClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockEvent_EventListenClient)(nil).Recv))
}

// Header mocks base method
func (m *MockEvent_EventListenClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockEvent_EventListenClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockEvent_EventListenClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockEvent_EventListenClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockEvent_EventListenClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockEvent_EventListenClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockEvent_EventListenClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockEvent_EventListenClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockEvent_EventListenClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockEvent_EventListenClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockEvent_EventListenClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEvent_EventListenClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockEvent_EventListenClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockEvent_EventListenClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEvent_EventListenClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockEvent_EventListenClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockEvent_EventListenClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEvent_EventListenClient)(nil).RecvMsg), m)
}

// MockEventServer is a mock of EventServer interface
type MockEventServer struct {
	ctrl     *gomock.Controller
	recorder *MockEventServerMockRecorder
}

// MockEventServerMockRecorder is the mock recorder for MockEventServer
type MockEventServerMockRecorder struct {
	mock *MockEventServer
}

// NewMockEventServer creates a new mock instance
func NewMockEventServer(ctrl *gomock.Controller) *MockEventServer {
	mock := &MockEventServer{ctrl: ctrl}
	mock.recorder = &MockEventServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventServer) EXPECT() *MockEventServerMockRecorder {
	return m.recorder
}

// EventListen mocks base method
func (m *MockEventServer) EventListen(arg0 *EventRequest, arg1 Event_EventListenServer) error {
	ret := m.ctrl.Call(m, "EventListen", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EventListen indicates an expected call of EventListen
func (mr *MockEventServerMockRecorder) EventListen(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventListen", reflect.TypeOf((*MockEventServer)(nil).EventListen), arg0, arg1)
}

// MockEvent_EventListenServer is a mock of Event_EventListenServer interface
type MockEvent_EventListenServer struct {
	ctrl     *gomock.Controller
	recorder *MockEvent_EventListenServerMockRecorder
}

// MockEvent_EventListenServerMockRecorder is the mock recorder for MockEvent_EventListenServer
type MockEvent_EventListenServerMockRecorder struct {
	mock *MockEvent_EventListenServer
}

// NewMockEvent_EventListenServer creates a new mock instance
func NewMockEvent_EventListenServer(ctrl *gomock.Controller) *MockEvent_EventListenServer {
	mock := &MockEvent_EventListenServer{ctrl: ctrl}
	mock.recorder = &MockEvent_EventListenServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEvent_EventListenServer) EXPECT() *MockEvent_EventListenServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockEvent_EventListenServer) Send(arg0 *EventResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockEvent_EventListenServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEvent_EventListenServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockEvent_EventListenServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockEvent_EventListenServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockEvent_EventListenServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockEvent_EventListenServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockEvent_EventListenServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockEvent_EventListenServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockEvent_EventListenServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockEvent_EventListenServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockEvent_EventListenServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockEvent_EventListenServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockEvent_EventListenServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEvent_EventListenServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockEvent_EventListenServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockEvent_EventListenServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEvent_EventListenServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockEvent_EventListenServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockEvent_EventListenServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEvent_EventListenServer)(nil).RecvMsg), m)
}
