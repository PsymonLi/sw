// Code generated by MockGen. DO NOT EDIT.
// Source: nvme.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockNvmeClient is a mock of NvmeClient interface
type MockNvmeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNvmeClientMockRecorder
}

// MockNvmeClientMockRecorder is the mock recorder for MockNvmeClient
type MockNvmeClientMockRecorder struct {
	mock *MockNvmeClient
}

// NewMockNvmeClient creates a new mock instance
func NewMockNvmeClient(ctrl *gomock.Controller) *MockNvmeClient {
	mock := &MockNvmeClient{ctrl: ctrl}
	mock.recorder = &MockNvmeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNvmeClient) EXPECT() *MockNvmeClientMockRecorder {
	return m.recorder
}

// NvmeEnable mocks base method
func (m *MockNvmeClient) NvmeEnable(ctx context.Context, in *NvmeEnableRequestMsg, opts ...grpc.CallOption) (*NvmeEnableResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NvmeEnable", varargs...)
	ret0, _ := ret[0].(*NvmeEnableResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NvmeEnable indicates an expected call of NvmeEnable
func (mr *MockNvmeClientMockRecorder) NvmeEnable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NvmeEnable", reflect.TypeOf((*MockNvmeClient)(nil).NvmeEnable), varargs...)
}

// NvmeSqCreate mocks base method
func (m *MockNvmeClient) NvmeSqCreate(ctx context.Context, in *NvmeSqRequestMsg, opts ...grpc.CallOption) (*NvmeSqResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NvmeSqCreate", varargs...)
	ret0, _ := ret[0].(*NvmeSqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NvmeSqCreate indicates an expected call of NvmeSqCreate
func (mr *MockNvmeClientMockRecorder) NvmeSqCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NvmeSqCreate", reflect.TypeOf((*MockNvmeClient)(nil).NvmeSqCreate), varargs...)
}

// NvmeCqCreate mocks base method
func (m *MockNvmeClient) NvmeCqCreate(ctx context.Context, in *NvmeCqRequestMsg, opts ...grpc.CallOption) (*NvmeCqResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NvmeCqCreate", varargs...)
	ret0, _ := ret[0].(*NvmeCqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NvmeCqCreate indicates an expected call of NvmeCqCreate
func (mr *MockNvmeClientMockRecorder) NvmeCqCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NvmeCqCreate", reflect.TypeOf((*MockNvmeClient)(nil).NvmeCqCreate), varargs...)
}

// NvmeNsCreate mocks base method
func (m *MockNvmeClient) NvmeNsCreate(ctx context.Context, in *NvmeNsRequestMsg, opts ...grpc.CallOption) (*NvmeNsResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NvmeNsCreate", varargs...)
	ret0, _ := ret[0].(*NvmeNsResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NvmeNsCreate indicates an expected call of NvmeNsCreate
func (mr *MockNvmeClientMockRecorder) NvmeNsCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NvmeNsCreate", reflect.TypeOf((*MockNvmeClient)(nil).NvmeNsCreate), varargs...)
}

// MockNvmeServer is a mock of NvmeServer interface
type MockNvmeServer struct {
	ctrl     *gomock.Controller
	recorder *MockNvmeServerMockRecorder
}

// MockNvmeServerMockRecorder is the mock recorder for MockNvmeServer
type MockNvmeServerMockRecorder struct {
	mock *MockNvmeServer
}

// NewMockNvmeServer creates a new mock instance
func NewMockNvmeServer(ctrl *gomock.Controller) *MockNvmeServer {
	mock := &MockNvmeServer{ctrl: ctrl}
	mock.recorder = &MockNvmeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNvmeServer) EXPECT() *MockNvmeServerMockRecorder {
	return m.recorder
}

// NvmeEnable mocks base method
func (m *MockNvmeServer) NvmeEnable(arg0 context.Context, arg1 *NvmeEnableRequestMsg) (*NvmeEnableResponseMsg, error) {
	ret := m.ctrl.Call(m, "NvmeEnable", arg0, arg1)
	ret0, _ := ret[0].(*NvmeEnableResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NvmeEnable indicates an expected call of NvmeEnable
func (mr *MockNvmeServerMockRecorder) NvmeEnable(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NvmeEnable", reflect.TypeOf((*MockNvmeServer)(nil).NvmeEnable), arg0, arg1)
}

// NvmeSqCreate mocks base method
func (m *MockNvmeServer) NvmeSqCreate(arg0 context.Context, arg1 *NvmeSqRequestMsg) (*NvmeSqResponseMsg, error) {
	ret := m.ctrl.Call(m, "NvmeSqCreate", arg0, arg1)
	ret0, _ := ret[0].(*NvmeSqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NvmeSqCreate indicates an expected call of NvmeSqCreate
func (mr *MockNvmeServerMockRecorder) NvmeSqCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NvmeSqCreate", reflect.TypeOf((*MockNvmeServer)(nil).NvmeSqCreate), arg0, arg1)
}

// NvmeCqCreate mocks base method
func (m *MockNvmeServer) NvmeCqCreate(arg0 context.Context, arg1 *NvmeCqRequestMsg) (*NvmeCqResponseMsg, error) {
	ret := m.ctrl.Call(m, "NvmeCqCreate", arg0, arg1)
	ret0, _ := ret[0].(*NvmeCqResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NvmeCqCreate indicates an expected call of NvmeCqCreate
func (mr *MockNvmeServerMockRecorder) NvmeCqCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NvmeCqCreate", reflect.TypeOf((*MockNvmeServer)(nil).NvmeCqCreate), arg0, arg1)
}

// NvmeNsCreate mocks base method
func (m *MockNvmeServer) NvmeNsCreate(arg0 context.Context, arg1 *NvmeNsRequestMsg) (*NvmeNsResponseMsg, error) {
	ret := m.ctrl.Call(m, "NvmeNsCreate", arg0, arg1)
	ret0, _ := ret[0].(*NvmeNsResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NvmeNsCreate indicates an expected call of NvmeNsCreate
func (mr *MockNvmeServerMockRecorder) NvmeNsCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NvmeNsCreate", reflect.TypeOf((*MockNvmeServer)(nil).NvmeNsCreate), arg0, arg1)
}
