// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rawrcb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RawrCbKeyHandle is used to operate on a rawrcb either by its key or handle
type RawrCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*RawrCbKeyHandle_RawrcbId
	//	*RawrCbKeyHandle_RawrcbHandle
	KeyOrHandle isRawrCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *RawrCbKeyHandle) Reset()                    { *m = RawrCbKeyHandle{} }
func (m *RawrCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*RawrCbKeyHandle) ProtoMessage()               {}
func (*RawrCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{0} }

type isRawrCbKeyHandle_KeyOrHandle interface {
	isRawrCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RawrCbKeyHandle_RawrcbId struct {
	RawrcbId uint32 `protobuf:"varint,1,opt,name=rawrcb_id,json=rawrcbId,proto3,oneof"`
}
type RawrCbKeyHandle_RawrcbHandle struct {
	RawrcbHandle uint64 `protobuf:"fixed64,2,opt,name=rawrcb_handle,json=rawrcbHandle,proto3,oneof"`
}

func (*RawrCbKeyHandle_RawrcbId) isRawrCbKeyHandle_KeyOrHandle()     {}
func (*RawrCbKeyHandle_RawrcbHandle) isRawrCbKeyHandle_KeyOrHandle() {}

func (m *RawrCbKeyHandle) GetKeyOrHandle() isRawrCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawrCbKeyHandle) GetRawrcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*RawrCbKeyHandle_RawrcbId); ok {
		return x.RawrcbId
	}
	return 0
}

func (m *RawrCbKeyHandle) GetRawrcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*RawrCbKeyHandle_RawrcbHandle); ok {
		return x.RawrcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RawrCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RawrCbKeyHandle_OneofMarshaler, _RawrCbKeyHandle_OneofUnmarshaler, _RawrCbKeyHandle_OneofSizer, []interface{}{
		(*RawrCbKeyHandle_RawrcbId)(nil),
		(*RawrCbKeyHandle_RawrcbHandle)(nil),
	}
}

func _RawrCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RawrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawrCbKeyHandle_RawrcbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.RawrcbId))
	case *RawrCbKeyHandle_RawrcbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.RawrcbHandle))
	case nil:
	default:
		return fmt.Errorf("RawrCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _RawrCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RawrCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.rawrcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &RawrCbKeyHandle_RawrcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.rawrcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &RawrCbKeyHandle_RawrcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _RawrCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RawrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawrCbKeyHandle_RawrcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.RawrcbId))
	case *RawrCbKeyHandle_RawrcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RawrCbSpec captures all the rawrcb level configuration
type RawrCbSpec struct {
	Meta                    *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	ChainRxqBase            uint32           `protobuf:"varint,3,opt,name=chain_rxq_base,json=chainRxqBase,proto3" json:"chain_rxq_base,omitempty"`
	ChainRxqRingIndicesAddr uint32           `protobuf:"varint,4,opt,name=chain_rxq_ring_indices_addr,json=chainRxqRingIndicesAddr,proto3" json:"chain_rxq_ring_indices_addr,omitempty"`
	ChainRxqRingSizeShift   uint32           `protobuf:"varint,5,opt,name=chain_rxq_ring_size_shift,json=chainRxqRingSizeShift,proto3" json:"chain_rxq_ring_size_shift,omitempty"`
	ChainRxqEntrySizeShift  uint32           `protobuf:"varint,6,opt,name=chain_rxq_entry_size_shift,json=chainRxqEntrySizeShift,proto3" json:"chain_rxq_entry_size_shift,omitempty"`
	ChainRxqRingIndexSelect uint32           `protobuf:"varint,7,opt,name=chain_rxq_ring_index_select,json=chainRxqRingIndexSelect,proto3" json:"chain_rxq_ring_index_select,omitempty"`
	ChainTxqBase            uint32           `protobuf:"varint,8,opt,name=chain_txq_base,json=chainTxqBase,proto3" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint32           `protobuf:"varint,9,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr,proto3" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32           `protobuf:"varint,10,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift,proto3" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32           `protobuf:"varint,11,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift,proto3" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqRingIndexSelect uint32           `protobuf:"varint,12,opt,name=chain_txq_ring_index_select,json=chainTxqRingIndexSelect,proto3" json:"chain_txq_ring_index_select,omitempty"`
	ChainTxqLif             uint32           `protobuf:"varint,13,opt,name=chain_txq_lif,json=chainTxqLif,proto3" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32           `protobuf:"varint,14,opt,name=chain_txq_qtype,json=chainTxqQtype,proto3" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32           `protobuf:"varint,15,opt,name=chain_txq_qid,json=chainTxqQid,proto3" json:"chain_txq_qid,omitempty"`
	ChainTxqDoorbellNoSched uint32           `protobuf:"varint,16,opt,name=chain_txq_doorbell_no_sched,json=chainTxqDoorbellNoSched,proto3" json:"chain_txq_doorbell_no_sched,omitempty"`
	DescValidBitUpd         uint32           `protobuf:"varint,17,opt,name=desc_valid_bit_upd,json=descValidBitUpd,proto3" json:"desc_valid_bit_upd,omitempty"`
	DescValidBitReq         uint32           `protobuf:"varint,18,opt,name=desc_valid_bit_req,json=descValidBitReq,proto3" json:"desc_valid_bit_req,omitempty"`
	RedirPipelineLpbkEnable uint32           `protobuf:"varint,19,opt,name=redir_pipeline_lpbk_enable,json=redirPipelineLpbkEnable,proto3" json:"redir_pipeline_lpbk_enable,omitempty"`
}

func (m *RawrCbSpec) Reset()                    { *m = RawrCbSpec{} }
func (m *RawrCbSpec) String() string            { return proto.CompactTextString(m) }
func (*RawrCbSpec) ProtoMessage()               {}
func (*RawrCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{1} }

func (m *RawrCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbSpec) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawrCbSpec) GetChainRxqBase() uint32 {
	if m != nil {
		return m.ChainRxqBase
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingIndicesAddr() uint32 {
	if m != nil {
		return m.ChainRxqRingIndicesAddr
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainRxqRingSizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainRxqEntrySizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainRxqRingIndexSelect
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqBase() uint32 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingIndicesAddr() uint32 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainTxqRingIndexSelect
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqDoorbellNoSched() uint32 {
	if m != nil {
		return m.ChainTxqDoorbellNoSched
	}
	return 0
}

func (m *RawrCbSpec) GetDescValidBitUpd() uint32 {
	if m != nil {
		return m.DescValidBitUpd
	}
	return 0
}

func (m *RawrCbSpec) GetDescValidBitReq() uint32 {
	if m != nil {
		return m.DescValidBitReq
	}
	return 0
}

func (m *RawrCbSpec) GetRedirPipelineLpbkEnable() uint32 {
	if m != nil {
		return m.RedirPipelineLpbkEnable
	}
	return 0
}

// RawrCbRequestMsg is batched add or modify rawrcb request
type RawrCbRequestMsg struct {
	Request []*RawrCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbRequestMsg) Reset()                    { *m = RawrCbRequestMsg{} }
func (m *RawrCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbRequestMsg) ProtoMessage()               {}
func (*RawrCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{2} }

func (m *RawrCbRequestMsg) GetRequest() []*RawrCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbStatus is the operational status of a given rawrcb
type RawrCbStatus struct {
	RawrcbHandle uint64 `protobuf:"fixed64,1,opt,name=rawrcb_handle,json=rawrcbHandle,proto3" json:"rawrcb_handle,omitempty"`
}

func (m *RawrCbStatus) Reset()                    { *m = RawrCbStatus{} }
func (m *RawrCbStatus) String() string            { return proto.CompactTextString(m) }
func (*RawrCbStatus) ProtoMessage()               {}
func (*RawrCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{3} }

func (m *RawrCbStatus) GetRawrcbHandle() uint64 {
	if m != nil {
		return m.RawrcbHandle
	}
	return 0
}

// RawrCbResponse is response to RawrCbSpec
type RawrCbResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	RawrcbStatus *RawrCbStatus `protobuf:"bytes,2,opt,name=rawrcb_status,json=rawrcbStatus" json:"rawrcb_status,omitempty"`
}

func (m *RawrCbResponse) Reset()                    { *m = RawrCbResponse{} }
func (m *RawrCbResponse) String() string            { return proto.CompactTextString(m) }
func (*RawrCbResponse) ProtoMessage()               {}
func (*RawrCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{4} }

func (m *RawrCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawrCbResponse) GetRawrcbStatus() *RawrCbStatus {
	if m != nil {
		return m.RawrcbStatus
	}
	return nil
}

// RawrCbResponseMsg is batched response to RawrCbRequestMsg
type RawrCbResponseMsg struct {
	Response []*RawrCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawrCbResponseMsg) Reset()                    { *m = RawrCbResponseMsg{} }
func (m *RawrCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbResponseMsg) ProtoMessage()               {}
func (*RawrCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{5} }

func (m *RawrCbResponseMsg) GetResponse() []*RawrCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawrCbDeleteRequest is used to delete a rawrcb
type RawrCbDeleteRequest struct {
	Meta        *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawrCbDeleteRequest) Reset()                    { *m = RawrCbDeleteRequest{} }
func (m *RawrCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteRequest) ProtoMessage()               {}
func (*RawrCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{6} }

func (m *RawrCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbDeleteRequest) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawrCbDeleteRequestMsg is used to delete a batch of rawrcbs
type RawrCbDeleteRequestMsg struct {
	Request []*RawrCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbDeleteRequestMsg) Reset()                    { *m = RawrCbDeleteRequestMsg{} }
func (m *RawrCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteRequestMsg) ProtoMessage()               {}
func (*RawrCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{7} }

func (m *RawrCbDeleteRequestMsg) GetRequest() []*RawrCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbDeleteResponseMsg is batched response to RawrCbDeleteRequestMsg
type RawrCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RawrCbDeleteResponseMsg) Reset()                    { *m = RawrCbDeleteResponseMsg{} }
func (m *RawrCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteResponseMsg) ProtoMessage()               {}
func (*RawrCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{8} }

func (m *RawrCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// RawrCbGetRequest is used to get information about a rawrcb
type RawrCbGetRequest struct {
	Meta        *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawrCbGetRequest) Reset()                    { *m = RawrCbGetRequest{} }
func (m *RawrCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetRequest) ProtoMessage()               {}
func (*RawrCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{9} }

func (m *RawrCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbGetRequest) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawrCbGetRequestMsg is batched GET requests for rawrcbs
type RawrCbGetRequestMsg struct {
	Request []*RawrCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbGetRequestMsg) Reset()                    { *m = RawrCbGetRequestMsg{} }
func (m *RawrCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetRequestMsg) ProtoMessage()               {}
func (*RawrCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{10} }

func (m *RawrCbGetRequestMsg) GetRequest() []*RawrCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbStats is the statistics object for each rawrcb
type RawrCbStats struct {
}

func (m *RawrCbStats) Reset()                    { *m = RawrCbStats{} }
func (m *RawrCbStats) String() string            { return proto.CompactTextString(m) }
func (*RawrCbStats) ProtoMessage()               {}
func (*RawrCbStats) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{11} }

// RawrCbGetResponse captures all the information about a rawrcb
// only if api_status indicates success, other fields are valid
type RawrCbGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *RawrCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *RawrCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *RawrCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *RawrCbGetResponse) Reset()                    { *m = RawrCbGetResponse{} }
func (m *RawrCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetResponse) ProtoMessage()               {}
func (*RawrCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{12} }

func (m *RawrCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawrCbGetResponse) GetSpec() *RawrCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *RawrCbGetResponse) GetStatus() *RawrCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RawrCbGetResponse) GetStats() *RawrCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// RawrCbGetResponseMsg is batched response to RawrCbGetRequestMsg
type RawrCbGetResponseMsg struct {
	Response []*RawrCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawrCbGetResponseMsg) Reset()                    { *m = RawrCbGetResponseMsg{} }
func (m *RawrCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetResponseMsg) ProtoMessage()               {}
func (*RawrCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorRawrcb, []int{13} }

func (m *RawrCbGetResponseMsg) GetResponse() []*RawrCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*RawrCbKeyHandle)(nil), "rawrcb.RawrCbKeyHandle")
	proto.RegisterType((*RawrCbSpec)(nil), "rawrcb.RawrCbSpec")
	proto.RegisterType((*RawrCbRequestMsg)(nil), "rawrcb.RawrCbRequestMsg")
	proto.RegisterType((*RawrCbStatus)(nil), "rawrcb.RawrCbStatus")
	proto.RegisterType((*RawrCbResponse)(nil), "rawrcb.RawrCbResponse")
	proto.RegisterType((*RawrCbResponseMsg)(nil), "rawrcb.RawrCbResponseMsg")
	proto.RegisterType((*RawrCbDeleteRequest)(nil), "rawrcb.RawrCbDeleteRequest")
	proto.RegisterType((*RawrCbDeleteRequestMsg)(nil), "rawrcb.RawrCbDeleteRequestMsg")
	proto.RegisterType((*RawrCbDeleteResponseMsg)(nil), "rawrcb.RawrCbDeleteResponseMsg")
	proto.RegisterType((*RawrCbGetRequest)(nil), "rawrcb.RawrCbGetRequest")
	proto.RegisterType((*RawrCbGetRequestMsg)(nil), "rawrcb.RawrCbGetRequestMsg")
	proto.RegisterType((*RawrCbStats)(nil), "rawrcb.RawrCbStats")
	proto.RegisterType((*RawrCbGetResponse)(nil), "rawrcb.RawrCbGetResponse")
	proto.RegisterType((*RawrCbGetResponseMsg)(nil), "rawrcb.RawrCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RawrCb service

type RawrCbClient interface {
	RawrCbCreate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error)
	RawrCbUpdate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error)
	RawrCbDelete(ctx context.Context, in *RawrCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawrCbDeleteResponseMsg, error)
	RawrCbGet(ctx context.Context, in *RawrCbGetRequestMsg, opts ...grpc.CallOption) (*RawrCbGetResponseMsg, error)
}

type rawrCbClient struct {
	cc *grpc.ClientConn
}

func NewRawrCbClient(cc *grpc.ClientConn) RawrCbClient {
	return &rawrCbClient{cc}
}

func (c *rawrCbClient) RawrCbCreate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error) {
	out := new(RawrCbResponseMsg)
	err := grpc.Invoke(ctx, "/rawrcb.RawrCb/RawrCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawrCbClient) RawrCbUpdate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error) {
	out := new(RawrCbResponseMsg)
	err := grpc.Invoke(ctx, "/rawrcb.RawrCb/RawrCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawrCbClient) RawrCbDelete(ctx context.Context, in *RawrCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawrCbDeleteResponseMsg, error) {
	out := new(RawrCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/rawrcb.RawrCb/RawrCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rawrCbClient) RawrCbGet(ctx context.Context, in *RawrCbGetRequestMsg, opts ...grpc.CallOption) (*RawrCbGetResponseMsg, error) {
	out := new(RawrCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/rawrcb.RawrCb/RawrCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RawrCb service

type RawrCbServer interface {
	RawrCbCreate(context.Context, *RawrCbRequestMsg) (*RawrCbResponseMsg, error)
	RawrCbUpdate(context.Context, *RawrCbRequestMsg) (*RawrCbResponseMsg, error)
	RawrCbDelete(context.Context, *RawrCbDeleteRequestMsg) (*RawrCbDeleteResponseMsg, error)
	RawrCbGet(context.Context, *RawrCbGetRequestMsg) (*RawrCbGetResponseMsg, error)
}

func RegisterRawrCbServer(s *grpc.Server, srv RawrCbServer) {
	s.RegisterService(&_RawrCb_serviceDesc, srv)
}

func _RawrCb_RawrCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawrCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawrCbServer).RawrCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rawrcb.RawrCb/RawrCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawrCbServer).RawrCbCreate(ctx, req.(*RawrCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawrCb_RawrCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawrCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawrCbServer).RawrCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rawrcb.RawrCb/RawrCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawrCbServer).RawrCbUpdate(ctx, req.(*RawrCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawrCb_RawrCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawrCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawrCbServer).RawrCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rawrcb.RawrCb/RawrCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawrCbServer).RawrCbDelete(ctx, req.(*RawrCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RawrCb_RawrCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawrCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawrCbServer).RawrCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rawrcb.RawrCb/RawrCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawrCbServer).RawrCbGet(ctx, req.(*RawrCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _RawrCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rawrcb.RawrCb",
	HandlerType: (*RawrCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawrCbCreate",
			Handler:    _RawrCb_RawrCbCreate_Handler,
		},
		{
			MethodName: "RawrCbUpdate",
			Handler:    _RawrCb_RawrCbUpdate_Handler,
		},
		{
			MethodName: "RawrCbDelete",
			Handler:    _RawrCb_RawrCbDelete_Handler,
		},
		{
			MethodName: "RawrCbGet",
			Handler:    _RawrCb_RawrCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rawrcb.proto",
}

func (m *RawrCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *RawrCbKeyHandle_RawrcbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintRawrcb(dAtA, i, uint64(m.RawrcbId))
	return i, nil
}
func (m *RawrCbKeyHandle_RawrcbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Rawrcb(dAtA, i, uint64(m.RawrcbHandle))
	return i, nil
}
func (m *RawrCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n3, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ChainRxqBase != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainRxqBase))
	}
	if m.ChainRxqRingIndicesAddr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainRxqRingIndicesAddr))
	}
	if m.ChainRxqRingSizeShift != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainRxqRingSizeShift))
	}
	if m.ChainRxqEntrySizeShift != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainRxqEntrySizeShift))
	}
	if m.ChainRxqRingIndexSelect != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainRxqRingIndexSelect))
	}
	if m.ChainTxqBase != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqRingIndexSelect != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainTxqRingIndexSelect))
	}
	if m.ChainTxqLif != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainTxqQid))
	}
	if m.ChainTxqDoorbellNoSched != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ChainTxqDoorbellNoSched))
	}
	if m.DescValidBitUpd != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.DescValidBitUpd))
	}
	if m.DescValidBitReq != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.DescValidBitReq))
	}
	if m.RedirPipelineLpbkEnable != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.RedirPipelineLpbkEnable))
	}
	return i, nil
}

func (m *RawrCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRawrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawrCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RawrcbHandle != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Rawrcb(dAtA, i, uint64(m.RawrcbHandle))
	}
	return i, nil
}

func (m *RawrCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.RawrcbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.RawrcbStatus.Size()))
		n4, err := m.RawrcbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *RawrCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRawrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawrCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.Meta.Size()))
		n5, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n6, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *RawrCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRawrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawrCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA8 := make([]byte, len(m.ApiStatus)*10)
		var j7 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *RawrCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.Meta.Size()))
		n9, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n10, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *RawrCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRawrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawrCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RawrCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.Spec.Size()))
		n11, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.Status.Size()))
		n12, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRawrcb(dAtA, i, uint64(m.Stats.Size()))
		n13, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *RawrCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRawrcb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Rawrcb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rawrcb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRawrcb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RawrCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *RawrCbKeyHandle_RawrcbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRawrcb(uint64(m.RawrcbId))
	return n
}
func (m *RawrCbKeyHandle_RawrcbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *RawrCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	if m.ChainRxqBase != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainRxqBase))
	}
	if m.ChainRxqRingIndicesAddr != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainRxqRingIndicesAddr))
	}
	if m.ChainRxqRingSizeShift != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainRxqRingSizeShift))
	}
	if m.ChainRxqEntrySizeShift != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainRxqEntrySizeShift))
	}
	if m.ChainRxqRingIndexSelect != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainRxqRingIndexSelect))
	}
	if m.ChainTxqBase != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqRingIndexSelect != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainTxqRingIndexSelect))
	}
	if m.ChainTxqLif != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		n += 1 + sovRawrcb(uint64(m.ChainTxqQid))
	}
	if m.ChainTxqDoorbellNoSched != 0 {
		n += 2 + sovRawrcb(uint64(m.ChainTxqDoorbellNoSched))
	}
	if m.DescValidBitUpd != 0 {
		n += 2 + sovRawrcb(uint64(m.DescValidBitUpd))
	}
	if m.DescValidBitReq != 0 {
		n += 2 + sovRawrcb(uint64(m.DescValidBitReq))
	}
	if m.RedirPipelineLpbkEnable != 0 {
		n += 2 + sovRawrcb(uint64(m.RedirPipelineLpbkEnable))
	}
	return n
}

func (m *RawrCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovRawrcb(uint64(l))
		}
	}
	return n
}

func (m *RawrCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.RawrcbHandle != 0 {
		n += 9
	}
	return n
}

func (m *RawrCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovRawrcb(uint64(m.ApiStatus))
	}
	if m.RawrcbStatus != nil {
		l = m.RawrcbStatus.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	return n
}

func (m *RawrCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovRawrcb(uint64(l))
		}
	}
	return n
}

func (m *RawrCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	return n
}

func (m *RawrCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovRawrcb(uint64(l))
		}
	}
	return n
}

func (m *RawrCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovRawrcb(uint64(e))
		}
		n += 1 + sovRawrcb(uint64(l)) + l
	}
	return n
}

func (m *RawrCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	return n
}

func (m *RawrCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovRawrcb(uint64(l))
		}
	}
	return n
}

func (m *RawrCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RawrCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovRawrcb(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovRawrcb(uint64(l))
	}
	return n
}

func (m *RawrCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovRawrcb(uint64(l))
		}
	}
	return n
}

func sovRawrcb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRawrcb(x uint64) (n int) {
	return sovRawrcb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RawrCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawrcbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &RawrCbKeyHandle_RawrcbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawrcbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &RawrCbKeyHandle_RawrcbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &RawrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqBase", wireType)
			}
			m.ChainRxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqBase |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingIndicesAddr", wireType)
			}
			m.ChainRxqRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingIndicesAddr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingSizeShift", wireType)
			}
			m.ChainRxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqEntrySizeShift", wireType)
			}
			m.ChainRxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingIndexSelect", wireType)
			}
			m.ChainRxqRingIndexSelect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingIndexSelect |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqBase", wireType)
			}
			m.ChainTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqBase |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingIndicesAddr", wireType)
			}
			m.ChainTxqRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingIndicesAddr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingSizeShift", wireType)
			}
			m.ChainTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqEntrySizeShift", wireType)
			}
			m.ChainTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingIndexSelect", wireType)
			}
			m.ChainTxqRingIndexSelect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingIndexSelect |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqLif", wireType)
			}
			m.ChainTxqLif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqLif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQtype", wireType)
			}
			m.ChainTxqQtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQid", wireType)
			}
			m.ChainTxqQid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqDoorbellNoSched", wireType)
			}
			m.ChainTxqDoorbellNoSched = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqDoorbellNoSched |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescValidBitUpd", wireType)
			}
			m.DescValidBitUpd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescValidBitUpd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescValidBitReq", wireType)
			}
			m.DescValidBitReq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescValidBitReq |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirPipelineLpbkEnable", wireType)
			}
			m.RedirPipelineLpbkEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedirPipelineLpbkEnable |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RawrCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawrcbHandle", wireType)
			}
			m.RawrcbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.RawrcbHandle = uint64(dAtA[iNdEx-8])
			m.RawrcbHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.RawrcbHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.RawrcbHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.RawrcbHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.RawrcbHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.RawrcbHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.RawrcbHandle |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawrcbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawrcbStatus == nil {
				m.RawrcbStatus = &RawrCbStatus{}
			}
			if err := m.RawrcbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &RawrCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &RawrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RawrCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRawrcb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRawrcb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRawrcb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRawrcb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &RawrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RawrCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &RawrCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RawrCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &RawrCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawrcb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &RawrCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawrcb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawrcb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRawrcb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRawrcb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRawrcb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRawrcb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRawrcb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRawrcb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRawrcb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRawrcb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rawrcb.proto", fileDescriptorRawrcb) }

var fileDescriptorRawrcb = []byte{
	// 896 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xe1, 0x4e, 0xdc, 0x46,
	0x10, 0xe6, 0x02, 0x39, 0x60, 0xcc, 0x71, 0xb0, 0xa4, 0x60, 0xa0, 0xbd, 0x22, 0xb7, 0x89, 0xa8,
	0x1a, 0x51, 0xe9, 0xa2, 0x4a, 0x6d, 0xd3, 0x1f, 0x0d, 0x09, 0x0a, 0xb4, 0xa1, 0x14, 0x1f, 0xe9,
	0xdf, 0x95, 0xed, 0x1d, 0xb8, 0x2d, 0xae, 0xcf, 0xb7, 0xbb, 0x24, 0x5c, 0xd4, 0x07, 0xe9, 0x7b,
	0xf4, 0x19, 0x2a, 0xf5, 0x67, 0x1f, 0xa1, 0xa2, 0xea, 0x7b, 0x54, 0xde, 0x5d, 0xe3, 0xb3, 0xf1,
	0x51, 0xa9, 0x91, 0xf2, 0xef, 0xbc, 0xf3, 0x7d, 0xdf, 0xcc, 0x7c, 0x3b, 0x3b, 0x00, 0x0b, 0x22,
	0x78, 0x2d, 0xa2, 0x70, 0x27, 0x15, 0x03, 0x35, 0x20, 0x4d, 0xf3, 0xb5, 0xe1, 0xa8, 0x51, 0x8a,
	0xd2, 0x1c, 0x7a, 0x7d, 0x68, 0xfb, 0xc1, 0x6b, 0xf1, 0x34, 0xfc, 0x0e, 0x47, 0xfb, 0x41, 0xc2,
	0x62, 0x24, 0x1f, 0xc0, 0xbc, 0x41, 0x52, 0xce, 0xdc, 0xc6, 0x56, 0x63, 0xbb, 0xb5, 0x3f, 0xe5,
	0xcf, 0x99, 0xa3, 0x03, 0x46, 0xee, 0x43, 0xcb, 0x86, 0xfb, 0x1a, 0xef, 0xde, 0xd9, 0x6a, 0x6c,
	0x37, 0xf7, 0xa7, 0x7c, 0x9b, 0xcd, 0xa8, 0xec, 0xb6, 0xa1, 0x75, 0x8e, 0x23, 0x3a, 0x10, 0x16,
	0xe6, 0xfd, 0x33, 0x0b, 0x60, 0x52, 0xf5, 0x52, 0x8c, 0xc8, 0x7d, 0x98, 0xf9, 0x19, 0x55, 0xa0,
	0x13, 0x38, 0xdd, 0xe5, 0x1d, 0x53, 0xd4, 0x51, 0xf8, 0x13, 0x46, 0xea, 0x10, 0x55, 0xe0, 0xeb,
	0x30, 0x79, 0x5c, 0x91, 0xd1, 0xd9, 0x9c, 0xee, 0xda, 0x8e, 0x6d, 0xad, 0x52, 0xbc, 0xef, 0x9c,
	0xe3, 0xe8, 0x48, 0xd8, 0x4e, 0x3e, 0x86, 0xc5, 0xa8, 0x1f, 0xf0, 0x84, 0x8a, 0xcb, 0x21, 0x0d,
	0x03, 0x89, 0xee, 0x74, 0xd6, 0x8e, 0xbf, 0xa0, 0x4f, 0xfd, 0xcb, 0xe1, 0x6e, 0x20, 0x91, 0x7c,
	0x0d, 0x9b, 0x05, 0x4a, 0xf0, 0xe4, 0x8c, 0xf2, 0x84, 0xf1, 0x08, 0x25, 0x0d, 0x18, 0x13, 0xee,
	0x8c, 0xa6, 0xac, 0xe5, 0x14, 0x9f, 0x27, 0x67, 0x07, 0x26, 0xfe, 0x84, 0x31, 0x41, 0xbe, 0x80,
	0xf5, 0x0a, 0x5b, 0xf2, 0x37, 0x48, 0x65, 0x9f, 0x9f, 0x2a, 0xf7, 0xae, 0xe6, 0xbe, 0x37, 0xce,
	0xed, 0xf1, 0x37, 0xd8, 0xcb, 0x82, 0xe4, 0x2b, 0xd8, 0x28, 0x98, 0x98, 0x28, 0x31, 0x1a, 0xa7,
	0x36, 0x35, 0x75, 0x35, 0xa7, 0xee, 0x65, 0xf1, 0x82, 0x5b, 0x5b, 0x33, 0x5e, 0x52, 0x89, 0x31,
	0x46, 0xca, 0x9d, 0xad, 0xad, 0x19, 0x2f, 0x7b, 0x3a, 0x5c, 0xf8, 0xa2, 0x72, 0x5f, 0xe6, 0xc6,
	0x7c, 0x39, 0xa9, 0xfa, 0xa2, 0x6a, 0x7d, 0x99, 0x1f, 0xcb, 0x71, 0x72, 0x8b, 0x2f, 0xaa, 0xc6,
	0x17, 0x18, 0xf3, 0xe5, 0x64, 0xa2, 0x2f, 0xaa, 0xce, 0x17, 0x67, 0xcc, 0x97, 0x93, 0xc9, 0xbe,
	0xa8, 0x5a, 0x5f, 0x16, 0x6a, 0x6b, 0xbe, 0xf6, 0xc5, 0x83, 0x56, 0xc1, 0x8e, 0xf9, 0xa9, 0xdb,
	0xd2, 0x78, 0x27, 0xc7, 0xbf, 0xe0, 0xa7, 0xe4, 0x01, 0xb4, 0x0b, 0xcc, 0x30, 0x9b, 0x5a, 0x77,
	0x51, 0xa3, 0x5a, 0x39, 0xea, 0x38, 0x3b, 0x2c, 0x6b, 0x0d, 0x39, 0x73, 0xdb, 0x65, 0xad, 0x63,
	0xce, 0xca, 0xd5, 0xb2, 0xc1, 0x40, 0x84, 0x18, 0xc7, 0x34, 0x19, 0x50, 0x19, 0xf5, 0x91, 0xb9,
	0x4b, 0xe5, 0x6a, 0x9f, 0x59, 0xc0, 0xf7, 0x83, 0x5e, 0x16, 0x26, 0x9f, 0x02, 0x61, 0x28, 0x23,
	0xfa, 0x2a, 0x88, 0x39, 0xa3, 0x21, 0x57, 0xf4, 0x22, 0x65, 0xee, 0xb2, 0x26, 0xb5, 0xb3, 0xc8,
	0x8f, 0x59, 0x60, 0x97, 0xab, 0x97, 0x69, 0x1d, 0x58, 0xe0, 0xd0, 0x25, 0x37, 0xc1, 0x3e, 0x0e,
	0xc9, 0x63, 0xd8, 0x10, 0xc8, 0xb8, 0xa0, 0x29, 0x4f, 0x31, 0xe6, 0x09, 0xd2, 0x38, 0x0d, 0xcf,
	0x29, 0x26, 0x41, 0x18, 0xa3, 0xbb, 0x62, 0xca, 0xd2, 0x88, 0x1f, 0x2c, 0xe0, 0x45, 0x1a, 0x9e,
	0xef, 0xe9, 0xb0, 0xf7, 0x0d, 0x2c, 0x99, 0x47, 0xe9, 0xe3, 0xf0, 0x02, 0xa5, 0x3a, 0x94, 0x67,
	0xe4, 0x21, 0xcc, 0x0a, 0xf3, 0xe5, 0x36, 0xb6, 0xa6, 0xb7, 0x9d, 0x2e, 0x29, 0xbf, 0xdf, 0x6c,
	0x23, 0xf8, 0x39, 0xc4, 0x7b, 0x04, 0x0b, 0xf6, 0x58, 0x05, 0xea, 0x42, 0x92, 0x8f, 0xaa, 0x1b,
	0x27, 0xdb, 0x19, 0xcd, 0xf2, 0xbe, 0xf1, 0x7e, 0x81, 0xc5, 0x3c, 0xad, 0x4c, 0x07, 0x89, 0x44,
	0xf2, 0x19, 0x40, 0x90, 0x72, 0x2a, 0xb5, 0x88, 0xe6, 0x2c, 0x76, 0x97, 0xec, 0x9e, 0x79, 0x92,
	0x72, 0x23, 0xee, 0xcf, 0x07, 0xf9, 0x4f, 0xf2, 0xe5, 0x75, 0x1e, 0xcb, 0x31, 0xbb, 0xe6, 0x5e,
	0xa5, 0x56, 0xc3, 0xb3, 0xd9, 0xcd, 0x97, 0xf7, 0x1c, 0x96, 0xcb, 0xd9, 0xb3, 0xae, 0xbb, 0x30,
	0x27, 0xec, 0xa7, 0x6d, 0x7b, 0xb5, 0x2c, 0x95, 0x83, 0xfd, 0x6b, 0x9c, 0x37, 0x82, 0x15, 0x13,
	0x7b, 0x86, 0x31, 0x2a, 0xb4, 0x1e, 0xbe, 0x8b, 0x6d, 0xe9, 0x1d, 0xc1, 0x6a, 0x4d, 0xea, 0xac,
	0x91, 0xcf, 0xab, 0xd7, 0xb7, 0x59, 0x16, 0x2c, 0x11, 0x8a, 0x7b, 0xfc, 0x16, 0xd6, 0xca, 0xf1,
	0xc2, 0x9a, 0xea, 0xdd, 0x4c, 0xff, 0xc7, 0xdd, 0x78, 0xaf, 0xf2, 0xa9, 0x7a, 0x8e, 0xea, 0x5d,
	0x9a, 0x72, 0x90, 0xdf, 0x47, 0x91, 0xd7, 0x5c, 0x6d, 0xc5, 0x11, 0xb7, 0xac, 0x56, 0xa0, 0x0b,
	0x3b, 0x5a, 0xe0, 0x14, 0x13, 0x24, 0xbd, 0xdf, 0x1b, 0xf9, 0xcc, 0x68, 0xf0, 0xff, 0x1d, 0xda,
	0x07, 0x30, 0x23, 0x53, 0x8c, 0x6c, 0x53, 0x75, 0xef, 0x4a, 0xc7, 0xc9, 0x43, 0x68, 0x5a, 0xd1,
	0xe9, 0x5b, 0xa6, 0xda, 0x62, 0xc8, 0x27, 0x70, 0x37, 0xfb, 0x25, 0xf5, 0x5f, 0x3f, 0xa7, 0xbb,
	0x72, 0x13, 0x2c, 0x7d, 0x83, 0xf0, 0x0e, 0xe1, 0xde, 0x8d, 0x36, 0xcc, 0xd0, 0x54, 0xa7, 0x7f,
	0xbd, 0xc6, 0xa3, 0xea, 0x03, 0xe8, 0xfe, 0x76, 0x07, 0x9a, 0x26, 0x4e, 0xf6, 0xf2, 0x3d, 0xf0,
	0x54, 0x60, 0xa0, 0x90, 0xb8, 0xd5, 0xd7, 0x93, 0x5f, 0xc7, 0xc6, 0x7a, 0xfd, 0xbb, 0x3a, 0x94,
	0x67, 0xde, 0x54, 0x21, 0xf3, 0x32, 0x65, 0x6f, 0x21, 0x73, 0x9c, 0xcb, 0x98, 0x69, 0x26, 0x9d,
	0x5b, 0xde, 0x40, 0x26, 0xf6, 0x61, 0x7d, 0x7c, 0x5c, 0x72, 0x1f, 0xe6, 0xaf, 0xad, 0x20, 0x9b,
	0x93, 0x26, 0x28, 0x13, 0x7b, 0x7f, 0xa2, 0x75, 0x5a, 0x69, 0x77, 0xe9, 0x8f, 0xab, 0x4e, 0xe3,
	0xcf, 0xab, 0x4e, 0xe3, 0xaf, 0xab, 0x4e, 0xe3, 0xd7, 0xbf, 0x3b, 0x53, 0x61, 0x53, 0xff, 0x7f,
	0xf7, 0xe8, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x22, 0x4c, 0x8e, 0x04, 0x0a, 0x00, 0x00,
}
