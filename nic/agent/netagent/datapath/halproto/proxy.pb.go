// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proxy.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ProxyKeyHandle is used to operate on a proxy either by its key or handle
type ProxyKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*ProxyKeyHandle_ProxyId
	//	*ProxyKeyHandle_ProxyHandle
	KeyOrHandle isProxyKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *ProxyKeyHandle) Reset()                    { *m = ProxyKeyHandle{} }
func (m *ProxyKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*ProxyKeyHandle) ProtoMessage()               {}
func (*ProxyKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{0} }

type isProxyKeyHandle_KeyOrHandle interface {
	isProxyKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyKeyHandle_ProxyId struct {
	ProxyId uint32 `protobuf:"varint,1,opt,name=proxy_id,json=proxyId,proto3,oneof"`
}
type ProxyKeyHandle_ProxyHandle struct {
	ProxyHandle uint64 `protobuf:"fixed64,2,opt,name=proxy_handle,json=proxyHandle,proto3,oneof"`
}

func (*ProxyKeyHandle_ProxyId) isProxyKeyHandle_KeyOrHandle()     {}
func (*ProxyKeyHandle_ProxyHandle) isProxyKeyHandle_KeyOrHandle() {}

func (m *ProxyKeyHandle) GetKeyOrHandle() isProxyKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxyKeyHandle) GetProxyId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*ProxyKeyHandle_ProxyId); ok {
		return x.ProxyId
	}
	return 0
}

func (m *ProxyKeyHandle) GetProxyHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*ProxyKeyHandle_ProxyHandle); ok {
		return x.ProxyHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxyKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxyKeyHandle_OneofMarshaler, _ProxyKeyHandle_OneofUnmarshaler, _ProxyKeyHandle_OneofSizer, []interface{}{
		(*ProxyKeyHandle_ProxyId)(nil),
		(*ProxyKeyHandle_ProxyHandle)(nil),
	}
}

func _ProxyKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxyKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyKeyHandle_ProxyId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ProxyId))
	case *ProxyKeyHandle_ProxyHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.ProxyHandle))
	case nil:
	default:
		return fmt.Errorf("ProxyKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _ProxyKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxyKeyHandle)
	switch tag {
	case 1: // key_or_handle.proxy_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &ProxyKeyHandle_ProxyId{uint32(x)}
		return true, err
	case 2: // key_or_handle.proxy_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &ProxyKeyHandle_ProxyHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProxyKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxyKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyKeyHandle_ProxyId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProxyId))
	case *ProxyKeyHandle_ProxyHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProxySpec captures all the proxy level configuration
type ProxySpec struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxyKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	ProxyType   ProxyType       `protobuf:"varint,3,opt,name=proxy_type,json=proxyType,proto3,enum=types.ProxyType" json:"proxy_type,omitempty"`
	ProxyQtype  uint32          `protobuf:"varint,4,opt,name=proxy_qtype,json=proxyQtype,proto3" json:"proxy_qtype,omitempty"`
}

func (m *ProxySpec) Reset()                    { *m = ProxySpec{} }
func (m *ProxySpec) String() string            { return proto.CompactTextString(m) }
func (*ProxySpec) ProtoMessage()               {}
func (*ProxySpec) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{1} }

func (m *ProxySpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxySpec) GetKeyOrHandle() *ProxyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxySpec) GetProxyType() ProxyType {
	if m != nil {
		return m.ProxyType
	}
	return ProxyType_PROXY_TYPE_NONE
}

func (m *ProxySpec) GetProxyQtype() uint32 {
	if m != nil {
		return m.ProxyQtype
	}
	return 0
}

// ProxyRequestMsg is batched add or modify proxy request
type ProxyRequestMsg struct {
	Request []*ProxySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyRequestMsg) Reset()                    { *m = ProxyRequestMsg{} }
func (m *ProxyRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyRequestMsg) ProtoMessage()               {}
func (*ProxyRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{2} }

func (m *ProxyRequestMsg) GetRequest() []*ProxySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyStatus is the operational status of a given proxy
type ProxyStatus struct {
	ProxyHandle uint64 `protobuf:"fixed64,1,opt,name=proxy_handle,json=proxyHandle,proto3" json:"proxy_handle,omitempty"`
}

func (m *ProxyStatus) Reset()                    { *m = ProxyStatus{} }
func (m *ProxyStatus) String() string            { return proto.CompactTextString(m) }
func (*ProxyStatus) ProtoMessage()               {}
func (*ProxyStatus) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{3} }

func (m *ProxyStatus) GetProxyHandle() uint64 {
	if m != nil {
		return m.ProxyHandle
	}
	return 0
}

// ProxyResponse is response to ProxySpec
type ProxyResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProxyStatus *ProxyStatus `protobuf:"bytes,2,opt,name=proxy_status,json=proxyStatus" json:"proxy_status,omitempty"`
}

func (m *ProxyResponse) Reset()                    { *m = ProxyResponse{} }
func (m *ProxyResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyResponse) ProtoMessage()               {}
func (*ProxyResponse) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{4} }

func (m *ProxyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyResponse) GetProxyStatus() *ProxyStatus {
	if m != nil {
		return m.ProxyStatus
	}
	return nil
}

// ProxyResponseMsg is batched response to ProxyRequestMsg
type ProxyResponseMsg struct {
	Response []*ProxyResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyResponseMsg) Reset()                    { *m = ProxyResponseMsg{} }
func (m *ProxyResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyResponseMsg) ProtoMessage()               {}
func (*ProxyResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{5} }

func (m *ProxyResponseMsg) GetResponse() []*ProxyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxyDisableRequest is used to delete a proxy
type ProxyDisableRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxyKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyDisableRequest) Reset()                    { *m = ProxyDisableRequest{} }
func (m *ProxyDisableRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyDisableRequest) ProtoMessage()               {}
func (*ProxyDisableRequest) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{6} }

func (m *ProxyDisableRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyDisableRequest) GetKeyOrHandle() *ProxyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyDisableRequestMsg is used to delete a batch of proxy
type ProxyDisableRequestMsg struct {
	Request []*ProxyDisableRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyDisableRequestMsg) Reset()                    { *m = ProxyDisableRequestMsg{} }
func (m *ProxyDisableRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyDisableRequestMsg) ProtoMessage()               {}
func (*ProxyDisableRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{7} }

func (m *ProxyDisableRequestMsg) GetRequest() []*ProxyDisableRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyDisableResponseMsg is batched response to ProxyDisableRequestMsg
type ProxyDisableResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxyDisableResponseMsg) Reset()                    { *m = ProxyDisableResponseMsg{} }
func (m *ProxyDisableResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyDisableResponseMsg) ProtoMessage()               {}
func (*ProxyDisableResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{8} }

func (m *ProxyDisableResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// ProxyGetRequest is used to get information about a proxy
type ProxyGetRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxyKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyGetRequest) Reset()                    { *m = ProxyGetRequest{} }
func (m *ProxyGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetRequest) ProtoMessage()               {}
func (*ProxyGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{9} }

func (m *ProxyGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyGetRequest) GetKeyOrHandle() *ProxyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyGetRequestMsg is batched GET requests for proxys
type ProxyGetRequestMsg struct {
	Request []*ProxyGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyGetRequestMsg) Reset()                    { *m = ProxyGetRequestMsg{} }
func (m *ProxyGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetRequestMsg) ProtoMessage()               {}
func (*ProxyGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{10} }

func (m *ProxyGetRequestMsg) GetRequest() []*ProxyGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyStats is the statistics object for each proxy
type ProxyStats struct {
}

func (m *ProxyStats) Reset()                    { *m = ProxyStats{} }
func (m *ProxyStats) String() string            { return proto.CompactTextString(m) }
func (*ProxyStats) ProtoMessage()               {}
func (*ProxyStats) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{11} }

// ProxyGetResponse captures all the information about a proxy
// only if api_status indicates success, other fields are valid
type ProxyGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *ProxySpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *ProxyStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *ProxyStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *ProxyGetResponse) Reset()                    { *m = ProxyGetResponse{} }
func (m *ProxyGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetResponse) ProtoMessage()               {}
func (*ProxyGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{12} }

func (m *ProxyGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyGetResponse) GetSpec() *ProxySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxyGetResponse) GetStatus() *ProxyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProxyGetResponse) GetStats() *ProxyStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ProxyGetResponseMsg is batched response to ProxyGetRequestMsg
type ProxyGetResponseMsg struct {
	Response []*ProxyGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyGetResponseMsg) Reset()                    { *m = ProxyGetResponseMsg{} }
func (m *ProxyGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetResponseMsg) ProtoMessage()               {}
func (*ProxyGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{13} }

func (m *ProxyGetResponseMsg) GetResponse() []*ProxyGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type IpsecFlowConfig struct {
	Encrypt    bool     `protobuf:"varint,1,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	EspFlowKey *FlowKey `protobuf:"bytes,2,opt,name=esp_flow_key,json=espFlowKey" json:"esp_flow_key,omitempty"`
}

func (m *IpsecFlowConfig) Reset()                    { *m = IpsecFlowConfig{} }
func (m *IpsecFlowConfig) String() string            { return proto.CompactTextString(m) }
func (*IpsecFlowConfig) ProtoMessage()               {}
func (*IpsecFlowConfig) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{14} }

func (m *IpsecFlowConfig) GetEncrypt() bool {
	if m != nil {
		return m.Encrypt
	}
	return false
}

func (m *IpsecFlowConfig) GetEspFlowKey() *FlowKey {
	if m != nil {
		return m.EspFlowKey
	}
	return nil
}

type ProxyFlowConfigRequest struct {
	Meta        *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec        *ProxySpec       `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	FlowKey     *FlowKey         `protobuf:"bytes,3,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	ProxyEn     bool             `protobuf:"varint,4,opt,name=proxy_en,json=proxyEn,proto3" json:"proxy_en,omitempty"`
	FlowData    *FlowData        `protobuf:"bytes,5,opt,name=flow_data,json=flowData" json:"flow_data,omitempty"`
	AllocQid    bool             `protobuf:"varint,6,opt,name=alloc_qid,json=allocQid,proto3" json:"alloc_qid,omitempty"`
	IpsecConfig *IpsecFlowConfig `protobuf:"bytes,7,opt,name=ipsec_config,json=ipsecConfig" json:"ipsec_config,omitempty"`
}

func (m *ProxyFlowConfigRequest) Reset()                    { *m = ProxyFlowConfigRequest{} }
func (m *ProxyFlowConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyFlowConfigRequest) ProtoMessage()               {}
func (*ProxyFlowConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{15} }

func (m *ProxyFlowConfigRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyFlowConfigRequest) GetSpec() *ProxySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxyFlowConfigRequest) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *ProxyFlowConfigRequest) GetProxyEn() bool {
	if m != nil {
		return m.ProxyEn
	}
	return false
}

func (m *ProxyFlowConfigRequest) GetFlowData() *FlowData {
	if m != nil {
		return m.FlowData
	}
	return nil
}

func (m *ProxyFlowConfigRequest) GetAllocQid() bool {
	if m != nil {
		return m.AllocQid
	}
	return false
}

func (m *ProxyFlowConfigRequest) GetIpsecConfig() *IpsecFlowConfig {
	if m != nil {
		return m.IpsecConfig
	}
	return nil
}

type ProxyFlowConfigRequestMsg struct {
	Request []*ProxyFlowConfigRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyFlowConfigRequestMsg) Reset()                    { *m = ProxyFlowConfigRequestMsg{} }
func (m *ProxyFlowConfigRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyFlowConfigRequestMsg) ProtoMessage()               {}
func (*ProxyFlowConfigRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{16} }

func (m *ProxyFlowConfigRequestMsg) GetRequest() []*ProxyFlowConfigRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type ProxyGetFlowInfoRequest struct {
	Meta     *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec     *ProxySpec  `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	FlowKey  *FlowKey    `protobuf:"bytes,3,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	FlowData *FlowData   `protobuf:"bytes,5,opt,name=flow_data,json=flowData" json:"flow_data,omitempty"`
}

func (m *ProxyGetFlowInfoRequest) Reset()                    { *m = ProxyGetFlowInfoRequest{} }
func (m *ProxyGetFlowInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetFlowInfoRequest) ProtoMessage()               {}
func (*ProxyGetFlowInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{17} }

func (m *ProxyGetFlowInfoRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyGetFlowInfoRequest) GetSpec() *ProxySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxyGetFlowInfoRequest) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *ProxyGetFlowInfoRequest) GetFlowData() *FlowData {
	if m != nil {
		return m.FlowData
	}
	return nil
}

type ProxyGetFlowInfoRequestMsg struct {
	Request []*ProxyGetFlowInfoRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyGetFlowInfoRequestMsg) Reset()                    { *m = ProxyGetFlowInfoRequestMsg{} }
func (m *ProxyGetFlowInfoRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetFlowInfoRequestMsg) ProtoMessage()               {}
func (*ProxyGetFlowInfoRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{18} }

func (m *ProxyGetFlowInfoRequestMsg) GetRequest() []*ProxyGetFlowInfoRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type ProxyGetFlowInfoResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Meta      *ObjectMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	ProxyType ProxyType   `protobuf:"varint,3,opt,name=proxy_type,json=proxyType,proto3,enum=types.ProxyType" json:"proxy_type,omitempty"`
	FlowKey   *FlowKey    `protobuf:"bytes,4,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	LifId     uint32      `protobuf:"varint,5,opt,name=lif_id,json=lifId,proto3" json:"lif_id,omitempty"`
	Qtype     uint32      `protobuf:"varint,6,opt,name=qtype,proto3" json:"qtype,omitempty"`
	Qid1      uint32      `protobuf:"varint,7,opt,name=qid1,proto3" json:"qid1,omitempty"`
	Qid2      uint32      `protobuf:"varint,8,opt,name=qid2,proto3" json:"qid2,omitempty"`
}

func (m *ProxyGetFlowInfoResponse) Reset()                    { *m = ProxyGetFlowInfoResponse{} }
func (m *ProxyGetFlowInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyGetFlowInfoResponse) ProtoMessage()               {}
func (*ProxyGetFlowInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{19} }

func (m *ProxyGetFlowInfoResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyGetFlowInfoResponse) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyGetFlowInfoResponse) GetProxyType() ProxyType {
	if m != nil {
		return m.ProxyType
	}
	return ProxyType_PROXY_TYPE_NONE
}

func (m *ProxyGetFlowInfoResponse) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *ProxyGetFlowInfoResponse) GetLifId() uint32 {
	if m != nil {
		return m.LifId
	}
	return 0
}

func (m *ProxyGetFlowInfoResponse) GetQtype() uint32 {
	if m != nil {
		return m.Qtype
	}
	return 0
}

func (m *ProxyGetFlowInfoResponse) GetQid1() uint32 {
	if m != nil {
		return m.Qid1
	}
	return 0
}

func (m *ProxyGetFlowInfoResponse) GetQid2() uint32 {
	if m != nil {
		return m.Qid2
	}
	return 0
}

type ProxyGetFlowInfoResponseMsg struct {
	Response []*ProxyGetFlowInfoResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyGetFlowInfoResponseMsg) Reset()         { *m = ProxyGetFlowInfoResponseMsg{} }
func (m *ProxyGetFlowInfoResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ProxyGetFlowInfoResponseMsg) ProtoMessage()    {}
func (*ProxyGetFlowInfoResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorProxy, []int{20}
}

func (m *ProxyGetFlowInfoResponseMsg) GetResponse() []*ProxyGetFlowInfoResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxyGlobalCfgRequest - to configure global settings for proxy features
type ProxyGlobalCfgRequest struct {
	ProxyType  ProxyType `protobuf:"varint,1,opt,name=proxy_type,json=proxyType,proto3,enum=types.ProxyType" json:"proxy_type,omitempty"`
	BypassMode bool      `protobuf:"varint,2,opt,name=bypass_mode,json=bypassMode,proto3" json:"bypass_mode,omitempty"`
}

func (m *ProxyGlobalCfgRequest) Reset()                    { *m = ProxyGlobalCfgRequest{} }
func (m *ProxyGlobalCfgRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyGlobalCfgRequest) ProtoMessage()               {}
func (*ProxyGlobalCfgRequest) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{21} }

func (m *ProxyGlobalCfgRequest) GetProxyType() ProxyType {
	if m != nil {
		return m.ProxyType
	}
	return ProxyType_PROXY_TYPE_NONE
}

func (m *ProxyGlobalCfgRequest) GetBypassMode() bool {
	if m != nil {
		return m.BypassMode
	}
	return false
}

// ProxyGlobalCfgRequestMsg - is batched global config request
type ProxyGlobalCfgRequestMsg struct {
	Request []*ProxyGlobalCfgRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyGlobalCfgRequestMsg) Reset()                    { *m = ProxyGlobalCfgRequestMsg{} }
func (m *ProxyGlobalCfgRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGlobalCfgRequestMsg) ProtoMessage()               {}
func (*ProxyGlobalCfgRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{22} }

func (m *ProxyGlobalCfgRequestMsg) GetRequest() []*ProxyGlobalCfgRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyGlobalCfgResponseMsg is batched response to ProxyGlobalCfgRequestMsg
type ProxyGlobalCfgResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxyGlobalCfgResponseMsg) Reset()                    { *m = ProxyGlobalCfgResponseMsg{} }
func (m *ProxyGlobalCfgResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyGlobalCfgResponseMsg) ProtoMessage()               {}
func (*ProxyGlobalCfgResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxy, []int{23} }

func (m *ProxyGlobalCfgResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*ProxyKeyHandle)(nil), "proxy.ProxyKeyHandle")
	proto.RegisterType((*ProxySpec)(nil), "proxy.ProxySpec")
	proto.RegisterType((*ProxyRequestMsg)(nil), "proxy.ProxyRequestMsg")
	proto.RegisterType((*ProxyStatus)(nil), "proxy.ProxyStatus")
	proto.RegisterType((*ProxyResponse)(nil), "proxy.ProxyResponse")
	proto.RegisterType((*ProxyResponseMsg)(nil), "proxy.ProxyResponseMsg")
	proto.RegisterType((*ProxyDisableRequest)(nil), "proxy.ProxyDisableRequest")
	proto.RegisterType((*ProxyDisableRequestMsg)(nil), "proxy.ProxyDisableRequestMsg")
	proto.RegisterType((*ProxyDisableResponseMsg)(nil), "proxy.ProxyDisableResponseMsg")
	proto.RegisterType((*ProxyGetRequest)(nil), "proxy.ProxyGetRequest")
	proto.RegisterType((*ProxyGetRequestMsg)(nil), "proxy.ProxyGetRequestMsg")
	proto.RegisterType((*ProxyStats)(nil), "proxy.ProxyStats")
	proto.RegisterType((*ProxyGetResponse)(nil), "proxy.ProxyGetResponse")
	proto.RegisterType((*ProxyGetResponseMsg)(nil), "proxy.ProxyGetResponseMsg")
	proto.RegisterType((*IpsecFlowConfig)(nil), "proxy.IpsecFlowConfig")
	proto.RegisterType((*ProxyFlowConfigRequest)(nil), "proxy.ProxyFlowConfigRequest")
	proto.RegisterType((*ProxyFlowConfigRequestMsg)(nil), "proxy.ProxyFlowConfigRequestMsg")
	proto.RegisterType((*ProxyGetFlowInfoRequest)(nil), "proxy.ProxyGetFlowInfoRequest")
	proto.RegisterType((*ProxyGetFlowInfoRequestMsg)(nil), "proxy.ProxyGetFlowInfoRequestMsg")
	proto.RegisterType((*ProxyGetFlowInfoResponse)(nil), "proxy.ProxyGetFlowInfoResponse")
	proto.RegisterType((*ProxyGetFlowInfoResponseMsg)(nil), "proxy.ProxyGetFlowInfoResponseMsg")
	proto.RegisterType((*ProxyGlobalCfgRequest)(nil), "proxy.ProxyGlobalCfgRequest")
	proto.RegisterType((*ProxyGlobalCfgRequestMsg)(nil), "proxy.ProxyGlobalCfgRequestMsg")
	proto.RegisterType((*ProxyGlobalCfgResponseMsg)(nil), "proxy.ProxyGlobalCfgResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Proxy service

type ProxyClient interface {
	ProxyEnable(ctx context.Context, in *ProxyRequestMsg, opts ...grpc.CallOption) (*ProxyResponseMsg, error)
	ProxyUpdate(ctx context.Context, in *ProxyRequestMsg, opts ...grpc.CallOption) (*ProxyResponseMsg, error)
	ProxyDisable(ctx context.Context, in *ProxyDisableRequestMsg, opts ...grpc.CallOption) (*ProxyDisableResponseMsg, error)
	ProxyGet(ctx context.Context, in *ProxyGetRequestMsg, opts ...grpc.CallOption) (*ProxyGetResponseMsg, error)
	ProxyFlowConfig(ctx context.Context, in *ProxyFlowConfigRequestMsg, opts ...grpc.CallOption) (*ProxyResponseMsg, error)
	ProxyGetFlowInfo(ctx context.Context, in *ProxyGetFlowInfoRequestMsg, opts ...grpc.CallOption) (*ProxyGetFlowInfoResponseMsg, error)
	ProxyGlobalCfg(ctx context.Context, in *ProxyGlobalCfgRequestMsg, opts ...grpc.CallOption) (*ProxyGlobalCfgResponseMsg, error)
}

type proxyClient struct {
	cc *grpc.ClientConn
}

func NewProxyClient(cc *grpc.ClientConn) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) ProxyEnable(ctx context.Context, in *ProxyRequestMsg, opts ...grpc.CallOption) (*ProxyResponseMsg, error) {
	out := new(ProxyResponseMsg)
	err := grpc.Invoke(ctx, "/proxy.Proxy/ProxyEnable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ProxyUpdate(ctx context.Context, in *ProxyRequestMsg, opts ...grpc.CallOption) (*ProxyResponseMsg, error) {
	out := new(ProxyResponseMsg)
	err := grpc.Invoke(ctx, "/proxy.Proxy/ProxyUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ProxyDisable(ctx context.Context, in *ProxyDisableRequestMsg, opts ...grpc.CallOption) (*ProxyDisableResponseMsg, error) {
	out := new(ProxyDisableResponseMsg)
	err := grpc.Invoke(ctx, "/proxy.Proxy/ProxyDisable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ProxyGet(ctx context.Context, in *ProxyGetRequestMsg, opts ...grpc.CallOption) (*ProxyGetResponseMsg, error) {
	out := new(ProxyGetResponseMsg)
	err := grpc.Invoke(ctx, "/proxy.Proxy/ProxyGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ProxyFlowConfig(ctx context.Context, in *ProxyFlowConfigRequestMsg, opts ...grpc.CallOption) (*ProxyResponseMsg, error) {
	out := new(ProxyResponseMsg)
	err := grpc.Invoke(ctx, "/proxy.Proxy/ProxyFlowConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ProxyGetFlowInfo(ctx context.Context, in *ProxyGetFlowInfoRequestMsg, opts ...grpc.CallOption) (*ProxyGetFlowInfoResponseMsg, error) {
	out := new(ProxyGetFlowInfoResponseMsg)
	err := grpc.Invoke(ctx, "/proxy.Proxy/ProxyGetFlowInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ProxyGlobalCfg(ctx context.Context, in *ProxyGlobalCfgRequestMsg, opts ...grpc.CallOption) (*ProxyGlobalCfgResponseMsg, error) {
	out := new(ProxyGlobalCfgResponseMsg)
	err := grpc.Invoke(ctx, "/proxy.Proxy/ProxyGlobalCfg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Proxy service

type ProxyServer interface {
	ProxyEnable(context.Context, *ProxyRequestMsg) (*ProxyResponseMsg, error)
	ProxyUpdate(context.Context, *ProxyRequestMsg) (*ProxyResponseMsg, error)
	ProxyDisable(context.Context, *ProxyDisableRequestMsg) (*ProxyDisableResponseMsg, error)
	ProxyGet(context.Context, *ProxyGetRequestMsg) (*ProxyGetResponseMsg, error)
	ProxyFlowConfig(context.Context, *ProxyFlowConfigRequestMsg) (*ProxyResponseMsg, error)
	ProxyGetFlowInfo(context.Context, *ProxyGetFlowInfoRequestMsg) (*ProxyGetFlowInfoResponseMsg, error)
	ProxyGlobalCfg(context.Context, *ProxyGlobalCfgRequestMsg) (*ProxyGlobalCfgResponseMsg, error)
}

func RegisterProxyServer(s *grpc.Server, srv ProxyServer) {
	s.RegisterService(&_Proxy_serviceDesc, srv)
}

func _Proxy_ProxyEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ProxyEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/ProxyEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ProxyEnable(ctx, req.(*ProxyRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ProxyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ProxyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/ProxyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ProxyUpdate(ctx, req.(*ProxyRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ProxyDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyDisableRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ProxyDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/ProxyDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ProxyDisable(ctx, req.(*ProxyDisableRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ProxyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ProxyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/ProxyGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ProxyGet(ctx, req.(*ProxyGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ProxyFlowConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyFlowConfigRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ProxyFlowConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/ProxyFlowConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ProxyFlowConfig(ctx, req.(*ProxyFlowConfigRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ProxyGetFlowInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyGetFlowInfoRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ProxyGetFlowInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/ProxyGetFlowInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ProxyGetFlowInfo(ctx, req.(*ProxyGetFlowInfoRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ProxyGlobalCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyGlobalCfgRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ProxyGlobalCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.Proxy/ProxyGlobalCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ProxyGlobalCfg(ctx, req.(*ProxyGlobalCfgRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyEnable",
			Handler:    _Proxy_ProxyEnable_Handler,
		},
		{
			MethodName: "ProxyUpdate",
			Handler:    _Proxy_ProxyUpdate_Handler,
		},
		{
			MethodName: "ProxyDisable",
			Handler:    _Proxy_ProxyDisable_Handler,
		},
		{
			MethodName: "ProxyGet",
			Handler:    _Proxy_ProxyGet_Handler,
		},
		{
			MethodName: "ProxyFlowConfig",
			Handler:    _Proxy_ProxyFlowConfig_Handler,
		},
		{
			MethodName: "ProxyGetFlowInfo",
			Handler:    _Proxy_ProxyGetFlowInfo_Handler,
		},
		{
			MethodName: "ProxyGlobalCfg",
			Handler:    _Proxy_ProxyGlobalCfg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}

func (m *ProxyKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ProxyKeyHandle_ProxyId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintProxy(dAtA, i, uint64(m.ProxyId))
	return i, nil
}
func (m *ProxyKeyHandle_ProxyHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ProxyHandle))
	i += 8
	return i, nil
}
func (m *ProxySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n3, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ProxyType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.ProxyType))
	}
	if m.ProxyQtype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.ProxyQtype))
	}
	return i, nil
}

func (m *ProxyRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ProxyHandle))
		i += 8
	}
	return i, nil
}

func (m *ProxyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.ApiStatus))
	}
	if m.ProxyStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.ProxyStatus.Size()))
		n4, err := m.ProxyStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ProxyResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyDisableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyDisableRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Meta.Size()))
		n5, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n6, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ProxyDisableRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyDisableRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyDisableResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyDisableResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA8 := make([]byte, len(m.ApiStatus)*10)
		var j7 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxy(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *ProxyGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Meta.Size()))
		n9, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n10, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *ProxyGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ProxyGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Spec.Size()))
		n11, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Status.Size()))
		n12, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Stats.Size()))
		n13, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *ProxyGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecFlowConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecFlowConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Encrypt {
		dAtA[i] = 0x8
		i++
		if m.Encrypt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EspFlowKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.EspFlowKey.Size()))
		n14, err := m.EspFlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *ProxyFlowConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyFlowConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Meta.Size()))
		n15, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Spec.Size()))
		n16, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.FlowKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.FlowKey.Size()))
		n17, err := m.FlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.ProxyEn {
		dAtA[i] = 0x20
		i++
		if m.ProxyEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FlowData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.FlowData.Size()))
		n18, err := m.FlowData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.AllocQid {
		dAtA[i] = 0x30
		i++
		if m.AllocQid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IpsecConfig != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.IpsecConfig.Size()))
		n19, err := m.IpsecConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *ProxyFlowConfigRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyFlowConfigRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyGetFlowInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGetFlowInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Meta.Size()))
		n20, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Spec.Size()))
		n21, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.FlowKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.FlowKey.Size()))
		n22, err := m.FlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.FlowData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.FlowData.Size()))
		n23, err := m.FlowData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *ProxyGetFlowInfoRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGetFlowInfoRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyGetFlowInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGetFlowInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Meta != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Meta.Size()))
		n24, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.ProxyType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.ProxyType))
	}
	if m.FlowKey != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.FlowKey.Size()))
		n25, err := m.FlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.LifId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.LifId))
	}
	if m.Qtype != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Qtype))
	}
	if m.Qid1 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Qid1))
	}
	if m.Qid2 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.Qid2))
	}
	return i, nil
}

func (m *ProxyGetFlowInfoResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGetFlowInfoResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyGlobalCfgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGlobalCfgRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProxy(dAtA, i, uint64(m.ProxyType))
	}
	if m.BypassMode {
		dAtA[i] = 0x10
		i++
		if m.BypassMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ProxyGlobalCfgRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGlobalCfgRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyGlobalCfgResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyGlobalCfgResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA27 := make([]byte, len(m.ApiStatus)*10)
		var j26 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxy(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	return i, nil
}

func encodeVarintProxy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProxyKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *ProxyKeyHandle_ProxyId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovProxy(uint64(m.ProxyId))
	return n
}
func (m *ProxyKeyHandle_ProxyHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *ProxySpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.ProxyType != 0 {
		n += 1 + sovProxy(uint64(m.ProxyType))
	}
	if m.ProxyQtype != 0 {
		n += 1 + sovProxy(uint64(m.ProxyQtype))
	}
	return n
}

func (m *ProxyRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func (m *ProxyStatus) Size() (n int) {
	var l int
	_ = l
	if m.ProxyHandle != 0 {
		n += 9
	}
	return n
}

func (m *ProxyResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovProxy(uint64(m.ApiStatus))
	}
	if m.ProxyStatus != nil {
		l = m.ProxyStatus.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func (m *ProxyDisableRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyDisableRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func (m *ProxyDisableResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovProxy(uint64(e))
		}
		n += 1 + sovProxy(uint64(l)) + l
	}
	return n
}

func (m *ProxyGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func (m *ProxyStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ProxyGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovProxy(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func (m *IpsecFlowConfig) Size() (n int) {
	var l int
	_ = l
	if m.Encrypt {
		n += 2
	}
	if m.EspFlowKey != nil {
		l = m.EspFlowKey.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyFlowConfigRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.FlowKey != nil {
		l = m.FlowKey.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.ProxyEn {
		n += 2
	}
	if m.FlowData != nil {
		l = m.FlowData.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.AllocQid {
		n += 2
	}
	if m.IpsecConfig != nil {
		l = m.IpsecConfig.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyFlowConfigRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func (m *ProxyGetFlowInfoRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.FlowKey != nil {
		l = m.FlowKey.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.FlowData != nil {
		l = m.FlowData.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyGetFlowInfoRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func (m *ProxyGetFlowInfoResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovProxy(uint64(m.ApiStatus))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.ProxyType != 0 {
		n += 1 + sovProxy(uint64(m.ProxyType))
	}
	if m.FlowKey != nil {
		l = m.FlowKey.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.LifId != 0 {
		n += 1 + sovProxy(uint64(m.LifId))
	}
	if m.Qtype != 0 {
		n += 1 + sovProxy(uint64(m.Qtype))
	}
	if m.Qid1 != 0 {
		n += 1 + sovProxy(uint64(m.Qid1))
	}
	if m.Qid2 != 0 {
		n += 1 + sovProxy(uint64(m.Qid2))
	}
	return n
}

func (m *ProxyGetFlowInfoResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func (m *ProxyGlobalCfgRequest) Size() (n int) {
	var l int
	_ = l
	if m.ProxyType != 0 {
		n += 1 + sovProxy(uint64(m.ProxyType))
	}
	if m.BypassMode {
		n += 2
	}
	return n
}

func (m *ProxyGlobalCfgRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxy(uint64(l))
		}
	}
	return n
}

func (m *ProxyGlobalCfgResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovProxy(uint64(e))
		}
		n += 1 + sovProxy(uint64(l)) + l
	}
	return n
}

func sovProxy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProxy(x uint64) (n int) {
	return sovProxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProxyKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &ProxyKeyHandle_ProxyId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &ProxyKeyHandle_ProxyHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxyKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyType", wireType)
			}
			m.ProxyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyType |= (ProxyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyQtype", wireType)
			}
			m.ProxyQtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyQtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxySpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyHandle", wireType)
			}
			m.ProxyHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyStatus == nil {
				m.ProxyStatus = &ProxyStatus{}
			}
			if err := m.ProxyStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxyResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyDisableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyDisableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyDisableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxyKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyDisableRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyDisableRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyDisableRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyDisableRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyDisableResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyDisableResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyDisableResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProxy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProxy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProxy
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProxy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxyKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ProxySpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ProxyStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &ProxyStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxyGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecFlowConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecFlowConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecFlowConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypt = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EspFlowKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EspFlowKey == nil {
				m.EspFlowKey = &FlowKey{}
			}
			if err := m.EspFlowKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyFlowConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyFlowConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyFlowConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ProxySpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowKey == nil {
				m.FlowKey = &FlowKey{}
			}
			if err := m.FlowKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProxyEn = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowData == nil {
				m.FlowData = &FlowData{}
			}
			if err := m.FlowData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocQid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllocQid = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpsecConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpsecConfig == nil {
				m.IpsecConfig = &IpsecFlowConfig{}
			}
			if err := m.IpsecConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyFlowConfigRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyFlowConfigRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyFlowConfigRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyFlowConfigRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGetFlowInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGetFlowInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGetFlowInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ProxySpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowKey == nil {
				m.FlowKey = &FlowKey{}
			}
			if err := m.FlowKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowData == nil {
				m.FlowData = &FlowData{}
			}
			if err := m.FlowData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGetFlowInfoRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGetFlowInfoRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGetFlowInfoRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyGetFlowInfoRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGetFlowInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGetFlowInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGetFlowInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyType", wireType)
			}
			m.ProxyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyType |= (ProxyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowKey == nil {
				m.FlowKey = &FlowKey{}
			}
			if err := m.FlowKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifId", wireType)
			}
			m.LifId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qtype", wireType)
			}
			m.Qtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qid1", wireType)
			}
			m.Qid1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qid1 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qid2", wireType)
			}
			m.Qid2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qid2 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGetFlowInfoResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGetFlowInfoResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGetFlowInfoResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxyGetFlowInfoResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGlobalCfgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGlobalCfgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGlobalCfgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyType", wireType)
			}
			m.ProxyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyType |= (ProxyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BypassMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BypassMode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGlobalCfgRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGlobalCfgRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGlobalCfgRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyGlobalCfgRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyGlobalCfgResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyGlobalCfgResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyGlobalCfgResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProxy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProxy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProxy
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProxy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProxy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProxy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProxy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProxy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProxy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proxy.proto", fileDescriptorProxy) }

var fileDescriptorProxy = []byte{
	// 1036 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0x8e, 0x12, 0xff, 0xc8, 0xc7, 0x76, 0x13, 0x96, 0x26, 0x51, 0x1c, 0xea, 0xb8, 0x0b, 0x0c,
	0x99, 0x32, 0x13, 0x8a, 0xcb, 0x5f, 0x87, 0x61, 0x06, 0x9a, 0xb4, 0x4d, 0x5a, 0xd2, 0xd0, 0xa5,
	0xe5, 0xa2, 0x5c, 0x68, 0x64, 0x6b, 0x9d, 0x8a, 0xa8, 0x96, 0xe2, 0x55, 0x27, 0xe8, 0x4d, 0x78,
	0x81, 0x3e, 0x02, 0xb7, 0x70, 0xc1, 0x0d, 0x97, 0x3c, 0x02, 0x13, 0x5e, 0x84, 0xd9, 0xb3, 0x2b,
	0xeb, 0xc7, 0x76, 0xd2, 0x64, 0x06, 0x7a, 0xe5, 0xfd, 0x39, 0xfb, 0x9d, 0x73, 0xbe, 0xf3, 0x69,
	0xf7, 0x18, 0xea, 0xe1, 0x28, 0xf8, 0x39, 0xde, 0x0a, 0x47, 0x41, 0x14, 0x90, 0x32, 0x4e, 0x5a,
	0xf5, 0x28, 0x0e, 0xb9, 0x50, 0x6b, 0xad, 0xa6, 0xe0, 0x42, 0x78, 0xc1, 0x50, 0x4d, 0x69, 0x1f,
	0xae, 0x7c, 0x27, 0x8d, 0x1e, 0xf2, 0x78, 0xd7, 0x19, 0xba, 0x3e, 0x27, 0xeb, 0x60, 0xe2, 0x31,
	0xdb, 0x73, 0x2d, 0xa3, 0x63, 0x6c, 0x36, 0x77, 0xe7, 0x58, 0x15, 0x57, 0xf6, 0x5c, 0xf2, 0x2e,
	0x34, 0xd4, 0xe6, 0x73, 0x34, 0xb6, 0xe6, 0x3b, 0xc6, 0x66, 0x65, 0x77, 0x8e, 0x29, 0xb7, 0x0a,
	0xe1, 0xce, 0x22, 0x34, 0x8f, 0x78, 0x6c, 0x07, 0x23, 0x6d, 0x45, 0x7f, 0x37, 0xa0, 0x86, 0x5e,
	0xbe, 0x0f, 0x79, 0x9f, 0xbc, 0x0f, 0xa5, 0x17, 0x3c, 0x72, 0x10, 0xbc, 0xde, 0x7d, 0x6b, 0x4b,
	0x45, 0x77, 0xd0, 0xfb, 0x89, 0xf7, 0xa3, 0x7d, 0x1e, 0x39, 0x0c, 0xb7, 0xc9, 0xed, 0x02, 0x0a,
	0xfa, 0xaa, 0x77, 0x97, 0xb7, 0x54, 0x86, 0xf9, 0xa8, 0x59, 0xfd, 0x88, 0xc7, 0x07, 0x23, 0x9d,
	0xc2, 0x47, 0x00, 0x2a, 0x4a, 0x09, 0x6d, 0x2d, 0x74, 0x8c, 0xcd, 0x2b, 0xdd, 0x25, 0xed, 0x07,
	0xcf, 0x3d, 0x89, 0x43, 0xce, 0x6a, 0x61, 0x32, 0x24, 0x1b, 0x9a, 0x37, 0xfb, 0x18, 0x4f, 0x94,
	0x64, 0xda, 0x4c, 0x61, 0x3c, 0x96, 0x2b, 0xf4, 0x2b, 0x58, 0xc4, 0x83, 0x8c, 0x1f, 0xbf, 0xe4,
	0x22, 0xda, 0x17, 0x87, 0xe4, 0x06, 0x54, 0x47, 0x6a, 0x66, 0x19, 0x9d, 0x85, 0xcd, 0x7a, 0x77,
	0x29, 0x1b, 0x99, 0xcc, 0x94, 0x25, 0x06, 0xf4, 0x26, 0xd4, 0xd5, 0x6a, 0xe4, 0x44, 0x2f, 0x05,
	0xb9, 0x5e, 0x60, 0x51, 0x32, 0x51, 0xc9, 0x71, 0x48, 0x4f, 0xa0, 0xa9, 0x1d, 0x8a, 0x30, 0x18,
	0x0a, 0xcc, 0xc9, 0x09, 0x3d, 0x5b, 0x20, 0x02, 0x9e, 0x48, 0x73, 0xfa, 0x26, 0xf4, 0x14, 0x32,
	0xab, 0x39, 0xc9, 0x90, 0x7c, 0x9a, 0x38, 0xd1, 0x47, 0x14, 0x7d, 0x24, 0x17, 0xa4, 0x3a, 0xa4,
	0x1c, 0xab, 0x09, 0xdd, 0x81, 0xa5, 0x9c, 0x63, 0x99, 0xea, 0x4d, 0x30, 0x47, 0x7a, 0xaa, 0x73,
	0xbd, 0x9a, 0x85, 0x49, 0x4c, 0xd9, 0xd8, 0x8a, 0x9e, 0xc0, 0xdb, 0xb8, 0xb5, 0xe3, 0x09, 0xa7,
	0xe7, 0x73, 0x4d, 0xdb, 0x7f, 0x5f, 0x7a, 0xfa, 0x08, 0x56, 0xa6, 0x38, 0x96, 0x49, 0x7c, 0x52,
	0xac, 0x57, 0x2b, 0x0b, 0x97, 0xb7, 0x4f, 0x2b, 0xf7, 0x00, 0x56, 0xf3, 0xfb, 0x29, 0x2b, 0xc5,
	0x8a, 0x2c, 0x9c, 0x53, 0x11, 0x2a, 0xb4, 0x88, 0xee, 0xf3, 0xe8, 0xff, 0x23, 0xe4, 0x1e, 0x90,
	0x82, 0x53, 0x55, 0xd1, 0x02, 0x19, 0x2b, 0x59, 0xa8, 0xd4, 0x36, 0x25, 0xa2, 0x01, 0x30, 0xd6,
	0x8c, 0xa0, 0xbf, 0x19, 0x5a, 0x26, 0x68, 0x7a, 0x59, 0x89, 0xbe, 0x07, 0x25, 0x11, 0xf2, 0xbe,
	0xce, 0x66, 0xf2, 0xfb, 0xc1, 0x5d, 0x72, 0x03, 0x2a, 0x1a, 0x72, 0x61, 0xa6, 0x84, 0xb5, 0x05,
	0xf9, 0x00, 0xca, 0x72, 0x24, 0xf0, 0x13, 0x96, 0x84, 0x16, 0x4c, 0x05, 0x53, 0xfb, 0xf4, 0x81,
	0x16, 0x68, 0x26, 0x7e, 0xc9, 0xcb, 0xad, 0x09, 0xa5, 0xaf, 0x4e, 0x10, 0x33, 0x21, 0x76, 0x1b,
	0x16, 0xf7, 0x42, 0xc1, 0xfb, 0xf7, 0xfc, 0xe0, 0x64, 0x3b, 0x18, 0x0e, 0xbc, 0x43, 0x62, 0x41,
	0x95, 0x0f, 0xfb, 0xa3, 0x38, 0x8c, 0x90, 0x07, 0x93, 0x25, 0x53, 0xd2, 0x85, 0x06, 0x17, 0xa1,
	0x3d, 0xf0, 0x83, 0x13, 0xfb, 0x88, 0xc7, 0xe3, 0xdc, 0x93, 0x6b, 0x59, 0x82, 0x3c, 0xe4, 0x31,
	0x03, 0x2e, 0x42, 0x3d, 0xa6, 0xbf, 0xce, 0x6b, 0x55, 0xa7, 0x1e, 0x2e, 0x28, 0xa0, 0xd7, 0x63,
	0xfa, 0x43, 0x30, 0xc7, 0x71, 0x2d, 0xcc, 0x88, 0xab, 0x3a, 0x50, 0x03, 0xb2, 0x96, 0xbc, 0x13,
	0x7c, 0x88, 0x6c, 0x9b, 0xfa, 0x95, 0xb8, 0x3b, 0x24, 0x5b, 0x50, 0x43, 0x1c, 0xd7, 0x89, 0x1c,
	0xab, 0xac, 0x23, 0xcb, 0x02, 0xed, 0x38, 0x91, 0xc3, 0xd0, 0x97, 0x1c, 0x91, 0x75, 0xa8, 0x39,
	0xbe, 0x1f, 0xf4, 0xed, 0x63, 0xcf, 0xb5, 0x2a, 0x88, 0x65, 0xe2, 0xc2, 0x63, 0xcf, 0x25, 0xb7,
	0xa1, 0xe1, 0x49, 0x76, 0xed, 0x3e, 0x26, 0x6e, 0x55, 0x11, 0x2f, 0xd1, 0x6b, 0x81, 0x78, 0x56,
	0x47, 0x5b, 0x35, 0xa1, 0x4f, 0x60, 0x6d, 0x3a, 0x6d, 0xb2, 0xd4, 0x9f, 0x17, 0x3f, 0x81, 0x6b,
	0x59, 0x56, 0x26, 0x8e, 0xa4, 0x5f, 0xc2, 0x1f, 0x86, 0xbe, 0x13, 0xee, 0xf3, 0x48, 0x9a, 0xed,
	0x0d, 0x07, 0xc1, 0x9b, 0x2f, 0xc7, 0x05, 0x39, 0xa7, 0x3f, 0x40, 0x6b, 0x46, 0x12, 0x92, 0x9c,
	0x2f, 0x8a, 0xe4, 0xb4, 0x0b, 0x9f, 0x41, 0xe1, 0x4c, 0xca, 0xce, 0xab, 0x79, 0xb0, 0x26, 0x8d,
	0x2e, 0x7b, 0x43, 0x24, 0x7c, 0xce, 0x9f, 0xcd, 0xe7, 0x85, 0x1f, 0xfc, 0x2c, 0xb5, 0xa5, 0xf3,
	0xa8, 0x5d, 0x86, 0x8a, 0xef, 0x0d, 0x64, 0x3f, 0x54, 0xc6, 0xc6, 0xa0, 0xec, 0x7b, 0x83, 0x3d,
	0x97, 0x5c, 0x85, 0xb2, 0x6a, 0x17, 0x2a, 0x6a, 0x15, 0x27, 0x84, 0x40, 0xe9, 0xd8, 0x73, 0x3f,
	0x46, 0x99, 0x36, 0x19, 0x8e, 0xf5, 0x5a, 0xd7, 0x32, 0xc7, 0x6b, 0x5d, 0xfa, 0x0c, 0xd6, 0x67,
	0xd1, 0x24, 0x0b, 0xf0, 0xe5, 0xc4, 0x45, 0xb4, 0x31, 0xb3, 0x02, 0x13, 0x17, 0x92, 0x07, 0xcb,
	0xca, 0xca, 0x0f, 0x7a, 0x8e, 0xbf, 0x3d, 0x18, 0xdf, 0x16, 0x79, 0x9e, 0x8c, 0xd7, 0x6a, 0x8c,
	0x7a, 0x71, 0xe8, 0x08, 0x61, 0xbf, 0x08, 0x5c, 0xf5, 0xec, 0x98, 0x0c, 0xd4, 0xd2, 0x7e, 0xe0,
	0x72, 0xca, 0x92, 0x6a, 0x17, 0x5c, 0xc9, 0x1c, 0x3e, 0x2b, 0x8a, 0xe8, 0x9d, 0x5c, 0x0a, 0x85,
	0x13, 0xa9, 0x84, 0xbe, 0xd5, 0x9f, 0x6d, 0xc6, 0xe2, 0xf2, 0xaf, 0x6e, 0xf7, 0x55, 0x09, 0xca,
	0x08, 0x47, 0xbe, 0xd6, 0x5d, 0xd8, 0xdd, 0xa1, 0x7c, 0xca, 0xc9, 0x4a, 0xbe, 0x87, 0x49, 0xc2,
	0x6e, 0xad, 0x4e, 0xeb, 0x6d, 0xf6, 0xc5, 0x21, 0x9d, 0x1b, 0x23, 0x3c, 0x0d, 0x5d, 0x27, 0xba,
	0x14, 0xc2, 0x01, 0x34, 0xb2, 0xfd, 0x04, 0xb9, 0x36, 0xbb, 0x09, 0x91, 0x48, 0xed, 0xa9, 0xdb,
	0x59, 0xc0, 0x6d, 0x30, 0x13, 0x45, 0x90, 0xb5, 0xe9, 0x8f, 0xb8, 0x04, 0x6a, 0xcd, 0x78, 0xc6,
	0x14, 0xc8, 0x23, 0xdd, 0x99, 0x64, 0x5e, 0xb0, 0xce, 0x99, 0xb7, 0xe1, 0x39, 0x59, 0xfe, 0x98,
	0x76, 0x07, 0x89, 0x4c, 0xc9, 0xf5, 0xb3, 0x6f, 0x10, 0x89, 0x48, 0xcf, 0x91, 0xb8, 0x02, 0x7f,
	0xaa, 0xff, 0xb2, 0x8c, 0xe5, 0x41, 0x36, 0xce, 0xd2, 0x95, 0x04, 0xee, 0xcc, 0x30, 0xc8, 0xc0,
	0xde, 0x69, 0xfd, 0x79, 0xda, 0x36, 0xfe, 0x3a, 0x6d, 0x1b, 0x7f, 0x9f, 0xb6, 0x8d, 0x5f, 0xfe,
	0x69, 0xcf, 0x3d, 0x33, 0x9f, 0x3b, 0x3e, 0xfe, 0x4b, 0xea, 0x55, 0xf0, 0xe7, 0xd6, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xfb, 0xd5, 0x6c, 0xfe, 0x5e, 0x0d, 0x00, 0x00,
}
