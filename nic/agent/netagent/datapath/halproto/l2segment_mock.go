// Code generated by MockGen. DO NOT EDIT.
// Source: l2segment.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockisL2SegmentKeyHandle_KeyOrHandle is a mock of isL2SegmentKeyHandle_KeyOrHandle interface
type MockisL2SegmentKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder
}

// MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisL2SegmentKeyHandle_KeyOrHandle
type MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisL2SegmentKeyHandle_KeyOrHandle
}

// NewMockisL2SegmentKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisL2SegmentKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisL2SegmentKeyHandle_KeyOrHandle {
	mock := &MockisL2SegmentKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisL2SegmentKeyHandle_KeyOrHandle) EXPECT() *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isL2SegmentKeyHandle_KeyOrHandle mocks base method
func (m *MockisL2SegmentKeyHandle_KeyOrHandle) isL2SegmentKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isL2SegmentKeyHandle_KeyOrHandle")
}

// isL2SegmentKeyHandle_KeyOrHandle indicates an expected call of isL2SegmentKeyHandle_KeyOrHandle
func (mr *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder) isL2SegmentKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isL2SegmentKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisL2SegmentKeyHandle_KeyOrHandle)(nil).isL2SegmentKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisL2SegmentKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisL2SegmentKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisL2SegmentKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisL2SegmentKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisL2SegmentKeyHandle_KeyOrHandle)(nil).Size))
}

// MockL2SegmentClient is a mock of L2SegmentClient interface
type MockL2SegmentClient struct {
	ctrl     *gomock.Controller
	recorder *MockL2SegmentClientMockRecorder
}

// MockL2SegmentClientMockRecorder is the mock recorder for MockL2SegmentClient
type MockL2SegmentClientMockRecorder struct {
	mock *MockL2SegmentClient
}

// NewMockL2SegmentClient creates a new mock instance
func NewMockL2SegmentClient(ctrl *gomock.Controller) *MockL2SegmentClient {
	mock := &MockL2SegmentClient{ctrl: ctrl}
	mock.recorder = &MockL2SegmentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockL2SegmentClient) EXPECT() *MockL2SegmentClientMockRecorder {
	return m.recorder
}

// L2SegmentCreate mocks base method
func (m *MockL2SegmentClient) L2SegmentCreate(ctx context.Context, in *L2SegmentRequestMsg, opts ...grpc.CallOption) (*L2SegmentResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "L2SegmentCreate", varargs...)
	ret0, _ := ret[0].(*L2SegmentResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L2SegmentCreate indicates an expected call of L2SegmentCreate
func (mr *MockL2SegmentClientMockRecorder) L2SegmentCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L2SegmentCreate", reflect.TypeOf((*MockL2SegmentClient)(nil).L2SegmentCreate), varargs...)
}

// L2SegmentUpdate mocks base method
func (m *MockL2SegmentClient) L2SegmentUpdate(ctx context.Context, in *L2SegmentRequestMsg, opts ...grpc.CallOption) (*L2SegmentResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "L2SegmentUpdate", varargs...)
	ret0, _ := ret[0].(*L2SegmentResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L2SegmentUpdate indicates an expected call of L2SegmentUpdate
func (mr *MockL2SegmentClientMockRecorder) L2SegmentUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L2SegmentUpdate", reflect.TypeOf((*MockL2SegmentClient)(nil).L2SegmentUpdate), varargs...)
}

// L2SegmentDelete mocks base method
func (m *MockL2SegmentClient) L2SegmentDelete(ctx context.Context, in *L2SegmentDeleteRequestMsg, opts ...grpc.CallOption) (*L2SegmentDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "L2SegmentDelete", varargs...)
	ret0, _ := ret[0].(*L2SegmentDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L2SegmentDelete indicates an expected call of L2SegmentDelete
func (mr *MockL2SegmentClientMockRecorder) L2SegmentDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L2SegmentDelete", reflect.TypeOf((*MockL2SegmentClient)(nil).L2SegmentDelete), varargs...)
}

// L2SegmentGet mocks base method
func (m *MockL2SegmentClient) L2SegmentGet(ctx context.Context, in *L2SegmentGetRequestMsg, opts ...grpc.CallOption) (*L2SegmentGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "L2SegmentGet", varargs...)
	ret0, _ := ret[0].(*L2SegmentGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L2SegmentGet indicates an expected call of L2SegmentGet
func (mr *MockL2SegmentClientMockRecorder) L2SegmentGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L2SegmentGet", reflect.TypeOf((*MockL2SegmentClient)(nil).L2SegmentGet), varargs...)
}

// MockL2SegmentServer is a mock of L2SegmentServer interface
type MockL2SegmentServer struct {
	ctrl     *gomock.Controller
	recorder *MockL2SegmentServerMockRecorder
}

// MockL2SegmentServerMockRecorder is the mock recorder for MockL2SegmentServer
type MockL2SegmentServerMockRecorder struct {
	mock *MockL2SegmentServer
}

// NewMockL2SegmentServer creates a new mock instance
func NewMockL2SegmentServer(ctrl *gomock.Controller) *MockL2SegmentServer {
	mock := &MockL2SegmentServer{ctrl: ctrl}
	mock.recorder = &MockL2SegmentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockL2SegmentServer) EXPECT() *MockL2SegmentServerMockRecorder {
	return m.recorder
}

// L2SegmentCreate mocks base method
func (m *MockL2SegmentServer) L2SegmentCreate(arg0 context.Context, arg1 *L2SegmentRequestMsg) (*L2SegmentResponseMsg, error) {
	ret := m.ctrl.Call(m, "L2SegmentCreate", arg0, arg1)
	ret0, _ := ret[0].(*L2SegmentResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L2SegmentCreate indicates an expected call of L2SegmentCreate
func (mr *MockL2SegmentServerMockRecorder) L2SegmentCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L2SegmentCreate", reflect.TypeOf((*MockL2SegmentServer)(nil).L2SegmentCreate), arg0, arg1)
}

// L2SegmentUpdate mocks base method
func (m *MockL2SegmentServer) L2SegmentUpdate(arg0 context.Context, arg1 *L2SegmentRequestMsg) (*L2SegmentResponseMsg, error) {
	ret := m.ctrl.Call(m, "L2SegmentUpdate", arg0, arg1)
	ret0, _ := ret[0].(*L2SegmentResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L2SegmentUpdate indicates an expected call of L2SegmentUpdate
func (mr *MockL2SegmentServerMockRecorder) L2SegmentUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L2SegmentUpdate", reflect.TypeOf((*MockL2SegmentServer)(nil).L2SegmentUpdate), arg0, arg1)
}

// L2SegmentDelete mocks base method
func (m *MockL2SegmentServer) L2SegmentDelete(arg0 context.Context, arg1 *L2SegmentDeleteRequestMsg) (*L2SegmentDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "L2SegmentDelete", arg0, arg1)
	ret0, _ := ret[0].(*L2SegmentDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L2SegmentDelete indicates an expected call of L2SegmentDelete
func (mr *MockL2SegmentServerMockRecorder) L2SegmentDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L2SegmentDelete", reflect.TypeOf((*MockL2SegmentServer)(nil).L2SegmentDelete), arg0, arg1)
}

// L2SegmentGet mocks base method
func (m *MockL2SegmentServer) L2SegmentGet(arg0 context.Context, arg1 *L2SegmentGetRequestMsg) (*L2SegmentGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "L2SegmentGet", arg0, arg1)
	ret0, _ := ret[0].(*L2SegmentGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L2SegmentGet indicates an expected call of L2SegmentGet
func (mr *MockL2SegmentServerMockRecorder) L2SegmentGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L2SegmentGet", reflect.TypeOf((*MockL2SegmentServer)(nil).L2SegmentGet), arg0, arg1)
}
