// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: acl.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// DropReason enums
type DropReason int32

const (
	DropReason_INPUT_MAPPING__DROP                   DropReason = 0
	DropReason_INPUT_MAPPING_DEJAVU__DROP            DropReason = 1
	DropReason_FLOW_HIT__DROP                        DropReason = 2
	DropReason_FLOW_MISS__DROP                       DropReason = 3
	DropReason_IPSG__DROP                            DropReason = 4
	DropReason_INGRESS_POLICER__DROP                 DropReason = 5
	DropReason_RX_POLICER__DROP                      DropReason = 6
	DropReason_NACL__DROP                            DropReason = 7
	DropReason_MALFORMED_PKT__DROP                   DropReason = 8
	DropReason_PING_OF_DEATH__DROP                   DropReason = 9
	DropReason_FRAGMENT_TOO_SMALL__DROP              DropReason = 10
	DropReason_IP_NORMALIZATION__DROP                DropReason = 11
	DropReason_TCP_NORMALIZATION__DROP               DropReason = 12
	DropReason_TCP_XMAS_TREE_PKT__DROP               DropReason = 13
	DropReason_TCP_NON_SYN_FIRST_PKT__DROP           DropReason = 14
	DropReason_ICMP_NORMALIZATION__DROP              DropReason = 15
	DropReason_ICMP_SRC_QUENCH_MSG__DROP             DropReason = 16
	DropReason_ICMP_REDIRECT_MSG__DROP               DropReason = 17
	DropReason_ICMP_INFO_REQ_MSG__DROP               DropReason = 18
	DropReason_ICMP_ADDR_REQ_MSG__DROP               DropReason = 19
	DropReason_ICMP_TRACEROUTE_MSG__DROP             DropReason = 20
	DropReason_ICMP_RSVD_TYPE_MSG__DROP              DropReason = 21
	DropReason_INPUT_PROPERTIES_MISS__DROP           DropReason = 22
	DropReason_TCP_OUT_OF_WINDOW__DROP               DropReason = 23
	DropReason_TCP_SPLIT_HANDSHAKE__DROP             DropReason = 24
	DropReason_TCP_WIN_ZERO_DROP__DROP               DropReason = 25
	DropReason_TCP_ACK_ERR__DROP                     DropReason = 26
	DropReason_TCP_DATA_AFTER_FIN__DROP              DropReason = 27
	DropReason_TCP_NON_RST_PKT_AFTER_RST__DROP       DropReason = 28
	DropReason_TCP_INVALID_RESPONDER_FIRST_PKT__DROP DropReason = 29
	DropReason_TCP_UNEXPECTED_PKT__DROP              DropReason = 30
)

var DropReason_name = map[int32]string{
	0:  "INPUT_MAPPING__DROP",
	1:  "INPUT_MAPPING_DEJAVU__DROP",
	2:  "FLOW_HIT__DROP",
	3:  "FLOW_MISS__DROP",
	4:  "IPSG__DROP",
	5:  "INGRESS_POLICER__DROP",
	6:  "RX_POLICER__DROP",
	7:  "NACL__DROP",
	8:  "MALFORMED_PKT__DROP",
	9:  "PING_OF_DEATH__DROP",
	10: "FRAGMENT_TOO_SMALL__DROP",
	11: "IP_NORMALIZATION__DROP",
	12: "TCP_NORMALIZATION__DROP",
	13: "TCP_XMAS_TREE_PKT__DROP",
	14: "TCP_NON_SYN_FIRST_PKT__DROP",
	15: "ICMP_NORMALIZATION__DROP",
	16: "ICMP_SRC_QUENCH_MSG__DROP",
	17: "ICMP_REDIRECT_MSG__DROP",
	18: "ICMP_INFO_REQ_MSG__DROP",
	19: "ICMP_ADDR_REQ_MSG__DROP",
	20: "ICMP_TRACEROUTE_MSG__DROP",
	21: "ICMP_RSVD_TYPE_MSG__DROP",
	22: "INPUT_PROPERTIES_MISS__DROP",
	23: "TCP_OUT_OF_WINDOW__DROP",
	24: "TCP_SPLIT_HANDSHAKE__DROP",
	25: "TCP_WIN_ZERO_DROP__DROP",
	26: "TCP_ACK_ERR__DROP",
	27: "TCP_DATA_AFTER_FIN__DROP",
	28: "TCP_NON_RST_PKT_AFTER_RST__DROP",
	29: "TCP_INVALID_RESPONDER_FIRST_PKT__DROP",
	30: "TCP_UNEXPECTED_PKT__DROP",
}
var DropReason_value = map[string]int32{
	"INPUT_MAPPING__DROP":                   0,
	"INPUT_MAPPING_DEJAVU__DROP":            1,
	"FLOW_HIT__DROP":                        2,
	"FLOW_MISS__DROP":                       3,
	"IPSG__DROP":                            4,
	"INGRESS_POLICER__DROP":                 5,
	"RX_POLICER__DROP":                      6,
	"NACL__DROP":                            7,
	"MALFORMED_PKT__DROP":                   8,
	"PING_OF_DEATH__DROP":                   9,
	"FRAGMENT_TOO_SMALL__DROP":              10,
	"IP_NORMALIZATION__DROP":                11,
	"TCP_NORMALIZATION__DROP":               12,
	"TCP_XMAS_TREE_PKT__DROP":               13,
	"TCP_NON_SYN_FIRST_PKT__DROP":           14,
	"ICMP_NORMALIZATION__DROP":              15,
	"ICMP_SRC_QUENCH_MSG__DROP":             16,
	"ICMP_REDIRECT_MSG__DROP":               17,
	"ICMP_INFO_REQ_MSG__DROP":               18,
	"ICMP_ADDR_REQ_MSG__DROP":               19,
	"ICMP_TRACEROUTE_MSG__DROP":             20,
	"ICMP_RSVD_TYPE_MSG__DROP":              21,
	"INPUT_PROPERTIES_MISS__DROP":           22,
	"TCP_OUT_OF_WINDOW__DROP":               23,
	"TCP_SPLIT_HANDSHAKE__DROP":             24,
	"TCP_WIN_ZERO_DROP__DROP":               25,
	"TCP_ACK_ERR__DROP":                     26,
	"TCP_DATA_AFTER_FIN__DROP":              27,
	"TCP_NON_RST_PKT_AFTER_RST__DROP":       28,
	"TCP_INVALID_RESPONDER_FIRST_PKT__DROP": 29,
	"TCP_UNEXPECTED_PKT__DROP":              30,
}

func (x DropReason) String() string {
	return proto.EnumName(DropReason_name, int32(x))
}
func (DropReason) EnumDescriptor() ([]byte, []int) { return fileDescriptorAcl, []int{0} }

// AclAction specifies all possible actions for ACL entries
type AclAction int32

const (
	AclAction_ACL_ACTION_NONE     AclAction = 0
	AclAction_ACL_ACTION_PERMIT   AclAction = 1
	AclAction_ACL_ACTION_LOG      AclAction = 2
	AclAction_ACL_ACTION_DENY     AclAction = 3
	AclAction_ACL_ACTION_REDIRECT AclAction = 4
)

var AclAction_name = map[int32]string{
	0: "ACL_ACTION_NONE",
	1: "ACL_ACTION_PERMIT",
	2: "ACL_ACTION_LOG",
	3: "ACL_ACTION_DENY",
	4: "ACL_ACTION_REDIRECT",
}
var AclAction_value = map[string]int32{
	"ACL_ACTION_NONE":     0,
	"ACL_ACTION_PERMIT":   1,
	"ACL_ACTION_LOG":      2,
	"ACL_ACTION_DENY":     3,
	"ACL_ACTION_REDIRECT": 4,
}

func (x AclAction) String() string {
	return proto.EnumName(AclAction_name, int32(x))
}
func (AclAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorAcl, []int{1} }

// EthSelector has match criteria for non-IP packets
type EthSelector struct {
	EthType     uint32 `protobuf:"varint,1,opt,name=eth_type,json=ethType,proto3" json:"eth_type,omitempty" venice:constraints={range:0-65535}`
	EthTypeMask uint32 `protobuf:"varint,2,opt,name=eth_type_mask,json=ethTypeMask,proto3" json:"eth_type_mask,omitempty" venice:constraints={range:0-65535}`
	SrcMac      uint64 `protobuf:"varint,3,opt,name=src_mac,json=srcMac,proto3" json:"src_mac,omitempty" venice:constraints={range:0-0xffffffffffff}`
	SrcMacMask  uint64 `protobuf:"varint,4,opt,name=src_mac_mask,json=srcMacMask,proto3" json:"src_mac_mask,omitempty" venice:constraints={range:0-0xffffffffffff}`
	DstMac      uint64 `protobuf:"varint,5,opt,name=dst_mac,json=dstMac,proto3" json:"dst_mac,omitempty" venice:constraints={range:0-0xffffffffffff}`
	DstMacMask  uint64 `protobuf:"varint,6,opt,name=dst_mac_mask,json=dstMacMask,proto3" json:"dst_mac_mask,omitempty" venice:constraints={range:0-0xffffffffffff}`
}

func (m *EthSelector) Reset()                    { *m = EthSelector{} }
func (m *EthSelector) String() string            { return proto.CompactTextString(m) }
func (*EthSelector) ProtoMessage()               {}
func (*EthSelector) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{0} }

func (m *EthSelector) GetEthType() uint32 {
	if m != nil {
		return m.EthType
	}
	return 0
}

func (m *EthSelector) GetEthTypeMask() uint32 {
	if m != nil {
		return m.EthTypeMask
	}
	return 0
}

func (m *EthSelector) GetSrcMac() uint64 {
	if m != nil {
		return m.SrcMac
	}
	return 0
}

func (m *EthSelector) GetSrcMacMask() uint64 {
	if m != nil {
		return m.SrcMacMask
	}
	return 0
}

func (m *EthSelector) GetDstMac() uint64 {
	if m != nil {
		return m.DstMac
	}
	return 0
}

func (m *EthSelector) GetDstMacMask() uint64 {
	if m != nil {
		return m.DstMacMask
	}
	return 0
}

// UDPSelector is used to specify match criteria for UDP traffic
type UDPSelector struct {
	SrcPortRange *L4PortRange `protobuf:"bytes,1,opt,name=src_port_range,json=srcPortRange" json:"src_port_range,omitempty"`
	DstPortRange *L4PortRange `protobuf:"bytes,2,opt,name=dst_port_range,json=dstPortRange" json:"dst_port_range,omitempty"`
}

func (m *UDPSelector) Reset()                    { *m = UDPSelector{} }
func (m *UDPSelector) String() string            { return proto.CompactTextString(m) }
func (*UDPSelector) ProtoMessage()               {}
func (*UDPSelector) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{1} }

func (m *UDPSelector) GetSrcPortRange() *L4PortRange {
	if m != nil {
		return m.SrcPortRange
	}
	return nil
}

func (m *UDPSelector) GetDstPortRange() *L4PortRange {
	if m != nil {
		return m.DstPortRange
	}
	return nil
}

// TCPSelector is used to specify match criteria for TCP traffic
type TCPSelector struct {
	// Types that are valid to be assigned to TcpSyn:
	//	*TCPSelector_TcpSynSet
	//	*TCPSelector_TcpSynClear
	TcpSyn isTCPSelector_TcpSyn `protobuf_oneof:"tcp_syn"`
	// Types that are valid to be assigned to TcpAck:
	//	*TCPSelector_TcpAckSet
	//	*TCPSelector_TcpAckClear
	TcpAck isTCPSelector_TcpAck `protobuf_oneof:"tcp_ack"`
	// Types that are valid to be assigned to TcpFin:
	//	*TCPSelector_TcpFinSet
	//	*TCPSelector_TcpFinClear
	TcpFin isTCPSelector_TcpFin `protobuf_oneof:"tcp_fin"`
	// Types that are valid to be assigned to TcpRst:
	//	*TCPSelector_TcpRstSet
	//	*TCPSelector_TcpRstClear
	TcpRst isTCPSelector_TcpRst `protobuf_oneof:"tcp_rst"`
	// Types that are valid to be assigned to TcpUrg:
	//	*TCPSelector_TcpUrgSet
	//	*TCPSelector_TcpUrgClear
	TcpUrg       isTCPSelector_TcpUrg `protobuf_oneof:"tcp_urg"`
	SrcPortRange *L4PortRange         `protobuf:"bytes,11,opt,name=src_port_range,json=srcPortRange" json:"src_port_range,omitempty"`
	DstPortRange *L4PortRange         `protobuf:"bytes,12,opt,name=dst_port_range,json=dstPortRange" json:"dst_port_range,omitempty"`
}

func (m *TCPSelector) Reset()                    { *m = TCPSelector{} }
func (m *TCPSelector) String() string            { return proto.CompactTextString(m) }
func (*TCPSelector) ProtoMessage()               {}
func (*TCPSelector) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{2} }

type isTCPSelector_TcpSyn interface {
	isTCPSelector_TcpSyn()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTCPSelector_TcpAck interface {
	isTCPSelector_TcpAck()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTCPSelector_TcpFin interface {
	isTCPSelector_TcpFin()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTCPSelector_TcpRst interface {
	isTCPSelector_TcpRst()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isTCPSelector_TcpUrg interface {
	isTCPSelector_TcpUrg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TCPSelector_TcpSynSet struct {
	TcpSynSet bool `protobuf:"varint,1,opt,name=tcp_syn_set,json=tcpSynSet,proto3,oneof"`
}
type TCPSelector_TcpSynClear struct {
	TcpSynClear bool `protobuf:"varint,2,opt,name=tcp_syn_clear,json=tcpSynClear,proto3,oneof"`
}
type TCPSelector_TcpAckSet struct {
	TcpAckSet bool `protobuf:"varint,3,opt,name=tcp_ack_set,json=tcpAckSet,proto3,oneof"`
}
type TCPSelector_TcpAckClear struct {
	TcpAckClear bool `protobuf:"varint,4,opt,name=tcp_ack_clear,json=tcpAckClear,proto3,oneof"`
}
type TCPSelector_TcpFinSet struct {
	TcpFinSet bool `protobuf:"varint,5,opt,name=tcp_fin_set,json=tcpFinSet,proto3,oneof"`
}
type TCPSelector_TcpFinClear struct {
	TcpFinClear bool `protobuf:"varint,6,opt,name=tcp_fin_clear,json=tcpFinClear,proto3,oneof"`
}
type TCPSelector_TcpRstSet struct {
	TcpRstSet bool `protobuf:"varint,7,opt,name=tcp_rst_set,json=tcpRstSet,proto3,oneof"`
}
type TCPSelector_TcpRstClear struct {
	TcpRstClear bool `protobuf:"varint,8,opt,name=tcp_rst_clear,json=tcpRstClear,proto3,oneof"`
}
type TCPSelector_TcpUrgSet struct {
	TcpUrgSet bool `protobuf:"varint,9,opt,name=tcp_urg_set,json=tcpUrgSet,proto3,oneof"`
}
type TCPSelector_TcpUrgClear struct {
	TcpUrgClear bool `protobuf:"varint,10,opt,name=tcp_urg_clear,json=tcpUrgClear,proto3,oneof"`
}

func (*TCPSelector_TcpSynSet) isTCPSelector_TcpSyn()   {}
func (*TCPSelector_TcpSynClear) isTCPSelector_TcpSyn() {}
func (*TCPSelector_TcpAckSet) isTCPSelector_TcpAck()   {}
func (*TCPSelector_TcpAckClear) isTCPSelector_TcpAck() {}
func (*TCPSelector_TcpFinSet) isTCPSelector_TcpFin()   {}
func (*TCPSelector_TcpFinClear) isTCPSelector_TcpFin() {}
func (*TCPSelector_TcpRstSet) isTCPSelector_TcpRst()   {}
func (*TCPSelector_TcpRstClear) isTCPSelector_TcpRst() {}
func (*TCPSelector_TcpUrgSet) isTCPSelector_TcpUrg()   {}
func (*TCPSelector_TcpUrgClear) isTCPSelector_TcpUrg() {}

func (m *TCPSelector) GetTcpSyn() isTCPSelector_TcpSyn {
	if m != nil {
		return m.TcpSyn
	}
	return nil
}
func (m *TCPSelector) GetTcpAck() isTCPSelector_TcpAck {
	if m != nil {
		return m.TcpAck
	}
	return nil
}
func (m *TCPSelector) GetTcpFin() isTCPSelector_TcpFin {
	if m != nil {
		return m.TcpFin
	}
	return nil
}
func (m *TCPSelector) GetTcpRst() isTCPSelector_TcpRst {
	if m != nil {
		return m.TcpRst
	}
	return nil
}
func (m *TCPSelector) GetTcpUrg() isTCPSelector_TcpUrg {
	if m != nil {
		return m.TcpUrg
	}
	return nil
}

func (m *TCPSelector) GetTcpSynSet() bool {
	if x, ok := m.GetTcpSyn().(*TCPSelector_TcpSynSet); ok {
		return x.TcpSynSet
	}
	return false
}

func (m *TCPSelector) GetTcpSynClear() bool {
	if x, ok := m.GetTcpSyn().(*TCPSelector_TcpSynClear); ok {
		return x.TcpSynClear
	}
	return false
}

func (m *TCPSelector) GetTcpAckSet() bool {
	if x, ok := m.GetTcpAck().(*TCPSelector_TcpAckSet); ok {
		return x.TcpAckSet
	}
	return false
}

func (m *TCPSelector) GetTcpAckClear() bool {
	if x, ok := m.GetTcpAck().(*TCPSelector_TcpAckClear); ok {
		return x.TcpAckClear
	}
	return false
}

func (m *TCPSelector) GetTcpFinSet() bool {
	if x, ok := m.GetTcpFin().(*TCPSelector_TcpFinSet); ok {
		return x.TcpFinSet
	}
	return false
}

func (m *TCPSelector) GetTcpFinClear() bool {
	if x, ok := m.GetTcpFin().(*TCPSelector_TcpFinClear); ok {
		return x.TcpFinClear
	}
	return false
}

func (m *TCPSelector) GetTcpRstSet() bool {
	if x, ok := m.GetTcpRst().(*TCPSelector_TcpRstSet); ok {
		return x.TcpRstSet
	}
	return false
}

func (m *TCPSelector) GetTcpRstClear() bool {
	if x, ok := m.GetTcpRst().(*TCPSelector_TcpRstClear); ok {
		return x.TcpRstClear
	}
	return false
}

func (m *TCPSelector) GetTcpUrgSet() bool {
	if x, ok := m.GetTcpUrg().(*TCPSelector_TcpUrgSet); ok {
		return x.TcpUrgSet
	}
	return false
}

func (m *TCPSelector) GetTcpUrgClear() bool {
	if x, ok := m.GetTcpUrg().(*TCPSelector_TcpUrgClear); ok {
		return x.TcpUrgClear
	}
	return false
}

func (m *TCPSelector) GetSrcPortRange() *L4PortRange {
	if m != nil {
		return m.SrcPortRange
	}
	return nil
}

func (m *TCPSelector) GetDstPortRange() *L4PortRange {
	if m != nil {
		return m.DstPortRange
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TCPSelector) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TCPSelector_OneofMarshaler, _TCPSelector_OneofUnmarshaler, _TCPSelector_OneofSizer, []interface{}{
		(*TCPSelector_TcpSynSet)(nil),
		(*TCPSelector_TcpSynClear)(nil),
		(*TCPSelector_TcpAckSet)(nil),
		(*TCPSelector_TcpAckClear)(nil),
		(*TCPSelector_TcpFinSet)(nil),
		(*TCPSelector_TcpFinClear)(nil),
		(*TCPSelector_TcpRstSet)(nil),
		(*TCPSelector_TcpRstClear)(nil),
		(*TCPSelector_TcpUrgSet)(nil),
		(*TCPSelector_TcpUrgClear)(nil),
	}
}

func _TCPSelector_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TCPSelector)
	// tcp_syn
	switch x := m.TcpSyn.(type) {
	case *TCPSelector_TcpSynSet:
		t := uint64(0)
		if x.TcpSynSet {
			t = 1
		}
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *TCPSelector_TcpSynClear:
		t := uint64(0)
		if x.TcpSynClear {
			t = 1
		}
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("TCPSelector.TcpSyn has unexpected type %T", x)
	}
	// tcp_ack
	switch x := m.TcpAck.(type) {
	case *TCPSelector_TcpAckSet:
		t := uint64(0)
		if x.TcpAckSet {
			t = 1
		}
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *TCPSelector_TcpAckClear:
		t := uint64(0)
		if x.TcpAckClear {
			t = 1
		}
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("TCPSelector.TcpAck has unexpected type %T", x)
	}
	// tcp_fin
	switch x := m.TcpFin.(type) {
	case *TCPSelector_TcpFinSet:
		t := uint64(0)
		if x.TcpFinSet {
			t = 1
		}
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *TCPSelector_TcpFinClear:
		t := uint64(0)
		if x.TcpFinClear {
			t = 1
		}
		_ = b.EncodeVarint(6<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("TCPSelector.TcpFin has unexpected type %T", x)
	}
	// tcp_rst
	switch x := m.TcpRst.(type) {
	case *TCPSelector_TcpRstSet:
		t := uint64(0)
		if x.TcpRstSet {
			t = 1
		}
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *TCPSelector_TcpRstClear:
		t := uint64(0)
		if x.TcpRstClear {
			t = 1
		}
		_ = b.EncodeVarint(8<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("TCPSelector.TcpRst has unexpected type %T", x)
	}
	// tcp_urg
	switch x := m.TcpUrg.(type) {
	case *TCPSelector_TcpUrgSet:
		t := uint64(0)
		if x.TcpUrgSet {
			t = 1
		}
		_ = b.EncodeVarint(9<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *TCPSelector_TcpUrgClear:
		t := uint64(0)
		if x.TcpUrgClear {
			t = 1
		}
		_ = b.EncodeVarint(10<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("TCPSelector.TcpUrg has unexpected type %T", x)
	}
	return nil
}

func _TCPSelector_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TCPSelector)
	switch tag {
	case 1: // tcp_syn.tcp_syn_set
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpSyn = &TCPSelector_TcpSynSet{x != 0}
		return true, err
	case 2: // tcp_syn.tcp_syn_clear
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpSyn = &TCPSelector_TcpSynClear{x != 0}
		return true, err
	case 3: // tcp_ack.tcp_ack_set
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpAck = &TCPSelector_TcpAckSet{x != 0}
		return true, err
	case 4: // tcp_ack.tcp_ack_clear
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpAck = &TCPSelector_TcpAckClear{x != 0}
		return true, err
	case 5: // tcp_fin.tcp_fin_set
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpFin = &TCPSelector_TcpFinSet{x != 0}
		return true, err
	case 6: // tcp_fin.tcp_fin_clear
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpFin = &TCPSelector_TcpFinClear{x != 0}
		return true, err
	case 7: // tcp_rst.tcp_rst_set
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpRst = &TCPSelector_TcpRstSet{x != 0}
		return true, err
	case 8: // tcp_rst.tcp_rst_clear
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpRst = &TCPSelector_TcpRstClear{x != 0}
		return true, err
	case 9: // tcp_urg.tcp_urg_set
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpUrg = &TCPSelector_TcpUrgSet{x != 0}
		return true, err
	case 10: // tcp_urg.tcp_urg_clear
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.TcpUrg = &TCPSelector_TcpUrgClear{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _TCPSelector_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TCPSelector)
	// tcp_syn
	switch x := m.TcpSyn.(type) {
	case *TCPSelector_TcpSynSet:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += 1
	case *TCPSelector_TcpSynClear:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// tcp_ack
	switch x := m.TcpAck.(type) {
	case *TCPSelector_TcpAckSet:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case *TCPSelector_TcpAckClear:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// tcp_fin
	switch x := m.TcpFin.(type) {
	case *TCPSelector_TcpFinSet:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *TCPSelector_TcpFinClear:
		n += proto.SizeVarint(6<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// tcp_rst
	switch x := m.TcpRst.(type) {
	case *TCPSelector_TcpRstSet:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += 1
	case *TCPSelector_TcpRstClear:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// tcp_urg
	switch x := m.TcpUrg.(type) {
	case *TCPSelector_TcpUrgSet:
		n += proto.SizeVarint(9<<3 | proto.WireVarint)
		n += 1
	case *TCPSelector_TcpUrgClear:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ICMPSelector has match criteria for ICMP packets
type ICMPSelector struct {
	IcmpCode     uint32 `protobuf:"varint,1,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty" venice:constraints={range:0-0xff}`
	IcmpCodeMask uint32 `protobuf:"varint,2,opt,name=icmp_code_mask,json=icmpCodeMask,proto3" json:"icmp_code_mask,omitempty" venice:constraints={range:0-0xff}`
	IcmpType     uint32 `protobuf:"varint,3,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty" venice:constraints={range:0-0xff}`
	IcmpTypeMask uint32 `protobuf:"varint,4,opt,name=icmp_type_mask,json=icmpTypeMask,proto3" json:"icmp_type_mask,omitempty" venice:constraints={range:0-0xff}`
}

func (m *ICMPSelector) Reset()                    { *m = ICMPSelector{} }
func (m *ICMPSelector) String() string            { return proto.CompactTextString(m) }
func (*ICMPSelector) ProtoMessage()               {}
func (*ICMPSelector) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{3} }

func (m *ICMPSelector) GetIcmpCode() uint32 {
	if m != nil {
		return m.IcmpCode
	}
	return 0
}

func (m *ICMPSelector) GetIcmpCodeMask() uint32 {
	if m != nil {
		return m.IcmpCodeMask
	}
	return 0
}

func (m *ICMPSelector) GetIcmpType() uint32 {
	if m != nil {
		return m.IcmpType
	}
	return 0
}

func (m *ICMPSelector) GetIcmpTypeMask() uint32 {
	if m != nil {
		return m.IcmpTypeMask
	}
	return 0
}

// IPSelector has match criteria for selecting IP packets
type IPSelector struct {
	IpAf      IPAddressFamily `protobuf:"varint,1,opt,name=ip_af,json=ipAf,proto3,enum=types.IPAddressFamily" json:"ip_af,omitempty"`
	SrcPrefix *IPPrefix       `protobuf:"bytes,2,opt,name=src_prefix,json=srcPrefix" json:"src_prefix,omitempty"`
	DstPrefix *IPPrefix       `protobuf:"bytes,3,opt,name=dst_prefix,json=dstPrefix" json:"dst_prefix,omitempty"`
	// Types that are valid to be assigned to L4Selectors:
	//	*IPSelector_IpProtocol
	//	*IPSelector_IcmpSelector
	//	*IPSelector_UdpSelector
	//	*IPSelector_TcpSelector
	L4Selectors isIPSelector_L4Selectors `protobuf_oneof:"l4_selectors"`
}

func (m *IPSelector) Reset()                    { *m = IPSelector{} }
func (m *IPSelector) String() string            { return proto.CompactTextString(m) }
func (*IPSelector) ProtoMessage()               {}
func (*IPSelector) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{4} }

type isIPSelector_L4Selectors interface {
	isIPSelector_L4Selectors()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IPSelector_IpProtocol struct {
	IpProtocol IPProtocol `protobuf:"varint,4,opt,name=ip_protocol,json=ipProtocol,proto3,enum=types.IPProtocol,oneof"`
}
type IPSelector_IcmpSelector struct {
	IcmpSelector *ICMPSelector `protobuf:"bytes,5,opt,name=icmp_selector,json=icmpSelector,oneof"`
}
type IPSelector_UdpSelector struct {
	UdpSelector *UDPSelector `protobuf:"bytes,6,opt,name=udp_selector,json=udpSelector,oneof"`
}
type IPSelector_TcpSelector struct {
	TcpSelector *TCPSelector `protobuf:"bytes,7,opt,name=tcp_selector,json=tcpSelector,oneof"`
}

func (*IPSelector_IpProtocol) isIPSelector_L4Selectors()   {}
func (*IPSelector_IcmpSelector) isIPSelector_L4Selectors() {}
func (*IPSelector_UdpSelector) isIPSelector_L4Selectors()  {}
func (*IPSelector_TcpSelector) isIPSelector_L4Selectors()  {}

func (m *IPSelector) GetL4Selectors() isIPSelector_L4Selectors {
	if m != nil {
		return m.L4Selectors
	}
	return nil
}

func (m *IPSelector) GetIpAf() IPAddressFamily {
	if m != nil {
		return m.IpAf
	}
	return IPAddressFamily_IP_AF_NONE
}

func (m *IPSelector) GetSrcPrefix() *IPPrefix {
	if m != nil {
		return m.SrcPrefix
	}
	return nil
}

func (m *IPSelector) GetDstPrefix() *IPPrefix {
	if m != nil {
		return m.DstPrefix
	}
	return nil
}

func (m *IPSelector) GetIpProtocol() IPProtocol {
	if x, ok := m.GetL4Selectors().(*IPSelector_IpProtocol); ok {
		return x.IpProtocol
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *IPSelector) GetIcmpSelector() *ICMPSelector {
	if x, ok := m.GetL4Selectors().(*IPSelector_IcmpSelector); ok {
		return x.IcmpSelector
	}
	return nil
}

func (m *IPSelector) GetUdpSelector() *UDPSelector {
	if x, ok := m.GetL4Selectors().(*IPSelector_UdpSelector); ok {
		return x.UdpSelector
	}
	return nil
}

func (m *IPSelector) GetTcpSelector() *TCPSelector {
	if x, ok := m.GetL4Selectors().(*IPSelector_TcpSelector); ok {
		return x.TcpSelector
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IPSelector) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IPSelector_OneofMarshaler, _IPSelector_OneofUnmarshaler, _IPSelector_OneofSizer, []interface{}{
		(*IPSelector_IpProtocol)(nil),
		(*IPSelector_IcmpSelector)(nil),
		(*IPSelector_UdpSelector)(nil),
		(*IPSelector_TcpSelector)(nil),
	}
}

func _IPSelector_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IPSelector)
	// l4_selectors
	switch x := m.L4Selectors.(type) {
	case *IPSelector_IpProtocol:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.IpProtocol))
	case *IPSelector_IcmpSelector:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IcmpSelector); err != nil {
			return err
		}
	case *IPSelector_UdpSelector:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UdpSelector); err != nil {
			return err
		}
	case *IPSelector_TcpSelector:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcpSelector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IPSelector.L4Selectors has unexpected type %T", x)
	}
	return nil
}

func _IPSelector_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IPSelector)
	switch tag {
	case 4: // l4_selectors.ip_protocol
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.L4Selectors = &IPSelector_IpProtocol{IPProtocol(x)}
		return true, err
	case 5: // l4_selectors.icmp_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ICMPSelector)
		err := b.DecodeMessage(msg)
		m.L4Selectors = &IPSelector_IcmpSelector{msg}
		return true, err
	case 6: // l4_selectors.udp_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UDPSelector)
		err := b.DecodeMessage(msg)
		m.L4Selectors = &IPSelector_UdpSelector{msg}
		return true, err
	case 7: // l4_selectors.tcp_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TCPSelector)
		err := b.DecodeMessage(msg)
		m.L4Selectors = &IPSelector_TcpSelector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IPSelector_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IPSelector)
	// l4_selectors
	switch x := m.L4Selectors.(type) {
	case *IPSelector_IpProtocol:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.IpProtocol))
	case *IPSelector_IcmpSelector:
		s := proto.Size(x.IcmpSelector)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IPSelector_UdpSelector:
		s := proto.Size(x.UdpSelector)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IPSelector_TcpSelector:
		s := proto.Size(x.TcpSelector)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// AclInternalSelector has match criteria which are for internal use only with
// DOL/testing infra
// For production builds this needs to be removed
// TODO: REMOVE
type AclInternalSelector struct {
	FlowMiss        bool         `protobuf:"varint,1,opt,name=flow_miss,json=flowMiss,proto3" json:"flow_miss,omitempty"`
	OuterDstMac     uint64       `protobuf:"varint,2,opt,name=outer_dst_mac,json=outerDstMac,proto3" json:"outer_dst_mac,omitempty" venice:constraints={range:0-0xffffffffffff}`
	IpOptions       bool         `protobuf:"varint,3,opt,name=ip_options,json=ipOptions,proto3" json:"ip_options,omitempty"`
	IpFrag          bool         `protobuf:"varint,4,opt,name=ip_frag,json=ipFrag,proto3" json:"ip_frag,omitempty"`
	DropReason      []DropReason `protobuf:"varint,5,rep,packed,name=drop_reason,json=dropReason,enum=acl.DropReason" json:"drop_reason,omitempty"`
	TunnelTerminate bool         `protobuf:"varint,6,opt,name=tunnel_terminate,json=tunnelTerminate,proto3" json:"tunnel_terminate,omitempty"`
	Direction       bool         `protobuf:"varint,7,opt,name=direction,proto3" json:"direction,omitempty"`
	FromCpu         bool         `protobuf:"varint,8,opt,name=from_cpu,json=fromCpu,proto3" json:"from_cpu,omitempty"`
	NoDrop          bool         `protobuf:"varint,9,opt,name=no_drop,json=noDrop,proto3" json:"no_drop,omitempty"`
}

func (m *AclInternalSelector) Reset()                    { *m = AclInternalSelector{} }
func (m *AclInternalSelector) String() string            { return proto.CompactTextString(m) }
func (*AclInternalSelector) ProtoMessage()               {}
func (*AclInternalSelector) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{5} }

func (m *AclInternalSelector) GetFlowMiss() bool {
	if m != nil {
		return m.FlowMiss
	}
	return false
}

func (m *AclInternalSelector) GetOuterDstMac() uint64 {
	if m != nil {
		return m.OuterDstMac
	}
	return 0
}

func (m *AclInternalSelector) GetIpOptions() bool {
	if m != nil {
		return m.IpOptions
	}
	return false
}

func (m *AclInternalSelector) GetIpFrag() bool {
	if m != nil {
		return m.IpFrag
	}
	return false
}

func (m *AclInternalSelector) GetDropReason() []DropReason {
	if m != nil {
		return m.DropReason
	}
	return nil
}

func (m *AclInternalSelector) GetTunnelTerminate() bool {
	if m != nil {
		return m.TunnelTerminate
	}
	return false
}

func (m *AclInternalSelector) GetDirection() bool {
	if m != nil {
		return m.Direction
	}
	return false
}

func (m *AclInternalSelector) GetFromCpu() bool {
	if m != nil {
		return m.FromCpu
	}
	return false
}

func (m *AclInternalSelector) GetNoDrop() bool {
	if m != nil {
		return m.NoDrop
	}
	return false
}

// AclInternalActionInfo has action parameters for internal use only with
// DOL/testing infra
// For production builds this needs to be removed
// TODO: REMOVE
type AclInternalActionInfo struct {
	MacSaRewriteEn bool       `protobuf:"varint,1,opt,name=mac_sa_rewrite_en,json=macSaRewriteEn,proto3" json:"mac_sa_rewrite_en,omitempty"`
	MacSa          uint64     `protobuf:"varint,2,opt,name=mac_sa,json=macSa,proto3" json:"mac_sa,omitempty" venice:constraints={range:0-0xffffffffffff}`
	MacDaRewriteEn bool       `protobuf:"varint,3,opt,name=mac_da_rewrite_en,json=macDaRewriteEn,proto3" json:"mac_da_rewrite_en,omitempty"`
	MacDa          uint64     `protobuf:"varint,4,opt,name=mac_da,json=macDa,proto3" json:"mac_da,omitempty" venice:constraints={range:0-0xffffffffffff}`
	TtlDecEn       bool       `protobuf:"varint,5,opt,name=ttl_dec_en,json=ttlDecEn,proto3" json:"ttl_dec_en,omitempty"`
	EncapInfo      *EncapInfo `protobuf:"bytes,6,opt,name=encap_info,json=encapInfo" json:"encap_info,omitempty"`
	Qid            CpucbId    `protobuf:"varint,7,opt,name=qid,proto3,enum=types.CpucbId" json:"qid,omitempty"`
	QidValid       bool       `protobuf:"varint,8,opt,name=qid_valid,json=qidValid,proto3" json:"qid_valid,omitempty"`
}

func (m *AclInternalActionInfo) Reset()                    { *m = AclInternalActionInfo{} }
func (m *AclInternalActionInfo) String() string            { return proto.CompactTextString(m) }
func (*AclInternalActionInfo) ProtoMessage()               {}
func (*AclInternalActionInfo) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{6} }

func (m *AclInternalActionInfo) GetMacSaRewriteEn() bool {
	if m != nil {
		return m.MacSaRewriteEn
	}
	return false
}

func (m *AclInternalActionInfo) GetMacSa() uint64 {
	if m != nil {
		return m.MacSa
	}
	return 0
}

func (m *AclInternalActionInfo) GetMacDaRewriteEn() bool {
	if m != nil {
		return m.MacDaRewriteEn
	}
	return false
}

func (m *AclInternalActionInfo) GetMacDa() uint64 {
	if m != nil {
		return m.MacDa
	}
	return 0
}

func (m *AclInternalActionInfo) GetTtlDecEn() bool {
	if m != nil {
		return m.TtlDecEn
	}
	return false
}

func (m *AclInternalActionInfo) GetEncapInfo() *EncapInfo {
	if m != nil {
		return m.EncapInfo
	}
	return nil
}

func (m *AclInternalActionInfo) GetQid() CpucbId {
	if m != nil {
		return m.Qid
	}
	return CpucbId_CPUCB_ID_FLOWMISS
}

func (m *AclInternalActionInfo) GetQidValid() bool {
	if m != nil {
		return m.QidValid
	}
	return false
}

// AclSelector has all the match criteria for an ACL entry
type AclSelector struct {
	SrcIfKeyHandle *InterfaceKeyHandle `protobuf:"bytes,1,opt,name=src_if_key_handle,json=srcIfKeyHandle" json:"src_if_key_handle,omitempty" venice:ref`
	DstIfKeyHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=dst_if_key_handle,json=dstIfKeyHandle" json:"dst_if_key_handle,omitempty" venice:ref`
	// Types that are valid to be assigned to SegSelector:
	//	*AclSelector_VrfKeyHandle
	//	*AclSelector_L2SegmentKeyHandle
	SegSelector isAclSelector_SegSelector `protobuf_oneof:"seg_selector"`
	// Types that are valid to be assigned to PktSelector:
	//	*AclSelector_EthSelector
	//	*AclSelector_IpSelector
	PktSelector isAclSelector_PktSelector `protobuf_oneof:"pkt_selector"`
	// TODO: REMOVE
	InternalKey  *AclInternalSelector `protobuf:"bytes,7,opt,name=internal_key,json=internalKey" json:"internal_key,omitempty"`
	InternalMask *AclInternalSelector `protobuf:"bytes,8,opt,name=internal_mask,json=internalMask" json:"internal_mask,omitempty"`
}

func (m *AclSelector) Reset()                    { *m = AclSelector{} }
func (m *AclSelector) String() string            { return proto.CompactTextString(m) }
func (*AclSelector) ProtoMessage()               {}
func (*AclSelector) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{7} }

type isAclSelector_SegSelector interface {
	isAclSelector_SegSelector()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isAclSelector_PktSelector interface {
	isAclSelector_PktSelector()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AclSelector_VrfKeyHandle struct {
	VrfKeyHandle *VrfKeyHandle `protobuf:"bytes,3,opt,name=vrf_key_handle,json=vrfKeyHandle,oneof"`
}
type AclSelector_L2SegmentKeyHandle struct {
	L2SegmentKeyHandle *L2SegmentKeyHandle `protobuf:"bytes,4,opt,name=l2segment_key_handle,json=l2segmentKeyHandle,oneof"`
}
type AclSelector_EthSelector struct {
	EthSelector *EthSelector `protobuf:"bytes,5,opt,name=eth_selector,json=ethSelector,oneof"`
}
type AclSelector_IpSelector struct {
	IpSelector *IPSelector `protobuf:"bytes,6,opt,name=ip_selector,json=ipSelector,oneof"`
}

func (*AclSelector_VrfKeyHandle) isAclSelector_SegSelector()       {}
func (*AclSelector_L2SegmentKeyHandle) isAclSelector_SegSelector() {}
func (*AclSelector_EthSelector) isAclSelector_PktSelector()        {}
func (*AclSelector_IpSelector) isAclSelector_PktSelector()         {}

func (m *AclSelector) GetSegSelector() isAclSelector_SegSelector {
	if m != nil {
		return m.SegSelector
	}
	return nil
}
func (m *AclSelector) GetPktSelector() isAclSelector_PktSelector {
	if m != nil {
		return m.PktSelector
	}
	return nil
}

func (m *AclSelector) GetSrcIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.SrcIfKeyHandle
	}
	return nil
}

func (m *AclSelector) GetDstIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.DstIfKeyHandle
	}
	return nil
}

func (m *AclSelector) GetVrfKeyHandle() *VrfKeyHandle {
	if x, ok := m.GetSegSelector().(*AclSelector_VrfKeyHandle); ok {
		return x.VrfKeyHandle
	}
	return nil
}

func (m *AclSelector) GetL2SegmentKeyHandle() *L2SegmentKeyHandle {
	if x, ok := m.GetSegSelector().(*AclSelector_L2SegmentKeyHandle); ok {
		return x.L2SegmentKeyHandle
	}
	return nil
}

func (m *AclSelector) GetEthSelector() *EthSelector {
	if x, ok := m.GetPktSelector().(*AclSelector_EthSelector); ok {
		return x.EthSelector
	}
	return nil
}

func (m *AclSelector) GetIpSelector() *IPSelector {
	if x, ok := m.GetPktSelector().(*AclSelector_IpSelector); ok {
		return x.IpSelector
	}
	return nil
}

func (m *AclSelector) GetInternalKey() *AclInternalSelector {
	if m != nil {
		return m.InternalKey
	}
	return nil
}

func (m *AclSelector) GetInternalMask() *AclInternalSelector {
	if m != nil {
		return m.InternalMask
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AclSelector) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AclSelector_OneofMarshaler, _AclSelector_OneofUnmarshaler, _AclSelector_OneofSizer, []interface{}{
		(*AclSelector_VrfKeyHandle)(nil),
		(*AclSelector_L2SegmentKeyHandle)(nil),
		(*AclSelector_EthSelector)(nil),
		(*AclSelector_IpSelector)(nil),
	}
}

func _AclSelector_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AclSelector)
	// seg_selector
	switch x := m.SegSelector.(type) {
	case *AclSelector_VrfKeyHandle:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VrfKeyHandle); err != nil {
			return err
		}
	case *AclSelector_L2SegmentKeyHandle:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.L2SegmentKeyHandle); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AclSelector.SegSelector has unexpected type %T", x)
	}
	// pkt_selector
	switch x := m.PktSelector.(type) {
	case *AclSelector_EthSelector:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EthSelector); err != nil {
			return err
		}
	case *AclSelector_IpSelector:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IpSelector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AclSelector.PktSelector has unexpected type %T", x)
	}
	return nil
}

func _AclSelector_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AclSelector)
	switch tag {
	case 3: // seg_selector.vrf_key_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VrfKeyHandle)
		err := b.DecodeMessage(msg)
		m.SegSelector = &AclSelector_VrfKeyHandle{msg}
		return true, err
	case 4: // seg_selector.l2segment_key_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L2SegmentKeyHandle)
		err := b.DecodeMessage(msg)
		m.SegSelector = &AclSelector_L2SegmentKeyHandle{msg}
		return true, err
	case 5: // pkt_selector.eth_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EthSelector)
		err := b.DecodeMessage(msg)
		m.PktSelector = &AclSelector_EthSelector{msg}
		return true, err
	case 6: // pkt_selector.ip_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IPSelector)
		err := b.DecodeMessage(msg)
		m.PktSelector = &AclSelector_IpSelector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AclSelector_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AclSelector)
	// seg_selector
	switch x := m.SegSelector.(type) {
	case *AclSelector_VrfKeyHandle:
		s := proto.Size(x.VrfKeyHandle)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AclSelector_L2SegmentKeyHandle:
		s := proto.Size(x.L2SegmentKeyHandle)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// pkt_selector
	switch x := m.PktSelector.(type) {
	case *AclSelector_EthSelector:
		s := proto.Size(x.EthSelector)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AclSelector_IpSelector:
		s := proto.Size(x.IpSelector)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AclActionInfo struct {
	Action              AclAction                 `protobuf:"varint,1,opt,name=action,proto3,enum=acl.AclAction" json:"action,omitempty" venice:mandatory`
	IngMirrorSessions   []*MirrorSessionKeyHandle `protobuf:"bytes,2,rep,name=ing_mirror_sessions,json=ingMirrorSessions" json:"ing_mirror_sessions,omitempty" venice:constraints={range:0-7}`
	EgrMirrorSessions   []*MirrorSessionKeyHandle `protobuf:"bytes,3,rep,name=egr_mirror_sessions,json=egrMirrorSessions" json:"egr_mirror_sessions,omitempty" venice:constraints={range:0-7}`
	CoppKeyHandle       *CoppKeyHandle            `protobuf:"bytes,4,opt,name=copp_key_handle,json=coppKeyHandle" json:"copp_key_handle,omitempty" venice:ref`
	RedirectIfKeyHandle *InterfaceKeyHandle       `protobuf:"bytes,5,opt,name=redirect_if_key_handle,json=redirectIfKeyHandle" json:"redirect_if_key_handle,omitempty" venice:ref,venice:constraints={acl.AclActionInfo.action==acl_pb2.ACL_ACTION_REDIRECT}`
	// TODO: REMOVE
	InternalActions *AclInternalActionInfo `protobuf:"bytes,6,opt,name=internal_actions,json=internalActions" json:"internal_actions,omitempty" venice:constraints={acl.AclActionInfo.action!=acl_pb2.ACL_ACTION_DENY}`
}

func (m *AclActionInfo) Reset()                    { *m = AclActionInfo{} }
func (m *AclActionInfo) String() string            { return proto.CompactTextString(m) }
func (*AclActionInfo) ProtoMessage()               {}
func (*AclActionInfo) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{8} }

func (m *AclActionInfo) GetAction() AclAction {
	if m != nil {
		return m.Action
	}
	return AclAction_ACL_ACTION_NONE
}

func (m *AclActionInfo) GetIngMirrorSessions() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.IngMirrorSessions
	}
	return nil
}

func (m *AclActionInfo) GetEgrMirrorSessions() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.EgrMirrorSessions
	}
	return nil
}

func (m *AclActionInfo) GetCoppKeyHandle() *CoppKeyHandle {
	if m != nil {
		return m.CoppKeyHandle
	}
	return nil
}

func (m *AclActionInfo) GetRedirectIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.RedirectIfKeyHandle
	}
	return nil
}

func (m *AclActionInfo) GetInternalActions() *AclInternalActionInfo {
	if m != nil {
		return m.InternalActions
	}
	return nil
}

// ACL entry configuration
type AclSpec struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is ACL's key or handle
	KeyOrHandle *AclKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	Priority    uint32        `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty" venice:immutable`
	// TBD: is this per-vrf priority ? or global ?
	Match  *AclSelector   `protobuf:"bytes,4,opt,name=match" json:"match,omitempty"`
	Action *AclActionInfo `protobuf:"bytes,5,opt,name=action" json:"action,omitempty" venice:mandatory`
}

func (m *AclSpec) Reset()                    { *m = AclSpec{} }
func (m *AclSpec) String() string            { return proto.CompactTextString(m) }
func (*AclSpec) ProtoMessage()               {}
func (*AclSpec) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{9} }

func (m *AclSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *AclSpec) GetKeyOrHandle() *AclKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *AclSpec) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *AclSpec) GetMatch() *AclSelector {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *AclSpec) GetAction() *AclActionInfo {
	if m != nil {
		return m.Action
	}
	return nil
}

// Batched requests to create/update acls
type AclRequestMsg struct {
	Request []*AclSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AclRequestMsg) Reset()                    { *m = AclRequestMsg{} }
func (m *AclRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*AclRequestMsg) ProtoMessage()               {}
func (*AclRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{10} }

func (m *AclRequestMsg) GetRequest() []*AclSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// AclStatus represents the operational status of an ACL entry
type AclStatus struct {
	AclHandle uint64 `protobuf:"fixed64,1,opt,name=acl_handle,json=aclHandle,proto3" json:"acl_handle,omitempty"`
}

func (m *AclStatus) Reset()                    { *m = AclStatus{} }
func (m *AclStatus) String() string            { return proto.CompactTextString(m) }
func (*AclStatus) ProtoMessage()               {}
func (*AclStatus) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{11} }

func (m *AclStatus) GetAclHandle() uint64 {
	if m != nil {
		return m.AclHandle
	}
	return 0
}

// AclResponse is response to one Acl
type AclResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *AclStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *AclResponse) Reset()                    { *m = AclResponse{} }
func (m *AclResponse) String() string            { return proto.CompactTextString(m) }
func (*AclResponse) ProtoMessage()               {}
func (*AclResponse) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{12} }

func (m *AclResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *AclResponse) GetStatus() *AclStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Batched responses to create/update acls
type AclResponseMsg struct {
	Response []*AclResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AclResponseMsg) Reset()                    { *m = AclResponseMsg{} }
func (m *AclResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*AclResponseMsg) ProtoMessage()               {}
func (*AclResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{13} }

func (m *AclResponseMsg) GetResponse() []*AclResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type AclDeleteRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is unique identifier of ACL being deleted
	KeyOrHandle *AclKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *AclDeleteRequest) Reset()                    { *m = AclDeleteRequest{} }
func (m *AclDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*AclDeleteRequest) ProtoMessage()               {}
func (*AclDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{14} }

func (m *AclDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *AclDeleteRequest) GetKeyOrHandle() *AclKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// Batched requests to delete acls
type AclDeleteRequestMsg struct {
	Request []*AclDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AclDeleteRequestMsg) Reset()                    { *m = AclDeleteRequestMsg{} }
func (m *AclDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*AclDeleteRequestMsg) ProtoMessage()               {}
func (*AclDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{15} }

func (m *AclDeleteRequestMsg) GetRequest() []*AclDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// AclDeleteResponse is response to Acl delete request
type AclDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *AclDeleteResponse) Reset()                    { *m = AclDeleteResponse{} }
func (m *AclDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*AclDeleteResponse) ProtoMessage()               {}
func (*AclDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{16} }

func (m *AclDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// AclDeleteResponseMsg is batched response to AclDeleteRequestMsg
type AclDeleteResponseMsg struct {
	Response []*AclDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AclDeleteResponseMsg) Reset()                    { *m = AclDeleteResponseMsg{} }
func (m *AclDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*AclDeleteResponseMsg) ProtoMessage()               {}
func (*AclDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{17} }

func (m *AclDeleteResponseMsg) GetResponse() []*AclDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// AclGetRequest is used to get information about a acl
type AclGetRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is ACL's identifier for retrieval
	KeyOrHandle *AclKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *AclGetRequest) Reset()                    { *m = AclGetRequest{} }
func (m *AclGetRequest) String() string            { return proto.CompactTextString(m) }
func (*AclGetRequest) ProtoMessage()               {}
func (*AclGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{18} }

func (m *AclGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *AclGetRequest) GetKeyOrHandle() *AclKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type AclGetRequestMsg struct {
	Request []*AclGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AclGetRequestMsg) Reset()                    { *m = AclGetRequestMsg{} }
func (m *AclGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*AclGetRequestMsg) ProtoMessage()               {}
func (*AclGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{19} }

func (m *AclGetRequestMsg) GetRequest() []*AclGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// AclStats captures all the statistics of a acl
type AclStats struct {
}

func (m *AclStats) Reset()                    { *m = AclStats{} }
func (m *AclStats) String() string            { return proto.CompactTextString(m) }
func (*AclStats) ProtoMessage()               {}
func (*AclStats) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{20} }

// AclGetResponse captures all the information about a acl
type AclGetResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *AclSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *AclStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *AclStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *AclGetResponse) Reset()                    { *m = AclGetResponse{} }
func (m *AclGetResponse) String() string            { return proto.CompactTextString(m) }
func (*AclGetResponse) ProtoMessage()               {}
func (*AclGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{21} }

func (m *AclGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *AclGetResponse) GetSpec() *AclSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *AclGetResponse) GetStatus() *AclStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AclGetResponse) GetStats() *AclStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// AclGetResponseMsg is response to AclGetRequestMsg
type AclGetResponseMsg struct {
	Response []*AclGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AclGetResponseMsg) Reset()                    { *m = AclGetResponseMsg{} }
func (m *AclGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*AclGetResponseMsg) ProtoMessage()               {}
func (*AclGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorAcl, []int{22} }

func (m *AclGetResponseMsg) GetResponse() []*AclGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*EthSelector)(nil), "acl.EthSelector")
	proto.RegisterType((*UDPSelector)(nil), "acl.UDPSelector")
	proto.RegisterType((*TCPSelector)(nil), "acl.TCPSelector")
	proto.RegisterType((*ICMPSelector)(nil), "acl.ICMPSelector")
	proto.RegisterType((*IPSelector)(nil), "acl.IPSelector")
	proto.RegisterType((*AclInternalSelector)(nil), "acl.AclInternalSelector")
	proto.RegisterType((*AclInternalActionInfo)(nil), "acl.AclInternalActionInfo")
	proto.RegisterType((*AclSelector)(nil), "acl.AclSelector")
	proto.RegisterType((*AclActionInfo)(nil), "acl.AclActionInfo")
	proto.RegisterType((*AclSpec)(nil), "acl.AclSpec")
	proto.RegisterType((*AclRequestMsg)(nil), "acl.AclRequestMsg")
	proto.RegisterType((*AclStatus)(nil), "acl.AclStatus")
	proto.RegisterType((*AclResponse)(nil), "acl.AclResponse")
	proto.RegisterType((*AclResponseMsg)(nil), "acl.AclResponseMsg")
	proto.RegisterType((*AclDeleteRequest)(nil), "acl.AclDeleteRequest")
	proto.RegisterType((*AclDeleteRequestMsg)(nil), "acl.AclDeleteRequestMsg")
	proto.RegisterType((*AclDeleteResponse)(nil), "acl.AclDeleteResponse")
	proto.RegisterType((*AclDeleteResponseMsg)(nil), "acl.AclDeleteResponseMsg")
	proto.RegisterType((*AclGetRequest)(nil), "acl.AclGetRequest")
	proto.RegisterType((*AclGetRequestMsg)(nil), "acl.AclGetRequestMsg")
	proto.RegisterType((*AclStats)(nil), "acl.AclStats")
	proto.RegisterType((*AclGetResponse)(nil), "acl.AclGetResponse")
	proto.RegisterType((*AclGetResponseMsg)(nil), "acl.AclGetResponseMsg")
	proto.RegisterEnum("acl.DropReason", DropReason_name, DropReason_value)
	proto.RegisterEnum("acl.AclAction", AclAction_name, AclAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Acl service

type AclClient interface {
	// Acl related APIs
	AclCreate(ctx context.Context, in *AclRequestMsg, opts ...grpc.CallOption) (*AclResponseMsg, error)
	AclUpdate(ctx context.Context, in *AclRequestMsg, opts ...grpc.CallOption) (*AclResponseMsg, error)
	AclDelete(ctx context.Context, in *AclDeleteRequestMsg, opts ...grpc.CallOption) (*AclDeleteResponseMsg, error)
	AclGet(ctx context.Context, in *AclGetRequestMsg, opts ...grpc.CallOption) (*AclGetResponseMsg, error)
}

type aclClient struct {
	cc *grpc.ClientConn
}

func NewAclClient(cc *grpc.ClientConn) AclClient {
	return &aclClient{cc}
}

func (c *aclClient) AclCreate(ctx context.Context, in *AclRequestMsg, opts ...grpc.CallOption) (*AclResponseMsg, error) {
	out := new(AclResponseMsg)
	err := grpc.Invoke(ctx, "/acl.Acl/AclCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) AclUpdate(ctx context.Context, in *AclRequestMsg, opts ...grpc.CallOption) (*AclResponseMsg, error) {
	out := new(AclResponseMsg)
	err := grpc.Invoke(ctx, "/acl.Acl/AclUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) AclDelete(ctx context.Context, in *AclDeleteRequestMsg, opts ...grpc.CallOption) (*AclDeleteResponseMsg, error) {
	out := new(AclDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/acl.Acl/AclDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) AclGet(ctx context.Context, in *AclGetRequestMsg, opts ...grpc.CallOption) (*AclGetResponseMsg, error) {
	out := new(AclGetResponseMsg)
	err := grpc.Invoke(ctx, "/acl.Acl/AclGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Acl service

type AclServer interface {
	// Acl related APIs
	AclCreate(context.Context, *AclRequestMsg) (*AclResponseMsg, error)
	AclUpdate(context.Context, *AclRequestMsg) (*AclResponseMsg, error)
	AclDelete(context.Context, *AclDeleteRequestMsg) (*AclDeleteResponseMsg, error)
	AclGet(context.Context, *AclGetRequestMsg) (*AclGetResponseMsg, error)
}

func RegisterAclServer(s *grpc.Server, srv AclServer) {
	s.RegisterService(&_Acl_serviceDesc, srv)
}

func _Acl_AclCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).AclCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acl.Acl/AclCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).AclCreate(ctx, req.(*AclRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_AclUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).AclUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acl.Acl/AclUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).AclUpdate(ctx, req.(*AclRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_AclDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).AclDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acl.Acl/AclDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).AclDelete(ctx, req.(*AclDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_AclGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AclGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).AclGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acl.Acl/AclGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).AclGet(ctx, req.(*AclGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Acl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acl.Acl",
	HandlerType: (*AclServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AclCreate",
			Handler:    _Acl_AclCreate_Handler,
		},
		{
			MethodName: "AclUpdate",
			Handler:    _Acl_AclUpdate_Handler,
		},
		{
			MethodName: "AclDelete",
			Handler:    _Acl_AclDelete_Handler,
		},
		{
			MethodName: "AclGet",
			Handler:    _Acl_AclGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acl.proto",
}

func (m *EthSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EthType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.EthType))
	}
	if m.EthTypeMask != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.EthTypeMask))
	}
	if m.SrcMac != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.SrcMac))
	}
	if m.SrcMacMask != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.SrcMacMask))
	}
	if m.DstMac != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.DstMac))
	}
	if m.DstMacMask != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.DstMacMask))
	}
	return i, nil
}

func (m *UDPSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UDPSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcPortRange != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.SrcPortRange.Size()))
		n1, err := m.SrcPortRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DstPortRange != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.DstPortRange.Size()))
		n2, err := m.DstPortRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *TCPSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TCPSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TcpSyn != nil {
		nn3, err := m.TcpSyn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.TcpAck != nil {
		nn4, err := m.TcpAck.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	if m.TcpFin != nil {
		nn5, err := m.TcpFin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	if m.TcpRst != nil {
		nn6, err := m.TcpRst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	if m.TcpUrg != nil {
		nn7, err := m.TcpUrg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	if m.SrcPortRange != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.SrcPortRange.Size()))
		n8, err := m.SrcPortRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.DstPortRange != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.DstPortRange.Size()))
		n9, err := m.DstPortRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *TCPSelector_TcpSynSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	if m.TcpSynSet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TCPSelector_TcpSynClear) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	if m.TcpSynClear {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TCPSelector_TcpAckSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	if m.TcpAckSet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TCPSelector_TcpAckClear) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	if m.TcpAckClear {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TCPSelector_TcpFinSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	if m.TcpFinSet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TCPSelector_TcpFinClear) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x30
	i++
	if m.TcpFinClear {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TCPSelector_TcpRstSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x38
	i++
	if m.TcpRstSet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TCPSelector_TcpRstClear) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x40
	i++
	if m.TcpRstClear {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TCPSelector_TcpUrgSet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x48
	i++
	if m.TcpUrgSet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *TCPSelector_TcpUrgClear) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x50
	i++
	if m.TcpUrgClear {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ICMPSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICMPSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IcmpCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.IcmpCode))
	}
	if m.IcmpCodeMask != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.IcmpCodeMask))
	}
	if m.IcmpType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.IcmpType))
	}
	if m.IcmpTypeMask != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.IcmpTypeMask))
	}
	return i, nil
}

func (m *IPSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IpAf != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.IpAf))
	}
	if m.SrcPrefix != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.SrcPrefix.Size()))
		n10, err := m.SrcPrefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.DstPrefix != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.DstPrefix.Size()))
		n11, err := m.DstPrefix.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.L4Selectors != nil {
		nn12, err := m.L4Selectors.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	return i, nil
}

func (m *IPSelector_IpProtocol) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintAcl(dAtA, i, uint64(m.IpProtocol))
	return i, nil
}
func (m *IPSelector_IcmpSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IcmpSelector != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.IcmpSelector.Size()))
		n13, err := m.IcmpSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *IPSelector_UdpSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UdpSelector != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.UdpSelector.Size()))
		n14, err := m.UdpSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *IPSelector_TcpSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcpSelector != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.TcpSelector.Size()))
		n15, err := m.TcpSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *AclInternalSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclInternalSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlowMiss {
		dAtA[i] = 0x8
		i++
		if m.FlowMiss {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OuterDstMac != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.OuterDstMac))
	}
	if m.IpOptions {
		dAtA[i] = 0x18
		i++
		if m.IpOptions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IpFrag {
		dAtA[i] = 0x20
		i++
		if m.IpFrag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.DropReason) > 0 {
		dAtA17 := make([]byte, len(m.DropReason)*10)
		var j16 int
		for _, num := range m.DropReason {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if m.TunnelTerminate {
		dAtA[i] = 0x30
		i++
		if m.TunnelTerminate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Direction {
		dAtA[i] = 0x38
		i++
		if m.Direction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FromCpu {
		dAtA[i] = 0x40
		i++
		if m.FromCpu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NoDrop {
		dAtA[i] = 0x48
		i++
		if m.NoDrop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AclInternalActionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclInternalActionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MacSaRewriteEn {
		dAtA[i] = 0x8
		i++
		if m.MacSaRewriteEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MacSa != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.MacSa))
	}
	if m.MacDaRewriteEn {
		dAtA[i] = 0x18
		i++
		if m.MacDaRewriteEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MacDa != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.MacDa))
	}
	if m.TtlDecEn {
		dAtA[i] = 0x28
		i++
		if m.TtlDecEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EncapInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.EncapInfo.Size()))
		n18, err := m.EncapInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Qid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Qid))
	}
	if m.QidValid {
		dAtA[i] = 0x40
		i++
		if m.QidValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AclSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclSelector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SrcIfKeyHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.SrcIfKeyHandle.Size()))
		n19, err := m.SrcIfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.DstIfKeyHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.DstIfKeyHandle.Size()))
		n20, err := m.DstIfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.SegSelector != nil {
		nn21, err := m.SegSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn21
	}
	if m.PktSelector != nil {
		nn22, err := m.PktSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	if m.InternalKey != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.InternalKey.Size()))
		n23, err := m.InternalKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.InternalMask != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.InternalMask.Size()))
		n24, err := m.InternalMask.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *AclSelector_VrfKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VrfKeyHandle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.VrfKeyHandle.Size()))
		n25, err := m.VrfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *AclSelector_L2SegmentKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.L2SegmentKeyHandle != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.L2SegmentKeyHandle.Size()))
		n26, err := m.L2SegmentKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *AclSelector_EthSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EthSelector != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.EthSelector.Size()))
		n27, err := m.EthSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *AclSelector_IpSelector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IpSelector != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.IpSelector.Size()))
		n28, err := m.IpSelector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *AclActionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclActionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Action))
	}
	if len(m.IngMirrorSessions) > 0 {
		for _, msg := range m.IngMirrorSessions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAcl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EgrMirrorSessions) > 0 {
		for _, msg := range m.EgrMirrorSessions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAcl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CoppKeyHandle != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.CoppKeyHandle.Size()))
		n29, err := m.CoppKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.RedirectIfKeyHandle != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.RedirectIfKeyHandle.Size()))
		n30, err := m.RedirectIfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.InternalActions != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.InternalActions.Size()))
		n31, err := m.InternalActions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *AclSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Meta.Size()))
		n32, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n33, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Priority != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Priority))
	}
	if m.Match != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Match.Size()))
		n34, err := m.Match.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.Action != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Action.Size()))
		n35, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *AclRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAcl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AclStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AclHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AclHandle))
		i += 8
	}
	return i, nil
}

func (m *AclResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Status.Size()))
		n36, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *AclResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAcl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AclDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Meta.Size()))
		n37, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n38, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *AclDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAcl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AclDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *AclDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAcl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AclGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Meta.Size()))
		n39, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n40, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *AclGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAcl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AclStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AclGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Spec.Size()))
		n41, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Status.Size()))
		n42, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAcl(dAtA, i, uint64(m.Stats.Size()))
		n43, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *AclGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AclGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAcl(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintAcl(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EthSelector) Size() (n int) {
	var l int
	_ = l
	if m.EthType != 0 {
		n += 1 + sovAcl(uint64(m.EthType))
	}
	if m.EthTypeMask != 0 {
		n += 1 + sovAcl(uint64(m.EthTypeMask))
	}
	if m.SrcMac != 0 {
		n += 1 + sovAcl(uint64(m.SrcMac))
	}
	if m.SrcMacMask != 0 {
		n += 1 + sovAcl(uint64(m.SrcMacMask))
	}
	if m.DstMac != 0 {
		n += 1 + sovAcl(uint64(m.DstMac))
	}
	if m.DstMacMask != 0 {
		n += 1 + sovAcl(uint64(m.DstMacMask))
	}
	return n
}

func (m *UDPSelector) Size() (n int) {
	var l int
	_ = l
	if m.SrcPortRange != nil {
		l = m.SrcPortRange.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.DstPortRange != nil {
		l = m.DstPortRange.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}

func (m *TCPSelector) Size() (n int) {
	var l int
	_ = l
	if m.TcpSyn != nil {
		n += m.TcpSyn.Size()
	}
	if m.TcpAck != nil {
		n += m.TcpAck.Size()
	}
	if m.TcpFin != nil {
		n += m.TcpFin.Size()
	}
	if m.TcpRst != nil {
		n += m.TcpRst.Size()
	}
	if m.TcpUrg != nil {
		n += m.TcpUrg.Size()
	}
	if m.SrcPortRange != nil {
		l = m.SrcPortRange.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.DstPortRange != nil {
		l = m.DstPortRange.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}

func (m *TCPSelector_TcpSynSet) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *TCPSelector_TcpSynClear) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *TCPSelector_TcpAckSet) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *TCPSelector_TcpAckClear) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *TCPSelector_TcpFinSet) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *TCPSelector_TcpFinClear) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *TCPSelector_TcpRstSet) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *TCPSelector_TcpRstClear) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *TCPSelector_TcpUrgSet) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *TCPSelector_TcpUrgClear) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *ICMPSelector) Size() (n int) {
	var l int
	_ = l
	if m.IcmpCode != 0 {
		n += 1 + sovAcl(uint64(m.IcmpCode))
	}
	if m.IcmpCodeMask != 0 {
		n += 1 + sovAcl(uint64(m.IcmpCodeMask))
	}
	if m.IcmpType != 0 {
		n += 1 + sovAcl(uint64(m.IcmpType))
	}
	if m.IcmpTypeMask != 0 {
		n += 1 + sovAcl(uint64(m.IcmpTypeMask))
	}
	return n
}

func (m *IPSelector) Size() (n int) {
	var l int
	_ = l
	if m.IpAf != 0 {
		n += 1 + sovAcl(uint64(m.IpAf))
	}
	if m.SrcPrefix != nil {
		l = m.SrcPrefix.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.DstPrefix != nil {
		l = m.DstPrefix.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.L4Selectors != nil {
		n += m.L4Selectors.Size()
	}
	return n
}

func (m *IPSelector_IpProtocol) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAcl(uint64(m.IpProtocol))
	return n
}
func (m *IPSelector_IcmpSelector) Size() (n int) {
	var l int
	_ = l
	if m.IcmpSelector != nil {
		l = m.IcmpSelector.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}
func (m *IPSelector_UdpSelector) Size() (n int) {
	var l int
	_ = l
	if m.UdpSelector != nil {
		l = m.UdpSelector.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}
func (m *IPSelector_TcpSelector) Size() (n int) {
	var l int
	_ = l
	if m.TcpSelector != nil {
		l = m.TcpSelector.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}
func (m *AclInternalSelector) Size() (n int) {
	var l int
	_ = l
	if m.FlowMiss {
		n += 2
	}
	if m.OuterDstMac != 0 {
		n += 1 + sovAcl(uint64(m.OuterDstMac))
	}
	if m.IpOptions {
		n += 2
	}
	if m.IpFrag {
		n += 2
	}
	if len(m.DropReason) > 0 {
		l = 0
		for _, e := range m.DropReason {
			l += sovAcl(uint64(e))
		}
		n += 1 + sovAcl(uint64(l)) + l
	}
	if m.TunnelTerminate {
		n += 2
	}
	if m.Direction {
		n += 2
	}
	if m.FromCpu {
		n += 2
	}
	if m.NoDrop {
		n += 2
	}
	return n
}

func (m *AclInternalActionInfo) Size() (n int) {
	var l int
	_ = l
	if m.MacSaRewriteEn {
		n += 2
	}
	if m.MacSa != 0 {
		n += 1 + sovAcl(uint64(m.MacSa))
	}
	if m.MacDaRewriteEn {
		n += 2
	}
	if m.MacDa != 0 {
		n += 1 + sovAcl(uint64(m.MacDa))
	}
	if m.TtlDecEn {
		n += 2
	}
	if m.EncapInfo != nil {
		l = m.EncapInfo.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.Qid != 0 {
		n += 1 + sovAcl(uint64(m.Qid))
	}
	if m.QidValid {
		n += 2
	}
	return n
}

func (m *AclSelector) Size() (n int) {
	var l int
	_ = l
	if m.SrcIfKeyHandle != nil {
		l = m.SrcIfKeyHandle.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.DstIfKeyHandle != nil {
		l = m.DstIfKeyHandle.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.SegSelector != nil {
		n += m.SegSelector.Size()
	}
	if m.PktSelector != nil {
		n += m.PktSelector.Size()
	}
	if m.InternalKey != nil {
		l = m.InternalKey.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.InternalMask != nil {
		l = m.InternalMask.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}

func (m *AclSelector_VrfKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.VrfKeyHandle != nil {
		l = m.VrfKeyHandle.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}
func (m *AclSelector_L2SegmentKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.L2SegmentKeyHandle != nil {
		l = m.L2SegmentKeyHandle.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}
func (m *AclSelector_EthSelector) Size() (n int) {
	var l int
	_ = l
	if m.EthSelector != nil {
		l = m.EthSelector.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}
func (m *AclSelector_IpSelector) Size() (n int) {
	var l int
	_ = l
	if m.IpSelector != nil {
		l = m.IpSelector.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}
func (m *AclActionInfo) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovAcl(uint64(m.Action))
	}
	if len(m.IngMirrorSessions) > 0 {
		for _, e := range m.IngMirrorSessions {
			l = e.Size()
			n += 1 + l + sovAcl(uint64(l))
		}
	}
	if len(m.EgrMirrorSessions) > 0 {
		for _, e := range m.EgrMirrorSessions {
			l = e.Size()
			n += 1 + l + sovAcl(uint64(l))
		}
	}
	if m.CoppKeyHandle != nil {
		l = m.CoppKeyHandle.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.RedirectIfKeyHandle != nil {
		l = m.RedirectIfKeyHandle.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.InternalActions != nil {
		l = m.InternalActions.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}

func (m *AclSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovAcl(uint64(m.Priority))
	}
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}

func (m *AclRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovAcl(uint64(l))
		}
	}
	return n
}

func (m *AclStatus) Size() (n int) {
	var l int
	_ = l
	if m.AclHandle != 0 {
		n += 9
	}
	return n
}

func (m *AclResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovAcl(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}

func (m *AclResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovAcl(uint64(l))
		}
	}
	return n
}

func (m *AclDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}

func (m *AclDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovAcl(uint64(l))
		}
	}
	return n
}

func (m *AclDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovAcl(uint64(m.ApiStatus))
	}
	return n
}

func (m *AclDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovAcl(uint64(l))
		}
	}
	return n
}

func (m *AclGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}

func (m *AclGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovAcl(uint64(l))
		}
	}
	return n
}

func (m *AclStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AclGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovAcl(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovAcl(uint64(l))
	}
	return n
}

func (m *AclGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovAcl(uint64(l))
		}
	}
	return n
}

func sovAcl(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAcl(x uint64) (n int) {
	return sovAcl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EthSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthType", wireType)
			}
			m.EthType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthTypeMask", wireType)
			}
			m.EthTypeMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthTypeMask |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcMac", wireType)
			}
			m.SrcMac = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcMac |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcMacMask", wireType)
			}
			m.SrcMacMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcMacMask |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstMac", wireType)
			}
			m.DstMac = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstMac |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstMacMask", wireType)
			}
			m.DstMacMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstMacMask |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UDPSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UDPSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UDPSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcPortRange == nil {
				m.SrcPortRange = &L4PortRange{}
			}
			if err := m.SrcPortRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstPortRange == nil {
				m.DstPortRange = &L4PortRange{}
			}
			if err := m.DstPortRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TCPSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TCPSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TCPSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSynSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpSyn = &TCPSelector_TcpSynSet{b}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSynClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpSyn = &TCPSelector_TcpSynClear{b}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAckSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpAck = &TCPSelector_TcpAckSet{b}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpAckClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpAck = &TCPSelector_TcpAckClear{b}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpFinSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpFin = &TCPSelector_TcpFinSet{b}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpFinClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpFin = &TCPSelector_TcpFinClear{b}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpRstSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpRst = &TCPSelector_TcpRstSet{b}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpRstClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpRst = &TCPSelector_TcpRstClear{b}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpUrgSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpUrg = &TCPSelector_TcpUrgSet{b}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpUrgClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TcpUrg = &TCPSelector_TcpUrgClear{b}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcPortRange == nil {
				m.SrcPortRange = &L4PortRange{}
			}
			if err := m.SrcPortRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstPortRange == nil {
				m.DstPortRange = &L4PortRange{}
			}
			if err := m.DstPortRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICMPSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICMPSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICMPSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpCode", wireType)
			}
			m.IcmpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcmpCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpCodeMask", wireType)
			}
			m.IcmpCodeMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcmpCodeMask |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpType", wireType)
			}
			m.IcmpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcmpType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpTypeMask", wireType)
			}
			m.IcmpTypeMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IcmpTypeMask |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAf", wireType)
			}
			m.IpAf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpAf |= (IPAddressFamily(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcPrefix == nil {
				m.SrcPrefix = &IPPrefix{}
			}
			if err := m.SrcPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstPrefix == nil {
				m.DstPrefix = &IPPrefix{}
			}
			if err := m.DstPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProtocol", wireType)
			}
			var v IPProtocol
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (IPProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.L4Selectors = &IPSelector_IpProtocol{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IcmpSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ICMPSelector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Selectors = &IPSelector_IcmpSelector{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UDPSelector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Selectors = &IPSelector_UdpSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TCPSelector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.L4Selectors = &IPSelector_TcpSelector{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclInternalSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclInternalSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclInternalSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowMiss", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlowMiss = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterDstMac", wireType)
			}
			m.OuterDstMac = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OuterDstMac |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpOptions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IpOptions = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpFrag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IpFrag = bool(v != 0)
		case 5:
			if wireType == 0 {
				var v DropReason
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAcl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DropReason(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DropReason = append(m.DropReason, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAcl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAcl
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DropReason
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAcl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DropReason(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DropReason = append(m.DropReason, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DropReason", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelTerminate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TunnelTerminate = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Direction = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromCpu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromCpu = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoDrop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoDrop = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclInternalActionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclInternalActionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclInternalActionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacSaRewriteEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MacSaRewriteEn = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacSa", wireType)
			}
			m.MacSa = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacSa |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacDaRewriteEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MacDaRewriteEn = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacDa", wireType)
			}
			m.MacDa = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacDa |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtlDecEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TtlDecEn = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncapInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncapInfo == nil {
				m.EncapInfo = &EncapInfo{}
			}
			if err := m.EncapInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qid", wireType)
			}
			m.Qid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qid |= (CpucbId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QidValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QidValid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcIfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcIfKeyHandle == nil {
				m.SrcIfKeyHandle = &InterfaceKeyHandle{}
			}
			if err := m.SrcIfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstIfKeyHandle == nil {
				m.DstIfKeyHandle = &InterfaceKeyHandle{}
			}
			if err := m.DstIfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VrfKeyHandle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SegSelector = &AclSelector_VrfKeyHandle{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &L2SegmentKeyHandle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SegSelector = &AclSelector_L2SegmentKeyHandle{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EthSelector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PktSelector = &AclSelector_EthSelector{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IPSelector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.PktSelector = &AclSelector_IpSelector{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InternalKey == nil {
				m.InternalKey = &AclInternalSelector{}
			}
			if err := m.InternalKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InternalMask == nil {
				m.InternalMask = &AclInternalSelector{}
			}
			if err := m.InternalMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclActionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclActionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclActionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (AclAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IngMirrorSessions = append(m.IngMirrorSessions, &MirrorSessionKeyHandle{})
			if err := m.IngMirrorSessions[len(m.IngMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgrMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EgrMirrorSessions = append(m.EgrMirrorSessions, &MirrorSessionKeyHandle{})
			if err := m.EgrMirrorSessions[len(m.EgrMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoppKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoppKeyHandle == nil {
				m.CoppKeyHandle = &CoppKeyHandle{}
			}
			if err := m.CoppKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectIfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedirectIfKeyHandle == nil {
				m.RedirectIfKeyHandle = &InterfaceKeyHandle{}
			}
			if err := m.RedirectIfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InternalActions == nil {
				m.InternalActions = &AclInternalActionInfo{}
			}
			if err := m.InternalActions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &AclKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &AclSelector{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &AclActionInfo{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &AclSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AclHandle", wireType)
			}
			m.AclHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AclHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &AclStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &AclResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &AclKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &AclDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &AclDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &AclKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &AclGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &AclSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &AclStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &AclStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AclGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AclGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AclGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &AclGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAcl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAcl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAcl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAcl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAcl
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAcl
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAcl(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAcl = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAcl   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("acl.proto", fileDescriptorAcl) }

var fileDescriptorAcl = []byte{
	// 2472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x73, 0xdb, 0xc6,
	0x15, 0x17, 0xc5, 0x0f, 0x91, 0x8f, 0x12, 0x25, 0xad, 0x2c, 0x59, 0x96, 0x1d, 0x49, 0x61, 0x1a,
	0x8f, 0xf3, 0x51, 0xc5, 0xc3, 0xc4, 0x49, 0x9a, 0xd6, 0x9d, 0x40, 0x24, 0x68, 0xc1, 0x16, 0x3f,
	0xbc, 0xa4, 0xec, 0xd8, 0x3d, 0xec, 0xc0, 0xc0, 0x92, 0x42, 0x09, 0x02, 0x30, 0x00, 0x3a, 0xe1,
	0xb4, 0x9a, 0x4e, 0x4f, 0x3d, 0xf4, 0xd4, 0x9e, 0x7a, 0xec, 0xa9, 0xe7, 0x5e, 0xfa, 0x37, 0xb4,
	0xc7, 0x9e, 0x7a, 0xd4, 0x64, 0xd2, 0x7b, 0x0f, 0x9a, 0xfc, 0x01, 0x9d, 0xfd, 0x00, 0x08, 0x52,
	0xb2, 0x13, 0x6b, 0x32, 0xad, 0x2f, 0xc6, 0xee, 0x7b, 0xef, 0xf7, 0xde, 0xbe, 0x8f, 0xdf, 0x2e,
	0x05, 0x05, 0xdd, 0xb0, 0xf7, 0x3c, 0xdf, 0x0d, 0x5d, 0x94, 0xd6, 0x0d, 0x7b, 0xab, 0x18, 0x8e,
	0x3d, 0x1a, 0x88, 0x9d, 0xad, 0xfc, 0xe0, 0x58, 0x7c, 0x95, 0xff, 0x95, 0x86, 0xa2, 0x1a, 0x1e,
	0x77, 0xa8, 0x4d, 0x8d, 0xd0, 0xf5, 0x91, 0x02, 0x79, 0x1a, 0x1e, 0x13, 0xa6, 0xbc, 0x99, 0xda,
	0x4d, 0xdd, 0x5a, 0xda, 0xbf, 0x79, 0x76, 0xba, 0x53, 0x7e, 0x41, 0x1d, 0xcb, 0xa0, 0x9f, 0x19,
	0xae, 0x13, 0x84, 0xbe, 0x6e, 0x39, 0x61, 0x70, 0xf7, 0x57, 0xbe, 0xee, 0xf4, 0xe9, 0x67, 0xb7,
	0x7f, 0xfc, 0xf1, 0x9d, 0x3b, 0x1f, 0xde, 0x39, 0xc1, 0x0b, 0x34, 0x3c, 0xee, 0x8e, 0x3d, 0x8a,
	0xee, 0xc3, 0x52, 0x04, 0x41, 0x86, 0x7a, 0x30, 0xd8, 0x9c, 0x7f, 0x2d, 0x9c, 0xa2, 0xc4, 0x69,
	0xe8, 0xc1, 0x00, 0x1d, 0xc0, 0x42, 0xe0, 0x1b, 0x64, 0xa8, 0x1b, 0x9b, 0xe9, 0xdd, 0xd4, 0xad,
	0xcc, 0xfe, 0x07, 0x67, 0xa7, 0x3b, 0xef, 0xbd, 0x0a, 0xe5, 0xf6, 0x57, 0xbd, 0xc4, 0xbf, 0x13,
	0x9c, 0x0b, 0x7c, 0xa3, 0xa1, 0x1b, 0xe8, 0x21, 0x2c, 0x4a, 0x24, 0x11, 0x54, 0xe6, 0x72, 0x70,
	0x20, 0xe0, 0xa2, 0xe0, 0xcc, 0x20, 0xe4, 0xc1, 0x65, 0x2f, 0x19, 0x9c, 0x19, 0x84, 0x32, 0x38,
	0x89, 0x24, 0x82, 0xcb, 0x5d, 0x32, 0x38, 0x01, 0xc7, 0x82, 0x2b, 0xff, 0x36, 0x05, 0xc5, 0xa3,
	0x5a, 0x3b, 0x2e, 0xec, 0xa7, 0x50, 0x62, 0xe7, 0xf7, 0x5c, 0x3f, 0x24, 0xdc, 0x9e, 0x97, 0xb7,
	0x58, 0x41, 0x7b, 0xa2, 0x31, 0x0e, 0x3f, 0x6a, 0xbb, 0x7e, 0x88, 0x99, 0x04, 0xb3, 0x4c, 0xc5,
	0x2b, 0x66, 0xc9, 0x82, 0x4b, 0x58, 0xce, 0xbf, 0xdc, 0xd2, 0x0c, 0xc2, 0x78, 0x55, 0xfe, 0x73,
	0x06, 0x8a, 0xdd, 0xea, 0x24, 0x86, 0x5d, 0x28, 0x86, 0x86, 0x47, 0x82, 0xb1, 0x43, 0x02, 0x1a,
	0xf2, 0x00, 0xf2, 0x07, 0x73, 0xb8, 0x10, 0x1a, 0x5e, 0x67, 0xec, 0x74, 0x68, 0x88, 0x7e, 0x04,
	0x4b, 0x91, 0x86, 0x61, 0x53, 0xdd, 0xe7, 0xae, 0x98, 0x4e, 0x51, 0xe8, 0x54, 0xd9, 0x66, 0x84,
	0xa3, 0x1b, 0x03, 0x8e, 0x93, 0xe6, 0x3a, 0x29, 0x8e, 0xa3, 0x18, 0x83, 0x04, 0x0e, 0xd3, 0x10,
	0x38, 0x19, 0xa9, 0x53, 0x14, 0x3a, 0x53, 0x38, 0x3d, 0x4b, 0xc4, 0x93, 0xe5, 0x3a, 0xf3, 0x1c,
	0xa7, 0x6e, 0x25, 0xe3, 0x61, 0x1a, 0x02, 0x27, 0x27, 0x75, 0x8a, 0x42, 0x67, 0x0a, 0xc7, 0x0f,
	0x42, 0x8e, 0xb3, 0xc0, 0x75, 0xd2, 0x1c, 0x07, 0x07, 0x61, 0x02, 0x87, 0x69, 0x08, 0x9c, 0xbc,
	0xd4, 0x29, 0x0a, 0x9d, 0x29, 0x9c, 0x91, 0xdf, 0xe7, 0x38, 0x05, 0xae, 0x93, 0xe1, 0x38, 0x47,
	0x7e, 0x3f, 0x81, 0xc3, 0x34, 0x04, 0x0e, 0x48, 0x9d, 0xa2, 0xd0, 0x11, 0x38, 0xe7, 0x6b, 0x5d,
	0xbc, 0x74, 0xad, 0x17, 0xbf, 0x5f, 0xad, 0xf7, 0x0b, 0xb0, 0x20, 0x2b, 0x17, 0x7d, 0xea, 0xc6,
	0x20, 0xfa, 0xec, 0x59, 0xf1, 0xae, 0x1f, 0x84, 0xd1, 0xe7, 0xc8, 0xef, 0x97, 0xff, 0x3a, 0x0f,
	0x8b, 0x5a, 0xb5, 0x31, 0xe9, 0x91, 0x7d, 0x28, 0x58, 0xc6, 0xd0, 0x23, 0x86, 0x6b, 0x46, 0x0c,
	0xf4, 0xf6, 0xd9, 0xe9, 0xce, 0x9b, 0xdf, 0x35, 0x07, 0x27, 0x38, 0xcf, 0xec, 0xaa, 0xae, 0x49,
	0xd1, 0x03, 0x28, 0xc5, 0x18, 0x49, 0x0a, 0xfa, 0x9e, 0x40, 0x8b, 0x11, 0x10, 0x9f, 0xf2, 0x28,
	0x20, 0x4e, 0x89, 0xe9, 0xd7, 0x0e, 0x88, 0x53, 0x62, 0x14, 0xd0, 0x84, 0x13, 0x33, 0xaf, 0x1d,
	0x50, 0xc4, 0x89, 0xe5, 0xdf, 0xa5, 0x01, 0xb4, 0x49, 0xc2, 0xde, 0x83, 0xac, 0xe5, 0x11, 0xbd,
	0xc7, 0x93, 0x55, 0xaa, 0x6c, 0xc8, 0x4a, 0x69, 0x6d, 0xc5, 0x34, 0x7d, 0x1a, 0x04, 0x75, 0x7d,
	0x68, 0xd9, 0x63, 0x9c, 0xb1, 0x3c, 0xa5, 0x87, 0xf6, 0x00, 0x78, 0x67, 0xf8, 0xb4, 0x67, 0x7d,
	0x25, 0xe7, 0x78, 0x39, 0xb6, 0x68, 0xf3, 0x6d, 0x5c, 0x60, 0x2d, 0xc1, 0x3f, 0x99, 0x3e, 0xef,
	0x07, 0xa1, 0x9f, 0x7e, 0x89, 0x3e, 0x6b, 0x04, 0xa1, 0xff, 0x11, 0x14, 0x2d, 0x8f, 0xf0, 0xab,
	0xc5, 0x70, 0x6d, 0x7e, 0xca, 0x52, 0x65, 0x35, 0x61, 0x20, 0x04, 0x07, 0x73, 0x18, 0x2c, 0x2f,
	0x5a, 0xa1, 0x4f, 0x61, 0x89, 0xa7, 0x27, 0x90, 0x67, 0xe2, 0x93, 0x58, 0xac, 0xac, 0xee, 0xb1,
	0x3b, 0x2c, 0xd9, 0x1d, 0x07, 0x73, 0x22, 0x17, 0xf1, 0xe1, 0xef, 0xc0, 0xe2, 0xc8, 0x4c, 0x18,
	0xe6, 0xb8, 0xe1, 0x0a, 0x37, 0x4c, 0xb0, 0x1f, 0x23, 0x90, 0x91, 0x39, 0x65, 0xc6, 0x9b, 0x35,
	0x32, 0x5b, 0x48, 0x98, 0x25, 0x08, 0x2b, 0xe2, 0x1d, 0xb9, 0xdc, 0x2f, 0xc1, 0xa2, 0xfd, 0x51,
	0x6c, 0x15, 0x94, 0xff, 0x33, 0x0f, 0x6b, 0x8a, 0x61, 0x6b, 0x4e, 0x48, 0x7d, 0x47, 0xb7, 0x63,
	0xf8, 0xeb, 0x50, 0xe8, 0xd9, 0xee, 0x97, 0x64, 0x68, 0x05, 0x81, 0x60, 0x39, 0x9c, 0x67, 0x1b,
	0x0d, 0x2b, 0x08, 0x50, 0x07, 0x96, 0xdc, 0x51, 0x48, 0x7d, 0x12, 0xdd, 0x1d, 0xf3, 0x97, 0x23,
	0xfb, 0x22, 0x47, 0xa9, 0x89, 0x0b, 0xe4, 0x0d, 0x00, 0xcb, 0x23, 0xae, 0x17, 0x5a, 0xae, 0x13,
	0x08, 0x42, 0xc4, 0x05, 0xcb, 0x6b, 0x89, 0x0d, 0x74, 0x15, 0x16, 0x2c, 0x8f, 0xf4, 0x7c, 0xbd,
	0x2f, 0x88, 0x10, 0xe7, 0x2c, 0xaf, 0xee, 0xeb, 0x7d, 0x74, 0x1b, 0x8a, 0xa6, 0xef, 0x7a, 0xc4,
	0xa7, 0x7a, 0xe0, 0x3a, 0x9b, 0xd9, 0xdd, 0xf4, 0xad, 0x52, 0x65, 0x99, 0xe7, 0xa1, 0xe6, 0xbb,
	0x1e, 0xe6, 0xdb, 0x18, 0xcc, 0xf8, 0x1b, 0xbd, 0x03, 0x2b, 0xe1, 0xc8, 0x71, 0xa8, 0x4d, 0x42,
	0xea, 0x0f, 0x2d, 0x47, 0x0f, 0xa9, 0x20, 0x45, 0xbc, 0x2c, 0xf6, 0xbb, 0xd1, 0x36, 0xba, 0x01,
	0x05, 0xd3, 0xf2, 0xa9, 0xc1, 0x62, 0x10, 0xa4, 0x88, 0x27, 0x1b, 0xe8, 0x1a, 0xe4, 0x7b, 0xbe,
	0x3b, 0x24, 0x86, 0x37, 0x12, 0x6c, 0x88, 0x17, 0xd8, 0xba, 0xea, 0x8d, 0x58, 0xb8, 0x8e, 0x4b,
	0x98, 0x53, 0xc1, 0x81, 0x38, 0xe7, 0xb8, 0x2c, 0x9c, 0xf2, 0xef, 0xd3, 0xb0, 0x9e, 0x48, 0xb8,
	0xc2, 0x91, 0x34, 0xa7, 0xe7, 0xa2, 0x77, 0x60, 0x95, 0xdd, 0x9e, 0x81, 0x4e, 0x7c, 0xfa, 0xa5,
	0x6f, 0x85, 0x94, 0x50, 0x47, 0xa6, 0xbe, 0x34, 0xd4, 0x8d, 0x8e, 0x8e, 0xc5, 0xb6, 0xea, 0xa0,
	0x3a, 0xe4, 0x84, 0xea, 0x65, 0x33, 0x9f, 0xe5, 0x80, 0x91, 0x4b, 0x73, 0xca, 0x65, 0x3a, 0x76,
	0x59, 0x3b, 0xef, 0xd2, 0xd4, 0x2f, 0xfb, 0xec, 0xc8, 0x72, 0x40, 0x74, 0x03, 0x20, 0x0c, 0x6d,
	0x62, 0x52, 0x83, 0xf9, 0xca, 0x8a, 0xce, 0x0a, 0x43, 0xbb, 0x46, 0x0d, 0xd5, 0x41, 0x1f, 0x00,
	0x50, 0xc7, 0xd0, 0x3d, 0x62, 0x39, 0x3d, 0x37, 0x1e, 0x05, 0x31, 0x7b, 0x2a, 0x13, 0xb0, 0x4c,
	0xe1, 0x02, 0x8d, 0x3e, 0xd1, 0x2e, 0xa4, 0x9f, 0x5b, 0x26, 0x2f, 0x4d, 0xa9, 0x52, 0x92, 0x9a,
	0x55, 0x6f, 0x64, 0x3c, 0xd3, 0x4c, 0xcc, 0x44, 0xac, 0x93, 0x9f, 0x5b, 0x26, 0x79, 0xa1, 0xdb,
	0x96, 0x29, 0xab, 0x94, 0x7f, 0x6e, 0x99, 0x8f, 0xd8, 0xba, 0xfc, 0x75, 0x06, 0x8a, 0x8a, 0x31,
	0x69, 0xfb, 0x87, 0xb0, 0xca, 0xc8, 0xc5, 0xea, 0x91, 0x01, 0x1d, 0x93, 0x63, 0xdd, 0x31, 0xed,
	0xe8, 0x95, 0xb1, 0xb1, 0x37, 0x38, 0xde, 0xe3, 0x65, 0xeb, 0xe9, 0x06, 0x7d, 0x40, 0xc7, 0x07,
	0x5c, 0xba, 0x5f, 0x3a, 0x3b, 0xdd, 0x01, 0x99, 0x08, 0x9f, 0xf6, 0x30, 0xbb, 0xb7, 0xb4, 0x5e,
	0x2c, 0x67, 0x90, 0x6c, 0x4c, 0xa6, 0x21, 0xe7, 0x5f, 0x0f, 0xd2, 0x0c, 0xc2, 0x24, 0xe4, 0x01,
	0x94, 0x5e, 0xf8, 0x53, 0x78, 0x69, 0x99, 0xa9, 0xc1, 0xf1, 0xde, 0x23, 0xbf, 0xf7, 0x52, 0x24,
	0x46, 0x3e, 0x2f, 0x12, 0x72, 0xf4, 0x14, 0xae, 0xd8, 0x95, 0x80, 0xf6, 0x87, 0xd4, 0x09, 0x93,
	0x78, 0x99, 0x49, 0x7c, 0x87, 0x95, 0x8e, 0x90, 0xbf, 0x0a, 0x15, 0xc5, 0x28, 0x13, 0xec, 0x3b,
	0xb0, 0xc8, 0x1e, 0xd1, 0x33, 0x8c, 0x28, 0x18, 0x2a, 0xf1, 0x5e, 0x67, 0x2f, 0x1a, 0x9a, 0x78,
	0xbe, 0x57, 0x38, 0xff, 0xce, 0xd0, 0xa1, 0x98, 0xe7, 0xc9, 0x95, 0x71, 0x90, 0x62, 0xec, 0x1b,
	0xdb, 0xfc, 0x14, 0x16, 0x2d, 0x39, 0x50, 0xec, 0x14, 0x92, 0x0c, 0x37, 0xb9, 0xd1, 0x05, 0xec,
	0x86, 0x8b, 0x91, 0xf6, 0x03, 0x3a, 0x46, 0x77, 0x61, 0x29, 0x36, 0xe6, 0x17, 0x5b, 0xfe, 0x3b,
	0xac, 0x63, 0x5f, 0xec, 0x2e, 0x63, 0x8c, 0x1a, 0xd0, 0x7e, 0x1c, 0x30, 0x5b, 0x7b, 0x83, 0x30,
	0x5e, 0x97, 0xff, 0x96, 0x85, 0x25, 0xc5, 0x48, 0x0e, 0xfa, 0xcf, 0x20, 0xa7, 0x0b, 0x46, 0x49,
	0xc9, 0xb6, 0x95, 0x9e, 0x84, 0xce, 0xfe, 0x95, 0xb3, 0xd3, 0x9d, 0x15, 0x99, 0xde, 0xa1, 0xee,
	0x98, 0x7a, 0xe8, 0xfa, 0x63, 0x2c, 0x6d, 0x90, 0x03, 0x6b, 0x96, 0xd3, 0x27, 0x43, 0xcb, 0xf7,
	0x5d, 0x9f, 0x04, 0x34, 0x08, 0x38, 0x61, 0xce, 0xef, 0xa6, 0x6f, 0x15, 0x2b, 0x5b, 0xac, 0x62,
	0x0d, 0x2e, 0xea, 0x08, 0xc9, 0xa4, 0x6a, 0xe5, 0xb3, 0xd3, 0x9d, 0xed, 0x57, 0x4d, 0xec, 0x27,
	0x27, 0x78, 0xd5, 0x72, 0xfa, 0x53, 0xe6, 0x01, 0xf3, 0x47, 0xfb, 0xfe, 0x39, 0x7f, 0xe9, 0x1f,
	0xc6, 0x1f, 0xed, 0xfb, 0x33, 0xfe, 0x34, 0x58, 0x36, 0x5c, 0xcf, 0x3b, 0xdf, 0x8d, 0xab, 0xcc,
	0x57, 0xd5, 0xf5, 0xbc, 0x97, 0x0f, 0xca, 0x92, 0x91, 0x14, 0xa3, 0xbf, 0xa4, 0x60, 0xc3, 0xa7,
	0x82, 0xaf, 0x67, 0x06, 0x30, 0xfb, 0xca, 0x01, 0x7c, 0x72, 0x76, 0xba, 0x73, 0x34, 0xc1, 0x7d,
	0xff, 0xa2, 0x53, 0x4c, 0xd5, 0x8c, 0xd5, 0x75, 0x4f, 0x14, 0xe8, 0xee, 0x5d, 0xdd, 0xb0, 0x89,
	0xf7, 0xac, 0xb2, 0xa7, 0x54, 0x0f, 0x89, 0x52, 0xed, 0x6a, 0xad, 0x26, 0xc1, 0x6a, 0x4d, 0xc3,
	0x6a, 0xb5, 0x7b, 0x82, 0xd7, 0xa2, 0x80, 0x92, 0x03, 0xfd, 0x87, 0x14, 0xac, 0xc4, 0x3d, 0x28,
	0x60, 0x02, 0xd9, 0xf9, 0x5b, 0xb3, 0x6d, 0x38, 0x71, 0xb8, 0x7f, 0xff, 0xec, 0x74, 0xa7, 0xfe,
	0x3a, 0xb1, 0xbd, 0x79, 0x51, 0x6c, 0x35, 0xb5, 0xf9, 0xe4, 0x04, 0x2f, 0x5b, 0x53, 0xf8, 0x41,
	0xf9, 0x8f, 0xf3, 0xb0, 0xc0, 0xa8, 0xd1, 0xa3, 0x06, 0x7a, 0x1b, 0x32, 0x43, 0x1a, 0xea, 0x92,
	0x09, 0xa3, 0xc7, 0x50, 0xeb, 0xd9, 0x2f, 0xa9, 0x11, 0x36, 0x68, 0xa8, 0x63, 0x2e, 0x46, 0x35,
	0x58, 0x62, 0x29, 0x76, 0xfd, 0x69, 0x9a, 0xe3, 0xb4, 0xa4, 0x18, 0xf6, 0xc5, 0x75, 0x1b, 0xd0,
	0x31, 0x2e, 0x0e, 0xe8, 0xb8, 0xe5, 0xcb, 0x64, 0xdc, 0x86, 0xbc, 0xe7, 0x5b, 0xae, 0x6f, 0x85,
	0x63, 0xf9, 0x58, 0x4d, 0x0e, 0x84, 0x35, 0x1c, 0x8e, 0x42, 0xfd, 0x99, 0x4d, 0x71, 0xac, 0x85,
	0x6e, 0x42, 0x76, 0xa8, 0x87, 0xc6, 0xb1, 0x6c, 0x94, 0x95, 0x28, 0x65, 0xf1, 0xc4, 0x0a, 0x31,
	0xfa, 0x3c, 0x1e, 0xbc, 0xac, 0xfc, 0x49, 0x70, 0x2e, 0x51, 0xaf, 0x1e, 0xbe, 0xf2, 0x27, 0x7c,
	0x96, 0x31, 0x7d, 0x3e, 0xa2, 0x41, 0xd8, 0x08, 0xfa, 0xe8, 0x26, 0x2c, 0xf8, 0x62, 0xb5, 0x99,
	0xe2, 0x13, 0xb1, 0x18, 0x3b, 0xf7, 0xa8, 0x81, 0x23, 0x61, 0xf9, 0x5d, 0x28, 0xb0, 0xbd, 0x50,
	0x0f, 0x47, 0x01, 0x7b, 0xea, 0xb0, 0x3a, 0x24, 0xae, 0x97, 0x1c, 0x2e, 0xe8, 0x86, 0x2d, 0x12,
	0x50, 0x3e, 0xe1, 0x77, 0x12, 0xa6, 0x81, 0xe7, 0x3a, 0x01, 0x45, 0x75, 0x00, 0xdd, 0xb3, 0x48,
	0xc0, 0x6d, 0x25, 0x65, 0x44, 0x77, 0xa2, 0xe2, 0x59, 0x02, 0x73, 0x7f, 0xfd, 0xec, 0x74, 0x67,
	0x55, 0xc6, 0x3d, 0x51, 0xc7, 0x05, 0x3d, 0xd2, 0x40, 0x37, 0x21, 0x27, 0x31, 0x44, 0x59, 0x62,
	0xda, 0x11, 0x72, 0x2c, 0xa5, 0xe5, 0x9f, 0x43, 0x29, 0xe1, 0x9e, 0x1d, 0xf2, 0x7d, 0xc8, 0xfb,
	0x72, 0x29, 0x4f, 0x19, 0xa7, 0x38, 0x52, 0xc3, 0xb1, 0x46, 0xf9, 0x37, 0xb0, 0xa2, 0x18, 0x76,
	0x8d, 0xda, 0x34, 0xa4, 0x32, 0x53, 0xff, 0xd3, 0x06, 0x2a, 0xd7, 0xf9, 0x93, 0x76, 0x2a, 0x00,
	0x76, 0x8a, 0x0f, 0x66, 0x4b, 0xb5, 0x1e, 0x1d, 0x62, 0x4a, 0x75, 0x52, 0xb3, 0x5f, 0xc0, 0x6a,
	0x42, 0xf8, 0xc3, 0x56, 0xa3, 0x7c, 0x1f, 0xae, 0x9c, 0x03, 0x67, 0x51, 0x56, 0xce, 0xe5, 0x7a,
	0x63, 0x36, 0xcc, 0x73, 0x19, 0xff, 0x35, 0xef, 0xca, 0x7b, 0x34, 0xfc, 0xbf, 0xa4, 0xfb, 0x73,
	0x5e, 0xef, 0x89, 0x77, 0xd1, 0x31, 0x33, 0xb9, 0x8e, 0x47, 0x6d, 0xa2, 0x37, 0x49, 0x34, 0x40,
	0x5e, 0xb6, 0x61, 0x50, 0xfe, 0x7b, 0x8a, 0xb7, 0x1f, 0x57, 0xfb, 0x81, 0x07, 0x60, 0x17, 0x32,
	0x81, 0x47, 0x0d, 0x79, 0xca, 0xe9, 0x41, 0xe5, 0x92, 0xc4, 0x88, 0xa4, 0x5f, 0x35, 0x22, 0xe8,
	0x2d, 0xc8, 0xb2, 0xaf, 0x40, 0x12, 0xce, 0x52, 0x52, 0x2d, 0xc0, 0x42, 0x56, 0xae, 0xf1, 0xf6,
	0x49, 0x1c, 0x44, 0x34, 0xe1, 0x6c, 0x79, 0xd7, 0xa6, 0x32, 0x33, 0x5b, 0xdb, 0x77, 0xbf, 0xcd,
	0x01, 0x4c, 0x7e, 0xc7, 0xa0, 0xab, 0xb0, 0xa6, 0x35, 0xdb, 0x47, 0x5d, 0xd2, 0x50, 0xda, 0x6d,
	0xad, 0x79, 0x8f, 0x90, 0x1a, 0x6e, 0xb5, 0x57, 0xe6, 0xd0, 0x36, 0x6c, 0x4d, 0x0b, 0x6a, 0xea,
	0x7d, 0xe5, 0xd1, 0x91, 0x94, 0xa7, 0x10, 0x82, 0x52, 0xfd, 0xb0, 0xf5, 0x98, 0x1c, 0x68, 0x5d,
	0xb9, 0x37, 0x8f, 0xd6, 0x60, 0x99, 0xef, 0x35, 0xb4, 0x4e, 0x47, 0x6e, 0xa6, 0x51, 0x89, 0xff,
	0x34, 0x8f, 0x80, 0x33, 0xe8, 0x1a, 0xac, 0x6b, 0xcd, 0x7b, 0x58, 0xed, 0x74, 0x48, 0xbb, 0x75,
	0xa8, 0x55, 0x55, 0x2c, 0x45, 0x59, 0x74, 0x05, 0x56, 0xf0, 0x17, 0x33, 0xbb, 0x39, 0x06, 0xd0,
	0x64, 0xd7, 0x8b, 0x58, 0x2f, 0xb0, 0x90, 0x1b, 0xca, 0x61, 0xbd, 0x85, 0x1b, 0x6a, 0x8d, 0xb4,
	0x1f, 0x44, 0xee, 0xf3, 0x4c, 0xc0, 0x23, 0x6d, 0xd5, 0x49, 0x4d, 0x55, 0xba, 0x07, 0x52, 0x50,
	0x40, 0x37, 0x60, 0xb3, 0x8e, 0x95, 0x7b, 0x0d, 0xb5, 0xd9, 0x25, 0xdd, 0x56, 0x8b, 0x74, 0x1a,
	0xca, 0x61, 0x84, 0x07, 0x68, 0x0b, 0x36, 0xb4, 0x36, 0x69, 0xb6, 0x70, 0x43, 0x39, 0xd4, 0x9e,
	0x2a, 0xfc, 0x0e, 0x13, 0xb2, 0x22, 0xba, 0x0e, 0x57, 0xbb, 0xd5, 0x8b, 0x85, 0x8b, 0x91, 0xf0,
	0x8b, 0x86, 0xd2, 0x21, 0x5d, 0xac, 0xaa, 0x89, 0x60, 0x96, 0xd0, 0x0e, 0x5c, 0x17, 0x96, 0x4d,
	0xd2, 0x79, 0xd2, 0x24, 0x75, 0x0d, 0x77, 0xba, 0x09, 0x85, 0x12, 0x0b, 0x8a, 0xfd, 0x8e, 0xbf,
	0x10, 0x7b, 0x19, 0xbd, 0x01, 0xd7, 0xb8, 0xb4, 0x83, 0xab, 0xe4, 0xe1, 0x91, 0xda, 0xac, 0x1e,
	0x90, 0x46, 0x9c, 0xc4, 0x15, 0xe6, 0x9a, 0x8b, 0xa3, 0x77, 0x40, 0x42, 0xb8, 0x1a, 0x0b, 0xb5,
	0x66, 0xbd, 0x45, 0xb0, 0xfa, 0x30, 0x21, 0x44, 0xb1, 0x50, 0xa9, 0xd5, 0xf0, 0x8c, 0x70, 0x2d,
	0xf6, 0xda, 0xc5, 0x4a, 0x55, 0xc5, 0xad, 0xa3, 0xae, 0x9a, 0x10, 0x5f, 0x89, 0x43, 0xc6, 0x9d,
	0x47, 0x35, 0xd2, 0x7d, 0xd2, 0x4e, 0x4a, 0xd7, 0xd9, 0x89, 0x45, 0xc7, 0xb4, 0x71, 0xab, 0xad,
	0xe2, 0xae, 0xa6, 0x76, 0x92, 0x9d, 0xb0, 0x11, 0xe5, 0xab, 0x75, 0xd4, 0x65, 0x25, 0x7a, 0xac,
	0x35, 0x6b, 0xad, 0xc7, 0x52, 0x78, 0x95, 0xb9, 0x66, 0xc2, 0x4e, 0xfb, 0x50, 0xeb, 0x92, 0x03,
	0xa5, 0x59, 0xeb, 0x1c, 0x28, 0x0f, 0x54, 0x29, 0xde, 0x8c, 0x6c, 0x1f, 0x6b, 0x4d, 0xf2, 0x54,
	0xc5, 0x2d, 0xbe, 0x2d, 0x85, 0xd7, 0xd0, 0x3a, 0xac, 0x32, 0xa1, 0x52, 0x7d, 0x40, 0x54, 0x1c,
	0x35, 0xce, 0x16, 0x0b, 0x97, 0x6d, 0xd7, 0x94, 0xae, 0x42, 0x94, 0x7a, 0x57, 0xc5, 0xa4, 0xae,
	0x45, 0x19, 0xbe, 0x8e, 0xde, 0x82, 0x9d, 0xa8, 0x40, 0x51, 0x69, 0x84, 0x12, 0x5b, 0x09, 0xa5,
	0x1b, 0xe8, 0x1d, 0x78, 0x9b, 0x29, 0x69, 0xcd, 0x47, 0xca, 0xa1, 0x56, 0x23, 0x58, 0xed, 0xb4,
	0x5b, 0xcd, 0x1a, 0x47, 0x9a, 0xae, 0xe7, 0x1b, 0x91, 0xb7, 0xa3, 0xa6, 0xfa, 0x45, 0x5b, 0xad,
	0x76, 0xa7, 0x7a, 0x73, 0xfb, 0xdd, 0x31, 0xbf, 0xaf, 0xc5, 0xbb, 0x80, 0xcd, 0x49, 0xe2, 0xbd,
	0xd4, 0x6c, 0x35, 0xd5, 0x95, 0x39, 0x76, 0x88, 0xc4, 0x66, 0x5b, 0xc5, 0x0d, 0xad, 0x2b, 0xe6,
	0x2c, 0xb1, 0x7d, 0xd8, 0xba, 0x27, 0xe6, 0x6c, 0xe6, 0xbd, 0xb5, 0x92, 0x66, 0xdd, 0x7f, 0xc1,
	0x03, 0x71, 0x25, 0x53, 0xf9, 0x36, 0x05, 0x69, 0xc5, 0xb0, 0xd1, 0xc7, 0x3c, 0x84, 0xaa, 0x4f,
	0xf5, 0x90, 0x22, 0x34, 0xb9, 0x70, 0x23, 0x92, 0xdd, 0x5a, 0x9b, 0xbd, 0x84, 0x1b, 0x41, 0xbf,
	0x3c, 0x27, 0xed, 0x8e, 0x3c, 0xf3, 0x35, 0xed, 0xf6, 0xb9, 0x9d, 0xb8, 0x64, 0xd0, 0xe6, 0x85,
	0x77, 0x23, 0xb3, 0xbe, 0x76, 0xf1, 0x75, 0x24, 0x30, 0x7e, 0x02, 0x39, 0xc1, 0x64, 0x68, 0xfd,
	0x3c, 0xe1, 0x33, 0xeb, 0x8d, 0x0b, 0xd8, 0x8e, 0x9b, 0xee, 0x6f, 0xfd, 0xe3, 0x9b, 0xed, 0xd4,
	0x3f, 0xbf, 0xd9, 0x4e, 0x7d, 0xfd, 0xcd, 0x76, 0xea, 0x4f, 0xff, 0xde, 0x9e, 0x7b, 0x9a, 0x3f,
	0xd6, 0x6d, 0xfe, 0x77, 0xb8, 0x67, 0x39, 0xfe, 0xdf, 0x87, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x78, 0xb6, 0xe9, 0x96, 0x12, 0x1a, 0x00, 0x00,
}
