// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proxyccb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ProxycCbKeyHandle is used to operate on a proxyccb either by its key or handle
type ProxycCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*ProxycCbKeyHandle_ProxyccbId
	//	*ProxycCbKeyHandle_ProxyccbHandle
	KeyOrHandle isProxycCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *ProxycCbKeyHandle) Reset()                    { *m = ProxycCbKeyHandle{} }
func (m *ProxycCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbKeyHandle) ProtoMessage()               {}
func (*ProxycCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{0} }

type isProxycCbKeyHandle_KeyOrHandle interface {
	isProxycCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxycCbKeyHandle_ProxyccbId struct {
	ProxyccbId uint32 `protobuf:"varint,1,opt,name=proxyccb_id,json=proxyccbId,proto3,oneof"`
}
type ProxycCbKeyHandle_ProxyccbHandle struct {
	ProxyccbHandle uint64 `protobuf:"fixed64,2,opt,name=proxyccb_handle,json=proxyccbHandle,proto3,oneof"`
}

func (*ProxycCbKeyHandle_ProxyccbId) isProxycCbKeyHandle_KeyOrHandle()     {}
func (*ProxycCbKeyHandle_ProxyccbHandle) isProxycCbKeyHandle_KeyOrHandle() {}

func (m *ProxycCbKeyHandle) GetKeyOrHandle() isProxycCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxycCbKeyHandle) GetProxyccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*ProxycCbKeyHandle_ProxyccbId); ok {
		return x.ProxyccbId
	}
	return 0
}

func (m *ProxycCbKeyHandle) GetProxyccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*ProxycCbKeyHandle_ProxyccbHandle); ok {
		return x.ProxyccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxycCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxycCbKeyHandle_OneofMarshaler, _ProxycCbKeyHandle_OneofUnmarshaler, _ProxycCbKeyHandle_OneofSizer, []interface{}{
		(*ProxycCbKeyHandle_ProxyccbId)(nil),
		(*ProxycCbKeyHandle_ProxyccbHandle)(nil),
	}
}

func _ProxycCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxycCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxycCbKeyHandle_ProxyccbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ProxyccbId))
	case *ProxycCbKeyHandle_ProxyccbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.ProxyccbHandle))
	case nil:
	default:
		return fmt.Errorf("ProxycCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _ProxycCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxycCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.proxyccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.proxyccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProxycCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxycCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxycCbKeyHandle_ProxyccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProxyccbId))
	case *ProxycCbKeyHandle_ProxyccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProxycCbSpec captures all the proxyccb level configuration
type ProxycCbSpec struct {
	Meta                    *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *ProxycCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi                      uint32             `protobuf:"varint,3,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci                      uint32             `protobuf:"varint,4,opt,name=ci,proto3" json:"ci,omitempty"`
	ProxyccbFlags           uint32             `protobuf:"varint,5,opt,name=proxyccb_flags,json=proxyccbFlags,proto3" json:"proxyccb_flags,omitempty"`
	MyTxqBase               uint64             `protobuf:"varint,6,opt,name=my_txq_base,json=myTxqBase,proto3" json:"my_txq_base,omitempty"`
	MyTxqRingSizeShift      uint32             `protobuf:"varint,7,opt,name=my_txq_ring_size_shift,json=myTxqRingSizeShift,proto3" json:"my_txq_ring_size_shift,omitempty"`
	MyTxqEntrySizeShift     uint32             `protobuf:"varint,8,opt,name=my_txq_entry_size_shift,json=myTxqEntrySizeShift,proto3" json:"my_txq_entry_size_shift,omitempty"`
	ChainTxqBase            uint64             `protobuf:"varint,9,opt,name=chain_txq_base,json=chainTxqBase,proto3" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint64             `protobuf:"varint,10,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr,proto3" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32             `protobuf:"varint,11,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift,proto3" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32             `protobuf:"varint,12,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift,proto3" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqLif             uint32             `protobuf:"varint,13,opt,name=chain_txq_lif,json=chainTxqLif,proto3" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32             `protobuf:"varint,14,opt,name=chain_txq_qtype,json=chainTxqQtype,proto3" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32             `protobuf:"varint,15,opt,name=chain_txq_qid,json=chainTxqQid,proto3" json:"chain_txq_qid,omitempty"`
	ChainTxqRing            uint32             `protobuf:"varint,16,opt,name=chain_txq_ring,json=chainTxqRing,proto3" json:"chain_txq_ring,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsChain   uint64 `protobuf:"varint,17,opt,name=stat_pkts_chain,json=statPktsChain,proto3" json:"stat_pkts_chain,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,18,opt,name=stat_pkts_discard,json=statPktsDiscard,proto3" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady      uint32 `protobuf:"varint,19,opt,name=stat_cb_not_ready,json=statCbNotReady,proto3" json:"stat_cb_not_ready,omitempty"`
	StatMyTxqEmpty      uint32 `protobuf:"varint,20,opt,name=stat_my_txq_empty,json=statMyTxqEmpty,proto3" json:"stat_my_txq_empty,omitempty"`
	StatAolErr          uint32 `protobuf:"varint,21,opt,name=stat_aol_err,json=statAolErr,proto3" json:"stat_aol_err,omitempty"`
	StatTxqFull         uint32 `protobuf:"varint,22,opt,name=stat_txq_full,json=statTxqFull,proto3" json:"stat_txq_full,omitempty"`
	StatDescSemFreeFull uint32 `protobuf:"varint,23,opt,name=stat_desc_sem_free_full,json=statDescSemFreeFull,proto3" json:"stat_desc_sem_free_full,omitempty"`
	StatPageSemFreeFull uint32 `protobuf:"varint,24,opt,name=stat_page_sem_free_full,json=statPageSemFreeFull,proto3" json:"stat_page_sem_free_full,omitempty"`
}

func (m *ProxycCbSpec) Reset()                    { *m = ProxycCbSpec{} }
func (m *ProxycCbSpec) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbSpec) ProtoMessage()               {}
func (*ProxycCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{1} }

func (m *ProxycCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxycCbSpec) GetKeyOrHandle() *ProxycCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxycCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *ProxycCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *ProxycCbSpec) GetProxyccbFlags() uint32 {
	if m != nil {
		return m.ProxyccbFlags
	}
	return 0
}

func (m *ProxycCbSpec) GetMyTxqBase() uint64 {
	if m != nil {
		return m.MyTxqBase
	}
	return 0
}

func (m *ProxycCbSpec) GetMyTxqRingSizeShift() uint32 {
	if m != nil {
		return m.MyTxqRingSizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetMyTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.MyTxqEntrySizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqBase() uint64 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqRing() uint32 {
	if m != nil {
		return m.ChainTxqRing
	}
	return 0
}

func (m *ProxycCbSpec) GetStatPktsChain() uint64 {
	if m != nil {
		return m.StatPktsChain
	}
	return 0
}

func (m *ProxycCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *ProxycCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *ProxycCbSpec) GetStatMyTxqEmpty() uint32 {
	if m != nil {
		return m.StatMyTxqEmpty
	}
	return 0
}

func (m *ProxycCbSpec) GetStatAolErr() uint32 {
	if m != nil {
		return m.StatAolErr
	}
	return 0
}

func (m *ProxycCbSpec) GetStatTxqFull() uint32 {
	if m != nil {
		return m.StatTxqFull
	}
	return 0
}

func (m *ProxycCbSpec) GetStatDescSemFreeFull() uint32 {
	if m != nil {
		return m.StatDescSemFreeFull
	}
	return 0
}

func (m *ProxycCbSpec) GetStatPageSemFreeFull() uint32 {
	if m != nil {
		return m.StatPageSemFreeFull
	}
	return 0
}

// ProxycCbRequestMsg is batched add or modify proxyccb request
type ProxycCbRequestMsg struct {
	Request []*ProxycCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxycCbRequestMsg) Reset()                    { *m = ProxycCbRequestMsg{} }
func (m *ProxycCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbRequestMsg) ProtoMessage()               {}
func (*ProxycCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{2} }

func (m *ProxycCbRequestMsg) GetRequest() []*ProxycCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxycCbStatus is the operational status of a given proxyccb
type ProxycCbStatus struct {
	ProxyccbHandle uint64 `protobuf:"fixed64,1,opt,name=proxyccb_handle,json=proxyccbHandle,proto3" json:"proxyccb_handle,omitempty"`
}

func (m *ProxycCbStatus) Reset()                    { *m = ProxycCbStatus{} }
func (m *ProxycCbStatus) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbStatus) ProtoMessage()               {}
func (*ProxycCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{3} }

func (m *ProxycCbStatus) GetProxyccbHandle() uint64 {
	if m != nil {
		return m.ProxyccbHandle
	}
	return 0
}

// ProxycCbResponse is response to ProxycCbSpec
type ProxycCbResponse struct {
	ApiStatus      ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProxyccbStatus *ProxycCbStatus `protobuf:"bytes,2,opt,name=proxyccb_status,json=proxyccbStatus" json:"proxyccb_status,omitempty"`
}

func (m *ProxycCbResponse) Reset()                    { *m = ProxycCbResponse{} }
func (m *ProxycCbResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbResponse) ProtoMessage()               {}
func (*ProxycCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{4} }

func (m *ProxycCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxycCbResponse) GetProxyccbStatus() *ProxycCbStatus {
	if m != nil {
		return m.ProxyccbStatus
	}
	return nil
}

// ProxycCbResponseMsg is batched response to ProxycCbRequestMsg
type ProxycCbResponseMsg struct {
	Response []*ProxycCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxycCbResponseMsg) Reset()                    { *m = ProxycCbResponseMsg{} }
func (m *ProxycCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbResponseMsg) ProtoMessage()               {}
func (*ProxycCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{5} }

func (m *ProxycCbResponseMsg) GetResponse() []*ProxycCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxycCbDeleteRequest is used to delete a proxyccb
type ProxycCbDeleteRequest struct {
	Meta        *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxycCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxycCbDeleteRequest) Reset()                    { *m = ProxycCbDeleteRequest{} }
func (m *ProxycCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbDeleteRequest) ProtoMessage()               {}
func (*ProxycCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{6} }

func (m *ProxycCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxycCbDeleteRequest) GetKeyOrHandle() *ProxycCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxycCbDeleteRequestMsg is used to delete a batch of proxyccbs
type ProxycCbDeleteRequestMsg struct {
	Request []*ProxycCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxycCbDeleteRequestMsg) Reset()                    { *m = ProxycCbDeleteRequestMsg{} }
func (m *ProxycCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbDeleteRequestMsg) ProtoMessage()               {}
func (*ProxycCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{7} }

func (m *ProxycCbDeleteRequestMsg) GetRequest() []*ProxycCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxycCbDeleteResponseMsg is batched response to ProxycCbDeleteRequestMsg
type ProxycCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxycCbDeleteResponseMsg) Reset()         { *m = ProxycCbDeleteResponseMsg{} }
func (m *ProxycCbDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ProxycCbDeleteResponseMsg) ProtoMessage()    {}
func (*ProxycCbDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorProxyccb, []int{8}
}

func (m *ProxycCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// ProxycCbGetRequest is used to get information about a proxyccb
type ProxycCbGetRequest struct {
	Meta        *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxycCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxycCbGetRequest) Reset()                    { *m = ProxycCbGetRequest{} }
func (m *ProxycCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetRequest) ProtoMessage()               {}
func (*ProxycCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{9} }

func (m *ProxycCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxycCbGetRequest) GetKeyOrHandle() *ProxycCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxycCbGetRequestMsg is batched GET requests for proxyccbs
type ProxycCbGetRequestMsg struct {
	Request []*ProxycCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxycCbGetRequestMsg) Reset()                    { *m = ProxycCbGetRequestMsg{} }
func (m *ProxycCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetRequestMsg) ProtoMessage()               {}
func (*ProxycCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{10} }

func (m *ProxycCbGetRequestMsg) GetRequest() []*ProxycCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxycCbStats is the statistics object for each proxyccb
type ProxycCbStats struct {
}

func (m *ProxycCbStats) Reset()                    { *m = ProxycCbStats{} }
func (m *ProxycCbStats) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbStats) ProtoMessage()               {}
func (*ProxycCbStats) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{11} }

// ProxycCbGetResponse captures all the information about a proxyccb
// only if api_status indicates success, other fields are valid
type ProxycCbGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *ProxycCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *ProxycCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *ProxycCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *ProxycCbGetResponse) Reset()                    { *m = ProxycCbGetResponse{} }
func (m *ProxycCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetResponse) ProtoMessage()               {}
func (*ProxycCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{12} }

func (m *ProxycCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxycCbGetResponse) GetSpec() *ProxycCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxycCbGetResponse) GetStatus() *ProxycCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProxycCbGetResponse) GetStats() *ProxycCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ProxycCbGetResponseMsg is batched response to ProxycCbGetRequestMsg
type ProxycCbGetResponseMsg struct {
	Response []*ProxycCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxycCbGetResponseMsg) Reset()                    { *m = ProxycCbGetResponseMsg{} }
func (m *ProxycCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetResponseMsg) ProtoMessage()               {}
func (*ProxycCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorProxyccb, []int{13} }

func (m *ProxycCbGetResponseMsg) GetResponse() []*ProxycCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*ProxycCbKeyHandle)(nil), "proxyccb.ProxycCbKeyHandle")
	proto.RegisterType((*ProxycCbSpec)(nil), "proxyccb.ProxycCbSpec")
	proto.RegisterType((*ProxycCbRequestMsg)(nil), "proxyccb.ProxycCbRequestMsg")
	proto.RegisterType((*ProxycCbStatus)(nil), "proxyccb.ProxycCbStatus")
	proto.RegisterType((*ProxycCbResponse)(nil), "proxyccb.ProxycCbResponse")
	proto.RegisterType((*ProxycCbResponseMsg)(nil), "proxyccb.ProxycCbResponseMsg")
	proto.RegisterType((*ProxycCbDeleteRequest)(nil), "proxyccb.ProxycCbDeleteRequest")
	proto.RegisterType((*ProxycCbDeleteRequestMsg)(nil), "proxyccb.ProxycCbDeleteRequestMsg")
	proto.RegisterType((*ProxycCbDeleteResponseMsg)(nil), "proxyccb.ProxycCbDeleteResponseMsg")
	proto.RegisterType((*ProxycCbGetRequest)(nil), "proxyccb.ProxycCbGetRequest")
	proto.RegisterType((*ProxycCbGetRequestMsg)(nil), "proxyccb.ProxycCbGetRequestMsg")
	proto.RegisterType((*ProxycCbStats)(nil), "proxyccb.ProxycCbStats")
	proto.RegisterType((*ProxycCbGetResponse)(nil), "proxyccb.ProxycCbGetResponse")
	proto.RegisterType((*ProxycCbGetResponseMsg)(nil), "proxyccb.ProxycCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProxycCb service

type ProxycCbClient interface {
	ProxycCbCreate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error)
	ProxycCbUpdate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error)
	ProxycCbDelete(ctx context.Context, in *ProxycCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxycCbDeleteResponseMsg, error)
	ProxycCbGet(ctx context.Context, in *ProxycCbGetRequestMsg, opts ...grpc.CallOption) (*ProxycCbGetResponseMsg, error)
}

type proxycCbClient struct {
	cc *grpc.ClientConn
}

func NewProxycCbClient(cc *grpc.ClientConn) ProxycCbClient {
	return &proxycCbClient{cc}
}

func (c *proxycCbClient) ProxycCbCreate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error) {
	out := new(ProxycCbResponseMsg)
	err := grpc.Invoke(ctx, "/proxyccb.ProxycCb/ProxycCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxycCbClient) ProxycCbUpdate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error) {
	out := new(ProxycCbResponseMsg)
	err := grpc.Invoke(ctx, "/proxyccb.ProxycCb/ProxycCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxycCbClient) ProxycCbDelete(ctx context.Context, in *ProxycCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxycCbDeleteResponseMsg, error) {
	out := new(ProxycCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/proxyccb.ProxycCb/ProxycCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxycCbClient) ProxycCbGet(ctx context.Context, in *ProxycCbGetRequestMsg, opts ...grpc.CallOption) (*ProxycCbGetResponseMsg, error) {
	out := new(ProxycCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/proxyccb.ProxycCb/ProxycCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProxycCb service

type ProxycCbServer interface {
	ProxycCbCreate(context.Context, *ProxycCbRequestMsg) (*ProxycCbResponseMsg, error)
	ProxycCbUpdate(context.Context, *ProxycCbRequestMsg) (*ProxycCbResponseMsg, error)
	ProxycCbDelete(context.Context, *ProxycCbDeleteRequestMsg) (*ProxycCbDeleteResponseMsg, error)
	ProxycCbGet(context.Context, *ProxycCbGetRequestMsg) (*ProxycCbGetResponseMsg, error)
}

func RegisterProxycCbServer(s *grpc.Server, srv ProxycCbServer) {
	s.RegisterService(&_ProxycCb_serviceDesc, srv)
}

func _ProxycCb_ProxycCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxycCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxycCbServer).ProxycCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyccb.ProxycCb/ProxycCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxycCbServer).ProxycCbCreate(ctx, req.(*ProxycCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxycCb_ProxycCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxycCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxycCbServer).ProxycCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyccb.ProxycCb/ProxycCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxycCbServer).ProxycCbUpdate(ctx, req.(*ProxycCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxycCb_ProxycCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxycCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxycCbServer).ProxycCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyccb.ProxycCb/ProxycCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxycCbServer).ProxycCbDelete(ctx, req.(*ProxycCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxycCb_ProxycCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxycCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxycCbServer).ProxycCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxyccb.ProxycCb/ProxycCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxycCbServer).ProxycCbGet(ctx, req.(*ProxycCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProxycCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxyccb.ProxycCb",
	HandlerType: (*ProxycCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxycCbCreate",
			Handler:    _ProxycCb_ProxycCbCreate_Handler,
		},
		{
			MethodName: "ProxycCbUpdate",
			Handler:    _ProxycCb_ProxycCbUpdate_Handler,
		},
		{
			MethodName: "ProxycCbDelete",
			Handler:    _ProxycCb_ProxycCbDelete_Handler,
		},
		{
			MethodName: "ProxycCbGet",
			Handler:    _ProxycCb_ProxycCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxyccb.proto",
}

func (m *ProxycCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ProxycCbKeyHandle_ProxyccbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintProxyccb(dAtA, i, uint64(m.ProxyccbId))
	return i, nil
}
func (m *ProxycCbKeyHandle_ProxyccbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Proxyccb(dAtA, i, uint64(m.ProxyccbHandle))
	return i, nil
}
func (m *ProxycCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n3, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Pi != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.Ci))
	}
	if m.ProxyccbFlags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ProxyccbFlags))
	}
	if m.MyTxqBase != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainTxqBase != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqLif != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ChainTxqQid))
	}
	if m.ChainTxqRing != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ChainTxqRing))
	}
	if m.StatPktsChain != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.StatPktsChain))
	}
	if m.StatPktsDiscard != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.StatPktsDiscard))
	}
	if m.StatCbNotReady != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.StatCbNotReady))
	}
	if m.StatMyTxqEmpty != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.StatMyTxqEmpty))
	}
	if m.StatAolErr != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.StatAolErr))
	}
	if m.StatTxqFull != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.StatTxqFull))
	}
	if m.StatDescSemFreeFull != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.StatDescSemFreeFull))
	}
	if m.StatPageSemFreeFull != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.StatPageSemFreeFull))
	}
	return i, nil
}

func (m *ProxycCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxycCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyccbHandle != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Proxyccb(dAtA, i, uint64(m.ProxyccbHandle))
	}
	return i, nil
}

func (m *ProxycCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.ProxyccbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ProxyccbStatus.Size()))
		n4, err := m.ProxyccbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ProxycCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxycCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.Meta.Size()))
		n5, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n6, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ProxycCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxycCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA8 := make([]byte, len(m.ApiStatus)*10)
		var j7 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *ProxycCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.Meta.Size()))
		n9, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n10, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *ProxycCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxycCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ProxycCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.Spec.Size()))
		n11, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.Status.Size()))
		n12, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProxyccb(dAtA, i, uint64(m.Stats.Size()))
		n13, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *ProxycCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProxyccb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Proxyccb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Proxyccb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintProxyccb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProxycCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *ProxycCbKeyHandle_ProxyccbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovProxyccb(uint64(m.ProxyccbId))
	return n
}
func (m *ProxycCbKeyHandle_ProxyccbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *ProxycCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	if m.Pi != 0 {
		n += 1 + sovProxyccb(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovProxyccb(uint64(m.Ci))
	}
	if m.ProxyccbFlags != 0 {
		n += 1 + sovProxyccb(uint64(m.ProxyccbFlags))
	}
	if m.MyTxqBase != 0 {
		n += 1 + sovProxyccb(uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		n += 1 + sovProxyccb(uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		n += 1 + sovProxyccb(uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainTxqBase != 0 {
		n += 1 + sovProxyccb(uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		n += 1 + sovProxyccb(uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		n += 1 + sovProxyccb(uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		n += 1 + sovProxyccb(uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqLif != 0 {
		n += 1 + sovProxyccb(uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		n += 1 + sovProxyccb(uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		n += 1 + sovProxyccb(uint64(m.ChainTxqQid))
	}
	if m.ChainTxqRing != 0 {
		n += 2 + sovProxyccb(uint64(m.ChainTxqRing))
	}
	if m.StatPktsChain != 0 {
		n += 2 + sovProxyccb(uint64(m.StatPktsChain))
	}
	if m.StatPktsDiscard != 0 {
		n += 2 + sovProxyccb(uint64(m.StatPktsDiscard))
	}
	if m.StatCbNotReady != 0 {
		n += 2 + sovProxyccb(uint64(m.StatCbNotReady))
	}
	if m.StatMyTxqEmpty != 0 {
		n += 2 + sovProxyccb(uint64(m.StatMyTxqEmpty))
	}
	if m.StatAolErr != 0 {
		n += 2 + sovProxyccb(uint64(m.StatAolErr))
	}
	if m.StatTxqFull != 0 {
		n += 2 + sovProxyccb(uint64(m.StatTxqFull))
	}
	if m.StatDescSemFreeFull != 0 {
		n += 2 + sovProxyccb(uint64(m.StatDescSemFreeFull))
	}
	if m.StatPageSemFreeFull != 0 {
		n += 2 + sovProxyccb(uint64(m.StatPageSemFreeFull))
	}
	return n
}

func (m *ProxycCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxyccb(uint64(l))
		}
	}
	return n
}

func (m *ProxycCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.ProxyccbHandle != 0 {
		n += 9
	}
	return n
}

func (m *ProxycCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovProxyccb(uint64(m.ApiStatus))
	}
	if m.ProxyccbStatus != nil {
		l = m.ProxyccbStatus.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	return n
}

func (m *ProxycCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovProxyccb(uint64(l))
		}
	}
	return n
}

func (m *ProxycCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	return n
}

func (m *ProxycCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxyccb(uint64(l))
		}
	}
	return n
}

func (m *ProxycCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovProxyccb(uint64(e))
		}
		n += 1 + sovProxyccb(uint64(l)) + l
	}
	return n
}

func (m *ProxycCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	return n
}

func (m *ProxycCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovProxyccb(uint64(l))
		}
	}
	return n
}

func (m *ProxycCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ProxycCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovProxyccb(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovProxyccb(uint64(l))
	}
	return n
}

func (m *ProxycCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovProxyccb(uint64(l))
		}
	}
	return n
}

func sovProxyccb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProxyccb(x uint64) (n int) {
	return sovProxyccb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProxycCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxycCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbFlags", wireType)
			}
			m.ProxyccbFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyccbFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqBase", wireType)
			}
			m.MyTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqRingSizeShift", wireType)
			}
			m.MyTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqEntrySizeShift", wireType)
			}
			m.MyTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqBase", wireType)
			}
			m.ChainTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingIndicesAddr", wireType)
			}
			m.ChainTxqRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingIndicesAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingSizeShift", wireType)
			}
			m.ChainTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqEntrySizeShift", wireType)
			}
			m.ChainTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqLif", wireType)
			}
			m.ChainTxqLif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqLif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQtype", wireType)
			}
			m.ChainTxqQtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQid", wireType)
			}
			m.ChainTxqQid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRing", wireType)
			}
			m.ChainTxqRing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRing |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPktsChain", wireType)
			}
			m.StatPktsChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPktsChain |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPktsDiscard", wireType)
			}
			m.StatPktsDiscard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPktsDiscard |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatCbNotReady", wireType)
			}
			m.StatCbNotReady = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatCbNotReady |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatMyTxqEmpty", wireType)
			}
			m.StatMyTxqEmpty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatMyTxqEmpty |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatAolErr", wireType)
			}
			m.StatAolErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatAolErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatTxqFull", wireType)
			}
			m.StatTxqFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatTxqFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatDescSemFreeFull", wireType)
			}
			m.StatDescSemFreeFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatDescSemFreeFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPageSemFreeFull", wireType)
			}
			m.StatPageSemFreeFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPageSemFreeFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxycCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbHandle", wireType)
			}
			m.ProxyccbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.ProxyccbHandle = uint64(dAtA[iNdEx-8])
			m.ProxyccbHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.ProxyccbHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.ProxyccbHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.ProxyccbHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.ProxyccbHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.ProxyccbHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.ProxyccbHandle |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyccbStatus == nil {
				m.ProxyccbStatus = &ProxycCbStatus{}
			}
			if err := m.ProxyccbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxycCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxycCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxycCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProxyccb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProxyccb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProxyccb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProxyccb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxycCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxycCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ProxycCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ProxycCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &ProxycCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxyccb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxycCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxyccb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxyccb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProxyccb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProxyccb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxyccb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProxyccb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProxyccb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProxyccb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProxyccb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProxyccb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proxyccb.proto", fileDescriptorProxyccb) }

var fileDescriptorProxyccb = []byte{
	// 994 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0x26, 0x69, 0xea, 0x9c, 0xf5, 0x4f, 0x32, 0x21, 0xce, 0x34, 0x6d, 0x5d, 0xb3, 0x50,
	0x48, 0x2b, 0x11, 0x2a, 0x83, 0x10, 0x45, 0x48, 0x28, 0x3f, 0x0d, 0xa9, 0xa8, 0x49, 0xba, 0x6e,
	0xaf, 0xb8, 0x58, 0xad, 0x77, 0xc7, 0xce, 0x90, 0xb5, 0xbd, 0x9e, 0x99, 0x48, 0xd9, 0x0a, 0x89,
	0x3b, 0x5e, 0x80, 0x1b, 0x1e, 0x89, 0x4b, 0x24, 0xae, 0x91, 0x50, 0x78, 0x11, 0x34, 0xb3, 0x3b,
	0x9e, 0xf5, 0xda, 0x69, 0x24, 0x84, 0x7a, 0xb7, 0x73, 0xce, 0xf7, 0x7d, 0xe7, 0x67, 0xce, 0x19,
	0x1b, 0xaa, 0x31, 0x1b, 0x5d, 0x26, 0x41, 0xd0, 0xdd, 0x8d, 0xd9, 0x48, 0x8c, 0x50, 0x49, 0x9f,
	0xb7, 0x6d, 0x91, 0xc4, 0x84, 0xa7, 0x66, 0x87, 0xc1, 0xfa, 0xa9, 0x72, 0x1c, 0x74, 0xbf, 0x23,
	0xc9, 0xb1, 0x3f, 0x0c, 0x23, 0x82, 0xde, 0x07, 0x5b, 0xa3, 0x3d, 0x1a, 0x62, 0xab, 0x69, 0xed,
	0x54, 0x8e, 0x17, 0x5c, 0xd0, 0xc6, 0xe7, 0x21, 0x7a, 0x04, 0xb5, 0x09, 0xe4, 0x4c, 0xb1, 0xf0,
	0x62, 0xd3, 0xda, 0x59, 0x39, 0x5e, 0x70, 0x27, 0x91, 0x53, 0xb5, 0xfd, 0x1a, 0x54, 0xce, 0x49,
	0xe2, 0x8d, 0x58, 0x06, 0x74, 0x7e, 0x2d, 0x41, 0x59, 0x07, 0xed, 0xc4, 0x24, 0x40, 0x0f, 0x61,
	0x79, 0x40, 0x84, 0xaf, 0x02, 0xd9, 0xad, 0xf5, 0xdd, 0x34, 0xc1, 0x93, 0xee, 0x8f, 0x24, 0x10,
	0x6d, 0x22, 0x7c, 0x57, 0xb9, 0xd1, 0x37, 0x05, 0x21, 0x15, 0xd1, 0x6e, 0xdd, 0xdd, 0x9d, 0x94,
	0x3a, 0x53, 0x8a, 0x6b, 0x9f, 0x93, 0xe4, 0x84, 0x65, 0x75, 0x55, 0x61, 0x31, 0xa6, 0x78, 0x49,
	0x96, 0xe3, 0x2e, 0xc6, 0x54, 0x9e, 0x03, 0x8a, 0x97, 0xd3, 0x73, 0x40, 0xd1, 0x43, 0xd3, 0x35,
	0xaf, 0x17, 0xf9, 0x7d, 0x8e, 0x6f, 0x29, 0x5f, 0x45, 0x5b, 0x8f, 0xa4, 0x11, 0x35, 0xc0, 0x1e,
	0x24, 0x9e, 0xb8, 0x1c, 0x7b, 0x5d, 0x9f, 0x13, 0xbc, 0xd2, 0xb4, 0x76, 0x96, 0xdd, 0xd5, 0x41,
	0xf2, 0xea, 0x72, 0xbc, 0xef, 0x73, 0x82, 0x5a, 0x50, 0xcf, 0xfc, 0x8c, 0x0e, 0xfb, 0x1e, 0xa7,
	0x6f, 0x88, 0xc7, 0xcf, 0x68, 0x4f, 0xe0, 0xdb, 0x4a, 0x0e, 0x29, 0xa8, 0x4b, 0x87, 0xfd, 0x0e,
	0x7d, 0x43, 0x3a, 0xd2, 0x83, 0x3e, 0x87, 0xad, 0x8c, 0x43, 0x86, 0x82, 0x25, 0x79, 0x52, 0x49,
	0x91, 0x36, 0x14, 0xe9, 0x99, 0x74, 0x1a, 0xd6, 0x87, 0x50, 0x0d, 0xce, 0x7c, 0x3a, 0x34, 0xc9,
	0xac, 0xaa, 0x64, 0xca, 0xca, 0xaa, 0xf3, 0xf9, 0x1a, 0xee, 0x1a, 0x94, 0x4a, 0x89, 0x0e, 0x43,
	0x1a, 0x10, 0xee, 0xf9, 0x61, 0xc8, 0x30, 0x28, 0xca, 0x96, 0xa6, 0xc8, 0xbc, 0x9e, 0xa7, 0xfe,
	0xbd, 0x30, 0x64, 0xe8, 0x4b, 0xb8, 0x53, 0x60, 0xe7, 0x72, 0xb3, 0x55, 0x6e, 0x9b, 0x79, 0xae,
	0xc9, 0xee, 0x2b, 0xd8, 0x36, 0xcc, 0x99, 0xb2, 0xca, 0x8a, 0x5a, 0xd7, 0xd4, 0x42, 0x65, 0x0e,
	0x54, 0x0c, 0x37, 0xa2, 0x3d, 0x5c, 0x51, 0x70, 0x5b, 0xc3, 0x5f, 0xd0, 0x1e, 0xfa, 0x08, 0x6a,
	0x06, 0x33, 0x96, 0x43, 0x83, 0xab, 0xe9, 0x7d, 0x69, 0xd4, 0x4b, 0x69, 0x9c, 0xd6, 0x1a, 0xd3,
	0x10, 0xd7, 0xa6, 0xb5, 0x5e, 0xd2, 0x70, 0xba, 0x93, 0xb2, 0x4a, 0xbc, 0xa6, 0x40, 0xe5, 0x7c,
	0x69, 0x32, 0x22, 0x17, 0xbe, 0xf0, 0xe2, 0x73, 0xc1, 0x3d, 0xe5, 0xc1, 0xeb, 0xaa, 0x7b, 0x15,
	0x69, 0x3e, 0x3d, 0x17, 0xfc, 0x40, 0x1a, 0xd1, 0x63, 0x58, 0x37, 0xb8, 0x90, 0xf2, 0xc0, 0x67,
	0x21, 0x46, 0x0a, 0x59, 0xd3, 0xc8, 0xc3, 0xd4, 0x8c, 0x1e, 0x65, 0xd8, 0xa0, 0xeb, 0x0d, 0x47,
	0xc2, 0x63, 0xc4, 0x0f, 0x13, 0xbc, 0xa1, 0x82, 0x57, 0xa5, 0xe3, 0xa0, 0xfb, 0xfd, 0x48, 0xb8,
	0xd2, 0x3a, 0x81, 0xea, 0x49, 0x19, 0xc4, 0x22, 0xc1, 0xef, 0x19, 0x68, 0x5b, 0x8d, 0x88, 0xb4,
	0xa2, 0x26, 0x94, 0x15, 0xd4, 0x1f, 0x45, 0x1e, 0x61, 0x0c, 0x6f, 0x2a, 0x14, 0x48, 0xdb, 0xde,
	0x28, 0x7a, 0xc6, 0x98, 0xec, 0x8a, 0x42, 0x48, 0xa5, 0xde, 0x45, 0x14, 0xe1, 0x7a, 0xda, 0x15,
	0x69, 0x7c, 0x75, 0x39, 0x3e, 0xba, 0x88, 0x22, 0x39, 0x95, 0x0a, 0x13, 0x12, 0x1e, 0x78, 0x9c,
	0x0c, 0xbc, 0x1e, 0x23, 0x24, 0x45, 0x6f, 0xa5, 0x53, 0x29, 0xdd, 0x87, 0x84, 0x07, 0x1d, 0x32,
	0x38, 0x62, 0x84, 0x4c, 0xb1, 0x62, 0xbf, 0x4f, 0x0a, 0x2c, 0x6c, 0x58, 0xa7, 0x7e, 0x9f, 0xe4,
	0x58, 0xce, 0x11, 0x20, 0xbd, 0xbe, 0x2e, 0x19, 0x5f, 0x10, 0x2e, 0xda, 0xbc, 0x8f, 0x9e, 0xc0,
	0x6d, 0x96, 0x9e, 0xb0, 0xd5, 0x5c, 0xda, 0xb1, 0x5b, 0xf5, 0xd9, 0x6d, 0x97, 0x6f, 0x88, 0xab,
	0x61, 0xce, 0x53, 0xa8, 0x4e, 0x1c, 0xc2, 0x17, 0x17, 0x1c, 0x7d, 0x3c, 0xfb, 0x56, 0xc9, 0x97,
	0x66, 0xa5, 0xf8, 0x52, 0x39, 0xbf, 0x58, 0xb0, 0x66, 0x72, 0xe0, 0xf1, 0x68, 0xc8, 0x09, 0xfa,
	0x14, 0xc0, 0x8f, 0xa9, 0xc7, 0x95, 0x96, 0x22, 0x56, 0x5b, 0x6b, 0xd9, 0x13, 0xb5, 0x17, 0xd3,
	0x34, 0x86, 0xbb, 0xea, 0xeb, 0x4f, 0xb4, 0x97, 0x0b, 0x97, 0xb1, 0xd2, 0x87, 0x0a, 0xcf, 0x49,
	0x3d, 0x65, 0x4f, 0x12, 0x49, 0xcf, 0x4e, 0x1b, 0x36, 0x8a, 0x79, 0xc8, 0x66, 0x7c, 0x01, 0x25,
	0x96, 0x1d, 0xb3, 0x6e, 0x6c, 0xcf, 0x4a, 0x6a, 0x82, 0x3b, 0xc1, 0x3a, 0x3f, 0xc3, 0xa6, 0xf6,
	0x1e, 0x92, 0x88, 0x08, 0x92, 0x35, 0xf8, 0x5d, 0x3d, 0xbc, 0xce, 0x6b, 0xc0, 0x73, 0x13, 0x90,
	0x45, 0x3d, 0x2d, 0xde, 0xf0, 0x83, 0x59, 0xd9, 0x29, 0x92, 0xb9, 0xea, 0x17, 0x70, 0xa7, 0x88,
	0x30, 0xcd, 0x2a, 0xde, 0xdb, 0xd2, 0x0d, 0xf7, 0xe6, 0xfc, 0x64, 0x06, 0xf0, 0x5b, 0x22, 0xde,
	0x75, 0x8b, 0x4e, 0xcc, 0x1d, 0x99, 0xe8, 0xe9, 0xa5, 0x17, 0xfa, 0x73, 0x6f, 0x56, 0xd3, 0x30,
	0x4c, 0x73, 0x6a, 0x50, 0xc9, 0x4f, 0x19, 0x77, 0xfe, 0xb4, 0xcc, 0x54, 0x29, 0xc2, 0x7f, 0x1d,
	0xf0, 0xc7, 0xb0, 0xcc, 0x63, 0x12, 0x64, 0x25, 0x5e, 0xb7, 0x90, 0x0a, 0x83, 0x9e, 0xc0, 0x4a,
	0x26, 0xbc, 0x74, 0xc3, 0x0e, 0x64, 0x38, 0xf4, 0x09, 0xdc, 0x92, 0x5f, 0x5c, 0xfd, 0x2e, 0xdb,
	0xad, 0xad, 0xf9, 0x04, 0xee, 0xa6, 0x28, 0xa7, 0x03, 0xf5, 0x39, 0x45, 0xa5, 0x83, 0x55, 0xdc,
	0x96, 0xfb, 0xd7, 0x74, 0xae, 0xb8, 0x30, 0xad, 0xbf, 0x16, 0xa1, 0xa4, 0x11, 0xe8, 0xc4, 0x3c,
	0x28, 0x07, 0x8c, 0xf8, 0x82, 0xa0, 0x7b, 0xf3, 0xb6, 0x4e, 0x5f, 0xd8, 0xf6, 0xfd, 0xeb, 0x77,
	0xb2, 0xcd, 0xfb, 0xce, 0x42, 0x5e, 0xf0, 0x75, 0x1c, 0xfe, 0x0f, 0x82, 0x3f, 0x18, 0xc1, 0x74,
	0x0f, 0x90, 0x73, 0xc3, 0x0e, 0x49, 0xd9, 0x0f, 0xae, 0xc7, 0xe4, 0xc5, 0x5d, 0xb0, 0x73, 0xcd,
	0x42, 0x0f, 0xde, 0x36, 0x7d, 0x52, 0xb6, 0xf9, 0xd6, 0x26, 0x2b, 0xcd, 0xfd, 0xb5, 0xdf, 0xaf,
	0x1a, 0xd6, 0x1f, 0x57, 0x0d, 0xeb, 0xef, 0xab, 0x86, 0xf5, 0xdb, 0x3f, 0x8d, 0x85, 0xee, 0x8a,
	0xfa, 0x3b, 0xfa, 0xd9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x2c, 0xd2, 0xdc, 0xb7, 0x0a,
	0x00, 0x00,
}
