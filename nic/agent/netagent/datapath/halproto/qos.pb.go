// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/qos.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Pre-defined trees for the hierarchical scheduler.
type QueueSchedulerPolicy int32

const (
	QueueSchedulerPolicy_TM_QUEUE_SCHEDULER_2_4 QueueSchedulerPolicy = 0
	// 4 L1 nodes per L2 node
	QueueSchedulerPolicy_TM_QUEUE_SCHEDULER_4_2 QueueSchedulerPolicy = 1
	// 2 L1 nodes per L2 node
	QueueSchedulerPolicy_TM_QUEUE_SCHEDULER_8_1 QueueSchedulerPolicy = 2
)

var QueueSchedulerPolicy_name = map[int32]string{
	0: "TM_QUEUE_SCHEDULER_2_4",
	1: "TM_QUEUE_SCHEDULER_4_2",
	2: "TM_QUEUE_SCHEDULER_8_1",
}
var QueueSchedulerPolicy_value = map[string]int32{
	"TM_QUEUE_SCHEDULER_2_4": 0,
	"TM_QUEUE_SCHEDULER_4_2": 1,
	"TM_QUEUE_SCHEDULER_8_1": 2,
}

func (x QueueSchedulerPolicy) String() string {
	return proto.EnumName(QueueSchedulerPolicy_name, int32(x))
}
func (QueueSchedulerPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

type PolicerDirection int32

const (
	PolicerDirection_INGRESS_POLICER PolicerDirection = 0
	PolicerDirection_EGRESS_POLICER  PolicerDirection = 1
)

var PolicerDirection_name = map[int32]string{
	0: "INGRESS_POLICER",
	1: "EGRESS_POLICER",
}
var PolicerDirection_value = map[string]int32{
	"INGRESS_POLICER": 0,
	"EGRESS_POLICER":  1,
}

func (x PolicerDirection) String() string {
	return proto.EnumName(PolicerDirection_name, int32(x))
}
func (PolicerDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

// Marking action object
type MarkingActionSpec struct {
	PcpRewriteEn  bool   `protobuf:"varint,1,opt,name=pcp_rewrite_en,json=pcpRewriteEn" json:"pcp_rewrite_en,omitempty"`
	Pcp           uint32 `protobuf:"varint,2,opt,name=pcp" json:"pcp,omitempty"`
	DscpRewriteEn bool   `protobuf:"varint,3,opt,name=dscp_rewrite_en,json=dscpRewriteEn" json:"dscp_rewrite_en,omitempty"`
	Dscp          uint32 `protobuf:"varint,4,opt,name=dscp" json:"dscp,omitempty"`
}

func (m *MarkingActionSpec) Reset()                    { *m = MarkingActionSpec{} }
func (m *MarkingActionSpec) String() string            { return proto.CompactTextString(m) }
func (*MarkingActionSpec) ProtoMessage()               {}
func (*MarkingActionSpec) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *MarkingActionSpec) GetPcpRewriteEn() bool {
	if m != nil {
		return m.PcpRewriteEn
	}
	return false
}

func (m *MarkingActionSpec) GetPcp() uint32 {
	if m != nil {
		return m.Pcp
	}
	return 0
}

func (m *MarkingActionSpec) GetDscpRewriteEn() bool {
	if m != nil {
		return m.DscpRewriteEn
	}
	return false
}

func (m *MarkingActionSpec) GetDscp() uint32 {
	if m != nil {
		return m.Dscp
	}
	return 0
}

// QOS actions used by other proto files to attach the QOS actions
// at respective attachment points
type QOSActions struct {
	QueueKeyOrHandle   *QueueKeyHandle    `protobuf:"bytes,1,opt,name=queue_key_or_handle,json=queueKeyOrHandle" json:"queue_key_or_handle,omitempty"`
	PolicerKeyOrHandle *PolicerKeyHandle  `protobuf:"bytes,2,opt,name=policer_key_or_handle,json=policerKeyOrHandle" json:"policer_key_or_handle,omitempty"`
	MarkingSpec        *MarkingActionSpec `protobuf:"bytes,3,opt,name=marking_spec,json=markingSpec" json:"marking_spec,omitempty"`
}

func (m *QOSActions) Reset()                    { *m = QOSActions{} }
func (m *QOSActions) String() string            { return proto.CompactTextString(m) }
func (*QOSActions) ProtoMessage()               {}
func (*QOSActions) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *QOSActions) GetQueueKeyOrHandle() *QueueKeyHandle {
	if m != nil {
		return m.QueueKeyOrHandle
	}
	return nil
}

func (m *QOSActions) GetPolicerKeyOrHandle() *PolicerKeyHandle {
	if m != nil {
		return m.PolicerKeyOrHandle
	}
	return nil
}

func (m *QOSActions) GetMarkingSpec() *MarkingActionSpec {
	if m != nil {
		return m.MarkingSpec
	}
	return nil
}

// Traffic class identifier
type TrafficClass struct {
	Cos uint32 `protobuf:"varint,1,opt,name=cos" json:"cos,omitempty"`
}

func (m *TrafficClass) Reset()                    { *m = TrafficClass{} }
func (m *TrafficClass) String() string            { return proto.CompactTextString(m) }
func (*TrafficClass) ProtoMessage()               {}
func (*TrafficClass) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *TrafficClass) GetCos() uint32 {
	if m != nil {
		return m.Cos
	}
	return 0
}

// Mapping from the Traffic Class to Queues.
type TrafficClassQueueMap struct {
	TrafficClass   *TrafficClass   `protobuf:"bytes,1,opt,name=traffic_class,json=trafficClass" json:"traffic_class,omitempty"`
	QueueKeyHandle *QueueKeyHandle `protobuf:"bytes,2,opt,name=queue_key_handle,json=queueKeyHandle" json:"queue_key_handle,omitempty"`
}

func (m *TrafficClassQueueMap) Reset()                    { *m = TrafficClassQueueMap{} }
func (m *TrafficClassQueueMap) String() string            { return proto.CompactTextString(m) }
func (*TrafficClassQueueMap) ProtoMessage()               {}
func (*TrafficClassQueueMap) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *TrafficClassQueueMap) GetTrafficClass() *TrafficClass {
	if m != nil {
		return m.TrafficClass
	}
	return nil
}

func (m *TrafficClassQueueMap) GetQueueKeyHandle() *QueueKeyHandle {
	if m != nil {
		return m.QueueKeyHandle
	}
	return nil
}

// Buffer Pool handle - uniquely identifies a buffer pool
type BufPoolHandle struct {
	Handle uint64 `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *BufPoolHandle) Reset()                    { *m = BufPoolHandle{} }
func (m *BufPoolHandle) String() string            { return proto.CompactTextString(m) }
func (*BufPoolHandle) ProtoMessage()               {}
func (*BufPoolHandle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

func (m *BufPoolHandle) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// BufPoolKeyHandle uniquely identifies a Buffer Pool
type BufPoolKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*BufPoolKeyHandle_BufPoolId
	//	*BufPoolKeyHandle_BufPoolHandle
	KeyOrHandle isBufPoolKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *BufPoolKeyHandle) Reset()                    { *m = BufPoolKeyHandle{} }
func (m *BufPoolKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*BufPoolKeyHandle) ProtoMessage()               {}
func (*BufPoolKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

type isBufPoolKeyHandle_KeyOrHandle interface {
	isBufPoolKeyHandle_KeyOrHandle()
}

type BufPoolKeyHandle_BufPoolId struct {
	BufPoolId uint32 `protobuf:"fixed32,1,opt,name=buf_pool_id,json=bufPoolId,oneof"`
}
type BufPoolKeyHandle_BufPoolHandle struct {
	BufPoolHandle *BufPoolHandle `protobuf:"bytes,2,opt,name=buf_pool_handle,json=bufPoolHandle,oneof"`
}

func (*BufPoolKeyHandle_BufPoolId) isBufPoolKeyHandle_KeyOrHandle()     {}
func (*BufPoolKeyHandle_BufPoolHandle) isBufPoolKeyHandle_KeyOrHandle() {}

func (m *BufPoolKeyHandle) GetKeyOrHandle() isBufPoolKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *BufPoolKeyHandle) GetBufPoolId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*BufPoolKeyHandle_BufPoolId); ok {
		return x.BufPoolId
	}
	return 0
}

func (m *BufPoolKeyHandle) GetBufPoolHandle() *BufPoolHandle {
	if x, ok := m.GetKeyOrHandle().(*BufPoolKeyHandle_BufPoolHandle); ok {
		return x.BufPoolHandle
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BufPoolKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BufPoolKeyHandle_OneofMarshaler, _BufPoolKeyHandle_OneofUnmarshaler, _BufPoolKeyHandle_OneofSizer, []interface{}{
		(*BufPoolKeyHandle_BufPoolId)(nil),
		(*BufPoolKeyHandle_BufPoolHandle)(nil),
	}
}

func _BufPoolKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BufPoolKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *BufPoolKeyHandle_BufPoolId:
		b.EncodeVarint(1<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(x.BufPoolId))
	case *BufPoolKeyHandle_BufPoolHandle:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BufPoolHandle); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BufPoolKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _BufPoolKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BufPoolKeyHandle)
	switch tag {
	case 1: // key_or_handle.buf_pool_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.KeyOrHandle = &BufPoolKeyHandle_BufPoolId{uint32(x)}
		return true, err
	case 2: // key_or_handle.buf_pool_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BufPoolHandle)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &BufPoolKeyHandle_BufPoolHandle{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BufPoolKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BufPoolKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *BufPoolKeyHandle_BufPoolId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *BufPoolKeyHandle_BufPoolHandle:
		s := proto.Size(x.BufPoolHandle)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Buffer Pool specification
type BufPoolSpec struct {
	Meta          *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle   *BufPoolKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	PortNum       uint32            `protobuf:"varint,3,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	ReservedBytes uint32            `protobuf:"varint,4,opt,name=reserved_bytes,json=reservedBytes" json:"reserved_bytes,omitempty"`
	// this pool
	HeadroomBytes uint32 `protobuf:"varint,5,opt,name=headroom_bytes,json=headroomBytes" json:"headroom_bytes,omitempty"`
	// reserved for this pool
	// Before this is used, xoff will be asserted
	SharingFactor uint32 `protobuf:"varint,6,opt,name=sharing_factor,json=sharingFactor" json:"sharing_factor,omitempty"`
	// buffers from shared pool
	XonThreshold uint32 `protobuf:"varint,7,opt,name=xon_threshold,json=xonThreshold" json:"xon_threshold,omitempty"`
	// max occupancy at which xoff will be cleared
	XoffClearLimit uint32 `protobuf:"varint,8,opt,name=xoff_clear_limit,json=xoffClearLimit" json:"xoff_clear_limit,omitempty"`
	// below this limit, xoff will be cleared
	Mtu uint32          `protobuf:"varint,9,opt,name=mtu" json:"mtu,omitempty"`
	Tcs []*TrafficClass `protobuf:"bytes,10,rep,name=tcs" json:"tcs,omitempty"`
}

func (m *BufPoolSpec) Reset()                    { *m = BufPoolSpec{} }
func (m *BufPoolSpec) String() string            { return proto.CompactTextString(m) }
func (*BufPoolSpec) ProtoMessage()               {}
func (*BufPoolSpec) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *BufPoolSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *BufPoolSpec) GetKeyOrHandle() *BufPoolKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *BufPoolSpec) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *BufPoolSpec) GetReservedBytes() uint32 {
	if m != nil {
		return m.ReservedBytes
	}
	return 0
}

func (m *BufPoolSpec) GetHeadroomBytes() uint32 {
	if m != nil {
		return m.HeadroomBytes
	}
	return 0
}

func (m *BufPoolSpec) GetSharingFactor() uint32 {
	if m != nil {
		return m.SharingFactor
	}
	return 0
}

func (m *BufPoolSpec) GetXonThreshold() uint32 {
	if m != nil {
		return m.XonThreshold
	}
	return 0
}

func (m *BufPoolSpec) GetXoffClearLimit() uint32 {
	if m != nil {
		return m.XoffClearLimit
	}
	return 0
}

func (m *BufPoolSpec) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *BufPoolSpec) GetTcs() []*TrafficClass {
	if m != nil {
		return m.Tcs
	}
	return nil
}

// BufPoolRequestMsg is batched request to create/update the buffer pools
type BufPoolRequestMsg struct {
	Request []*BufPoolSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BufPoolRequestMsg) Reset()                    { *m = BufPoolRequestMsg{} }
func (m *BufPoolRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*BufPoolRequestMsg) ProtoMessage()               {}
func (*BufPoolRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{7} }

func (m *BufPoolRequestMsg) GetRequest() []*BufPoolSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// BufPoolStatus represents the operational status of Buffer Pool
type BufPoolStatus struct {
	BufPoolHandle *BufPoolHandle `protobuf:"bytes,1,opt,name=buf_pool_handle,json=bufPoolHandle" json:"buf_pool_handle,omitempty"`
}

func (m *BufPoolStatus) Reset()                    { *m = BufPoolStatus{} }
func (m *BufPoolStatus) String() string            { return proto.CompactTextString(m) }
func (*BufPoolStatus) ProtoMessage()               {}
func (*BufPoolStatus) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{8} }

func (m *BufPoolStatus) GetBufPoolHandle() *BufPoolHandle {
	if m != nil {
		return m.BufPoolHandle
	}
	return nil
}

// BufPoolResponse is response to one BufPoolSpec
type BufPoolResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *BufPoolStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *BufPoolResponse) Reset()                    { *m = BufPoolResponse{} }
func (m *BufPoolResponse) String() string            { return proto.CompactTextString(m) }
func (*BufPoolResponse) ProtoMessage()               {}
func (*BufPoolResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{9} }

func (m *BufPoolResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BufPoolResponse) GetStatus() *BufPoolStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// BufPoolResponseMsg is response to BufPoolRequestMsg
type BufPoolResponseMsg struct {
	Response []*BufPoolResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BufPoolResponseMsg) Reset()                    { *m = BufPoolResponseMsg{} }
func (m *BufPoolResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*BufPoolResponseMsg) ProtoMessage()               {}
func (*BufPoolResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{10} }

func (m *BufPoolResponseMsg) GetResponse() []*BufPoolResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// BufPoolDeleteRequest  is used to delete a Buffer Pool object
type BufPoolDeleteRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *BufPoolKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *BufPoolDeleteRequest) Reset()                    { *m = BufPoolDeleteRequest{} }
func (m *BufPoolDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*BufPoolDeleteRequest) ProtoMessage()               {}
func (*BufPoolDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{11} }

func (m *BufPoolDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *BufPoolDeleteRequest) GetKeyOrHandle() *BufPoolKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// BufPoolDeleteRequestMsg is used to delete a batch of Buffer pools
type BufPoolDeleteRequestMsg struct {
	Request []*BufPoolDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BufPoolDeleteRequestMsg) Reset()                    { *m = BufPoolDeleteRequestMsg{} }
func (m *BufPoolDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*BufPoolDeleteRequestMsg) ProtoMessage()               {}
func (*BufPoolDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{12} }

func (m *BufPoolDeleteRequestMsg) GetRequest() []*BufPoolDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// BufPoolDeleteResponseMsg is batched response to BufPoolDeleteRequestMsg
type BufPoolDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *BufPoolDeleteResponseMsg) Reset()                    { *m = BufPoolDeleteResponseMsg{} }
func (m *BufPoolDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*BufPoolDeleteResponseMsg) ProtoMessage()               {}
func (*BufPoolDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{13} }

func (m *BufPoolDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// BufPoolStats captures all the statistics of given Buffer Pool
type BufPoolStats struct {
	Occupancy uint32 `protobuf:"varint,1,opt,name=occupancy" json:"occupancy,omitempty"`
}

func (m *BufPoolStats) Reset()                    { *m = BufPoolStats{} }
func (m *BufPoolStats) String() string            { return proto.CompactTextString(m) }
func (*BufPoolStats) ProtoMessage()               {}
func (*BufPoolStats) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{14} }

func (m *BufPoolStats) GetOccupancy() uint32 {
	if m != nil {
		return m.Occupancy
	}
	return 0
}

// BufPoolGetRequest is used to get information about a Buffer Pool
type BufPoolGetRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *BufPoolKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *BufPoolGetRequest) Reset()                    { *m = BufPoolGetRequest{} }
func (m *BufPoolGetRequest) String() string            { return proto.CompactTextString(m) }
func (*BufPoolGetRequest) ProtoMessage()               {}
func (*BufPoolGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{15} }

func (m *BufPoolGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *BufPoolGetRequest) GetKeyOrHandle() *BufPoolKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// Batched request message to get the stats about a batch of Buffer pools
type BufPoolGetRequestMsg struct {
	Request []*BufPoolGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BufPoolGetRequestMsg) Reset()                    { *m = BufPoolGetRequestMsg{} }
func (m *BufPoolGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*BufPoolGetRequestMsg) ProtoMessage()               {}
func (*BufPoolGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{16} }

func (m *BufPoolGetRequestMsg) GetRequest() []*BufPoolGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// BufPoolGetResponse captures all the information about a Buffer Pool
type BufPoolGetResponse struct {
	Spec   *BufPoolSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *BufPoolStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats  *BufPoolStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *BufPoolGetResponse) Reset()                    { *m = BufPoolGetResponse{} }
func (m *BufPoolGetResponse) String() string            { return proto.CompactTextString(m) }
func (*BufPoolGetResponse) ProtoMessage()               {}
func (*BufPoolGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{17} }

func (m *BufPoolGetResponse) GetSpec() *BufPoolSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *BufPoolGetResponse) GetStatus() *BufPoolStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BufPoolGetResponse) GetStats() *BufPoolStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// BufPoolGetResponseMsg is response to BufPoolGetRequestMsg
type BufPoolGetResponseMsg struct {
	Response []*BufPoolGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BufPoolGetResponseMsg) Reset()                    { *m = BufPoolGetResponseMsg{} }
func (m *BufPoolGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*BufPoolGetResponseMsg) ProtoMessage()               {}
func (*BufPoolGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{18} }

func (m *BufPoolGetResponseMsg) GetResponse() []*BufPoolGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Queue handle - uniquely identifies a queue
type QueueHandle struct {
	Handle uint64 `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *QueueHandle) Reset()                    { *m = QueueHandle{} }
func (m *QueueHandle) String() string            { return proto.CompactTextString(m) }
func (*QueueHandle) ProtoMessage()               {}
func (*QueueHandle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{19} }

func (m *QueueHandle) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// QueueKeyHandle uniquely identifies a queue
type QueueKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*QueueKeyHandle_QueueId
	//	*QueueKeyHandle_QueueHandle
	KeyOrHandle isQueueKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *QueueKeyHandle) Reset()                    { *m = QueueKeyHandle{} }
func (m *QueueKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*QueueKeyHandle) ProtoMessage()               {}
func (*QueueKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{20} }

type isQueueKeyHandle_KeyOrHandle interface {
	isQueueKeyHandle_KeyOrHandle()
}

type QueueKeyHandle_QueueId struct {
	QueueId uint32 `protobuf:"fixed32,1,opt,name=queue_id,json=queueId,oneof"`
}
type QueueKeyHandle_QueueHandle struct {
	QueueHandle *QueueHandle `protobuf:"bytes,2,opt,name=queue_handle,json=queueHandle,oneof"`
}

func (*QueueKeyHandle_QueueId) isQueueKeyHandle_KeyOrHandle()     {}
func (*QueueKeyHandle_QueueHandle) isQueueKeyHandle_KeyOrHandle() {}

func (m *QueueKeyHandle) GetKeyOrHandle() isQueueKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *QueueKeyHandle) GetQueueId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*QueueKeyHandle_QueueId); ok {
		return x.QueueId
	}
	return 0
}

func (m *QueueKeyHandle) GetQueueHandle() *QueueHandle {
	if x, ok := m.GetKeyOrHandle().(*QueueKeyHandle_QueueHandle); ok {
		return x.QueueHandle
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueueKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QueueKeyHandle_OneofMarshaler, _QueueKeyHandle_OneofUnmarshaler, _QueueKeyHandle_OneofSizer, []interface{}{
		(*QueueKeyHandle_QueueId)(nil),
		(*QueueKeyHandle_QueueHandle)(nil),
	}
}

func _QueueKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QueueKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *QueueKeyHandle_QueueId:
		b.EncodeVarint(1<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(x.QueueId))
	case *QueueKeyHandle_QueueHandle:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueueHandle); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("QueueKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _QueueKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QueueKeyHandle)
	switch tag {
	case 1: // key_or_handle.queue_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.KeyOrHandle = &QueueKeyHandle_QueueId{uint32(x)}
		return true, err
	case 2: // key_or_handle.queue_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueueHandle)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &QueueKeyHandle_QueueHandle{msg}
		return true, err
	default:
		return false, nil
	}
}

func _QueueKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QueueKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *QueueKeyHandle_QueueId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *QueueKeyHandle_QueueHandle:
		s := proto.Size(x.QueueHandle)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// DWRR specific information
type DWRRInfo struct {
	Weight uint32 `protobuf:"varint,1,opt,name=weight" json:"weight,omitempty"`
}

func (m *DWRRInfo) Reset()                    { *m = DWRRInfo{} }
func (m *DWRRInfo) String() string            { return proto.CompactTextString(m) }
func (*DWRRInfo) ProtoMessage()               {}
func (*DWRRInfo) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{21} }

func (m *DWRRInfo) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// Strict Priority specific information for the queue
type StrictPriorityInfo struct {
	Rate uint32 `protobuf:"varint,1,opt,name=rate" json:"rate,omitempty"`
}

func (m *StrictPriorityInfo) Reset()                    { *m = StrictPriorityInfo{} }
func (m *StrictPriorityInfo) String() string            { return proto.CompactTextString(m) }
func (*StrictPriorityInfo) ProtoMessage()               {}
func (*StrictPriorityInfo) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{22} }

func (m *StrictPriorityInfo) GetRate() uint32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

// Info about a node in Queue schedule tree
type QueueSchedulerNode struct {
	Priority uint32 `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	// Types that are valid to be assigned to QueueType:
	//	*QueueSchedulerNode_Dwrr
	//	*QueueSchedulerNode_Strict
	QueueType isQueueSchedulerNode_QueueType `protobuf_oneof:"QueueType"`
}

func (m *QueueSchedulerNode) Reset()                    { *m = QueueSchedulerNode{} }
func (m *QueueSchedulerNode) String() string            { return proto.CompactTextString(m) }
func (*QueueSchedulerNode) ProtoMessage()               {}
func (*QueueSchedulerNode) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{23} }

type isQueueSchedulerNode_QueueType interface {
	isQueueSchedulerNode_QueueType()
}

type QueueSchedulerNode_Dwrr struct {
	Dwrr *DWRRInfo `protobuf:"bytes,2,opt,name=dwrr,oneof"`
}
type QueueSchedulerNode_Strict struct {
	Strict *StrictPriorityInfo `protobuf:"bytes,3,opt,name=strict,oneof"`
}

func (*QueueSchedulerNode_Dwrr) isQueueSchedulerNode_QueueType()   {}
func (*QueueSchedulerNode_Strict) isQueueSchedulerNode_QueueType() {}

func (m *QueueSchedulerNode) GetQueueType() isQueueSchedulerNode_QueueType {
	if m != nil {
		return m.QueueType
	}
	return nil
}

func (m *QueueSchedulerNode) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *QueueSchedulerNode) GetDwrr() *DWRRInfo {
	if x, ok := m.GetQueueType().(*QueueSchedulerNode_Dwrr); ok {
		return x.Dwrr
	}
	return nil
}

func (m *QueueSchedulerNode) GetStrict() *StrictPriorityInfo {
	if x, ok := m.GetQueueType().(*QueueSchedulerNode_Strict); ok {
		return x.Strict
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueueSchedulerNode) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QueueSchedulerNode_OneofMarshaler, _QueueSchedulerNode_OneofUnmarshaler, _QueueSchedulerNode_OneofSizer, []interface{}{
		(*QueueSchedulerNode_Dwrr)(nil),
		(*QueueSchedulerNode_Strict)(nil),
	}
}

func _QueueSchedulerNode_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QueueSchedulerNode)
	// QueueType
	switch x := m.QueueType.(type) {
	case *QueueSchedulerNode_Dwrr:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dwrr); err != nil {
			return err
		}
	case *QueueSchedulerNode_Strict:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Strict); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("QueueSchedulerNode.QueueType has unexpected type %T", x)
	}
	return nil
}

func _QueueSchedulerNode_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QueueSchedulerNode)
	switch tag {
	case 2: // QueueType.dwrr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DWRRInfo)
		err := b.DecodeMessage(msg)
		m.QueueType = &QueueSchedulerNode_Dwrr{msg}
		return true, err
	case 3: // QueueType.strict
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StrictPriorityInfo)
		err := b.DecodeMessage(msg)
		m.QueueType = &QueueSchedulerNode_Strict{msg}
		return true, err
	default:
		return false, nil
	}
}

func _QueueSchedulerNode_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QueueSchedulerNode)
	// QueueType
	switch x := m.QueueType.(type) {
	case *QueueSchedulerNode_Dwrr:
		s := proto.Size(x.Dwrr)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueueSchedulerNode_Strict:
		s := proto.Size(x.Strict)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type QueueInfo struct {
	KeyOrHandle *QueueKeyHandle     `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	QueueInfo   *QueueSchedulerNode `protobuf:"bytes,2,opt,name=queue_info,json=queueInfo" json:"queue_info,omitempty"`
}

func (m *QueueInfo) Reset()                    { *m = QueueInfo{} }
func (m *QueueInfo) String() string            { return proto.CompactTextString(m) }
func (*QueueInfo) ProtoMessage()               {}
func (*QueueInfo) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{24} }

func (m *QueueInfo) GetKeyOrHandle() *QueueKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *QueueInfo) GetQueueInfo() *QueueSchedulerNode {
	if m != nil {
		return m.QueueInfo
	}
	return nil
}

// Output queue specification
// Output queues are created in a batch. Multiple queues are created at a
// TM Port at one time and the scheduling policy is picked from a
// predefined template.
// A QueueHandle will be returned for each of the queues created which
// can be used to specify the queue a particular flow should take
type QueueSpec struct {
	Meta            *ObjectMeta           `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	PortNum         uint32                `protobuf:"varint,2,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	SchedulerPolicy QueueSchedulerPolicy  `protobuf:"varint,3,opt,name=scheduler_policy,json=schedulerPolicy,enum=qos.QueueSchedulerPolicy" json:"scheduler_policy,omitempty"`
	Queues          []*QueueInfo          `protobuf:"bytes,4,rep,name=queues" json:"queues,omitempty"`
	L1Nodes         []*QueueSchedulerNode `protobuf:"bytes,5,rep,name=l1_nodes,json=l1Nodes" json:"l1_nodes,omitempty"`
}

func (m *QueueSpec) Reset()                    { *m = QueueSpec{} }
func (m *QueueSpec) String() string            { return proto.CompactTextString(m) }
func (*QueueSpec) ProtoMessage()               {}
func (*QueueSpec) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{25} }

func (m *QueueSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *QueueSpec) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *QueueSpec) GetSchedulerPolicy() QueueSchedulerPolicy {
	if m != nil {
		return m.SchedulerPolicy
	}
	return QueueSchedulerPolicy_TM_QUEUE_SCHEDULER_2_4
}

func (m *QueueSpec) GetQueues() []*QueueInfo {
	if m != nil {
		return m.Queues
	}
	return nil
}

func (m *QueueSpec) GetL1Nodes() []*QueueSchedulerNode {
	if m != nil {
		return m.L1Nodes
	}
	return nil
}

// QueueRequestMsg is batched request used to create/update Queues
type QueueRequestMsg struct {
	Request []*QueueSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *QueueRequestMsg) Reset()                    { *m = QueueRequestMsg{} }
func (m *QueueRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*QueueRequestMsg) ProtoMessage()               {}
func (*QueueRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{26} }

func (m *QueueRequestMsg) GetRequest() []*QueueSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type QueueStatus struct {
	QueueHandle *QueueHandle `protobuf:"bytes,1,opt,name=queue_handle,json=queueHandle" json:"queue_handle,omitempty"`
}

func (m *QueueStatus) Reset()                    { *m = QueueStatus{} }
func (m *QueueStatus) String() string            { return proto.CompactTextString(m) }
func (*QueueStatus) ProtoMessage()               {}
func (*QueueStatus) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{27} }

func (m *QueueStatus) GetQueueHandle() *QueueHandle {
	if m != nil {
		return m.QueueHandle
	}
	return nil
}

// Response message for creating queues
type QueueResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    []*QueueStatus `protobuf:"bytes,2,rep,name=status" json:"status,omitempty"`
}

func (m *QueueResponse) Reset()                    { *m = QueueResponse{} }
func (m *QueueResponse) String() string            { return proto.CompactTextString(m) }
func (*QueueResponse) ProtoMessage()               {}
func (*QueueResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{28} }

func (m *QueueResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *QueueResponse) GetStatus() []*QueueStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// QueueResponseMsg is response to QueueRequestMsg
type QueueResponseMsg struct {
	Response []*QueueResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *QueueResponseMsg) Reset()                    { *m = QueueResponseMsg{} }
func (m *QueueResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*QueueResponseMsg) ProtoMessage()               {}
func (*QueueResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{29} }

func (m *QueueResponseMsg) GetResponse() []*QueueResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// QueueDeleteRequest  is used to delete a Queue object
type QueueDeleteRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *QueueKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *QueueDeleteRequest) Reset()                    { *m = QueueDeleteRequest{} }
func (m *QueueDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*QueueDeleteRequest) ProtoMessage()               {}
func (*QueueDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{30} }

func (m *QueueDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *QueueDeleteRequest) GetKeyOrHandle() *QueueKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// QueueDeleteRequestMsg is used to delete a batch of Queues
type QueueDeleteRequestMsg struct {
	Request []*QueueDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *QueueDeleteRequestMsg) Reset()                    { *m = QueueDeleteRequestMsg{} }
func (m *QueueDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*QueueDeleteRequestMsg) ProtoMessage()               {}
func (*QueueDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{31} }

func (m *QueueDeleteRequestMsg) GetRequest() []*QueueDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QueueDeleteResponseMsg is batched response to QueueDeleteRequestMsg
type QueueDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *QueueDeleteResponseMsg) Reset()                    { *m = QueueDeleteResponseMsg{} }
func (m *QueueDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*QueueDeleteResponseMsg) ProtoMessage()               {}
func (*QueueDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{32} }

func (m *QueueDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// QueueStats captures all the statistics of given Queue
type QueueStats struct {
	QueueDepth uint32 `protobuf:"varint,1,opt,name=queue_depth,json=queueDepth" json:"queue_depth,omitempty"`
}

func (m *QueueStats) Reset()                    { *m = QueueStats{} }
func (m *QueueStats) String() string            { return proto.CompactTextString(m) }
func (*QueueStats) ProtoMessage()               {}
func (*QueueStats) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{33} }

func (m *QueueStats) GetQueueDepth() uint32 {
	if m != nil {
		return m.QueueDepth
	}
	return 0
}

// QueueGetRequest is used to get information about a Queue
type QueueGetRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *QueueKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *QueueGetRequest) Reset()                    { *m = QueueGetRequest{} }
func (m *QueueGetRequest) String() string            { return proto.CompactTextString(m) }
func (*QueueGetRequest) ProtoMessage()               {}
func (*QueueGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{34} }

func (m *QueueGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *QueueGetRequest) GetKeyOrHandle() *QueueKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type QueueGetRequestMsg struct {
	Request []*QueueGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *QueueGetRequestMsg) Reset()                    { *m = QueueGetRequestMsg{} }
func (m *QueueGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*QueueGetRequestMsg) ProtoMessage()               {}
func (*QueueGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{35} }

func (m *QueueGetRequestMsg) GetRequest() []*QueueGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// QueueGetResponse captures all the information about a Queue
type QueueGetResponse struct {
	Spec   *QueueSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *QueueStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats  *QueueStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *QueueGetResponse) Reset()                    { *m = QueueGetResponse{} }
func (m *QueueGetResponse) String() string            { return proto.CompactTextString(m) }
func (*QueueGetResponse) ProtoMessage()               {}
func (*QueueGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{36} }

func (m *QueueGetResponse) GetSpec() *QueueSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *QueueGetResponse) GetStatus() *QueueStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QueueGetResponse) GetStats() *QueueStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// QueueGetResponseMsg is response to QueueGetRequestMsg
type QueueGetResponseMsg struct {
	Response []*QueueGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *QueueGetResponseMsg) Reset()                    { *m = QueueGetResponseMsg{} }
func (m *QueueGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*QueueGetResponseMsg) ProtoMessage()               {}
func (*QueueGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{37} }

func (m *QueueGetResponseMsg) GetResponse() []*QueueGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Handle of the policer
type PolicerHandle struct {
	Handle uint64 `protobuf:"fixed64,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *PolicerHandle) Reset()                    { *m = PolicerHandle{} }
func (m *PolicerHandle) String() string            { return proto.CompactTextString(m) }
func (*PolicerHandle) ProtoMessage()               {}
func (*PolicerHandle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{38} }

func (m *PolicerHandle) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// PolicerKeyHandle uniquely identifies a Policer
type PolicerKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*PolicerKeyHandle_PolicerId
	//	*PolicerKeyHandle_PolicerHandle
	KeyOrHandle isPolicerKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *PolicerKeyHandle) Reset()                    { *m = PolicerKeyHandle{} }
func (m *PolicerKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*PolicerKeyHandle) ProtoMessage()               {}
func (*PolicerKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{39} }

type isPolicerKeyHandle_KeyOrHandle interface {
	isPolicerKeyHandle_KeyOrHandle()
}

type PolicerKeyHandle_PolicerId struct {
	PolicerId uint32 `protobuf:"fixed32,1,opt,name=policer_id,json=policerId,oneof"`
}
type PolicerKeyHandle_PolicerHandle struct {
	PolicerHandle *PolicerHandle `protobuf:"bytes,2,opt,name=policer_handle,json=policerHandle,oneof"`
}

func (*PolicerKeyHandle_PolicerId) isPolicerKeyHandle_KeyOrHandle()     {}
func (*PolicerKeyHandle_PolicerHandle) isPolicerKeyHandle_KeyOrHandle() {}

func (m *PolicerKeyHandle) GetKeyOrHandle() isPolicerKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PolicerKeyHandle) GetPolicerId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*PolicerKeyHandle_PolicerId); ok {
		return x.PolicerId
	}
	return 0
}

func (m *PolicerKeyHandle) GetPolicerHandle() *PolicerHandle {
	if x, ok := m.GetKeyOrHandle().(*PolicerKeyHandle_PolicerHandle); ok {
		return x.PolicerHandle
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PolicerKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PolicerKeyHandle_OneofMarshaler, _PolicerKeyHandle_OneofUnmarshaler, _PolicerKeyHandle_OneofSizer, []interface{}{
		(*PolicerKeyHandle_PolicerId)(nil),
		(*PolicerKeyHandle_PolicerHandle)(nil),
	}
}

func _PolicerKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PolicerKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *PolicerKeyHandle_PolicerId:
		b.EncodeVarint(1<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(x.PolicerId))
	case *PolicerKeyHandle_PolicerHandle:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PolicerHandle); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PolicerKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _PolicerKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PolicerKeyHandle)
	switch tag {
	case 1: // key_or_handle.policer_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.KeyOrHandle = &PolicerKeyHandle_PolicerId{uint32(x)}
		return true, err
	case 2: // key_or_handle.policer_handle
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolicerHandle)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &PolicerKeyHandle_PolicerHandle{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PolicerKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PolicerKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *PolicerKeyHandle_PolicerId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *PolicerKeyHandle_PolicerHandle:
		s := proto.Size(x.PolicerHandle)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Specifications of a policer
type PolicerSpec struct {
	Meta        *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *PolicerKeyHandle  `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Direction   PolicerDirection   `protobuf:"varint,3,opt,name=direction,enum=qos.PolicerDirection" json:"direction,omitempty"`
	Bandwidth   uint32             `protobuf:"varint,4,opt,name=bandwidth" json:"bandwidth,omitempty"`
	BurstSize   uint32             `protobuf:"varint,5,opt,name=burst_size,json=burstSize" json:"burst_size,omitempty"`
	MarkingSpec *MarkingActionSpec `protobuf:"bytes,6,opt,name=marking_spec,json=markingSpec" json:"marking_spec,omitempty"`
}

func (m *PolicerSpec) Reset()                    { *m = PolicerSpec{} }
func (m *PolicerSpec) String() string            { return proto.CompactTextString(m) }
func (*PolicerSpec) ProtoMessage()               {}
func (*PolicerSpec) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{40} }

func (m *PolicerSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PolicerSpec) GetKeyOrHandle() *PolicerKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PolicerSpec) GetDirection() PolicerDirection {
	if m != nil {
		return m.Direction
	}
	return PolicerDirection_INGRESS_POLICER
}

func (m *PolicerSpec) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *PolicerSpec) GetBurstSize() uint32 {
	if m != nil {
		return m.BurstSize
	}
	return 0
}

func (m *PolicerSpec) GetMarkingSpec() *MarkingActionSpec {
	if m != nil {
		return m.MarkingSpec
	}
	return nil
}

// Batched requests to create/update policers
type PolicerRequestMsg struct {
	Request []*PolicerSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PolicerRequestMsg) Reset()                    { *m = PolicerRequestMsg{} }
func (m *PolicerRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PolicerRequestMsg) ProtoMessage()               {}
func (*PolicerRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{41} }

func (m *PolicerRequestMsg) GetRequest() []*PolicerSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type PolicerStatus struct {
	PolicerHandle *PolicerHandle `protobuf:"bytes,1,opt,name=policer_handle,json=policerHandle" json:"policer_handle,omitempty"`
}

func (m *PolicerStatus) Reset()                    { *m = PolicerStatus{} }
func (m *PolicerStatus) String() string            { return proto.CompactTextString(m) }
func (*PolicerStatus) ProtoMessage()               {}
func (*PolicerStatus) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{42} }

func (m *PolicerStatus) GetPolicerHandle() *PolicerHandle {
	if m != nil {
		return m.PolicerHandle
	}
	return nil
}

// PolicerResponse is response to one Policer
type PolicerResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *PolicerStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *PolicerResponse) Reset()                    { *m = PolicerResponse{} }
func (m *PolicerResponse) String() string            { return proto.CompactTextString(m) }
func (*PolicerResponse) ProtoMessage()               {}
func (*PolicerResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{43} }

func (m *PolicerResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PolicerResponse) GetStatus() *PolicerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Batched responses to create/update policers
type PolicerResponseMsg struct {
	Response []*PolicerResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PolicerResponseMsg) Reset()                    { *m = PolicerResponseMsg{} }
func (m *PolicerResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PolicerResponseMsg) ProtoMessage()               {}
func (*PolicerResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{44} }

func (m *PolicerResponseMsg) GetResponse() []*PolicerResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type PolicerDeleteRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *PolicerKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *PolicerDeleteRequest) Reset()                    { *m = PolicerDeleteRequest{} }
func (m *PolicerDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*PolicerDeleteRequest) ProtoMessage()               {}
func (*PolicerDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{45} }

func (m *PolicerDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PolicerDeleteRequest) GetKeyOrHandle() *PolicerKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// Batched requests to delete policers
type PolicerDeleteRequestMsg struct {
	Request []*PolicerDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PolicerDeleteRequestMsg) Reset()                    { *m = PolicerDeleteRequestMsg{} }
func (m *PolicerDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PolicerDeleteRequestMsg) ProtoMessage()               {}
func (*PolicerDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{46} }

func (m *PolicerDeleteRequestMsg) GetRequest() []*PolicerDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// PolicerDeleteResponseMsg is batched response to PolicerDeleteRequestMsg
type PolicerDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *PolicerDeleteResponseMsg) Reset()                    { *m = PolicerDeleteResponseMsg{} }
func (m *PolicerDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PolicerDeleteResponseMsg) ProtoMessage()               {}
func (*PolicerDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{47} }

func (m *PolicerDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// PolicerGetRequest is used to get information about a policer
type PolicerGetRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *PolicerKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *PolicerGetRequest) Reset()                    { *m = PolicerGetRequest{} }
func (m *PolicerGetRequest) String() string            { return proto.CompactTextString(m) }
func (*PolicerGetRequest) ProtoMessage()               {}
func (*PolicerGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{48} }

func (m *PolicerGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PolicerGetRequest) GetKeyOrHandle() *PolicerKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type PolicerGetRequestMsg struct {
	Request []*PolicerGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PolicerGetRequestMsg) Reset()                    { *m = PolicerGetRequestMsg{} }
func (m *PolicerGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PolicerGetRequestMsg) ProtoMessage()               {}
func (*PolicerGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{49} }

func (m *PolicerGetRequestMsg) GetRequest() []*PolicerGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// PolicerStats captures all the statistics of a policer
type PolicerStats struct {
	PermittedPackets uint64 `protobuf:"varint,1,opt,name=permitted_packets,json=permittedPackets" json:"permitted_packets,omitempty"`
	PermittedBytes   uint64 `protobuf:"varint,2,opt,name=permitted_bytes,json=permittedBytes" json:"permitted_bytes,omitempty"`
	DroppedPackets   uint64 `protobuf:"varint,3,opt,name=dropped_packets,json=droppedPackets" json:"dropped_packets,omitempty"`
	DroppedBytes     uint64 `protobuf:"varint,4,opt,name=dropped_bytes,json=droppedBytes" json:"dropped_bytes,omitempty"`
}

func (m *PolicerStats) Reset()                    { *m = PolicerStats{} }
func (m *PolicerStats) String() string            { return proto.CompactTextString(m) }
func (*PolicerStats) ProtoMessage()               {}
func (*PolicerStats) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{50} }

func (m *PolicerStats) GetPermittedPackets() uint64 {
	if m != nil {
		return m.PermittedPackets
	}
	return 0
}

func (m *PolicerStats) GetPermittedBytes() uint64 {
	if m != nil {
		return m.PermittedBytes
	}
	return 0
}

func (m *PolicerStats) GetDroppedPackets() uint64 {
	if m != nil {
		return m.DroppedPackets
	}
	return 0
}

func (m *PolicerStats) GetDroppedBytes() uint64 {
	if m != nil {
		return m.DroppedBytes
	}
	return 0
}

// PolicerGetResponse captures all the information about a policer
type PolicerGetResponse struct {
	Spec   *PolicerSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *PolicerStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats  *PolicerStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *PolicerGetResponse) Reset()                    { *m = PolicerGetResponse{} }
func (m *PolicerGetResponse) String() string            { return proto.CompactTextString(m) }
func (*PolicerGetResponse) ProtoMessage()               {}
func (*PolicerGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{51} }

func (m *PolicerGetResponse) GetSpec() *PolicerSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PolicerGetResponse) GetStatus() *PolicerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PolicerGetResponse) GetStats() *PolicerStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// PolicerGetResponseMsg is response to PolicerGetRequestMsg
type PolicerGetResponseMsg struct {
	Response []*PolicerGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PolicerGetResponseMsg) Reset()                    { *m = PolicerGetResponseMsg{} }
func (m *PolicerGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PolicerGetResponseMsg) ProtoMessage()               {}
func (*PolicerGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{52} }

func (m *PolicerGetResponseMsg) GetResponse() []*PolicerGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*MarkingActionSpec)(nil), "qos.MarkingActionSpec")
	proto.RegisterType((*QOSActions)(nil), "qos.QOSActions")
	proto.RegisterType((*TrafficClass)(nil), "qos.TrafficClass")
	proto.RegisterType((*TrafficClassQueueMap)(nil), "qos.TrafficClassQueueMap")
	proto.RegisterType((*BufPoolHandle)(nil), "qos.BufPoolHandle")
	proto.RegisterType((*BufPoolKeyHandle)(nil), "qos.BufPoolKeyHandle")
	proto.RegisterType((*BufPoolSpec)(nil), "qos.BufPoolSpec")
	proto.RegisterType((*BufPoolRequestMsg)(nil), "qos.BufPoolRequestMsg")
	proto.RegisterType((*BufPoolStatus)(nil), "qos.BufPoolStatus")
	proto.RegisterType((*BufPoolResponse)(nil), "qos.BufPoolResponse")
	proto.RegisterType((*BufPoolResponseMsg)(nil), "qos.BufPoolResponseMsg")
	proto.RegisterType((*BufPoolDeleteRequest)(nil), "qos.BufPoolDeleteRequest")
	proto.RegisterType((*BufPoolDeleteRequestMsg)(nil), "qos.BufPoolDeleteRequestMsg")
	proto.RegisterType((*BufPoolDeleteResponseMsg)(nil), "qos.BufPoolDeleteResponseMsg")
	proto.RegisterType((*BufPoolStats)(nil), "qos.BufPoolStats")
	proto.RegisterType((*BufPoolGetRequest)(nil), "qos.BufPoolGetRequest")
	proto.RegisterType((*BufPoolGetRequestMsg)(nil), "qos.BufPoolGetRequestMsg")
	proto.RegisterType((*BufPoolGetResponse)(nil), "qos.BufPoolGetResponse")
	proto.RegisterType((*BufPoolGetResponseMsg)(nil), "qos.BufPoolGetResponseMsg")
	proto.RegisterType((*QueueHandle)(nil), "qos.QueueHandle")
	proto.RegisterType((*QueueKeyHandle)(nil), "qos.QueueKeyHandle")
	proto.RegisterType((*DWRRInfo)(nil), "qos.DWRRInfo")
	proto.RegisterType((*StrictPriorityInfo)(nil), "qos.StrictPriorityInfo")
	proto.RegisterType((*QueueSchedulerNode)(nil), "qos.QueueSchedulerNode")
	proto.RegisterType((*QueueInfo)(nil), "qos.QueueInfo")
	proto.RegisterType((*QueueSpec)(nil), "qos.QueueSpec")
	proto.RegisterType((*QueueRequestMsg)(nil), "qos.QueueRequestMsg")
	proto.RegisterType((*QueueStatus)(nil), "qos.QueueStatus")
	proto.RegisterType((*QueueResponse)(nil), "qos.QueueResponse")
	proto.RegisterType((*QueueResponseMsg)(nil), "qos.QueueResponseMsg")
	proto.RegisterType((*QueueDeleteRequest)(nil), "qos.QueueDeleteRequest")
	proto.RegisterType((*QueueDeleteRequestMsg)(nil), "qos.QueueDeleteRequestMsg")
	proto.RegisterType((*QueueDeleteResponseMsg)(nil), "qos.QueueDeleteResponseMsg")
	proto.RegisterType((*QueueStats)(nil), "qos.QueueStats")
	proto.RegisterType((*QueueGetRequest)(nil), "qos.QueueGetRequest")
	proto.RegisterType((*QueueGetRequestMsg)(nil), "qos.QueueGetRequestMsg")
	proto.RegisterType((*QueueGetResponse)(nil), "qos.QueueGetResponse")
	proto.RegisterType((*QueueGetResponseMsg)(nil), "qos.QueueGetResponseMsg")
	proto.RegisterType((*PolicerHandle)(nil), "qos.PolicerHandle")
	proto.RegisterType((*PolicerKeyHandle)(nil), "qos.PolicerKeyHandle")
	proto.RegisterType((*PolicerSpec)(nil), "qos.PolicerSpec")
	proto.RegisterType((*PolicerRequestMsg)(nil), "qos.PolicerRequestMsg")
	proto.RegisterType((*PolicerStatus)(nil), "qos.PolicerStatus")
	proto.RegisterType((*PolicerResponse)(nil), "qos.PolicerResponse")
	proto.RegisterType((*PolicerResponseMsg)(nil), "qos.PolicerResponseMsg")
	proto.RegisterType((*PolicerDeleteRequest)(nil), "qos.PolicerDeleteRequest")
	proto.RegisterType((*PolicerDeleteRequestMsg)(nil), "qos.PolicerDeleteRequestMsg")
	proto.RegisterType((*PolicerDeleteResponseMsg)(nil), "qos.PolicerDeleteResponseMsg")
	proto.RegisterType((*PolicerGetRequest)(nil), "qos.PolicerGetRequest")
	proto.RegisterType((*PolicerGetRequestMsg)(nil), "qos.PolicerGetRequestMsg")
	proto.RegisterType((*PolicerStats)(nil), "qos.PolicerStats")
	proto.RegisterType((*PolicerGetResponse)(nil), "qos.PolicerGetResponse")
	proto.RegisterType((*PolicerGetResponseMsg)(nil), "qos.PolicerGetResponseMsg")
	proto.RegisterEnum("qos.QueueSchedulerPolicy", QueueSchedulerPolicy_name, QueueSchedulerPolicy_value)
	proto.RegisterEnum("qos.PolicerDirection", PolicerDirection_name, PolicerDirection_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for QOS service

type QOSClient interface {
	// Buffer Pool Group related APIs
	// Create a Buffer pool on a port given the buffer requirements
	BufPoolCreate(ctx context.Context, in *BufPoolRequestMsg, opts ...grpc.CallOption) (*BufPoolResponseMsg, error)
	BufPoolUpdate(ctx context.Context, in *BufPoolRequestMsg, opts ...grpc.CallOption) (*BufPoolResponseMsg, error)
	BufPoolDelete(ctx context.Context, in *BufPoolDeleteRequestMsg, opts ...grpc.CallOption) (*BufPoolDeleteResponseMsg, error)
	BufPoolGet(ctx context.Context, in *BufPoolGetRequestMsg, opts ...grpc.CallOption) (*BufPoolGetResponseMsg, error)
	// Output Queue related APIs
	QueueCreate(ctx context.Context, in *QueueRequestMsg, opts ...grpc.CallOption) (*QueueResponseMsg, error)
	QueueUpdate(ctx context.Context, in *QueueRequestMsg, opts ...grpc.CallOption) (*QueueResponseMsg, error)
	QueueDelete(ctx context.Context, in *QueueDeleteRequestMsg, opts ...grpc.CallOption) (*QueueDeleteResponseMsg, error)
	QueueGet(ctx context.Context, in *QueueGetRequestMsg, opts ...grpc.CallOption) (*QueueGetResponseMsg, error)
	// Policers
	PolicerCreate(ctx context.Context, in *PolicerRequestMsg, opts ...grpc.CallOption) (*PolicerResponseMsg, error)
	PolicerUpdate(ctx context.Context, in *PolicerRequestMsg, opts ...grpc.CallOption) (*PolicerResponseMsg, error)
	PolicerDelete(ctx context.Context, in *PolicerDeleteRequestMsg, opts ...grpc.CallOption) (*PolicerDeleteResponseMsg, error)
	PolicerGet(ctx context.Context, in *PolicerGetRequestMsg, opts ...grpc.CallOption) (*PolicerGetResponseMsg, error)
}

type qOSClient struct {
	cc *grpc.ClientConn
}

func NewQOSClient(cc *grpc.ClientConn) QOSClient {
	return &qOSClient{cc}
}

func (c *qOSClient) BufPoolCreate(ctx context.Context, in *BufPoolRequestMsg, opts ...grpc.CallOption) (*BufPoolResponseMsg, error) {
	out := new(BufPoolResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/BufPoolCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) BufPoolUpdate(ctx context.Context, in *BufPoolRequestMsg, opts ...grpc.CallOption) (*BufPoolResponseMsg, error) {
	out := new(BufPoolResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/BufPoolUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) BufPoolDelete(ctx context.Context, in *BufPoolDeleteRequestMsg, opts ...grpc.CallOption) (*BufPoolDeleteResponseMsg, error) {
	out := new(BufPoolDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/BufPoolDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) BufPoolGet(ctx context.Context, in *BufPoolGetRequestMsg, opts ...grpc.CallOption) (*BufPoolGetResponseMsg, error) {
	out := new(BufPoolGetResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/BufPoolGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) QueueCreate(ctx context.Context, in *QueueRequestMsg, opts ...grpc.CallOption) (*QueueResponseMsg, error) {
	out := new(QueueResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/QueueCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) QueueUpdate(ctx context.Context, in *QueueRequestMsg, opts ...grpc.CallOption) (*QueueResponseMsg, error) {
	out := new(QueueResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/QueueUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) QueueDelete(ctx context.Context, in *QueueDeleteRequestMsg, opts ...grpc.CallOption) (*QueueDeleteResponseMsg, error) {
	out := new(QueueDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/QueueDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) QueueGet(ctx context.Context, in *QueueGetRequestMsg, opts ...grpc.CallOption) (*QueueGetResponseMsg, error) {
	out := new(QueueGetResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/QueueGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) PolicerCreate(ctx context.Context, in *PolicerRequestMsg, opts ...grpc.CallOption) (*PolicerResponseMsg, error) {
	out := new(PolicerResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/PolicerCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) PolicerUpdate(ctx context.Context, in *PolicerRequestMsg, opts ...grpc.CallOption) (*PolicerResponseMsg, error) {
	out := new(PolicerResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/PolicerUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) PolicerDelete(ctx context.Context, in *PolicerDeleteRequestMsg, opts ...grpc.CallOption) (*PolicerDeleteResponseMsg, error) {
	out := new(PolicerDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/PolicerDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qOSClient) PolicerGet(ctx context.Context, in *PolicerGetRequestMsg, opts ...grpc.CallOption) (*PolicerGetResponseMsg, error) {
	out := new(PolicerGetResponseMsg)
	err := grpc.Invoke(ctx, "/qos.QOS/PolicerGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QOS service

type QOSServer interface {
	// Buffer Pool Group related APIs
	// Create a Buffer pool on a port given the buffer requirements
	BufPoolCreate(context.Context, *BufPoolRequestMsg) (*BufPoolResponseMsg, error)
	BufPoolUpdate(context.Context, *BufPoolRequestMsg) (*BufPoolResponseMsg, error)
	BufPoolDelete(context.Context, *BufPoolDeleteRequestMsg) (*BufPoolDeleteResponseMsg, error)
	BufPoolGet(context.Context, *BufPoolGetRequestMsg) (*BufPoolGetResponseMsg, error)
	// Output Queue related APIs
	QueueCreate(context.Context, *QueueRequestMsg) (*QueueResponseMsg, error)
	QueueUpdate(context.Context, *QueueRequestMsg) (*QueueResponseMsg, error)
	QueueDelete(context.Context, *QueueDeleteRequestMsg) (*QueueDeleteResponseMsg, error)
	QueueGet(context.Context, *QueueGetRequestMsg) (*QueueGetResponseMsg, error)
	// Policers
	PolicerCreate(context.Context, *PolicerRequestMsg) (*PolicerResponseMsg, error)
	PolicerUpdate(context.Context, *PolicerRequestMsg) (*PolicerResponseMsg, error)
	PolicerDelete(context.Context, *PolicerDeleteRequestMsg) (*PolicerDeleteResponseMsg, error)
	PolicerGet(context.Context, *PolicerGetRequestMsg) (*PolicerGetResponseMsg, error)
}

func RegisterQOSServer(s *grpc.Server, srv QOSServer) {
	s.RegisterService(&_QOS_serviceDesc, srv)
}

func _QOS_BufPoolCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufPoolRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).BufPoolCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/BufPoolCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).BufPoolCreate(ctx, req.(*BufPoolRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_BufPoolUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufPoolRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).BufPoolUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/BufPoolUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).BufPoolUpdate(ctx, req.(*BufPoolRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_BufPoolDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufPoolDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).BufPoolDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/BufPoolDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).BufPoolDelete(ctx, req.(*BufPoolDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_BufPoolGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufPoolGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).BufPoolGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/BufPoolGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).BufPoolGet(ctx, req.(*BufPoolGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_QueueCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).QueueCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/QueueCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).QueueCreate(ctx, req.(*QueueRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_QueueUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).QueueUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/QueueUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).QueueUpdate(ctx, req.(*QueueRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_QueueDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).QueueDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/QueueDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).QueueDelete(ctx, req.(*QueueDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_QueueGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).QueueGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/QueueGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).QueueGet(ctx, req.(*QueueGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_PolicerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicerRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).PolicerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/PolicerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).PolicerCreate(ctx, req.(*PolicerRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_PolicerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicerRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).PolicerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/PolicerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).PolicerUpdate(ctx, req.(*PolicerRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_PolicerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicerDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).PolicerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/PolicerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).PolicerDelete(ctx, req.(*PolicerDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QOS_PolicerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicerGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QOSServer).PolicerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qos.QOS/PolicerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QOSServer).PolicerGet(ctx, req.(*PolicerGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _QOS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qos.QOS",
	HandlerType: (*QOSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BufPoolCreate",
			Handler:    _QOS_BufPoolCreate_Handler,
		},
		{
			MethodName: "BufPoolUpdate",
			Handler:    _QOS_BufPoolUpdate_Handler,
		},
		{
			MethodName: "BufPoolDelete",
			Handler:    _QOS_BufPoolDelete_Handler,
		},
		{
			MethodName: "BufPoolGet",
			Handler:    _QOS_BufPoolGet_Handler,
		},
		{
			MethodName: "QueueCreate",
			Handler:    _QOS_QueueCreate_Handler,
		},
		{
			MethodName: "QueueUpdate",
			Handler:    _QOS_QueueUpdate_Handler,
		},
		{
			MethodName: "QueueDelete",
			Handler:    _QOS_QueueDelete_Handler,
		},
		{
			MethodName: "QueueGet",
			Handler:    _QOS_QueueGet_Handler,
		},
		{
			MethodName: "PolicerCreate",
			Handler:    _QOS_PolicerCreate_Handler,
		},
		{
			MethodName: "PolicerUpdate",
			Handler:    _QOS_PolicerUpdate_Handler,
		},
		{
			MethodName: "PolicerDelete",
			Handler:    _QOS_PolicerDelete_Handler,
		},
		{
			MethodName: "PolicerGet",
			Handler:    _QOS_PolicerGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/qos.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/qos.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 1915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x16, 0x44, 0x45, 0xa2, 0x0e, 0x7f, 0xb5, 0xd6, 0x0f, 0xad, 0x24, 0x13, 0x0d, 0x1c, 0x47,
	0x1a, 0xb7, 0xb5, 0x2b, 0x39, 0x4d, 0xea, 0x3a, 0x1d, 0x4f, 0x28, 0x31, 0xa1, 0x12, 0xeb, 0xc7,
	0xa0, 0x3d, 0x9d, 0xe9, 0x0d, 0x06, 0x04, 0x96, 0x26, 0x6c, 0x92, 0x00, 0x81, 0x45, 0x6d, 0x66,
	0x7a, 0xd3, 0xe9, 0x74, 0x72, 0xd5, 0xe9, 0x55, 0xef, 0xfa, 0x14, 0x7d, 0x8c, 0xde, 0xf7, 0x39,
	0xfa, 0x0a, 0x9d, 0xfd, 0x01, 0xb0, 0x0b, 0x80, 0x54, 0x64, 0xab, 0xbd, 0x12, 0xf7, 0x9c, 0xb3,
	0x67, 0xcf, 0x9e, 0xf3, 0xed, 0x7e, 0x7b, 0x20, 0xd8, 0x99, 0xb8, 0xf6, 0x03, 0x3f, 0xf0, 0x88,
	0xf7, 0x60, 0x68, 0x8d, 0x1e, 0x4c, 0xbd, 0xf0, 0x3e, 0x1b, 0xa1, 0xd2, 0xd4, 0x0b, 0x77, 0xb7,
	0x52, 0x2d, 0x99, 0xf9, 0x58, 0xe8, 0xf4, 0x1f, 0x35, 0xd8, 0x38, 0xb3, 0x82, 0xd7, 0xee, 0xe4,
	0xe5, 0xd7, 0x36, 0x71, 0xbd, 0x49, 0xcf, 0xc7, 0x36, 0xfa, 0x14, 0xea, 0xbe, 0xed, 0x9b, 0x01,
	0x7e, 0x13, 0xb8, 0x04, 0x9b, 0x78, 0xd2, 0xd2, 0xf6, 0xb4, 0x83, 0xb2, 0x51, 0xf5, 0x6d, 0xdf,
	0xe0, 0xc2, 0xce, 0x04, 0x35, 0xa1, 0xe4, 0xdb, 0x7e, 0x6b, 0x79, 0x4f, 0x3b, 0xa8, 0x19, 0xf4,
	0x27, 0xfa, 0x0c, 0x1a, 0x4e, 0xa8, 0x4e, 0x2c, 0xb1, 0x89, 0x35, 0x2a, 0x4e, 0x67, 0x22, 0x58,
	0xa1, 0x82, 0xd6, 0x0a, 0x9b, 0xca, 0x7e, 0xeb, 0xff, 0xd6, 0x00, 0x9e, 0x5d, 0xf4, 0x78, 0x14,
	0x21, 0x6a, 0xc3, 0xad, 0x69, 0x84, 0x23, 0x6c, 0xbe, 0xc6, 0x33, 0xd3, 0x0b, 0xcc, 0xa1, 0x35,
	0x71, 0x46, 0x98, 0xc5, 0x51, 0x39, 0xba, 0x75, 0x9f, 0xee, 0xee, 0x19, 0xd5, 0x7f, 0x8f, 0x67,
	0x5d, 0xa6, 0x32, 0x9a, 0x53, 0x31, 0xbe, 0x08, 0xb8, 0x04, 0x75, 0x61, 0xcb, 0xf7, 0x46, 0xae,
	0x8d, 0x83, 0x8c, 0x97, 0x65, 0xe6, 0x65, 0x8b, 0x79, 0xb9, 0xe4, 0x16, 0xa9, 0x1f, 0xe4, 0x27,
	0x92, 0xc4, 0xd3, 0x23, 0xa8, 0x8e, 0x79, 0x96, 0xcc, 0xd0, 0xc7, 0x36, 0xdb, 0x55, 0xe5, 0x68,
	0x9b, 0x39, 0xc8, 0xa5, 0xcf, 0xa8, 0x08, 0x5b, 0x3a, 0xd0, 0xf7, 0xa0, 0xfa, 0x3c, 0xb0, 0x06,
	0x03, 0xd7, 0x3e, 0x1e, 0x59, 0x61, 0x48, 0xb3, 0x66, 0x7b, 0x21, 0xdb, 0x48, 0xcd, 0xa0, 0x3f,
	0xf5, 0xbf, 0x6a, 0xb0, 0x29, 0x9b, 0xb0, 0x7d, 0x9d, 0x59, 0x3e, 0xfa, 0x02, 0x6a, 0x84, 0xcb,
	0x4d, 0x9b, 0x2a, 0xc4, 0xee, 0x37, 0xd8, 0xb2, 0xf2, 0x0c, 0xa3, 0x4a, 0xe4, 0x25, 0x7e, 0x0b,
	0xcd, 0x34, 0x77, 0xca, 0x96, 0x0b, 0x13, 0x57, 0x9f, 0x2a, 0x63, 0x7d, 0x1f, 0x6a, 0xed, 0x68,
	0x70, 0xe9, 0x79, 0x23, 0xb1, 0xfb, 0x6d, 0x58, 0x95, 0xd2, 0xbf, 0x6a, 0x88, 0x91, 0xfe, 0x67,
	0x0d, 0x9a, 0xc2, 0x32, 0x99, 0x8d, 0xf6, 0xa0, 0xd2, 0x8f, 0x06, 0xa6, 0xef, 0x79, 0x23, 0xd3,
	0x75, 0xd8, 0x8c, 0xb5, 0xee, 0x92, 0xb1, 0xde, 0xe7, 0x86, 0xa7, 0x0e, 0xfa, 0x0a, 0x1a, 0x89,
	0x85, 0x12, 0x1d, 0x62, 0xd1, 0x29, 0x6b, 0x77, 0x97, 0x8c, 0x5a, 0x5f, 0x16, 0xb4, 0x1b, 0x50,
	0x53, 0x8a, 0xa9, 0xff, 0xa5, 0x04, 0x15, 0x31, 0x87, 0x81, 0xf7, 0x2e, 0xac, 0x8c, 0x31, 0xb1,
	0x92, 0x64, 0x71, 0xb8, 0x5f, 0xf4, 0x5f, 0x61, 0x9b, 0x9c, 0x61, 0x62, 0x19, 0x4c, 0x8d, 0x1e,
	0x65, 0xfc, 0x28, 0xa0, 0xc8, 0xee, 0xca, 0xa8, 0xbc, 0x96, 0xd0, 0x70, 0x1b, 0xca, 0xbe, 0x17,
	0x10, 0x73, 0x12, 0x8d, 0x19, 0x12, 0x6a, 0xc6, 0x1a, 0x1d, 0x9f, 0x47, 0x63, 0x74, 0x17, 0xea,
	0x01, 0x0e, 0x71, 0xf0, 0x07, 0xec, 0x98, 0xfd, 0x19, 0xc1, 0xa1, 0xc0, 0x78, 0x2d, 0x96, 0xb6,
	0xa9, 0x90, 0x9a, 0x0d, 0xb1, 0xe5, 0x04, 0x9e, 0x37, 0x16, 0x66, 0x1f, 0x70, 0xb3, 0x58, 0x9a,
	0x98, 0x85, 0x43, 0x2b, 0xa0, 0xb0, 0x1b, 0x58, 0x36, 0xf1, 0x82, 0xd6, 0x2a, 0x37, 0x13, 0xd2,
	0x6f, 0x98, 0x10, 0xdd, 0x81, 0xda, 0x5b, 0x6f, 0x62, 0x92, 0x61, 0x80, 0xc3, 0xa1, 0x37, 0x72,
	0x5a, 0x6b, 0xcc, 0xaa, 0xfa, 0xd6, 0x9b, 0x3c, 0x8f, 0x65, 0xe8, 0x00, 0x9a, 0x6f, 0xbd, 0xc1,
	0xc0, 0xb4, 0x47, 0xd8, 0x0a, 0xcc, 0x91, 0x3b, 0x76, 0x49, 0xab, 0xcc, 0xec, 0xea, 0x54, 0x7e,
	0x4c, 0xc5, 0x4f, 0xa9, 0x94, 0x22, 0x74, 0x4c, 0xa2, 0xd6, 0x3a, 0x47, 0xe8, 0x98, 0x44, 0xe8,
	0x0e, 0x94, 0x88, 0x1d, 0xb6, 0x60, 0xaf, 0x54, 0x0c, 0x3f, 0xaa, 0xd5, 0x9f, 0xc0, 0x86, 0x48,
	0x9b, 0x81, 0xa7, 0x11, 0x0e, 0xc9, 0x59, 0xf8, 0x12, 0xdd, 0x83, 0xb5, 0x80, 0x8f, 0x5a, 0x1a,
	0x9b, 0xdd, 0x94, 0xf3, 0xcb, 0x4e, 0x4b, 0x6c, 0xa0, 0x7f, 0x9f, 0xe0, 0xae, 0x47, 0x2c, 0x12,
	0x85, 0xe8, 0x37, 0x79, 0xa0, 0x68, 0xf3, 0x80, 0x92, 0x81, 0x89, 0x3e, 0x81, 0x46, 0x12, 0x4d,
	0xe8, 0x7b, 0x93, 0x10, 0xa3, 0x07, 0x00, 0x96, 0xef, 0x9a, 0x21, 0x73, 0xce, 0x3c, 0xd5, 0x8f,
	0x9a, 0x02, 0x1e, 0x5f, 0xfb, 0x2e, 0x5f, 0xd4, 0x58, 0xb7, 0xe2, 0x9f, 0xe8, 0x1e, 0xac, 0x0a,
	0xe3, 0x02, 0x7c, 0x0a, 0x73, 0x61, 0xa1, 0x7f, 0x03, 0x28, 0xb3, 0x1e, 0xdd, 0xfe, 0x2f, 0xa1,
	0x1c, 0x88, 0xa1, 0xd8, 0xff, 0xa6, 0xec, 0x23, 0x36, 0x35, 0x12, 0x2b, 0xfd, 0x2d, 0x6c, 0x0a,
	0xe5, 0x09, 0x1e, 0x61, 0x82, 0x45, 0x2e, 0xff, 0xf7, 0xa8, 0xd6, 0xcf, 0x61, 0xa7, 0x68, 0x65,
	0xba, 0x8d, 0x87, 0xd9, 0x2a, 0xde, 0x96, 0xfd, 0x29, 0xe6, 0x72, 0x39, 0x5b, 0x19, 0x83, 0x34,
	0x2f, 0xd9, 0x52, 0x94, 0xae, 0x28, 0x85, 0xfe, 0x73, 0xa8, 0x4a, 0x79, 0x0f, 0xd1, 0x47, 0xb0,
	0xee, 0xd9, 0x76, 0xe4, 0x5b, 0x13, 0x7b, 0x26, 0xee, 0xd2, 0x54, 0xa0, 0x47, 0x09, 0x14, 0xbf,
	0xc5, 0xe4, 0xff, 0x97, 0xc1, 0x6e, 0x52, 0xbb, 0x74, 0x59, 0x8e, 0x82, 0x4c, 0xfa, 0xb6, 0x65,
	0x67, 0xa9, 0x6d, 0x9a, 0xbb, 0xbf, 0x69, 0x09, 0x9c, 0x98, 0x5a, 0x20, 0xf8, 0x53, 0x58, 0x61,
	0xf4, 0xc3, 0xb7, 0x90, 0x3f, 0x4a, 0x4c, 0x7b, 0x1d, 0xd8, 0xa2, 0x7d, 0xf8, 0x80, 0xfe, 0x0a,
	0x05, 0xa3, 0x6d, 0x64, 0x4d, 0x43, 0x83, 0xeb, 0xf5, 0xa7, 0xb0, 0x95, 0x0f, 0x88, 0x63, 0x23,
	0x0b, 0xf1, 0x9d, 0xdc, 0xee, 0x72, 0x28, 0xbf, 0x0b, 0x15, 0x46, 0x42, 0x57, 0x10, 0x4c, 0x04,
	0x75, 0x95, 0xab, 0xd0, 0x87, 0x50, 0xe6, 0xd4, 0x26, 0x51, 0xcb, 0x1a, 0x93, 0x9c, 0x3a, 0xe8,
	0x57, 0x50, 0xe5, 0x4a, 0xa5, 0x72, 0xcd, 0x94, 0xf3, 0x12, 0x4e, 0xa9, 0x4c, 0xd3, 0x61, 0x9e,
	0x51, 0x74, 0x28, 0x9f, 0xfc, 0xce, 0x30, 0x4e, 0x27, 0x03, 0x8f, 0x86, 0xf6, 0x06, 0xbb, 0x2f,
	0x87, 0x44, 0xa0, 0x4c, 0x8c, 0xf4, 0x03, 0x40, 0x3d, 0x12, 0xb8, 0x36, 0xb9, 0x0c, 0x5c, 0x2f,
	0x70, 0xc9, 0x8c, 0x59, 0x23, 0x58, 0x09, 0x2c, 0x82, 0x85, 0x2d, 0xfb, 0xad, 0xff, 0x5d, 0x03,
	0xc4, 0x56, 0xef, 0xd9, 0x43, 0xec, 0x44, 0x23, 0x1c, 0x9c, 0x7b, 0x0e, 0x46, 0xbb, 0x50, 0xf6,
	0xc5, 0x54, 0x61, 0x9e, 0x8c, 0xd1, 0x1d, 0x58, 0x71, 0xde, 0x04, 0x81, 0xd8, 0x40, 0x8d, 0x6d,
	0x20, 0x8e, 0xa8, 0xbb, 0x64, 0x30, 0x25, 0x3a, 0xa4, 0x65, 0xa6, 0x11, 0x88, 0xda, 0xf1, 0xb4,
	0xe7, 0x83, 0xea, 0x2e, 0x19, 0xc2, 0xb0, 0x5d, 0x81, 0x75, 0x16, 0xc9, 0xf3, 0x99, 0x8f, 0xf5,
	0x3f, 0x8a, 0x01, 0x0b, 0xfc, 0xcb, 0x2c, 0xea, 0x17, 0x3c, 0xb4, 0x14, 0x2e, 0xfc, 0x02, 0x40,
	0x14, 0x64, 0x32, 0xf0, 0x44, 0xc0, 0x3b, 0xe9, 0x2c, 0x65, 0xcf, 0xc6, 0xfa, 0x34, 0x5e, 0x50,
	0xff, 0x8f, 0x26, 0x96, 0xbf, 0x0e, 0x67, 0xcb, 0xc4, 0xbb, 0xac, 0x12, 0xef, 0x09, 0x34, 0xc3,
	0x78, 0x2d, 0x93, 0xbd, 0xe0, 0x66, 0x2c, 0x2f, 0x75, 0x71, 0x57, 0xa9, 0xd1, 0xb0, 0x47, 0xdf,
	0xcc, 0x68, 0x84, 0xaa, 0x00, 0x7d, 0x06, 0xab, 0x2c, 0x44, 0x4a, 0xdb, 0x14, 0xca, 0xf5, 0x74,
	0x2e, 0x8d, 0xda, 0x10, 0x5a, 0x74, 0x04, 0xe5, 0xd1, 0xa1, 0x39, 0xf1, 0x1c, 0xc6, 0xdc, 0xa5,
	0x45, 0x7b, 0x5e, 0x1b, 0x1d, 0xd2, 0xbf, 0xa1, 0xfe, 0x18, 0x1a, 0x4c, 0x2d, 0x5d, 0x0c, 0x07,
	0xd9, 0x8b, 0x41, 0x5a, 0x4f, 0xe5, 0xc6, 0xb6, 0x38, 0x30, 0x82, 0x99, 0x1e, 0x66, 0x90, 0xae,
	0x15, 0x23, 0x5d, 0xc1, 0xb9, 0xfe, 0x0a, 0x6a, 0x22, 0x80, 0x77, 0x25, 0xc4, 0x03, 0xe9, 0x66,
	0x29, 0xa9, 0x0b, 0x66, 0xe8, 0xb0, 0x0d, 0x4d, 0x65, 0x2d, 0xba, 0xdb, 0xfb, 0xb9, 0x9b, 0x02,
	0xa5, 0xf3, 0x0b, 0x2e, 0x09, 0x22, 0xce, 0xcd, 0x3b, 0x11, 0xe1, 0x97, 0xc5, 0xd7, 0xf8, 0x95,
	0x80, 0xd6, 0xbf, 0x83, 0xad, 0xfc, 0xaa, 0x34, 0xfc, 0xc3, 0x6c, 0xb1, 0xa4, 0x92, 0xcf, 0xa1,
	0xc0, 0x53, 0xd8, 0x56, 0xd4, 0xef, 0x41, 0x80, 0xbf, 0x00, 0x48, 0xf2, 0x1c, 0xa2, 0x4f, 0x80,
	0x57, 0xd6, 0x74, 0xb0, 0x4f, 0x86, 0xe2, 0xfe, 0xe0, 0x07, 0xf1, 0x84, 0x4a, 0xf4, 0xa9, 0x00,
	0xdb, 0xf5, 0xf9, 0xef, 0x9d, 0x13, 0x77, 0x22, 0xca, 0xa5, 0x72, 0xdf, 0xfd, 0x6c, 0xd6, 0x36,
	0x53, 0x47, 0x45, 0xcc, 0xf7, 0xa3, 0x26, 0x90, 0x23, 0xf3, 0x9e, 0xae, 0xf0, 0x5e, 0xf6, 0x90,
	0x70, 0xd6, 0x3b, 0xc8, 0xb0, 0xde, 0x5c, 0x6c, 0xa2, 0xbb, 0x2a, 0xe7, 0x35, 0x54, 0xc3, 0x84,
	0xf1, 0xba, 0x70, 0x2b, 0x1b, 0x08, 0x87, 0x41, 0x16, 0xc5, 0x5b, 0x99, 0x1d, 0xe5, 0x80, 0xbc,
	0x0f, 0x35, 0xd1, 0x65, 0x5e, 0xc1, 0x77, 0x7f, 0xd2, 0xa0, 0x99, 0xed, 0x47, 0xd1, 0x27, 0x00,
	0x71, 0x17, 0x2b, 0xf7, 0x53, 0x42, 0x76, 0xea, 0xa0, 0xc7, 0x50, 0x8f, 0x0d, 0x0a, 0xda, 0x29,
	0x65, 0x65, 0xda, 0x4e, 0xf9, 0xb2, 0x20, 0x4f, 0x7e, 0xff, 0x58, 0x86, 0x8a, 0x98, 0x73, 0x63,
	0xed, 0x54, 0xae, 0xc7, 0x56, 0x28, 0xe4, 0x21, 0xac, 0x3b, 0x6e, 0x80, 0x59, 0xff, 0x2c, 0xee,
	0x6c, 0x65, 0xda, 0x49, 0xac, 0x34, 0x52, 0x3b, 0xfa, 0x00, 0xec, 0x5b, 0x13, 0xe7, 0x8d, 0xeb,
	0x90, 0xa1, 0xe8, 0xb1, 0x52, 0x01, 0xfa, 0x18, 0xa0, 0x1f, 0x05, 0x21, 0x31, 0x43, 0xf7, 0x07,
	0x2c, 0x7a, 0xab, 0x75, 0x26, 0xe9, 0xb9, 0x3f, 0xe4, 0xdb, 0xf9, 0xd5, 0x9f, 0xde, 0xce, 0x3f,
	0x81, 0x0d, 0x11, 0xd6, 0xd5, 0x5d, 0x8e, 0x94, 0xc6, 0x14, 0xe0, 0xdf, 0x25, 0x60, 0x10, 0x97,
	0xea, 0xa3, 0x5c, 0xf9, 0xb4, 0x79, 0xe5, 0xcb, 0x14, 0x8f, 0x36, 0x39, 0x49, 0x30, 0x37, 0xdb,
	0xe4, 0x28, 0x21, 0xca, 0x4d, 0x4e, 0x66, 0xbd, 0x45, 0x4d, 0x4e, 0xc6, 0x54, 0x6d, 0x72, 0xe2,
	0xda, 0xde, 0x78, 0x93, 0xb3, 0x10, 0x6b, 0xb4, 0xc9, 0x29, 0x5a, 0x79, 0x41, 0x93, 0x53, 0x64,
	0xae, 0x34, 0x39, 0x19, 0x83, 0xf7, 0xb8, 0xe3, 0xa3, 0x04, 0x5b, 0x37, 0xdc, 0xb6, 0x2c, 0xce,
	0x49, 0x37, 0xa9, 0xc6, 0x4f, 0x6a, 0x5b, 0x72, 0xb6, 0x69, 0x36, 0xfe, 0xa9, 0x41, 0x55, 0x42,
	0x4e, 0x88, 0x7e, 0x06, 0x1b, 0x3e, 0x0e, 0xc6, 0x2e, 0x21, 0xd8, 0x31, 0x7d, 0xcb, 0x7e, 0x8d,
	0x09, 0x07, 0xe5, 0x8a, 0xd1, 0x4c, 0x14, 0x97, 0x5c, 0x8e, 0xf6, 0xa1, 0x91, 0x1a, 0xf3, 0xaf,
	0x22, 0xcb, 0xcc, 0xb4, 0x9e, 0x88, 0xf9, 0x67, 0x91, 0x7d, 0x68, 0x38, 0x81, 0xe7, 0xfb, 0x92,
	0xcf, 0x12, 0x37, 0x14, 0xe2, 0xd8, 0xe3, 0x1d, 0xa8, 0xc5, 0x86, 0xe9, 0xc7, 0x98, 0x15, 0xa3,
	0x2a, 0x84, 0xcc, 0x1b, 0xeb, 0xb5, 0xe4, 0x3d, 0x2d, 0xe8, 0xb5, 0xe4, 0x03, 0xbd, 0xa8, 0xd7,
	0x2a, 0x3c, 0x3d, 0xc5, 0xbd, 0x96, 0x9c, 0x2e, 0xa9, 0xd7, 0xca, 0x07, 0xb4, 0xa8, 0xd7, 0xca,
	0x5b, 0xa7, 0x87, 0xed, 0xde, 0x2b, 0xd8, 0x2c, 0x7a, 0xfc, 0xa2, 0x5d, 0xd8, 0x7e, 0x7e, 0x66,
	0x3e, 0x7b, 0xd1, 0x79, 0xd1, 0x31, 0x7b, 0xc7, 0xdd, 0xce, 0xc9, 0x8b, 0xa7, 0x1d, 0xc3, 0x3c,
	0x32, 0x3f, 0x6f, 0x2e, 0xcd, 0xd1, 0x7d, 0x6e, 0x1e, 0x35, 0xb5, 0x39, 0xba, 0x5f, 0x9b, 0x87,
	0xcd, 0xe5, 0x7b, 0x8f, 0x13, 0xfe, 0x4a, 0x2e, 0x6d, 0x74, 0x0b, 0x1a, 0xa7, 0xe7, 0xdf, 0x1a,
	0x9d, 0x5e, 0xcf, 0xbc, 0xbc, 0x78, 0x7a, 0x7a, 0xdc, 0x31, 0x9a, 0x4b, 0x08, 0x41, 0xbd, 0xa3,
	0xca, 0xb4, 0xa3, 0x7f, 0xad, 0x42, 0xe9, 0xd9, 0x45, 0x0f, 0xb5, 0x93, 0xef, 0x40, 0xc7, 0x01,
	0xb6, 0x08, 0x46, 0xdb, 0xea, 0x37, 0x93, 0x18, 0xa0, 0xbb, 0x3b, 0x45, 0xdf, 0x52, 0xce, 0xc2,
	0x97, 0xfa, 0x92, 0xe4, 0xe3, 0x85, 0xef, 0xbc, 0xa3, 0x8f, 0xf3, 0xc4, 0x07, 0x3f, 0xdb, 0xe8,
	0xa3, 0xb9, 0x5f, 0x3d, 0xa8, 0xa7, 0x8f, 0x8b, 0xb4, 0xb2, 0xbf, 0x0e, 0x40, 0xda, 0x14, 0xa3,
	0xdb, 0xc5, 0xdf, 0x00, 0xa8, 0xa7, 0xdd, 0x39, 0x0d, 0x34, 0x77, 0xf3, 0x95, 0x68, 0x05, 0x44,
	0x72, 0x36, 0xe5, 0x37, 0x74, 0xe2, 0x62, 0x2b, 0xff, 0xb2, 0x56, 0x67, 0x8b, 0xb4, 0x5c, 0x73,
	0x76, 0x57, 0xcc, 0x16, 0x09, 0xd9, 0x9d, 0xf3, 0x02, 0xa6, 0x3e, 0x3e, 0xcc, 0xeb, 0x64, 0x4f,
	0x4f, 0xa0, 0x1c, 0xbf, 0x98, 0xd0, 0x4e, 0xd1, 0x93, 0x90, 0xfa, 0x68, 0x15, 0xbe, 0xac, 0x92,
	0x0a, 0x0b, 0xa8, 0x29, 0x28, 0xc9, 0x91, 0xf3, 0xee, 0x4e, 0x11, 0x19, 0x65, 0x7d, 0x28, 0x28,
	0xb9, 0x96, 0x8f, 0xf3, 0xc4, 0x87, 0x82, 0x92, 0x39, 0x2c, 0x23, 0x50, 0x32, 0x8f, 0x33, 0x38,
	0x4a, 0xd2, 0xe3, 0x8c, 0x6e, 0x17, 0x5f, 0xb9, 0x29, 0x4a, 0x0a, 0x2f, 0x0a, 0x7d, 0xa9, 0x0d,
	0xbf, 0x2f, 0x0f, 0xad, 0x11, 0xfb, 0x27, 0x4f, 0x7f, 0x95, 0xfd, 0x79, 0xf8, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf6, 0xd1, 0x77, 0x8c, 0x22, 0x1a, 0x00, 0x00,
}
