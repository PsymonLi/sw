// Code generated by MockGen. DO NOT EDIT.
// Source: l4lb.pb.go

package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisL4LbServiceKeyHandle_KeyOrHandle is a mock of isL4LbServiceKeyHandle_KeyOrHandle interface
type MockisL4LbServiceKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder
}

// MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisL4LbServiceKeyHandle_KeyOrHandle
type MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisL4LbServiceKeyHandle_KeyOrHandle
}

// NewMockisL4LbServiceKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisL4LbServiceKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisL4LbServiceKeyHandle_KeyOrHandle {
	mock := &MockisL4LbServiceKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisL4LbServiceKeyHandle_KeyOrHandle) EXPECT() *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder {
	return _m.recorder
}

// isL4LbServiceKeyHandle_KeyOrHandle mocks base method
func (_m *MockisL4LbServiceKeyHandle_KeyOrHandle) isL4LbServiceKeyHandle_KeyOrHandle() {
	_m.ctrl.Call(_m, "isL4LbServiceKeyHandle_KeyOrHandle")
}

// isL4LbServiceKeyHandle_KeyOrHandle indicates an expected call of isL4LbServiceKeyHandle_KeyOrHandle
func (_mr *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder) isL4LbServiceKeyHandle_KeyOrHandle() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isL4LbServiceKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisL4LbServiceKeyHandle_KeyOrHandle)(nil).isL4LbServiceKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (_m *MockisL4LbServiceKeyHandle_KeyOrHandle) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisL4LbServiceKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisL4LbServiceKeyHandle_KeyOrHandle) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisL4LbServiceKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisL4LbBackendKeyHandle_KeyOrHandle is a mock of isL4LbBackendKeyHandle_KeyOrHandle interface
type MockisL4LbBackendKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder
}

// MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisL4LbBackendKeyHandle_KeyOrHandle
type MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisL4LbBackendKeyHandle_KeyOrHandle
}

// NewMockisL4LbBackendKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisL4LbBackendKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisL4LbBackendKeyHandle_KeyOrHandle {
	mock := &MockisL4LbBackendKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisL4LbBackendKeyHandle_KeyOrHandle) EXPECT() *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder {
	return _m.recorder
}

// isL4LbBackendKeyHandle_KeyOrHandle mocks base method
func (_m *MockisL4LbBackendKeyHandle_KeyOrHandle) isL4LbBackendKeyHandle_KeyOrHandle() {
	_m.ctrl.Call(_m, "isL4LbBackendKeyHandle_KeyOrHandle")
}

// isL4LbBackendKeyHandle_KeyOrHandle indicates an expected call of isL4LbBackendKeyHandle_KeyOrHandle
func (_mr *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder) isL4LbBackendKeyHandle_KeyOrHandle() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isL4LbBackendKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisL4LbBackendKeyHandle_KeyOrHandle)(nil).isL4LbBackendKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (_m *MockisL4LbBackendKeyHandle_KeyOrHandle) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisL4LbBackendKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisL4LbBackendKeyHandle_KeyOrHandle) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisL4LbBackendKeyHandle_KeyOrHandle)(nil).Size))
}

// MockL4LbClient is a mock of L4LbClient interface
type MockL4LbClient struct {
	ctrl     *gomock.Controller
	recorder *MockL4LbClientMockRecorder
}

// MockL4LbClientMockRecorder is the mock recorder for MockL4LbClient
type MockL4LbClientMockRecorder struct {
	mock *MockL4LbClient
}

// NewMockL4LbClient creates a new mock instance
func NewMockL4LbClient(ctrl *gomock.Controller) *MockL4LbClient {
	mock := &MockL4LbClient{ctrl: ctrl}
	mock.recorder = &MockL4LbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockL4LbClient) EXPECT() *MockL4LbClientMockRecorder {
	return _m.recorder
}

// L4LbServiceCreate mocks base method
func (_m *MockL4LbClient) L4LbServiceCreate(ctx context.Context, in *L4LbServiceRequestMsg, opts ...grpc.CallOption) (*L4LbServiceResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "L4LbServiceCreate", _s...)
	ret0, _ := ret[0].(*L4LbServiceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceCreate indicates an expected call of L4LbServiceCreate
func (_mr *MockL4LbClientMockRecorder) L4LbServiceCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbServiceCreate", reflect.TypeOf((*MockL4LbClient)(nil).L4LbServiceCreate), _s...)
}

// L4LbServiceUpdate mocks base method
func (_m *MockL4LbClient) L4LbServiceUpdate(ctx context.Context, in *L4LbServiceRequestMsg, opts ...grpc.CallOption) (*L4LbServiceResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "L4LbServiceUpdate", _s...)
	ret0, _ := ret[0].(*L4LbServiceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceUpdate indicates an expected call of L4LbServiceUpdate
func (_mr *MockL4LbClientMockRecorder) L4LbServiceUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbServiceUpdate", reflect.TypeOf((*MockL4LbClient)(nil).L4LbServiceUpdate), _s...)
}

// L4LbServiceDelete mocks base method
func (_m *MockL4LbClient) L4LbServiceDelete(ctx context.Context, in *L4LbServiceDeleteRequestMsg, opts ...grpc.CallOption) (*L4LbServiceDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "L4LbServiceDelete", _s...)
	ret0, _ := ret[0].(*L4LbServiceDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceDelete indicates an expected call of L4LbServiceDelete
func (_mr *MockL4LbClientMockRecorder) L4LbServiceDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbServiceDelete", reflect.TypeOf((*MockL4LbClient)(nil).L4LbServiceDelete), _s...)
}

// L4LbServiceGet mocks base method
func (_m *MockL4LbClient) L4LbServiceGet(ctx context.Context, in *L4LbServiceGetRequestMsg, opts ...grpc.CallOption) (*L4LbServiceGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "L4LbServiceGet", _s...)
	ret0, _ := ret[0].(*L4LbServiceGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceGet indicates an expected call of L4LbServiceGet
func (_mr *MockL4LbClientMockRecorder) L4LbServiceGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbServiceGet", reflect.TypeOf((*MockL4LbClient)(nil).L4LbServiceGet), _s...)
}

// L4LbBackendCreate mocks base method
func (_m *MockL4LbClient) L4LbBackendCreate(ctx context.Context, in *L4LbBackendRequestMsg, opts ...grpc.CallOption) (*L4LbBackendResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "L4LbBackendCreate", _s...)
	ret0, _ := ret[0].(*L4LbBackendResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbBackendCreate indicates an expected call of L4LbBackendCreate
func (_mr *MockL4LbClientMockRecorder) L4LbBackendCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbBackendCreate", reflect.TypeOf((*MockL4LbClient)(nil).L4LbBackendCreate), _s...)
}

// L4LbBackendUpdate mocks base method
func (_m *MockL4LbClient) L4LbBackendUpdate(ctx context.Context, in *L4LbBackendRequestMsg, opts ...grpc.CallOption) (*L4LbBackendResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "L4LbBackendUpdate", _s...)
	ret0, _ := ret[0].(*L4LbBackendResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbBackendUpdate indicates an expected call of L4LbBackendUpdate
func (_mr *MockL4LbClientMockRecorder) L4LbBackendUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbBackendUpdate", reflect.TypeOf((*MockL4LbClient)(nil).L4LbBackendUpdate), _s...)
}

// L4LbBackendDelete mocks base method
func (_m *MockL4LbClient) L4LbBackendDelete(ctx context.Context, in *L4LbBackendDeleteRequestMsg, opts ...grpc.CallOption) (*L4LbBackendDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "L4LbBackendDelete", _s...)
	ret0, _ := ret[0].(*L4LbBackendDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbBackendDelete indicates an expected call of L4LbBackendDelete
func (_mr *MockL4LbClientMockRecorder) L4LbBackendDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbBackendDelete", reflect.TypeOf((*MockL4LbClient)(nil).L4LbBackendDelete), _s...)
}

// L4LbBackendGet mocks base method
func (_m *MockL4LbClient) L4LbBackendGet(ctx context.Context, in *L4LbBackendGetRequestMsg, opts ...grpc.CallOption) (*L4LbBackendGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "L4LbBackendGet", _s...)
	ret0, _ := ret[0].(*L4LbBackendGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbBackendGet indicates an expected call of L4LbBackendGet
func (_mr *MockL4LbClientMockRecorder) L4LbBackendGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbBackendGet", reflect.TypeOf((*MockL4LbClient)(nil).L4LbBackendGet), _s...)
}

// MockL4LbServer is a mock of L4LbServer interface
type MockL4LbServer struct {
	ctrl     *gomock.Controller
	recorder *MockL4LbServerMockRecorder
}

// MockL4LbServerMockRecorder is the mock recorder for MockL4LbServer
type MockL4LbServerMockRecorder struct {
	mock *MockL4LbServer
}

// NewMockL4LbServer creates a new mock instance
func NewMockL4LbServer(ctrl *gomock.Controller) *MockL4LbServer {
	mock := &MockL4LbServer{ctrl: ctrl}
	mock.recorder = &MockL4LbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockL4LbServer) EXPECT() *MockL4LbServerMockRecorder {
	return _m.recorder
}

// L4LbServiceCreate mocks base method
func (_m *MockL4LbServer) L4LbServiceCreate(_param0 context.Context, _param1 *L4LbServiceRequestMsg) (*L4LbServiceResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "L4LbServiceCreate", _param0, _param1)
	ret0, _ := ret[0].(*L4LbServiceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceCreate indicates an expected call of L4LbServiceCreate
func (_mr *MockL4LbServerMockRecorder) L4LbServiceCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbServiceCreate", reflect.TypeOf((*MockL4LbServer)(nil).L4LbServiceCreate), arg0, arg1)
}

// L4LbServiceUpdate mocks base method
func (_m *MockL4LbServer) L4LbServiceUpdate(_param0 context.Context, _param1 *L4LbServiceRequestMsg) (*L4LbServiceResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "L4LbServiceUpdate", _param0, _param1)
	ret0, _ := ret[0].(*L4LbServiceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceUpdate indicates an expected call of L4LbServiceUpdate
func (_mr *MockL4LbServerMockRecorder) L4LbServiceUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbServiceUpdate", reflect.TypeOf((*MockL4LbServer)(nil).L4LbServiceUpdate), arg0, arg1)
}

// L4LbServiceDelete mocks base method
func (_m *MockL4LbServer) L4LbServiceDelete(_param0 context.Context, _param1 *L4LbServiceDeleteRequestMsg) (*L4LbServiceDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "L4LbServiceDelete", _param0, _param1)
	ret0, _ := ret[0].(*L4LbServiceDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceDelete indicates an expected call of L4LbServiceDelete
func (_mr *MockL4LbServerMockRecorder) L4LbServiceDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbServiceDelete", reflect.TypeOf((*MockL4LbServer)(nil).L4LbServiceDelete), arg0, arg1)
}

// L4LbServiceGet mocks base method
func (_m *MockL4LbServer) L4LbServiceGet(_param0 context.Context, _param1 *L4LbServiceGetRequestMsg) (*L4LbServiceGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "L4LbServiceGet", _param0, _param1)
	ret0, _ := ret[0].(*L4LbServiceGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceGet indicates an expected call of L4LbServiceGet
func (_mr *MockL4LbServerMockRecorder) L4LbServiceGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbServiceGet", reflect.TypeOf((*MockL4LbServer)(nil).L4LbServiceGet), arg0, arg1)
}

// L4LbBackendCreate mocks base method
func (_m *MockL4LbServer) L4LbBackendCreate(_param0 context.Context, _param1 *L4LbBackendRequestMsg) (*L4LbBackendResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "L4LbBackendCreate", _param0, _param1)
	ret0, _ := ret[0].(*L4LbBackendResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbBackendCreate indicates an expected call of L4LbBackendCreate
func (_mr *MockL4LbServerMockRecorder) L4LbBackendCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbBackendCreate", reflect.TypeOf((*MockL4LbServer)(nil).L4LbBackendCreate), arg0, arg1)
}

// L4LbBackendUpdate mocks base method
func (_m *MockL4LbServer) L4LbBackendUpdate(_param0 context.Context, _param1 *L4LbBackendRequestMsg) (*L4LbBackendResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "L4LbBackendUpdate", _param0, _param1)
	ret0, _ := ret[0].(*L4LbBackendResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbBackendUpdate indicates an expected call of L4LbBackendUpdate
func (_mr *MockL4LbServerMockRecorder) L4LbBackendUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbBackendUpdate", reflect.TypeOf((*MockL4LbServer)(nil).L4LbBackendUpdate), arg0, arg1)
}

// L4LbBackendDelete mocks base method
func (_m *MockL4LbServer) L4LbBackendDelete(_param0 context.Context, _param1 *L4LbBackendDeleteRequestMsg) (*L4LbBackendDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "L4LbBackendDelete", _param0, _param1)
	ret0, _ := ret[0].(*L4LbBackendDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbBackendDelete indicates an expected call of L4LbBackendDelete
func (_mr *MockL4LbServerMockRecorder) L4LbBackendDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbBackendDelete", reflect.TypeOf((*MockL4LbServer)(nil).L4LbBackendDelete), arg0, arg1)
}

// L4LbBackendGet mocks base method
func (_m *MockL4LbServer) L4LbBackendGet(_param0 context.Context, _param1 *L4LbBackendGetRequestMsg) (*L4LbBackendGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "L4LbBackendGet", _param0, _param1)
	ret0, _ := ret[0].(*L4LbBackendGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbBackendGet indicates an expected call of L4LbBackendGet
func (_mr *MockL4LbServerMockRecorder) L4LbBackendGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "L4LbBackendGet", reflect.TypeOf((*MockL4LbServer)(nil).L4LbBackendGet), arg0, arg1)
}
