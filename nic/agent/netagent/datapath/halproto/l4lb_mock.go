// Code generated by MockGen. DO NOT EDIT.
// Source: l4lb.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisL4LbServiceKeyHandle_KeyOrHandle is a mock of isL4LbServiceKeyHandle_KeyOrHandle interface
type MockisL4LbServiceKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder
}

// MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisL4LbServiceKeyHandle_KeyOrHandle
type MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisL4LbServiceKeyHandle_KeyOrHandle
}

// NewMockisL4LbServiceKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisL4LbServiceKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisL4LbServiceKeyHandle_KeyOrHandle {
	mock := &MockisL4LbServiceKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisL4LbServiceKeyHandle_KeyOrHandle) EXPECT() *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isL4LbServiceKeyHandle_KeyOrHandle mocks base method
func (m *MockisL4LbServiceKeyHandle_KeyOrHandle) isL4LbServiceKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isL4LbServiceKeyHandle_KeyOrHandle")
}

// isL4LbServiceKeyHandle_KeyOrHandle indicates an expected call of isL4LbServiceKeyHandle_KeyOrHandle
func (mr *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder) isL4LbServiceKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isL4LbServiceKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisL4LbServiceKeyHandle_KeyOrHandle)(nil).isL4LbServiceKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisL4LbServiceKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisL4LbServiceKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisL4LbServiceKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisL4LbServiceKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisL4LbServiceKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisL4LbBackendKeyHandle_KeyOrHandle is a mock of isL4LbBackendKeyHandle_KeyOrHandle interface
type MockisL4LbBackendKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder
}

// MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisL4LbBackendKeyHandle_KeyOrHandle
type MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisL4LbBackendKeyHandle_KeyOrHandle
}

// NewMockisL4LbBackendKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisL4LbBackendKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisL4LbBackendKeyHandle_KeyOrHandle {
	mock := &MockisL4LbBackendKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisL4LbBackendKeyHandle_KeyOrHandle) EXPECT() *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isL4LbBackendKeyHandle_KeyOrHandle mocks base method
func (m *MockisL4LbBackendKeyHandle_KeyOrHandle) isL4LbBackendKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isL4LbBackendKeyHandle_KeyOrHandle")
}

// isL4LbBackendKeyHandle_KeyOrHandle indicates an expected call of isL4LbBackendKeyHandle_KeyOrHandle
func (mr *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder) isL4LbBackendKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isL4LbBackendKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisL4LbBackendKeyHandle_KeyOrHandle)(nil).isL4LbBackendKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisL4LbBackendKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisL4LbBackendKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisL4LbBackendKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisL4LbBackendKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisL4LbBackendKeyHandle_KeyOrHandle)(nil).Size))
}

// MockL4LbClient is a mock of L4LbClient interface
type MockL4LbClient struct {
	ctrl     *gomock.Controller
	recorder *MockL4LbClientMockRecorder
}

// MockL4LbClientMockRecorder is the mock recorder for MockL4LbClient
type MockL4LbClientMockRecorder struct {
	mock *MockL4LbClient
}

// NewMockL4LbClient creates a new mock instance
func NewMockL4LbClient(ctrl *gomock.Controller) *MockL4LbClient {
	mock := &MockL4LbClient{ctrl: ctrl}
	mock.recorder = &MockL4LbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockL4LbClient) EXPECT() *MockL4LbClientMockRecorder {
	return m.recorder
}

// L4LbServiceCreate mocks base method
func (m *MockL4LbClient) L4LbServiceCreate(ctx context.Context, in *L4LbServiceRequestMsg, opts ...grpc.CallOption) (*L4LbServiceResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "L4LbServiceCreate", varargs...)
	ret0, _ := ret[0].(*L4LbServiceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceCreate indicates an expected call of L4LbServiceCreate
func (mr *MockL4LbClientMockRecorder) L4LbServiceCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L4LbServiceCreate", reflect.TypeOf((*MockL4LbClient)(nil).L4LbServiceCreate), varargs...)
}

// MockL4LbServer is a mock of L4LbServer interface
type MockL4LbServer struct {
	ctrl     *gomock.Controller
	recorder *MockL4LbServerMockRecorder
}

// MockL4LbServerMockRecorder is the mock recorder for MockL4LbServer
type MockL4LbServerMockRecorder struct {
	mock *MockL4LbServer
}

// NewMockL4LbServer creates a new mock instance
func NewMockL4LbServer(ctrl *gomock.Controller) *MockL4LbServer {
	mock := &MockL4LbServer{ctrl: ctrl}
	mock.recorder = &MockL4LbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockL4LbServer) EXPECT() *MockL4LbServerMockRecorder {
	return m.recorder
}

// L4LbServiceCreate mocks base method
func (m *MockL4LbServer) L4LbServiceCreate(arg0 context.Context, arg1 *L4LbServiceRequestMsg) (*L4LbServiceResponseMsg, error) {
	ret := m.ctrl.Call(m, "L4LbServiceCreate", arg0, arg1)
	ret0, _ := ret[0].(*L4LbServiceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// L4LbServiceCreate indicates an expected call of L4LbServiceCreate
func (mr *MockL4LbServerMockRecorder) L4LbServiceCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L4LbServiceCreate", reflect.TypeOf((*MockL4LbServer)(nil).L4LbServiceCreate), arg0, arg1)
}
