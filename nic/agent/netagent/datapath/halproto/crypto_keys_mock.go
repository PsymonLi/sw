// Code generated by MockGen. DO NOT EDIT.
// Source: crypto_keys.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockCryptoKeyClient is a mock of CryptoKeyClient interface
type MockCryptoKeyClient struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoKeyClientMockRecorder
}

// MockCryptoKeyClientMockRecorder is the mock recorder for MockCryptoKeyClient
type MockCryptoKeyClientMockRecorder struct {
	mock *MockCryptoKeyClient
}

// NewMockCryptoKeyClient creates a new mock instance
func NewMockCryptoKeyClient(ctrl *gomock.Controller) *MockCryptoKeyClient {
	mock := &MockCryptoKeyClient{ctrl: ctrl}
	mock.recorder = &MockCryptoKeyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCryptoKeyClient) EXPECT() *MockCryptoKeyClientMockRecorder {
	return m.recorder
}

// CryptoKeyCreate mocks base method
func (m *MockCryptoKeyClient) CryptoKeyCreate(ctx context.Context, in *CryptoKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoKeyCreate", varargs...)
	ret0, _ := ret[0].(*CryptoKeyCreateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyCreate indicates an expected call of CryptoKeyCreate
func (mr *MockCryptoKeyClientMockRecorder) CryptoKeyCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyCreate", reflect.TypeOf((*MockCryptoKeyClient)(nil).CryptoKeyCreate), varargs...)
}

// CryptoKeyRead mocks base method
func (m *MockCryptoKeyClient) CryptoKeyRead(ctx context.Context, in *CryptoKeyReadRequestMsg, opts ...grpc.CallOption) (*CryptoKeyReadResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoKeyRead", varargs...)
	ret0, _ := ret[0].(*CryptoKeyReadResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyRead indicates an expected call of CryptoKeyRead
func (mr *MockCryptoKeyClientMockRecorder) CryptoKeyRead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyRead", reflect.TypeOf((*MockCryptoKeyClient)(nil).CryptoKeyRead), varargs...)
}

// CryptoKeyUpdate mocks base method
func (m *MockCryptoKeyClient) CryptoKeyUpdate(ctx context.Context, in *CryptoKeyUpdateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyUpdateResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoKeyUpdate", varargs...)
	ret0, _ := ret[0].(*CryptoKeyUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyUpdate indicates an expected call of CryptoKeyUpdate
func (mr *MockCryptoKeyClientMockRecorder) CryptoKeyUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyUpdate", reflect.TypeOf((*MockCryptoKeyClient)(nil).CryptoKeyUpdate), varargs...)
}

// CryptoKeyDelete mocks base method
func (m *MockCryptoKeyClient) CryptoKeyDelete(ctx context.Context, in *CryptoKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoKeyDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoKeyDelete", varargs...)
	ret0, _ := ret[0].(*CryptoKeyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyDelete indicates an expected call of CryptoKeyDelete
func (mr *MockCryptoKeyClientMockRecorder) CryptoKeyDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyDelete", reflect.TypeOf((*MockCryptoKeyClient)(nil).CryptoKeyDelete), varargs...)
}

// MockCryptoKeyServer is a mock of CryptoKeyServer interface
type MockCryptoKeyServer struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoKeyServerMockRecorder
}

// MockCryptoKeyServerMockRecorder is the mock recorder for MockCryptoKeyServer
type MockCryptoKeyServerMockRecorder struct {
	mock *MockCryptoKeyServer
}

// NewMockCryptoKeyServer creates a new mock instance
func NewMockCryptoKeyServer(ctrl *gomock.Controller) *MockCryptoKeyServer {
	mock := &MockCryptoKeyServer{ctrl: ctrl}
	mock.recorder = &MockCryptoKeyServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCryptoKeyServer) EXPECT() *MockCryptoKeyServerMockRecorder {
	return m.recorder
}

// CryptoKeyCreate mocks base method
func (m *MockCryptoKeyServer) CryptoKeyCreate(arg0 context.Context, arg1 *CryptoKeyCreateRequestMsg) (*CryptoKeyCreateResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoKeyCreate", arg0, arg1)
	ret0, _ := ret[0].(*CryptoKeyCreateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyCreate indicates an expected call of CryptoKeyCreate
func (mr *MockCryptoKeyServerMockRecorder) CryptoKeyCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyCreate", reflect.TypeOf((*MockCryptoKeyServer)(nil).CryptoKeyCreate), arg0, arg1)
}

// CryptoKeyRead mocks base method
func (m *MockCryptoKeyServer) CryptoKeyRead(arg0 context.Context, arg1 *CryptoKeyReadRequestMsg) (*CryptoKeyReadResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoKeyRead", arg0, arg1)
	ret0, _ := ret[0].(*CryptoKeyReadResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyRead indicates an expected call of CryptoKeyRead
func (mr *MockCryptoKeyServerMockRecorder) CryptoKeyRead(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyRead", reflect.TypeOf((*MockCryptoKeyServer)(nil).CryptoKeyRead), arg0, arg1)
}

// CryptoKeyUpdate mocks base method
func (m *MockCryptoKeyServer) CryptoKeyUpdate(arg0 context.Context, arg1 *CryptoKeyUpdateRequestMsg) (*CryptoKeyUpdateResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoKeyUpdate", arg0, arg1)
	ret0, _ := ret[0].(*CryptoKeyUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyUpdate indicates an expected call of CryptoKeyUpdate
func (mr *MockCryptoKeyServerMockRecorder) CryptoKeyUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyUpdate", reflect.TypeOf((*MockCryptoKeyServer)(nil).CryptoKeyUpdate), arg0, arg1)
}

// CryptoKeyDelete mocks base method
func (m *MockCryptoKeyServer) CryptoKeyDelete(arg0 context.Context, arg1 *CryptoKeyDeleteRequestMsg) (*CryptoKeyDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoKeyDelete", arg0, arg1)
	ret0, _ := ret[0].(*CryptoKeyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyDelete indicates an expected call of CryptoKeyDelete
func (mr *MockCryptoKeyServerMockRecorder) CryptoKeyDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyDelete", reflect.TypeOf((*MockCryptoKeyServer)(nil).CryptoKeyDelete), arg0, arg1)
}
