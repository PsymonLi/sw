// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/interface.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IfStatus status reflects the current status of Interface
type IfStatus int32

const (
	IfStatus_IF_STATUS_NONE IfStatus = 0
	IfStatus_IF_STATUS_UP   IfStatus = 1
	IfStatus_IF_STATUS_DOWN IfStatus = 2
)

var IfStatus_name = map[int32]string{
	0: "IF_STATUS_NONE",
	1: "IF_STATUS_UP",
	2: "IF_STATUS_DOWN",
}
var IfStatus_value = map[string]int32{
	"IF_STATUS_NONE": 0,
	"IF_STATUS_UP":   1,
	"IF_STATUS_DOWN": 2,
}

func (x IfStatus) String() string {
	return proto.EnumName(IfStatus_name, int32(x))
}
func (IfStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

// Types of LIF ports
type LifPortType int32

const (
	LifPortType_LIF_PORT_TYPE_NONE       LifPortType = 0
	LifPortType_LIF_PORT_TYPE_DMA        LifPortType = 1
	LifPortType_LIF_PORT_TYPE_P4_INGRESS LifPortType = 2
	LifPortType_LIF_PORT_TYPE_P4_EGRESS  LifPortType = 3
	LifPortType_LIF_PORT_TYPE_NCSI       LifPortType = 4
)

var LifPortType_name = map[int32]string{
	0: "LIF_PORT_TYPE_NONE",
	1: "LIF_PORT_TYPE_DMA",
	2: "LIF_PORT_TYPE_P4_INGRESS",
	3: "LIF_PORT_TYPE_P4_EGRESS",
	4: "LIF_PORT_TYPE_NCSI",
}
var LifPortType_value = map[string]int32{
	"LIF_PORT_TYPE_NONE":       0,
	"LIF_PORT_TYPE_DMA":        1,
	"LIF_PORT_TYPE_P4_INGRESS": 2,
	"LIF_PORT_TYPE_P4_EGRESS":  3,
	"LIF_PORT_TYPE_NCSI":       4,
}

func (x LifPortType) String() string {
	return proto.EnumName(LifPortType_name, int32(x))
}
func (LifPortType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

// Different purposes of LIF queues. This is not the same as
// Queue type (type_num field in LifQStateMapEntry). This is
// application (e.g. TCP, RDMA, Storage) specific and is specified
// on a per LIF per Queue Type bases. In other words, for one LIF
// type 0 can be TX Queue and for another LIF type 0 can be RX Queue.
type LifQPurpose int32

const (
	LifQPurpose_LIF_QUEUE_PURPOSE_NONE      LifQPurpose = 0
	LifQPurpose_LIF_QUEUE_PURPOSE_ADMIN     LifQPurpose = 1
	LifQPurpose_LIF_QUEUE_PURPOSE_TX        LifQPurpose = 2
	LifQPurpose_LIF_QUEUE_PURPOSE_RX        LifQPurpose = 3
	LifQPurpose_LIF_QUEUE_PURPOSE_RDMA_SEND LifQPurpose = 4
	LifQPurpose_LIF_QUEUE_PURPOSE_RDMA_RECV LifQPurpose = 5
	LifQPurpose_LIF_QUEUE_PURPOSE_CQ        LifQPurpose = 6
	LifQPurpose_LIF_QUEUE_PURPOSE_EQ        LifQPurpose = 7
	LifQPurpose_LIF_QUEUE_PURPOSE_NVME      LifQPurpose = 8
	LifQPurpose_LIF_QUEUE_PURPOSE_STORAGE   LifQPurpose = 9
)

var LifQPurpose_name = map[int32]string{
	0: "LIF_QUEUE_PURPOSE_NONE",
	1: "LIF_QUEUE_PURPOSE_ADMIN",
	2: "LIF_QUEUE_PURPOSE_TX",
	3: "LIF_QUEUE_PURPOSE_RX",
	4: "LIF_QUEUE_PURPOSE_RDMA_SEND",
	5: "LIF_QUEUE_PURPOSE_RDMA_RECV",
	6: "LIF_QUEUE_PURPOSE_CQ",
	7: "LIF_QUEUE_PURPOSE_EQ",
	8: "LIF_QUEUE_PURPOSE_NVME",
	9: "LIF_QUEUE_PURPOSE_STORAGE",
}
var LifQPurpose_value = map[string]int32{
	"LIF_QUEUE_PURPOSE_NONE":      0,
	"LIF_QUEUE_PURPOSE_ADMIN":     1,
	"LIF_QUEUE_PURPOSE_TX":        2,
	"LIF_QUEUE_PURPOSE_RX":        3,
	"LIF_QUEUE_PURPOSE_RDMA_SEND": 4,
	"LIF_QUEUE_PURPOSE_RDMA_RECV": 5,
	"LIF_QUEUE_PURPOSE_CQ":        6,
	"LIF_QUEUE_PURPOSE_EQ":        7,
	"LIF_QUEUE_PURPOSE_NVME":      8,
	"LIF_QUEUE_PURPOSE_STORAGE":   9,
}

func (x LifQPurpose) String() string {
	return proto.EnumName(LifQPurpose_name, int32(x))
}
func (LifQPurpose) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

// types of interfaces
type IfType int32

const (
	IfType_IF_TYPE_NONE      IfType = 0
	IfType_IF_TYPE_ENIC      IfType = 1
	IfType_IF_TYPE_UPLINK    IfType = 2
	IfType_IF_TYPE_UPLINK_PC IfType = 3
	IfType_IF_TYPE_TUNNEL    IfType = 4
	IfType_IF_TYPE_CPU       IfType = 5
)

var IfType_name = map[int32]string{
	0: "IF_TYPE_NONE",
	1: "IF_TYPE_ENIC",
	2: "IF_TYPE_UPLINK",
	3: "IF_TYPE_UPLINK_PC",
	4: "IF_TYPE_TUNNEL",
	5: "IF_TYPE_CPU",
}
var IfType_value = map[string]int32{
	"IF_TYPE_NONE":      0,
	"IF_TYPE_ENIC":      1,
	"IF_TYPE_UPLINK":    2,
	"IF_TYPE_UPLINK_PC": 3,
	"IF_TYPE_TUNNEL":    4,
	"IF_TYPE_CPU":       5,
}

func (x IfType) String() string {
	return proto.EnumName(IfType_name, int32(x))
}
func (IfType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_ENIC, one of the following vnic types must be
// set. IF_ENIC_TYPE_XXX identifies how a workload is attached to asic
// ------------------------------------------------------------------------------
type IfEnicType int32

const (
	IfEnicType_IF_ENIC_TYPE_NONE   IfEnicType = 0
	IfEnicType_IF_ENIC_TYPE_USEG   IfEnicType = 1
	IfEnicType_IF_ENIC_TYPE_PVLAN  IfEnicType = 2
	IfEnicType_IF_ENIC_TYPE_DIRECT IfEnicType = 3
)

var IfEnicType_name = map[int32]string{
	0: "IF_ENIC_TYPE_NONE",
	1: "IF_ENIC_TYPE_USEG",
	2: "IF_ENIC_TYPE_PVLAN",
	3: "IF_ENIC_TYPE_DIRECT",
}
var IfEnicType_value = map[string]int32{
	"IF_ENIC_TYPE_NONE":   0,
	"IF_ENIC_TYPE_USEG":   1,
	"IF_ENIC_TYPE_PVLAN":  2,
	"IF_ENIC_TYPE_DIRECT": 3,
}

func (x IfEnicType) String() string {
	return proto.EnumName(IfEnicType_name, int32(x))
}
func (IfEnicType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_TUNNEL, one of the following encap types must be
// set.
// ------------------------------------------------------------------------------
type IfTunnelEncapType int32

const (
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE  IfTunnelEncapType = 0
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_VXLAN IfTunnelEncapType = 1
)

var IfTunnelEncapType_name = map[int32]string{
	0: "IF_TUNNEL_ENCAP_TYPE_NONE",
	1: "IF_TUNNEL_ENCAP_TYPE_VXLAN",
}
var IfTunnelEncapType_value = map[string]int32{
	"IF_TUNNEL_ENCAP_TYPE_NONE":  0,
	"IF_TUNNEL_ENCAP_TYPE_VXLAN": 1,
}

func (x IfTunnelEncapType) String() string {
	return proto.EnumName(IfTunnelEncapType_name, int32(x))
}
func (IfTunnelEncapType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

// A single entry in the LIF to Qstate map.
// This entry represents a single type.
// Everything except type puspose is used by the hardware.
type LifQStateMapEntry struct {
	// type_num is the type as defined by Capri hardware in the
	// LIF -> Qstate array entry. There are 8 types numbered 0-7.
	// There can be at most one entry per type_num.
	// TODO: How does a user know what number to use here unless
	//       it is enumerated or purpose is clear ???
	TypeNum uint32 `protobuf:"varint,1,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	// This entry represents the size of the Q state
	// used by this type. This number represents the size
	// as 2^(5+size). e.g. for a size of 64, the size field
	// would be 1 i.e. 2^(5+1) = 64.
	// Max value for size today is 7 i.e. 4096 bytes.
	Size uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	// entries field represent number of queues as a
	// power of 2. So a value of 3 means 8 queues.
	// Max value for entries today is 24 i.e. 16M queues.
	Entries uint32 `protobuf:"varint,3,opt,name=entries" json:"entries,omitempty"`
	// Queue purpose is not needed by the hardware. It is used
	// internally by the HAL/FTE.
	Purpose LifQPurpose `protobuf:"varint,4,opt,name=purpose,enum=intf.LifQPurpose" json:"purpose,omitempty"`
}

func (m *LifQStateMapEntry) Reset()                    { *m = LifQStateMapEntry{} }
func (m *LifQStateMapEntry) String() string            { return proto.CompactTextString(m) }
func (*LifQStateMapEntry) ProtoMessage()               {}
func (*LifQStateMapEntry) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *LifQStateMapEntry) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *LifQStateMapEntry) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *LifQStateMapEntry) GetEntries() uint32 {
	if m != nil {
		return m.Entries
	}
	return 0
}

func (m *LifQStateMapEntry) GetPurpose() LifQPurpose {
	if m != nil {
		return m.Purpose
	}
	return LifQPurpose_LIF_QUEUE_PURPOSE_NONE
}

// LifKeyHandle uniquely identifies a LIF
type LifKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*LifKeyHandle_LifId
	//	*LifKeyHandle_LifHandle
	KeyOrHandle isLifKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *LifKeyHandle) Reset()                    { *m = LifKeyHandle{} }
func (m *LifKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*LifKeyHandle) ProtoMessage()               {}
func (*LifKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type isLifKeyHandle_KeyOrHandle interface {
	isLifKeyHandle_KeyOrHandle()
}

type LifKeyHandle_LifId struct {
	LifId uint32 `protobuf:"fixed32,1,opt,name=lif_id,json=lifId,oneof"`
}
type LifKeyHandle_LifHandle struct {
	LifHandle uint64 `protobuf:"fixed64,2,opt,name=lif_handle,json=lifHandle,oneof"`
}

func (*LifKeyHandle_LifId) isLifKeyHandle_KeyOrHandle()     {}
func (*LifKeyHandle_LifHandle) isLifKeyHandle_KeyOrHandle() {}

func (m *LifKeyHandle) GetKeyOrHandle() isLifKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifKeyHandle) GetLifId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*LifKeyHandle_LifId); ok {
		return x.LifId
	}
	return 0
}

func (m *LifKeyHandle) GetLifHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*LifKeyHandle_LifHandle); ok {
		return x.LifHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LifKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LifKeyHandle_OneofMarshaler, _LifKeyHandle_OneofUnmarshaler, _LifKeyHandle_OneofSizer, []interface{}{
		(*LifKeyHandle_LifId)(nil),
		(*LifKeyHandle_LifHandle)(nil),
	}
}

func _LifKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LifKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *LifKeyHandle_LifId:
		b.EncodeVarint(1<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(x.LifId))
	case *LifKeyHandle_LifHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.LifHandle))
	case nil:
	default:
		return fmt.Errorf("LifKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _LifKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LifKeyHandle)
	switch tag {
	case 1: // key_or_handle.lif_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.KeyOrHandle = &LifKeyHandle_LifId{uint32(x)}
		return true, err
	case 2: // key_or_handle.lif_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &LifKeyHandle_LifHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _LifKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LifKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *LifKeyHandle_LifId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *LifKeyHandle_LifHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// LIF object
type LifSpec struct {
	Meta         *ObjectMeta          `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle  *LifKeyHandle        `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	MacAddr      uint64               `protobuf:"varint,3,opt,name=mac_addr,json=macAddr" json:"mac_addr,omitempty"`
	PortType     LifPortType          `protobuf:"varint,4,opt,name=port_type,json=portType,enum=intf.LifPortType" json:"port_type,omitempty"`
	PortNum      uint32               `protobuf:"varint,5,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	PeerLif      *LifKeyHandle        `protobuf:"bytes,6,opt,name=peer_lif,json=peerLif" json:"peer_lif,omitempty"`
	AdminStatus  IfStatus             `protobuf:"varint,7,opt,name=admin_status,json=adminStatus,enum=intf.IfStatus" json:"admin_status,omitempty"`
	LifQstateMap []*LifQStateMapEntry `protobuf:"bytes,8,rep,name=lif_qstate_map,json=lifQstateMap" json:"lif_qstate_map,omitempty"`
	VlanStripEn  bool                 `protobuf:"varint,9,opt,name=vlan_strip_en,json=vlanStripEn" json:"vlan_strip_en,omitempty"`
	// bool                     allmulti          = 10;   // LIF set all multicast group
	EnableRdma       bool            `protobuf:"varint,11,opt,name=enable_rdma,json=enableRdma" json:"enable_rdma,omitempty"`
	RdmaMaxKeys      uint32          `protobuf:"varint,12,opt,name=rdma_max_keys,json=rdmaMaxKeys" json:"rdma_max_keys,omitempty"`
	RdmaMaxPtEntries uint32          `protobuf:"varint,13,opt,name=rdma_max_pt_entries,json=rdmaMaxPtEntries" json:"rdma_max_pt_entries,omitempty"`
	LifQstate        []*QStateSetReq `protobuf:"bytes,14,rep,name=lif_qstate,json=lifQstate" json:"lif_qstate,omitempty"`
}

func (m *LifSpec) Reset()                    { *m = LifSpec{} }
func (m *LifSpec) String() string            { return proto.CompactTextString(m) }
func (*LifSpec) ProtoMessage()               {}
func (*LifSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *LifSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifSpec) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifSpec) GetMacAddr() uint64 {
	if m != nil {
		return m.MacAddr
	}
	return 0
}

func (m *LifSpec) GetPortType() LifPortType {
	if m != nil {
		return m.PortType
	}
	return LifPortType_LIF_PORT_TYPE_NONE
}

func (m *LifSpec) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *LifSpec) GetPeerLif() *LifKeyHandle {
	if m != nil {
		return m.PeerLif
	}
	return nil
}

func (m *LifSpec) GetAdminStatus() IfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *LifSpec) GetLifQstateMap() []*LifQStateMapEntry {
	if m != nil {
		return m.LifQstateMap
	}
	return nil
}

func (m *LifSpec) GetVlanStripEn() bool {
	if m != nil {
		return m.VlanStripEn
	}
	return false
}

func (m *LifSpec) GetEnableRdma() bool {
	if m != nil {
		return m.EnableRdma
	}
	return false
}

func (m *LifSpec) GetRdmaMaxKeys() uint32 {
	if m != nil {
		return m.RdmaMaxKeys
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxPtEntries() uint32 {
	if m != nil {
		return m.RdmaMaxPtEntries
	}
	return 0
}

func (m *LifSpec) GetLifQstate() []*QStateSetReq {
	if m != nil {
		return m.LifQstate
	}
	return nil
}

// LifRequestMsg is batched request used to create/update of LIFs
type LifRequestMsg struct {
	Request []*LifSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifRequestMsg) Reset()                    { *m = LifRequestMsg{} }
func (m *LifRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifRequestMsg) ProtoMessage()               {}
func (*LifRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *LifRequestMsg) GetRequest() []*LifSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifStatus represents the operational status of LIF
type LifStatus struct {
	LifStatus IfStatus `protobuf:"varint,1,opt,name=lif_status,json=lifStatus,enum=intf.IfStatus" json:"lif_status,omitempty"`
	LifHandle uint64   `protobuf:"fixed64,2,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
}

func (m *LifStatus) Reset()                    { *m = LifStatus{} }
func (m *LifStatus) String() string            { return proto.CompactTextString(m) }
func (*LifStatus) ProtoMessage()               {}
func (*LifStatus) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *LifStatus) GetLifStatus() IfStatus {
	if m != nil {
		return m.LifStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *LifStatus) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

// LifQstate entries
type LifQState struct {
	TypeNum uint32 `protobuf:"varint,1,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	Addr    uint64 `protobuf:"varint,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *LifQState) Reset()                    { *m = LifQState{} }
func (m *LifQState) String() string            { return proto.CompactTextString(m) }
func (*LifQState) ProtoMessage()               {}
func (*LifQState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *LifQState) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *LifQState) GetAddr() uint64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

// LifResponse response to one LifSpec
type LifResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *LifStatus   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	HwLifId   uint64       `protobuf:"varint,3,opt,name=hw_lif_id,json=hwLifId" json:"hw_lif_id,omitempty"`
	Qstate    []*LifQState `protobuf:"bytes,4,rep,name=qstate" json:"qstate,omitempty"`
}

func (m *LifResponse) Reset()                    { *m = LifResponse{} }
func (m *LifResponse) String() string            { return proto.CompactTextString(m) }
func (*LifResponse) ProtoMessage()               {}
func (*LifResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *LifResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *LifResponse) GetStatus() *LifStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LifResponse) GetHwLifId() uint64 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *LifResponse) GetQstate() []*LifQState {
	if m != nil {
		return m.Qstate
	}
	return nil
}

// LifResponseMsg is response to LifRequestMsg
type LifResponseMsg struct {
	Response []*LifResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifResponseMsg) Reset()                    { *m = LifResponseMsg{} }
func (m *LifResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifResponseMsg) ProtoMessage()               {}
func (*LifResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *LifResponseMsg) GetResponse() []*LifResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QStateGetReq struct {
	LifHandle uint64 `protobuf:"varint,1,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
	TypeNum   uint32 `protobuf:"varint,2,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	Qid       uint32 `protobuf:"varint,3,opt,name=qid" json:"qid,omitempty"`
	// Amount of data to return in the corresponding
	// QStateGetResp::queue_state buffer. By default
	// All the data is returned (based on the size of this
	// queue type_num). But can be limited by the caller.
	// Setting this value to be greater than the actual
	// size has no effect.
	RetDataSize uint32 `protobuf:"varint,4,opt,name=ret_data_size,json=retDataSize" json:"ret_data_size,omitempty"`
}

func (m *QStateGetReq) Reset()                    { *m = QStateGetReq{} }
func (m *QStateGetReq) String() string            { return proto.CompactTextString(m) }
func (*QStateGetReq) ProtoMessage()               {}
func (*QStateGetReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *QStateGetReq) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *QStateGetReq) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *QStateGetReq) GetQid() uint32 {
	if m != nil {
		return m.Qid
	}
	return 0
}

func (m *QStateGetReq) GetRetDataSize() uint32 {
	if m != nil {
		return m.RetDataSize
	}
	return 0
}

type GetQStateRequestMsg struct {
	Reqs []*QStateGetReq `protobuf:"bytes,1,rep,name=reqs" json:"reqs,omitempty"`
}

func (m *GetQStateRequestMsg) Reset()                    { *m = GetQStateRequestMsg{} }
func (m *GetQStateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GetQStateRequestMsg) ProtoMessage()               {}
func (*GetQStateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *GetQStateRequestMsg) GetReqs() []*QStateGetReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type QStateGetResp struct {
	// TODO: what is user to make out of this error_code if it is non-zero ??
	//       why this is not using types.ApiStatus ???
	ErrorCode  int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	QAddr      uint64 `protobuf:"varint,2,opt,name=q_addr,json=qAddr" json:"q_addr,omitempty"`
	QueueState []byte `protobuf:"bytes,3,opt,name=queue_state,json=queueState,proto3" json:"queue_state,omitempty"`
}

func (m *QStateGetResp) Reset()                    { *m = QStateGetResp{} }
func (m *QStateGetResp) String() string            { return proto.CompactTextString(m) }
func (*QStateGetResp) ProtoMessage()               {}
func (*QStateGetResp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *QStateGetResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *QStateGetResp) GetQAddr() uint64 {
	if m != nil {
		return m.QAddr
	}
	return 0
}

func (m *QStateGetResp) GetQueueState() []byte {
	if m != nil {
		return m.QueueState
	}
	return nil
}

type GetQStateResponseMsg struct {
	Resps []*QStateGetResp `protobuf:"bytes,1,rep,name=resps" json:"resps,omitempty"`
}

func (m *GetQStateResponseMsg) Reset()                    { *m = GetQStateResponseMsg{} }
func (m *GetQStateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*GetQStateResponseMsg) ProtoMessage()               {}
func (*GetQStateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *GetQStateResponseMsg) GetResps() []*QStateGetResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

// A P4ProgLabel is used to get the PC offset for
// Queue state.
type P4ProgLabel struct {
	Handle   string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName" json:"prog_name,omitempty"`
	Label    string `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
}

func (m *P4ProgLabel) Reset()                    { *m = P4ProgLabel{} }
func (m *P4ProgLabel) String() string            { return proto.CompactTextString(m) }
func (*P4ProgLabel) ProtoMessage()               {}
func (*P4ProgLabel) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *P4ProgLabel) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *P4ProgLabel) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *P4ProgLabel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type QStateSetReq struct {
	LifHandle uint64 `protobuf:"varint,1,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
	TypeNum   uint32 `protobuf:"varint,2,opt,name=type_num,json=typeNum" json:"type_num,omitempty"`
	Qid       uint32 `protobuf:"varint,3,opt,name=qid" json:"qid,omitempty"`
	// If present, PC Offset is filled by the implementation
	// based on the label.
	Label *P4ProgLabel `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	// Actual queue state to be written. Can be less than the
	// actual qstate size. But has to be greater than 0.
	QueueState []byte `protobuf:"bytes,5,opt,name=queue_state,json=queueState,proto3" json:"queue_state,omitempty"`
}

func (m *QStateSetReq) Reset()                    { *m = QStateSetReq{} }
func (m *QStateSetReq) String() string            { return proto.CompactTextString(m) }
func (*QStateSetReq) ProtoMessage()               {}
func (*QStateSetReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *QStateSetReq) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *QStateSetReq) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *QStateSetReq) GetQid() uint32 {
	if m != nil {
		return m.Qid
	}
	return 0
}

func (m *QStateSetReq) GetLabel() *P4ProgLabel {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *QStateSetReq) GetQueueState() []byte {
	if m != nil {
		return m.QueueState
	}
	return nil
}

type SetQStateRequestMsg struct {
	Reqs []*QStateSetReq `protobuf:"bytes,1,rep,name=reqs" json:"reqs,omitempty"`
}

func (m *SetQStateRequestMsg) Reset()                    { *m = SetQStateRequestMsg{} }
func (m *SetQStateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SetQStateRequestMsg) ProtoMessage()               {}
func (*SetQStateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *SetQStateRequestMsg) GetReqs() []*QStateSetReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type QStateSetResp struct {
	// TODO: what is user to make out of this error_code if it is non-zero ??
	//       why this is not using types.ApiStatus ??
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *QStateSetResp) Reset()                    { *m = QStateSetResp{} }
func (m *QStateSetResp) String() string            { return proto.CompactTextString(m) }
func (*QStateSetResp) ProtoMessage()               {}
func (*QStateSetResp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *QStateSetResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type SetQStateResponseMsg struct {
	Resps []*QStateSetResp `protobuf:"bytes,1,rep,name=resps" json:"resps,omitempty"`
}

func (m *SetQStateResponseMsg) Reset()                    { *m = SetQStateResponseMsg{} }
func (m *SetQStateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SetQStateResponseMsg) ProtoMessage()               {}
func (*SetQStateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *SetQStateResponseMsg) GetResps() []*QStateSetResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

// LifDeleteRequest  is used to delete a LIF object
type LifDeleteRequest struct {
	Meta        *ObjectMeta   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *LifDeleteRequest) Reset()                    { *m = LifDeleteRequest{} }
func (m *LifDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequest) ProtoMessage()               {}
func (*LifDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *LifDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifDeleteRequest) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// LifDeleteRequestMsg is used to delete a batch of LIFs
type LifDeleteRequestMsg struct {
	Request []*LifDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifDeleteRequestMsg) Reset()                    { *m = LifDeleteRequestMsg{} }
func (m *LifDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequestMsg) ProtoMessage()               {}
func (*LifDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *LifDeleteRequestMsg) GetRequest() []*LifDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifDeleteResponseMsg is batched response to LifDeleteRequestMsg
type LifDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *LifDeleteResponseMsg) Reset()                    { *m = LifDeleteResponseMsg{} }
func (m *LifDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteResponseMsg) ProtoMessage()               {}
func (*LifDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *LifDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// check which stats will be done by p4 and which will be done by p4+
type LifTxStats struct {
	FramesOk          uint64 `protobuf:"varint,1,opt,name=frames_ok,json=framesOk" json:"frames_ok,omitempty"`
	UnicastFramesOk   uint64 `protobuf:"varint,2,opt,name=unicast_frames_ok,json=unicastFramesOk" json:"unicast_frames_ok,omitempty"`
	MulticastBramesOk uint64 `protobuf:"varint,3,opt,name=multicast_brames_ok,json=multicastBramesOk" json:"multicast_brames_ok,omitempty"`
	BroadcastBramesOk uint64 `protobuf:"varint,4,opt,name=broadcast_brames_ok,json=broadcastBramesOk" json:"broadcast_brames_ok,omitempty"`
	BytesOk           uint64 `protobuf:"varint,5,opt,name=bytes_ok,json=bytesOk" json:"bytes_ok,omitempty"`
	UnicastBytesOk    uint64 `protobuf:"varint,6,opt,name=unicast_bytes_ok,json=unicastBytesOk" json:"unicast_bytes_ok,omitempty"`
	MulticastBytesOk  uint64 `protobuf:"varint,7,opt,name=multicast_bytes_ok,json=multicastBytesOk" json:"multicast_bytes_ok,omitempty"`
	BroadcastBytesOk  uint64 `protobuf:"varint,8,opt,name=broadcast_bytes_ok,json=broadcastBytesOk" json:"broadcast_bytes_ok,omitempty"`
	Tso               uint64 `protobuf:"varint,9,opt,name=tso" json:"tso,omitempty"`
}

func (m *LifTxStats) Reset()                    { *m = LifTxStats{} }
func (m *LifTxStats) String() string            { return proto.CompactTextString(m) }
func (*LifTxStats) ProtoMessage()               {}
func (*LifTxStats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *LifTxStats) GetFramesOk() uint64 {
	if m != nil {
		return m.FramesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastFramesOk() uint64 {
	if m != nil {
		return m.UnicastFramesOk
	}
	return 0
}

func (m *LifTxStats) GetMulticastBramesOk() uint64 {
	if m != nil {
		return m.MulticastBramesOk
	}
	return 0
}

func (m *LifTxStats) GetBroadcastBramesOk() uint64 {
	if m != nil {
		return m.BroadcastBramesOk
	}
	return 0
}

func (m *LifTxStats) GetBytesOk() uint64 {
	if m != nil {
		return m.BytesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastBytesOk() uint64 {
	if m != nil {
		return m.UnicastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetMulticastBytesOk() uint64 {
	if m != nil {
		return m.MulticastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetBroadcastBytesOk() uint64 {
	if m != nil {
		return m.BroadcastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetTso() uint64 {
	if m != nil {
		return m.Tso
	}
	return 0
}

type LifRxStats struct {
	FramesTotal       uint64 `protobuf:"varint,1,opt,name=frames_total,json=framesTotal" json:"frames_total,omitempty"`
	FramesOk          uint64 `protobuf:"varint,2,opt,name=frames_ok,json=framesOk" json:"frames_ok,omitempty"`
	UnicastFramesOk   uint64 `protobuf:"varint,3,opt,name=unicast_frames_ok,json=unicastFramesOk" json:"unicast_frames_ok,omitempty"`
	MulticastFramesOk uint64 `protobuf:"varint,4,opt,name=multicast_frames_ok,json=multicastFramesOk" json:"multicast_frames_ok,omitempty"`
	BroadcastFramesOk uint64 `protobuf:"varint,5,opt,name=broadcast_frames_ok,json=broadcastFramesOk" json:"broadcast_frames_ok,omitempty"`
	BytesOk           uint64 `protobuf:"varint,6,opt,name=bytes_ok,json=bytesOk" json:"bytes_ok,omitempty"`
	UnicastBytesOk    uint64 `protobuf:"varint,7,opt,name=unicast_bytes_ok,json=unicastBytesOk" json:"unicast_bytes_ok,omitempty"`
	MulticastBytesOk  uint64 `protobuf:"varint,8,opt,name=multicast_bytes_ok,json=multicastBytesOk" json:"multicast_bytes_ok,omitempty"`
	BroadcastBytesOk  uint64 `protobuf:"varint,9,opt,name=broadcast_bytes_ok,json=broadcastBytesOk" json:"broadcast_bytes_ok,omitempty"`
	Drops             uint64 `protobuf:"varint,10,opt,name=drops" json:"drops,omitempty"`
	NoBufs            uint64 `protobuf:"varint,11,opt,name=no_bufs,json=noBufs" json:"no_bufs,omitempty"`
	Errors            uint64 `protobuf:"varint,12,opt,name=errors" json:"errors,omitempty"`
	Rss               uint64 `protobuf:"varint,13,opt,name=rss" json:"rss,omitempty"`
	CrcErrors         uint64 `protobuf:"varint,14,opt,name=crc_errors,json=crcErrors" json:"crc_errors,omitempty"`
	Frames_64         uint64 `protobuf:"varint,15,opt,name=frames_64,json=frames64" json:"frames_64,omitempty"`
	Frames_127        uint64 `protobuf:"varint,16,opt,name=frames_127,json=frames127" json:"frames_127,omitempty"`
	Frames_255        uint64 `protobuf:"varint,17,opt,name=frames_255,json=frames255" json:"frames_255,omitempty"`
	Frames_511        uint64 `protobuf:"varint,18,opt,name=frames_511,json=frames511" json:"frames_511,omitempty"`
	Frames_1024       uint64 `protobuf:"varint,19,opt,name=frames_1024,json=frames1024" json:"frames_1024,omitempty"`
	Frames_1518       uint64 `protobuf:"varint,20,opt,name=frames_1518,json=frames1518" json:"frames_1518,omitempty"`
	FramesToMax       uint64 `protobuf:"varint,21,opt,name=frames_to_max,json=framesToMax" json:"frames_to_max,omitempty"`
}

func (m *LifRxStats) Reset()                    { *m = LifRxStats{} }
func (m *LifRxStats) String() string            { return proto.CompactTextString(m) }
func (*LifRxStats) ProtoMessage()               {}
func (*LifRxStats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *LifRxStats) GetFramesTotal() uint64 {
	if m != nil {
		return m.FramesTotal
	}
	return 0
}

func (m *LifRxStats) GetFramesOk() uint64 {
	if m != nil {
		return m.FramesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastFramesOk() uint64 {
	if m != nil {
		return m.UnicastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetMulticastFramesOk() uint64 {
	if m != nil {
		return m.MulticastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetBroadcastFramesOk() uint64 {
	if m != nil {
		return m.BroadcastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetBytesOk() uint64 {
	if m != nil {
		return m.BytesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastBytesOk() uint64 {
	if m != nil {
		return m.UnicastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetMulticastBytesOk() uint64 {
	if m != nil {
		return m.MulticastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetBroadcastBytesOk() uint64 {
	if m != nil {
		return m.BroadcastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetDrops() uint64 {
	if m != nil {
		return m.Drops
	}
	return 0
}

func (m *LifRxStats) GetNoBufs() uint64 {
	if m != nil {
		return m.NoBufs
	}
	return 0
}

func (m *LifRxStats) GetErrors() uint64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *LifRxStats) GetRss() uint64 {
	if m != nil {
		return m.Rss
	}
	return 0
}

func (m *LifRxStats) GetCrcErrors() uint64 {
	if m != nil {
		return m.CrcErrors
	}
	return 0
}

func (m *LifRxStats) GetFrames_64() uint64 {
	if m != nil {
		return m.Frames_64
	}
	return 0
}

func (m *LifRxStats) GetFrames_127() uint64 {
	if m != nil {
		return m.Frames_127
	}
	return 0
}

func (m *LifRxStats) GetFrames_255() uint64 {
	if m != nil {
		return m.Frames_255
	}
	return 0
}

func (m *LifRxStats) GetFrames_511() uint64 {
	if m != nil {
		return m.Frames_511
	}
	return 0
}

func (m *LifRxStats) GetFrames_1024() uint64 {
	if m != nil {
		return m.Frames_1024
	}
	return 0
}

func (m *LifRxStats) GetFrames_1518() uint64 {
	if m != nil {
		return m.Frames_1518
	}
	return 0
}

func (m *LifRxStats) GetFramesToMax() uint64 {
	if m != nil {
		return m.FramesToMax
	}
	return 0
}

// LifStats captures all the statistics of given LIF
type LifStats struct {
	TxStats *LifTxStats `protobuf:"bytes,1,opt,name=tx_stats,json=txStats" json:"tx_stats,omitempty"`
	RxStats *LifRxStats `protobuf:"bytes,2,opt,name=rx_stats,json=rxStats" json:"rx_stats,omitempty"`
}

func (m *LifStats) Reset()                    { *m = LifStats{} }
func (m *LifStats) String() string            { return proto.CompactTextString(m) }
func (*LifStats) ProtoMessage()               {}
func (*LifStats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *LifStats) GetTxStats() *LifTxStats {
	if m != nil {
		return m.TxStats
	}
	return nil
}

func (m *LifStats) GetRxStats() *LifRxStats {
	if m != nil {
		return m.RxStats
	}
	return nil
}

// LifGetRequest is used to get information about a LIF
type LifGetRequest struct {
	Meta        *ObjectMeta   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Stats       *LifStats     `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *LifGetRequest) Reset()                    { *m = LifGetRequest{} }
func (m *LifGetRequest) String() string            { return proto.CompactTextString(m) }
func (*LifGetRequest) ProtoMessage()               {}
func (*LifGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *LifGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifGetRequest) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifGetRequest) GetStats() *LifStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type LifGetRequestMsg struct {
	Request []*LifGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifGetRequestMsg) Reset()                    { *m = LifGetRequestMsg{} }
func (m *LifGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifGetRequestMsg) ProtoMessage()               {}
func (*LifGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *LifGetRequestMsg) GetRequest() []*LifGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifGetResponse captures all the information about a LIF
type LifGetResponse struct {
	Spec   *LifSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *LifStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats  *LifStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *LifGetResponse) Reset()                    { *m = LifGetResponse{} }
func (m *LifGetResponse) String() string            { return proto.CompactTextString(m) }
func (*LifGetResponse) ProtoMessage()               {}
func (*LifGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *LifGetResponse) GetSpec() *LifSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *LifGetResponse) GetStatus() *LifStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LifGetResponse) GetStats() *LifStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// LifGetResponseMsg is response to LifGetRequestMsg
type LifGetResponseMsg struct {
	Response []*LifGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifGetResponseMsg) Reset()                    { *m = LifGetResponseMsg{} }
func (m *LifGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifGetResponseMsg) ProtoMessage()               {}
func (*LifGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *LifGetResponseMsg) GetResponse() []*LifGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// mandatory attributes expected if interface type is IF_TYPE_ENIC
type IfEnicInfo struct {
	EnicType       IfEnicType    `protobuf:"varint,1,opt,name=enic_type,json=enicType,enum=intf.IfEnicType" json:"enic_type,omitempty"`
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
	L2SegmentId    uint32        `protobuf:"varint,3,opt,name=l2segment_id,json=l2segmentId" json:"l2segment_id,omitempty"`
	MacAddress     uint64        `protobuf:"fixed64,4,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	EncapVlanId    uint32        `protobuf:"varint,5,opt,name=encap_vlan_id,json=encapVlanId" json:"encap_vlan_id,omitempty"`
}

func (m *IfEnicInfo) Reset()                    { *m = IfEnicInfo{} }
func (m *IfEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*IfEnicInfo) ProtoMessage()               {}
func (*IfEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *IfEnicInfo) GetEnicType() IfEnicType {
	if m != nil {
		return m.EnicType
	}
	return IfEnicType_IF_ENIC_TYPE_NONE
}

func (m *IfEnicInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

func (m *IfEnicInfo) GetL2SegmentId() uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return 0
}

func (m *IfEnicInfo) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

func (m *IfEnicInfo) GetEncapVlanId() uint32 {
	if m != nil {
		return m.EncapVlanId
	}
	return 0
}

// Interface attributes to specify the derivation of traffic class
type TrafficClassInfo struct {
	Dot1QPcpEn             bool                    `protobuf:"varint,1,opt,name=dot1q_pcp_en,json=dot1qPcpEn" json:"dot1q_pcp_en,omitempty"`
	IpDscpEn               bool                    `protobuf:"varint,2,opt,name=ip_dscp_en,json=ipDscpEn" json:"ip_dscp_en,omitempty"`
	DefaultTrafficClass    *TrafficClass           `protobuf:"bytes,3,opt,name=default_traffic_class,json=defaultTrafficClass" json:"default_traffic_class,omitempty"`
	TrafficClassToQueueMap []*TrafficClassQueueMap `protobuf:"bytes,4,rep,name=traffic_class_to_queue_map,json=trafficClassToQueueMap" json:"traffic_class_to_queue_map,omitempty"`
}

func (m *TrafficClassInfo) Reset()                    { *m = TrafficClassInfo{} }
func (m *TrafficClassInfo) String() string            { return proto.CompactTextString(m) }
func (*TrafficClassInfo) ProtoMessage()               {}
func (*TrafficClassInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *TrafficClassInfo) GetDot1QPcpEn() bool {
	if m != nil {
		return m.Dot1QPcpEn
	}
	return false
}

func (m *TrafficClassInfo) GetIpDscpEn() bool {
	if m != nil {
		return m.IpDscpEn
	}
	return false
}

func (m *TrafficClassInfo) GetDefaultTrafficClass() *TrafficClass {
	if m != nil {
		return m.DefaultTrafficClass
	}
	return nil
}

func (m *TrafficClassInfo) GetTrafficClassToQueueMap() []*TrafficClassQueueMap {
	if m != nil {
		return m.TrafficClassToQueueMap
	}
	return nil
}

// mandatory attributes expected if interface type is IF_TYPE_UPLINK
type IfUplinkInfo struct {
	PortNum            uint32            `protobuf:"varint,1,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	NativeL2SegmentId  uint32            `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
	L2SegmentId        []uint32          `protobuf:"varint,3,rep,packed,name=l2segment_id,json=l2segmentId" json:"l2segment_id,omitempty"`
	RxTrafficClassInfo *TrafficClassInfo `protobuf:"bytes,4,opt,name=rx_traffic_class_info,json=rxTrafficClassInfo" json:"rx_traffic_class_info,omitempty"`
}

func (m *IfUplinkInfo) Reset()                    { *m = IfUplinkInfo{} }
func (m *IfUplinkInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkInfo) ProtoMessage()               {}
func (*IfUplinkInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

func (m *IfUplinkInfo) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *IfUplinkInfo) GetNativeL2SegmentId() uint32 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkInfo) GetL2SegmentId() []uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return nil
}

func (m *IfUplinkInfo) GetRxTrafficClassInfo() *TrafficClassInfo {
	if m != nil {
		return m.RxTrafficClassInfo
	}
	return nil
}

// mandatory attributes expected if interface type is IF_TYPE_UPLINK_PC
type IfUplinkPCInfo struct {
	UplinkPcNum        uint32            `protobuf:"varint,1,opt,name=uplink_pc_num,json=uplinkPcNum" json:"uplink_pc_num,omitempty"`
	NativeL2SegmentId  uint32            `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
	L2SegmentId        []uint32          `protobuf:"varint,3,rep,packed,name=l2segment_id,json=l2segmentId" json:"l2segment_id,omitempty"`
	RxTrafficClassInfo *TrafficClassInfo `protobuf:"bytes,4,opt,name=rx_traffic_class_info,json=rxTrafficClassInfo" json:"rx_traffic_class_info,omitempty"`
	MemberIfHandle     []uint64          `protobuf:"varint,5,rep,packed,name=member_if_handle,json=memberIfHandle" json:"member_if_handle,omitempty"`
}

func (m *IfUplinkPCInfo) Reset()                    { *m = IfUplinkPCInfo{} }
func (m *IfUplinkPCInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkPCInfo) ProtoMessage()               {}
func (*IfUplinkPCInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{30} }

func (m *IfUplinkPCInfo) GetUplinkPcNum() uint32 {
	if m != nil {
		return m.UplinkPcNum
	}
	return 0
}

func (m *IfUplinkPCInfo) GetNativeL2SegmentId() uint32 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkPCInfo) GetL2SegmentId() []uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return nil
}

func (m *IfUplinkPCInfo) GetRxTrafficClassInfo() *TrafficClassInfo {
	if m != nil {
		return m.RxTrafficClassInfo
	}
	return nil
}

func (m *IfUplinkPCInfo) GetMemberIfHandle() []uint64 {
	if m != nil {
		return m.MemberIfHandle
	}
	return nil
}

// InterfaceKeyHandle uniquely identifies a Interface
type InterfaceKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*InterfaceKeyHandle_InterfaceId
	//	*InterfaceKeyHandle_IfHandle
	KeyOrHandle isInterfaceKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *InterfaceKeyHandle) Reset()                    { *m = InterfaceKeyHandle{} }
func (m *InterfaceKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*InterfaceKeyHandle) ProtoMessage()               {}
func (*InterfaceKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{31} }

type isInterfaceKeyHandle_KeyOrHandle interface {
	isInterfaceKeyHandle_KeyOrHandle()
}

type InterfaceKeyHandle_InterfaceId struct {
	InterfaceId uint64 `protobuf:"fixed64,1,opt,name=interface_id,json=interfaceId,oneof"`
}
type InterfaceKeyHandle_IfHandle struct {
	IfHandle uint64 `protobuf:"fixed64,2,opt,name=if_handle,json=ifHandle,oneof"`
}

func (*InterfaceKeyHandle_InterfaceId) isInterfaceKeyHandle_KeyOrHandle() {}
func (*InterfaceKeyHandle_IfHandle) isInterfaceKeyHandle_KeyOrHandle()    {}

func (m *InterfaceKeyHandle) GetKeyOrHandle() isInterfaceKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceKeyHandle) GetInterfaceId() uint64 {
	if x, ok := m.GetKeyOrHandle().(*InterfaceKeyHandle_InterfaceId); ok {
		return x.InterfaceId
	}
	return 0
}

func (m *InterfaceKeyHandle) GetIfHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*InterfaceKeyHandle_IfHandle); ok {
		return x.IfHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InterfaceKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InterfaceKeyHandle_OneofMarshaler, _InterfaceKeyHandle_OneofUnmarshaler, _InterfaceKeyHandle_OneofSizer, []interface{}{
		(*InterfaceKeyHandle_InterfaceId)(nil),
		(*InterfaceKeyHandle_IfHandle)(nil),
	}
}

func _InterfaceKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InterfaceKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *InterfaceKeyHandle_InterfaceId:
		b.EncodeVarint(1<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.InterfaceId))
	case *InterfaceKeyHandle_IfHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.IfHandle))
	case nil:
	default:
		return fmt.Errorf("InterfaceKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _InterfaceKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InterfaceKeyHandle)
	switch tag {
	case 1: // key_or_handle.interface_id
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &InterfaceKeyHandle_InterfaceId{x}
		return true, err
	case 2: // key_or_handle.if_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &InterfaceKeyHandle_IfHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _InterfaceKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InterfaceKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *InterfaceKeyHandle_InterfaceId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *InterfaceKeyHandle_IfHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IfTunnelVxlanInfo struct {
	LocalTep  *IPAddress `protobuf:"bytes,1,opt,name=local_tep,json=localTep" json:"local_tep,omitempty"`
	RemoteTep *IPAddress `protobuf:"bytes,2,opt,name=remote_tep,json=remoteTep" json:"remote_tep,omitempty"`
}

func (m *IfTunnelVxlanInfo) Reset()                    { *m = IfTunnelVxlanInfo{} }
func (m *IfTunnelVxlanInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelVxlanInfo) ProtoMessage()               {}
func (*IfTunnelVxlanInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{32} }

func (m *IfTunnelVxlanInfo) GetLocalTep() *IPAddress {
	if m != nil {
		return m.LocalTep
	}
	return nil
}

func (m *IfTunnelVxlanInfo) GetRemoteTep() *IPAddress {
	if m != nil {
		return m.RemoteTep
	}
	return nil
}

type IfTunnelInfo struct {
	EncapType IfTunnelEncapType `protobuf:"varint,1,opt,name=encap_type,json=encapType,enum=intf.IfTunnelEncapType" json:"encap_type,omitempty"`
	// Types that are valid to be assigned to EncapInfo:
	//	*IfTunnelInfo_VxlanInfo
	EncapInfo isIfTunnelInfo_EncapInfo `protobuf_oneof:"encap_info"`
}

func (m *IfTunnelInfo) Reset()                    { *m = IfTunnelInfo{} }
func (m *IfTunnelInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelInfo) ProtoMessage()               {}
func (*IfTunnelInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{33} }

type isIfTunnelInfo_EncapInfo interface {
	isIfTunnelInfo_EncapInfo()
}

type IfTunnelInfo_VxlanInfo struct {
	VxlanInfo *IfTunnelVxlanInfo `protobuf:"bytes,2,opt,name=vxlan_info,json=vxlanInfo,oneof"`
}

func (*IfTunnelInfo_VxlanInfo) isIfTunnelInfo_EncapInfo() {}

func (m *IfTunnelInfo) GetEncapInfo() isIfTunnelInfo_EncapInfo {
	if m != nil {
		return m.EncapInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetEncapType() IfTunnelEncapType {
	if m != nil {
		return m.EncapType
	}
	return IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE
}

func (m *IfTunnelInfo) GetVxlanInfo() *IfTunnelVxlanInfo {
	if x, ok := m.GetEncapInfo().(*IfTunnelInfo_VxlanInfo); ok {
		return x.VxlanInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IfTunnelInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IfTunnelInfo_OneofMarshaler, _IfTunnelInfo_OneofUnmarshaler, _IfTunnelInfo_OneofSizer, []interface{}{
		(*IfTunnelInfo_VxlanInfo)(nil),
	}
}

func _IfTunnelInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IfTunnelInfo)
	// encap_info
	switch x := m.EncapInfo.(type) {
	case *IfTunnelInfo_VxlanInfo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VxlanInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IfTunnelInfo.EncapInfo has unexpected type %T", x)
	}
	return nil
}

func _IfTunnelInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IfTunnelInfo)
	switch tag {
	case 2: // encap_info.vxlan_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelVxlanInfo)
		err := b.DecodeMessage(msg)
		m.EncapInfo = &IfTunnelInfo_VxlanInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IfTunnelInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IfTunnelInfo)
	// encap_info
	switch x := m.EncapInfo.(type) {
	case *IfTunnelInfo_VxlanInfo:
		s := proto.Size(x.VxlanInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// attributes for CPU If
type IfCPUInfo struct {
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
}

func (m *IfCPUInfo) Reset()                    { *m = IfCPUInfo{} }
func (m *IfCPUInfo) String() string            { return proto.CompactTextString(m) }
func (*IfCPUInfo) ProtoMessage()               {}
func (*IfCPUInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{34} }

func (m *IfCPUInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

// InterfaceSpec is used to add or update of an interface
type InterfaceSpec struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        IfType              `protobuf:"varint,3,opt,name=type,enum=intf.IfType" json:"type,omitempty"`
	AdminStatus IfStatus            `protobuf:"varint,4,opt,name=admin_status,json=adminStatus,enum=intf.IfStatus" json:"admin_status,omitempty"`
	// Types that are valid to be assigned to IfInfo:
	//	*InterfaceSpec_IfEnicInfo
	//	*InterfaceSpec_IfUplinkInfo
	//	*InterfaceSpec_IfUplinkPcInfo
	//	*InterfaceSpec_IfTunnelInfo
	//	*InterfaceSpec_IfCpuInfo
	IfInfo       isInterfaceSpec_IfInfo `protobuf_oneof:"if_info"`
	TxQosActions *QOSActions            `protobuf:"bytes,11,opt,name=tx_qos_actions,json=txQosActions" json:"tx_qos_actions,omitempty"`
	RxQosActions *QOSActions            `protobuf:"bytes,12,opt,name=rx_qos_actions,json=rxQosActions" json:"rx_qos_actions,omitempty"`
}

func (m *InterfaceSpec) Reset()                    { *m = InterfaceSpec{} }
func (m *InterfaceSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceSpec) ProtoMessage()               {}
func (*InterfaceSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{35} }

type isInterfaceSpec_IfInfo interface {
	isInterfaceSpec_IfInfo()
}

type InterfaceSpec_IfEnicInfo struct {
	IfEnicInfo *IfEnicInfo `protobuf:"bytes,6,opt,name=if_enic_info,json=ifEnicInfo,oneof"`
}
type InterfaceSpec_IfUplinkInfo struct {
	IfUplinkInfo *IfUplinkInfo `protobuf:"bytes,7,opt,name=if_uplink_info,json=ifUplinkInfo,oneof"`
}
type InterfaceSpec_IfUplinkPcInfo struct {
	IfUplinkPcInfo *IfUplinkPCInfo `protobuf:"bytes,8,opt,name=if_uplink_pc_info,json=ifUplinkPcInfo,oneof"`
}
type InterfaceSpec_IfTunnelInfo struct {
	IfTunnelInfo *IfTunnelInfo `protobuf:"bytes,9,opt,name=if_tunnel_info,json=ifTunnelInfo,oneof"`
}
type InterfaceSpec_IfCpuInfo struct {
	IfCpuInfo *IfCPUInfo `protobuf:"bytes,10,opt,name=if_cpu_info,json=ifCpuInfo,oneof"`
}

func (*InterfaceSpec_IfEnicInfo) isInterfaceSpec_IfInfo()     {}
func (*InterfaceSpec_IfUplinkInfo) isInterfaceSpec_IfInfo()   {}
func (*InterfaceSpec_IfUplinkPcInfo) isInterfaceSpec_IfInfo() {}
func (*InterfaceSpec_IfTunnelInfo) isInterfaceSpec_IfInfo()   {}
func (*InterfaceSpec_IfCpuInfo) isInterfaceSpec_IfInfo()      {}

func (m *InterfaceSpec) GetIfInfo() isInterfaceSpec_IfInfo {
	if m != nil {
		return m.IfInfo
	}
	return nil
}

func (m *InterfaceSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceSpec) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceSpec) GetType() IfType {
	if m != nil {
		return m.Type
	}
	return IfType_IF_TYPE_NONE
}

func (m *InterfaceSpec) GetAdminStatus() IfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *InterfaceSpec) GetIfEnicInfo() *IfEnicInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfEnicInfo); ok {
		return x.IfEnicInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkInfo() *IfUplinkInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfUplinkInfo); ok {
		return x.IfUplinkInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkPcInfo() *IfUplinkPCInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfUplinkPcInfo); ok {
		return x.IfUplinkPcInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfTunnelInfo() *IfTunnelInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfTunnelInfo); ok {
		return x.IfTunnelInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfCpuInfo() *IfCPUInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfCpuInfo); ok {
		return x.IfCpuInfo
	}
	return nil
}

func (m *InterfaceSpec) GetTxQosActions() *QOSActions {
	if m != nil {
		return m.TxQosActions
	}
	return nil
}

func (m *InterfaceSpec) GetRxQosActions() *QOSActions {
	if m != nil {
		return m.RxQosActions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InterfaceSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InterfaceSpec_OneofMarshaler, _InterfaceSpec_OneofUnmarshaler, _InterfaceSpec_OneofSizer, []interface{}{
		(*InterfaceSpec_IfEnicInfo)(nil),
		(*InterfaceSpec_IfUplinkInfo)(nil),
		(*InterfaceSpec_IfUplinkPcInfo)(nil),
		(*InterfaceSpec_IfTunnelInfo)(nil),
		(*InterfaceSpec_IfCpuInfo)(nil),
	}
}

func _InterfaceSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InterfaceSpec)
	// if_info
	switch x := m.IfInfo.(type) {
	case *InterfaceSpec_IfEnicInfo:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfEnicInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfUplinkInfo:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfUplinkInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfUplinkPcInfo:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfUplinkPcInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfTunnelInfo:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfTunnelInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfCpuInfo:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfCpuInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InterfaceSpec.IfInfo has unexpected type %T", x)
	}
	return nil
}

func _InterfaceSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InterfaceSpec)
	switch tag {
	case 6: // if_info.if_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfEnicInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfEnicInfo{msg}
		return true, err
	case 7: // if_info.if_uplink_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfUplinkInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfUplinkInfo{msg}
		return true, err
	case 8: // if_info.if_uplink_pc_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfUplinkPCInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfUplinkPcInfo{msg}
		return true, err
	case 9: // if_info.if_tunnel_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfTunnelInfo{msg}
		return true, err
	case 10: // if_info.if_cpu_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfCPUInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfCpuInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InterfaceSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InterfaceSpec)
	// if_info
	switch x := m.IfInfo.(type) {
	case *InterfaceSpec_IfEnicInfo:
		s := proto.Size(x.IfEnicInfo)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfUplinkInfo:
		s := proto.Size(x.IfUplinkInfo)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfUplinkPcInfo:
		s := proto.Size(x.IfUplinkPcInfo)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfTunnelInfo:
		s := proto.Size(x.IfTunnelInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfCpuInfo:
		s := proto.Size(x.IfCpuInfo)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InterfaceRequestMsg is batched request message that is used to do
// create/update of interface(s)
type InterfaceRequestMsg struct {
	Request []*InterfaceSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceRequestMsg) Reset()                    { *m = InterfaceRequestMsg{} }
func (m *InterfaceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceRequestMsg) ProtoMessage()               {}
func (*InterfaceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{36} }

func (m *InterfaceRequestMsg) GetRequest() []*InterfaceSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceStatus represents the current status of the interface
type InterfaceStatus struct {
	IfStatus IfStatus `protobuf:"varint,1,opt,name=if_status,json=ifStatus,enum=intf.IfStatus" json:"if_status,omitempty"`
	IfHandle uint64   `protobuf:"fixed64,2,opt,name=if_handle,json=ifHandle" json:"if_handle,omitempty"`
}

func (m *InterfaceStatus) Reset()                    { *m = InterfaceStatus{} }
func (m *InterfaceStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStatus) ProtoMessage()               {}
func (*InterfaceStatus) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{37} }

func (m *InterfaceStatus) GetIfStatus() IfStatus {
	if m != nil {
		return m.IfStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *InterfaceStatus) GetIfHandle() uint64 {
	if m != nil {
		return m.IfHandle
	}
	return 0
}

// InterfaceResponse is response to one InterfaceSpec
type InterfaceResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *InterfaceStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *InterfaceResponse) Reset()                    { *m = InterfaceResponse{} }
func (m *InterfaceResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponse) ProtoMessage()               {}
func (*InterfaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{38} }

func (m *InterfaceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// InterfaceResponseMsg is response to InterfaceRequestMsg
type InterfaceResponseMsg struct {
	Response []*InterfaceResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceResponseMsg) Reset()                    { *m = InterfaceResponseMsg{} }
func (m *InterfaceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponseMsg) ProtoMessage()               {}
func (*InterfaceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{39} }

func (m *InterfaceResponseMsg) GetResponse() []*InterfaceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceDeleteRequest is used to delete a interface object
type InterfaceDeleteRequest struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *InterfaceDeleteRequest) Reset()                    { *m = InterfaceDeleteRequest{} }
func (m *InterfaceDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequest) ProtoMessage()               {}
func (*InterfaceDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{40} }

func (m *InterfaceDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceDeleteRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceDeleteRequestMsg is used to delete a batch of interfaces
type InterfaceDeleteRequestMsg struct {
	Request []*InterfaceDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceDeleteRequestMsg) Reset()                    { *m = InterfaceDeleteRequestMsg{} }
func (m *InterfaceDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequestMsg) ProtoMessage()               {}
func (*InterfaceDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{41} }

func (m *InterfaceDeleteRequestMsg) GetRequest() []*InterfaceDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceDeleteResponseMsg is batched response to InterfaceDeleteRequestMsg
type InterfaceDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *InterfaceDeleteResponseMsg) Reset()                    { *m = InterfaceDeleteResponseMsg{} }
func (m *InterfaceDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteResponseMsg) ProtoMessage()               {}
func (*InterfaceDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{42} }

func (m *InterfaceDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// InterfaceStats captures all the statistics of given interface
type InterfaceStats struct {
	NumTxPackets uint32 `protobuf:"fixed32,1,opt,name=num_tx_packets,json=numTxPackets" json:"num_tx_packets,omitempty"`
	NumTxBytes   uint32 `protobuf:"fixed32,2,opt,name=num_tx_bytes,json=numTxBytes" json:"num_tx_bytes,omitempty"`
	NumRxPackets uint32 `protobuf:"fixed32,3,opt,name=num_rx_packets,json=numRxPackets" json:"num_rx_packets,omitempty"`
	NumRxBytes   uint32 `protobuf:"fixed32,4,opt,name=num_rx_bytes,json=numRxBytes" json:"num_rx_bytes,omitempty"`
}

func (m *InterfaceStats) Reset()                    { *m = InterfaceStats{} }
func (m *InterfaceStats) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStats) ProtoMessage()               {}
func (*InterfaceStats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{43} }

func (m *InterfaceStats) GetNumTxPackets() uint32 {
	if m != nil {
		return m.NumTxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumTxBytes() uint32 {
	if m != nil {
		return m.NumTxBytes
	}
	return 0
}

func (m *InterfaceStats) GetNumRxPackets() uint32 {
	if m != nil {
		return m.NumRxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumRxBytes() uint32 {
	if m != nil {
		return m.NumRxBytes
	}
	return 0
}

// InterfaceGetRequest is used to get information about a interface
type InterfaceGetRequest struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *InterfaceGetRequest) Reset()                    { *m = InterfaceGetRequest{} }
func (m *InterfaceGetRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequest) ProtoMessage()               {}
func (*InterfaceGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{44} }

func (m *InterfaceGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceGetRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceGetRequestMsg is batched GET request for interfaces
type InterfaceGetRequestMsg struct {
	Request []*InterfaceGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceGetRequestMsg) Reset()                    { *m = InterfaceGetRequestMsg{} }
func (m *InterfaceGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequestMsg) ProtoMessage()               {}
func (*InterfaceGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{45} }

func (m *InterfaceGetRequestMsg) GetRequest() []*InterfaceGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceGetResponse captures all the information about a interface
type InterfaceGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *InterfaceSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *InterfaceStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *InterfaceStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *InterfaceGetResponse) Reset()                    { *m = InterfaceGetResponse{} }
func (m *InterfaceGetResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetResponse) ProtoMessage()               {}
func (*InterfaceGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{46} }

func (m *InterfaceGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceGetResponse) GetSpec() *InterfaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *InterfaceGetResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InterfaceGetResponse) GetStats() *InterfaceStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// InterfaceGetResponseMsg is response to InterfaceGetRequestMsg
type InterfaceGetResponseMsg struct {
	Response []*InterfaceGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceGetResponseMsg) Reset()                    { *m = InterfaceGetResponseMsg{} }
func (m *InterfaceGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetResponseMsg) ProtoMessage()               {}
func (*InterfaceGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{47} }

func (m *InterfaceGetResponseMsg) GetResponse() []*InterfaceGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceL2SegmentSpec carries the user vlan that is being added or deleted
// on an uplink interface or uplink PC
type InterfaceL2SegmentSpec struct {
	Meta                 *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	L2SegmentKeyOrHandle *L2SegmentKeyHandle `protobuf:"bytes,2,opt,name=l2segment_key_or_handle,json=l2segmentKeyOrHandle" json:"l2segment_key_or_handle,omitempty"`
	IfKeyHandle          *InterfaceKeyHandle `protobuf:"bytes,3,opt,name=if_key_handle,json=ifKeyHandle" json:"if_key_handle,omitempty"`
}

func (m *InterfaceL2SegmentSpec) Reset()                    { *m = InterfaceL2SegmentSpec{} }
func (m *InterfaceL2SegmentSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentSpec) ProtoMessage()               {}
func (*InterfaceL2SegmentSpec) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{48} }

func (m *InterfaceL2SegmentSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceL2SegmentSpec) GetL2SegmentKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyOrHandle
	}
	return nil
}

func (m *InterfaceL2SegmentSpec) GetIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.IfKeyHandle
	}
	return nil
}

// InterfaceL2SegmentRequestMsg is batched request message to bring vlans
// on interfaces
type InterfaceL2SegmentRequestMsg struct {
	Request []*InterfaceL2SegmentSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceL2SegmentRequestMsg) Reset()                    { *m = InterfaceL2SegmentRequestMsg{} }
func (m *InterfaceL2SegmentRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentRequestMsg) ProtoMessage()               {}
func (*InterfaceL2SegmentRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{49} }

func (m *InterfaceL2SegmentRequestMsg) GetRequest() []*InterfaceL2SegmentSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceL2SegmentResponse is response to InterfaceL2SegmentSpec
type InterfaceL2SegmentResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *InterfaceL2SegmentResponse) Reset()                    { *m = InterfaceL2SegmentResponse{} }
func (m *InterfaceL2SegmentResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponse) ProtoMessage()               {}
func (*InterfaceL2SegmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{50} }

func (m *InterfaceL2SegmentResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// InterfaceL2SegmentResponseMsg is batched response to InterfaceL2SegmentResponse
type InterfaceL2SegmentResponseMsg struct {
	Response []*InterfaceL2SegmentResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceL2SegmentResponseMsg) Reset()                    { *m = InterfaceL2SegmentResponseMsg{} }
func (m *InterfaceL2SegmentResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponseMsg) ProtoMessage()               {}
func (*InterfaceL2SegmentResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{51} }

func (m *InterfaceL2SegmentResponseMsg) GetResponse() []*InterfaceL2SegmentResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*LifQStateMapEntry)(nil), "intf.LifQStateMapEntry")
	proto.RegisterType((*LifKeyHandle)(nil), "intf.LifKeyHandle")
	proto.RegisterType((*LifSpec)(nil), "intf.LifSpec")
	proto.RegisterType((*LifRequestMsg)(nil), "intf.LifRequestMsg")
	proto.RegisterType((*LifStatus)(nil), "intf.LifStatus")
	proto.RegisterType((*LifQState)(nil), "intf.LifQState")
	proto.RegisterType((*LifResponse)(nil), "intf.LifResponse")
	proto.RegisterType((*LifResponseMsg)(nil), "intf.LifResponseMsg")
	proto.RegisterType((*QStateGetReq)(nil), "intf.QStateGetReq")
	proto.RegisterType((*GetQStateRequestMsg)(nil), "intf.GetQStateRequestMsg")
	proto.RegisterType((*QStateGetResp)(nil), "intf.QStateGetResp")
	proto.RegisterType((*GetQStateResponseMsg)(nil), "intf.GetQStateResponseMsg")
	proto.RegisterType((*P4ProgLabel)(nil), "intf.P4ProgLabel")
	proto.RegisterType((*QStateSetReq)(nil), "intf.QStateSetReq")
	proto.RegisterType((*SetQStateRequestMsg)(nil), "intf.SetQStateRequestMsg")
	proto.RegisterType((*QStateSetResp)(nil), "intf.QStateSetResp")
	proto.RegisterType((*SetQStateResponseMsg)(nil), "intf.SetQStateResponseMsg")
	proto.RegisterType((*LifDeleteRequest)(nil), "intf.LifDeleteRequest")
	proto.RegisterType((*LifDeleteRequestMsg)(nil), "intf.LifDeleteRequestMsg")
	proto.RegisterType((*LifDeleteResponseMsg)(nil), "intf.LifDeleteResponseMsg")
	proto.RegisterType((*LifTxStats)(nil), "intf.LifTxStats")
	proto.RegisterType((*LifRxStats)(nil), "intf.LifRxStats")
	proto.RegisterType((*LifStats)(nil), "intf.LifStats")
	proto.RegisterType((*LifGetRequest)(nil), "intf.LifGetRequest")
	proto.RegisterType((*LifGetRequestMsg)(nil), "intf.LifGetRequestMsg")
	proto.RegisterType((*LifGetResponse)(nil), "intf.LifGetResponse")
	proto.RegisterType((*LifGetResponseMsg)(nil), "intf.LifGetResponseMsg")
	proto.RegisterType((*IfEnicInfo)(nil), "intf.IfEnicInfo")
	proto.RegisterType((*TrafficClassInfo)(nil), "intf.TrafficClassInfo")
	proto.RegisterType((*IfUplinkInfo)(nil), "intf.IfUplinkInfo")
	proto.RegisterType((*IfUplinkPCInfo)(nil), "intf.IfUplinkPCInfo")
	proto.RegisterType((*InterfaceKeyHandle)(nil), "intf.InterfaceKeyHandle")
	proto.RegisterType((*IfTunnelVxlanInfo)(nil), "intf.IfTunnelVxlanInfo")
	proto.RegisterType((*IfTunnelInfo)(nil), "intf.IfTunnelInfo")
	proto.RegisterType((*IfCPUInfo)(nil), "intf.IfCPUInfo")
	proto.RegisterType((*InterfaceSpec)(nil), "intf.InterfaceSpec")
	proto.RegisterType((*InterfaceRequestMsg)(nil), "intf.InterfaceRequestMsg")
	proto.RegisterType((*InterfaceStatus)(nil), "intf.InterfaceStatus")
	proto.RegisterType((*InterfaceResponse)(nil), "intf.InterfaceResponse")
	proto.RegisterType((*InterfaceResponseMsg)(nil), "intf.InterfaceResponseMsg")
	proto.RegisterType((*InterfaceDeleteRequest)(nil), "intf.InterfaceDeleteRequest")
	proto.RegisterType((*InterfaceDeleteRequestMsg)(nil), "intf.InterfaceDeleteRequestMsg")
	proto.RegisterType((*InterfaceDeleteResponseMsg)(nil), "intf.InterfaceDeleteResponseMsg")
	proto.RegisterType((*InterfaceStats)(nil), "intf.InterfaceStats")
	proto.RegisterType((*InterfaceGetRequest)(nil), "intf.InterfaceGetRequest")
	proto.RegisterType((*InterfaceGetRequestMsg)(nil), "intf.InterfaceGetRequestMsg")
	proto.RegisterType((*InterfaceGetResponse)(nil), "intf.InterfaceGetResponse")
	proto.RegisterType((*InterfaceGetResponseMsg)(nil), "intf.InterfaceGetResponseMsg")
	proto.RegisterType((*InterfaceL2SegmentSpec)(nil), "intf.InterfaceL2SegmentSpec")
	proto.RegisterType((*InterfaceL2SegmentRequestMsg)(nil), "intf.InterfaceL2SegmentRequestMsg")
	proto.RegisterType((*InterfaceL2SegmentResponse)(nil), "intf.InterfaceL2SegmentResponse")
	proto.RegisterType((*InterfaceL2SegmentResponseMsg)(nil), "intf.InterfaceL2SegmentResponseMsg")
	proto.RegisterEnum("intf.IfStatus", IfStatus_name, IfStatus_value)
	proto.RegisterEnum("intf.LifPortType", LifPortType_name, LifPortType_value)
	proto.RegisterEnum("intf.LifQPurpose", LifQPurpose_name, LifQPurpose_value)
	proto.RegisterEnum("intf.IfType", IfType_name, IfType_value)
	proto.RegisterEnum("intf.IfEnicType", IfEnicType_name, IfEnicType_value)
	proto.RegisterEnum("intf.IfTunnelEncapType", IfTunnelEncapType_name, IfTunnelEncapType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Interface service

type InterfaceClient interface {
	// LIF related APIs
	LifCreate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error)
	LifUpdate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error)
	LifDelete(ctx context.Context, in *LifDeleteRequestMsg, opts ...grpc.CallOption) (*LifDeleteResponseMsg, error)
	LifGet(ctx context.Context, in *LifGetRequestMsg, opts ...grpc.CallOption) (*LifGetResponseMsg, error)
	// Queue state related APIs
	LifGetQState(ctx context.Context, in *GetQStateRequestMsg, opts ...grpc.CallOption) (*GetQStateResponseMsg, error)
	LifSetQState(ctx context.Context, in *SetQStateRequestMsg, opts ...grpc.CallOption) (*SetQStateResponseMsg, error)
	// common APIs for all interfaces
	InterfaceCreate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error)
	InterfaceUpdate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error)
	InterfaceDelete(ctx context.Context, in *InterfaceDeleteRequestMsg, opts ...grpc.CallOption) (*InterfaceDeleteResponseMsg, error)
	InterfaceGet(ctx context.Context, in *InterfaceGetRequestMsg, opts ...grpc.CallOption) (*InterfaceGetResponseMsg, error)
	// APIs specific to Uplinks
	AddL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error)
	DelL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error)
}

type interfaceClient struct {
	cc *grpc.ClientConn
}

func NewInterfaceClient(cc *grpc.ClientConn) InterfaceClient {
	return &interfaceClient{cc}
}

func (c *interfaceClient) LifCreate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error) {
	out := new(LifResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifUpdate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error) {
	out := new(LifResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifDelete(ctx context.Context, in *LifDeleteRequestMsg, opts ...grpc.CallOption) (*LifDeleteResponseMsg, error) {
	out := new(LifDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifGet(ctx context.Context, in *LifGetRequestMsg, opts ...grpc.CallOption) (*LifGetResponseMsg, error) {
	out := new(LifGetResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifGetQState(ctx context.Context, in *GetQStateRequestMsg, opts ...grpc.CallOption) (*GetQStateResponseMsg, error) {
	out := new(GetQStateResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifGetQState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifSetQState(ctx context.Context, in *SetQStateRequestMsg, opts ...grpc.CallOption) (*SetQStateResponseMsg, error) {
	out := new(SetQStateResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifSetQState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceCreate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error) {
	out := new(InterfaceResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceUpdate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error) {
	out := new(InterfaceResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceDelete(ctx context.Context, in *InterfaceDeleteRequestMsg, opts ...grpc.CallOption) (*InterfaceDeleteResponseMsg, error) {
	out := new(InterfaceDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceGet(ctx context.Context, in *InterfaceGetRequestMsg, opts ...grpc.CallOption) (*InterfaceGetResponseMsg, error) {
	out := new(InterfaceGetResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) AddL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error) {
	out := new(InterfaceL2SegmentResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/AddL2SegmentOnUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) DelL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error) {
	out := new(InterfaceL2SegmentResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/DelL2SegmentOnUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Interface service

type InterfaceServer interface {
	// LIF related APIs
	LifCreate(context.Context, *LifRequestMsg) (*LifResponseMsg, error)
	LifUpdate(context.Context, *LifRequestMsg) (*LifResponseMsg, error)
	LifDelete(context.Context, *LifDeleteRequestMsg) (*LifDeleteResponseMsg, error)
	LifGet(context.Context, *LifGetRequestMsg) (*LifGetResponseMsg, error)
	// Queue state related APIs
	LifGetQState(context.Context, *GetQStateRequestMsg) (*GetQStateResponseMsg, error)
	LifSetQState(context.Context, *SetQStateRequestMsg) (*SetQStateResponseMsg, error)
	// common APIs for all interfaces
	InterfaceCreate(context.Context, *InterfaceRequestMsg) (*InterfaceResponseMsg, error)
	InterfaceUpdate(context.Context, *InterfaceRequestMsg) (*InterfaceResponseMsg, error)
	InterfaceDelete(context.Context, *InterfaceDeleteRequestMsg) (*InterfaceDeleteResponseMsg, error)
	InterfaceGet(context.Context, *InterfaceGetRequestMsg) (*InterfaceGetResponseMsg, error)
	// APIs specific to Uplinks
	AddL2SegmentOnUplink(context.Context, *InterfaceL2SegmentRequestMsg) (*InterfaceL2SegmentResponseMsg, error)
	DelL2SegmentOnUplink(context.Context, *InterfaceL2SegmentRequestMsg) (*InterfaceL2SegmentResponseMsg, error)
}

func RegisterInterfaceServer(s *grpc.Server, srv InterfaceServer) {
	s.RegisterService(&_Interface_serviceDesc, srv)
}

func _Interface_LifCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifCreate(ctx, req.(*LifRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifUpdate(ctx, req.(*LifRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifDelete(ctx, req.(*LifDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifGet(ctx, req.(*LifGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifGetQState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQStateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifGetQState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifGetQState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifGetQState(ctx, req.(*GetQStateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifSetQState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQStateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifSetQState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifSetQState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifSetQState(ctx, req.(*SetQStateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceCreate(ctx, req.(*InterfaceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceUpdate(ctx, req.(*InterfaceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceDelete(ctx, req.(*InterfaceDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceGet(ctx, req.(*InterfaceGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_AddL2SegmentOnUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceL2SegmentRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).AddL2SegmentOnUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/AddL2SegmentOnUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).AddL2SegmentOnUplink(ctx, req.(*InterfaceL2SegmentRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_DelL2SegmentOnUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceL2SegmentRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).DelL2SegmentOnUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/DelL2SegmentOnUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).DelL2SegmentOnUplink(ctx, req.(*InterfaceL2SegmentRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intf.Interface",
	HandlerType: (*InterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LifCreate",
			Handler:    _Interface_LifCreate_Handler,
		},
		{
			MethodName: "LifUpdate",
			Handler:    _Interface_LifUpdate_Handler,
		},
		{
			MethodName: "LifDelete",
			Handler:    _Interface_LifDelete_Handler,
		},
		{
			MethodName: "LifGet",
			Handler:    _Interface_LifGet_Handler,
		},
		{
			MethodName: "LifGetQState",
			Handler:    _Interface_LifGetQState_Handler,
		},
		{
			MethodName: "LifSetQState",
			Handler:    _Interface_LifSetQState_Handler,
		},
		{
			MethodName: "InterfaceCreate",
			Handler:    _Interface_InterfaceCreate_Handler,
		},
		{
			MethodName: "InterfaceUpdate",
			Handler:    _Interface_InterfaceUpdate_Handler,
		},
		{
			MethodName: "InterfaceDelete",
			Handler:    _Interface_InterfaceDelete_Handler,
		},
		{
			MethodName: "InterfaceGet",
			Handler:    _Interface_InterfaceGet_Handler,
		},
		{
			MethodName: "AddL2SegmentOnUplink",
			Handler:    _Interface_AddL2SegmentOnUplink_Handler,
		},
		{
			MethodName: "DelL2SegmentOnUplink",
			Handler:    _Interface_DelL2SegmentOnUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/interface.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/interface.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 3063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x1a, 0x4d, 0x73, 0x1b, 0x49,
	0xd5, 0xfa, 0x96, 0x9e, 0x64, 0x65, 0xdc, 0x76, 0x62, 0xd9, 0x49, 0x88, 0x77, 0x16, 0x48, 0xf0,
	0x12, 0x67, 0xed, 0x8d, 0xb3, 0xa9, 0x65, 0x53, 0x94, 0x22, 0x2b, 0xb6, 0x36, 0x92, 0x2c, 0xb7,
	0x64, 0x93, 0x85, 0xa2, 0xa6, 0xc6, 0x52, 0x4f, 0x32, 0x58, 0x9a, 0x19, 0xcf, 0x8c, 0xb2, 0xf2,
	0x16, 0x70, 0xe0, 0xc6, 0x05, 0x2e, 0x5c, 0xb8, 0x71, 0xe0, 0x06, 0xbf, 0x80, 0x3f, 0xc0, 0x81,
	0x13, 0xc5, 0x3f, 0xe0, 0x40, 0x71, 0xe4, 0x07, 0x70, 0xa0, 0xfa, 0x63, 0x3e, 0x25, 0x6d, 0xec,
	0x84, 0xa5, 0x38, 0x59, 0xfd, 0xbe, 0xfa, 0x7d, 0xf5, 0xeb, 0xf7, 0x7a, 0x0c, 0xb7, 0x0d, 0xbd,
	0xff, 0xc0, 0xb2, 0x4d, 0xd7, 0x7c, 0xf0, 0x4a, 0x1d, 0x3e, 0xd0, 0x0d, 0x97, 0xd8, 0x9a, 0xda,
	0x27, 0x5b, 0x0c, 0x86, 0xd2, 0xba, 0xe1, 0x6a, 0xeb, 0xd7, 0x03, 0x22, 0xf7, 0xc2, 0x22, 0x0e,
	0x47, 0xae, 0xc7, 0x78, 0x87, 0x3b, 0x0e, 0x79, 0x39, 0x22, 0x86, 0x2b, 0xd0, 0xab, 0x51, 0xf4,
	0xb9, 0x29, 0xf8, 0xe4, 0x5f, 0x26, 0x60, 0xa9, 0xa9, 0x6b, 0x47, 0x5d, 0x57, 0x75, 0x49, 0x4b,
	0xb5, 0xea, 0x86, 0x6b, 0x5f, 0xa0, 0x35, 0xc8, 0x53, 0xe1, 0x8a, 0x31, 0x1e, 0x55, 0x12, 0x1b,
	0x89, 0x7b, 0x8b, 0x38, 0x47, 0xd7, 0xed, 0xf1, 0x08, 0x21, 0x48, 0x3b, 0xfa, 0x97, 0xa4, 0x92,
	0x64, 0x60, 0xf6, 0x1b, 0x55, 0x20, 0x47, 0x0c, 0xd7, 0xd6, 0x89, 0x53, 0x49, 0x71, 0x6a, 0xb1,
	0x44, 0x1f, 0x40, 0xce, 0x1a, 0xdb, 0x96, 0xe9, 0x90, 0x4a, 0x7a, 0x23, 0x71, 0xaf, 0xbc, 0xb3,
	0xb4, 0x45, 0xad, 0xd8, 0xa2, 0x5b, 0x76, 0x38, 0x02, 0x7b, 0x14, 0xf2, 0xe7, 0x50, 0x6a, 0xea,
	0xda, 0x73, 0x72, 0x71, 0xa0, 0x1a, 0x83, 0x21, 0x41, 0xab, 0x90, 0x1d, 0xea, 0x9a, 0xa2, 0x0f,
	0x98, 0x0e, 0xb9, 0x83, 0x05, 0x9c, 0x19, 0xea, 0x5a, 0x63, 0x80, 0xee, 0x00, 0x50, 0xc4, 0x2b,
	0x46, 0xc6, 0x34, 0xc9, 0x1e, 0x2c, 0xe0, 0xc2, 0x50, 0xd7, 0x38, 0xe7, 0xd3, 0x6b, 0xb0, 0x78,
	0x46, 0x2e, 0x14, 0xd3, 0x16, 0x34, 0xf2, 0x9f, 0xd2, 0x90, 0x6b, 0xea, 0x5a, 0xd7, 0x22, 0x7d,
	0xf4, 0x2d, 0x48, 0x8f, 0x88, 0xab, 0x32, 0xa1, 0xc5, 0x9d, 0xa5, 0x2d, 0xee, 0xc6, 0xc3, 0xd3,
	0x9f, 0x90, 0xbe, 0xdb, 0x22, 0xae, 0x8a, 0x19, 0x1a, 0x3d, 0x8a, 0xc9, 0x60, 0xfb, 0x14, 0x77,
	0x90, 0x6f, 0x80, 0xaf, 0x28, 0x2e, 0x9e, 0x91, 0x8b, 0x43, 0x5b, 0x68, 0xbd, 0x06, 0xf9, 0x91,
	0xda, 0x57, 0xd4, 0xc1, 0xc0, 0x66, 0xde, 0x48, 0xe3, 0xdc, 0x48, 0xed, 0x57, 0x07, 0x03, 0x1b,
	0x6d, 0x41, 0xc1, 0x32, 0x6d, 0x57, 0xa1, 0x3b, 0x4e, 0xf9, 0xa3, 0x63, 0xda, 0x6e, 0xef, 0xc2,
	0x22, 0x38, 0x6f, 0x89, 0x5f, 0x54, 0x14, 0xa3, 0xa7, 0x61, 0xc8, 0x70, 0xc7, 0xd2, 0x35, 0x0d,
	0xc3, 0x7d, 0xc8, 0x5b, 0x84, 0xd8, 0xca, 0x50, 0xd7, 0x2a, 0xd9, 0xb9, 0x8a, 0xe5, 0x28, 0x4d,
	0x53, 0xd7, 0xd0, 0x36, 0x94, 0xd4, 0xc1, 0x48, 0x37, 0x14, 0xc7, 0x55, 0xdd, 0xb1, 0x53, 0xc9,
	0xb1, 0xcd, 0xcb, 0x9c, 0xa5, 0xa1, 0x75, 0x19, 0x14, 0x17, 0x19, 0x0d, 0x5f, 0xa0, 0x27, 0x50,
	0xa6, 0x4e, 0x3e, 0xa7, 0x1c, 0x44, 0x19, 0xa9, 0x56, 0x25, 0xbf, 0x91, 0xba, 0x57, 0xdc, 0x59,
	0x0d, 0x22, 0x18, 0x49, 0x1a, 0x5c, 0x1a, 0xea, 0xda, 0x91, 0x23, 0x40, 0x48, 0x86, 0xc5, 0xd7,
	0x43, 0x95, 0x6e, 0x68, 0xeb, 0x96, 0x42, 0x8c, 0x4a, 0x61, 0x23, 0x71, 0x2f, 0x8f, 0x8b, 0x14,
	0xd8, 0xa5, 0xb0, 0xba, 0x81, 0xee, 0x40, 0x91, 0x18, 0xea, 0xe9, 0x90, 0x28, 0xf6, 0x60, 0xa4,
	0x56, 0x8a, 0x8c, 0x02, 0x38, 0x08, 0x0f, 0x46, 0x2a, 0x15, 0x42, 0x31, 0xca, 0x48, 0x9d, 0x28,
	0x67, 0xe4, 0xc2, 0xa9, 0x94, 0x98, 0x17, 0x8a, 0x14, 0xd8, 0x52, 0x27, 0xcf, 0xc9, 0x85, 0x83,
	0xee, 0xc3, 0xb2, 0x4f, 0x63, 0xb9, 0x8a, 0x97, 0x88, 0x8b, 0x8c, 0x52, 0x12, 0x94, 0x1d, 0xb7,
	0x2e, 0x32, 0x72, 0x9b, 0xe7, 0x0e, 0x37, 0xab, 0x52, 0x66, 0x26, 0x09, 0xd7, 0x71, 0x7b, 0xba,
	0xc4, 0xc5, 0xe4, 0x9c, 0x65, 0x13, 0xb7, 0x46, 0x7e, 0x0c, 0x8b, 0x4d, 0x5d, 0xc3, 0xe4, 0x7c,
	0x4c, 0x1c, 0xb7, 0xe5, 0xbc, 0x44, 0x77, 0x21, 0x67, 0xf3, 0x55, 0x25, 0xc1, 0x04, 0x2c, 0xfa,
	0x3e, 0xa1, 0x19, 0x86, 0x3d, 0xac, 0xfc, 0x39, 0x14, 0x28, 0x8c, 0x3b, 0xf4, 0x3e, 0xdf, 0x59,
	0x44, 0x20, 0x31, 0x33, 0x02, 0x74, 0x57, 0x41, 0x7e, 0x7b, 0x3a, 0xc9, 0x43, 0x29, 0x2e, 0x7f,
	0xc2, 0x44, 0x73, 0x95, 0xdf, 0x70, 0x5e, 0x59, 0x2a, 0x26, 0x59, 0x2a, 0xb2, 0xdf, 0xf2, 0x1f,
	0x13, 0x50, 0x64, 0x16, 0x39, 0x96, 0x69, 0x38, 0x04, 0x3d, 0x00, 0x50, 0x2d, 0x3d, 0xaa, 0x99,
	0x24, 0xce, 0x45, 0xd5, 0xd2, 0x3d, 0xdd, 0x54, 0xef, 0x27, 0xba, 0x0b, 0x59, 0x41, 0xcc, 0x0f,
	0xc5, 0xb5, 0xc0, 0x7e, 0x4e, 0x2b, 0xd0, 0x68, 0x1d, 0x0a, 0xaf, 0xbe, 0x50, 0xc4, 0x29, 0x16,
	0xa7, 0xe1, 0xd5, 0x17, 0x4d, 0x76, 0x8a, 0xef, 0x42, 0x56, 0x44, 0x21, 0xcd, 0x9c, 0x78, 0x2d,
	0x96, 0x58, 0x58, 0xa0, 0xe5, 0xef, 0x43, 0x39, 0xa4, 0x2d, 0x0d, 0xc0, 0x7d, 0xc8, 0xdb, 0x62,
	0x29, 0x22, 0x10, 0x9c, 0x23, 0x8f, 0x0e, 0xfb, 0x24, 0xf2, 0xcf, 0xa1, 0xc4, 0x45, 0xee, 0xb3,
	0xd8, 0xc6, 0x5c, 0x9b, 0x60, 0x6a, 0x05, 0xae, 0x8d, 0x78, 0x33, 0x19, 0xf5, 0xa6, 0x04, 0xa9,
	0x73, 0x61, 0xc9, 0x22, 0xa6, 0x3f, 0x59, 0x8a, 0x12, 0x57, 0x19, 0xa8, 0xae, 0xaa, 0xb0, 0xc2,
	0x98, 0x16, 0x29, 0x4a, 0xdc, 0x3d, 0xd5, 0x55, 0xbb, 0xfa, 0x97, 0x44, 0x7e, 0x02, 0xcb, 0xfb,
	0xc4, 0x15, 0x56, 0x05, 0x69, 0xf4, 0x6d, 0x48, 0xdb, 0xe4, 0xdc, 0x11, 0x16, 0x44, 0x92, 0x90,
	0x2b, 0x8a, 0x19, 0x5e, 0xd6, 0x60, 0x31, 0x04, 0x75, 0x2c, 0xaa, 0x3f, 0xb1, 0x6d, 0xd3, 0x56,
	0xfa, 0xe6, 0x80, 0xeb, 0x9f, 0xc1, 0x05, 0x06, 0xa9, 0x99, 0x03, 0x82, 0xae, 0x43, 0xf6, 0x5c,
	0x09, 0x05, 0x3d, 0x73, 0xce, 0xaa, 0xcf, 0x1d, 0x28, 0x9e, 0x8f, 0xc9, 0x98, 0x28, 0xdc, 0xe9,
	0xd4, 0x86, 0x12, 0x06, 0x06, 0x62, 0xd2, 0xe5, 0x2a, 0xac, 0x84, 0xd4, 0x0c, 0xbc, 0xfd, 0x1d,
	0xc8, 0x50, 0x57, 0x7a, 0x8a, 0x2e, 0x4f, 0x29, 0xea, 0x58, 0x98, 0x53, 0xc8, 0x2f, 0xa0, 0xd8,
	0x79, 0xd8, 0xb1, 0xcd, 0x97, 0x4d, 0xf5, 0x94, 0x0c, 0xd1, 0x0d, 0xc8, 0x86, 0x9c, 0x5c, 0xc0,
	0x62, 0x85, 0x6e, 0x42, 0xc1, 0xb2, 0xcd, 0x97, 0x8a, 0xa1, 0x8e, 0x78, 0x6a, 0x17, 0x70, 0x9e,
	0x02, 0xda, 0xea, 0x88, 0xa0, 0x15, 0xc8, 0x0c, 0x29, 0x37, 0xd3, 0xb0, 0x80, 0xf9, 0x42, 0xfe,
	0x7d, 0xc2, 0x0b, 0x62, 0xf7, 0xbf, 0x1f, 0xc4, 0xbb, 0xde, 0x96, 0x69, 0x71, 0x27, 0x30, 0x0b,
	0x43, 0x96, 0x08, 0x2d, 0xe2, 0x3e, 0xcc, 0x4c, 0xf9, 0xf0, 0x09, 0x2c, 0x77, 0xaf, 0x16, 0xea,
	0x6e, 0x38, 0xd4, 0x5b, 0x5e, 0xa8, 0xbb, 0x97, 0x0a, 0x35, 0x0d, 0x59, 0xf7, 0xaa, 0x21, 0xeb,
	0x46, 0x43, 0x76, 0x0e, 0x52, 0x53, 0xd7, 0xf6, 0xc8, 0x90, 0xf8, 0x1a, 0x7f, 0xcd, 0x57, 0xa4,
	0xbc, 0x0f, 0xcb, 0xf1, 0x2d, 0xa9, 0xd2, 0x1f, 0xc6, 0xcb, 0xea, 0x0d, 0x5f, 0x50, 0x84, 0x36,
	0xa8, 0xaf, 0xfb, 0xb0, 0x12, 0x42, 0x06, 0xe6, 0xc7, 0x0b, 0x5a, 0xea, 0x0d, 0x05, 0x4d, 0xfe,
	0x67, 0x12, 0xa0, 0xa9, 0x6b, 0xbd, 0x09, 0x5d, 0x3b, 0x34, 0x3f, 0x35, 0x5b, 0x1d, 0x11, 0x47,
	0x31, 0xcf, 0x44, 0x6a, 0xe5, 0x39, 0xe0, 0xf0, 0x0c, 0x6d, 0xc2, 0xd2, 0xd8, 0xd0, 0xfb, 0xaa,
	0xe3, 0x2a, 0x01, 0x11, 0x3f, 0x69, 0xd7, 0x04, 0xe2, 0x99, 0x47, 0xbb, 0x05, 0xcb, 0xa3, 0xf1,
	0xd0, 0xe5, 0xd4, 0xa7, 0x3e, 0x35, 0xaf, 0x84, 0x4b, 0x3e, 0xea, 0x69, 0x88, 0xfe, 0xd4, 0x36,
	0xd5, 0x41, 0x8c, 0x3e, 0xcd, 0xe9, 0x7d, 0x94, 0x4f, 0xbf, 0x06, 0xf9, 0xd3, 0x0b, 0x97, 0x13,
	0x65, 0x78, 0x79, 0x65, 0xeb, 0xc3, 0x33, 0x74, 0x0f, 0x24, 0x4f, 0x4d, 0x9f, 0x24, 0xcb, 0x48,
	0xca, 0x02, 0xfe, 0x54, 0x50, 0x7e, 0x17, 0x50, 0x48, 0x49, 0x8f, 0x36, 0xc7, 0x68, 0xa5, 0x40,
	0xc7, 0x80, 0x3a, 0xa4, 0xa2, 0x47, 0x9d, 0xe7, 0xd4, 0x81, 0x86, 0x82, 0x5a, 0x82, 0x94, 0xeb,
	0x98, 0xec, 0xf2, 0x4f, 0x63, 0xfa, 0x53, 0xfe, 0x6b, 0x86, 0xb9, 0x1a, 0x0b, 0x57, 0xbf, 0x07,
	0x25, 0xe1, 0x45, 0xd7, 0x74, 0xd5, 0xa1, 0xf0, 0x76, 0x91, 0xc3, 0x7a, 0x14, 0x14, 0x8d, 0x46,
	0xf2, 0x32, 0xd1, 0x48, 0x5d, 0x22, 0x1a, 0x5a, 0xdc, 0xbb, 0x3e, 0xea, 0xd9, 0xcc, 0x68, 0x04,
	0xf4, 0x99, 0x58, 0x34, 0x9e, 0xcd, 0x8a, 0x46, 0xf6, 0xcd, 0xd1, 0xc8, 0x5d, 0x21, 0x1a, 0xf9,
	0x2b, 0x45, 0xa3, 0x30, 0x27, 0x1a, 0x2b, 0x90, 0x19, 0xd8, 0xa6, 0xe5, 0x54, 0x80, 0x5f, 0x0c,
	0x6c, 0x81, 0x56, 0x21, 0x67, 0x98, 0xca, 0xe9, 0x58, 0x73, 0x58, 0x0b, 0x96, 0xc6, 0x59, 0xc3,
	0x7c, 0x3a, 0xd6, 0x1c, 0x5a, 0xbe, 0x59, 0xa9, 0xe1, 0x7d, 0x57, 0x1a, 0x8b, 0x15, 0x0d, 0xaa,
	0xed, 0xf0, 0x16, 0x2b, 0x8d, 0xe9, 0x4f, 0x5a, 0xa6, 0xfa, 0x76, 0x5f, 0x11, 0xd4, 0x65, 0x5e,
	0x8c, 0xfb, 0x76, 0xbf, 0xce, 0x19, 0x82, 0x08, 0x3e, 0x7a, 0x58, 0xb9, 0x16, 0x8e, 0xe0, 0xa3,
	0x87, 0x94, 0x57, 0x20, 0xb7, 0x77, 0x3e, 0xae, 0x48, 0x9c, 0x97, 0x43, 0xb6, 0x77, 0x3e, 0x0e,
	0xa1, 0x77, 0x76, 0x77, 0x2b, 0x4b, 0x61, 0xf4, 0xce, 0xee, 0x6e, 0x08, 0xbd, 0xbb, 0xbd, 0x5d,
	0x41, 0x61, 0xf4, 0xee, 0xf6, 0x36, 0x2d, 0xd8, 0x9e, 0xf0, 0x0f, 0x77, 0x1e, 0x56, 0x96, 0x19,
	0x5e, 0x70, 0x50, 0x48, 0x98, 0x60, 0x77, 0xfb, 0x71, 0x65, 0x25, 0x42, 0xb0, 0xbb, 0xfd, 0x98,
	0x5e, 0xf0, 0x7e, 0x82, 0xd2, 0x26, 0xb3, 0x72, 0x3d, 0x9a, 0xa1, 0x2d, 0x75, 0x22, 0x0f, 0x20,
	0x2f, 0x7a, 0x1f, 0x3a, 0xf2, 0xe4, 0xdd, 0x09, 0x2b, 0x3d, 0x8e, 0xa8, 0x9f, 0x92, 0x5f, 0xc6,
	0x44, 0x7d, 0xc1, 0x39, 0x77, 0xe2, 0x13, 0xdb, 0x1e, 0x71, 0x32, 0x46, 0x8c, 0x3d, 0x62, 0x9b,
	0xff, 0x90, 0x7f, 0x93, 0x60, 0x8d, 0x28, 0xef, 0x0d, 0xfe, 0x07, 0x75, 0x1a, 0x7d, 0x13, 0x32,
	0x5c, 0xb5, 0x14, 0xa3, 0x2f, 0x47, 0xba, 0x3c, 0x07, 0x73, 0xa4, 0x5c, 0x65, 0x17, 0x48, 0xa0,
	0x15, 0x6f, 0xd0, 0x62, 0xa5, 0x7c, 0xd9, 0xe7, 0x0d, 0x08, 0x83, 0x3a, 0xfe, 0x8b, 0x04, 0x6b,
	0xf1, 0x44, 0x33, 0xc1, 0x7a, 0xd2, 0xf7, 0x20, 0xed, 0x58, 0xa4, 0x2f, 0x4c, 0x8b, 0x35, 0xd8,
	0x0c, 0x75, 0xf9, 0x2e, 0xf4, 0x72, 0x76, 0xd4, 0xd9, 0x24, 0x1c, 0xd2, 0x81, 0xdf, 0x49, 0xf1,
	0x4e, 0x73, 0x25, 0x6a, 0xc9, 0x54, 0xb3, 0xf9, 0xf7, 0x04, 0x40, 0x43, 0xab, 0x1b, 0x7a, 0xbf,
	0x61, 0x68, 0x26, 0xba, 0x0f, 0x05, 0x62, 0xe8, 0x7d, 0x3e, 0xf3, 0x79, 0xad, 0xb5, 0x68, 0xfa,
	0x29, 0x11, 0x1f, 0xf9, 0x88, 0xf8, 0x85, 0x9e, 0xc0, 0x12, 0xed, 0x6a, 0x2e, 0x1b, 0x2e, 0x3a,
	0xa2, 0x3d, 0x0f, 0x45, 0xec, 0x3d, 0x28, 0xf9, 0xa3, 0xbf, 0xe2, 0xf7, 0x38, 0x45, 0x1f, 0xc6,
	0x86, 0xe7, 0xa2, 0x37, 0x9f, 0x12, 0xc7, 0x61, 0xc5, 0x2f, 0x8b, 0x41, 0x8c, 0xa8, 0xc4, 0x71,
	0x68, 0xc2, 0x13, 0xa3, 0xaf, 0x5a, 0x0a, 0x9b, 0xdf, 0xf4, 0x81, 0x18, 0x3d, 0x8b, 0x0c, 0x78,
	0x32, 0x54, 0x8d, 0xc6, 0x40, 0xfe, 0x57, 0x02, 0xa4, 0x9e, 0xad, 0x6a, 0x9a, 0xde, 0xaf, 0x0d,
	0x55, 0xc7, 0x61, 0xa6, 0x6e, 0x40, 0x69, 0x60, 0xba, 0xdb, 0xe7, 0x8a, 0xd5, 0x67, 0x13, 0x5f,
	0x82, 0xcf, 0x73, 0x0c, 0xd6, 0xe9, 0xd3, 0x81, 0xef, 0x16, 0x80, 0x6e, 0x29, 0x03, 0x87, 0xe3,
	0x93, 0x0c, 0x9f, 0xd7, 0xad, 0x3d, 0x87, 0x61, 0xeb, 0x70, 0x7d, 0x40, 0x34, 0x75, 0x3c, 0x74,
	0x15, 0x97, 0xcb, 0x56, 0xfa, 0x54, 0xb8, 0x08, 0xdb, 0xd2, 0xd6, 0xb9, 0xe9, 0x6c, 0x85, 0x77,
	0xc5, 0xcb, 0x82, 0x3e, 0x0c, 0x44, 0xc7, 0xb0, 0x1e, 0x61, 0xa7, 0xe7, 0x96, 0x37, 0x6d, 0x74,
	0x88, 0xe5, 0xb3, 0xc6, 0xda, 0x94, 0xac, 0x23, 0x4a, 0xd1, 0x52, 0x2d, 0x7c, 0xc3, 0x0d, 0x41,
	0x7b, 0xa6, 0x07, 0x97, 0xff, 0x9c, 0x80, 0x52, 0x43, 0x3b, 0xb6, 0x86, 0xba, 0x71, 0xc6, 0xcc,
	0x0d, 0x4f, 0xe7, 0x89, 0xe8, 0x74, 0xbe, 0x05, 0xcb, 0x86, 0xea, 0xea, 0xaf, 0x89, 0x12, 0x89,
	0x06, 0xef, 0x43, 0x97, 0x38, 0xaa, 0x19, 0x8a, 0xc9, 0x74, 0xd8, 0x52, 0xf1, 0xb0, 0x35, 0xe0,
	0xba, 0x3d, 0x89, 0xfa, 0x45, 0xd1, 0x0d, 0xcd, 0x14, 0x2d, 0xab, 0x68, 0x95, 0xe2, 0x31, 0xc1,
	0xc8, 0x9e, 0xc4, 0x61, 0xf2, 0xbf, 0x13, 0x50, 0xf6, 0x2c, 0xe9, 0xd4, 0x98, 0x2d, 0x32, 0x2c,
	0x8e, 0xd9, 0x5a, 0xb1, 0xfa, 0x21, 0x83, 0x8a, 0x1c, 0xd8, 0xe9, 0xff, 0xdf, 0x1b, 0x45, 0x2f,
	0xd8, 0x11, 0x19, 0x9d, 0x12, 0x5b, 0x09, 0x86, 0x82, 0xcc, 0x46, 0x8a, 0x5e, 0xb0, 0x1c, 0xde,
	0xf0, 0x26, 0x67, 0x1d, 0x50, 0xc3, 0x7b, 0x5a, 0x0b, 0x1e, 0x9b, 0xde, 0x87, 0x92, 0xff, 0xe0,
	0xe6, 0x3d, 0x39, 0x65, 0x0f, 0x16, 0x70, 0xd1, 0x87, 0x36, 0x06, 0xe8, 0x36, 0x14, 0xa6, 0xdf,
	0x9d, 0xf2, 0xf3, 0x9f, 0x9d, 0x1c, 0x58, 0x6a, 0x68, 0xbd, 0xb1, 0x61, 0x90, 0xe1, 0xc9, 0x84,
	0x9e, 0x1c, 0x51, 0x11, 0x86, 0x66, 0x5f, 0x1d, 0x2a, 0x2e, 0xb1, 0xfc, 0x1b, 0x82, 0x57, 0xee,
	0x46, 0x47, 0x1c, 0x42, 0x9c, 0x67, 0x24, 0x3d, 0x62, 0xd1, 0x5e, 0xd6, 0x26, 0x23, 0xd3, 0x25,
	0x8c, 0x3e, 0x39, 0x87, 0xbe, 0xc0, 0x69, 0x7a, 0xc4, 0x92, 0x7f, 0xc5, 0x12, 0x95, 0xef, 0xca,
	0x36, 0x7c, 0x04, 0xc0, 0x0f, 0x74, 0xa8, 0x06, 0xad, 0x7a, 0x35, 0x88, 0xd3, 0xd5, 0x29, 0x9e,
	0x95, 0xa2, 0x02, 0xf1, 0x7e, 0xa2, 0xc7, 0x00, 0xaf, 0x27, 0xac, 0x06, 0xd0, 0x90, 0xf0, 0x9d,
	0x63, 0x7c, 0xbe, 0x55, 0x07, 0x0b, 0xb8, 0xf0, 0xda, 0x5b, 0x3c, 0x2d, 0x79, 0x3b, 0x52, 0x4e,
	0xf9, 0x33, 0x28, 0x34, 0xb4, 0x5a, 0xe7, 0x98, 0x29, 0xf3, 0x6e, 0x05, 0x4e, 0xfe, 0x47, 0x1a,
	0x16, 0xfd, 0xe8, 0x5d, 0xe5, 0x39, 0xef, 0xd3, 0xd9, 0x77, 0x60, 0x45, 0xd8, 0x33, 0x95, 0x10,
	0xd1, 0x9b, 0x70, 0x03, 0xd2, 0xcc, 0x79, 0x29, 0xe6, 0xbc, 0x92, 0xef, 0x04, 0xea, 0x31, 0x86,
	0x99, 0x7a, 0x61, 0x4b, 0xbf, 0xf9, 0x85, 0xed, 0x21, 0x94, 0x74, 0x4d, 0x61, 0xb7, 0x03, 0xf3,
	0x70, 0x36, 0xdc, 0x00, 0x04, 0x57, 0xc8, 0xc1, 0x02, 0x06, 0x3d, 0xb8, 0x50, 0x3e, 0x81, 0xb2,
	0xae, 0x29, 0xe2, 0xb4, 0x32, 0xbe, 0x5c, 0xd8, 0x7b, 0xe1, 0x12, 0x75, 0xb0, 0x80, 0x4b, 0x7a,
	0xb8, 0x64, 0x55, 0x61, 0x29, 0xe0, 0xb5, 0xc4, 0xb6, 0x79, 0xc6, 0xbe, 0x12, 0x65, 0xe7, 0x75,
	0xe1, 0x60, 0x01, 0x97, 0x3d, 0x01, 0x9d, 0xf0, 0xf6, 0x2e, 0x8b, 0x3e, 0xe7, 0x2f, 0x44, 0xb7,
	0x0f, 0x12, 0x8f, 0x6f, 0x1f, 0x4a, 0xc4, 0x6d, 0x28, 0xea, 0x9a, 0xd2, 0xb7, 0xc6, 0x9c, 0x11,
	0xc2, 0xb7, 0xb6, 0x9f, 0x21, 0x34, 0x93, 0x74, 0xad, 0x66, 0x8d, 0x19, 0xcb, 0x2e, 0x94, 0xdd,
	0x89, 0x72, 0x6e, 0x3a, 0x8a, 0xda, 0x77, 0x75, 0xd3, 0xe0, 0x2d, 0x2a, 0xe5, 0xa2, 0x05, 0xfc,
	0xe8, 0xb0, 0x5b, 0xe5, 0x60, 0x5c, 0x72, 0x27, 0x47, 0xa6, 0x23, 0x56, 0x94, 0xcd, 0x8e, 0xb2,
	0x95, 0xe6, 0xb0, 0xd9, 0x21, 0xb6, 0xa7, 0x05, 0xc8, 0xe9, 0x1a, 0x4f, 0xda, 0x3d, 0x58, 0xf6,
	0x93, 0xe2, 0x12, 0x8d, 0x4d, 0x24, 0x27, 0x83, 0xc6, 0xe6, 0x47, 0x70, 0x2d, 0xc0, 0xf0, 0xa8,
	0x7f, 0xc0, 0x6a, 0xc8, 0x57, 0xbe, 0x02, 0xe6, 0xfd, 0x47, 0xc0, 0x9b, 0x53, 0x05, 0x27, 0x28,
	0x37, 0xac, 0xba, 0x04, 0x2a, 0xbe, 0xed, 0x5b, 0xde, 0xfd, 0x58, 0x17, 0x75, 0x3d, 0x6e, 0x50,
	0xa4, 0x97, 0x92, 0x9f, 0xc3, 0xca, 0xd4, 0xa6, 0xd4, 0x31, 0x1f, 0x4d, 0x35, 0x4a, 0xab, 0x31,
	0x41, 0x33, 0x7a, 0xa5, 0x9f, 0xc1, 0x0d, 0x1f, 0xfd, 0x56, 0x2f, 0x10, 0xef, 0x74, 0xaa, 0xe5,
	0x2e, 0xac, 0xcd, 0xde, 0x9e, 0x1a, 0xf4, 0x28, 0x1e, 0xe9, 0x5b, 0x31, 0xa1, 0x73, 0xde, 0x24,
	0x5a, 0xb0, 0x3e, 0x45, 0xf2, 0x0e, 0x2f, 0x13, 0xbf, 0xa3, 0x97, 0x75, 0x38, 0x16, 0xb4, 0x9d,
	0x2d, 0x1b, 0xe3, 0x91, 0xe2, 0x4e, 0x14, 0x4b, 0xed, 0x9f, 0x11, 0x31, 0x67, 0xe4, 0x70, 0xc9,
	0x18, 0x8f, 0x7a, 0x93, 0x0e, 0x87, 0xd1, 0x6e, 0x4c, 0x50, 0xb1, 0xb1, 0x90, 0x79, 0x26, 0x87,
	0x81, 0xd1, 0xb0, 0x79, 0xd0, 0x93, 0x63, 0x07, 0x72, 0x52, 0xbe, 0x1c, 0x1c, 0x97, 0x63, 0x7b,
	0x72, 0xd2, 0xbe, 0x1c, 0xcc, 0xe5, 0xc8, 0x5f, 0x86, 0x8e, 0xca, 0xd5, 0x87, 0x93, 0x77, 0x0b,
	0x61, 0x2b, 0x94, 0x41, 0xd1, 0x11, 0xe4, 0xa3, 0x78, 0xfc, 0xd6, 0x62, 0x12, 0x67, 0x0d, 0x22,
	0x7f, 0x49, 0x84, 0xd2, 0x3b, 0x3c, 0x8e, 0xbc, 0xc5, 0x13, 0x39, 0x9f, 0x5f, 0xb8, 0x35, 0x33,
	0xab, 0x04, 0x9f, 0x62, 0x82, 0xf3, 0x97, 0xba, 0xc4, 0xf9, 0x43, 0x9b, 0xde, 0x2c, 0x93, 0x8e,
	0x94, 0xed, 0x48, 0x86, 0x78, 0x13, 0xcd, 0x11, 0xac, 0xce, 0x32, 0x86, 0x67, 0x77, 0xfc, 0xb8,
	0xae, 0xcf, 0x72, 0xcf, 0xd4, 0x89, 0xfd, 0x5b, 0x22, 0xe4, 0xf0, 0xe6, 0x4e, 0x97, 0xb7, 0x72,
	0x57, 0xb9, 0x88, 0x7b, 0xb0, 0x1a, 0xb4, 0x85, 0xb3, 0x22, 0x7f, 0x7b, 0x2b, 0xf8, 0x7a, 0xe9,
	0xef, 0x10, 0x84, 0x7f, 0xc5, 0xc7, 0x86, 0x07, 0x9f, 0x4f, 0x61, 0x51, 0x74, 0x15, 0x42, 0x56,
	0xea, 0x4d, 0x59, 0x14, 0xea, 0x32, 0xe4, 0x13, 0xb8, 0x35, 0x6d, 0xd4, 0x55, 0x6a, 0x41, 0xc4,
	0x13, 0xb3, 0x6b, 0x41, 0x48, 0xee, 0x5b, 0xe6, 0x94, 0xfc, 0x63, 0xb8, 0x3d, 0x5f, 0x1c, 0xd5,
	0xf3, 0xd3, 0xa9, 0xa8, 0x6e, 0xcc, 0x53, 0x74, 0x3a, 0xb6, 0x9b, 0x7b, 0x90, 0xf7, 0xae, 0x20,
	0x84, 0xa0, 0xdc, 0x78, 0xa6, 0x74, 0x7b, 0xd5, 0xde, 0x71, 0x57, 0x69, 0x1f, 0xb6, 0xeb, 0xd2,
	0x02, 0x92, 0xa0, 0x14, 0xc0, 0x8e, 0x3b, 0x52, 0x22, 0x4a, 0xb5, 0x77, 0xf8, 0x83, 0xb6, 0x94,
	0xdc, 0xfc, 0x35, 0xff, 0xb8, 0xe4, 0x7d, 0xce, 0x44, 0x37, 0x00, 0x35, 0x1b, 0xcf, 0x94, 0xce,
	0x21, 0xee, 0x29, 0xbd, 0xcf, 0x3b, 0x75, 0x4f, 0xda, 0x75, 0x58, 0x8a, 0xc2, 0xf7, 0x5a, 0x55,
	0x29, 0x81, 0x6e, 0x41, 0x25, 0x0a, 0xee, 0x3c, 0x54, 0x1a, 0xed, 0x7d, 0x5c, 0xef, 0x76, 0xa5,
	0x24, 0xba, 0x09, 0xab, 0x53, 0xd8, 0x3a, 0x47, 0xa6, 0x66, 0xec, 0x54, 0xeb, 0x36, 0xa4, 0xf4,
	0xe6, 0x1f, 0x92, 0x4c, 0x23, 0xef, 0x83, 0x33, 0x5a, 0x87, 0x1b, 0x94, 0xee, 0xe8, 0xb8, 0x7e,
	0x5c, 0x57, 0x3a, 0xc7, 0xb8, 0x73, 0xd8, 0xf5, 0xb5, 0x12, 0x1b, 0x44, 0x71, 0xd5, 0xbd, 0x56,
	0xa3, 0x2d, 0x25, 0x50, 0x05, 0x56, 0xa6, 0x91, 0xbd, 0x17, 0x52, 0x72, 0x36, 0x06, 0xbf, 0x90,
	0x52, 0xe8, 0x0e, 0xdc, 0x9c, 0x81, 0xd9, 0x6b, 0x55, 0x95, 0x6e, 0xbd, 0xbd, 0x27, 0xa5, 0xbf,
	0x82, 0x00, 0xd7, 0x6b, 0x27, 0x52, 0x66, 0xb6, 0xec, 0xda, 0x91, 0x94, 0x9d, 0x8d, 0xa9, 0x1f,
	0x49, 0xb9, 0x39, 0x26, 0x9e, 0xb4, 0xea, 0x52, 0x1e, 0xdd, 0x86, 0xb5, 0x69, 0x5c, 0xb7, 0x77,
	0x88, 0xab, 0xfb, 0x75, 0xa9, 0xb0, 0xf9, 0x53, 0xc8, 0xf2, 0xc6, 0x56, 0xc4, 0x3b, 0x1c, 0xb3,
	0x10, 0xa4, 0xde, 0x6e, 0xd4, 0xfc, 0x0c, 0x60, 0x90, 0xe3, 0x4e, 0xb3, 0xd1, 0x7e, 0x2e, 0x25,
	0x69, 0x64, 0xa3, 0x30, 0xa5, 0x53, 0x93, 0x52, 0x61, 0xd2, 0xde, 0x71, 0xbb, 0x5d, 0x6f, 0x4a,
	0x69, 0x74, 0x0d, 0x8a, 0x1e, 0xac, 0xd6, 0x39, 0x96, 0x32, 0x9b, 0x67, 0xde, 0xe3, 0x09, 0xd3,
	0x80, 0x4b, 0xa2, 0x5b, 0xc5, 0x53, 0x27, 0x02, 0x3e, 0xee, 0xd6, 0xf7, 0xa5, 0x04, 0x8d, 0x7f,
	0x04, 0xdc, 0x39, 0x69, 0x56, 0xdb, 0x52, 0x12, 0xad, 0xc2, 0x72, 0x04, 0xbe, 0xd7, 0xc0, 0xf5,
	0x5a, 0x4f, 0x4a, 0x6d, 0xe2, 0x60, 0x3c, 0xf3, 0x07, 0x20, 0xea, 0x1e, 0xaa, 0x12, 0xd3, 0x50,
	0xa9, 0xb7, 0x6b, 0xd5, 0x4e, 0x64, 0xef, 0x6f, 0xc0, 0xfa, 0x4c, 0xf4, 0xc9, 0x0b, 0xba, 0x59,
	0x62, 0xe7, 0xb7, 0x39, 0x28, 0xf8, 0xa7, 0x0d, 0x3d, 0x66, 0x5f, 0x69, 0x6b, 0x36, 0x51, 0x5d,
	0x82, 0x96, 0x43, 0xdf, 0x28, 0xbd, 0xd2, 0xb2, 0xbe, 0x32, 0xf5, 0xe1, 0xb2, 0xe5, 0xbc, 0x94,
	0x17, 0x04, 0xe7, 0xb1, 0x35, 0xb8, 0x32, 0xe7, 0x1e, 0xe3, 0xe4, 0xad, 0x07, 0x5a, 0x9b, 0xfd,
	0x09, 0x85, 0xf2, 0xaf, 0x4f, 0xa1, 0xc2, 0x52, 0xbe, 0x07, 0x59, 0xfe, 0xc4, 0x85, 0x6e, 0xcc,
	0x78, 0xba, 0xa3, 0xfc, 0xab, 0xb3, 0x1e, 0xc2, 0x38, 0xf3, 0x3e, 0xfb, 0x4f, 0x0e, 0xff, 0x63,
	0xa2, 0xa7, 0xc5, 0x8c, 0x8f, 0xa0, 0x9e, 0x16, 0xb3, 0x3e, 0x3c, 0xfa, 0x82, 0xba, 0x71, 0x41,
	0xdd, 0xf9, 0x82, 0xba, 0xb3, 0x05, 0x7d, 0x16, 0x6a, 0xc4, 0x45, 0x38, 0xd6, 0xa6, 0xfa, 0xd3,
	0xb8, 0xac, 0x59, 0x8d, 0x6e, 0x4c, 0x96, 0x08, 0xd0, 0x5b, 0xcb, 0x3a, 0x09, 0xc9, 0x12, 0x21,
	0xbb, 0xf3, 0x55, 0x7d, 0x26, 0x95, 0xb8, 0x31, 0x87, 0x20, 0x2c, 0xb7, 0x05, 0xa5, 0xf0, 0x4d,
	0x8e, 0x6e, 0xcd, 0x6d, 0x7e, 0xa8, 0xc4, 0xdb, 0xf3, 0xef, 0x7e, 0x2e, 0x4e, 0x85, 0x95, 0xea,
	0x60, 0xe0, 0x5f, 0x1e, 0x87, 0x06, 0x9f, 0x09, 0x91, 0x3c, 0xff, 0x7a, 0xf1, 0x85, 0xbf, 0xff,
	0xa6, 0x2b, 0xc8, 0xdf, 0x62, 0x8f, 0x0c, 0xbf, 0xce, 0x2d, 0x9e, 0xc2, 0x0f, 0xf3, 0xaf, 0xd4,
	0x21, 0xfb, 0xc7, 0xa7, 0xd3, 0x2c, 0xfb, 0xf3, 0xd1, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4b,
	0x1a, 0xe6, 0x47, 0x75, 0x25, 0x00, 0x00,
}
