// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interface.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IfStatus status reflects the current status of Interface
type IfStatus int32

const (
	IfStatus_IF_STATUS_NONE IfStatus = 0
	IfStatus_IF_STATUS_UP   IfStatus = 1
	IfStatus_IF_STATUS_DOWN IfStatus = 2
)

var IfStatus_name = map[int32]string{
	0: "IF_STATUS_NONE",
	1: "IF_STATUS_UP",
	2: "IF_STATUS_DOWN",
}
var IfStatus_value = map[string]int32{
	"IF_STATUS_NONE": 0,
	"IF_STATUS_UP":   1,
	"IF_STATUS_DOWN": 2,
}

func (x IfStatus) String() string {
	return proto.EnumName(IfStatus_name, int32(x))
}
func (IfStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{0} }

// Types of LIF ports
type LifPortType int32

const (
	LifPortType_LIF_PORT_TYPE_NONE       LifPortType = 0
	LifPortType_LIF_PORT_TYPE_DMA        LifPortType = 1
	LifPortType_LIF_PORT_TYPE_P4_INGRESS LifPortType = 2
	LifPortType_LIF_PORT_TYPE_P4_EGRESS  LifPortType = 3
	LifPortType_LIF_PORT_TYPE_NCSI       LifPortType = 4
)

var LifPortType_name = map[int32]string{
	0: "LIF_PORT_TYPE_NONE",
	1: "LIF_PORT_TYPE_DMA",
	2: "LIF_PORT_TYPE_P4_INGRESS",
	3: "LIF_PORT_TYPE_P4_EGRESS",
	4: "LIF_PORT_TYPE_NCSI",
}
var LifPortType_value = map[string]int32{
	"LIF_PORT_TYPE_NONE":       0,
	"LIF_PORT_TYPE_DMA":        1,
	"LIF_PORT_TYPE_P4_INGRESS": 2,
	"LIF_PORT_TYPE_P4_EGRESS":  3,
	"LIF_PORT_TYPE_NCSI":       4,
}

func (x LifPortType) String() string {
	return proto.EnumName(LifPortType_name, int32(x))
}
func (LifPortType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{1} }

// Different purposes of LIF queues. This is not the same as
// Queue type (type_num field in LifQStateMapEntry). This is
// application (e.g. TCP, RDMA, Storage) specific and is specified
// on a per LIF per Queue Type bases. In other words, for one LIF
// type 0 can be TX Queue and for another LIF type 0 can be RX Queue.
type LifQPurpose int32

const (
	LifQPurpose_LIF_QUEUE_PURPOSE_NONE      LifQPurpose = 0
	LifQPurpose_LIF_QUEUE_PURPOSE_ADMIN     LifQPurpose = 1
	LifQPurpose_LIF_QUEUE_PURPOSE_TX        LifQPurpose = 2
	LifQPurpose_LIF_QUEUE_PURPOSE_RX        LifQPurpose = 3
	LifQPurpose_LIF_QUEUE_PURPOSE_RDMA_SEND LifQPurpose = 4
	LifQPurpose_LIF_QUEUE_PURPOSE_RDMA_RECV LifQPurpose = 5
	LifQPurpose_LIF_QUEUE_PURPOSE_CQ        LifQPurpose = 6
	LifQPurpose_LIF_QUEUE_PURPOSE_EQ        LifQPurpose = 7
	LifQPurpose_LIF_QUEUE_PURPOSE_NVME      LifQPurpose = 8
	LifQPurpose_LIF_QUEUE_PURPOSE_STORAGE   LifQPurpose = 9
	LifQPurpose_LIF_QUEUE_PURPOSE_VIRTIO_TX LifQPurpose = 10
	LifQPurpose_LIF_QUEUE_PURPOSE_VIRTIO_RX LifQPurpose = 11
	LifQPurpose_LIF_QUEUE_PURPOSE_SVC       LifQPurpose = 12
	LifQPurpose_LIF_QUEUE_PURPOSE_NVME_SQ   LifQPurpose = 13
	LifQPurpose_LIF_QUEUE_PURPOSE_NVME_CQ   LifQPurpose = 14
	LifQPurpose_LIF_QUEUE_PURPOSE_NVME_ARMQ LifQPurpose = 15
	LifQPurpose_LIF_QUEUE_PURPOSE_NVME_SESS LifQPurpose = 16
)

var LifQPurpose_name = map[int32]string{
	0:  "LIF_QUEUE_PURPOSE_NONE",
	1:  "LIF_QUEUE_PURPOSE_ADMIN",
	2:  "LIF_QUEUE_PURPOSE_TX",
	3:  "LIF_QUEUE_PURPOSE_RX",
	4:  "LIF_QUEUE_PURPOSE_RDMA_SEND",
	5:  "LIF_QUEUE_PURPOSE_RDMA_RECV",
	6:  "LIF_QUEUE_PURPOSE_CQ",
	7:  "LIF_QUEUE_PURPOSE_EQ",
	8:  "LIF_QUEUE_PURPOSE_NVME",
	9:  "LIF_QUEUE_PURPOSE_STORAGE",
	10: "LIF_QUEUE_PURPOSE_VIRTIO_TX",
	11: "LIF_QUEUE_PURPOSE_VIRTIO_RX",
	12: "LIF_QUEUE_PURPOSE_SVC",
	13: "LIF_QUEUE_PURPOSE_NVME_SQ",
	14: "LIF_QUEUE_PURPOSE_NVME_CQ",
	15: "LIF_QUEUE_PURPOSE_NVME_ARMQ",
	16: "LIF_QUEUE_PURPOSE_NVME_SESS",
}
var LifQPurpose_value = map[string]int32{
	"LIF_QUEUE_PURPOSE_NONE":      0,
	"LIF_QUEUE_PURPOSE_ADMIN":     1,
	"LIF_QUEUE_PURPOSE_TX":        2,
	"LIF_QUEUE_PURPOSE_RX":        3,
	"LIF_QUEUE_PURPOSE_RDMA_SEND": 4,
	"LIF_QUEUE_PURPOSE_RDMA_RECV": 5,
	"LIF_QUEUE_PURPOSE_CQ":        6,
	"LIF_QUEUE_PURPOSE_EQ":        7,
	"LIF_QUEUE_PURPOSE_NVME":      8,
	"LIF_QUEUE_PURPOSE_STORAGE":   9,
	"LIF_QUEUE_PURPOSE_VIRTIO_TX": 10,
	"LIF_QUEUE_PURPOSE_VIRTIO_RX": 11,
	"LIF_QUEUE_PURPOSE_SVC":       12,
	"LIF_QUEUE_PURPOSE_NVME_SQ":   13,
	"LIF_QUEUE_PURPOSE_NVME_CQ":   14,
	"LIF_QUEUE_PURPOSE_NVME_ARMQ": 15,
	"LIF_QUEUE_PURPOSE_NVME_SESS": 16,
}

func (x LifQPurpose) String() string {
	return proto.EnumName(LifQPurpose_name, int32(x))
}
func (LifQPurpose) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{2} }

type LifState int32

const (
	LifState_LIF_STATE_NONE   LifState = 0
	LifState_LIF_STATE_CREATE LifState = 1
	LifState_LIF_STATE_INIT   LifState = 2
)

var LifState_name = map[int32]string{
	0: "LIF_STATE_NONE",
	1: "LIF_STATE_CREATE",
	2: "LIF_STATE_INIT",
}
var LifState_value = map[string]int32{
	"LIF_STATE_NONE":   0,
	"LIF_STATE_CREATE": 1,
	"LIF_STATE_INIT":   2,
}

func (x LifState) String() string {
	return proto.EnumName(LifState_name, int32(x))
}
func (LifState) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{3} }

// types of interfaces
type IfType int32

const (
	IfType_IF_TYPE_NONE      IfType = 0
	IfType_IF_TYPE_ENIC      IfType = 1
	IfType_IF_TYPE_UPLINK    IfType = 2
	IfType_IF_TYPE_UPLINK_PC IfType = 3
	IfType_IF_TYPE_TUNNEL    IfType = 4
	IfType_IF_TYPE_CPU       IfType = 5
	IfType_IF_TYPE_APP_REDIR IfType = 6
)

var IfType_name = map[int32]string{
	0: "IF_TYPE_NONE",
	1: "IF_TYPE_ENIC",
	2: "IF_TYPE_UPLINK",
	3: "IF_TYPE_UPLINK_PC",
	4: "IF_TYPE_TUNNEL",
	5: "IF_TYPE_CPU",
	6: "IF_TYPE_APP_REDIR",
}
var IfType_value = map[string]int32{
	"IF_TYPE_NONE":      0,
	"IF_TYPE_ENIC":      1,
	"IF_TYPE_UPLINK":    2,
	"IF_TYPE_UPLINK_PC": 3,
	"IF_TYPE_TUNNEL":    4,
	"IF_TYPE_CPU":       5,
	"IF_TYPE_APP_REDIR": 6,
}

func (x IfType) String() string {
	return proto.EnumName(IfType_name, int32(x))
}
func (IfType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{4} }

// RSS Type
type LifRssType int32

const (
	LifRssType_RSS_TYPE_NONE        LifRssType = 0
	LifRssType_RSS_TYPE_IPV4        LifRssType = 1
	LifRssType_RSS_TYPE_IPV4_TCP    LifRssType = 2
	LifRssType_RSS_TYPE_IPV4_UDP    LifRssType = 4
	LifRssType_RSS_TYPE_IPV6        LifRssType = 8
	LifRssType_RSS_TYPE_IPV6_TCP    LifRssType = 16
	LifRssType_RSS_TYPE_IPV6_UDP    LifRssType = 32
	LifRssType_RSS_TYPE_IPV6_EX     LifRssType = 64
	LifRssType_RSS_TYPE_IPV6_TCP_EX LifRssType = 128
	LifRssType_RSS_TYPE_IPV6_UDP_EX LifRssType = 256
)

var LifRssType_name = map[int32]string{
	0:   "RSS_TYPE_NONE",
	1:   "RSS_TYPE_IPV4",
	2:   "RSS_TYPE_IPV4_TCP",
	4:   "RSS_TYPE_IPV4_UDP",
	8:   "RSS_TYPE_IPV6",
	16:  "RSS_TYPE_IPV6_TCP",
	32:  "RSS_TYPE_IPV6_UDP",
	64:  "RSS_TYPE_IPV6_EX",
	128: "RSS_TYPE_IPV6_TCP_EX",
	256: "RSS_TYPE_IPV6_UDP_EX",
}
var LifRssType_value = map[string]int32{
	"RSS_TYPE_NONE":        0,
	"RSS_TYPE_IPV4":        1,
	"RSS_TYPE_IPV4_TCP":    2,
	"RSS_TYPE_IPV4_UDP":    4,
	"RSS_TYPE_IPV6":        8,
	"RSS_TYPE_IPV6_TCP":    16,
	"RSS_TYPE_IPV6_UDP":    32,
	"RSS_TYPE_IPV6_EX":     64,
	"RSS_TYPE_IPV6_TCP_EX": 128,
	"RSS_TYPE_IPV6_UDP_EX": 256,
}

func (x LifRssType) String() string {
	return proto.EnumName(LifRssType_name, int32(x))
}
func (LifRssType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{5} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_ENIC, one of the following vnic types must be
// set. IF_ENIC_TYPE_XXX identifies how a workload is attached to asic
// ------------------------------------------------------------------------------
type IfEnicType int32

const (
	IfEnicType_IF_ENIC_TYPE_NONE   IfEnicType = 0
	IfEnicType_IF_ENIC_TYPE_USEG   IfEnicType = 1
	IfEnicType_IF_ENIC_TYPE_PVLAN  IfEnicType = 2
	IfEnicType_IF_ENIC_TYPE_DIRECT IfEnicType = 3
	// VSS/DVS connectivity etc.
	IfEnicType_IF_ENIC_TYPE_CLASSIC IfEnicType = 4
	IfEnicType_IF_ENIC_TYPE_GFT     IfEnicType = 5
)

var IfEnicType_name = map[int32]string{
	0: "IF_ENIC_TYPE_NONE",
	1: "IF_ENIC_TYPE_USEG",
	2: "IF_ENIC_TYPE_PVLAN",
	3: "IF_ENIC_TYPE_DIRECT",
	4: "IF_ENIC_TYPE_CLASSIC",
	5: "IF_ENIC_TYPE_GFT",
}
var IfEnicType_value = map[string]int32{
	"IF_ENIC_TYPE_NONE":    0,
	"IF_ENIC_TYPE_USEG":    1,
	"IF_ENIC_TYPE_PVLAN":   2,
	"IF_ENIC_TYPE_DIRECT":  3,
	"IF_ENIC_TYPE_CLASSIC": 4,
	"IF_ENIC_TYPE_GFT":     5,
}

func (x IfEnicType) String() string {
	return proto.EnumName(IfEnicType_name, int32(x))
}
func (IfEnicType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{6} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_TUNNEL, one of the following encap types must be
// set.
// ------------------------------------------------------------------------------
type IfTunnelEncapType int32

const (
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE             IfTunnelEncapType = 0
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_VXLAN            IfTunnelEncapType = 1
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_GRE              IfTunnelEncapType = 2
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_PROPRIETARY_MPLS IfTunnelEncapType = 3
)

var IfTunnelEncapType_name = map[int32]string{
	0: "IF_TUNNEL_ENCAP_TYPE_NONE",
	1: "IF_TUNNEL_ENCAP_TYPE_VXLAN",
	2: "IF_TUNNEL_ENCAP_TYPE_GRE",
	3: "IF_TUNNEL_ENCAP_TYPE_PROPRIETARY_MPLS",
}
var IfTunnelEncapType_value = map[string]int32{
	"IF_TUNNEL_ENCAP_TYPE_NONE":             0,
	"IF_TUNNEL_ENCAP_TYPE_VXLAN":            1,
	"IF_TUNNEL_ENCAP_TYPE_GRE":              2,
	"IF_TUNNEL_ENCAP_TYPE_PROPRIETARY_MPLS": 3,
}

func (x IfTunnelEncapType) String() string {
	return proto.EnumName(IfTunnelEncapType_name, int32(x))
}
func (IfTunnelEncapType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInterface, []int{7} }

// A single entry in the LIF to Qstate map.
// This entry represents a single type.
// Everything except type puspose is used by the hardware.
type LifQStateMapEntry struct {
	// type_num is the type as defined by Capri hardware in the
	// LIF -> Qstate array entry. There are 8 types numbered 0-7.
	// There can be at most one entry per type_num.
	// TODO: How does a user know what number to use here unless
	// it is enumerated or purpose is clear ???
	TypeNum uint32 `protobuf:"varint,1,opt,name=type_num,json=typeNum,proto3" json:"type_num,omitempty"`
	// This entry represents the size of the Q state
	// used by this type. This number represents the size
	// as 2^(5+size). e.g. for a size of 64, the size field
	// would be 1 i.e. 2^(5+1) = 64.
	// Max value for size today is 7 i.e. 4096 bytes.
	Size_ uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// entries field represent number of queues as a
	// power of 2. So a value of 3 means 8 queues.
	// Max value for entries today is 24 i.e. 16M queues.
	Entries uint32 `protobuf:"varint,3,opt,name=entries,proto3" json:"entries,omitempty"`
	// Queue purpose is not needed by the hardware. It is used
	// internally by the HAL/FTE.
	Purpose LifQPurpose `protobuf:"varint,4,opt,name=purpose,proto3,enum=intf.LifQPurpose" json:"purpose,omitempty"`
}

func (m *LifQStateMapEntry) Reset()                    { *m = LifQStateMapEntry{} }
func (m *LifQStateMapEntry) String() string            { return proto.CompactTextString(m) }
func (*LifQStateMapEntry) ProtoMessage()               {}
func (*LifQStateMapEntry) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{0} }

func (m *LifQStateMapEntry) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *LifQStateMapEntry) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *LifQStateMapEntry) GetEntries() uint32 {
	if m != nil {
		return m.Entries
	}
	return 0
}

func (m *LifQStateMapEntry) GetPurpose() LifQPurpose {
	if m != nil {
		return m.Purpose
	}
	return LifQPurpose_LIF_QUEUE_PURPOSE_NONE
}

// Packet filters to receive traffic
type PktFilter struct {
	ReceiveBroadcast    bool `protobuf:"varint,1,opt,name=receive_broadcast,json=receiveBroadcast,proto3" json:"receive_broadcast,omitempty"`
	ReceiveAllMulticast bool `protobuf:"varint,2,opt,name=receive_all_multicast,json=receiveAllMulticast,proto3" json:"receive_all_multicast,omitempty"`
	ReceivePromiscuous  bool `protobuf:"varint,3,opt,name=receive_promiscuous,json=receivePromiscuous,proto3" json:"receive_promiscuous,omitempty"`
}

func (m *PktFilter) Reset()                    { *m = PktFilter{} }
func (m *PktFilter) String() string            { return proto.CompactTextString(m) }
func (*PktFilter) ProtoMessage()               {}
func (*PktFilter) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{1} }

func (m *PktFilter) GetReceiveBroadcast() bool {
	if m != nil {
		return m.ReceiveBroadcast
	}
	return false
}

func (m *PktFilter) GetReceiveAllMulticast() bool {
	if m != nil {
		return m.ReceiveAllMulticast
	}
	return false
}

func (m *PktFilter) GetReceivePromiscuous() bool {
	if m != nil {
		return m.ReceivePromiscuous
	}
	return false
}

// Allow only these bcast pkts
type BcastPktFilter struct {
	Arp        bool `protobuf:"varint,1,opt,name=arp,proto3" json:"arp,omitempty"`
	DhcpClient bool `protobuf:"varint,2,opt,name=dhcp_client,json=dhcpClient,proto3" json:"dhcp_client,omitempty"`
	DhcpServer bool `protobuf:"varint,3,opt,name=dhcp_server,json=dhcpServer,proto3" json:"dhcp_server,omitempty"`
	Netbios    bool `protobuf:"varint,4,opt,name=netbios,proto3" json:"netbios,omitempty"`
}

func (m *BcastPktFilter) Reset()                    { *m = BcastPktFilter{} }
func (m *BcastPktFilter) String() string            { return proto.CompactTextString(m) }
func (*BcastPktFilter) ProtoMessage()               {}
func (*BcastPktFilter) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{2} }

func (m *BcastPktFilter) GetArp() bool {
	if m != nil {
		return m.Arp
	}
	return false
}

func (m *BcastPktFilter) GetDhcpClient() bool {
	if m != nil {
		return m.DhcpClient
	}
	return false
}

func (m *BcastPktFilter) GetDhcpServer() bool {
	if m != nil {
		return m.DhcpServer
	}
	return false
}

func (m *BcastPktFilter) GetNetbios() bool {
	if m != nil {
		return m.Netbios
	}
	return false
}

// Allow only these mcast pkts
type McastPktFilter struct {
	Ipv6NeighAdv  bool `protobuf:"varint,1,opt,name=ipv6_neigh_adv,json=ipv6NeighAdv,proto3" json:"ipv6_neigh_adv,omitempty"`
	Ipv6RouterAdv bool `protobuf:"varint,2,opt,name=ipv6_router_adv,json=ipv6RouterAdv,proto3" json:"ipv6_router_adv,omitempty"`
	Dhcpv6Relay   bool `protobuf:"varint,3,opt,name=dhcpv6_relay,json=dhcpv6Relay,proto3" json:"dhcpv6_relay,omitempty"`
	Dhcpv6Mcast   bool `protobuf:"varint,4,opt,name=dhcpv6_mcast,json=dhcpv6Mcast,proto3" json:"dhcpv6_mcast,omitempty"`
	Ipv6Mld       bool `protobuf:"varint,5,opt,name=ipv6_mld,json=ipv6Mld,proto3" json:"ipv6_mld,omitempty"`
	Ipv6NeighSol  bool `protobuf:"varint,6,opt,name=ipv6_neigh_sol,json=ipv6NeighSol,proto3" json:"ipv6_neigh_sol,omitempty"`
}

func (m *McastPktFilter) Reset()                    { *m = McastPktFilter{} }
func (m *McastPktFilter) String() string            { return proto.CompactTextString(m) }
func (*McastPktFilter) ProtoMessage()               {}
func (*McastPktFilter) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{3} }

func (m *McastPktFilter) GetIpv6NeighAdv() bool {
	if m != nil {
		return m.Ipv6NeighAdv
	}
	return false
}

func (m *McastPktFilter) GetIpv6RouterAdv() bool {
	if m != nil {
		return m.Ipv6RouterAdv
	}
	return false
}

func (m *McastPktFilter) GetDhcpv6Relay() bool {
	if m != nil {
		return m.Dhcpv6Relay
	}
	return false
}

func (m *McastPktFilter) GetDhcpv6Mcast() bool {
	if m != nil {
		return m.Dhcpv6Mcast
	}
	return false
}

func (m *McastPktFilter) GetIpv6Mld() bool {
	if m != nil {
		return m.Ipv6Mld
	}
	return false
}

func (m *McastPktFilter) GetIpv6NeighSol() bool {
	if m != nil {
		return m.Ipv6NeighSol
	}
	return false
}

// LIF object
type LifSpec struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// key_or_handle is LIF's key or handle
	KeyOrHandle             *LifKeyHandle             `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	PinnedUplinkIfKeyHandle *InterfaceKeyHandle       `protobuf:"bytes,3,opt,name=pinned_uplink_if_key_handle,json=pinnedUplinkIfKeyHandle" json:"pinned_uplink_if_key_handle,omitempty" venice:ref,venice:constraints={intf.InterfaceSpec.type=interface_pb2.IF_TYPE_UPLINK}`
	Name                    string                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	AdminStatus             IfStatus                  `protobuf:"varint,5,opt,name=admin_status,json=adminStatus,proto3,enum=intf.IfStatus" json:"admin_status,omitempty"`
	Type                    LifType                   `protobuf:"varint,6,opt,name=type,proto3,enum=types.LifType" json:"type,omitempty"`
	LifQstateMap            []*LifQStateMapEntry      `protobuf:"bytes,7,rep,name=lif_qstate_map,json=lifQstateMap" json:"lif_qstate_map,omitempty"`
	VlanStripEn             bool                      `protobuf:"varint,8,opt,name=vlan_strip_en,json=vlanStripEn,proto3" json:"vlan_strip_en,omitempty"`
	VlanInsertEn            bool                      `protobuf:"varint,9,opt,name=vlan_insert_en,json=vlanInsertEn,proto3" json:"vlan_insert_en,omitempty"`
	EnableRdma              bool                      `protobuf:"varint,10,opt,name=enable_rdma,json=enableRdma,proto3" json:"enable_rdma,omitempty"`
	IsManagement            bool                      `protobuf:"varint,11,opt,name=is_management,json=isManagement,proto3" json:"is_management,omitempty" venice:immutable`
	RdmaSniffEn             bool                      `protobuf:"varint,12,opt,name=rdma_sniff_en,json=rdmaSniffEn,proto3" json:"rdma_sniff_en,omitempty"`
	PacketFilter            *PktFilter                `protobuf:"bytes,13,opt,name=packet_filter,json=packetFilter" json:"packet_filter,omitempty"`
	HwLifId                 uint32                    `protobuf:"varint,14,opt,name=hw_lif_id,json=hwLifId,proto3" json:"hw_lif_id,omitempty"`
	RdmaMaxKeys             uint32                    `protobuf:"varint,15,opt,name=rdma_max_keys,json=rdmaMaxKeys,proto3" json:"rdma_max_keys,omitempty"`
	RdmaMaxAhs              uint32                    `protobuf:"varint,16,opt,name=rdma_max_ahs,json=rdmaMaxAhs,proto3" json:"rdma_max_ahs,omitempty"`
	RdmaMaxPtEntries        uint32                    `protobuf:"varint,17,opt,name=rdma_max_pt_entries,json=rdmaMaxPtEntries,proto3" json:"rdma_max_pt_entries,omitempty"`
	LifQstate               []*QStateSetReq           `protobuf:"bytes,18,rep,name=lif_qstate,json=lifQstate" json:"lif_qstate,omitempty"`
	Rss                     *LifRssSpec               `protobuf:"bytes,19,opt,name=rss" json:"rss,omitempty"`
	TxPolicer               *PolicerSpec              `protobuf:"bytes,20,opt,name=tx_policer,json=txPolicer" json:"tx_policer,omitempty"`
	RxPolicer               *PolicerSpec              `protobuf:"bytes,21,opt,name=rx_policer,json=rxPolicer" json:"rx_policer,omitempty"`
	RxQosClass              *QosClassKeyHandle        `protobuf:"bytes,22,opt,name=rx_qos_class,json=rxQosClass" json:"rx_qos_class,omitempty"`
	TxQosClass              *QosClassKeyHandle        `protobuf:"bytes,23,opt,name=tx_qos_class,json=txQosClass" json:"tx_qos_class,omitempty"`
	RdmaBarmapSize          uint32                    `protobuf:"varint,24,opt,name=rdma_barmap_size,json=rdmaBarmapSize,proto3" json:"rdma_barmap_size,omitempty"`
	EnableNvme              bool                      `protobuf:"varint,25,opt,name=enable_nvme,json=enableNvme,proto3" json:"enable_nvme,omitempty"`
	NvmeMaxNs               uint32                    `protobuf:"varint,26,opt,name=nvme_max_ns,json=nvmeMaxNs,proto3" json:"nvme_max_ns,omitempty"`
	NvmeMaxSess             uint32                    `protobuf:"varint,27,opt,name=nvme_max_sess,json=nvmeMaxSess,proto3" json:"nvme_max_sess,omitempty"`
	NvmeHostPageSize        uint32                    `protobuf:"varint,28,opt,name=nvme_host_page_size,json=nvmeHostPageSize,proto3" json:"nvme_host_page_size,omitempty"`
	SwmOob                  *InterfaceKeyHandle       `protobuf:"bytes,29,opt,name=swm_oob,json=swmOob" json:"swm_oob,omitempty"`
	BcastPktFilter          *BcastPktFilter           `protobuf:"bytes,30,opt,name=bcast_pkt_filter,json=bcastPktFilter" json:"bcast_pkt_filter,omitempty"`
	McastPktFilter          *McastPktFilter           `protobuf:"bytes,31,opt,name=mcast_pkt_filter,json=mcastPktFilter" json:"mcast_pkt_filter,omitempty"`
	RxEn                    bool                      `protobuf:"varint,32,opt,name=rx_en,json=rxEn,proto3" json:"rx_en,omitempty"`
	MacAddress              uint64                    `protobuf:"fixed64,33,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	State                   LifState                  `protobuf:"varint,34,opt,name=state,proto3,enum=intf.LifState" json:"state,omitempty"`
	TxMirrorSessions        []*MirrorSessionKeyHandle `protobuf:"bytes,35,rep,name=TxMirrorSessions" json:"TxMirrorSessions,omitempty" venice:ref`
	RxMirrorSessions        []*MirrorSessionKeyHandle `protobuf:"bytes,36,rep,name=RxMirrorSessions" json:"RxMirrorSessions,omitempty" venice:ref`
}

func (m *LifSpec) Reset()                    { *m = LifSpec{} }
func (m *LifSpec) String() string            { return proto.CompactTextString(m) }
func (*LifSpec) ProtoMessage()               {}
func (*LifSpec) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{4} }

func (m *LifSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifSpec) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifSpec) GetPinnedUplinkIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.PinnedUplinkIfKeyHandle
	}
	return nil
}

func (m *LifSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LifSpec) GetAdminStatus() IfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *LifSpec) GetType() LifType {
	if m != nil {
		return m.Type
	}
	return LifType_LIF_TYPE_NONE
}

func (m *LifSpec) GetLifQstateMap() []*LifQStateMapEntry {
	if m != nil {
		return m.LifQstateMap
	}
	return nil
}

func (m *LifSpec) GetVlanStripEn() bool {
	if m != nil {
		return m.VlanStripEn
	}
	return false
}

func (m *LifSpec) GetVlanInsertEn() bool {
	if m != nil {
		return m.VlanInsertEn
	}
	return false
}

func (m *LifSpec) GetEnableRdma() bool {
	if m != nil {
		return m.EnableRdma
	}
	return false
}

func (m *LifSpec) GetIsManagement() bool {
	if m != nil {
		return m.IsManagement
	}
	return false
}

func (m *LifSpec) GetRdmaSniffEn() bool {
	if m != nil {
		return m.RdmaSniffEn
	}
	return false
}

func (m *LifSpec) GetPacketFilter() *PktFilter {
	if m != nil {
		return m.PacketFilter
	}
	return nil
}

func (m *LifSpec) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxKeys() uint32 {
	if m != nil {
		return m.RdmaMaxKeys
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxAhs() uint32 {
	if m != nil {
		return m.RdmaMaxAhs
	}
	return 0
}

func (m *LifSpec) GetRdmaMaxPtEntries() uint32 {
	if m != nil {
		return m.RdmaMaxPtEntries
	}
	return 0
}

func (m *LifSpec) GetLifQstate() []*QStateSetReq {
	if m != nil {
		return m.LifQstate
	}
	return nil
}

func (m *LifSpec) GetRss() *LifRssSpec {
	if m != nil {
		return m.Rss
	}
	return nil
}

func (m *LifSpec) GetTxPolicer() *PolicerSpec {
	if m != nil {
		return m.TxPolicer
	}
	return nil
}

func (m *LifSpec) GetRxPolicer() *PolicerSpec {
	if m != nil {
		return m.RxPolicer
	}
	return nil
}

func (m *LifSpec) GetRxQosClass() *QosClassKeyHandle {
	if m != nil {
		return m.RxQosClass
	}
	return nil
}

func (m *LifSpec) GetTxQosClass() *QosClassKeyHandle {
	if m != nil {
		return m.TxQosClass
	}
	return nil
}

func (m *LifSpec) GetRdmaBarmapSize() uint32 {
	if m != nil {
		return m.RdmaBarmapSize
	}
	return 0
}

func (m *LifSpec) GetEnableNvme() bool {
	if m != nil {
		return m.EnableNvme
	}
	return false
}

func (m *LifSpec) GetNvmeMaxNs() uint32 {
	if m != nil {
		return m.NvmeMaxNs
	}
	return 0
}

func (m *LifSpec) GetNvmeMaxSess() uint32 {
	if m != nil {
		return m.NvmeMaxSess
	}
	return 0
}

func (m *LifSpec) GetNvmeHostPageSize() uint32 {
	if m != nil {
		return m.NvmeHostPageSize
	}
	return 0
}

func (m *LifSpec) GetSwmOob() *InterfaceKeyHandle {
	if m != nil {
		return m.SwmOob
	}
	return nil
}

func (m *LifSpec) GetBcastPktFilter() *BcastPktFilter {
	if m != nil {
		return m.BcastPktFilter
	}
	return nil
}

func (m *LifSpec) GetMcastPktFilter() *McastPktFilter {
	if m != nil {
		return m.McastPktFilter
	}
	return nil
}

func (m *LifSpec) GetRxEn() bool {
	if m != nil {
		return m.RxEn
	}
	return false
}

func (m *LifSpec) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

func (m *LifSpec) GetState() LifState {
	if m != nil {
		return m.State
	}
	return LifState_LIF_STATE_NONE
}

func (m *LifSpec) GetTxMirrorSessions() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.TxMirrorSessions
	}
	return nil
}

func (m *LifSpec) GetRxMirrorSessions() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.RxMirrorSessions
	}
	return nil
}

// LifRequestMsg is batched request used to create/update of LIFs
type LifRequestMsg struct {
	Request []*LifSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifRequestMsg) Reset()                    { *m = LifRequestMsg{} }
func (m *LifRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifRequestMsg) ProtoMessage()               {}
func (*LifRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{5} }

func (m *LifRequestMsg) GetRequest() []*LifSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifStatus represents the operational status of LIF
type LifStatus struct {
	Meta        *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *LifKeyHandle      `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	LifStatus   IfStatus           `protobuf:"varint,3,opt,name=lif_status,json=lifStatus,proto3,enum=intf.IfStatus" json:"lif_status,omitempty"`
	LifHandle   uint64             `protobuf:"fixed64,4,opt,name=lif_handle,json=lifHandle,proto3" json:"lif_handle,omitempty"`
	HwLifId     uint64             `protobuf:"varint,5,opt,name=hw_lif_id,json=hwLifId,proto3" json:"hw_lif_id,omitempty"`
}

func (m *LifStatus) Reset()                    { *m = LifStatus{} }
func (m *LifStatus) String() string            { return proto.CompactTextString(m) }
func (*LifStatus) ProtoMessage()               {}
func (*LifStatus) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{6} }

func (m *LifStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifStatus) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifStatus) GetLifStatus() IfStatus {
	if m != nil {
		return m.LifStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *LifStatus) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *LifStatus) GetHwLifId() uint64 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

// LifQstate entries
type LifQState struct {
	TypeNum uint32 `protobuf:"varint,1,opt,name=type_num,json=typeNum,proto3" json:"type_num,omitempty"`
	Addr    uint64 `protobuf:"varint,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *LifQState) Reset()                    { *m = LifQState{} }
func (m *LifQState) String() string            { return proto.CompactTextString(m) }
func (*LifQState) ProtoMessage()               {}
func (*LifQState) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{7} }

func (m *LifQState) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *LifQState) GetAddr() uint64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

// LifRdmaData entries
type LifRdmaData struct {
	PtBaseAddr           uint64 `protobuf:"varint,1,opt,name=pt_base_addr,json=ptBaseAddr,proto3" json:"pt_base_addr,omitempty"`
	KtBaseAddr           uint64 `protobuf:"varint,2,opt,name=kt_base_addr,json=ktBaseAddr,proto3" json:"kt_base_addr,omitempty"`
	DcqcnProfileBaseAddr uint64 `protobuf:"varint,3,opt,name=dcqcn_profile_base_addr,json=dcqcnProfileBaseAddr,proto3" json:"dcqcn_profile_base_addr,omitempty"`
	AtBaseAddr           uint64 `protobuf:"varint,4,opt,name=at_base_addr,json=atBaseAddr,proto3" json:"at_base_addr,omitempty"`
	BarmapBaseAddr       uint64 `protobuf:"varint,5,opt,name=barmap_base_addr,json=barmapBaseAddr,proto3" json:"barmap_base_addr,omitempty"`
}

func (m *LifRdmaData) Reset()                    { *m = LifRdmaData{} }
func (m *LifRdmaData) String() string            { return proto.CompactTextString(m) }
func (*LifRdmaData) ProtoMessage()               {}
func (*LifRdmaData) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{8} }

func (m *LifRdmaData) GetPtBaseAddr() uint64 {
	if m != nil {
		return m.PtBaseAddr
	}
	return 0
}

func (m *LifRdmaData) GetKtBaseAddr() uint64 {
	if m != nil {
		return m.KtBaseAddr
	}
	return 0
}

func (m *LifRdmaData) GetDcqcnProfileBaseAddr() uint64 {
	if m != nil {
		return m.DcqcnProfileBaseAddr
	}
	return 0
}

func (m *LifRdmaData) GetAtBaseAddr() uint64 {
	if m != nil {
		return m.AtBaseAddr
	}
	return 0
}

func (m *LifRdmaData) GetBarmapBaseAddr() uint64 {
	if m != nil {
		return m.BarmapBaseAddr
	}
	return 0
}

type LifTxSchedulerData struct {
	SchedTableOffset uint32 `protobuf:"varint,1,opt,name=sched_table_offset,json=schedTableOffset,proto3" json:"sched_table_offset,omitempty"`
	SchedNumEntries  uint32 `protobuf:"varint,2,opt,name=sched_num_entries,json=schedNumEntries,proto3" json:"sched_num_entries,omitempty"`
	NumCoses         uint32 `protobuf:"varint,3,opt,name=num_coses,json=numCoses,proto3" json:"num_coses,omitempty"`
}

func (m *LifTxSchedulerData) Reset()                    { *m = LifTxSchedulerData{} }
func (m *LifTxSchedulerData) String() string            { return proto.CompactTextString(m) }
func (*LifTxSchedulerData) ProtoMessage()               {}
func (*LifTxSchedulerData) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{9} }

func (m *LifTxSchedulerData) GetSchedTableOffset() uint32 {
	if m != nil {
		return m.SchedTableOffset
	}
	return 0
}

func (m *LifTxSchedulerData) GetSchedNumEntries() uint32 {
	if m != nil {
		return m.SchedNumEntries
	}
	return 0
}

func (m *LifTxSchedulerData) GetNumCoses() uint32 {
	if m != nil {
		return m.NumCoses
	}
	return 0
}

// LifResponse response to one LifSpec
type LifResponse struct {
	ApiStatus     ApiStatus           `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status        *LifStatus          `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Qstate        []*LifQState        `protobuf:"bytes,3,rep,name=qstate" json:"qstate,omitempty"`
	RdmaDataValid bool                `protobuf:"varint,4,opt,name=rdma_data_valid,json=rdmaDataValid,proto3" json:"rdma_data_valid,omitempty"`
	RdmaData      *LifRdmaData        `protobuf:"bytes,5,opt,name=rdma_data,json=rdmaData" json:"rdma_data,omitempty"`
	TxSchedData   *LifTxSchedulerData `protobuf:"bytes,6,opt,name=tx_sched_data,json=txSchedData" json:"tx_sched_data,omitempty"`
}

func (m *LifResponse) Reset()                    { *m = LifResponse{} }
func (m *LifResponse) String() string            { return proto.CompactTextString(m) }
func (*LifResponse) ProtoMessage()               {}
func (*LifResponse) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{10} }

func (m *LifResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *LifResponse) GetStatus() *LifStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LifResponse) GetQstate() []*LifQState {
	if m != nil {
		return m.Qstate
	}
	return nil
}

func (m *LifResponse) GetRdmaDataValid() bool {
	if m != nil {
		return m.RdmaDataValid
	}
	return false
}

func (m *LifResponse) GetRdmaData() *LifRdmaData {
	if m != nil {
		return m.RdmaData
	}
	return nil
}

func (m *LifResponse) GetTxSchedData() *LifTxSchedulerData {
	if m != nil {
		return m.TxSchedData
	}
	return nil
}

// LifResponseMsg is response to LifRequestMsg
type LifResponseMsg struct {
	Response []*LifResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifResponseMsg) Reset()                    { *m = LifResponseMsg{} }
func (m *LifResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifResponseMsg) ProtoMessage()               {}
func (*LifResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{11} }

func (m *LifResponseMsg) GetResponse() []*LifResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QStateGetReq struct {
	LifHandle uint64 `protobuf:"varint,1,opt,name=lif_handle,json=lifHandle,proto3" json:"lif_handle,omitempty"`
	TypeNum   uint32 `protobuf:"varint,2,opt,name=type_num,json=typeNum,proto3" json:"type_num,omitempty"`
	Qid       uint32 `protobuf:"varint,3,opt,name=qid,proto3" json:"qid,omitempty"`
	// Amount of data to return in the corresponding
	// QStateGetResp::queue_state buffer. By default
	// All the data is returned (based on the size of this
	// queue type_num). But can be limited by the caller.
	// Setting this value to be greater than the actual
	// size has no effect.
	RetDataSize uint32 `protobuf:"varint,4,opt,name=ret_data_size,json=retDataSize,proto3" json:"ret_data_size,omitempty"`
}

func (m *QStateGetReq) Reset()                    { *m = QStateGetReq{} }
func (m *QStateGetReq) String() string            { return proto.CompactTextString(m) }
func (*QStateGetReq) ProtoMessage()               {}
func (*QStateGetReq) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{12} }

func (m *QStateGetReq) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *QStateGetReq) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *QStateGetReq) GetQid() uint32 {
	if m != nil {
		return m.Qid
	}
	return 0
}

func (m *QStateGetReq) GetRetDataSize() uint32 {
	if m != nil {
		return m.RetDataSize
	}
	return 0
}

type GetQStateRequestMsg struct {
	Reqs []*QStateGetReq `protobuf:"bytes,1,rep,name=reqs" json:"reqs,omitempty"`
}

func (m *GetQStateRequestMsg) Reset()                    { *m = GetQStateRequestMsg{} }
func (m *GetQStateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GetQStateRequestMsg) ProtoMessage()               {}
func (*GetQStateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{13} }

func (m *GetQStateRequestMsg) GetReqs() []*QStateGetReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type QStateGetResp struct {
	// TODO: what is user to make out of this error_code if it is non-zero ??
	//       why this is not using types.ApiStatus ???
	ErrorCode  int32  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	QAddr      uint64 `protobuf:"varint,2,opt,name=q_addr,json=qAddr,proto3" json:"q_addr,omitempty"`
	QueueState []byte `protobuf:"bytes,3,opt,name=queue_state,json=queueState,proto3" json:"queue_state,omitempty"`
}

func (m *QStateGetResp) Reset()                    { *m = QStateGetResp{} }
func (m *QStateGetResp) String() string            { return proto.CompactTextString(m) }
func (*QStateGetResp) ProtoMessage()               {}
func (*QStateGetResp) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{14} }

func (m *QStateGetResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *QStateGetResp) GetQAddr() uint64 {
	if m != nil {
		return m.QAddr
	}
	return 0
}

func (m *QStateGetResp) GetQueueState() []byte {
	if m != nil {
		return m.QueueState
	}
	return nil
}

type GetQStateResponseMsg struct {
	Resps []*QStateGetResp `protobuf:"bytes,1,rep,name=resps" json:"resps,omitempty"`
}

func (m *GetQStateResponseMsg) Reset()                    { *m = GetQStateResponseMsg{} }
func (m *GetQStateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*GetQStateResponseMsg) ProtoMessage()               {}
func (*GetQStateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{15} }

func (m *GetQStateResponseMsg) GetResps() []*QStateGetResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

// A P4ProgLabel is used to get the PC offset for
// Queue state.
type P4ProgLabel struct {
	Handle   string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName,proto3" json:"prog_name,omitempty"`
	Label    string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *P4ProgLabel) Reset()                    { *m = P4ProgLabel{} }
func (m *P4ProgLabel) String() string            { return proto.CompactTextString(m) }
func (*P4ProgLabel) ProtoMessage()               {}
func (*P4ProgLabel) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{16} }

func (m *P4ProgLabel) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *P4ProgLabel) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *P4ProgLabel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type QStateSetReq struct {
	LifHandle uint64 `protobuf:"varint,1,opt,name=lif_handle,json=lifHandle,proto3" json:"lif_handle,omitempty"`
	TypeNum   uint32 `protobuf:"varint,2,opt,name=type_num,json=typeNum,proto3" json:"type_num,omitempty"`
	Qid       uint32 `protobuf:"varint,3,opt,name=qid,proto3" json:"qid,omitempty"`
	// If present, PC Offset is filled by the implementation
	// based on the label.
	Label *P4ProgLabel `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
	// Actual queue state to be written. Can be less than the
	// actual qstate size. But has to be greater than 0.
	QueueState []byte `protobuf:"bytes,5,opt,name=queue_state,json=queueState,proto3" json:"queue_state,omitempty"`
}

func (m *QStateSetReq) Reset()                    { *m = QStateSetReq{} }
func (m *QStateSetReq) String() string            { return proto.CompactTextString(m) }
func (*QStateSetReq) ProtoMessage()               {}
func (*QStateSetReq) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{17} }

func (m *QStateSetReq) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

func (m *QStateSetReq) GetTypeNum() uint32 {
	if m != nil {
		return m.TypeNum
	}
	return 0
}

func (m *QStateSetReq) GetQid() uint32 {
	if m != nil {
		return m.Qid
	}
	return 0
}

func (m *QStateSetReq) GetLabel() *P4ProgLabel {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *QStateSetReq) GetQueueState() []byte {
	if m != nil {
		return m.QueueState
	}
	return nil
}

type SetQStateRequestMsg struct {
	Reqs []*QStateSetReq `protobuf:"bytes,1,rep,name=reqs" json:"reqs,omitempty"`
}

func (m *SetQStateRequestMsg) Reset()                    { *m = SetQStateRequestMsg{} }
func (m *SetQStateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SetQStateRequestMsg) ProtoMessage()               {}
func (*SetQStateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{18} }

func (m *SetQStateRequestMsg) GetReqs() []*QStateSetReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type QStateSetResp struct {
	// TODO: what is user to make out of this error_code if it is non-zero ??
	//       why this is not using types.ApiStatus ??
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *QStateSetResp) Reset()                    { *m = QStateSetResp{} }
func (m *QStateSetResp) String() string            { return proto.CompactTextString(m) }
func (*QStateSetResp) ProtoMessage()               {}
func (*QStateSetResp) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{19} }

func (m *QStateSetResp) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type SetQStateResponseMsg struct {
	Resps []*QStateSetResp `protobuf:"bytes,1,rep,name=resps" json:"resps,omitempty"`
}

func (m *SetQStateResponseMsg) Reset()                    { *m = SetQStateResponseMsg{} }
func (m *SetQStateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SetQStateResponseMsg) ProtoMessage()               {}
func (*SetQStateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{20} }

func (m *SetQStateResponseMsg) GetResps() []*QStateSetResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

// LifDeleteRequest  is used to delete a LIF object
type LifDeleteRequest struct {
	// key_or_handle is LIF's unique identifier for deletion
	KeyOrHandle *LifKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *LifDeleteRequest) Reset()                    { *m = LifDeleteRequest{} }
func (m *LifDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequest) ProtoMessage()               {}
func (*LifDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{21} }

func (m *LifDeleteRequest) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// LifDeleteRequestMsg is used to delete a batch of LIFs
type LifDeleteRequestMsg struct {
	Request []*LifDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifDeleteRequestMsg) Reset()                    { *m = LifDeleteRequestMsg{} }
func (m *LifDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequestMsg) ProtoMessage()               {}
func (*LifDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{22} }

func (m *LifDeleteRequestMsg) GetRequest() []*LifDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifDeleteResponse is response to LIF delete request
type LifDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *LifDeleteResponse) Reset()                    { *m = LifDeleteResponse{} }
func (m *LifDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteResponse) ProtoMessage()               {}
func (*LifDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{23} }

func (m *LifDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// LifDeleteResponseMsg is batched response to LifDeleteRequestMsg
type LifDeleteResponseMsg struct {
	Response []*LifDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifDeleteResponseMsg) Reset()                    { *m = LifDeleteResponseMsg{} }
func (m *LifDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteResponseMsg) ProtoMessage()               {}
func (*LifDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{24} }

func (m *LifDeleteResponseMsg) GetResponse() []*LifDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// check which stats will be done by p4 and which will be done by p4+
type LifTxStats struct {
	FramesOk            uint64 `protobuf:"varint,1,opt,name=frames_ok,json=framesOk,proto3" json:"frames_ok,omitempty"`
	UnicastFramesOk     uint64 `protobuf:"varint,2,opt,name=unicast_frames_ok,json=unicastFramesOk,proto3" json:"unicast_frames_ok,omitempty"`
	UnicastFramesDrop   uint64 `protobuf:"varint,3,opt,name=unicast_frames_drop,json=unicastFramesDrop,proto3" json:"unicast_frames_drop,omitempty"`
	MulticastFramesOk   uint64 `protobuf:"varint,4,opt,name=multicast_frames_ok,json=multicastFramesOk,proto3" json:"multicast_frames_ok,omitempty"`
	MulticastFramesDrop uint64 `protobuf:"varint,5,opt,name=multicast_frames_drop,json=multicastFramesDrop,proto3" json:"multicast_frames_drop,omitempty"`
	BroadcastFramesOk   uint64 `protobuf:"varint,6,opt,name=broadcast_frames_ok,json=broadcastFramesOk,proto3" json:"broadcast_frames_ok,omitempty"`
	BroadcastFramesDrop uint64 `protobuf:"varint,7,opt,name=broadcast_frames_drop,json=broadcastFramesDrop,proto3" json:"broadcast_frames_drop,omitempty"`
	BytesOk             uint64 `protobuf:"varint,8,opt,name=bytes_ok,json=bytesOk,proto3" json:"bytes_ok,omitempty"`
	UnicastBytesOk      uint64 `protobuf:"varint,9,opt,name=unicast_bytes_ok,json=unicastBytesOk,proto3" json:"unicast_bytes_ok,omitempty"`
	MulticastBytesOk    uint64 `protobuf:"varint,10,opt,name=multicast_bytes_ok,json=multicastBytesOk,proto3" json:"multicast_bytes_ok,omitempty"`
	BroadcastBytesOk    uint64 `protobuf:"varint,11,opt,name=broadcast_bytes_ok,json=broadcastBytesOk,proto3" json:"broadcast_bytes_ok,omitempty"`
	Tso                 uint64 `protobuf:"varint,12,opt,name=tso,proto3" json:"tso,omitempty"`
	Pps                 uint64 `protobuf:"varint,13,opt,name=pps,proto3" json:"pps,omitempty"`
	Bytesps             uint64 `protobuf:"varint,14,opt,name=bytesps,proto3" json:"bytesps,omitempty"`
}

func (m *LifTxStats) Reset()                    { *m = LifTxStats{} }
func (m *LifTxStats) String() string            { return proto.CompactTextString(m) }
func (*LifTxStats) ProtoMessage()               {}
func (*LifTxStats) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{25} }

func (m *LifTxStats) GetFramesOk() uint64 {
	if m != nil {
		return m.FramesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastFramesOk() uint64 {
	if m != nil {
		return m.UnicastFramesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastFramesDrop() uint64 {
	if m != nil {
		return m.UnicastFramesDrop
	}
	return 0
}

func (m *LifTxStats) GetMulticastFramesOk() uint64 {
	if m != nil {
		return m.MulticastFramesOk
	}
	return 0
}

func (m *LifTxStats) GetMulticastFramesDrop() uint64 {
	if m != nil {
		return m.MulticastFramesDrop
	}
	return 0
}

func (m *LifTxStats) GetBroadcastFramesOk() uint64 {
	if m != nil {
		return m.BroadcastFramesOk
	}
	return 0
}

func (m *LifTxStats) GetBroadcastFramesDrop() uint64 {
	if m != nil {
		return m.BroadcastFramesDrop
	}
	return 0
}

func (m *LifTxStats) GetBytesOk() uint64 {
	if m != nil {
		return m.BytesOk
	}
	return 0
}

func (m *LifTxStats) GetUnicastBytesOk() uint64 {
	if m != nil {
		return m.UnicastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetMulticastBytesOk() uint64 {
	if m != nil {
		return m.MulticastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetBroadcastBytesOk() uint64 {
	if m != nil {
		return m.BroadcastBytesOk
	}
	return 0
}

func (m *LifTxStats) GetTso() uint64 {
	if m != nil {
		return m.Tso
	}
	return 0
}

func (m *LifTxStats) GetPps() uint64 {
	if m != nil {
		return m.Pps
	}
	return 0
}

func (m *LifTxStats) GetBytesps() uint64 {
	if m != nil {
		return m.Bytesps
	}
	return 0
}

type LifRxStats struct {
	FramesTotal         uint64        `protobuf:"varint,1,opt,name=frames_total,json=framesTotal,proto3" json:"frames_total,omitempty"`
	FramesOk            uint64        `protobuf:"varint,2,opt,name=frames_ok,json=framesOk,proto3" json:"frames_ok,omitempty"`
	UnicastFramesOk     uint64        `protobuf:"varint,3,opt,name=unicast_frames_ok,json=unicastFramesOk,proto3" json:"unicast_frames_ok,omitempty"`
	UnicastFramesDrop   uint64        `protobuf:"varint,4,opt,name=unicast_frames_drop,json=unicastFramesDrop,proto3" json:"unicast_frames_drop,omitempty"`
	MulticastFramesOk   uint64        `protobuf:"varint,5,opt,name=multicast_frames_ok,json=multicastFramesOk,proto3" json:"multicast_frames_ok,omitempty"`
	MulticastFramesDrop uint64        `protobuf:"varint,6,opt,name=multicast_frames_drop,json=multicastFramesDrop,proto3" json:"multicast_frames_drop,omitempty"`
	BroadcastFramesOk   uint64        `protobuf:"varint,7,opt,name=broadcast_frames_ok,json=broadcastFramesOk,proto3" json:"broadcast_frames_ok,omitempty"`
	BroadcastFramesDrop uint64        `protobuf:"varint,8,opt,name=broadcast_frames_drop,json=broadcastFramesDrop,proto3" json:"broadcast_frames_drop,omitempty"`
	BytesOk             uint64        `protobuf:"varint,9,opt,name=bytes_ok,json=bytesOk,proto3" json:"bytes_ok,omitempty"`
	UnicastBytesOk      uint64        `protobuf:"varint,10,opt,name=unicast_bytes_ok,json=unicastBytesOk,proto3" json:"unicast_bytes_ok,omitempty"`
	MulticastBytesOk    uint64        `protobuf:"varint,11,opt,name=multicast_bytes_ok,json=multicastBytesOk,proto3" json:"multicast_bytes_ok,omitempty"`
	BroadcastBytesOk    uint64        `protobuf:"varint,12,opt,name=broadcast_bytes_ok,json=broadcastBytesOk,proto3" json:"broadcast_bytes_ok,omitempty"`
	Drops               uint64        `protobuf:"varint,13,opt,name=drops,proto3" json:"drops,omitempty"`
	NoBufs              uint64        `protobuf:"varint,14,opt,name=no_bufs,json=noBufs,proto3" json:"no_bufs,omitempty"`
	Errors              uint64        `protobuf:"varint,15,opt,name=errors,proto3" json:"errors,omitempty"`
	Rss                 uint64        `protobuf:"varint,16,opt,name=rss,proto3" json:"rss,omitempty"`
	CrcErrors           uint64        `protobuf:"varint,17,opt,name=crc_errors,json=crcErrors,proto3" json:"crc_errors,omitempty"`
	Frames_64           uint64        `protobuf:"varint,18,opt,name=frames_64,json=frames64,proto3" json:"frames_64,omitempty"`
	Frames_127          uint64        `protobuf:"varint,19,opt,name=frames_127,json=frames127,proto3" json:"frames_127,omitempty"`
	Frames_255          uint64        `protobuf:"varint,20,opt,name=frames_255,json=frames255,proto3" json:"frames_255,omitempty"`
	Frames_511          uint64        `protobuf:"varint,21,opt,name=frames_511,json=frames511,proto3" json:"frames_511,omitempty"`
	Frames_1024         uint64        `protobuf:"varint,22,opt,name=frames_1024,json=frames1024,proto3" json:"frames_1024,omitempty"`
	Frames_1518         uint64        `protobuf:"varint,23,opt,name=frames_1518,json=frames1518,proto3" json:"frames_1518,omitempty"`
	FramesToMax         uint64        `protobuf:"varint,24,opt,name=frames_to_max,json=framesToMax,proto3" json:"frames_to_max,omitempty"`
	PolicerStats        *PolicerStats `protobuf:"bytes,25,opt,name=policer_stats,json=policerStats" json:"policer_stats,omitempty"`
	Pps                 uint64        `protobuf:"varint,26,opt,name=pps,proto3" json:"pps,omitempty"`
	Bytesps             uint64        `protobuf:"varint,27,opt,name=bytesps,proto3" json:"bytesps,omitempty"`
}

func (m *LifRxStats) Reset()                    { *m = LifRxStats{} }
func (m *LifRxStats) String() string            { return proto.CompactTextString(m) }
func (*LifRxStats) ProtoMessage()               {}
func (*LifRxStats) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{26} }

func (m *LifRxStats) GetFramesTotal() uint64 {
	if m != nil {
		return m.FramesTotal
	}
	return 0
}

func (m *LifRxStats) GetFramesOk() uint64 {
	if m != nil {
		return m.FramesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastFramesOk() uint64 {
	if m != nil {
		return m.UnicastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastFramesDrop() uint64 {
	if m != nil {
		return m.UnicastFramesDrop
	}
	return 0
}

func (m *LifRxStats) GetMulticastFramesOk() uint64 {
	if m != nil {
		return m.MulticastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetMulticastFramesDrop() uint64 {
	if m != nil {
		return m.MulticastFramesDrop
	}
	return 0
}

func (m *LifRxStats) GetBroadcastFramesOk() uint64 {
	if m != nil {
		return m.BroadcastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetBroadcastFramesDrop() uint64 {
	if m != nil {
		return m.BroadcastFramesDrop
	}
	return 0
}

func (m *LifRxStats) GetBytesOk() uint64 {
	if m != nil {
		return m.BytesOk
	}
	return 0
}

func (m *LifRxStats) GetUnicastBytesOk() uint64 {
	if m != nil {
		return m.UnicastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetMulticastBytesOk() uint64 {
	if m != nil {
		return m.MulticastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetBroadcastBytesOk() uint64 {
	if m != nil {
		return m.BroadcastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetDrops() uint64 {
	if m != nil {
		return m.Drops
	}
	return 0
}

func (m *LifRxStats) GetNoBufs() uint64 {
	if m != nil {
		return m.NoBufs
	}
	return 0
}

func (m *LifRxStats) GetErrors() uint64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *LifRxStats) GetRss() uint64 {
	if m != nil {
		return m.Rss
	}
	return 0
}

func (m *LifRxStats) GetCrcErrors() uint64 {
	if m != nil {
		return m.CrcErrors
	}
	return 0
}

func (m *LifRxStats) GetFrames_64() uint64 {
	if m != nil {
		return m.Frames_64
	}
	return 0
}

func (m *LifRxStats) GetFrames_127() uint64 {
	if m != nil {
		return m.Frames_127
	}
	return 0
}

func (m *LifRxStats) GetFrames_255() uint64 {
	if m != nil {
		return m.Frames_255
	}
	return 0
}

func (m *LifRxStats) GetFrames_511() uint64 {
	if m != nil {
		return m.Frames_511
	}
	return 0
}

func (m *LifRxStats) GetFrames_1024() uint64 {
	if m != nil {
		return m.Frames_1024
	}
	return 0
}

func (m *LifRxStats) GetFrames_1518() uint64 {
	if m != nil {
		return m.Frames_1518
	}
	return 0
}

func (m *LifRxStats) GetFramesToMax() uint64 {
	if m != nil {
		return m.FramesToMax
	}
	return 0
}

func (m *LifRxStats) GetPolicerStats() *PolicerStats {
	if m != nil {
		return m.PolicerStats
	}
	return nil
}

func (m *LifRxStats) GetPps() uint64 {
	if m != nil {
		return m.Pps
	}
	return 0
}

func (m *LifRxStats) GetBytesps() uint64 {
	if m != nil {
		return m.Bytesps
	}
	return 0
}

type DataLifStats struct {
	TxStats *LifTxStats `protobuf:"bytes,1,opt,name=tx_stats,json=txStats" json:"tx_stats,omitempty"`
	RxStats *LifRxStats `protobuf:"bytes,2,opt,name=rx_stats,json=rxStats" json:"rx_stats,omitempty"`
}

func (m *DataLifStats) Reset()                    { *m = DataLifStats{} }
func (m *DataLifStats) String() string            { return proto.CompactTextString(m) }
func (*DataLifStats) ProtoMessage()               {}
func (*DataLifStats) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{27} }

func (m *DataLifStats) GetTxStats() *LifTxStats {
	if m != nil {
		return m.TxStats
	}
	return nil
}

func (m *DataLifStats) GetRxStats() *LifRxStats {
	if m != nil {
		return m.RxStats
	}
	return nil
}

type CpuQueueStats struct {
	CpucbId           CpucbId `protobuf:"varint,1,opt,name=cpucb_id,json=cpucbId,proto3,enum=types.CpucbId" json:"cpucb_id,omitempty"`
	NumTxPackets      uint32  `protobuf:"fixed32,2,opt,name=num_tx_packets,json=numTxPackets,proto3" json:"num_tx_packets,omitempty"`
	NumRxPackets      uint32  `protobuf:"fixed32,3,opt,name=num_rx_packets,json=numRxPackets,proto3" json:"num_rx_packets,omitempty"`
	RxQfullDropErrors uint64  `protobuf:"varint,4,opt,name=rx_qfull_drop_errors,json=rxQfullDropErrors,proto3" json:"rx_qfull_drop_errors,omitempty"`
	TxSemFullDrops    uint64  `protobuf:"varint,5,opt,name=tx_sem_full_drops,json=txSemFullDrops,proto3" json:"tx_sem_full_drops,omitempty"`
	TxFreeRequests    uint64  `protobuf:"varint,6,opt,name=tx_free_requests,json=txFreeRequests,proto3" json:"tx_free_requests,omitempty"`
	RxSemFullDrops    uint64  `protobuf:"varint,7,opt,name=rx_sem_full_drops,json=rxSemFullDrops,proto3" json:"rx_sem_full_drops,omitempty"`
	RxQueue0Pkts      uint64  `protobuf:"varint,8,opt,name=rx_queue0_pkts,json=rxQueue0Pkts,proto3" json:"rx_queue0_pkts,omitempty"`
	RxQueue1Pkts      uint64  `protobuf:"varint,9,opt,name=rx_queue1_pkts,json=rxQueue1Pkts,proto3" json:"rx_queue1_pkts,omitempty"`
	RxQueue2Pkts      uint64  `protobuf:"varint,10,opt,name=rx_queue2_pkts,json=rxQueue2Pkts,proto3" json:"rx_queue2_pkts,omitempty"`
}

func (m *CpuQueueStats) Reset()                    { *m = CpuQueueStats{} }
func (m *CpuQueueStats) String() string            { return proto.CompactTextString(m) }
func (*CpuQueueStats) ProtoMessage()               {}
func (*CpuQueueStats) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{28} }

func (m *CpuQueueStats) GetCpucbId() CpucbId {
	if m != nil {
		return m.CpucbId
	}
	return CpucbId_CPUCB_ID_FLOWMISS
}

func (m *CpuQueueStats) GetNumTxPackets() uint32 {
	if m != nil {
		return m.NumTxPackets
	}
	return 0
}

func (m *CpuQueueStats) GetNumRxPackets() uint32 {
	if m != nil {
		return m.NumRxPackets
	}
	return 0
}

func (m *CpuQueueStats) GetRxQfullDropErrors() uint64 {
	if m != nil {
		return m.RxQfullDropErrors
	}
	return 0
}

func (m *CpuQueueStats) GetTxSemFullDrops() uint64 {
	if m != nil {
		return m.TxSemFullDrops
	}
	return 0
}

func (m *CpuQueueStats) GetTxFreeRequests() uint64 {
	if m != nil {
		return m.TxFreeRequests
	}
	return 0
}

func (m *CpuQueueStats) GetRxSemFullDrops() uint64 {
	if m != nil {
		return m.RxSemFullDrops
	}
	return 0
}

func (m *CpuQueueStats) GetRxQueue0Pkts() uint64 {
	if m != nil {
		return m.RxQueue0Pkts
	}
	return 0
}

func (m *CpuQueueStats) GetRxQueue1Pkts() uint64 {
	if m != nil {
		return m.RxQueue1Pkts
	}
	return 0
}

func (m *CpuQueueStats) GetRxQueue2Pkts() uint64 {
	if m != nil {
		return m.RxQueue2Pkts
	}
	return 0
}

type CpuLifStats struct {
	CpuQueueStats []*CpuQueueStats `protobuf:"bytes,1,rep,name=cpu_queue_stats,json=cpuQueueStats" json:"cpu_queue_stats,omitempty"`
}

func (m *CpuLifStats) Reset()                    { *m = CpuLifStats{} }
func (m *CpuLifStats) String() string            { return proto.CompactTextString(m) }
func (*CpuLifStats) ProtoMessage()               {}
func (*CpuLifStats) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{29} }

func (m *CpuLifStats) GetCpuQueueStats() []*CpuQueueStats {
	if m != nil {
		return m.CpuQueueStats
	}
	return nil
}

// LifStats captures all the statistics of given LIF
type LifStats struct {
	// Types that are valid to be assigned to Lifs:
	//	*LifStats_DataLifStats
	//	*LifStats_CpuLifStats
	Lifs isLifStats_Lifs `protobuf_oneof:"Lifs"`
}

func (m *LifStats) Reset()                    { *m = LifStats{} }
func (m *LifStats) String() string            { return proto.CompactTextString(m) }
func (*LifStats) ProtoMessage()               {}
func (*LifStats) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{30} }

type isLifStats_Lifs interface {
	isLifStats_Lifs()
	MarshalTo([]byte) (int, error)
	Size() int
}

type LifStats_DataLifStats struct {
	DataLifStats *DataLifStats `protobuf:"bytes,1,opt,name=data_lif_stats,json=dataLifStats,oneof"`
}
type LifStats_CpuLifStats struct {
	CpuLifStats *CpuLifStats `protobuf:"bytes,2,opt,name=cpu_lif_stats,json=cpuLifStats,oneof"`
}

func (*LifStats_DataLifStats) isLifStats_Lifs() {}
func (*LifStats_CpuLifStats) isLifStats_Lifs()  {}

func (m *LifStats) GetLifs() isLifStats_Lifs {
	if m != nil {
		return m.Lifs
	}
	return nil
}

func (m *LifStats) GetDataLifStats() *DataLifStats {
	if x, ok := m.GetLifs().(*LifStats_DataLifStats); ok {
		return x.DataLifStats
	}
	return nil
}

func (m *LifStats) GetCpuLifStats() *CpuLifStats {
	if x, ok := m.GetLifs().(*LifStats_CpuLifStats); ok {
		return x.CpuLifStats
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LifStats) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LifStats_OneofMarshaler, _LifStats_OneofUnmarshaler, _LifStats_OneofSizer, []interface{}{
		(*LifStats_DataLifStats)(nil),
		(*LifStats_CpuLifStats)(nil),
	}
}

func _LifStats_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LifStats)
	// Lifs
	switch x := m.Lifs.(type) {
	case *LifStats_DataLifStats:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DataLifStats); err != nil {
			return err
		}
	case *LifStats_CpuLifStats:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpuLifStats); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LifStats.Lifs has unexpected type %T", x)
	}
	return nil
}

func _LifStats_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LifStats)
	switch tag {
	case 1: // Lifs.data_lif_stats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DataLifStats)
		err := b.DecodeMessage(msg)
		m.Lifs = &LifStats_DataLifStats{msg}
		return true, err
	case 2: // Lifs.cpu_lif_stats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CpuLifStats)
		err := b.DecodeMessage(msg)
		m.Lifs = &LifStats_CpuLifStats{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LifStats_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LifStats)
	// Lifs
	switch x := m.Lifs.(type) {
	case *LifStats_DataLifStats:
		s := proto.Size(x.DataLifStats)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LifStats_CpuLifStats:
		s := proto.Size(x.CpuLifStats)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// LifGetRequest is used to get information about a LIF
type LifGetRequest struct {
	// key_or_handle  is lif's unique identifier for retrieval
	KeyOrHandle *LifKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *LifGetRequest) Reset()                    { *m = LifGetRequest{} }
func (m *LifGetRequest) String() string            { return proto.CompactTextString(m) }
func (*LifGetRequest) ProtoMessage()               {}
func (*LifGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{31} }

func (m *LifGetRequest) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type LifGetRequestMsg struct {
	Request []*LifGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifGetRequestMsg) Reset()                    { *m = LifGetRequestMsg{} }
func (m *LifGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifGetRequestMsg) ProtoMessage()               {}
func (*LifGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{32} }

func (m *LifGetRequestMsg) GetRequest() []*LifGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifGetResponse captures all the information about a LIF
type LifGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *LifSpec     `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *LifStatus   `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *LifStats    `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
	Qstate    []*LifQState `protobuf:"bytes,5,rep,name=qstate" json:"qstate,omitempty"`
}

func (m *LifGetResponse) Reset()                    { *m = LifGetResponse{} }
func (m *LifGetResponse) String() string            { return proto.CompactTextString(m) }
func (*LifGetResponse) ProtoMessage()               {}
func (*LifGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{33} }

func (m *LifGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *LifGetResponse) GetSpec() *LifSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *LifGetResponse) GetStatus() *LifStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LifGetResponse) GetStats() *LifStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *LifGetResponse) GetQstate() []*LifQState {
	if m != nil {
		return m.Qstate
	}
	return nil
}

// LifGetResponseMsg is response to LifGetRequestMsg
type LifGetResponseMsg struct {
	Response []*LifGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifGetResponseMsg) Reset()                    { *m = LifGetResponseMsg{} }
func (m *LifGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifGetResponseMsg) ProtoMessage()               {}
func (*LifGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{34} }

func (m *LifGetResponseMsg) GetResponse() []*LifGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// LifRssConfig is used to set Lif's RSS configuration
type LifRssSpec struct {
	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Indir []byte `protobuf:"bytes,3,opt,name=indir,proto3" json:"indir,omitempty"`
}

func (m *LifRssSpec) Reset()                    { *m = LifRssSpec{} }
func (m *LifRssSpec) String() string            { return proto.CompactTextString(m) }
func (*LifRssSpec) ProtoMessage()               {}
func (*LifRssSpec) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{35} }

func (m *LifRssSpec) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LifRssSpec) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LifRssSpec) GetIndir() []byte {
	if m != nil {
		return m.Indir
	}
	return nil
}

type EnicInfo struct {
	L2SegmentKeyHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_handle,json=l2segmentKeyHandle" json:"l2segment_key_handle,omitempty" venice:ref`
	MacAddress         uint64              `protobuf:"fixed64,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	EncapVlanId        uint32              `protobuf:"varint,3,opt,name=encap_vlan_id,json=encapVlanId,proto3" json:"encap_vlan_id,omitempty"`
}

func (m *EnicInfo) Reset()                    { *m = EnicInfo{} }
func (m *EnicInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicInfo) ProtoMessage()               {}
func (*EnicInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{36} }

func (m *EnicInfo) GetL2SegmentKeyHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyHandle
	}
	return nil
}

func (m *EnicInfo) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

func (m *EnicInfo) GetEncapVlanId() uint32 {
	if m != nil {
		return m.EncapVlanId
	}
	return 0
}

type EnicClassicInfo struct {
	L2SegmentKeyHandle []*L2SegmentKeyHandle `protobuf:"bytes,1,rep,name=l2segment_key_handle,json=l2segmentKeyHandle" json:"l2segment_key_handle,omitempty" venice:ref`
	NativeL2SegmentId  uint64                `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId,proto3" json:"native_l2segment_id,omitempty"`
}

func (m *EnicClassicInfo) Reset()                    { *m = EnicClassicInfo{} }
func (m *EnicClassicInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicClassicInfo) ProtoMessage()               {}
func (*EnicClassicInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{37} }

func (m *EnicClassicInfo) GetL2SegmentKeyHandle() []*L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyHandle
	}
	return nil
}

func (m *EnicClassicInfo) GetNativeL2SegmentId() uint64 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

// mandatory attributes expected if interface type is IF_TYPE_ENIC
type IfEnicInfo struct {
	EnicType                IfEnicType          `protobuf:"varint,1,opt,name=enic_type,json=enicType,proto3,enum=intf.IfEnicType" json:"enic_type,omitempty" venice:mandatory`
	LifKeyOrHandle          *LifKeyHandle       `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty" venice:ref`
	PinnedUplinkIfKeyHandle *InterfaceKeyHandle `protobuf:"bytes,3,opt,name=pinned_uplink_if_key_handle,json=pinnedUplinkIfKeyHandle" json:"pinned_uplink_if_key_handle,omitempty" venice:ref`
	// Types that are valid to be assigned to EnicTypeInfo:
	//	*IfEnicInfo_EnicInfo
	//	*IfEnicInfo_ClassicEnicInfo
	EnicTypeInfo isIfEnicInfo_EnicTypeInfo `protobuf_oneof:"enic_type_info"`
}

func (m *IfEnicInfo) Reset()                    { *m = IfEnicInfo{} }
func (m *IfEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*IfEnicInfo) ProtoMessage()               {}
func (*IfEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{38} }

type isIfEnicInfo_EnicTypeInfo interface {
	isIfEnicInfo_EnicTypeInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IfEnicInfo_EnicInfo struct {
	EnicInfo *EnicInfo `protobuf:"bytes,4,opt,name=enic_info,json=enicInfo,oneof"`
}
type IfEnicInfo_ClassicEnicInfo struct {
	ClassicEnicInfo *EnicClassicInfo `protobuf:"bytes,5,opt,name=classic_enic_info,json=classicEnicInfo,oneof"`
}

func (*IfEnicInfo_EnicInfo) isIfEnicInfo_EnicTypeInfo()        {}
func (*IfEnicInfo_ClassicEnicInfo) isIfEnicInfo_EnicTypeInfo() {}

func (m *IfEnicInfo) GetEnicTypeInfo() isIfEnicInfo_EnicTypeInfo {
	if m != nil {
		return m.EnicTypeInfo
	}
	return nil
}

func (m *IfEnicInfo) GetEnicType() IfEnicType {
	if m != nil {
		return m.EnicType
	}
	return IfEnicType_IF_ENIC_TYPE_NONE
}

func (m *IfEnicInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

func (m *IfEnicInfo) GetPinnedUplinkIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.PinnedUplinkIfKeyHandle
	}
	return nil
}

func (m *IfEnicInfo) GetEnicInfo() *EnicInfo {
	if x, ok := m.GetEnicTypeInfo().(*IfEnicInfo_EnicInfo); ok {
		return x.EnicInfo
	}
	return nil
}

func (m *IfEnicInfo) GetClassicEnicInfo() *EnicClassicInfo {
	if x, ok := m.GetEnicTypeInfo().(*IfEnicInfo_ClassicEnicInfo); ok {
		return x.ClassicEnicInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IfEnicInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IfEnicInfo_OneofMarshaler, _IfEnicInfo_OneofUnmarshaler, _IfEnicInfo_OneofSizer, []interface{}{
		(*IfEnicInfo_EnicInfo)(nil),
		(*IfEnicInfo_ClassicEnicInfo)(nil),
	}
}

func _IfEnicInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IfEnicInfo)
	// enic_type_info
	switch x := m.EnicTypeInfo.(type) {
	case *IfEnicInfo_EnicInfo:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnicInfo); err != nil {
			return err
		}
	case *IfEnicInfo_ClassicEnicInfo:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClassicEnicInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IfEnicInfo.EnicTypeInfo has unexpected type %T", x)
	}
	return nil
}

func _IfEnicInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IfEnicInfo)
	switch tag {
	case 4: // enic_type_info.enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EnicInfo)
		err := b.DecodeMessage(msg)
		m.EnicTypeInfo = &IfEnicInfo_EnicInfo{msg}
		return true, err
	case 5: // enic_type_info.classic_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EnicClassicInfo)
		err := b.DecodeMessage(msg)
		m.EnicTypeInfo = &IfEnicInfo_ClassicEnicInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IfEnicInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IfEnicInfo)
	// enic_type_info
	switch x := m.EnicTypeInfo.(type) {
	case *IfEnicInfo_EnicInfo:
		s := proto.Size(x.EnicInfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IfEnicInfo_ClassicEnicInfo:
		s := proto.Size(x.ClassicEnicInfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// mandatory attributes expected if interface type is IF_TYPE_UPLINK
type IfUplinkInfo struct {
	PortNum           uint32 `protobuf:"varint,1,opt,name=port_num,json=portNum,proto3" json:"port_num,omitempty" venice:mandatory`
	NativeL2SegmentId uint64 `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId,proto3" json:"native_l2segment_id,omitempty"`
	IsOobManagement   bool   `protobuf:"varint,3,opt,name=is_oob_management,json=isOobManagement,proto3" json:"is_oob_management,omitempty" venice:immutable`
}

func (m *IfUplinkInfo) Reset()                    { *m = IfUplinkInfo{} }
func (m *IfUplinkInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkInfo) ProtoMessage()               {}
func (*IfUplinkInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{39} }

func (m *IfUplinkInfo) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *IfUplinkInfo) GetNativeL2SegmentId() uint64 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkInfo) GetIsOobManagement() bool {
	if m != nil {
		return m.IsOobManagement
	}
	return false
}

type IfUplinkPCInfo struct {
	// mandatory attributes expected if interface type is IF_TYPE_UPLINK_PC
	NativeL2SegmentId uint64                `protobuf:"varint,1,opt,name=native_l2segment_id,json=nativeL2segmentId,proto3" json:"native_l2segment_id,omitempty"`
	MemberIfKeyHandle []*InterfaceKeyHandle `protobuf:"bytes,2,rep,name=member_if_key_handle,json=memberIfKeyHandle" json:"member_if_key_handle,omitempty" venice:ref,venice:constraints={intf.InterfaceSpec.type=interface_pb2.IF_TYPE_UPLINK}`
}

func (m *IfUplinkPCInfo) Reset()                    { *m = IfUplinkPCInfo{} }
func (m *IfUplinkPCInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkPCInfo) ProtoMessage()               {}
func (*IfUplinkPCInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{40} }

func (m *IfUplinkPCInfo) GetNativeL2SegmentId() uint64 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkPCInfo) GetMemberIfKeyHandle() []*InterfaceKeyHandle {
	if m != nil {
		return m.MemberIfKeyHandle
	}
	return nil
}

type IfTunnelVxlanInfo struct {
	LocalTep  *IPAddress `protobuf:"bytes,1,opt,name=local_tep,json=localTep" json:"local_tep,omitempty"`
	RemoteTep *IPAddress `protobuf:"bytes,2,opt,name=remote_tep,json=remoteTep" json:"remote_tep,omitempty"`
}

func (m *IfTunnelVxlanInfo) Reset()                    { *m = IfTunnelVxlanInfo{} }
func (m *IfTunnelVxlanInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelVxlanInfo) ProtoMessage()               {}
func (*IfTunnelVxlanInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{41} }

func (m *IfTunnelVxlanInfo) GetLocalTep() *IPAddress {
	if m != nil {
		return m.LocalTep
	}
	return nil
}

func (m *IfTunnelVxlanInfo) GetRemoteTep() *IPAddress {
	if m != nil {
		return m.RemoteTep
	}
	return nil
}

type IfTunnelGREInfo struct {
	Source      *IPAddress `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destination *IPAddress `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	Mtu         uint32     `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Ttl         uint32     `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *IfTunnelGREInfo) Reset()                    { *m = IfTunnelGREInfo{} }
func (m *IfTunnelGREInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelGREInfo) ProtoMessage()               {}
func (*IfTunnelGREInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{42} }

func (m *IfTunnelGREInfo) GetSource() *IPAddress {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *IfTunnelGREInfo) GetDestination() *IPAddress {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *IfTunnelGREInfo) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *IfTunnelGREInfo) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type IfTunnelProprietaryMpls struct {
	SubstrateIp  *IPAddress   `protobuf:"bytes,1,opt,name=substrate_ip,json=substrateIp" json:"substrate_ip,omitempty" venice:mandatory`
	OverlayIp    []*IPAddress `protobuf:"bytes,2,rep,name=overlay_ip,json=overlayIp" json:"overlay_ip,omitempty" venice:mandatory`
	MplsIf       []*MplsTag   `protobuf:"bytes,3,rep,name=mpls_if,json=mplsIf" json:"mpls_if,omitempty" venice:mandatory`
	TunnelDestIp *IPAddress   `protobuf:"bytes,4,opt,name=tunnel_dest_ip,json=tunnelDestIp" json:"tunnel_dest_ip,omitempty" venice:mandatory`
	MplsTag      *MplsTag     `protobuf:"bytes,5,opt,name=mpls_tag,json=mplsTag" json:"mpls_tag,omitempty" venice:mandatory`
	SourceGw     *Address     `protobuf:"bytes,6,opt,name=source_gw,json=sourceGw" json:"source_gw,omitempty" venice:mandatory`
	IngressBw    uint32       `protobuf:"varint,7,opt,name=ingress_bw,json=ingressBw,proto3" json:"ingress_bw,omitempty" venice:mandatory`
	EgressBw     uint32       `protobuf:"varint,8,opt,name=egress_bw,json=egressBw,proto3" json:"egress_bw,omitempty" venice:mandatory`
	GwMacDa      uint64       `protobuf:"fixed64,9,opt,name=gw_mac_da,json=gwMacDa,proto3" json:"gw_mac_da,omitempty" venice:mandatory`
	LifName      string       `protobuf:"bytes,10,opt,name=lif_name,json=lifName,proto3" json:"lif_name,omitempty" venice:mandatory`
	OverlayMac   uint64       `protobuf:"fixed64,11,opt,name=overlay_mac,json=overlayMac,proto3" json:"overlay_mac,omitempty"`
	PfMac        uint64       `protobuf:"fixed64,12,opt,name=pf_mac,json=pfMac,proto3" json:"pf_mac,omitempty"`
}

func (m *IfTunnelProprietaryMpls) Reset()         { *m = IfTunnelProprietaryMpls{} }
func (m *IfTunnelProprietaryMpls) String() string { return proto.CompactTextString(m) }
func (*IfTunnelProprietaryMpls) ProtoMessage()    {}
func (*IfTunnelProprietaryMpls) Descriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{43}
}

func (m *IfTunnelProprietaryMpls) GetSubstrateIp() *IPAddress {
	if m != nil {
		return m.SubstrateIp
	}
	return nil
}

func (m *IfTunnelProprietaryMpls) GetOverlayIp() []*IPAddress {
	if m != nil {
		return m.OverlayIp
	}
	return nil
}

func (m *IfTunnelProprietaryMpls) GetMplsIf() []*MplsTag {
	if m != nil {
		return m.MplsIf
	}
	return nil
}

func (m *IfTunnelProprietaryMpls) GetTunnelDestIp() *IPAddress {
	if m != nil {
		return m.TunnelDestIp
	}
	return nil
}

func (m *IfTunnelProprietaryMpls) GetMplsTag() *MplsTag {
	if m != nil {
		return m.MplsTag
	}
	return nil
}

func (m *IfTunnelProprietaryMpls) GetSourceGw() *Address {
	if m != nil {
		return m.SourceGw
	}
	return nil
}

func (m *IfTunnelProprietaryMpls) GetIngressBw() uint32 {
	if m != nil {
		return m.IngressBw
	}
	return 0
}

func (m *IfTunnelProprietaryMpls) GetEgressBw() uint32 {
	if m != nil {
		return m.EgressBw
	}
	return 0
}

func (m *IfTunnelProprietaryMpls) GetGwMacDa() uint64 {
	if m != nil {
		return m.GwMacDa
	}
	return 0
}

func (m *IfTunnelProprietaryMpls) GetLifName() string {
	if m != nil {
		return m.LifName
	}
	return ""
}

func (m *IfTunnelProprietaryMpls) GetOverlayMac() uint64 {
	if m != nil {
		return m.OverlayMac
	}
	return 0
}

func (m *IfTunnelProprietaryMpls) GetPfMac() uint64 {
	if m != nil {
		return m.PfMac
	}
	return 0
}

type IfTunnelInfo struct {
	EncapType IfTunnelEncapType `protobuf:"varint,1,opt,name=encap_type,json=encapType,proto3,enum=intf.IfTunnelEncapType" json:"encap_type,omitempty"`
	// Types that are valid to be assigned to EncapInfo:
	//	*IfTunnelInfo_VxlanInfo
	//	*IfTunnelInfo_GreInfo
	//	*IfTunnelInfo_PropMplsInfo
	EncapInfo    isIfTunnelInfo_EncapInfo `protobuf_oneof:"encap_info"`
	VrfKeyHandle *VrfKeyHandle            `protobuf:"bytes,5,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty" venice:ref`
}

func (m *IfTunnelInfo) Reset()                    { *m = IfTunnelInfo{} }
func (m *IfTunnelInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelInfo) ProtoMessage()               {}
func (*IfTunnelInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{44} }

type isIfTunnelInfo_EncapInfo interface {
	isIfTunnelInfo_EncapInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IfTunnelInfo_VxlanInfo struct {
	VxlanInfo *IfTunnelVxlanInfo `protobuf:"bytes,2,opt,name=vxlan_info,json=vxlanInfo,oneof"`
}
type IfTunnelInfo_GreInfo struct {
	GreInfo *IfTunnelGREInfo `protobuf:"bytes,3,opt,name=gre_info,json=greInfo,oneof"`
}
type IfTunnelInfo_PropMplsInfo struct {
	PropMplsInfo *IfTunnelProprietaryMpls `protobuf:"bytes,4,opt,name=prop_mpls_info,json=propMplsInfo,oneof"`
}

func (*IfTunnelInfo_VxlanInfo) isIfTunnelInfo_EncapInfo()    {}
func (*IfTunnelInfo_GreInfo) isIfTunnelInfo_EncapInfo()      {}
func (*IfTunnelInfo_PropMplsInfo) isIfTunnelInfo_EncapInfo() {}

func (m *IfTunnelInfo) GetEncapInfo() isIfTunnelInfo_EncapInfo {
	if m != nil {
		return m.EncapInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetEncapType() IfTunnelEncapType {
	if m != nil {
		return m.EncapType
	}
	return IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE
}

func (m *IfTunnelInfo) GetVxlanInfo() *IfTunnelVxlanInfo {
	if x, ok := m.GetEncapInfo().(*IfTunnelInfo_VxlanInfo); ok {
		return x.VxlanInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetGreInfo() *IfTunnelGREInfo {
	if x, ok := m.GetEncapInfo().(*IfTunnelInfo_GreInfo); ok {
		return x.GreInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetPropMplsInfo() *IfTunnelProprietaryMpls {
	if x, ok := m.GetEncapInfo().(*IfTunnelInfo_PropMplsInfo); ok {
		return x.PropMplsInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IfTunnelInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IfTunnelInfo_OneofMarshaler, _IfTunnelInfo_OneofUnmarshaler, _IfTunnelInfo_OneofSizer, []interface{}{
		(*IfTunnelInfo_VxlanInfo)(nil),
		(*IfTunnelInfo_GreInfo)(nil),
		(*IfTunnelInfo_PropMplsInfo)(nil),
	}
}

func _IfTunnelInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IfTunnelInfo)
	// encap_info
	switch x := m.EncapInfo.(type) {
	case *IfTunnelInfo_VxlanInfo:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VxlanInfo); err != nil {
			return err
		}
	case *IfTunnelInfo_GreInfo:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GreInfo); err != nil {
			return err
		}
	case *IfTunnelInfo_PropMplsInfo:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PropMplsInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IfTunnelInfo.EncapInfo has unexpected type %T", x)
	}
	return nil
}

func _IfTunnelInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IfTunnelInfo)
	switch tag {
	case 2: // encap_info.vxlan_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelVxlanInfo)
		err := b.DecodeMessage(msg)
		m.EncapInfo = &IfTunnelInfo_VxlanInfo{msg}
		return true, err
	case 3: // encap_info.gre_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelGREInfo)
		err := b.DecodeMessage(msg)
		m.EncapInfo = &IfTunnelInfo_GreInfo{msg}
		return true, err
	case 4: // encap_info.prop_mpls_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelProprietaryMpls)
		err := b.DecodeMessage(msg)
		m.EncapInfo = &IfTunnelInfo_PropMplsInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IfTunnelInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IfTunnelInfo)
	// encap_info
	switch x := m.EncapInfo.(type) {
	case *IfTunnelInfo_VxlanInfo:
		s := proto.Size(x.VxlanInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IfTunnelInfo_GreInfo:
		s := proto.Size(x.GreInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *IfTunnelInfo_PropMplsInfo:
		s := proto.Size(x.PropMplsInfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// attributes for CPU If
type IfCPUInfo struct {
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,1,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty" venice:ref`
	AllowRx        bool          `protobuf:"varint,2,opt,name=allow_rx,json=allowRx,proto3" json:"allow_rx,omitempty"`
}

func (m *IfCPUInfo) Reset()                    { *m = IfCPUInfo{} }
func (m *IfCPUInfo) String() string            { return proto.CompactTextString(m) }
func (*IfCPUInfo) ProtoMessage()               {}
func (*IfCPUInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{45} }

func (m *IfCPUInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

func (m *IfCPUInfo) GetAllowRx() bool {
	if m != nil {
		return m.AllowRx
	}
	return false
}

// attributes for App Redirect If
type IfAppRedirInfo struct {
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty" venice:ref`
}

func (m *IfAppRedirInfo) Reset()                    { *m = IfAppRedirInfo{} }
func (m *IfAppRedirInfo) String() string            { return proto.CompactTextString(m) }
func (*IfAppRedirInfo) ProtoMessage()               {}
func (*IfAppRedirInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{46} }

func (m *IfAppRedirInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

// InterfaceSpec is used to add or update of an interface
type InterfaceSpec struct {
	Meta        *delphi.ObjectMeta  `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	Type        IfType              `protobuf:"varint,3,opt,name=type,proto3,enum=intf.IfType" json:"type,omitempty" venice:immutable`
	AdminStatus IfStatus            `protobuf:"varint,4,opt,name=admin_status,json=adminStatus,proto3,enum=intf.IfStatus" json:"admin_status,omitempty"`
	// Types that are valid to be assigned to IfInfo:
	//	*InterfaceSpec_IfEnicInfo
	//	*InterfaceSpec_IfUplinkInfo
	//	*InterfaceSpec_IfUplinkPcInfo
	//	*InterfaceSpec_IfTunnelInfo
	//	*InterfaceSpec_IfCpuInfo
	//	*InterfaceSpec_IfAppRedirInfo
	IfInfo           isInterfaceSpec_IfInfo    `protobuf_oneof:"if_info"`
	TxMirrorSessions []*MirrorSessionKeyHandle `protobuf:"bytes,11,rep,name=TxMirrorSessions" json:"TxMirrorSessions,omitempty" venice:ref`
	RxMirrorSessions []*MirrorSessionKeyHandle `protobuf:"bytes,12,rep,name=RxMirrorSessions" json:"RxMirrorSessions,omitempty" venice:ref`
}

func (m *InterfaceSpec) Reset()                    { *m = InterfaceSpec{} }
func (m *InterfaceSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceSpec) ProtoMessage()               {}
func (*InterfaceSpec) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{47} }

type isInterfaceSpec_IfInfo interface {
	isInterfaceSpec_IfInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type InterfaceSpec_IfEnicInfo struct {
	IfEnicInfo *IfEnicInfo `protobuf:"bytes,5,opt,name=if_enic_info,json=ifEnicInfo,oneof"`
}
type InterfaceSpec_IfUplinkInfo struct {
	IfUplinkInfo *IfUplinkInfo `protobuf:"bytes,6,opt,name=if_uplink_info,json=ifUplinkInfo,oneof"`
}
type InterfaceSpec_IfUplinkPcInfo struct {
	IfUplinkPcInfo *IfUplinkPCInfo `protobuf:"bytes,7,opt,name=if_uplink_pc_info,json=ifUplinkPcInfo,oneof"`
}
type InterfaceSpec_IfTunnelInfo struct {
	IfTunnelInfo *IfTunnelInfo `protobuf:"bytes,8,opt,name=if_tunnel_info,json=ifTunnelInfo,oneof"`
}
type InterfaceSpec_IfCpuInfo struct {
	IfCpuInfo *IfCPUInfo `protobuf:"bytes,9,opt,name=if_cpu_info,json=ifCpuInfo,oneof"`
}
type InterfaceSpec_IfAppRedirInfo struct {
	IfAppRedirInfo *IfAppRedirInfo `protobuf:"bytes,10,opt,name=if_app_redir_info,json=ifAppRedirInfo,oneof"`
}

func (*InterfaceSpec_IfEnicInfo) isInterfaceSpec_IfInfo()     {}
func (*InterfaceSpec_IfUplinkInfo) isInterfaceSpec_IfInfo()   {}
func (*InterfaceSpec_IfUplinkPcInfo) isInterfaceSpec_IfInfo() {}
func (*InterfaceSpec_IfTunnelInfo) isInterfaceSpec_IfInfo()   {}
func (*InterfaceSpec_IfCpuInfo) isInterfaceSpec_IfInfo()      {}
func (*InterfaceSpec_IfAppRedirInfo) isInterfaceSpec_IfInfo() {}

func (m *InterfaceSpec) GetIfInfo() isInterfaceSpec_IfInfo {
	if m != nil {
		return m.IfInfo
	}
	return nil
}

func (m *InterfaceSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceSpec) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceSpec) GetType() IfType {
	if m != nil {
		return m.Type
	}
	return IfType_IF_TYPE_NONE
}

func (m *InterfaceSpec) GetAdminStatus() IfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *InterfaceSpec) GetIfEnicInfo() *IfEnicInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfEnicInfo); ok {
		return x.IfEnicInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkInfo() *IfUplinkInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfUplinkInfo); ok {
		return x.IfUplinkInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkPcInfo() *IfUplinkPCInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfUplinkPcInfo); ok {
		return x.IfUplinkPcInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfTunnelInfo() *IfTunnelInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfTunnelInfo); ok {
		return x.IfTunnelInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfCpuInfo() *IfCPUInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfCpuInfo); ok {
		return x.IfCpuInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfAppRedirInfo() *IfAppRedirInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfAppRedirInfo); ok {
		return x.IfAppRedirInfo
	}
	return nil
}

func (m *InterfaceSpec) GetTxMirrorSessions() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.TxMirrorSessions
	}
	return nil
}

func (m *InterfaceSpec) GetRxMirrorSessions() []*MirrorSessionKeyHandle {
	if m != nil {
		return m.RxMirrorSessions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InterfaceSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InterfaceSpec_OneofMarshaler, _InterfaceSpec_OneofUnmarshaler, _InterfaceSpec_OneofSizer, []interface{}{
		(*InterfaceSpec_IfEnicInfo)(nil),
		(*InterfaceSpec_IfUplinkInfo)(nil),
		(*InterfaceSpec_IfUplinkPcInfo)(nil),
		(*InterfaceSpec_IfTunnelInfo)(nil),
		(*InterfaceSpec_IfCpuInfo)(nil),
		(*InterfaceSpec_IfAppRedirInfo)(nil),
	}
}

func _InterfaceSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InterfaceSpec)
	// if_info
	switch x := m.IfInfo.(type) {
	case *InterfaceSpec_IfEnicInfo:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfEnicInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfUplinkInfo:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfUplinkInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfUplinkPcInfo:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfUplinkPcInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfTunnelInfo:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfTunnelInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfCpuInfo:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfCpuInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfAppRedirInfo:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfAppRedirInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InterfaceSpec.IfInfo has unexpected type %T", x)
	}
	return nil
}

func _InterfaceSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InterfaceSpec)
	switch tag {
	case 5: // if_info.if_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfEnicInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfEnicInfo{msg}
		return true, err
	case 6: // if_info.if_uplink_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfUplinkInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfUplinkInfo{msg}
		return true, err
	case 7: // if_info.if_uplink_pc_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfUplinkPCInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfUplinkPcInfo{msg}
		return true, err
	case 8: // if_info.if_tunnel_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfTunnelInfo{msg}
		return true, err
	case 9: // if_info.if_cpu_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfCPUInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfCpuInfo{msg}
		return true, err
	case 10: // if_info.if_app_redir_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfAppRedirInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfAppRedirInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InterfaceSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InterfaceSpec)
	// if_info
	switch x := m.IfInfo.(type) {
	case *InterfaceSpec_IfEnicInfo:
		s := proto.Size(x.IfEnicInfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfUplinkInfo:
		s := proto.Size(x.IfUplinkInfo)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfUplinkPcInfo:
		s := proto.Size(x.IfUplinkPcInfo)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfTunnelInfo:
		s := proto.Size(x.IfTunnelInfo)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfCpuInfo:
		s := proto.Size(x.IfCpuInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfAppRedirInfo:
		s := proto.Size(x.IfAppRedirInfo)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InterfaceRequestMsg is batched request message that is used to do
// create/update of interface(s)
type InterfaceRequestMsg struct {
	Request []*InterfaceSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceRequestMsg) Reset()                    { *m = InterfaceRequestMsg{} }
func (m *InterfaceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceRequestMsg) ProtoMessage()               {}
func (*InterfaceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{48} }

func (m *InterfaceRequestMsg) GetRequest() []*InterfaceSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// Uplink/Uplink PC's response
type UplinkResponseInfo struct {
	UplinkLportId uint32 `protobuf:"varint,1,opt,name=uplink_lport_id,json=uplinkLportId,proto3" json:"uplink_lport_id,omitempty"`
	HwLifId       uint32 `protobuf:"varint,2,opt,name=hw_lif_id,json=hwLifId,proto3" json:"hw_lif_id,omitempty"`
	UplinkIdx     uint32 `protobuf:"varint,3,opt,name=uplink_idx,json=uplinkIdx,proto3" json:"uplink_idx,omitempty"`
	NumL2Segs     uint32 `protobuf:"varint,4,opt,name=num_l2segs,json=numL2segs,proto3" json:"num_l2segs,omitempty"`
	HwPortNum     uint32 `protobuf:"varint,5,opt,name=hw_port_num,json=hwPortNum,proto3" json:"hw_port_num,omitempty"`
	TxPps         uint64 `protobuf:"varint,6,opt,name=tx_pps,json=txPps,proto3" json:"tx_pps,omitempty"`
	TxBytesps     uint64 `protobuf:"varint,7,opt,name=tx_bytesps,json=txBytesps,proto3" json:"tx_bytesps,omitempty"`
	RxPps         uint64 `protobuf:"varint,8,opt,name=rx_pps,json=rxPps,proto3" json:"rx_pps,omitempty"`
	RxBytesps     uint64 `protobuf:"varint,9,opt,name=rx_bytesps,json=rxBytesps,proto3" json:"rx_bytesps,omitempty"`
}

func (m *UplinkResponseInfo) Reset()                    { *m = UplinkResponseInfo{} }
func (m *UplinkResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*UplinkResponseInfo) ProtoMessage()               {}
func (*UplinkResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{49} }

func (m *UplinkResponseInfo) GetUplinkLportId() uint32 {
	if m != nil {
		return m.UplinkLportId
	}
	return 0
}

func (m *UplinkResponseInfo) GetHwLifId() uint32 {
	if m != nil {
		return m.HwLifId
	}
	return 0
}

func (m *UplinkResponseInfo) GetUplinkIdx() uint32 {
	if m != nil {
		return m.UplinkIdx
	}
	return 0
}

func (m *UplinkResponseInfo) GetNumL2Segs() uint32 {
	if m != nil {
		return m.NumL2Segs
	}
	return 0
}

func (m *UplinkResponseInfo) GetHwPortNum() uint32 {
	if m != nil {
		return m.HwPortNum
	}
	return 0
}

func (m *UplinkResponseInfo) GetTxPps() uint64 {
	if m != nil {
		return m.TxPps
	}
	return 0
}

func (m *UplinkResponseInfo) GetTxBytesps() uint64 {
	if m != nil {
		return m.TxBytesps
	}
	return 0
}

func (m *UplinkResponseInfo) GetRxPps() uint64 {
	if m != nil {
		return m.RxPps
	}
	return 0
}

func (m *UplinkResponseInfo) GetRxBytesps() uint64 {
	if m != nil {
		return m.RxBytesps
	}
	return 0
}

// Enic <-> L2seg membership info
type EnicL2SegInfo struct {
	L2SegmentKeyOrHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_or_handle,json=l2segmentKeyOrHandle" json:"l2segment_key_or_handle,omitempty" venice:ref`
	InpPropIdx           uint32              `protobuf:"varint,2,opt,name=inp_prop_idx,json=inpPropIdx,proto3" json:"inp_prop_idx,omitempty"`
}

func (m *EnicL2SegInfo) Reset()                    { *m = EnicL2SegInfo{} }
func (m *EnicL2SegInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicL2SegInfo) ProtoMessage()               {}
func (*EnicL2SegInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{50} }

func (m *EnicL2SegInfo) GetL2SegmentKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyOrHandle
	}
	return nil
}

func (m *EnicL2SegInfo) GetInpPropIdx() uint32 {
	if m != nil {
		return m.InpPropIdx
	}
	return 0
}

type SmartEnicInfo struct {
	InpPropMacVlanIdxHost uint32 `protobuf:"varint,1,opt,name=inp_prop_mac_vlan_idx_host,json=inpPropMacVlanIdxHost,proto3" json:"inp_prop_mac_vlan_idx_host,omitempty"`
	InpPropMacVlanIdxNet  uint32 `protobuf:"varint,2,opt,name=inp_prop_mac_vlan_idx_net,json=inpPropMacVlanIdxNet,proto3" json:"inp_prop_mac_vlan_idx_net,omitempty"`
}

func (m *SmartEnicInfo) Reset()                    { *m = SmartEnicInfo{} }
func (m *SmartEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*SmartEnicInfo) ProtoMessage()               {}
func (*SmartEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{51} }

func (m *SmartEnicInfo) GetInpPropMacVlanIdxHost() uint32 {
	if m != nil {
		return m.InpPropMacVlanIdxHost
	}
	return 0
}

func (m *SmartEnicInfo) GetInpPropMacVlanIdxNet() uint32 {
	if m != nil {
		return m.InpPropMacVlanIdxNet
	}
	return 0
}

type ClassicEnicInfo struct {
	InpPropNatL2SegClassic uint32           `protobuf:"varint,1,opt,name=inp_prop_nat_l2seg_classic,json=inpPropNatL2segClassic,proto3" json:"inp_prop_nat_l2seg_classic,omitempty"`
	MembershipInfo         []*EnicL2SegInfo `protobuf:"bytes,2,rep,name=membership_info,json=membershipInfo" json:"membership_info,omitempty"`
}

func (m *ClassicEnicInfo) Reset()                    { *m = ClassicEnicInfo{} }
func (m *ClassicEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*ClassicEnicInfo) ProtoMessage()               {}
func (*ClassicEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{52} }

func (m *ClassicEnicInfo) GetInpPropNatL2SegClassic() uint32 {
	if m != nil {
		return m.InpPropNatL2SegClassic
	}
	return 0
}

func (m *ClassicEnicInfo) GetMembershipInfo() []*EnicL2SegInfo {
	if m != nil {
		return m.MembershipInfo
	}
	return nil
}

// Enic's response
type EnicResponseInfo struct {
	EnicLportId    uint32 `protobuf:"varint,1,opt,name=enic_lport_id,json=enicLportId,proto3" json:"enic_lport_id,omitempty"`
	UplinkIfHandle uint32 `protobuf:"varint,2,opt,name=uplink_if_handle,json=uplinkIfHandle,proto3" json:"uplink_if_handle,omitempty"`
	// Types that are valid to be assigned to EnicTypeInfo:
	//	*EnicResponseInfo_SmartEnicInfo
	//	*EnicResponseInfo_ClassicEnicInfo
	EnicTypeInfo isEnicResponseInfo_EnicTypeInfo `protobuf_oneof:"EnicTypeInfo"`
}

func (m *EnicResponseInfo) Reset()                    { *m = EnicResponseInfo{} }
func (m *EnicResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*EnicResponseInfo) ProtoMessage()               {}
func (*EnicResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{53} }

type isEnicResponseInfo_EnicTypeInfo interface {
	isEnicResponseInfo_EnicTypeInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EnicResponseInfo_SmartEnicInfo struct {
	SmartEnicInfo *SmartEnicInfo `protobuf:"bytes,3,opt,name=smart_enic_info,json=smartEnicInfo,oneof"`
}
type EnicResponseInfo_ClassicEnicInfo struct {
	ClassicEnicInfo *ClassicEnicInfo `protobuf:"bytes,4,opt,name=classic_enic_info,json=classicEnicInfo,oneof"`
}

func (*EnicResponseInfo_SmartEnicInfo) isEnicResponseInfo_EnicTypeInfo()   {}
func (*EnicResponseInfo_ClassicEnicInfo) isEnicResponseInfo_EnicTypeInfo() {}

func (m *EnicResponseInfo) GetEnicTypeInfo() isEnicResponseInfo_EnicTypeInfo {
	if m != nil {
		return m.EnicTypeInfo
	}
	return nil
}

func (m *EnicResponseInfo) GetEnicLportId() uint32 {
	if m != nil {
		return m.EnicLportId
	}
	return 0
}

func (m *EnicResponseInfo) GetUplinkIfHandle() uint32 {
	if m != nil {
		return m.UplinkIfHandle
	}
	return 0
}

func (m *EnicResponseInfo) GetSmartEnicInfo() *SmartEnicInfo {
	if x, ok := m.GetEnicTypeInfo().(*EnicResponseInfo_SmartEnicInfo); ok {
		return x.SmartEnicInfo
	}
	return nil
}

func (m *EnicResponseInfo) GetClassicEnicInfo() *ClassicEnicInfo {
	if x, ok := m.GetEnicTypeInfo().(*EnicResponseInfo_ClassicEnicInfo); ok {
		return x.ClassicEnicInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EnicResponseInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EnicResponseInfo_OneofMarshaler, _EnicResponseInfo_OneofUnmarshaler, _EnicResponseInfo_OneofSizer, []interface{}{
		(*EnicResponseInfo_SmartEnicInfo)(nil),
		(*EnicResponseInfo_ClassicEnicInfo)(nil),
	}
}

func _EnicResponseInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EnicResponseInfo)
	// EnicTypeInfo
	switch x := m.EnicTypeInfo.(type) {
	case *EnicResponseInfo_SmartEnicInfo:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SmartEnicInfo); err != nil {
			return err
		}
	case *EnicResponseInfo_ClassicEnicInfo:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClassicEnicInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EnicResponseInfo.EnicTypeInfo has unexpected type %T", x)
	}
	return nil
}

func _EnicResponseInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EnicResponseInfo)
	switch tag {
	case 3: // EnicTypeInfo.smart_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SmartEnicInfo)
		err := b.DecodeMessage(msg)
		m.EnicTypeInfo = &EnicResponseInfo_SmartEnicInfo{msg}
		return true, err
	case 4: // EnicTypeInfo.classic_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClassicEnicInfo)
		err := b.DecodeMessage(msg)
		m.EnicTypeInfo = &EnicResponseInfo_ClassicEnicInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EnicResponseInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EnicResponseInfo)
	// EnicTypeInfo
	switch x := m.EnicTypeInfo.(type) {
	case *EnicResponseInfo_SmartEnicInfo:
		s := proto.Size(x.SmartEnicInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EnicResponseInfo_ClassicEnicInfo:
		s := proto.Size(x.ClassicEnicInfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CPU If's response
type CpuIfResponseInfo struct {
	CpuLportId uint32 `protobuf:"varint,1,opt,name=cpu_lport_id,json=cpuLportId,proto3" json:"cpu_lport_id,omitempty"`
}

func (m *CpuIfResponseInfo) Reset()                    { *m = CpuIfResponseInfo{} }
func (m *CpuIfResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*CpuIfResponseInfo) ProtoMessage()               {}
func (*CpuIfResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{54} }

func (m *CpuIfResponseInfo) GetCpuLportId() uint32 {
	if m != nil {
		return m.CpuLportId
	}
	return 0
}

// Tunnel If's response
type TunnelIfResponseInfo struct {
	InpMapNatIdx []uint32 `protobuf:"varint,1,rep,packed,name=inp_map_nat_idx,json=inpMapNatIdx" json:"inp_map_nat_idx,omitempty"`
	//  1. Inner IPv4
	//  2. Inner IPv6
	//  3. Inner MAC
	InpMapTnlIdx []uint32 `protobuf:"varint,2,rep,packed,name=inp_map_tnl_idx,json=inpMapTnlIdx" json:"inp_map_tnl_idx,omitempty"`
	//  1. Inner IPv4
	//  2. Inner IPv6
	//  3. Inner MAC
	TunnelRwIdx uint32 `protobuf:"varint,3,opt,name=tunnel_rw_idx,json=tunnelRwIdx,proto3" json:"tunnel_rw_idx,omitempty"`
}

func (m *TunnelIfResponseInfo) Reset()                    { *m = TunnelIfResponseInfo{} }
func (m *TunnelIfResponseInfo) String() string            { return proto.CompactTextString(m) }
func (*TunnelIfResponseInfo) ProtoMessage()               {}
func (*TunnelIfResponseInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{55} }

func (m *TunnelIfResponseInfo) GetInpMapNatIdx() []uint32 {
	if m != nil {
		return m.InpMapNatIdx
	}
	return nil
}

func (m *TunnelIfResponseInfo) GetInpMapTnlIdx() []uint32 {
	if m != nil {
		return m.InpMapTnlIdx
	}
	return nil
}

func (m *TunnelIfResponseInfo) GetTunnelRwIdx() uint32 {
	if m != nil {
		return m.TunnelRwIdx
	}
	return 0
}

// App redir if's response
type AppRedirIfInfo struct {
	LportId uint32 `protobuf:"varint,1,opt,name=lport_id,json=lportId,proto3" json:"lport_id,omitempty"`
}

func (m *AppRedirIfInfo) Reset()                    { *m = AppRedirIfInfo{} }
func (m *AppRedirIfInfo) String() string            { return proto.CompactTextString(m) }
func (*AppRedirIfInfo) ProtoMessage()               {}
func (*AppRedirIfInfo) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{56} }

func (m *AppRedirIfInfo) GetLportId() uint32 {
	if m != nil {
		return m.LportId
	}
	return 0
}

// InterfaceStatus represents the current status of the interface
type InterfaceStatus struct {
	Meta        *delphi.ObjectMeta  `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	IfStatus    IfStatus            `protobuf:"varint,3,opt,name=if_status,json=ifStatus,proto3,enum=intf.IfStatus" json:"if_status,omitempty"`
	IfHandle    uint64              `protobuf:"fixed64,4,opt,name=if_handle,json=ifHandle,proto3" json:"if_handle,omitempty"`
	// Types that are valid to be assigned to IfResponseInfo:
	//	*InterfaceStatus_UplinkInfo
	//	*InterfaceStatus_EnicInfo
	//	*InterfaceStatus_CpuInfo
	//	*InterfaceStatus_TunnelInfo
	//	*InterfaceStatus_AppRedirInfo
	IfResponseInfo isInterfaceStatus_IfResponseInfo `protobuf_oneof:"if_response_info"`
}

func (m *InterfaceStatus) Reset()                    { *m = InterfaceStatus{} }
func (m *InterfaceStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStatus) ProtoMessage()               {}
func (*InterfaceStatus) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{57} }

type isInterfaceStatus_IfResponseInfo interface {
	isInterfaceStatus_IfResponseInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type InterfaceStatus_UplinkInfo struct {
	UplinkInfo *UplinkResponseInfo `protobuf:"bytes,5,opt,name=uplink_info,json=uplinkInfo,oneof"`
}
type InterfaceStatus_EnicInfo struct {
	EnicInfo *EnicResponseInfo `protobuf:"bytes,6,opt,name=enic_info,json=enicInfo,oneof"`
}
type InterfaceStatus_CpuInfo struct {
	CpuInfo *CpuIfResponseInfo `protobuf:"bytes,7,opt,name=cpu_info,json=cpuInfo,oneof"`
}
type InterfaceStatus_TunnelInfo struct {
	TunnelInfo *TunnelIfResponseInfo `protobuf:"bytes,8,opt,name=tunnel_info,json=tunnelInfo,oneof"`
}
type InterfaceStatus_AppRedirInfo struct {
	AppRedirInfo *AppRedirIfInfo `protobuf:"bytes,9,opt,name=app_redir_info,json=appRedirInfo,oneof"`
}

func (*InterfaceStatus_UplinkInfo) isInterfaceStatus_IfResponseInfo()   {}
func (*InterfaceStatus_EnicInfo) isInterfaceStatus_IfResponseInfo()     {}
func (*InterfaceStatus_CpuInfo) isInterfaceStatus_IfResponseInfo()      {}
func (*InterfaceStatus_TunnelInfo) isInterfaceStatus_IfResponseInfo()   {}
func (*InterfaceStatus_AppRedirInfo) isInterfaceStatus_IfResponseInfo() {}

func (m *InterfaceStatus) GetIfResponseInfo() isInterfaceStatus_IfResponseInfo {
	if m != nil {
		return m.IfResponseInfo
	}
	return nil
}

func (m *InterfaceStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceStatus) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceStatus) GetIfStatus() IfStatus {
	if m != nil {
		return m.IfStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *InterfaceStatus) GetIfHandle() uint64 {
	if m != nil {
		return m.IfHandle
	}
	return 0
}

func (m *InterfaceStatus) GetUplinkInfo() *UplinkResponseInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_UplinkInfo); ok {
		return x.UplinkInfo
	}
	return nil
}

func (m *InterfaceStatus) GetEnicInfo() *EnicResponseInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_EnicInfo); ok {
		return x.EnicInfo
	}
	return nil
}

func (m *InterfaceStatus) GetCpuInfo() *CpuIfResponseInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_CpuInfo); ok {
		return x.CpuInfo
	}
	return nil
}

func (m *InterfaceStatus) GetTunnelInfo() *TunnelIfResponseInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_TunnelInfo); ok {
		return x.TunnelInfo
	}
	return nil
}

func (m *InterfaceStatus) GetAppRedirInfo() *AppRedirIfInfo {
	if x, ok := m.GetIfResponseInfo().(*InterfaceStatus_AppRedirInfo); ok {
		return x.AppRedirInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InterfaceStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InterfaceStatus_OneofMarshaler, _InterfaceStatus_OneofUnmarshaler, _InterfaceStatus_OneofSizer, []interface{}{
		(*InterfaceStatus_UplinkInfo)(nil),
		(*InterfaceStatus_EnicInfo)(nil),
		(*InterfaceStatus_CpuInfo)(nil),
		(*InterfaceStatus_TunnelInfo)(nil),
		(*InterfaceStatus_AppRedirInfo)(nil),
	}
}

func _InterfaceStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InterfaceStatus)
	// if_response_info
	switch x := m.IfResponseInfo.(type) {
	case *InterfaceStatus_UplinkInfo:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UplinkInfo); err != nil {
			return err
		}
	case *InterfaceStatus_EnicInfo:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnicInfo); err != nil {
			return err
		}
	case *InterfaceStatus_CpuInfo:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CpuInfo); err != nil {
			return err
		}
	case *InterfaceStatus_TunnelInfo:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TunnelInfo); err != nil {
			return err
		}
	case *InterfaceStatus_AppRedirInfo:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AppRedirInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InterfaceStatus.IfResponseInfo has unexpected type %T", x)
	}
	return nil
}

func _InterfaceStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InterfaceStatus)
	switch tag {
	case 5: // if_response_info.uplink_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UplinkResponseInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_UplinkInfo{msg}
		return true, err
	case 6: // if_response_info.enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EnicResponseInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_EnicInfo{msg}
		return true, err
	case 7: // if_response_info.cpu_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CpuIfResponseInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_CpuInfo{msg}
		return true, err
	case 8: // if_response_info.tunnel_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TunnelIfResponseInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_TunnelInfo{msg}
		return true, err
	case 9: // if_response_info.app_redir_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AppRedirIfInfo)
		err := b.DecodeMessage(msg)
		m.IfResponseInfo = &InterfaceStatus_AppRedirInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InterfaceStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InterfaceStatus)
	// if_response_info
	switch x := m.IfResponseInfo.(type) {
	case *InterfaceStatus_UplinkInfo:
		s := proto.Size(x.UplinkInfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceStatus_EnicInfo:
		s := proto.Size(x.EnicInfo)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceStatus_CpuInfo:
		s := proto.Size(x.CpuInfo)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceStatus_TunnelInfo:
		s := proto.Size(x.TunnelInfo)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceStatus_AppRedirInfo:
		s := proto.Size(x.AppRedirInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InterfaceResponse is response to one InterfaceSpec
type InterfaceResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *InterfaceStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *InterfaceResponse) Reset()                    { *m = InterfaceResponse{} }
func (m *InterfaceResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponse) ProtoMessage()               {}
func (*InterfaceResponse) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{58} }

func (m *InterfaceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// InterfaceResponseMsg is response to InterfaceRequestMsg
type InterfaceResponseMsg struct {
	Response []*InterfaceResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceResponseMsg) Reset()                    { *m = InterfaceResponseMsg{} }
func (m *InterfaceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponseMsg) ProtoMessage()               {}
func (*InterfaceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{59} }

func (m *InterfaceResponseMsg) GetResponse() []*InterfaceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceDeleteRequest is used to delete a interface object
type InterfaceDeleteRequest struct {
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *InterfaceDeleteRequest) Reset()                    { *m = InterfaceDeleteRequest{} }
func (m *InterfaceDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequest) ProtoMessage()               {}
func (*InterfaceDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{60} }

func (m *InterfaceDeleteRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceDeleteRequestMsg is used to delete a batch of interfaces
type InterfaceDeleteRequestMsg struct {
	Request []*InterfaceDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceDeleteRequestMsg) Reset()         { *m = InterfaceDeleteRequestMsg{} }
func (m *InterfaceDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequestMsg) ProtoMessage()    {}
func (*InterfaceDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{61}
}

func (m *InterfaceDeleteRequestMsg) GetRequest() []*InterfaceDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceDeleteResponse is batched response to InterfaceDeleteRequest
type InterfaceDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *InterfaceDeleteResponse) Reset()         { *m = InterfaceDeleteResponse{} }
func (m *InterfaceDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*InterfaceDeleteResponse) ProtoMessage()    {}
func (*InterfaceDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{62}
}

func (m *InterfaceDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// InterfaceDeleteResponseMsg is batched response to InterfaceDeleteRequestMsg
type InterfaceDeleteResponseMsg struct {
	Response []*InterfaceDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceDeleteResponseMsg) Reset()         { *m = InterfaceDeleteResponseMsg{} }
func (m *InterfaceDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*InterfaceDeleteResponseMsg) ProtoMessage()    {}
func (*InterfaceDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{63}
}

func (m *InterfaceDeleteResponseMsg) GetResponse() []*InterfaceDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceStats captures all the statistics of given interface
type InterfaceStats struct {
	NumTxPackets uint32 `protobuf:"fixed32,1,opt,name=num_tx_packets,json=numTxPackets,proto3" json:"num_tx_packets,omitempty"`
	NumTxBytes   uint32 `protobuf:"fixed32,2,opt,name=num_tx_bytes,json=numTxBytes,proto3" json:"num_tx_bytes,omitempty"`
	NumRxPackets uint32 `protobuf:"fixed32,3,opt,name=num_rx_packets,json=numRxPackets,proto3" json:"num_rx_packets,omitempty"`
	NumRxBytes   uint32 `protobuf:"fixed32,4,opt,name=num_rx_bytes,json=numRxBytes,proto3" json:"num_rx_bytes,omitempty"`
}

func (m *InterfaceStats) Reset()                    { *m = InterfaceStats{} }
func (m *InterfaceStats) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStats) ProtoMessage()               {}
func (*InterfaceStats) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{64} }

func (m *InterfaceStats) GetNumTxPackets() uint32 {
	if m != nil {
		return m.NumTxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumTxBytes() uint32 {
	if m != nil {
		return m.NumTxBytes
	}
	return 0
}

func (m *InterfaceStats) GetNumRxPackets() uint32 {
	if m != nil {
		return m.NumRxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumRxBytes() uint32 {
	if m != nil {
		return m.NumRxBytes
	}
	return 0
}

// InterfaceGetRequest is used to get information about a interface
type InterfaceGetRequest struct {
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *InterfaceGetRequest) Reset()                    { *m = InterfaceGetRequest{} }
func (m *InterfaceGetRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequest) ProtoMessage()               {}
func (*InterfaceGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{65} }

func (m *InterfaceGetRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceGetRequestMsg is batched GET request for interfaces
type InterfaceGetRequestMsg struct {
	Request []*InterfaceGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceGetRequestMsg) Reset()                    { *m = InterfaceGetRequestMsg{} }
func (m *InterfaceGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequestMsg) ProtoMessage()               {}
func (*InterfaceGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{66} }

func (m *InterfaceGetRequestMsg) GetRequest() []*InterfaceGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceGetResponse captures all the information about a interface
type InterfaceGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *InterfaceSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *InterfaceStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *InterfaceStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *InterfaceGetResponse) Reset()                    { *m = InterfaceGetResponse{} }
func (m *InterfaceGetResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetResponse) ProtoMessage()               {}
func (*InterfaceGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{67} }

func (m *InterfaceGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceGetResponse) GetSpec() *InterfaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *InterfaceGetResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InterfaceGetResponse) GetStats() *InterfaceStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// InterfaceGetResponseMsg is response to InterfaceGetRequestMsg
type InterfaceGetResponseMsg struct {
	ApiStatus ApiStatus               `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*InterfaceGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceGetResponseMsg) Reset()         { *m = InterfaceGetResponseMsg{} }
func (m *InterfaceGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*InterfaceGetResponseMsg) ProtoMessage()    {}
func (*InterfaceGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{68}
}

func (m *InterfaceGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceGetResponseMsg) GetResponse() []*InterfaceGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceL2SegmentSpec carries the user vlan that is being added or deleted
// on an uplink interface or uplink PC
type InterfaceL2SegmentSpec struct {
	L2SegmentKeyOrHandle *L2SegmentKeyHandle `protobuf:"bytes,1,opt,name=l2segment_key_or_handle,json=l2segmentKeyOrHandle" json:"l2segment_key_or_handle,omitempty" venice:ref`
	IfKeyHandle          *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=if_key_handle,json=ifKeyHandle" json:"if_key_handle,omitempty" venice:ref`
}

func (m *InterfaceL2SegmentSpec) Reset()                    { *m = InterfaceL2SegmentSpec{} }
func (m *InterfaceL2SegmentSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentSpec) ProtoMessage()               {}
func (*InterfaceL2SegmentSpec) Descriptor() ([]byte, []int) { return fileDescriptorInterface, []int{69} }

func (m *InterfaceL2SegmentSpec) GetL2SegmentKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyOrHandle
	}
	return nil
}

func (m *InterfaceL2SegmentSpec) GetIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.IfKeyHandle
	}
	return nil
}

// InterfaceL2SegmentRequestMsg is batched request message to bring vlans
// on interfaces
type InterfaceL2SegmentRequestMsg struct {
	Request []*InterfaceL2SegmentSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceL2SegmentRequestMsg) Reset()         { *m = InterfaceL2SegmentRequestMsg{} }
func (m *InterfaceL2SegmentRequestMsg) String() string { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentRequestMsg) ProtoMessage()    {}
func (*InterfaceL2SegmentRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{70}
}

func (m *InterfaceL2SegmentRequestMsg) GetRequest() []*InterfaceL2SegmentSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceL2SegmentResponse is response to InterfaceL2SegmentSpec
type InterfaceL2SegmentResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *InterfaceL2SegmentResponse) Reset()         { *m = InterfaceL2SegmentResponse{} }
func (m *InterfaceL2SegmentResponse) String() string { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponse) ProtoMessage()    {}
func (*InterfaceL2SegmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{71}
}

func (m *InterfaceL2SegmentResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// InterfaceL2SegmentResponseMsg is batched response to InterfaceL2SegmentResponse
type InterfaceL2SegmentResponseMsg struct {
	Response []*InterfaceL2SegmentResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceL2SegmentResponseMsg) Reset()         { *m = InterfaceL2SegmentResponseMsg{} }
func (m *InterfaceL2SegmentResponseMsg) String() string { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponseMsg) ProtoMessage()    {}
func (*InterfaceL2SegmentResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInterface, []int{72}
}

func (m *InterfaceL2SegmentResponseMsg) GetResponse() []*InterfaceL2SegmentResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*LifQStateMapEntry)(nil), "intf.LifQStateMapEntry")
	proto.RegisterType((*PktFilter)(nil), "intf.PktFilter")
	proto.RegisterType((*BcastPktFilter)(nil), "intf.BcastPktFilter")
	proto.RegisterType((*McastPktFilter)(nil), "intf.McastPktFilter")
	proto.RegisterType((*LifSpec)(nil), "intf.LifSpec")
	proto.RegisterType((*LifRequestMsg)(nil), "intf.LifRequestMsg")
	proto.RegisterType((*LifStatus)(nil), "intf.LifStatus")
	proto.RegisterType((*LifQState)(nil), "intf.LifQState")
	proto.RegisterType((*LifRdmaData)(nil), "intf.LifRdmaData")
	proto.RegisterType((*LifTxSchedulerData)(nil), "intf.LifTxSchedulerData")
	proto.RegisterType((*LifResponse)(nil), "intf.LifResponse")
	proto.RegisterType((*LifResponseMsg)(nil), "intf.LifResponseMsg")
	proto.RegisterType((*QStateGetReq)(nil), "intf.QStateGetReq")
	proto.RegisterType((*GetQStateRequestMsg)(nil), "intf.GetQStateRequestMsg")
	proto.RegisterType((*QStateGetResp)(nil), "intf.QStateGetResp")
	proto.RegisterType((*GetQStateResponseMsg)(nil), "intf.GetQStateResponseMsg")
	proto.RegisterType((*P4ProgLabel)(nil), "intf.P4ProgLabel")
	proto.RegisterType((*QStateSetReq)(nil), "intf.QStateSetReq")
	proto.RegisterType((*SetQStateRequestMsg)(nil), "intf.SetQStateRequestMsg")
	proto.RegisterType((*QStateSetResp)(nil), "intf.QStateSetResp")
	proto.RegisterType((*SetQStateResponseMsg)(nil), "intf.SetQStateResponseMsg")
	proto.RegisterType((*LifDeleteRequest)(nil), "intf.LifDeleteRequest")
	proto.RegisterType((*LifDeleteRequestMsg)(nil), "intf.LifDeleteRequestMsg")
	proto.RegisterType((*LifDeleteResponse)(nil), "intf.LifDeleteResponse")
	proto.RegisterType((*LifDeleteResponseMsg)(nil), "intf.LifDeleteResponseMsg")
	proto.RegisterType((*LifTxStats)(nil), "intf.LifTxStats")
	proto.RegisterType((*LifRxStats)(nil), "intf.LifRxStats")
	proto.RegisterType((*DataLifStats)(nil), "intf.DataLifStats")
	proto.RegisterType((*CpuQueueStats)(nil), "intf.CpuQueueStats")
	proto.RegisterType((*CpuLifStats)(nil), "intf.CpuLifStats")
	proto.RegisterType((*LifStats)(nil), "intf.LifStats")
	proto.RegisterType((*LifGetRequest)(nil), "intf.LifGetRequest")
	proto.RegisterType((*LifGetRequestMsg)(nil), "intf.LifGetRequestMsg")
	proto.RegisterType((*LifGetResponse)(nil), "intf.LifGetResponse")
	proto.RegisterType((*LifGetResponseMsg)(nil), "intf.LifGetResponseMsg")
	proto.RegisterType((*LifRssSpec)(nil), "intf.LifRssSpec")
	proto.RegisterType((*EnicInfo)(nil), "intf.EnicInfo")
	proto.RegisterType((*EnicClassicInfo)(nil), "intf.EnicClassicInfo")
	proto.RegisterType((*IfEnicInfo)(nil), "intf.IfEnicInfo")
	proto.RegisterType((*IfUplinkInfo)(nil), "intf.IfUplinkInfo")
	proto.RegisterType((*IfUplinkPCInfo)(nil), "intf.IfUplinkPCInfo")
	proto.RegisterType((*IfTunnelVxlanInfo)(nil), "intf.IfTunnelVxlanInfo")
	proto.RegisterType((*IfTunnelGREInfo)(nil), "intf.IfTunnelGREInfo")
	proto.RegisterType((*IfTunnelProprietaryMpls)(nil), "intf.IfTunnelProprietaryMpls")
	proto.RegisterType((*IfTunnelInfo)(nil), "intf.IfTunnelInfo")
	proto.RegisterType((*IfCPUInfo)(nil), "intf.IfCPUInfo")
	proto.RegisterType((*IfAppRedirInfo)(nil), "intf.IfAppRedirInfo")
	proto.RegisterType((*InterfaceSpec)(nil), "intf.InterfaceSpec")
	proto.RegisterType((*InterfaceRequestMsg)(nil), "intf.InterfaceRequestMsg")
	proto.RegisterType((*UplinkResponseInfo)(nil), "intf.UplinkResponseInfo")
	proto.RegisterType((*EnicL2SegInfo)(nil), "intf.EnicL2SegInfo")
	proto.RegisterType((*SmartEnicInfo)(nil), "intf.SmartEnicInfo")
	proto.RegisterType((*ClassicEnicInfo)(nil), "intf.ClassicEnicInfo")
	proto.RegisterType((*EnicResponseInfo)(nil), "intf.EnicResponseInfo")
	proto.RegisterType((*CpuIfResponseInfo)(nil), "intf.CpuIfResponseInfo")
	proto.RegisterType((*TunnelIfResponseInfo)(nil), "intf.TunnelIfResponseInfo")
	proto.RegisterType((*AppRedirIfInfo)(nil), "intf.AppRedirIfInfo")
	proto.RegisterType((*InterfaceStatus)(nil), "intf.InterfaceStatus")
	proto.RegisterType((*InterfaceResponse)(nil), "intf.InterfaceResponse")
	proto.RegisterType((*InterfaceResponseMsg)(nil), "intf.InterfaceResponseMsg")
	proto.RegisterType((*InterfaceDeleteRequest)(nil), "intf.InterfaceDeleteRequest")
	proto.RegisterType((*InterfaceDeleteRequestMsg)(nil), "intf.InterfaceDeleteRequestMsg")
	proto.RegisterType((*InterfaceDeleteResponse)(nil), "intf.InterfaceDeleteResponse")
	proto.RegisterType((*InterfaceDeleteResponseMsg)(nil), "intf.InterfaceDeleteResponseMsg")
	proto.RegisterType((*InterfaceStats)(nil), "intf.InterfaceStats")
	proto.RegisterType((*InterfaceGetRequest)(nil), "intf.InterfaceGetRequest")
	proto.RegisterType((*InterfaceGetRequestMsg)(nil), "intf.InterfaceGetRequestMsg")
	proto.RegisterType((*InterfaceGetResponse)(nil), "intf.InterfaceGetResponse")
	proto.RegisterType((*InterfaceGetResponseMsg)(nil), "intf.InterfaceGetResponseMsg")
	proto.RegisterType((*InterfaceL2SegmentSpec)(nil), "intf.InterfaceL2SegmentSpec")
	proto.RegisterType((*InterfaceL2SegmentRequestMsg)(nil), "intf.InterfaceL2SegmentRequestMsg")
	proto.RegisterType((*InterfaceL2SegmentResponse)(nil), "intf.InterfaceL2SegmentResponse")
	proto.RegisterType((*InterfaceL2SegmentResponseMsg)(nil), "intf.InterfaceL2SegmentResponseMsg")
	proto.RegisterEnum("intf.IfStatus", IfStatus_name, IfStatus_value)
	proto.RegisterEnum("intf.LifPortType", LifPortType_name, LifPortType_value)
	proto.RegisterEnum("intf.LifQPurpose", LifQPurpose_name, LifQPurpose_value)
	proto.RegisterEnum("intf.LifState", LifState_name, LifState_value)
	proto.RegisterEnum("intf.IfType", IfType_name, IfType_value)
	proto.RegisterEnum("intf.LifRssType", LifRssType_name, LifRssType_value)
	proto.RegisterEnum("intf.IfEnicType", IfEnicType_name, IfEnicType_value)
	proto.RegisterEnum("intf.IfTunnelEncapType", IfTunnelEncapType_name, IfTunnelEncapType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Interface service

type InterfaceClient interface {
	// LIF related APIs
	LifCreate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error)
	LifUpdate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error)
	LifDelete(ctx context.Context, in *LifDeleteRequestMsg, opts ...grpc.CallOption) (*LifDeleteResponseMsg, error)
	LifGet(ctx context.Context, in *LifGetRequestMsg, opts ...grpc.CallOption) (*LifGetResponseMsg, error)
	// Queue state related APIs
	LifGetQState(ctx context.Context, in *GetQStateRequestMsg, opts ...grpc.CallOption) (*GetQStateResponseMsg, error)
	LifSetQState(ctx context.Context, in *SetQStateRequestMsg, opts ...grpc.CallOption) (*SetQStateResponseMsg, error)
	// common APIs for all interfaces
	InterfaceCreate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error)
	InterfaceUpdate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error)
	InterfaceDelete(ctx context.Context, in *InterfaceDeleteRequestMsg, opts ...grpc.CallOption) (*InterfaceDeleteResponseMsg, error)
	InterfaceGet(ctx context.Context, in *InterfaceGetRequestMsg, opts ...grpc.CallOption) (*InterfaceGetResponseMsg, error)
	// APIs specific to Uplinks
	AddL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error)
	DelL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error)
}

type interfaceClient struct {
	cc *grpc.ClientConn
}

func NewInterfaceClient(cc *grpc.ClientConn) InterfaceClient {
	return &interfaceClient{cc}
}

func (c *interfaceClient) LifCreate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error) {
	out := new(LifResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifUpdate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error) {
	out := new(LifResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifDelete(ctx context.Context, in *LifDeleteRequestMsg, opts ...grpc.CallOption) (*LifDeleteResponseMsg, error) {
	out := new(LifDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifGet(ctx context.Context, in *LifGetRequestMsg, opts ...grpc.CallOption) (*LifGetResponseMsg, error) {
	out := new(LifGetResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifGetQState(ctx context.Context, in *GetQStateRequestMsg, opts ...grpc.CallOption) (*GetQStateResponseMsg, error) {
	out := new(GetQStateResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifGetQState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifSetQState(ctx context.Context, in *SetQStateRequestMsg, opts ...grpc.CallOption) (*SetQStateResponseMsg, error) {
	out := new(SetQStateResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifSetQState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceCreate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error) {
	out := new(InterfaceResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceUpdate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error) {
	out := new(InterfaceResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceDelete(ctx context.Context, in *InterfaceDeleteRequestMsg, opts ...grpc.CallOption) (*InterfaceDeleteResponseMsg, error) {
	out := new(InterfaceDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceGet(ctx context.Context, in *InterfaceGetRequestMsg, opts ...grpc.CallOption) (*InterfaceGetResponseMsg, error) {
	out := new(InterfaceGetResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) AddL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error) {
	out := new(InterfaceL2SegmentResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/AddL2SegmentOnUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) DelL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error) {
	out := new(InterfaceL2SegmentResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/DelL2SegmentOnUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Interface service

type InterfaceServer interface {
	// LIF related APIs
	LifCreate(context.Context, *LifRequestMsg) (*LifResponseMsg, error)
	LifUpdate(context.Context, *LifRequestMsg) (*LifResponseMsg, error)
	LifDelete(context.Context, *LifDeleteRequestMsg) (*LifDeleteResponseMsg, error)
	LifGet(context.Context, *LifGetRequestMsg) (*LifGetResponseMsg, error)
	// Queue state related APIs
	LifGetQState(context.Context, *GetQStateRequestMsg) (*GetQStateResponseMsg, error)
	LifSetQState(context.Context, *SetQStateRequestMsg) (*SetQStateResponseMsg, error)
	// common APIs for all interfaces
	InterfaceCreate(context.Context, *InterfaceRequestMsg) (*InterfaceResponseMsg, error)
	InterfaceUpdate(context.Context, *InterfaceRequestMsg) (*InterfaceResponseMsg, error)
	InterfaceDelete(context.Context, *InterfaceDeleteRequestMsg) (*InterfaceDeleteResponseMsg, error)
	InterfaceGet(context.Context, *InterfaceGetRequestMsg) (*InterfaceGetResponseMsg, error)
	// APIs specific to Uplinks
	AddL2SegmentOnUplink(context.Context, *InterfaceL2SegmentRequestMsg) (*InterfaceL2SegmentResponseMsg, error)
	DelL2SegmentOnUplink(context.Context, *InterfaceL2SegmentRequestMsg) (*InterfaceL2SegmentResponseMsg, error)
}

func RegisterInterfaceServer(s *grpc.Server, srv InterfaceServer) {
	s.RegisterService(&_Interface_serviceDesc, srv)
}

func _Interface_LifCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifCreate(ctx, req.(*LifRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifUpdate(ctx, req.(*LifRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifDelete(ctx, req.(*LifDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifGet(ctx, req.(*LifGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifGetQState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQStateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifGetQState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifGetQState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifGetQState(ctx, req.(*GetQStateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifSetQState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQStateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifSetQState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifSetQState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifSetQState(ctx, req.(*SetQStateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceCreate(ctx, req.(*InterfaceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceUpdate(ctx, req.(*InterfaceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceDelete(ctx, req.(*InterfaceDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceGet(ctx, req.(*InterfaceGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_AddL2SegmentOnUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceL2SegmentRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).AddL2SegmentOnUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/AddL2SegmentOnUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).AddL2SegmentOnUplink(ctx, req.(*InterfaceL2SegmentRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_DelL2SegmentOnUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceL2SegmentRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).DelL2SegmentOnUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/DelL2SegmentOnUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).DelL2SegmentOnUplink(ctx, req.(*InterfaceL2SegmentRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intf.Interface",
	HandlerType: (*InterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LifCreate",
			Handler:    _Interface_LifCreate_Handler,
		},
		{
			MethodName: "LifUpdate",
			Handler:    _Interface_LifUpdate_Handler,
		},
		{
			MethodName: "LifDelete",
			Handler:    _Interface_LifDelete_Handler,
		},
		{
			MethodName: "LifGet",
			Handler:    _Interface_LifGet_Handler,
		},
		{
			MethodName: "LifGetQState",
			Handler:    _Interface_LifGetQState_Handler,
		},
		{
			MethodName: "LifSetQState",
			Handler:    _Interface_LifSetQState_Handler,
		},
		{
			MethodName: "InterfaceCreate",
			Handler:    _Interface_InterfaceCreate_Handler,
		},
		{
			MethodName: "InterfaceUpdate",
			Handler:    _Interface_InterfaceUpdate_Handler,
		},
		{
			MethodName: "InterfaceDelete",
			Handler:    _Interface_InterfaceDelete_Handler,
		},
		{
			MethodName: "InterfaceGet",
			Handler:    _Interface_InterfaceGet_Handler,
		},
		{
			MethodName: "AddL2SegmentOnUplink",
			Handler:    _Interface_AddL2SegmentOnUplink_Handler,
		},
		{
			MethodName: "DelL2SegmentOnUplink",
			Handler:    _Interface_DelL2SegmentOnUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interface.proto",
}

func (m *LifQStateMapEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifQStateMapEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TypeNum))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Size_))
	}
	if m.Entries != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Entries))
	}
	if m.Purpose != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Purpose))
	}
	return i, nil
}

func (m *PktFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PktFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReceiveBroadcast {
		dAtA[i] = 0x8
		i++
		if m.ReceiveBroadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReceiveAllMulticast {
		dAtA[i] = 0x10
		i++
		if m.ReceiveAllMulticast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReceivePromiscuous {
		dAtA[i] = 0x18
		i++
		if m.ReceivePromiscuous {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BcastPktFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastPktFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arp {
		dAtA[i] = 0x8
		i++
		if m.Arp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DhcpClient {
		dAtA[i] = 0x10
		i++
		if m.DhcpClient {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DhcpServer {
		dAtA[i] = 0x18
		i++
		if m.DhcpServer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Netbios {
		dAtA[i] = 0x20
		i++
		if m.Netbios {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *McastPktFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastPktFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ipv6NeighAdv {
		dAtA[i] = 0x8
		i++
		if m.Ipv6NeighAdv {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ipv6RouterAdv {
		dAtA[i] = 0x10
		i++
		if m.Ipv6RouterAdv {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dhcpv6Relay {
		dAtA[i] = 0x18
		i++
		if m.Dhcpv6Relay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Dhcpv6Mcast {
		dAtA[i] = 0x20
		i++
		if m.Dhcpv6Mcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ipv6Mld {
		dAtA[i] = 0x28
		i++
		if m.Ipv6Mld {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ipv6NeighSol {
		dAtA[i] = 0x30
		i++
		if m.Ipv6NeighSol {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LifSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.PinnedUplinkIfKeyHandle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.PinnedUplinkIfKeyHandle.Size()))
		n3, err := m.PinnedUplinkIfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.AdminStatus != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.AdminStatus))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Type))
	}
	if len(m.LifQstateMap) > 0 {
		for _, msg := range m.LifQstateMap {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.VlanStripEn {
		dAtA[i] = 0x40
		i++
		if m.VlanStripEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.VlanInsertEn {
		dAtA[i] = 0x48
		i++
		if m.VlanInsertEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableRdma {
		dAtA[i] = 0x50
		i++
		if m.EnableRdma {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsManagement {
		dAtA[i] = 0x58
		i++
		if m.IsManagement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RdmaSniffEn {
		dAtA[i] = 0x60
		i++
		if m.RdmaSniffEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PacketFilter != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.PacketFilter.Size()))
		n4, err := m.PacketFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.HwLifId != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.HwLifId))
	}
	if m.RdmaMaxKeys != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RdmaMaxKeys))
	}
	if m.RdmaMaxAhs != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RdmaMaxAhs))
	}
	if m.RdmaMaxPtEntries != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RdmaMaxPtEntries))
	}
	if len(m.LifQstate) > 0 {
		for _, msg := range m.LifQstate {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Rss != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Rss.Size()))
		n5, err := m.Rss.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.TxPolicer != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TxPolicer.Size()))
		n6, err := m.TxPolicer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.RxPolicer != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxPolicer.Size()))
		n7, err := m.RxPolicer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.RxQosClass != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxQosClass.Size()))
		n8, err := m.RxQosClass.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.TxQosClass != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TxQosClass.Size()))
		n9, err := m.TxQosClass.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.RdmaBarmapSize != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RdmaBarmapSize))
	}
	if m.EnableNvme {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.EnableNvme {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NvmeMaxNs != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.NvmeMaxNs))
	}
	if m.NvmeMaxSess != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.NvmeMaxSess))
	}
	if m.NvmeHostPageSize != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.NvmeHostPageSize))
	}
	if m.SwmOob != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.SwmOob.Size()))
		n10, err := m.SwmOob.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.BcastPktFilter != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BcastPktFilter.Size()))
		n11, err := m.BcastPktFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.McastPktFilter != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.McastPktFilter.Size()))
		n12, err := m.McastPktFilter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.RxEn {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		if m.RxEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MacAddress != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MacAddress))
		i += 8
	}
	if m.State != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.State))
	}
	if len(m.TxMirrorSessions) > 0 {
		for _, msg := range m.TxMirrorSessions {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RxMirrorSessions) > 0 {
		for _, msg := range m.RxMirrorSessions {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Meta.Size()))
		n13, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n14, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.LifStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.LifStatus))
	}
	if m.LifHandle != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.LifHandle))
		i += 8
	}
	if m.HwLifId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.HwLifId))
	}
	return i, nil
}

func (m *LifQState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifQState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TypeNum))
	}
	if m.Addr != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Addr))
	}
	return i, nil
}

func (m *LifRdmaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifRdmaData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PtBaseAddr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.PtBaseAddr))
	}
	if m.KtBaseAddr != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.KtBaseAddr))
	}
	if m.DcqcnProfileBaseAddr != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.DcqcnProfileBaseAddr))
	}
	if m.AtBaseAddr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.AtBaseAddr))
	}
	if m.BarmapBaseAddr != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BarmapBaseAddr))
	}
	return i, nil
}

func (m *LifTxSchedulerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifTxSchedulerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SchedTableOffset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.SchedTableOffset))
	}
	if m.SchedNumEntries != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.SchedNumEntries))
	}
	if m.NumCoses != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.NumCoses))
	}
	return i, nil
}

func (m *LifResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Status.Size()))
		n15, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.Qstate) > 0 {
		for _, msg := range m.Qstate {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RdmaDataValid {
		dAtA[i] = 0x20
		i++
		if m.RdmaDataValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RdmaData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RdmaData.Size()))
		n16, err := m.RdmaData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.TxSchedData != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TxSchedData.Size()))
		n17, err := m.TxSchedData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *LifResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QStateGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QStateGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LifHandle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.LifHandle))
	}
	if m.TypeNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TypeNum))
	}
	if m.Qid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Qid))
	}
	if m.RetDataSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RetDataSize))
	}
	return i, nil
}

func (m *GetQStateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQStateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reqs) > 0 {
		for _, msg := range m.Reqs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QStateGetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QStateGetResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ErrorCode))
	}
	if m.QAddr != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.QAddr))
	}
	if len(m.QueueState) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.QueueState)))
		i += copy(dAtA[i:], m.QueueState)
	}
	return i, nil
}

func (m *GetQStateResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQStateResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Resps) > 0 {
		for _, msg := range m.Resps {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *P4ProgLabel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *P4ProgLabel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Handle)))
		i += copy(dAtA[i:], m.Handle)
	}
	if len(m.ProgName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.ProgName)))
		i += copy(dAtA[i:], m.ProgName)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	return i, nil
}

func (m *QStateSetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QStateSetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LifHandle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.LifHandle))
	}
	if m.TypeNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TypeNum))
	}
	if m.Qid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Qid))
	}
	if m.Label != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Label.Size()))
		n18, err := m.Label.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.QueueState) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.QueueState)))
		i += copy(dAtA[i:], m.QueueState)
	}
	return i, nil
}

func (m *SetQStateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetQStateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reqs) > 0 {
		for _, msg := range m.Reqs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QStateSetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QStateSetResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *SetQStateResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetQStateResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Resps) > 0 {
		for _, msg := range m.Resps {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n19, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *LifDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *LifDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifTxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifTxStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FramesOk != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.FramesOk))
	}
	if m.UnicastFramesOk != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UnicastFramesOk))
	}
	if m.UnicastFramesDrop != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UnicastFramesDrop))
	}
	if m.MulticastFramesOk != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.MulticastFramesOk))
	}
	if m.MulticastFramesDrop != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.MulticastFramesDrop))
	}
	if m.BroadcastFramesOk != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BroadcastFramesOk))
	}
	if m.BroadcastFramesDrop != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BroadcastFramesDrop))
	}
	if m.BytesOk != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BytesOk))
	}
	if m.UnicastBytesOk != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UnicastBytesOk))
	}
	if m.MulticastBytesOk != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.MulticastBytesOk))
	}
	if m.BroadcastBytesOk != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BroadcastBytesOk))
	}
	if m.Tso != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Tso))
	}
	if m.Pps != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Pps))
	}
	if m.Bytesps != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Bytesps))
	}
	return i, nil
}

func (m *LifRxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifRxStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FramesTotal != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.FramesTotal))
	}
	if m.FramesOk != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.FramesOk))
	}
	if m.UnicastFramesOk != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UnicastFramesOk))
	}
	if m.UnicastFramesDrop != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UnicastFramesDrop))
	}
	if m.MulticastFramesOk != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.MulticastFramesOk))
	}
	if m.MulticastFramesDrop != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.MulticastFramesDrop))
	}
	if m.BroadcastFramesOk != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BroadcastFramesOk))
	}
	if m.BroadcastFramesDrop != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BroadcastFramesDrop))
	}
	if m.BytesOk != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BytesOk))
	}
	if m.UnicastBytesOk != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UnicastBytesOk))
	}
	if m.MulticastBytesOk != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.MulticastBytesOk))
	}
	if m.BroadcastBytesOk != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.BroadcastBytesOk))
	}
	if m.Drops != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Drops))
	}
	if m.NoBufs != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.NoBufs))
	}
	if m.Errors != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Errors))
	}
	if m.Rss != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Rss))
	}
	if m.CrcErrors != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.CrcErrors))
	}
	if m.Frames_64 != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Frames_64))
	}
	if m.Frames_127 != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Frames_127))
	}
	if m.Frames_255 != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Frames_255))
	}
	if m.Frames_511 != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Frames_511))
	}
	if m.Frames_1024 != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Frames_1024))
	}
	if m.Frames_1518 != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Frames_1518))
	}
	if m.FramesToMax != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.FramesToMax))
	}
	if m.PolicerStats != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.PolicerStats.Size()))
		n20, err := m.PolicerStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Pps != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Pps))
	}
	if m.Bytesps != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Bytesps))
	}
	return i, nil
}

func (m *DataLifStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataLifStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxStats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TxStats.Size()))
		n21, err := m.TxStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.RxStats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxStats.Size()))
		n22, err := m.RxStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *CpuQueueStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuQueueStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CpucbId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.CpucbId))
	}
	if m.NumTxPackets != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumTxPackets))
		i += 4
	}
	if m.NumRxPackets != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumRxPackets))
		i += 4
	}
	if m.RxQfullDropErrors != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxQfullDropErrors))
	}
	if m.TxSemFullDrops != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TxSemFullDrops))
	}
	if m.TxFreeRequests != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TxFreeRequests))
	}
	if m.RxSemFullDrops != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxSemFullDrops))
	}
	if m.RxQueue0Pkts != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxQueue0Pkts))
	}
	if m.RxQueue1Pkts != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxQueue1Pkts))
	}
	if m.RxQueue2Pkts != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxQueue2Pkts))
	}
	return i, nil
}

func (m *CpuLifStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuLifStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CpuQueueStats) > 0 {
		for _, msg := range m.CpuQueueStats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lifs != nil {
		nn23, err := m.Lifs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn23
	}
	return i, nil
}

func (m *LifStats_DataLifStats) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DataLifStats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.DataLifStats.Size()))
		n24, err := m.DataLifStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *LifStats_CpuLifStats) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CpuLifStats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.CpuLifStats.Size()))
		n25, err := m.CpuLifStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *LifGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n26, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *LifGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Spec.Size()))
		n27, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Status.Size()))
		n28, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Stats.Size()))
		n29, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if len(m.Qstate) > 0 {
		for _, msg := range m.Qstate {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifRssSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifRssSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Type))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Indir) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.Indir)))
		i += copy(dAtA[i:], m.Indir)
	}
	return i, nil
}

func (m *EnicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnicInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L2SegmentKeyHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.L2SegmentKeyHandle.Size()))
		n30, err := m.L2SegmentKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.MacAddress != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MacAddress))
		i += 8
	}
	if m.EncapVlanId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EncapVlanId))
	}
	return i, nil
}

func (m *EnicClassicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnicClassicInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.L2SegmentKeyHandle) > 0 {
		for _, msg := range m.L2SegmentKeyHandle {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NativeL2SegmentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.NativeL2SegmentId))
	}
	return i, nil
}

func (m *IfEnicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfEnicInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnicType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EnicType))
	}
	if m.LifKeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.LifKeyOrHandle.Size()))
		n31, err := m.LifKeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.PinnedUplinkIfKeyHandle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.PinnedUplinkIfKeyHandle.Size()))
		n32, err := m.PinnedUplinkIfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.EnicTypeInfo != nil {
		nn33, err := m.EnicTypeInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn33
	}
	return i, nil
}

func (m *IfEnicInfo_EnicInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnicInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EnicInfo.Size()))
		n34, err := m.EnicInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *IfEnicInfo_ClassicEnicInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClassicEnicInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ClassicEnicInfo.Size()))
		n35, err := m.ClassicEnicInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *IfUplinkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfUplinkInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PortNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.PortNum))
	}
	if m.NativeL2SegmentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.NativeL2SegmentId))
	}
	if m.IsOobManagement {
		dAtA[i] = 0x18
		i++
		if m.IsOobManagement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *IfUplinkPCInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfUplinkPCInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NativeL2SegmentId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.NativeL2SegmentId))
	}
	if len(m.MemberIfKeyHandle) > 0 {
		for _, msg := range m.MemberIfKeyHandle {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IfTunnelVxlanInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfTunnelVxlanInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LocalTep != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.LocalTep.Size()))
		n36, err := m.LocalTep.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.RemoteTep != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RemoteTep.Size()))
		n37, err := m.RemoteTep.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *IfTunnelGREInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfTunnelGREInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Source.Size()))
		n38, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Destination != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Destination.Size()))
		n39, err := m.Destination.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.Mtu != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Mtu))
	}
	if m.Ttl != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Ttl))
	}
	return i, nil
}

func (m *IfTunnelProprietaryMpls) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfTunnelProprietaryMpls) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubstrateIp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.SubstrateIp.Size()))
		n40, err := m.SubstrateIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if len(m.OverlayIp) > 0 {
		for _, msg := range m.OverlayIp {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MplsIf) > 0 {
		for _, msg := range m.MplsIf {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TunnelDestIp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TunnelDestIp.Size()))
		n41, err := m.TunnelDestIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.MplsTag != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.MplsTag.Size()))
		n42, err := m.MplsTag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.SourceGw != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.SourceGw.Size()))
		n43, err := m.SourceGw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.IngressBw != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.IngressBw))
	}
	if m.EgressBw != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EgressBw))
	}
	if m.GwMacDa != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.GwMacDa))
		i += 8
	}
	if len(m.LifName) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintInterface(dAtA, i, uint64(len(m.LifName)))
		i += copy(dAtA[i:], m.LifName)
	}
	if m.OverlayMac != 0 {
		dAtA[i] = 0x59
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.OverlayMac))
		i += 8
	}
	if m.PfMac != 0 {
		dAtA[i] = 0x61
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.PfMac))
		i += 8
	}
	return i, nil
}

func (m *IfTunnelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfTunnelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EncapType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EncapType))
	}
	if m.EncapInfo != nil {
		nn44, err := m.EncapInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn44
	}
	if m.VrfKeyHandle != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.VrfKeyHandle.Size()))
		n45, err := m.VrfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *IfTunnelInfo_VxlanInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VxlanInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.VxlanInfo.Size()))
		n46, err := m.VxlanInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *IfTunnelInfo_GreInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GreInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.GreInfo.Size()))
		n47, err := m.GreInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *IfTunnelInfo_PropMplsInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PropMplsInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.PropMplsInfo.Size()))
		n48, err := m.PropMplsInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *IfCPUInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfCPUInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LifKeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.LifKeyOrHandle.Size()))
		n49, err := m.LifKeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.AllowRx {
		dAtA[i] = 0x10
		i++
		if m.AllowRx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *IfAppRedirInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IfAppRedirInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LifKeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.LifKeyOrHandle.Size()))
		n50, err := m.LifKeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *InterfaceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Meta.Size()))
		n51, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n52, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Type))
	}
	if m.AdminStatus != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.AdminStatus))
	}
	if m.IfInfo != nil {
		nn53, err := m.IfInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn53
	}
	if len(m.TxMirrorSessions) > 0 {
		for _, msg := range m.TxMirrorSessions {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RxMirrorSessions) > 0 {
		for _, msg := range m.RxMirrorSessions {
			dAtA[i] = 0x62
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InterfaceSpec_IfEnicInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IfEnicInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.IfEnicInfo.Size()))
		n54, err := m.IfEnicInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}
func (m *InterfaceSpec_IfUplinkInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IfUplinkInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.IfUplinkInfo.Size()))
		n55, err := m.IfUplinkInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *InterfaceSpec_IfUplinkPcInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IfUplinkPcInfo != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.IfUplinkPcInfo.Size()))
		n56, err := m.IfUplinkPcInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *InterfaceSpec_IfTunnelInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IfTunnelInfo != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.IfTunnelInfo.Size()))
		n57, err := m.IfTunnelInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *InterfaceSpec_IfCpuInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IfCpuInfo != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.IfCpuInfo.Size()))
		n58, err := m.IfCpuInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *InterfaceSpec_IfAppRedirInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IfAppRedirInfo != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.IfAppRedirInfo.Size()))
		n59, err := m.IfAppRedirInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *InterfaceRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UplinkResponseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkResponseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UplinkLportId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UplinkLportId))
	}
	if m.HwLifId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.HwLifId))
	}
	if m.UplinkIdx != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UplinkIdx))
	}
	if m.NumL2Segs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.NumL2Segs))
	}
	if m.HwPortNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.HwPortNum))
	}
	if m.TxPps != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TxPps))
	}
	if m.TxBytesps != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TxBytesps))
	}
	if m.RxPps != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxPps))
	}
	if m.RxBytesps != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.RxBytesps))
	}
	return i, nil
}

func (m *EnicL2SegInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnicL2SegInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L2SegmentKeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.L2SegmentKeyOrHandle.Size()))
		n60, err := m.L2SegmentKeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	if m.InpPropIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.InpPropIdx))
	}
	return i, nil
}

func (m *SmartEnicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmartEnicInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InpPropMacVlanIdxHost != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.InpPropMacVlanIdxHost))
	}
	if m.InpPropMacVlanIdxNet != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.InpPropMacVlanIdxNet))
	}
	return i, nil
}

func (m *ClassicEnicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassicEnicInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InpPropNatL2SegClassic != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.InpPropNatL2SegClassic))
	}
	if len(m.MembershipInfo) > 0 {
		for _, msg := range m.MembershipInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EnicResponseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnicResponseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnicLportId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EnicLportId))
	}
	if m.UplinkIfHandle != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UplinkIfHandle))
	}
	if m.EnicTypeInfo != nil {
		nn61, err := m.EnicTypeInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn61
	}
	return i, nil
}

func (m *EnicResponseInfo_SmartEnicInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SmartEnicInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.SmartEnicInfo.Size()))
		n62, err := m.SmartEnicInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *EnicResponseInfo_ClassicEnicInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClassicEnicInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ClassicEnicInfo.Size()))
		n63, err := m.ClassicEnicInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *CpuIfResponseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CpuIfResponseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CpuLportId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.CpuLportId))
	}
	return i, nil
}

func (m *TunnelIfResponseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TunnelIfResponseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InpMapNatIdx) > 0 {
		dAtA65 := make([]byte, len(m.InpMapNatIdx)*10)
		var j64 int
		for _, num := range m.InpMapNatIdx {
			for num >= 1<<7 {
				dAtA65[j64] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j64++
			}
			dAtA65[j64] = uint8(num)
			j64++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(j64))
		i += copy(dAtA[i:], dAtA65[:j64])
	}
	if len(m.InpMapTnlIdx) > 0 {
		dAtA67 := make([]byte, len(m.InpMapTnlIdx)*10)
		var j66 int
		for _, num := range m.InpMapTnlIdx {
			for num >= 1<<7 {
				dAtA67[j66] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j66++
			}
			dAtA67[j66] = uint8(num)
			j66++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(j66))
		i += copy(dAtA[i:], dAtA67[:j66])
	}
	if m.TunnelRwIdx != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TunnelRwIdx))
	}
	return i, nil
}

func (m *AppRedirIfInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppRedirIfInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LportId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.LportId))
	}
	return i, nil
}

func (m *InterfaceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Meta.Size()))
		n68, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n69, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	if m.IfStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.IfStatus))
	}
	if m.IfHandle != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IfHandle))
		i += 8
	}
	if m.IfResponseInfo != nil {
		nn70, err := m.IfResponseInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn70
	}
	return i, nil
}

func (m *InterfaceStatus_UplinkInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UplinkInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.UplinkInfo.Size()))
		n71, err := m.UplinkInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *InterfaceStatus_EnicInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnicInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.EnicInfo.Size()))
		n72, err := m.EnicInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *InterfaceStatus_CpuInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CpuInfo != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.CpuInfo.Size()))
		n73, err := m.CpuInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *InterfaceStatus_TunnelInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TunnelInfo != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.TunnelInfo.Size()))
		n74, err := m.TunnelInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *InterfaceStatus_AppRedirInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AppRedirInfo != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.AppRedirInfo.Size()))
		n75, err := m.AppRedirInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *InterfaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Status.Size()))
		n76, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}

func (m *InterfaceResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InterfaceDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n77, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}

func (m *InterfaceDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InterfaceDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *InterfaceDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InterfaceStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumTxPackets != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumTxPackets))
		i += 4
	}
	if m.NumTxBytes != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumTxBytes))
		i += 4
	}
	if m.NumRxPackets != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumRxPackets))
		i += 4
	}
	if m.NumRxBytes != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumRxBytes))
		i += 4
	}
	return i, nil
}

func (m *InterfaceGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n78, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}

func (m *InterfaceGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InterfaceGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Spec.Size()))
		n79, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Status.Size()))
		n80, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.Stats.Size()))
		n81, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}

func (m *InterfaceGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InterfaceL2SegmentSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceL2SegmentSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L2SegmentKeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.L2SegmentKeyOrHandle.Size()))
		n82, err := m.L2SegmentKeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	if m.IfKeyHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.IfKeyHandle.Size()))
		n83, err := m.IfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}

func (m *InterfaceL2SegmentRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceL2SegmentRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InterfaceL2SegmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceL2SegmentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInterface(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *InterfaceL2SegmentResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceL2SegmentResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterface(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintInterface(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LifQStateMapEntry) Size() (n int) {
	var l int
	_ = l
	if m.TypeNum != 0 {
		n += 1 + sovInterface(uint64(m.TypeNum))
	}
	if m.Size_ != 0 {
		n += 1 + sovInterface(uint64(m.Size_))
	}
	if m.Entries != 0 {
		n += 1 + sovInterface(uint64(m.Entries))
	}
	if m.Purpose != 0 {
		n += 1 + sovInterface(uint64(m.Purpose))
	}
	return n
}

func (m *PktFilter) Size() (n int) {
	var l int
	_ = l
	if m.ReceiveBroadcast {
		n += 2
	}
	if m.ReceiveAllMulticast {
		n += 2
	}
	if m.ReceivePromiscuous {
		n += 2
	}
	return n
}

func (m *BcastPktFilter) Size() (n int) {
	var l int
	_ = l
	if m.Arp {
		n += 2
	}
	if m.DhcpClient {
		n += 2
	}
	if m.DhcpServer {
		n += 2
	}
	if m.Netbios {
		n += 2
	}
	return n
}

func (m *McastPktFilter) Size() (n int) {
	var l int
	_ = l
	if m.Ipv6NeighAdv {
		n += 2
	}
	if m.Ipv6RouterAdv {
		n += 2
	}
	if m.Dhcpv6Relay {
		n += 2
	}
	if m.Dhcpv6Mcast {
		n += 2
	}
	if m.Ipv6Mld {
		n += 2
	}
	if m.Ipv6NeighSol {
		n += 2
	}
	return n
}

func (m *LifSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.PinnedUplinkIfKeyHandle != nil {
		l = m.PinnedUplinkIfKeyHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.AdminStatus != 0 {
		n += 1 + sovInterface(uint64(m.AdminStatus))
	}
	if m.Type != 0 {
		n += 1 + sovInterface(uint64(m.Type))
	}
	if len(m.LifQstateMap) > 0 {
		for _, e := range m.LifQstateMap {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	if m.VlanStripEn {
		n += 2
	}
	if m.VlanInsertEn {
		n += 2
	}
	if m.EnableRdma {
		n += 2
	}
	if m.IsManagement {
		n += 2
	}
	if m.RdmaSniffEn {
		n += 2
	}
	if m.PacketFilter != nil {
		l = m.PacketFilter.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.HwLifId != 0 {
		n += 1 + sovInterface(uint64(m.HwLifId))
	}
	if m.RdmaMaxKeys != 0 {
		n += 1 + sovInterface(uint64(m.RdmaMaxKeys))
	}
	if m.RdmaMaxAhs != 0 {
		n += 2 + sovInterface(uint64(m.RdmaMaxAhs))
	}
	if m.RdmaMaxPtEntries != 0 {
		n += 2 + sovInterface(uint64(m.RdmaMaxPtEntries))
	}
	if len(m.LifQstate) > 0 {
		for _, e := range m.LifQstate {
			l = e.Size()
			n += 2 + l + sovInterface(uint64(l))
		}
	}
	if m.Rss != nil {
		l = m.Rss.Size()
		n += 2 + l + sovInterface(uint64(l))
	}
	if m.TxPolicer != nil {
		l = m.TxPolicer.Size()
		n += 2 + l + sovInterface(uint64(l))
	}
	if m.RxPolicer != nil {
		l = m.RxPolicer.Size()
		n += 2 + l + sovInterface(uint64(l))
	}
	if m.RxQosClass != nil {
		l = m.RxQosClass.Size()
		n += 2 + l + sovInterface(uint64(l))
	}
	if m.TxQosClass != nil {
		l = m.TxQosClass.Size()
		n += 2 + l + sovInterface(uint64(l))
	}
	if m.RdmaBarmapSize != 0 {
		n += 2 + sovInterface(uint64(m.RdmaBarmapSize))
	}
	if m.EnableNvme {
		n += 3
	}
	if m.NvmeMaxNs != 0 {
		n += 2 + sovInterface(uint64(m.NvmeMaxNs))
	}
	if m.NvmeMaxSess != 0 {
		n += 2 + sovInterface(uint64(m.NvmeMaxSess))
	}
	if m.NvmeHostPageSize != 0 {
		n += 2 + sovInterface(uint64(m.NvmeHostPageSize))
	}
	if m.SwmOob != nil {
		l = m.SwmOob.Size()
		n += 2 + l + sovInterface(uint64(l))
	}
	if m.BcastPktFilter != nil {
		l = m.BcastPktFilter.Size()
		n += 2 + l + sovInterface(uint64(l))
	}
	if m.McastPktFilter != nil {
		l = m.McastPktFilter.Size()
		n += 2 + l + sovInterface(uint64(l))
	}
	if m.RxEn {
		n += 3
	}
	if m.MacAddress != 0 {
		n += 10
	}
	if m.State != 0 {
		n += 2 + sovInterface(uint64(m.State))
	}
	if len(m.TxMirrorSessions) > 0 {
		for _, e := range m.TxMirrorSessions {
			l = e.Size()
			n += 2 + l + sovInterface(uint64(l))
		}
	}
	if len(m.RxMirrorSessions) > 0 {
		for _, e := range m.RxMirrorSessions {
			l = e.Size()
			n += 2 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *LifRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *LifStatus) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.LifStatus != 0 {
		n += 1 + sovInterface(uint64(m.LifStatus))
	}
	if m.LifHandle != 0 {
		n += 9
	}
	if m.HwLifId != 0 {
		n += 1 + sovInterface(uint64(m.HwLifId))
	}
	return n
}

func (m *LifQState) Size() (n int) {
	var l int
	_ = l
	if m.TypeNum != 0 {
		n += 1 + sovInterface(uint64(m.TypeNum))
	}
	if m.Addr != 0 {
		n += 1 + sovInterface(uint64(m.Addr))
	}
	return n
}

func (m *LifRdmaData) Size() (n int) {
	var l int
	_ = l
	if m.PtBaseAddr != 0 {
		n += 1 + sovInterface(uint64(m.PtBaseAddr))
	}
	if m.KtBaseAddr != 0 {
		n += 1 + sovInterface(uint64(m.KtBaseAddr))
	}
	if m.DcqcnProfileBaseAddr != 0 {
		n += 1 + sovInterface(uint64(m.DcqcnProfileBaseAddr))
	}
	if m.AtBaseAddr != 0 {
		n += 1 + sovInterface(uint64(m.AtBaseAddr))
	}
	if m.BarmapBaseAddr != 0 {
		n += 1 + sovInterface(uint64(m.BarmapBaseAddr))
	}
	return n
}

func (m *LifTxSchedulerData) Size() (n int) {
	var l int
	_ = l
	if m.SchedTableOffset != 0 {
		n += 1 + sovInterface(uint64(m.SchedTableOffset))
	}
	if m.SchedNumEntries != 0 {
		n += 1 + sovInterface(uint64(m.SchedNumEntries))
	}
	if m.NumCoses != 0 {
		n += 1 + sovInterface(uint64(m.NumCoses))
	}
	return n
}

func (m *LifResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInterface(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if len(m.Qstate) > 0 {
		for _, e := range m.Qstate {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	if m.RdmaDataValid {
		n += 2
	}
	if m.RdmaData != nil {
		l = m.RdmaData.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.TxSchedData != nil {
		l = m.TxSchedData.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *LifResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *QStateGetReq) Size() (n int) {
	var l int
	_ = l
	if m.LifHandle != 0 {
		n += 1 + sovInterface(uint64(m.LifHandle))
	}
	if m.TypeNum != 0 {
		n += 1 + sovInterface(uint64(m.TypeNum))
	}
	if m.Qid != 0 {
		n += 1 + sovInterface(uint64(m.Qid))
	}
	if m.RetDataSize != 0 {
		n += 1 + sovInterface(uint64(m.RetDataSize))
	}
	return n
}

func (m *GetQStateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Reqs) > 0 {
		for _, e := range m.Reqs {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *QStateGetResp) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovInterface(uint64(m.ErrorCode))
	}
	if m.QAddr != 0 {
		n += 1 + sovInterface(uint64(m.QAddr))
	}
	l = len(m.QueueState)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *GetQStateResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Resps) > 0 {
		for _, e := range m.Resps {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *P4ProgLabel) Size() (n int) {
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.ProgName)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *QStateSetReq) Size() (n int) {
	var l int
	_ = l
	if m.LifHandle != 0 {
		n += 1 + sovInterface(uint64(m.LifHandle))
	}
	if m.TypeNum != 0 {
		n += 1 + sovInterface(uint64(m.TypeNum))
	}
	if m.Qid != 0 {
		n += 1 + sovInterface(uint64(m.Qid))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.QueueState)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *SetQStateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Reqs) > 0 {
		for _, e := range m.Reqs {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *QStateSetResp) Size() (n int) {
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovInterface(uint64(m.ErrorCode))
	}
	return n
}

func (m *SetQStateResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Resps) > 0 {
		for _, e := range m.Resps {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *LifDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *LifDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *LifDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInterface(uint64(m.ApiStatus))
	}
	return n
}

func (m *LifDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *LifTxStats) Size() (n int) {
	var l int
	_ = l
	if m.FramesOk != 0 {
		n += 1 + sovInterface(uint64(m.FramesOk))
	}
	if m.UnicastFramesOk != 0 {
		n += 1 + sovInterface(uint64(m.UnicastFramesOk))
	}
	if m.UnicastFramesDrop != 0 {
		n += 1 + sovInterface(uint64(m.UnicastFramesDrop))
	}
	if m.MulticastFramesOk != 0 {
		n += 1 + sovInterface(uint64(m.MulticastFramesOk))
	}
	if m.MulticastFramesDrop != 0 {
		n += 1 + sovInterface(uint64(m.MulticastFramesDrop))
	}
	if m.BroadcastFramesOk != 0 {
		n += 1 + sovInterface(uint64(m.BroadcastFramesOk))
	}
	if m.BroadcastFramesDrop != 0 {
		n += 1 + sovInterface(uint64(m.BroadcastFramesDrop))
	}
	if m.BytesOk != 0 {
		n += 1 + sovInterface(uint64(m.BytesOk))
	}
	if m.UnicastBytesOk != 0 {
		n += 1 + sovInterface(uint64(m.UnicastBytesOk))
	}
	if m.MulticastBytesOk != 0 {
		n += 1 + sovInterface(uint64(m.MulticastBytesOk))
	}
	if m.BroadcastBytesOk != 0 {
		n += 1 + sovInterface(uint64(m.BroadcastBytesOk))
	}
	if m.Tso != 0 {
		n += 1 + sovInterface(uint64(m.Tso))
	}
	if m.Pps != 0 {
		n += 1 + sovInterface(uint64(m.Pps))
	}
	if m.Bytesps != 0 {
		n += 1 + sovInterface(uint64(m.Bytesps))
	}
	return n
}

func (m *LifRxStats) Size() (n int) {
	var l int
	_ = l
	if m.FramesTotal != 0 {
		n += 1 + sovInterface(uint64(m.FramesTotal))
	}
	if m.FramesOk != 0 {
		n += 1 + sovInterface(uint64(m.FramesOk))
	}
	if m.UnicastFramesOk != 0 {
		n += 1 + sovInterface(uint64(m.UnicastFramesOk))
	}
	if m.UnicastFramesDrop != 0 {
		n += 1 + sovInterface(uint64(m.UnicastFramesDrop))
	}
	if m.MulticastFramesOk != 0 {
		n += 1 + sovInterface(uint64(m.MulticastFramesOk))
	}
	if m.MulticastFramesDrop != 0 {
		n += 1 + sovInterface(uint64(m.MulticastFramesDrop))
	}
	if m.BroadcastFramesOk != 0 {
		n += 1 + sovInterface(uint64(m.BroadcastFramesOk))
	}
	if m.BroadcastFramesDrop != 0 {
		n += 1 + sovInterface(uint64(m.BroadcastFramesDrop))
	}
	if m.BytesOk != 0 {
		n += 1 + sovInterface(uint64(m.BytesOk))
	}
	if m.UnicastBytesOk != 0 {
		n += 1 + sovInterface(uint64(m.UnicastBytesOk))
	}
	if m.MulticastBytesOk != 0 {
		n += 1 + sovInterface(uint64(m.MulticastBytesOk))
	}
	if m.BroadcastBytesOk != 0 {
		n += 1 + sovInterface(uint64(m.BroadcastBytesOk))
	}
	if m.Drops != 0 {
		n += 1 + sovInterface(uint64(m.Drops))
	}
	if m.NoBufs != 0 {
		n += 1 + sovInterface(uint64(m.NoBufs))
	}
	if m.Errors != 0 {
		n += 1 + sovInterface(uint64(m.Errors))
	}
	if m.Rss != 0 {
		n += 2 + sovInterface(uint64(m.Rss))
	}
	if m.CrcErrors != 0 {
		n += 2 + sovInterface(uint64(m.CrcErrors))
	}
	if m.Frames_64 != 0 {
		n += 2 + sovInterface(uint64(m.Frames_64))
	}
	if m.Frames_127 != 0 {
		n += 2 + sovInterface(uint64(m.Frames_127))
	}
	if m.Frames_255 != 0 {
		n += 2 + sovInterface(uint64(m.Frames_255))
	}
	if m.Frames_511 != 0 {
		n += 2 + sovInterface(uint64(m.Frames_511))
	}
	if m.Frames_1024 != 0 {
		n += 2 + sovInterface(uint64(m.Frames_1024))
	}
	if m.Frames_1518 != 0 {
		n += 2 + sovInterface(uint64(m.Frames_1518))
	}
	if m.FramesToMax != 0 {
		n += 2 + sovInterface(uint64(m.FramesToMax))
	}
	if m.PolicerStats != nil {
		l = m.PolicerStats.Size()
		n += 2 + l + sovInterface(uint64(l))
	}
	if m.Pps != 0 {
		n += 2 + sovInterface(uint64(m.Pps))
	}
	if m.Bytesps != 0 {
		n += 2 + sovInterface(uint64(m.Bytesps))
	}
	return n
}

func (m *DataLifStats) Size() (n int) {
	var l int
	_ = l
	if m.TxStats != nil {
		l = m.TxStats.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.RxStats != nil {
		l = m.RxStats.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *CpuQueueStats) Size() (n int) {
	var l int
	_ = l
	if m.CpucbId != 0 {
		n += 1 + sovInterface(uint64(m.CpucbId))
	}
	if m.NumTxPackets != 0 {
		n += 5
	}
	if m.NumRxPackets != 0 {
		n += 5
	}
	if m.RxQfullDropErrors != 0 {
		n += 1 + sovInterface(uint64(m.RxQfullDropErrors))
	}
	if m.TxSemFullDrops != 0 {
		n += 1 + sovInterface(uint64(m.TxSemFullDrops))
	}
	if m.TxFreeRequests != 0 {
		n += 1 + sovInterface(uint64(m.TxFreeRequests))
	}
	if m.RxSemFullDrops != 0 {
		n += 1 + sovInterface(uint64(m.RxSemFullDrops))
	}
	if m.RxQueue0Pkts != 0 {
		n += 1 + sovInterface(uint64(m.RxQueue0Pkts))
	}
	if m.RxQueue1Pkts != 0 {
		n += 1 + sovInterface(uint64(m.RxQueue1Pkts))
	}
	if m.RxQueue2Pkts != 0 {
		n += 1 + sovInterface(uint64(m.RxQueue2Pkts))
	}
	return n
}

func (m *CpuLifStats) Size() (n int) {
	var l int
	_ = l
	if len(m.CpuQueueStats) > 0 {
		for _, e := range m.CpuQueueStats {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *LifStats) Size() (n int) {
	var l int
	_ = l
	if m.Lifs != nil {
		n += m.Lifs.Size()
	}
	return n
}

func (m *LifStats_DataLifStats) Size() (n int) {
	var l int
	_ = l
	if m.DataLifStats != nil {
		l = m.DataLifStats.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *LifStats_CpuLifStats) Size() (n int) {
	var l int
	_ = l
	if m.CpuLifStats != nil {
		l = m.CpuLifStats.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *LifGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *LifGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *LifGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInterface(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if len(m.Qstate) > 0 {
		for _, e := range m.Qstate {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *LifGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *LifRssSpec) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovInterface(uint64(m.Type))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	l = len(m.Indir)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *EnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.L2SegmentKeyHandle != nil {
		l = m.L2SegmentKeyHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.MacAddress != 0 {
		n += 9
	}
	if m.EncapVlanId != 0 {
		n += 1 + sovInterface(uint64(m.EncapVlanId))
	}
	return n
}

func (m *EnicClassicInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.L2SegmentKeyHandle) > 0 {
		for _, e := range m.L2SegmentKeyHandle {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	if m.NativeL2SegmentId != 0 {
		n += 1 + sovInterface(uint64(m.NativeL2SegmentId))
	}
	return n
}

func (m *IfEnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.EnicType != 0 {
		n += 1 + sovInterface(uint64(m.EnicType))
	}
	if m.LifKeyOrHandle != nil {
		l = m.LifKeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.PinnedUplinkIfKeyHandle != nil {
		l = m.PinnedUplinkIfKeyHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.EnicTypeInfo != nil {
		n += m.EnicTypeInfo.Size()
	}
	return n
}

func (m *IfEnicInfo_EnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.EnicInfo != nil {
		l = m.EnicInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *IfEnicInfo_ClassicEnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.ClassicEnicInfo != nil {
		l = m.ClassicEnicInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *IfUplinkInfo) Size() (n int) {
	var l int
	_ = l
	if m.PortNum != 0 {
		n += 1 + sovInterface(uint64(m.PortNum))
	}
	if m.NativeL2SegmentId != 0 {
		n += 1 + sovInterface(uint64(m.NativeL2SegmentId))
	}
	if m.IsOobManagement {
		n += 2
	}
	return n
}

func (m *IfUplinkPCInfo) Size() (n int) {
	var l int
	_ = l
	if m.NativeL2SegmentId != 0 {
		n += 1 + sovInterface(uint64(m.NativeL2SegmentId))
	}
	if len(m.MemberIfKeyHandle) > 0 {
		for _, e := range m.MemberIfKeyHandle {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *IfTunnelVxlanInfo) Size() (n int) {
	var l int
	_ = l
	if m.LocalTep != nil {
		l = m.LocalTep.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.RemoteTep != nil {
		l = m.RemoteTep.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *IfTunnelGREInfo) Size() (n int) {
	var l int
	_ = l
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.Destination != nil {
		l = m.Destination.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.Mtu != 0 {
		n += 1 + sovInterface(uint64(m.Mtu))
	}
	if m.Ttl != 0 {
		n += 1 + sovInterface(uint64(m.Ttl))
	}
	return n
}

func (m *IfTunnelProprietaryMpls) Size() (n int) {
	var l int
	_ = l
	if m.SubstrateIp != nil {
		l = m.SubstrateIp.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if len(m.OverlayIp) > 0 {
		for _, e := range m.OverlayIp {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	if len(m.MplsIf) > 0 {
		for _, e := range m.MplsIf {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	if m.TunnelDestIp != nil {
		l = m.TunnelDestIp.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.MplsTag != nil {
		l = m.MplsTag.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.SourceGw != nil {
		l = m.SourceGw.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.IngressBw != 0 {
		n += 1 + sovInterface(uint64(m.IngressBw))
	}
	if m.EgressBw != 0 {
		n += 1 + sovInterface(uint64(m.EgressBw))
	}
	if m.GwMacDa != 0 {
		n += 9
	}
	l = len(m.LifName)
	if l > 0 {
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.OverlayMac != 0 {
		n += 9
	}
	if m.PfMac != 0 {
		n += 9
	}
	return n
}

func (m *IfTunnelInfo) Size() (n int) {
	var l int
	_ = l
	if m.EncapType != 0 {
		n += 1 + sovInterface(uint64(m.EncapType))
	}
	if m.EncapInfo != nil {
		n += m.EncapInfo.Size()
	}
	if m.VrfKeyHandle != nil {
		l = m.VrfKeyHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *IfTunnelInfo_VxlanInfo) Size() (n int) {
	var l int
	_ = l
	if m.VxlanInfo != nil {
		l = m.VxlanInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *IfTunnelInfo_GreInfo) Size() (n int) {
	var l int
	_ = l
	if m.GreInfo != nil {
		l = m.GreInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *IfTunnelInfo_PropMplsInfo) Size() (n int) {
	var l int
	_ = l
	if m.PropMplsInfo != nil {
		l = m.PropMplsInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *IfCPUInfo) Size() (n int) {
	var l int
	_ = l
	if m.LifKeyOrHandle != nil {
		l = m.LifKeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.AllowRx {
		n += 2
	}
	return n
}

func (m *IfAppRedirInfo) Size() (n int) {
	var l int
	_ = l
	if m.LifKeyOrHandle != nil {
		l = m.LifKeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovInterface(uint64(m.Type))
	}
	if m.AdminStatus != 0 {
		n += 1 + sovInterface(uint64(m.AdminStatus))
	}
	if m.IfInfo != nil {
		n += m.IfInfo.Size()
	}
	if len(m.TxMirrorSessions) > 0 {
		for _, e := range m.TxMirrorSessions {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	if len(m.RxMirrorSessions) > 0 {
		for _, e := range m.RxMirrorSessions {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceSpec_IfEnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.IfEnicInfo != nil {
		l = m.IfEnicInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceSpec_IfUplinkInfo) Size() (n int) {
	var l int
	_ = l
	if m.IfUplinkInfo != nil {
		l = m.IfUplinkInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceSpec_IfUplinkPcInfo) Size() (n int) {
	var l int
	_ = l
	if m.IfUplinkPcInfo != nil {
		l = m.IfUplinkPcInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceSpec_IfTunnelInfo) Size() (n int) {
	var l int
	_ = l
	if m.IfTunnelInfo != nil {
		l = m.IfTunnelInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceSpec_IfCpuInfo) Size() (n int) {
	var l int
	_ = l
	if m.IfCpuInfo != nil {
		l = m.IfCpuInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceSpec_IfAppRedirInfo) Size() (n int) {
	var l int
	_ = l
	if m.IfAppRedirInfo != nil {
		l = m.IfAppRedirInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *UplinkResponseInfo) Size() (n int) {
	var l int
	_ = l
	if m.UplinkLportId != 0 {
		n += 1 + sovInterface(uint64(m.UplinkLportId))
	}
	if m.HwLifId != 0 {
		n += 1 + sovInterface(uint64(m.HwLifId))
	}
	if m.UplinkIdx != 0 {
		n += 1 + sovInterface(uint64(m.UplinkIdx))
	}
	if m.NumL2Segs != 0 {
		n += 1 + sovInterface(uint64(m.NumL2Segs))
	}
	if m.HwPortNum != 0 {
		n += 1 + sovInterface(uint64(m.HwPortNum))
	}
	if m.TxPps != 0 {
		n += 1 + sovInterface(uint64(m.TxPps))
	}
	if m.TxBytesps != 0 {
		n += 1 + sovInterface(uint64(m.TxBytesps))
	}
	if m.RxPps != 0 {
		n += 1 + sovInterface(uint64(m.RxPps))
	}
	if m.RxBytesps != 0 {
		n += 1 + sovInterface(uint64(m.RxBytesps))
	}
	return n
}

func (m *EnicL2SegInfo) Size() (n int) {
	var l int
	_ = l
	if m.L2SegmentKeyOrHandle != nil {
		l = m.L2SegmentKeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.InpPropIdx != 0 {
		n += 1 + sovInterface(uint64(m.InpPropIdx))
	}
	return n
}

func (m *SmartEnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.InpPropMacVlanIdxHost != 0 {
		n += 1 + sovInterface(uint64(m.InpPropMacVlanIdxHost))
	}
	if m.InpPropMacVlanIdxNet != 0 {
		n += 1 + sovInterface(uint64(m.InpPropMacVlanIdxNet))
	}
	return n
}

func (m *ClassicEnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.InpPropNatL2SegClassic != 0 {
		n += 1 + sovInterface(uint64(m.InpPropNatL2SegClassic))
	}
	if len(m.MembershipInfo) > 0 {
		for _, e := range m.MembershipInfo {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *EnicResponseInfo) Size() (n int) {
	var l int
	_ = l
	if m.EnicLportId != 0 {
		n += 1 + sovInterface(uint64(m.EnicLportId))
	}
	if m.UplinkIfHandle != 0 {
		n += 1 + sovInterface(uint64(m.UplinkIfHandle))
	}
	if m.EnicTypeInfo != nil {
		n += m.EnicTypeInfo.Size()
	}
	return n
}

func (m *EnicResponseInfo_SmartEnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.SmartEnicInfo != nil {
		l = m.SmartEnicInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *EnicResponseInfo_ClassicEnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.ClassicEnicInfo != nil {
		l = m.ClassicEnicInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *CpuIfResponseInfo) Size() (n int) {
	var l int
	_ = l
	if m.CpuLportId != 0 {
		n += 1 + sovInterface(uint64(m.CpuLportId))
	}
	return n
}

func (m *TunnelIfResponseInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.InpMapNatIdx) > 0 {
		l = 0
		for _, e := range m.InpMapNatIdx {
			l += sovInterface(uint64(e))
		}
		n += 1 + sovInterface(uint64(l)) + l
	}
	if len(m.InpMapTnlIdx) > 0 {
		l = 0
		for _, e := range m.InpMapTnlIdx {
			l += sovInterface(uint64(e))
		}
		n += 1 + sovInterface(uint64(l)) + l
	}
	if m.TunnelRwIdx != 0 {
		n += 1 + sovInterface(uint64(m.TunnelRwIdx))
	}
	return n
}

func (m *AppRedirIfInfo) Size() (n int) {
	var l int
	_ = l
	if m.LportId != 0 {
		n += 1 + sovInterface(uint64(m.LportId))
	}
	return n
}

func (m *InterfaceStatus) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.IfStatus != 0 {
		n += 1 + sovInterface(uint64(m.IfStatus))
	}
	if m.IfHandle != 0 {
		n += 9
	}
	if m.IfResponseInfo != nil {
		n += m.IfResponseInfo.Size()
	}
	return n
}

func (m *InterfaceStatus_UplinkInfo) Size() (n int) {
	var l int
	_ = l
	if m.UplinkInfo != nil {
		l = m.UplinkInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceStatus_EnicInfo) Size() (n int) {
	var l int
	_ = l
	if m.EnicInfo != nil {
		l = m.EnicInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceStatus_CpuInfo) Size() (n int) {
	var l int
	_ = l
	if m.CpuInfo != nil {
		l = m.CpuInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceStatus_TunnelInfo) Size() (n int) {
	var l int
	_ = l
	if m.TunnelInfo != nil {
		l = m.TunnelInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceStatus_AppRedirInfo) Size() (n int) {
	var l int
	_ = l
	if m.AppRedirInfo != nil {
		l = m.AppRedirInfo.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}
func (m *InterfaceResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInterface(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInterface(uint64(m.ApiStatus))
	}
	return n
}

func (m *InterfaceDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceStats) Size() (n int) {
	var l int
	_ = l
	if m.NumTxPackets != 0 {
		n += 5
	}
	if m.NumTxBytes != 0 {
		n += 5
	}
	if m.NumRxPackets != 0 {
		n += 5
	}
	if m.NumRxBytes != 0 {
		n += 5
	}
	return n
}

func (m *InterfaceGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInterface(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInterface(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceL2SegmentSpec) Size() (n int) {
	var l int
	_ = l
	if m.L2SegmentKeyOrHandle != nil {
		l = m.L2SegmentKeyOrHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	if m.IfKeyHandle != nil {
		l = m.IfKeyHandle.Size()
		n += 1 + l + sovInterface(uint64(l))
	}
	return n
}

func (m *InterfaceL2SegmentRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func (m *InterfaceL2SegmentResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInterface(uint64(m.ApiStatus))
	}
	return n
}

func (m *InterfaceL2SegmentResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInterface(uint64(l))
		}
	}
	return n
}

func sovInterface(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInterface(x uint64) (n int) {
	return sovInterface(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LifQStateMapEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifQStateMapEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifQStateMapEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeNum", wireType)
			}
			m.TypeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			m.Entries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entries |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purpose", wireType)
			}
			m.Purpose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purpose |= (LifQPurpose(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PktFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PktFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PktFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveBroadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceiveBroadcast = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveAllMulticast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceiveAllMulticast = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivePromiscuous", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceivePromiscuous = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastPktFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastPktFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastPktFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Arp = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhcpClient", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DhcpClient = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhcpServer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DhcpServer = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Netbios", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Netbios = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastPktFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastPktFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastPktFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6NeighAdv", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6NeighAdv = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6RouterAdv", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6RouterAdv = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dhcpv6Relay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dhcpv6Relay = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dhcpv6Mcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dhcpv6Mcast = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6Mld", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6Mld = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv6NeighSol", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ipv6NeighSol = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &LifKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedUplinkIfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinnedUplinkIfKeyHandle == nil {
				m.PinnedUplinkIfKeyHandle = &InterfaceKeyHandle{}
			}
			if err := m.PinnedUplinkIfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminStatus", wireType)
			}
			m.AdminStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminStatus |= (IfStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (LifType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifQstateMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LifQstateMap = append(m.LifQstateMap, &LifQStateMapEntry{})
			if err := m.LifQstateMap[len(m.LifQstateMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanStripEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlanStripEn = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanInsertEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VlanInsertEn = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableRdma", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableRdma = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsManagement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsManagement = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdmaSniffEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RdmaSniffEn = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PacketFilter == nil {
				m.PacketFilter = &PktFilter{}
			}
			if err := m.PacketFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HwLifId", wireType)
			}
			m.HwLifId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HwLifId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdmaMaxKeys", wireType)
			}
			m.RdmaMaxKeys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdmaMaxKeys |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdmaMaxAhs", wireType)
			}
			m.RdmaMaxAhs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdmaMaxAhs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdmaMaxPtEntries", wireType)
			}
			m.RdmaMaxPtEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdmaMaxPtEntries |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifQstate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LifQstate = append(m.LifQstate, &QStateSetReq{})
			if err := m.LifQstate[len(m.LifQstate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rss == nil {
				m.Rss = &LifRssSpec{}
			}
			if err := m.Rss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPolicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxPolicer == nil {
				m.TxPolicer = &PolicerSpec{}
			}
			if err := m.TxPolicer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPolicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPolicer == nil {
				m.RxPolicer = &PolicerSpec{}
			}
			if err := m.RxPolicer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxQosClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxQosClass == nil {
				m.RxQosClass = &QosClassKeyHandle{}
			}
			if err := m.RxQosClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxQosClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxQosClass == nil {
				m.TxQosClass = &QosClassKeyHandle{}
			}
			if err := m.TxQosClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdmaBarmapSize", wireType)
			}
			m.RdmaBarmapSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdmaBarmapSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableNvme", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableNvme = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NvmeMaxNs", wireType)
			}
			m.NvmeMaxNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NvmeMaxNs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NvmeMaxSess", wireType)
			}
			m.NvmeMaxSess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NvmeMaxSess |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NvmeHostPageSize", wireType)
			}
			m.NvmeHostPageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NvmeHostPageSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwmOob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwmOob == nil {
				m.SwmOob = &InterfaceKeyHandle{}
			}
			if err := m.SwmOob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BcastPktFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BcastPktFilter == nil {
				m.BcastPktFilter = &BcastPktFilter{}
			}
			if err := m.BcastPktFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McastPktFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.McastPktFilter == nil {
				m.McastPktFilter = &McastPktFilter{}
			}
			if err := m.McastPktFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RxEn = bool(v != 0)
		case 33:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			m.MacAddress = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (LifState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxMirrorSessions = append(m.TxMirrorSessions, &MirrorSessionKeyHandle{})
			if err := m.TxMirrorSessions[len(m.TxMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RxMirrorSessions = append(m.RxMirrorSessions, &MirrorSessionKeyHandle{})
			if err := m.RxMirrorSessions[len(m.RxMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &LifSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &LifKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifStatus", wireType)
			}
			m.LifStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifStatus |= (IfStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifHandle", wireType)
			}
			m.LifHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.LifHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HwLifId", wireType)
			}
			m.HwLifId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HwLifId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifQState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifQState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifQState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeNum", wireType)
			}
			m.TypeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifRdmaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifRdmaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifRdmaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtBaseAddr", wireType)
			}
			m.PtBaseAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtBaseAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KtBaseAddr", wireType)
			}
			m.KtBaseAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KtBaseAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcqcnProfileBaseAddr", wireType)
			}
			m.DcqcnProfileBaseAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcqcnProfileBaseAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtBaseAddr", wireType)
			}
			m.AtBaseAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtBaseAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarmapBaseAddr", wireType)
			}
			m.BarmapBaseAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarmapBaseAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifTxSchedulerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifTxSchedulerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifTxSchedulerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedTableOffset", wireType)
			}
			m.SchedTableOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedTableOffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedNumEntries", wireType)
			}
			m.SchedNumEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedNumEntries |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCoses", wireType)
			}
			m.NumCoses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumCoses |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &LifStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qstate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qstate = append(m.Qstate, &LifQState{})
			if err := m.Qstate[len(m.Qstate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdmaDataValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RdmaDataValid = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdmaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RdmaData == nil {
				m.RdmaData = &LifRdmaData{}
			}
			if err := m.RdmaData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSchedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxSchedData == nil {
				m.TxSchedData = &LifTxSchedulerData{}
			}
			if err := m.TxSchedData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LifResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QStateGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QStateGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QStateGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifHandle", wireType)
			}
			m.LifHandle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifHandle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeNum", wireType)
			}
			m.TypeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qid", wireType)
			}
			m.Qid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetDataSize", wireType)
			}
			m.RetDataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetDataSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQStateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQStateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQStateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reqs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reqs = append(m.Reqs, &QStateGetReq{})
			if err := m.Reqs[len(m.Reqs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QStateGetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QStateGetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QStateGetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QAddr", wireType)
			}
			m.QAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueState = append(m.QueueState[:0], dAtA[iNdEx:postIndex]...)
			if m.QueueState == nil {
				m.QueueState = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQStateResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQStateResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQStateResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resps = append(m.Resps, &QStateGetResp{})
			if err := m.Resps[len(m.Resps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *P4ProgLabel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: P4ProgLabel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: P4ProgLabel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QStateSetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QStateSetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QStateSetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifHandle", wireType)
			}
			m.LifHandle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifHandle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeNum", wireType)
			}
			m.TypeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qid", wireType)
			}
			m.Qid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &P4ProgLabel{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueState = append(m.QueueState[:0], dAtA[iNdEx:postIndex]...)
			if m.QueueState == nil {
				m.QueueState = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetQStateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetQStateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetQStateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reqs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reqs = append(m.Reqs, &QStateSetReq{})
			if err := m.Reqs[len(m.Reqs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QStateSetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QStateSetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QStateSetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetQStateResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetQStateResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetQStateResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resps = append(m.Resps, &QStateSetResp{})
			if err := m.Resps[len(m.Resps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &LifKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &LifDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LifDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifTxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifTxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifTxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesOk", wireType)
			}
			m.FramesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnicastFramesOk", wireType)
			}
			m.UnicastFramesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnicastFramesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnicastFramesDrop", wireType)
			}
			m.UnicastFramesDrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnicastFramesDrop |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastFramesOk", wireType)
			}
			m.MulticastFramesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MulticastFramesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastFramesDrop", wireType)
			}
			m.MulticastFramesDrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MulticastFramesDrop |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastFramesOk", wireType)
			}
			m.BroadcastFramesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastFramesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastFramesDrop", wireType)
			}
			m.BroadcastFramesDrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastFramesDrop |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesOk", wireType)
			}
			m.BytesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnicastBytesOk", wireType)
			}
			m.UnicastBytesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnicastBytesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastBytesOk", wireType)
			}
			m.MulticastBytesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MulticastBytesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastBytesOk", wireType)
			}
			m.BroadcastBytesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastBytesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tso", wireType)
			}
			m.Tso = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tso |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pps", wireType)
			}
			m.Pps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytesps", wireType)
			}
			m.Bytesps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytesps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifRxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifRxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifRxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTotal", wireType)
			}
			m.FramesTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesOk", wireType)
			}
			m.FramesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnicastFramesOk", wireType)
			}
			m.UnicastFramesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnicastFramesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnicastFramesDrop", wireType)
			}
			m.UnicastFramesDrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnicastFramesDrop |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastFramesOk", wireType)
			}
			m.MulticastFramesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MulticastFramesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastFramesDrop", wireType)
			}
			m.MulticastFramesDrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MulticastFramesDrop |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastFramesOk", wireType)
			}
			m.BroadcastFramesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastFramesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastFramesDrop", wireType)
			}
			m.BroadcastFramesDrop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastFramesDrop |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesOk", wireType)
			}
			m.BytesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnicastBytesOk", wireType)
			}
			m.UnicastBytesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnicastBytesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastBytesOk", wireType)
			}
			m.MulticastBytesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MulticastBytesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastBytesOk", wireType)
			}
			m.BroadcastBytesOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastBytesOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drops", wireType)
			}
			m.Drops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Drops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBufs", wireType)
			}
			m.NoBufs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoBufs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			m.Errors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rss", wireType)
			}
			m.Rss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rss |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrcErrors", wireType)
			}
			m.CrcErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrcErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frames_64", wireType)
			}
			m.Frames_64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frames_64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frames_127", wireType)
			}
			m.Frames_127 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frames_127 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frames_255", wireType)
			}
			m.Frames_255 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frames_255 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frames_511", wireType)
			}
			m.Frames_511 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frames_511 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frames_1024", wireType)
			}
			m.Frames_1024 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frames_1024 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frames_1518", wireType)
			}
			m.Frames_1518 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frames_1518 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesToMax", wireType)
			}
			m.FramesToMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesToMax |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicerStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicerStats == nil {
				m.PolicerStats = &PolicerStats{}
			}
			if err := m.PolicerStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pps", wireType)
			}
			m.Pps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytesps", wireType)
			}
			m.Bytesps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytesps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataLifStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataLifStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataLifStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxStats == nil {
				m.TxStats = &LifTxStats{}
			}
			if err := m.TxStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxStats == nil {
				m.RxStats = &LifRxStats{}
			}
			if err := m.RxStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuQueueStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuQueueStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuQueueStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpucbId", wireType)
			}
			m.CpucbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpucbId |= (CpucbId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTxPackets", wireType)
			}
			m.NumTxPackets = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumTxPackets = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRxPackets", wireType)
			}
			m.NumRxPackets = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumRxPackets = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxQfullDropErrors", wireType)
			}
			m.RxQfullDropErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxQfullDropErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSemFullDrops", wireType)
			}
			m.TxSemFullDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSemFullDrops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFreeRequests", wireType)
			}
			m.TxFreeRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFreeRequests |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxSemFullDrops", wireType)
			}
			m.RxSemFullDrops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxSemFullDrops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxQueue0Pkts", wireType)
			}
			m.RxQueue0Pkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxQueue0Pkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxQueue1Pkts", wireType)
			}
			m.RxQueue1Pkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxQueue1Pkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxQueue2Pkts", wireType)
			}
			m.RxQueue2Pkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxQueue2Pkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuLifStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuLifStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuLifStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuQueueStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CpuQueueStats = append(m.CpuQueueStats, &CpuQueueStats{})
			if err := m.CpuQueueStats[len(m.CpuQueueStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLifStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataLifStats{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Lifs = &LifStats_DataLifStats{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuLifStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CpuLifStats{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Lifs = &LifStats_CpuLifStats{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &LifKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &LifGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &LifSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &LifStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &LifStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qstate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qstate = append(m.Qstate, &LifQState{})
			if err := m.Qstate[len(m.Qstate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LifGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifRssSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifRssSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifRssSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indir", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indir = append(m.Indir[:0], dAtA[iNdEx:postIndex]...)
			if m.Indir == nil {
				m.Indir = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L2SegmentKeyHandle == nil {
				m.L2SegmentKeyHandle = &L2SegmentKeyHandle{}
			}
			if err := m.L2SegmentKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			m.MacAddress = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncapVlanId", wireType)
			}
			m.EncapVlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncapVlanId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnicClassicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnicClassicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnicClassicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L2SegmentKeyHandle = append(m.L2SegmentKeyHandle, &L2SegmentKeyHandle{})
			if err := m.L2SegmentKeyHandle[len(m.L2SegmentKeyHandle)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeL2SegmentId", wireType)
			}
			m.NativeL2SegmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeL2SegmentId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfEnicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfEnicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfEnicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnicType", wireType)
			}
			m.EnicType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnicType |= (IfEnicType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifKeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LifKeyOrHandle == nil {
				m.LifKeyOrHandle = &LifKeyHandle{}
			}
			if err := m.LifKeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedUplinkIfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinnedUplinkIfKeyHandle == nil {
				m.PinnedUplinkIfKeyHandle = &InterfaceKeyHandle{}
			}
			if err := m.PinnedUplinkIfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnicInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnicTypeInfo = &IfEnicInfo_EnicInfo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassicEnicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnicClassicInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnicTypeInfo = &IfEnicInfo_ClassicEnicInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfUplinkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfUplinkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfUplinkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortNum", wireType)
			}
			m.PortNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeL2SegmentId", wireType)
			}
			m.NativeL2SegmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeL2SegmentId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOobManagement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOobManagement = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfUplinkPCInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfUplinkPCInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfUplinkPCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeL2SegmentId", wireType)
			}
			m.NativeL2SegmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeL2SegmentId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberIfKeyHandle = append(m.MemberIfKeyHandle, &InterfaceKeyHandle{})
			if err := m.MemberIfKeyHandle[len(m.MemberIfKeyHandle)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfTunnelVxlanInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfTunnelVxlanInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfTunnelVxlanInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalTep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalTep == nil {
				m.LocalTep = &IPAddress{}
			}
			if err := m.LocalTep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteTep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteTep == nil {
				m.RemoteTep = &IPAddress{}
			}
			if err := m.RemoteTep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfTunnelGREInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfTunnelGREInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfTunnelGREInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &IPAddress{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = &IPAddress{}
			}
			if err := m.Destination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfTunnelProprietaryMpls) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfTunnelProprietaryMpls: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfTunnelProprietaryMpls: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubstrateIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubstrateIp == nil {
				m.SubstrateIp = &IPAddress{}
			}
			if err := m.SubstrateIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OverlayIp = append(m.OverlayIp, &IPAddress{})
			if err := m.OverlayIp[len(m.OverlayIp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsIf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MplsIf = append(m.MplsIf, &MplsTag{})
			if err := m.MplsIf[len(m.MplsIf)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelDestIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TunnelDestIp == nil {
				m.TunnelDestIp = &IPAddress{}
			}
			if err := m.TunnelDestIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MplsTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MplsTag == nil {
				m.MplsTag = &MplsTag{}
			}
			if err := m.MplsTag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceGw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceGw == nil {
				m.SourceGw = &Address{}
			}
			if err := m.SourceGw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IngressBw", wireType)
			}
			m.IngressBw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IngressBw |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressBw", wireType)
			}
			m.EgressBw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EgressBw |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GwMacDa", wireType)
			}
			m.GwMacDa = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.GwMacDa = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LifName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverlayMac", wireType)
			}
			m.OverlayMac = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.OverlayMac = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PfMac", wireType)
			}
			m.PfMac = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.PfMac = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfTunnelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfTunnelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfTunnelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncapType", wireType)
			}
			m.EncapType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncapType |= (IfTunnelEncapType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VxlanInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IfTunnelVxlanInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EncapInfo = &IfTunnelInfo_VxlanInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GreInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IfTunnelGREInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EncapInfo = &IfTunnelInfo_GreInfo{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropMplsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IfTunnelProprietaryMpls{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EncapInfo = &IfTunnelInfo_PropMplsInfo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VrfKeyHandle == nil {
				m.VrfKeyHandle = &VrfKeyHandle{}
			}
			if err := m.VrfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfCPUInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfCPUInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfCPUInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifKeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LifKeyOrHandle == nil {
				m.LifKeyOrHandle = &LifKeyHandle{}
			}
			if err := m.LifKeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowRx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowRx = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IfAppRedirInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IfAppRedirInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IfAppRedirInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifKeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LifKeyOrHandle == nil {
				m.LifKeyOrHandle = &LifKeyHandle{}
			}
			if err := m.LifKeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &InterfaceKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (IfType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminStatus", wireType)
			}
			m.AdminStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminStatus |= (IfStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfEnicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IfEnicInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfInfo = &InterfaceSpec_IfEnicInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfUplinkInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IfUplinkInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfInfo = &InterfaceSpec_IfUplinkInfo{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfUplinkPcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IfUplinkPCInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfInfo = &InterfaceSpec_IfUplinkPcInfo{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfTunnelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IfTunnelInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfInfo = &InterfaceSpec_IfTunnelInfo{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfCpuInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IfCPUInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfInfo = &InterfaceSpec_IfCpuInfo{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfAppRedirInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IfAppRedirInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfInfo = &InterfaceSpec_IfAppRedirInfo{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxMirrorSessions = append(m.TxMirrorSessions, &MirrorSessionKeyHandle{})
			if err := m.TxMirrorSessions[len(m.TxMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxMirrorSessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RxMirrorSessions = append(m.RxMirrorSessions, &MirrorSessionKeyHandle{})
			if err := m.RxMirrorSessions[len(m.RxMirrorSessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &InterfaceSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkResponseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkResponseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkResponseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkLportId", wireType)
			}
			m.UplinkLportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkLportId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HwLifId", wireType)
			}
			m.HwLifId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HwLifId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkIdx", wireType)
			}
			m.UplinkIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumL2Segs", wireType)
			}
			m.NumL2Segs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumL2Segs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HwPortNum", wireType)
			}
			m.HwPortNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HwPortNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPps", wireType)
			}
			m.TxPps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytesps", wireType)
			}
			m.TxBytesps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxBytesps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPps", wireType)
			}
			m.RxPps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxBytesps", wireType)
			}
			m.RxBytesps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxBytesps |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnicL2SegInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnicL2SegInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnicL2SegInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentKeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L2SegmentKeyOrHandle == nil {
				m.L2SegmentKeyOrHandle = &L2SegmentKeyHandle{}
			}
			if err := m.L2SegmentKeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InpPropIdx", wireType)
			}
			m.InpPropIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InpPropIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmartEnicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmartEnicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmartEnicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InpPropMacVlanIdxHost", wireType)
			}
			m.InpPropMacVlanIdxHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InpPropMacVlanIdxHost |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InpPropMacVlanIdxNet", wireType)
			}
			m.InpPropMacVlanIdxNet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InpPropMacVlanIdxNet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassicEnicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassicEnicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassicEnicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InpPropNatL2SegClassic", wireType)
			}
			m.InpPropNatL2SegClassic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InpPropNatL2SegClassic |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembershipInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembershipInfo = append(m.MembershipInfo, &EnicL2SegInfo{})
			if err := m.MembershipInfo[len(m.MembershipInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnicResponseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnicResponseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnicResponseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnicLportId", wireType)
			}
			m.EnicLportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnicLportId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkIfHandle", wireType)
			}
			m.UplinkIfHandle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UplinkIfHandle |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartEnicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SmartEnicInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnicTypeInfo = &EnicResponseInfo_SmartEnicInfo{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassicEnicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClassicEnicInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EnicTypeInfo = &EnicResponseInfo_ClassicEnicInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CpuIfResponseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CpuIfResponseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CpuIfResponseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuLportId", wireType)
			}
			m.CpuLportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuLportId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TunnelIfResponseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TunnelIfResponseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TunnelIfResponseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InpMapNatIdx = append(m.InpMapNatIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInterface
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterface
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InpMapNatIdx = append(m.InpMapNatIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InpMapNatIdx", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InpMapTnlIdx = append(m.InpMapTnlIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterface
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInterface
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterface
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InpMapTnlIdx = append(m.InpMapTnlIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InpMapTnlIdx", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelRwIdx", wireType)
			}
			m.TunnelRwIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TunnelRwIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppRedirIfInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppRedirIfInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppRedirIfInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LportId", wireType)
			}
			m.LportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LportId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &InterfaceKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfStatus", wireType)
			}
			m.IfStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IfStatus |= (IfStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfHandle", wireType)
			}
			m.IfHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IfHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UplinkResponseInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfResponseInfo = &InterfaceStatus_UplinkInfo{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnicResponseInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfResponseInfo = &InterfaceStatus_EnicInfo{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CpuIfResponseInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfResponseInfo = &InterfaceStatus_CpuInfo{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TunnelInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TunnelIfResponseInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfResponseInfo = &InterfaceStatus_TunnelInfo{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppRedirInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppRedirIfInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IfResponseInfo = &InterfaceStatus_AppRedirInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &InterfaceStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &InterfaceResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &InterfaceKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &InterfaceDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &InterfaceDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTxPackets", wireType)
			}
			m.NumTxPackets = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumTxPackets = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTxBytes", wireType)
			}
			m.NumTxBytes = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumTxBytes = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRxPackets", wireType)
			}
			m.NumRxPackets = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumRxPackets = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRxBytes", wireType)
			}
			m.NumRxBytes = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumRxBytes = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &InterfaceKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &InterfaceGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &InterfaceSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &InterfaceStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &InterfaceStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &InterfaceGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceL2SegmentSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceL2SegmentSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceL2SegmentSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentKeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.L2SegmentKeyOrHandle == nil {
				m.L2SegmentKeyOrHandle = &L2SegmentKeyHandle{}
			}
			if err := m.L2SegmentKeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IfKeyHandle == nil {
				m.IfKeyHandle = &InterfaceKeyHandle{}
			}
			if err := m.IfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceL2SegmentRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceL2SegmentRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceL2SegmentRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &InterfaceL2SegmentSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceL2SegmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceL2SegmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceL2SegmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceL2SegmentResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceL2SegmentResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceL2SegmentResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterface
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &InterfaceL2SegmentResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterface(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterface
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterface(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterface
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterface
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInterface
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInterface
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInterface(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInterface = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterface   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("interface.proto", fileDescriptorInterface) }

var fileDescriptorInterface = []byte{
	// 5716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x7c, 0x4d, 0x6c, 0x23, 0xc9,
	0x75, 0xf0, 0xb6, 0x44, 0x51, 0xe4, 0xe3, 0x8f, 0x5a, 0x2d, 0x69, 0x44, 0x69, 0x76, 0x46, 0xb3,
	0xed, 0xf5, 0xee, 0xec, 0xac, 0x57, 0xbb, 0xd2, 0xce, 0xcc, 0xae, 0xd7, 0x3b, 0xb6, 0x25, 0x8a,
	0x33, 0xc3, 0x1d, 0x91, 0xe2, 0x34, 0x29, 0x79, 0xfc, 0x19, 0x8b, 0x46, 0x8b, 0x2c, 0x4a, 0x6d,
	0x35, 0xbb, 0x7b, 0xba, 0x9b, 0x12, 0xf5, 0x05, 0x36, 0x0c, 0xe7, 0x10, 0xc7, 0x3e, 0xd8, 0x81,
	0x03, 0x04, 0x86, 0x11, 0x20, 0x09, 0x72, 0x31, 0x10, 0x04, 0xf0, 0x31, 0x87, 0x20, 0x87, 0x5c,
	0x72, 0x09, 0x90, 0x43, 0xce, 0x42, 0xb0, 0x48, 0x0e, 0x39, 0xe4, 0xa2, 0xe4, 0x98, 0x43, 0xf0,
	0xaa, 0xaa, 0x7f, 0x49, 0x6a, 0xa5, 0xb5, 0xd6, 0xa7, 0x61, 0xbf, 0xbf, 0x7a, 0xf5, 0xea, 0xd5,
	0x7b, 0xaf, 0x5e, 0x95, 0x06, 0x66, 0x74, 0xd3, 0x23, 0x4e, 0x57, 0x6b, 0x93, 0x55, 0xdb, 0xb1,
	0x3c, 0x4b, 0x4a, 0xe9, 0xa6, 0xd7, 0x5d, 0xce, 0x79, 0xa7, 0x36, 0x71, 0x19, 0x68, 0x39, 0xfb,
	0xd2, 0xf2, 0x7f, 0x66, 0x8e, 0x0e, 0xf9, 0xaf, 0x7c, 0x87, 0x18, 0xf6, 0xa1, 0xce, 0xbe, 0xe4,
	0x3f, 0x16, 0x60, 0x76, 0x5b, 0xef, 0x3e, 0x6f, 0x7a, 0x9a, 0x47, 0x6a, 0x9a, 0x5d, 0x31, 0x3d,
	0xe7, 0x54, 0x5a, 0x82, 0x0c, 0xca, 0x51, 0xcd, 0x7e, 0xaf, 0x24, 0xdc, 0x11, 0xee, 0x16, 0x94,
	0x69, 0xfc, 0xae, 0xf7, 0x7b, 0x92, 0x04, 0x29, 0x57, 0xff, 0xff, 0xa4, 0x34, 0x41, 0xc1, 0xf4,
	0xb7, 0x54, 0x82, 0x69, 0x62, 0x7a, 0x8e, 0x4e, 0xdc, 0xd2, 0x24, 0xa3, 0xe6, 0x9f, 0xd2, 0xdb,
	0x30, 0x6d, 0xf7, 0x1d, 0xdb, 0x72, 0x49, 0x29, 0x75, 0x47, 0xb8, 0x5b, 0x5c, 0x9f, 0x5d, 0x45,
	0x35, 0x57, 0x71, 0xc8, 0x06, 0x43, 0x28, 0x3e, 0x85, 0xfc, 0xe7, 0x02, 0x64, 0x1b, 0x47, 0xde,
	0x63, 0xdd, 0xf0, 0x88, 0x23, 0xbd, 0x0d, 0xb3, 0x0e, 0x69, 0x13, 0xfd, 0x98, 0xa8, 0xfb, 0x8e,
	0xa5, 0x75, 0xda, 0x9a, 0xeb, 0x51, 0x65, 0x32, 0x8a, 0xc8, 0x11, 0x9b, 0x3e, 0x5c, 0x5a, 0x87,
	0x05, 0x9f, 0x58, 0x33, 0x0c, 0xb5, 0xd7, 0x37, 0x3c, 0x9d, 0x32, 0x4c, 0x50, 0x86, 0x39, 0x8e,
	0xdc, 0x30, 0x8c, 0x9a, 0x8f, 0x92, 0xde, 0x05, 0x1f, 0xac, 0xda, 0x8e, 0xd5, 0xd3, 0xdd, 0x76,
	0xdf, 0xea, 0xb3, 0x19, 0x64, 0x14, 0x89, 0xa3, 0x1a, 0x21, 0x46, 0xfe, 0x21, 0x14, 0x37, 0x91,
	0x33, 0xd4, 0x51, 0x84, 0x49, 0xcd, 0xb1, 0xb9, 0x56, 0xf8, 0x53, 0x5a, 0x81, 0x5c, 0xe7, 0xb0,
	0x6d, 0xab, 0x6d, 0x43, 0x27, 0xa6, 0x3f, 0x3c, 0x20, 0xa8, 0x4c, 0x21, 0x01, 0x81, 0x4b, 0x9c,
	0x63, 0xe2, 0xf0, 0xd1, 0x28, 0x41, 0x93, 0x42, 0xd0, 0x98, 0x26, 0xf1, 0xf6, 0x75, 0xcb, 0xa5,
	0x26, 0xcb, 0x28, 0xfe, 0xa7, 0xfc, 0x1f, 0x02, 0x14, 0x6b, 0x71, 0x05, 0x5e, 0x87, 0xa2, 0x6e,
	0x1f, 0x3f, 0x54, 0x4d, 0xa2, 0x1f, 0x1c, 0xaa, 0x5a, 0xe7, 0x98, 0xeb, 0x92, 0x47, 0x68, 0x1d,
	0x81, 0x1b, 0x9d, 0x63, 0xe9, 0x0d, 0x98, 0xa1, 0x54, 0x8e, 0xd5, 0xf7, 0x88, 0x43, 0xc9, 0x98,
	0x62, 0x05, 0x04, 0x2b, 0x14, 0x8a, 0x74, 0xaf, 0x41, 0x1e, 0x15, 0x41, 0x4a, 0x62, 0x68, 0xa7,
	0x5c, 0xb9, 0x1c, 0x83, 0x29, 0x08, 0x8a, 0x90, 0xf4, 0xa8, 0x7d, 0x53, 0x51, 0x12, 0xaa, 0x1c,
	0x3a, 0x0f, 0x1d, 0xad, 0x67, 0x74, 0x4a, 0x53, 0x6c, 0x06, 0xf8, 0x5d, 0x33, 0x3a, 0x09, 0x75,
	0x5d, 0xcb, 0x28, 0xa5, 0x13, 0xea, 0x36, 0x2d, 0x43, 0xfe, 0x79, 0x11, 0xa6, 0xb7, 0xf5, 0x6e,
	0xd3, 0x26, 0x6d, 0xe9, 0x0d, 0x48, 0xd5, 0x88, 0xa7, 0xd1, 0x69, 0xe5, 0xd6, 0xa5, 0x55, 0xee,
	0xbc, 0x3b, 0xfb, 0xdf, 0x27, 0x6d, 0x0f, 0x31, 0x0a, 0xc5, 0x4b, 0x5b, 0x50, 0x38, 0x22, 0xa7,
	0xaa, 0xe5, 0xa8, 0x87, 0x9a, 0xd9, 0x31, 0x98, 0x7f, 0xe6, 0xd6, 0xc5, 0xd5, 0xa3, 0x43, 0x74,
	0xb6, 0x67, 0xe4, 0xf4, 0x29, 0x85, 0x6f, 0x16, 0xcf, 0xcf, 0x56, 0xe0, 0x98, 0x98, 0x7a, 0x9b,
	0x7c, 0x74, 0x44, 0x4e, 0x95, 0xdc, 0x11, 0x39, 0xdd, 0x71, 0x18, 0x52, 0xfa, 0x5b, 0x01, 0x6e,
	0xda, 0xba, 0x69, 0x92, 0x8e, 0xda, 0xb7, 0x0d, 0xdd, 0x3c, 0x52, 0xf5, 0xae, 0x8a, 0x72, 0xb9,
	0xd0, 0x49, 0x2a, 0xf4, 0x06, 0x0a, 0xad, 0xfa, 0xdb, 0x2f, 0x14, 0xfd, 0xe2, 0xfc, 0x6c, 0xa5,
	0xc5, 0x45, 0x3b, 0xa4, 0xfb, 0x35, 0xfe, 0xb3, 0x6d, 0x99, 0xae, 0xe7, 0x68, 0xba, 0xe9, 0xb9,
	0x8f, 0xfe, 0x80, 0x7a, 0x7f, 0xc0, 0x8b, 0x53, 0x5c, 0xc5, 0x9d, 0xf5, 0x28, 0xd8, 0xcd, 0xaa,
	0xbd, 0xbf, 0xbe, 0x5a, 0x7d, 0xac, 0xb6, 0xbe, 0xdb, 0xa8, 0xa8, 0xbb, 0x8d, 0xed, 0x6a, 0xfd,
	0xd9, 0x0f, 0x94, 0x45, 0xa6, 0xd4, 0x2e, 0xd5, 0xa9, 0x1a, 0xce, 0x06, 0x77, 0xa3, 0xa9, 0xf5,
	0xd8, 0xe6, 0xca, 0x2a, 0xf4, 0xb7, 0xb4, 0x06, 0x79, 0xad, 0xd3, 0xd3, 0x4d, 0xd5, 0xf5, 0x34,
	0xaf, 0xef, 0xd2, 0x35, 0x28, 0xae, 0x17, 0xd9, 0xc6, 0xab, 0x76, 0x9b, 0x14, 0xaa, 0xe4, 0x28,
	0x0d, 0xfb, 0x90, 0x64, 0x48, 0xa1, 0x16, 0x74, 0x35, 0x90, 0x94, 0x05, 0x91, 0x6d, 0xbd, 0xdb,
	0x3a, 0xb5, 0x89, 0x42, 0x71, 0xd2, 0x23, 0x28, 0x1a, 0x7a, 0x57, 0x7d, 0x89, 0x52, 0x89, 0xda,
	0xd3, 0xec, 0xd2, 0xf4, 0x9d, 0xc9, 0xbb, 0xb9, 0xf5, 0xc5, 0x70, 0x47, 0xc7, 0x82, 0x88, 0x92,
	0x37, 0xf4, 0xee, 0x73, 0x97, 0x83, 0x24, 0x19, 0x0a, 0xc7, 0x86, 0x86, 0x4a, 0x39, 0xba, 0xad,
	0x12, 0xb3, 0x94, 0x61, 0x9e, 0x83, 0xc0, 0x26, 0xc2, 0x2a, 0x26, 0xba, 0x07, 0xa5, 0xd1, 0x4d,
	0x97, 0x38, 0x1e, 0x12, 0x65, 0x99, 0x7b, 0x20, 0xb4, 0x4a, 0x81, 0x15, 0x13, 0x77, 0x10, 0x31,
	0xb5, 0x7d, 0x83, 0xa8, 0x4e, 0xa7, 0xa7, 0x95, 0x80, 0xed, 0x20, 0x06, 0x52, 0x3a, 0x3d, 0x4d,
	0xfa, 0x3a, 0x14, 0x74, 0x57, 0xed, 0x69, 0xa6, 0x76, 0x40, 0x7a, 0xb8, 0x0b, 0x73, 0x48, 0xb2,
	0x39, 0x7f, 0x7e, 0xb6, 0x22, 0xf2, 0x35, 0xd1, 0x7b, 0xbd, 0xbe, 0x47, 0x19, 0xf2, 0xba, 0x5b,
	0x0b, 0x28, 0x51, 0x4b, 0x14, 0xaa, 0xba, 0xa6, 0xde, 0xed, 0xa2, 0x02, 0x79, 0xa6, 0x25, 0x02,
	0x9b, 0x08, 0xab, 0x98, 0xd2, 0x7d, 0x28, 0xd8, 0x5a, 0xfb, 0x88, 0x78, 0x6a, 0x97, 0x6e, 0xc2,
	0x52, 0x81, 0x7a, 0xc5, 0x0c, 0xb3, 0x43, 0xb0, 0x37, 0x95, 0x3c, 0xa3, 0xe2, 0x3b, 0x75, 0x19,
	0xb2, 0x87, 0x27, 0x2a, 0x5a, 0x50, 0xef, 0x94, 0x8a, 0x2c, 0x4a, 0x1e, 0x9e, 0x6c, 0xeb, 0xdd,
	0x6a, 0x27, 0x18, 0xb5, 0xa7, 0x0d, 0xd0, 0xdb, 0xdc, 0xd2, 0x0c, 0xc5, 0xd3, 0x51, 0x6b, 0xda,
	0xe0, 0x19, 0x39, 0x75, 0xa5, 0x3b, 0x90, 0x0f, 0x68, 0xb4, 0x43, 0xb7, 0x24, 0x52, 0x12, 0xe0,
	0x24, 0x1b, 0x87, 0xae, 0xf4, 0x0e, 0xcc, 0x05, 0x14, 0x36, 0x5a, 0x8f, 0x45, 0xe4, 0x59, 0x4a,
	0x28, 0x72, 0xc2, 0x86, 0x57, 0xe1, 0xa1, 0x79, 0x0d, 0x20, 0x5c, 0xcf, 0x92, 0x44, 0xd7, 0x52,
	0x62, 0x73, 0x60, 0x0b, 0xd9, 0x24, 0x9e, 0x42, 0x5e, 0x2a, 0xd9, 0x60, 0x19, 0x25, 0x19, 0x26,
	0x1d, 0xd7, 0x2d, 0xcd, 0xf1, 0xad, 0xe5, 0xaf, 0xbb, 0xe2, 0xba, 0xe8, 0xc8, 0x0a, 0x22, 0xa5,
	0x77, 0x01, 0xbc, 0x81, 0x6a, 0x5b, 0x86, 0xde, 0x26, 0x4e, 0x69, 0x9e, 0x93, 0x62, 0x22, 0x6a,
	0x30, 0x18, 0x25, 0xcd, 0x7a, 0x03, 0xfe, 0x89, 0x0c, 0x4e, 0xc8, 0xb0, 0x30, 0x8e, 0xc1, 0x09,
	0x18, 0x3e, 0x80, 0xbc, 0x33, 0x50, 0x5f, 0x5a, 0xae, 0xda, 0x36, 0x34, 0xd7, 0x2d, 0xdd, 0xa0,
	0x2c, 0x0b, 0xb8, 0x29, 0x9f, 0x5b, 0x6e, 0x19, 0x61, 0xc1, 0x06, 0x51, 0xc0, 0x19, 0xf8, 0x40,
	0x64, 0xf4, 0xa2, 0x8c, 0x8b, 0x17, 0x32, 0x7a, 0x21, 0xe3, 0x5d, 0xa0, 0xe6, 0x53, 0xf7, 0x35,
	0xa7, 0xa7, 0xd9, 0x2a, 0xcd, 0x7f, 0x25, 0x6a, 0xd6, 0x22, 0xc2, 0x37, 0x29, 0xb8, 0x89, 0x99,
	0x30, 0xf4, 0x4d, 0xf3, 0xb8, 0x47, 0x4a, 0x4b, 0x51, 0xdf, 0xac, 0x1f, 0xf7, 0x88, 0x74, 0x1b,
	0x72, 0x88, 0xa1, 0x8b, 0x64, 0xba, 0xa5, 0x65, 0x2a, 0x25, 0x8b, 0xa0, 0x9a, 0x36, 0xa8, 0xe3,
	0x4e, 0x2c, 0x04, 0x78, 0x97, 0xb8, 0x6e, 0xe9, 0x26, 0x73, 0x05, 0x4e, 0xd1, 0x24, 0x2e, 0x5d,
	0x68, 0x4a, 0x73, 0x68, 0xb9, 0x9e, 0x6a, 0x6b, 0x07, 0x84, 0x69, 0xf4, 0x2a, 0x5b, 0x68, 0x44,
	0x3d, 0xb5, 0x5c, 0xaf, 0xa1, 0x1d, 0x10, 0xaa, 0xd3, 0xbb, 0x30, 0xed, 0x9e, 0xf4, 0x54, 0xcb,
	0xda, 0x2f, 0xdd, 0xba, 0x28, 0x7e, 0x29, 0x69, 0xf7, 0xa4, 0xb7, 0x63, 0xed, 0x4b, 0xdf, 0x04,
	0x71, 0x1f, 0x23, 0xb9, 0x6a, 0x1f, 0x05, 0x3e, 0x7e, 0x9b, 0x72, 0xce, 0xb3, 0x35, 0x8f, 0x67,
	0x41, 0xa5, 0xb8, 0x1f, 0x4f, 0x4a, 0xdf, 0x04, 0xb1, 0x97, 0xe4, 0x5f, 0x89, 0xf2, 0xd7, 0x12,
	0xfc, 0xbd, 0x38, 0xff, 0x1c, 0x4c, 0x39, 0x03, 0xdc, 0x7c, 0x77, 0xa8, 0xf9, 0x52, 0xce, 0x80,
	0xed, 0xfa, 0x9e, 0xd6, 0x56, 0xb5, 0x4e, 0xc7, 0x41, 0xb3, 0xbc, 0x76, 0x47, 0xb8, 0x9b, 0x56,
	0xa0, 0xa7, 0xb5, 0x37, 0x18, 0x44, 0x7a, 0x1d, 0xa6, 0x98, 0x2b, 0xcb, 0xd1, 0x78, 0x87, 0x79,
	0x04, 0xa1, 0x0a, 0x43, 0x4a, 0x7b, 0x20, 0xb6, 0x06, 0x35, 0xdd, 0x71, 0x2c, 0x07, 0x6d, 0xa9,
	0x5b, 0xa6, 0x5b, 0xfa, 0x0a, 0xf5, 0xfd, 0x65, 0xb4, 0x4a, 0x0c, 0x33, 0x3a, 0x69, 0x38, 0xa4,
	0xab, 0x0c, 0xc9, 0x40, 0xb9, 0x4a, 0x52, 0xee, 0xeb, 0x57, 0x97, 0x9b, 0x94, 0xf1, 0x51, 0xea,
	0x47, 0x7f, 0x26, 0x0b, 0xf2, 0x87, 0x50, 0xc0, 0x7d, 0x46, 0x5e, 0xf6, 0x89, 0xeb, 0xd5, 0xdc,
	0x03, 0xe9, 0x4d, 0x98, 0x76, 0xd8, 0x57, 0x49, 0xa0, 0xa3, 0x14, 0xc2, 0xe9, 0xe2, 0x76, 0xf1,
	0xb1, 0xf2, 0x7f, 0x0a, 0x90, 0xe5, 0x36, 0xe8, 0xbb, 0xbf, 0xe7, 0x6c, 0xfa, 0x0e, 0x8b, 0x30,
	0x3c, 0x0d, 0x4d, 0x8e, 0x4c, 0x43, 0x18, 0x5d, 0xb8, 0x72, 0xb7, 0x18, 0x39, 0x1f, 0x31, 0x45,
	0x17, 0x18, 0xd1, 0x5c, 0x5a, 0x2c, 0x80, 0x62, 0x4e, 0x4b, 0x05, 0x01, 0x94, 0x5b, 0xe9, 0x23,
	0x3a, 0x55, 0x16, 0xbc, 0x3e, 0xa7, 0x84, 0x45, 0x37, 0xa2, 0x93, 0x4a, 0x29, 0xf4, 0xb7, 0xfc,
	0xaf, 0x02, 0xe4, 0xd0, 0xc4, 0x9d, 0x9e, 0xb6, 0xa5, 0x79, 0x1a, 0x86, 0x5b, 0xdb, 0x53, 0xf7,
	0x35, 0x97, 0x50, 0x97, 0xa3, 0x22, 0x52, 0x0a, 0xd8, 0xde, 0xa6, 0xe6, 0x12, 0x74, 0x39, 0xa4,
	0x38, 0x8a, 0x52, 0x30, 0x69, 0x70, 0x14, 0x52, 0x3c, 0x80, 0xc5, 0x4e, 0xfb, 0x65, 0xdb, 0xc4,
	0xf2, 0xb2, 0xab, 0x1b, 0x24, 0x42, 0x3c, 0x49, 0x89, 0xe7, 0x29, 0xba, 0xc1, 0xb0, 0x51, 0xc1,
	0x5a, 0x54, 0x70, 0x8a, 0x09, 0xd6, 0x42, 0xc1, 0x77, 0x41, 0xe4, 0xa1, 0x28, 0xa4, 0x62, 0x16,
	0x29, 0x32, 0xb8, 0x4f, 0x29, 0xff, 0x4c, 0x00, 0x09, 0xd3, 0xf8, 0xa0, 0xd9, 0x3e, 0x24, 0x9d,
	0xbe, 0x41, 0x1c, 0x3a, 0xbb, 0xaf, 0x81, 0xe4, 0x22, 0x40, 0xa5, 0x39, 0x50, 0xb5, 0xba, 0x5d,
	0x97, 0x78, 0xdc, 0x4c, 0x22, 0xc5, 0xb4, 0x10, 0xb1, 0x43, 0xe1, 0xd2, 0x3d, 0x98, 0x65, 0xd4,
	0x66, 0xbf, 0x17, 0xa4, 0x15, 0x56, 0xff, 0xcf, 0x50, 0x44, 0xbd, 0xdf, 0xf3, 0xb3, 0xca, 0x4d,
	0xc8, 0x22, 0x55, 0xdb, 0x72, 0x83, 0xc3, 0x40, 0xc6, 0xec, 0xf7, 0xca, 0xf8, 0x2d, 0xff, 0xfd,
	0x04, 0x33, 0x32, 0x71, 0x6d, 0xcb, 0x74, 0x89, 0xf4, 0x18, 0x40, 0xb3, 0x75, 0xdf, 0x41, 0x04,
	0xea, 0x20, 0x22, 0x2f, 0x3e, 0x36, 0x6c, 0x9d, 0xf9, 0xc5, 0xe6, 0xc2, 0xf9, 0xd9, 0xca, 0x2c,
	0xf7, 0xb1, 0x90, 0x5c, 0xc9, 0x6a, 0x3e, 0x85, 0xf4, 0x26, 0xa4, 0xb9, 0x8c, 0x89, 0x68, 0x2a,
	0x0e, 0xfc, 0x5e, 0xe1, 0x68, 0x24, 0xe4, 0xf9, 0x6e, 0x92, 0xee, 0x9a, 0x99, 0x44, 0xed, 0xa2,
	0x70, 0x34, 0x56, 0xcc, 0x34, 0xe2, 0x77, 0x34, 0x4f, 0x53, 0x8f, 0x35, 0x43, 0xef, 0xf0, 0x4a,
	0x97, 0x26, 0x6a, 0xb4, 0xe1, 0x1e, 0x02, 0xa5, 0x55, 0xc8, 0x06, 0x74, 0x74, 0x09, 0x72, 0x91,
	0x13, 0x8e, 0xef, 0x4c, 0x4a, 0xc6, 0x67, 0x92, 0x3e, 0x86, 0x82, 0x37, 0x50, 0x99, 0x35, 0x29,
	0x4f, 0x9a, 0xf2, 0x94, 0x02, 0x9e, 0xc4, 0x4a, 0x29, 0x39, 0x8f, 0x01, 0xf0, 0x43, 0xfe, 0x16,
	0x14, 0x23, 0xe6, 0xc3, 0x38, 0xf0, 0x0e, 0x64, 0x1c, 0xfe, 0xc9, 0x03, 0x41, 0x64, 0x78, 0x8e,
	0x50, 0x02, 0x12, 0xf9, 0x87, 0x90, 0x67, 0x13, 0x7d, 0x42, 0x73, 0x7b, 0x62, 0xcb, 0x31, 0x1f,
	0x8f, 0x6c, 0xb9, 0xe8, 0x1e, 0x9a, 0x88, 0xef, 0x21, 0x11, 0x26, 0x5f, 0xea, 0x1d, 0xbe, 0xc2,
	0xf8, 0x93, 0x16, 0x31, 0xc4, 0x63, 0x16, 0xa3, 0xf9, 0x28, 0xc5, 0x8b, 0x18, 0xe2, 0xa1, 0xf2,
	0x98, 0x8a, 0xe4, 0x47, 0x30, 0xf7, 0x84, 0x78, 0xdc, 0xd6, 0x61, 0x34, 0x7b, 0x03, 0x52, 0x0e,
	0x79, 0xe9, 0xf2, 0x19, 0xc4, 0x8a, 0x10, 0xa6, 0xa8, 0x42, 0xf1, 0x72, 0x17, 0x0a, 0x11, 0xa8,
	0x6b, 0xa3, 0xfe, 0x04, 0xc3, 0xa5, 0xda, 0xb6, 0x3a, 0x4c, 0xff, 0x29, 0x25, 0x4b, 0x21, 0x65,
	0xab, 0x43, 0xa4, 0x05, 0x48, 0xbf, 0x8c, 0x6e, 0xce, 0xa9, 0x97, 0x74, 0xfb, 0xac, 0x40, 0xee,
	0x65, 0x9f, 0xf4, 0x89, 0xea, 0xbb, 0x82, 0x70, 0x37, 0xaf, 0x00, 0x05, 0x51, 0xe9, 0xf2, 0x06,
	0xcc, 0x47, 0xd4, 0x0c, 0xad, 0xfd, 0x16, 0x4c, 0xa1, 0x29, 0x7d, 0x45, 0xe7, 0x86, 0x14, 0x75,
	0x6d, 0x85, 0x51, 0xc8, 0x2f, 0x20, 0xd7, 0xb8, 0xdf, 0x70, 0xac, 0x83, 0x6d, 0x6d, 0x9f, 0x18,
	0xd2, 0x0d, 0x48, 0x47, 0x8c, 0x9c, 0x55, 0xf8, 0x17, 0x6e, 0x17, 0xdb, 0xb1, 0x0e, 0x54, 0x5a,
	0xc4, 0x4f, 0x50, 0x54, 0x06, 0x01, 0x75, 0x2c, 0xe4, 0xe7, 0x61, 0xca, 0x40, 0x6e, 0xaa, 0x61,
	0x56, 0x61, 0x1f, 0xf2, 0x5f, 0x0b, 0xfe, 0x22, 0x36, 0xaf, 0x7f, 0x11, 0xdf, 0xf4, 0x87, 0x4c,
	0x45, 0x7d, 0x39, 0x32, 0x13, 0xae, 0x45, 0xd2, 0x86, 0x53, 0x43, 0x36, 0x7c, 0x04, 0x73, 0xcd,
	0xab, 0x2d, 0x75, 0x33, 0xba, 0xd4, 0xab, 0xfe, 0x52, 0x37, 0x2f, 0xb5, 0xd4, 0xb8, 0x64, 0xcd,
	0xab, 0x2e, 0x59, 0x33, 0xb9, 0x64, 0xe2, 0xb6, 0xde, 0xdd, 0x22, 0x06, 0x09, 0x34, 0x1e, 0x4e,
	0x84, 0xc2, 0x17, 0x48, 0x84, 0xf2, 0x13, 0x98, 0x4b, 0x4a, 0x46, 0xdd, 0xde, 0x4b, 0x26, 0xf1,
	0x1b, 0xc1, 0xde, 0x8d, 0xd1, 0x86, 0xd9, 0xfc, 0x7b, 0xb4, 0x59, 0xe3, 0x23, 0xaf, 0x37, 0x8a,
	0xca, 0xcf, 0x60, 0x7e, 0x48, 0x38, 0xaa, 0xf9, 0xfe, 0x50, 0x8c, 0x59, 0x1c, 0xd2, 0x73, 0x28,
	0xd2, 0xfc, 0x4d, 0x0a, 0x80, 0x85, 0x33, 0x4f, 0xf3, 0x68, 0x5a, 0xe8, 0x3a, 0x5a, 0x8f, 0xb8,
	0xaa, 0x75, 0xc4, 0x5d, 0x34, 0xc3, 0x00, 0x3b, 0x47, 0x98, 0x5f, 0xfa, 0x26, 0xed, 0xc9, 0xa8,
	0x21, 0x11, 0xdb, 0xb1, 0x33, 0x1c, 0xf1, 0xd8, 0xa7, 0x5d, 0x85, 0xb9, 0x04, 0x6d, 0xc7, 0xb1,
	0x6c, 0x9e, 0x4f, 0x67, 0x63, 0xd4, 0x5b, 0x8e, 0x65, 0x23, 0x7d, 0xd0, 0x0c, 0x8a, 0x48, 0x67,
	0x39, 0x75, 0x36, 0x40, 0x05, 0xf2, 0xd7, 0x61, 0x61, 0x88, 0x9e, 0x8e, 0xc0, 0xf2, 0xeb, 0x5c,
	0x82, 0xc3, 0x1f, 0x23, 0xe8, 0x50, 0x45, 0xc6, 0x48, 0xb3, 0x31, 0x02, 0x54, 0x74, 0x8c, 0x21,
	0x7a, 0x3a, 0xc6, 0x34, 0x1b, 0x23, 0xc1, 0x41, 0xc7, 0x58, 0x82, 0xcc, 0xfe, 0xa9, 0xc7, 0x04,
	0x67, 0x58, 0xf1, 0x43, 0xbf, 0x77, 0x8e, 0xb0, 0x1a, 0xf0, 0x4d, 0x12, 0x90, 0x64, 0x59, 0x35,
	0xc0, 0xe1, 0x9b, 0x9c, 0xf2, 0x6b, 0x20, 0x85, 0x93, 0x0b, 0x68, 0x81, 0xd2, 0x8a, 0x01, 0x26,
	0x42, 0x1d, 0xaa, 0x19, 0x50, 0xe7, 0x18, 0x75, 0x80, 0xf1, 0xa9, 0x45, 0x98, 0xf4, 0x5c, 0x8b,
	0x9e, 0x97, 0x53, 0x0a, 0xfe, 0x44, 0x88, 0x6d, 0xbb, 0xf4, 0x74, 0x9c, 0x52, 0xf0, 0xa7, 0x54,
	0x02, 0xa6, 0xb4, 0xed, 0xd2, 0x13, 0xb0, 0x3f, 0x07, 0xdb, 0x95, 0xff, 0x79, 0x9a, 0xba, 0x8b,
	0xc2, 0xdd, 0xe5, 0x35, 0xc8, 0x73, 0xbb, 0x78, 0x96, 0xa7, 0x19, 0xdc, 0x63, 0x72, 0x0c, 0xd6,
	0x42, 0x50, 0xdc, 0xa3, 0x26, 0x2e, 0xe3, 0x51, 0x93, 0x57, 0xf2, 0xa8, 0xd4, 0x15, 0x3d, 0x6a,
	0xea, 0xca, 0x1e, 0x95, 0xbe, 0xb2, 0x47, 0x4d, 0x5f, 0xd9, 0xa3, 0x32, 0x97, 0xf3, 0xa8, 0xec,
	0xe7, 0x7b, 0x14, 0x5c, 0xc1, 0xa3, 0x72, 0x57, 0xf2, 0xa8, 0xfc, 0x18, 0x8f, 0x9a, 0x87, 0x29,
	0x9c, 0x83, 0xef, 0x41, 0xec, 0x43, 0x5a, 0x84, 0x69, 0xd3, 0x52, 0xf7, 0xfb, 0x5d, 0xdf, 0x87,
	0xd2, 0xa6, 0xb5, 0xd9, 0xef, 0xba, 0x98, 0x62, 0x69, 0x3a, 0x60, 0xdd, 0x93, 0x94, 0xc2, 0xbf,
	0xd0, 0x0d, 0x1d, 0x97, 0xf5, 0x4b, 0x52, 0xac, 0x45, 0x71, 0x0b, 0xa0, 0xed, 0xb4, 0x55, 0x4e,
	0x3d, 0xcb, 0x12, 0x66, 0xdb, 0x69, 0x57, 0x18, 0x43, 0xe8, 0x59, 0x0f, 0xef, 0x97, 0xa4, 0xa8,
	0x67, 0x3d, 0xbc, 0x8f, 0xbc, 0x1c, 0xb9, 0xb6, 0xfe, 0x01, 0xed, 0x84, 0xa4, 0x14, 0x4e, 0xbe,
	0xb6, 0xfe, 0x41, 0x04, 0xbd, 0xfe, 0xe0, 0x01, 0xed, 0x7e, 0x04, 0xe8, 0xf5, 0x07, 0x0f, 0x22,
	0xe8, 0x07, 0x6b, 0x6b, 0xb4, 0xd7, 0x11, 0xa0, 0x1f, 0xac, 0xad, 0x61, 0x52, 0xf5, 0x85, 0xbf,
	0xb7, 0x7e, 0x9f, 0x36, 0x36, 0x52, 0x0a, 0xe7, 0x40, 0x48, 0x94, 0xe0, 0xc1, 0xda, 0x87, 0xb4,
	0x81, 0x11, 0x12, 0x3c, 0x58, 0xfb, 0x10, 0x8b, 0xb0, 0x60, 0xe3, 0xa8, 0x3d, 0x6d, 0x40, 0xdb,
	0x14, 0x91, 0x9d, 0x53, 0xd3, 0x06, 0xd2, 0x43, 0x28, 0xf0, 0x6e, 0x0b, 0x4d, 0x02, 0x2e, 0xed,
	0x52, 0x60, 0xae, 0x8f, 0xf6, 0x5c, 0x10, 0xa1, 0xe4, 0xed, 0xc8, 0x97, 0xbf, 0x9f, 0x97, 0x47,
	0xee, 0xe7, 0x9b, 0xf1, 0xfd, 0x7c, 0x08, 0x79, 0x2c, 0xfa, 0x78, 0x05, 0xee, 0x4a, 0x6f, 0x43,
	0x06, 0xeb, 0x5e, 0x3a, 0x9c, 0x90, 0x68, 0x1f, 0xf1, 0x1c, 0xa1, 0x4c, 0x7b, 0x83, 0x80, 0xd8,
	0xf1, 0x89, 0x27, 0x92, 0xbd, 0x26, 0x9f, 0xd8, 0x61, 0x3f, 0xe4, 0xdf, 0x4c, 0x42, 0xa1, 0x6c,
	0xf7, 0x9f, 0xfb, 0x95, 0x87, 0x2b, 0xbd, 0x05, 0x99, 0xb6, 0xdd, 0x6f, 0xef, 0xe3, 0x39, 0x51,
	0x88, 0x35, 0x34, 0xcb, 0x08, 0xae, 0x76, 0x94, 0xe9, 0x36, 0xfb, 0x21, 0xbd, 0x0e, 0x45, 0x3c,
	0xad, 0x78, 0x03, 0x95, 0xf5, 0xea, 0xd8, 0x78, 0xd3, 0x4a, 0xde, 0xec, 0xf7, 0x5a, 0x83, 0x06,
	0x83, 0xf9, 0x54, 0x4e, 0x48, 0x35, 0x19, 0x50, 0x29, 0x01, 0xd5, 0xbb, 0x30, 0xef, 0x0c, 0xd4,
	0x97, 0xdd, 0xbe, 0x61, 0xd0, 0xbd, 0xe7, 0xfb, 0x17, 0x0f, 0x24, 0xce, 0xe0, 0x39, 0xa2, 0x70,
	0xeb, 0x71, 0x3f, 0x7b, 0x0b, 0x66, 0xd1, 0x26, 0xa4, 0xa7, 0x06, 0x3c, 0xae, 0x7f, 0x8c, 0xf3,
	0x06, 0x4d, 0xd2, 0x7b, 0xcc, 0xe9, 0x69, 0x03, 0xca, 0x1b, 0xa8, 0x5d, 0x87, 0x10, 0x95, 0x97,
	0x02, 0x2e, 0x0f, 0x1f, 0x45, 0x6f, 0xf0, 0xd8, 0x21, 0x7e, 0xa5, 0x40, 0x85, 0x3a, 0x43, 0x42,
	0x59, 0xdc, 0x28, 0x3a, 0x71, 0xa1, 0xaf, 0x43, 0x11, 0x15, 0x46, 0xc3, 0xbd, 0xa7, 0xda, 0x47,
	0x9e, 0xcb, 0xa3, 0x45, 0xde, 0x19, 0x50, 0x6b, 0xbe, 0xd7, 0x38, 0xf2, 0x62, 0x54, 0x6b, 0x8c,
	0x2a, 0x1b, 0xa3, 0x5a, 0x4b, 0x52, 0xad, 0x33, 0x2a, 0x88, 0x51, 0xad, 0x23, 0x95, 0xfc, 0x09,
	0xe4, 0xca, 0x76, 0x3f, 0x70, 0x8a, 0x6f, 0xc0, 0x4c, 0xdb, 0xee, 0xab, 0x61, 0x1d, 0x99, 0xa8,
	0xd2, 0x62, 0xcb, 0xaa, 0x14, 0xda, 0xd1, 0x4f, 0xf9, 0x8f, 0x04, 0xc8, 0x04, 0x92, 0x3e, 0x82,
	0x22, 0x3d, 0x77, 0xf8, 0xed, 0x06, 0x37, 0xe8, 0x70, 0x50, 0x41, 0x51, 0x57, 0x7c, 0xfa, 0x8a,
	0x92, 0xef, 0x44, 0x5d, 0xf3, 0x03, 0x40, 0xc9, 0x11, 0xd6, 0x89, 0x68, 0xe9, 0x1b, 0xd1, 0xf7,
	0xe9, 0x2b, 0x4a, 0xae, 0x1d, 0x7e, 0x6e, 0xa6, 0x21, 0xb5, 0xad, 0x77, 0x5d, 0x79, 0x97, 0x36,
	0x67, 0xd8, 0x41, 0xe5, 0x1a, 0x8b, 0xc6, 0x0d, 0x5a, 0x8e, 0x86, 0x62, 0xd9, 0x71, 0x2f, 0x51,
	0x31, 0xce, 0x05, 0x1b, 0x23, 0x24, 0x0c, 0xcb, 0xc5, 0xff, 0x16, 0xe8, 0x81, 0x91, 0x1f, 0x4d,
	0xae, 0xf5, 0xc8, 0xfd, 0x1a, 0xa4, 0x5c, 0x9b, 0xb4, 0xb9, 0xb1, 0x12, 0xdd, 0x27, 0x8a, 0x8a,
	0x9c, 0xca, 0x27, 0x2f, 0x3e, 0x95, 0xf3, 0xce, 0x9d, 0xcb, 0x0f, 0x1d, 0xf1, 0xce, 0x9d, 0xcb,
	0x3a, 0x77, 0xd1, 0xb3, 0xfb, 0xd4, 0x85, 0x67, 0x77, 0xb9, 0x42, 0x8b, 0xe4, 0xc8, 0xa4, 0x59,
	0xad, 0x9d, 0x2c, 0x62, 0xe7, 0xe3, 0xa6, 0x1b, 0xaa, 0x60, 0x9f, 0xb2, 0x8a, 0x84, 0xf5, 0xb6,
	0x25, 0x89, 0xdf, 0x90, 0xb0, 0x1e, 0x09, 0xbb, 0x11, 0x11, 0x61, 0xf2, 0x88, 0x9c, 0x52, 0x13,
	0xe4, 0x15, 0xfc, 0x89, 0x29, 0x4b, 0x37, 0x3b, 0xba, 0xc3, 0xcf, 0x94, 0xec, 0x43, 0xfe, 0x8d,
	0x00, 0x99, 0x8a, 0xa9, 0xb7, 0xab, 0x66, 0xd7, 0x92, 0x5e, 0xc0, 0xbc, 0xb1, 0xee, 0x92, 0x83,
	0x1e, 0x31, 0xbd, 0xe8, 0xd5, 0x92, 0x10, 0xb6, 0x66, 0xb7, 0xd7, 0x9b, 0x0c, 0x3f, 0xbe, 0x51,
	0x28, 0x05, 0x32, 0xc2, 0xbb, 0xa0, 0x44, 0x87, 0x74, 0x62, 0xa8, 0x43, 0x2a, 0x43, 0x81, 0x98,
	0x6d, 0xcd, 0x56, 0xd9, 0x25, 0x8b, 0x7f, 0xf0, 0xcb, 0x51, 0xe0, 0x9e, 0xa1, 0x99, 0xd5, 0x8e,
	0xfc, 0x6b, 0x01, 0x66, 0x50, 0x57, 0xda, 0xf8, 0xfe, 0x5c, 0x95, 0x27, 0x7f, 0x47, 0x95, 0x57,
	0x61, 0xce, 0xd4, 0x3c, 0xfd, 0x98, 0xa8, 0xe1, 0x00, 0x7a, 0x87, 0x97, 0x73, 0xb3, 0x0c, 0xb5,
	0xed, 0x63, 0xaa, 0x1d, 0xf9, 0xef, 0x52, 0x00, 0xd5, 0x6e, 0x60, 0xcb, 0x32, 0x64, 0x51, 0xbe,
	0x1a, 0xac, 0x4c, 0xd1, 0xcf, 0x14, 0x8c, 0xa8, 0x75, 0x6a, 0x93, 0xd8, 0xb5, 0x4f, 0x4f, 0x33,
	0x3b, 0x9a, 0x67, 0x39, 0xa7, 0x4a, 0x86, 0x70, 0xbc, 0xf4, 0x0c, 0x66, 0x0d, 0x7e, 0xcb, 0x77,
	0xb5, 0x7e, 0x27, 0x4e, 0xaa, 0x68, 0x50, 0x6c, 0xd0, 0xf2, 0xec, 0xfc, 0x2e, 0xf7, 0x87, 0x49,
	0xe1, 0x63, 0x6f, 0xfd, 0x7e, 0x2c, 0xf0, 0x89, 0xeb, 0x66, 0xd7, 0x8a, 0xef, 0x1a, 0xdf, 0x36,
	0x9b, 0xcd, 0xf3, 0xb3, 0x95, 0x9d, 0xf1, 0x37, 0x90, 0x81, 0x11, 0x57, 0x03, 0x0b, 0x3e, 0x1a,
	0xbe, 0x84, 0xac, 0xd4, 0xab, 0x65, 0x7e, 0x13, 0xd9, 0xac, 0x3c, 0xf9, 0xc1, 0xd3, 0x57, 0x98,
	0xdd, 0xa8, 0xf1, 0x7f, 0x2d, 0xc0, 0x6c, 0x9b, 0x79, 0x89, 0x1a, 0x2a, 0x33, 0xc5, 0xef, 0x54,
	0x02, 0x65, 0x22, 0x8e, 0xb4, 0xb9, 0x77, 0x7e, 0xb6, 0xa2, 0x5c, 0x9f, 0x4e, 0xe5, 0xed, 0x8d,
	0x66, 0xb3, 0x5a, 0x46, 0xb5, 0x66, 0xb8, 0x26, 0xc1, 0xf4, 0x45, 0x28, 0x06, 0x42, 0xa8, 0x66,
	0xf2, 0x6f, 0x05, 0xc8, 0x57, 0xbb, 0xdc, 0x98, 0x38, 0x81, 0x77, 0x21, 0x63, 0x5b, 0x8e, 0x17,
	0x76, 0x88, 0xc7, 0xb8, 0xca, 0x34, 0x52, 0xd5, 0xfb, 0xbd, 0xab, 0x7a, 0xab, 0xf4, 0x6d, 0x98,
	0xd5, 0x5d, 0xd5, 0xb2, 0xf6, 0xa3, 0x77, 0x91, 0x93, 0x17, 0xdc, 0x45, 0xce, 0xe8, 0xee, 0x8e,
	0xb5, 0x1f, 0x5e, 0x47, 0xca, 0xff, 0x2e, 0x40, 0xd1, 0xd7, 0xb9, 0x51, 0xa6, 0x5a, 0x8f, 0x51,
	0x42, 0x18, 0xa7, 0xc4, 0x5f, 0x0a, 0x30, 0xdf, 0x23, 0xbd, 0x7d, 0xe2, 0x24, 0x7c, 0x71, 0x22,
	0xdc, 0xbd, 0xbf, 0xd7, 0xbb, 0xec, 0x59, 0xa6, 0x4d, 0xc4, 0x9f, 0x65, 0x17, 0x66, 0xab, 0xdd,
	0x56, 0xdf, 0x34, 0x89, 0xb1, 0x37, 0xa0, 0x57, 0xbd, 0x5d, 0x4b, 0x7a, 0x07, 0xb2, 0x86, 0xd5,
	0xd6, 0x0c, 0xd5, 0x23, 0x76, 0x90, 0x41, 0x59, 0xa2, 0xaa, 0x36, 0x78, 0x48, 0x53, 0x32, 0x94,
	0xa4, 0x45, 0x6c, 0x7a, 0x8d, 0x48, 0x7a, 0x96, 0x47, 0x28, 0xfd, 0xc4, 0x18, 0xfa, 0x2c, 0xa3,
	0x69, 0x11, 0x5b, 0xfe, 0xa5, 0x00, 0x33, 0xfe, 0xa8, 0x4f, 0x94, 0x0a, 0x1d, 0xf3, 0x2e, 0xa4,
	0x5d, 0xab, 0xef, 0xb4, 0xc9, 0xd8, 0x01, 0x39, 0x5e, 0x5a, 0x87, 0x5c, 0x87, 0xb8, 0x9e, 0x8e,
	0x06, 0xb7, 0xcc, 0xb1, 0xe3, 0x45, 0x89, 0x30, 0x5f, 0xf4, 0xbc, 0xbe, 0xdf, 0x6e, 0xeb, 0x79,
	0x7d, 0x7a, 0x68, 0xf6, 0x0c, 0xde, 0x29, 0xc5, 0x9f, 0xf2, 0x3f, 0x4c, 0xc1, 0xa2, 0xaf, 0x55,
	0xc3, 0xb1, 0x6c, 0x47, 0x27, 0x9e, 0xe6, 0x9c, 0xd6, 0x6c, 0xc3, 0x95, 0xaa, 0x90, 0x77, 0xfb,
	0xfb, 0x68, 0x7f, 0x8f, 0xa8, 0xfa, 0x58, 0xa3, 0x8c, 0x71, 0xe3, 0x5c, 0xc0, 0x5b, 0xb5, 0xa5,
	0x0a, 0x80, 0x75, 0x4c, 0x1c, 0x43, 0x3b, 0x45, 0x41, 0xcc, 0x15, 0x2e, 0x2b, 0x28, 0xcb, 0x39,
	0xab, 0xb6, 0xf4, 0x08, 0xa6, 0x7b, 0xb6, 0xe1, 0xaa, 0x7a, 0x97, 0x37, 0xd4, 0xfd, 0x4a, 0x1b,
	0xf5, 0x6d, 0x69, 0x07, 0x63, 0x24, 0xa4, 0x91, 0xa9, 0xda, 0x95, 0xb6, 0xa1, 0xe8, 0xd1, 0x99,
	0xaa, 0x68, 0x26, 0xd4, 0x24, 0x75, 0xa5, 0x29, 0xe5, 0x19, 0xf7, 0x16, 0x71, 0xbd, 0xaa, 0x2d,
	0x7d, 0x0b, 0x32, 0x54, 0x19, 0x4f, 0x3b, 0xe0, 0x61, 0xe8, 0x72, 0xda, 0xd0, 0x29, 0xb4, 0xb4,
	0x03, 0x69, 0x03, 0xb2, 0x6c, 0x75, 0xd5, 0x83, 0x13, 0xde, 0x98, 0xf7, 0x25, 0x5c, 0xac, 0x47,
	0x86, 0xb1, 0x3d, 0x39, 0x91, 0xde, 0x07, 0xd0, 0xcd, 0x03, 0x24, 0x55, 0xf7, 0x4f, 0x68, 0xdd,
	0x3d, 0x2e, 0xaa, 0x64, 0x39, 0xdd, 0xe6, 0x89, 0xb4, 0x06, 0x59, 0x12, 0xf0, 0x64, 0x2e, 0xe0,
	0xc9, 0x10, 0x9f, 0xe5, 0x3d, 0xc8, 0x1e, 0x9c, 0xa8, 0x98, 0xee, 0x3b, 0x1a, 0x2d, 0xc8, 0xd3,
	0xe3, 0x26, 0x77, 0x70, 0x52, 0xd3, 0xda, 0x5b, 0x1a, 0x46, 0x3b, 0x4c, 0x73, 0xb4, 0xd1, 0x8c,
	0xb5, 0x79, 0x76, 0x1c, 0x83, 0xa1, 0x77, 0x69, 0xf7, 0x79, 0x05, 0x72, 0xbe, 0x8b, 0xf4, 0xb4,
	0x36, 0x3d, 0xd3, 0xa7, 0x15, 0xdf, 0x6b, 0x6a, 0x5a, 0x5b, 0x5a, 0x80, 0xb4, 0xdd, 0xa5, 0xb8,
	0x3c, 0xc5, 0x4d, 0xd9, 0xdd, 0x9a, 0xd6, 0x96, 0x7f, 0x34, 0x85, 0x71, 0x96, 0x79, 0x30, 0xdd,
	0x54, 0x0f, 0x01, 0x58, 0xd9, 0x11, 0x49, 0xd3, 0x8b, 0x7e, 0x9a, 0x66, 0x74, 0x15, 0xc4, 0xd3,
	0xb7, 0x26, 0x59, 0xe2, 0xff, 0x94, 0x7e, 0x25, 0x00, 0x1c, 0x0f, 0xd8, 0x7b, 0x90, 0xae, 0xc5,
	0xb7, 0x58, 0x82, 0x31, 0x08, 0x17, 0x9b, 0xea, 0xf9, 0xd9, 0xca, 0xf7, 0x2e, 0xc8, 0x2d, 0xa1,
	0x42, 0xab, 0xa1, 0x36, 0x23, 0xd2, 0x4b, 0x6b, 0xb7, 0x5e, 0xaf, 0x6c, 0xab, 0x95, 0x7a, 0x79,
	0xa3, 0xc1, 0x02, 0xd7, 0xde, 0x8b, 0xed, 0x8d, 0x3a, 0x26, 0x99, 0xec, 0x71, 0x10, 0x9c, 0xfe,
	0x44, 0x80, 0xcc, 0x81, 0xc3, 0x32, 0x0b, 0xcf, 0xea, 0x0b, 0x71, 0xcd, 0x78, 0x48, 0xd9, 0xfc,
	0xf4, 0xfc, 0x6c, 0xe5, 0xbb, 0x5f, 0x8a, 0x5e, 0x4f, 0x94, 0x0a, 0x6a, 0x35, 0x7d, 0xe0, 0x10,
	0xaa, 0xd3, 0x6f, 0x05, 0x28, 0xda, 0x78, 0xf0, 0x64, 0x5b, 0x32, 0x2c, 0x0d, 0x6e, 0xc5, 0x35,
	0x4b, 0x84, 0x95, 0xcd, 0xef, 0x9f, 0x9f, 0xad, 0x74, 0xbf, 0x14, 0x0d, 0x1b, 0xca, 0x4e, 0x43,
	0xa9, 0x56, 0x5a, 0x1b, 0xca, 0x77, 0xd5, 0x5a, 0x63, 0xbb, 0x89, 0xea, 0xe6, 0x51, 0x45, 0x1c,
	0x97, 0xea, 0xfc, 0x18, 0x8a, 0xc7, 0x4e, 0x2c, 0x2d, 0x4d, 0x85, 0x95, 0xd7, 0x9e, 0x73, 0x41,
	0xe5, 0x95, 0x3f, 0x8e, 0x62, 0xf3, 0xbe, 0x8f, 0xd1, 0x54, 0xef, 0x42, 0xb6, 0xda, 0x2d, 0x37,
	0x76, 0xe9, 0x10, 0x23, 0xeb, 0x3b, 0xe1, 0x0b, 0xd6, 0x77, 0x4b, 0x90, 0xd1, 0x0c, 0xc3, 0x3a,
	0x51, 0x9d, 0x01, 0x7f, 0x42, 0x37, 0x4d, 0xbf, 0x95, 0x81, 0xfc, 0x29, 0xa6, 0xea, 0x0d, 0xdb,
	0x56, 0x48, 0x47, 0x77, 0xc6, 0x8f, 0xfc, 0x05, 0x2b, 0x4b, 0xf9, 0x7f, 0xb3, 0x50, 0x88, 0xe5,
	0xda, 0x4b, 0x5f, 0xe6, 0x7f, 0x32, 0xfa, 0x32, 0xff, 0x32, 0x55, 0xe8, 0xd0, 0x95, 0xfe, 0x43,
	0x7e, 0x0c, 0x62, 0x97, 0xf9, 0xf9, 0xc0, 0xb1, 0x92, 0x85, 0x76, 0x58, 0xd3, 0xb0, 0xa3, 0x52,
	0xf2, 0x4d, 0x5a, 0xea, 0xf3, 0xdf, 0xa4, 0xfd, 0x58, 0x80, 0xbc, 0xde, 0x1d, 0x2a, 0x2d, 0x63,
	0x05, 0x3e, 0xdd, 0x61, 0xdb, 0xe7, 0x67, 0x2b, 0x4f, 0xaf, 0x52, 0x9f, 0x8c, 0x29, 0x50, 0xb0,
	0xb0, 0x44, 0x0f, 0x05, 0x3d, 0x3c, 0x61, 0xfc, 0x54, 0x80, 0xa2, 0xde, 0x0d, 0x8a, 0x79, 0x54,
	0x23, 0x1d, 0xed, 0x2c, 0x44, 0x0b, 0xca, 0xcd, 0xfa, 0xf9, 0xd9, 0xca, 0x27, 0xd7, 0xa0, 0x08,
	0xaf, 0x94, 0x70, 0xb3, 0xe8, 0xd1, 0x82, 0xf5, 0x4f, 0x05, 0x98, 0x0d, 0x95, 0xb1, 0xb9, 0x59,
	0xa6, 0xa3, 0x2f, 0x6b, 0xe2, 0xc5, 0xe2, 0xe6, 0xf3, 0xf3, 0xb3, 0x95, 0xda, 0xb5, 0x69, 0xa4,
	0x36, 0xa8, 0x7d, 0x8a, 0xbe, 0x52, 0x8d, 0x98, 0x8d, 0x78, 0x26, 0xa7, 0x3a, 0x65, 0xe2, 0x36,
	0x0a, 0x23, 0xc8, 0xb5, 0xd9, 0x88, 0x05, 0x1b, 0x6e, 0xa3, 0x48, 0xb2, 0xf9, 0x21, 0xe4, 0xf4,
	0xae, 0xda, 0xb6, 0xfb, 0x4c, 0x91, 0x6c, 0xb4, 0xf3, 0x10, 0xc4, 0x84, 0xcd, 0x67, 0xe7, 0x67,
	0x2b, 0x4f, 0xae, 0x41, 0x8b, 0x72, 0x63, 0x97, 0x26, 0x06, 0xbd, 0x5b, 0xb6, 0xfb, 0xd1, 0x35,
	0xd2, 0x6c, 0x5b, 0x75, 0x30, 0x10, 0x30, 0x35, 0x20, 0xbe, 0x46, 0xd1, 0x28, 0x71, 0x6d, 0x6b,
	0xb4, 0xd1, 0x68, 0xa8, 0x4a, 0x65, 0xab, 0xaa, 0xf0, 0x35, 0x8a, 0x85, 0xa2, 0x51, 0xcf, 0x9e,
	0x72, 0x5f, 0xd2, 0xb3, 0xa7, 0xfc, 0x75, 0x3d, 0x7b, 0xda, 0xcc, 0xc2, 0xb4, 0xde, 0x65, 0x21,
	0x7d, 0x0b, 0xe6, 0x02, 0x53, 0x5c, 0xa2, 0x21, 0x16, 0x33, 0x5b, 0xd8, 0x10, 0xfb, 0xab, 0x09,
	0x90, 0x98, 0xef, 0xfa, 0x0d, 0x1f, 0x6a, 0x9d, 0x37, 0x60, 0x86, 0x6f, 0x2a, 0x83, 0x9e, 0x08,
	0xf9, 0x79, 0xaa, 0xa0, 0x14, 0x18, 0x78, 0x1b, 0xa1, 0xd5, 0x4e, 0xfc, 0x09, 0xd2, 0x44, 0xfc,
	0x0d, 0xe7, 0x2d, 0x00, 0x3f, 0x4a, 0x74, 0x06, 0xbc, 0xc6, 0xcf, 0x32, 0x48, 0xb5, 0x33, 0x40,
	0xb4, 0xd9, 0xef, 0xb1, 0x33, 0x9b, 0xcb, 0x0b, 0xfe, 0xac, 0xd9, 0xef, 0xd1, 0xa3, 0x9a, 0x2b,
	0xdd, 0x86, 0xdc, 0xe1, 0x89, 0x1a, 0x1c, 0x47, 0xa7, 0x18, 0xfe, 0xf0, 0xa4, 0xc1, 0x8f, 0x9e,
	0x0b, 0x90, 0xf6, 0x06, 0xaa, 0x6d, 0xfb, 0x6d, 0xdf, 0x29, 0x6f, 0xd0, 0xb0, 0xe9, 0x4d, 0x86,
	0x37, 0x50, 0xfd, 0x1e, 0x3c, 0x6b, 0xf3, 0x66, 0xbd, 0xc1, 0x26, 0x03, 0x20, 0x97, 0xc3, 0xb8,
	0x58, 0x67, 0x77, 0xca, 0xf1, 0xb9, 0x9c, 0x90, 0x8b, 0xb5, 0x73, 0xb3, 0x8e, 0xcf, 0x25, 0xff,
	0x42, 0x80, 0x02, 0x06, 0x40, 0xda, 0xd3, 0xa1, 0xf6, 0xf9, 0x14, 0x16, 0xe3, 0x0d, 0xa0, 0x64,
	0x22, 0xbd, 0x6c, 0x0f, 0x68, 0x3e, 0xda, 0x03, 0x0a, 0x92, 0xca, 0x1d, 0xc8, 0xeb, 0xa6, 0xad,
	0xd2, 0xda, 0x05, 0x8d, 0xc7, 0x2c, 0x0b, 0xba, 0x69, 0x63, 0xa9, 0x52, 0xed, 0x0c, 0xe4, 0x3f,
	0x14, 0xa0, 0xd0, 0xec, 0x69, 0x8e, 0x17, 0x04, 0xe6, 0xaf, 0xc3, 0x72, 0xc0, 0x83, 0x65, 0x30,
	0x6f, 0x69, 0x0d, 0xe8, 0xa3, 0x48, 0xbe, 0x7a, 0x0b, 0x5c, 0x42, 0x4d, 0x6b, 0xb3, 0xee, 0xd6,
	0xe0, 0xa9, 0xe5, 0x7a, 0xd2, 0x07, 0xb0, 0x34, 0x9a, 0xd5, 0x24, 0x1e, 0x1f, 0x7b, 0x7e, 0x88,
	0xb3, 0x4e, 0x3c, 0xf9, 0x67, 0x02, 0xcc, 0x94, 0xe3, 0x7d, 0x06, 0xe9, 0xa3, 0x88, 0x1e, 0xa6,
	0xe6, 0xb1, 0x05, 0x56, 0x79, 0x37, 0x82, 0xeb, 0x71, 0x83, 0x4b, 0xab, 0x6b, 0x1e, 0x5d, 0x6e,
	0x2e, 0x43, 0xfa, 0x18, 0x66, 0xd8, 0x59, 0xd8, 0x3d, 0xd4, 0x6d, 0xbf, 0xc8, 0x8d, 0x38, 0x71,
	0x6c, 0x11, 0x94, 0x62, 0x48, 0x8b, 0xdf, 0xf2, 0xff, 0x08, 0x20, 0x22, 0x45, 0xcc, 0x93, 0x69,
	0x8b, 0x4f, 0x6f, 0x27, 0xfd, 0x38, 0x87, 0x40, 0xdf, 0x8b, 0xef, 0x82, 0x18, 0x36, 0xa7, 0x22,
	0x25, 0x41, 0x41, 0x29, 0x72, 0x7f, 0xf5, 0x9f, 0x8e, 0x3c, 0x82, 0x19, 0x17, 0xad, 0x1e, 0x49,
	0xc2, 0xac, 0xd6, 0xe5, 0x0a, 0xc6, 0x96, 0xe4, 0xe9, 0x2b, 0x4a, 0xc1, 0x8d, 0xad, 0x51, 0x79,
	0x54, 0x83, 0x28, 0x15, 0x2d, 0x96, 0x13, 0xd6, 0x1c, 0xd5, 0xc8, 0x29, 0x42, 0xde, 0x6f, 0xe5,
	0xd1, 0x69, 0x3f, 0x80, 0x59, 0x8c, 0xb5, 0xdd, 0xd8, 0xb4, 0xef, 0x40, 0x9e, 0xf6, 0xf0, 0xe3,
	0xb3, 0x86, 0xb6, 0xdd, 0xe7, 0x93, 0x96, 0x7f, 0x22, 0xc0, 0x3c, 0x4f, 0x13, 0x71, 0xd6, 0xaf,
	0xc2, 0x0c, 0x2e, 0x60, 0x4f, 0x63, 0xeb, 0x87, 0xfe, 0x87, 0x91, 0xa4, 0xa0, 0xa0, 0x4f, 0xd6,
	0x34, 0x5c, 0x34, 0xdc, 0xbf, 0x11, 0x32, 0xcf, 0x34, 0xb8, 0x9b, 0x46, 0xc8, 0x5a, 0xa6, 0x81,
	0x64, 0x32, 0x14, 0x78, 0x1e, 0x74, 0x4e, 0x22, 0x81, 0x20, 0xc7, 0x80, 0xca, 0x09, 0x3a, 0xf3,
	0xdb, 0x50, 0x0c, 0x62, 0x73, 0x97, 0xea, 0xb0, 0x04, 0x99, 0x84, 0xea, 0xd3, 0x06, 0xd7, 0xfb,
	0x17, 0x29, 0x98, 0x09, 0x83, 0xd9, 0xd5, 0x5e, 0x71, 0x5e, 0x67, 0xe1, 0xf7, 0x36, 0x64, 0x3f,
	0xef, 0x29, 0x67, 0x26, 0x78, 0xc9, 0x79, 0x93, 0x12, 0xc7, 0x1e, 0x72, 0x66, 0x82, 0xf7, 0x48,
	0xdf, 0x80, 0x5c, 0xb4, 0x9c, 0x9a, 0x8a, 0x3e, 0x80, 0x1b, 0x8e, 0xcd, 0x58, 0x8f, 0xf5, 0xc3,
	0x12, 0xe8, 0x41, 0xb4, 0xf1, 0x99, 0xe6, 0xd3, 0x09, 0x36, 0x4b, 0x82, 0x31, 0xec, 0x55, 0xde,
	0xa7, 0x57, 0x82, 0xd1, 0x7a, 0x69, 0x31, 0xb8, 0xde, 0x89, 0xfb, 0x03, 0x1e, 0xa8, 0xda, 0x3c,
	0x97, 0x3f, 0x82, 0xdc, 0x70, 0x51, 0xb3, 0xcc, 0x18, 0x47, 0xf9, 0x12, 0xea, 0xea, 0x85, 0xa5,
	0xc8, 0xc7, 0x50, 0x4c, 0x94, 0x01, 0xd9, 0x68, 0x19, 0x10, 0xf7, 0x01, 0x2c, 0x64, 0xb4, 0x48,
	0xc6, 0xe6, 0x19, 0x50, 0x02, 0x51, 0xef, 0xaa, 0xfe, 0x9d, 0x04, 0x4b, 0x85, 0x3f, 0x15, 0x60,
	0x36, 0x92, 0x0b, 0xaf, 0xf9, 0x62, 0xe7, 0x9d, 0xc4, 0x5b, 0xca, 0x85, 0x64, 0x42, 0x8d, 0xdd,
	0xdd, 0xc8, 0xcf, 0x60, 0x7e, 0x48, 0x97, 0x0b, 0x1f, 0x0d, 0x0d, 0x51, 0x47, 0xae, 0x5c, 0x3a,
	0x70, 0x23, 0x40, 0xc7, 0xdf, 0x61, 0x7d, 0x32, 0xfa, 0x4a, 0xed, 0x8b, 0xb8, 0xb2, 0xdc, 0x84,
	0xa5, 0xd1, 0xa3, 0xa0, 0xde, 0x0f, 0x93, 0x05, 0xc5, 0xab, 0x09, 0xb5, 0xc7, 0xbc, 0xcc, 0xd2,
	0x60, 0x71, 0x88, 0xe4, 0x9a, 0xdf, 0x67, 0x7d, 0x07, 0x96, 0xc7, 0x0c, 0x81, 0x8a, 0x7f, 0x7d,
	0xc8, 0xe0, 0xb7, 0xc6, 0x68, 0x3e, 0x64, 0xf6, 0xbf, 0x10, 0xa0, 0x18, 0x5b, 0x5f, 0x77, 0xc4,
	0xc5, 0xb8, 0x30, 0xe2, 0x62, 0xfc, 0x0e, 0xe4, 0x39, 0x15, 0x2d, 0x26, 0xf8, 0xe5, 0x39, 0x50,
	0x1a, 0x5a, 0x4d, 0x5c, 0xf2, 0xea, 0x9c, 0xcb, 0xf1, 0x8b, 0x12, 0x1a, 0x32, 0x98, 0x1c, 0x85,
	0xc9, 0x91, 0xb5, 0x48, 0xf9, 0x17, 0xb9, 0x69, 0xbd, 0x4e, 0xb7, 0xa8, 0x45, 0x9c, 0x2f, 0x7e,
	0xeb, 0xfa, 0x7e, 0xd2, 0x27, 0x96, 0x12, 0x96, 0x1d, 0x75, 0xf7, 0xfa, 0x99, 0x10, 0xd9, 0x19,
	0x5f, 0xc6, 0x0d, 0xec, 0x9b, 0xb1, 0x1b, 0xd8, 0x91, 0x75, 0x2f, 0xbb, 0x87, 0x7d, 0x27, 0x71,
	0x0f, 0x7b, 0xf1, 0x8e, 0x96, 0xee, 0xc5, 0x6f, 0x63, 0xe7, 0x47, 0x50, 0xfb, 0x77, 0xb2, 0xf2,
	0x8f, 0x85, 0x88, 0xdb, 0x27, 0x6e, 0x5c, 0xdf, 0xbd, 0xcc, 0x3c, 0xa3, 0x13, 0x7a, 0x18, 0xf1,
	0xe0, 0x09, 0x7e, 0x86, 0x18, 0x61, 0xe7, 0x21, 0xf7, 0xfd, 0x47, 0x21, 0xb2, 0x72, 0x41, 0x11,
	0x4a, 0x5b, 0x24, 0x5f, 0x72, 0xe1, 0xfa, 0x09, 0x14, 0x92, 0x77, 0x2a, 0x57, 0xb9, 0xdf, 0xcb,
	0x45, 0xfa, 0x3f, 0xf2, 0x1e, 0xbc, 0x3a, 0x3c, 0x89, 0xab, 0x04, 0xa6, 0xd8, 0xcc, 0x43, 0x3f,
	0xec, 0x44, 0xa2, 0x46, 0x44, 0xee, 0x35, 0xc7, 0xa6, 0x4f, 0xe1, 0xd6, 0xf8, 0x51, 0x50, 0xfd,
	0x8f, 0x87, 0xc2, 0xd3, 0x9d, 0x71, 0xfa, 0x0f, 0x2f, 0xf1, 0xbd, 0x2d, 0xc8, 0xf8, 0x65, 0x86,
	0x24, 0x41, 0xb1, 0xfa, 0x58, 0x6d, 0xb6, 0x36, 0x5a, 0xbb, 0x4d, 0xb5, 0xbe, 0x53, 0xaf, 0x88,
	0xaf, 0x48, 0x22, 0xe4, 0x43, 0xd8, 0x6e, 0x43, 0x14, 0xe2, 0x54, 0x5b, 0x3b, 0xdf, 0xa9, 0x8b,
	0x13, 0xf7, 0x7e, 0xce, 0xfe, 0xc6, 0x03, 0xcf, 0x54, 0xb4, 0xc1, 0x7c, 0x03, 0xa4, 0xed, 0xea,
	0x63, 0xb5, 0xb1, 0xa3, 0xb4, 0xd8, 0x11, 0x9a, 0x4b, 0x5b, 0x80, 0xd9, 0x38, 0x7c, 0xab, 0xb6,
	0x21, 0x0a, 0xd2, 0xab, 0x50, 0x8a, 0x83, 0x1b, 0xf7, 0xd5, 0x6a, 0xfd, 0x89, 0x52, 0x69, 0x36,
	0xc5, 0x09, 0xe9, 0x26, 0x2c, 0x0e, 0x61, 0x2b, 0x0c, 0x39, 0x39, 0x62, 0xa4, 0x72, 0xb3, 0x2a,
	0xa6, 0xee, 0xfd, 0x24, 0x45, 0x35, 0xf2, 0xff, 0x14, 0x5a, 0x5a, 0x86, 0x1b, 0x48, 0xf7, 0x7c,
	0xb7, 0xb2, 0x5b, 0x51, 0x1b, 0xbb, 0x4a, 0x63, 0xa7, 0x19, 0x68, 0xc5, 0x07, 0x88, 0xe3, 0x36,
	0xb6, 0x6a, 0xd5, 0xba, 0x28, 0x48, 0x25, 0x98, 0x1f, 0x46, 0xb6, 0x5e, 0x88, 0x13, 0xa3, 0x31,
	0xca, 0x0b, 0x71, 0x52, 0x5a, 0x81, 0x9b, 0x23, 0x30, 0x5b, 0xb5, 0x0d, 0xb5, 0x59, 0xa9, 0x6f,
	0x89, 0xa9, 0x0b, 0x08, 0x94, 0x4a, 0x79, 0x4f, 0x9c, 0x1a, 0x2d, 0xbb, 0xfc, 0x5c, 0x4c, 0x8f,
	0xc6, 0x54, 0x9e, 0x8b, 0xd3, 0x63, 0xa6, 0xb8, 0x57, 0xab, 0x88, 0x19, 0xe9, 0x16, 0x2c, 0x0d,
	0xe3, 0x9a, 0xad, 0x1d, 0x65, 0xe3, 0x49, 0x45, 0xcc, 0x8e, 0xd6, 0x67, 0xaf, 0xaa, 0xb4, 0xaa,
	0x3b, 0x38, 0x57, 0xb8, 0x90, 0x40, 0x79, 0x21, 0xe6, 0xa4, 0x25, 0x58, 0x18, 0x31, 0xc0, 0x5e,
	0x59, 0xcc, 0x8f, 0x1e, 0x1b, 0xf5, 0x52, 0x9b, 0xcf, 0xc5, 0xc2, 0x05, 0xe8, 0xf2, 0x73, 0xb1,
	0x38, 0x7a, 0x64, 0x8a, 0xde, 0x50, 0x6a, 0xcf, 0xc5, 0x99, 0x0b, 0x08, 0x9a, 0xe8, 0x22, 0xe2,
	0xbd, 0xa7, 0xc1, 0x73, 0x26, 0x82, 0xce, 0xbb, 0xcd, 0xbd, 0x37, 0x58, 0xfe, 0x79, 0x10, 0x43,
	0x58, 0x59, 0xa9, 0x6c, 0xb4, 0x2a, 0xcc, 0xcd, 0x43, 0x68, 0xb5, 0x5e, 0x6d, 0x89, 0x13, 0xf7,
	0x7e, 0x29, 0x40, 0x9a, 0xb5, 0x64, 0xf9, 0xbe, 0x88, 0xfa, 0x76, 0x04, 0x52, 0xa9, 0x57, 0xcb,
	0xc1, 0x4e, 0x89, 0xb4, 0xf9, 0xc4, 0x09, 0xdc, 0x01, 0x43, 0xad, 0x3f, 0x71, 0x32, 0x4a, 0xca,
	0xfa, 0x6f, 0x62, 0x4a, 0x9a, 0x81, 0x5c, 0xa4, 0x1b, 0x26, 0x4e, 0x45, 0x79, 0x83, 0x96, 0x94,
	0x98, 0xbe, 0xf7, 0x5f, 0x82, 0xff, 0x9e, 0x86, 0x6a, 0x36, 0x0b, 0x05, 0xa5, 0xd9, 0x8c, 0xa9,
	0x16, 0x05, 0x55, 0x1b, 0x7b, 0xf7, 0x45, 0x01, 0x65, 0xc5, 0x40, 0x6a, 0xab, 0xdc, 0x60, 0xea,
	0xc5, 0xc1, 0xbb, 0x5b, 0x0d, 0x31, 0x95, 0x14, 0xf0, 0x50, 0xcc, 0x24, 0x29, 0x1f, 0x52, 0x01,
	0xe2, 0x30, 0x18, 0x05, 0xdc, 0x41, 0x1b, 0xc7, 0xc1, 0x95, 0x17, 0xe2, 0xb7, 0xa5, 0x25, 0x98,
	0x1f, 0x92, 0x81, 0x98, 0x1f, 0x09, 0xc3, 0xa8, 0xdd, 0x2d, 0x86, 0x9a, 0xb8, 0xf7, 0x6b, 0xc1,
	0x7f, 0xaa, 0x42, 0xe7, 0xcb, 0xac, 0x12, 0xbe, 0x5d, 0x08, 0x43, 0xcd, 0xd0, 0x33, 0x0b, 0x51,
	0xc0, 0x78, 0x11, 0x03, 0x37, 0xf6, 0xb6, 0x37, 0xea, 0xe2, 0x84, 0xb4, 0x08, 0x73, 0x31, 0xf8,
	0x56, 0x55, 0xa9, 0x94, 0x5b, 0xe2, 0x24, 0xee, 0xb7, 0x51, 0x4f, 0x23, 0xc4, 0x14, 0xce, 0x29,
	0x86, 0x79, 0xf2, 0xb8, 0x25, 0x4e, 0xa1, 0x76, 0xb3, 0x43, 0x97, 0x6f, 0xe8, 0xe4, 0x23, 0xef,
	0x71, 0xb8, 0xb2, 0xb7, 0x61, 0x79, 0xfc, 0x05, 0x19, 0x0b, 0x90, 0xe3, 0x2e, 0xaa, 0xc4, 0x09,
	0xe9, 0x2d, 0xf8, 0xea, 0xa5, 0x2e, 0x89, 0xc4, 0xc9, 0xf5, 0x5f, 0x4d, 0x43, 0x36, 0xc8, 0x0b,
	0xd2, 0x87, 0xf4, 0xcf, 0xfa, 0xca, 0x0e, 0xc1, 0xad, 0x31, 0x17, 0xf9, 0xf3, 0x26, 0x3f, 0x37,
	0x2e, 0xcf, 0x0f, 0xfd, 0xcd, 0x53, 0xcd, 0x3d, 0x90, 0x5f, 0xe1, 0x9c, 0xbb, 0x76, 0xe7, 0xca,
	0x9c, 0x5b, 0x94, 0x93, 0x55, 0xcc, 0xd2, 0xd2, 0xe8, 0x3f, 0xcb, 0x40, 0xfe, 0xe5, 0x31, 0x7f,
	0x09, 0xc1, 0xa4, 0x7c, 0x03, 0xd2, 0xec, 0x79, 0x99, 0x74, 0x63, 0xc4, 0x3b, 0x3d, 0xe4, 0x5f,
	0x1c, 0xf5, 0x08, 0x8d, 0x31, 0x3f, 0x81, 0x3c, 0x03, 0xfb, 0x7f, 0xd0, 0xc8, 0x48, 0x47, 0xfc,
	0xfd, 0x94, 0xaf, 0xc5, 0xa8, 0xbf, 0x59, 0x0a, 0x04, 0x35, 0x93, 0x82, 0x9a, 0xe3, 0x05, 0x35,
	0x47, 0x0b, 0xfa, 0x24, 0xd2, 0x8a, 0xe0, 0xcb, 0xb1, 0x34, 0x74, 0xa8, 0x4b, 0xca, 0x1a, 0x75,
	0x3a, 0x4c, 0xc8, 0xe2, 0x0b, 0xf4, 0x85, 0x65, 0xed, 0x45, 0x64, 0xf1, 0x25, 0x5b, 0xb9, 0xe8,
	0xd4, 0x86, 0x12, 0xef, 0x5c, 0x78, 0x38, 0x62, 0x72, 0x6b, 0x90, 0x8f, 0x96, 0x9e, 0xd2, 0xab,
	0x63, 0xcb, 0x7e, 0x94, 0x78, 0x6b, 0x7c, 0xb1, 0xca, 0xc4, 0x69, 0x30, 0xbf, 0xd1, 0xe9, 0x04,
	0x65, 0xce, 0x8e, 0xc9, 0xba, 0x1d, 0x92, 0x3c, 0xbe, 0x10, 0x0a, 0x84, 0x7f, 0xe5, 0xf3, 0x8a,
	0xa5, 0x60, 0x88, 0x2d, 0x62, 0x7c, 0x99, 0x43, 0x6c, 0xde, 0xf8, 0xa7, 0xcf, 0x6e, 0x0b, 0xff,
	0xf2, 0xd9, 0x6d, 0xe1, 0xdf, 0x3e, 0xbb, 0x2d, 0xfc, 0xbf, 0xcc, 0xa1, 0x66, 0xd0, 0xff, 0x48,
	0x66, 0x3f, 0x4d, 0xff, 0x79, 0xff, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x38, 0xec, 0x80, 0x38,
	0x98, 0x46, 0x00, 0x00,
}
