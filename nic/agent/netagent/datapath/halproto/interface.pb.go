// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interface.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IfStatus status reflects the current status of Interface
type IfStatus int32

const (
	IfStatus_IF_STATUS_NONE IfStatus = 0
	IfStatus_IF_STATUS_UP   IfStatus = 1
	IfStatus_IF_STATUS_DOWN IfStatus = 2
)

var IfStatus_name = map[int32]string{
	0: "IF_STATUS_NONE",
	1: "IF_STATUS_UP",
	2: "IF_STATUS_DOWN",
}
var IfStatus_value = map[string]int32{
	"IF_STATUS_NONE": 0,
	"IF_STATUS_UP":   1,
	"IF_STATUS_DOWN": 2,
}

func (x IfStatus) String() string {
	return proto.EnumName(IfStatus_name, int32(x))
}
func (IfStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// different types of LIF queues
type LifQType int32

const (
	LifQType_LIF_QUEUE_TYPE_NONE      LifQType = 0
	LifQType_LIF_QUEUE_TYPE_ADMIN     LifQType = 1
	LifQType_LIF_QUEUE_TYPE_TX        LifQType = 2
	LifQType_LIF_QUEUE_TYPE_RX        LifQType = 3
	LifQType_LIF_QUEUE_TYPE_RDMA_SEND LifQType = 4
	LifQType_LIF_QUEUE_TYPE_RDMA_RECV LifQType = 5
	LifQType_LIF_QUEUE_TYPE_CQ        LifQType = 6
	LifQType_LIF_QUEUE_TYPE_EQ        LifQType = 7
)

var LifQType_name = map[int32]string{
	0: "LIF_QUEUE_TYPE_NONE",
	1: "LIF_QUEUE_TYPE_ADMIN",
	2: "LIF_QUEUE_TYPE_TX",
	3: "LIF_QUEUE_TYPE_RX",
	4: "LIF_QUEUE_TYPE_RDMA_SEND",
	5: "LIF_QUEUE_TYPE_RDMA_RECV",
	6: "LIF_QUEUE_TYPE_CQ",
	7: "LIF_QUEUE_TYPE_EQ",
}
var LifQType_value = map[string]int32{
	"LIF_QUEUE_TYPE_NONE":      0,
	"LIF_QUEUE_TYPE_ADMIN":     1,
	"LIF_QUEUE_TYPE_TX":        2,
	"LIF_QUEUE_TYPE_RX":        3,
	"LIF_QUEUE_TYPE_RDMA_SEND": 4,
	"LIF_QUEUE_TYPE_RDMA_RECV": 5,
	"LIF_QUEUE_TYPE_CQ":        6,
	"LIF_QUEUE_TYPE_EQ":        7,
}

func (x LifQType) String() string {
	return proto.EnumName(LifQType_name, int32(x))
}
func (LifQType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// Types of LIF ports
type LifPortType int32

const (
	LifPortType_LIF_PORT_TYPE_NONE       LifPortType = 0
	LifPortType_LIF_PORT_TYPE_DMA        LifPortType = 1
	LifPortType_LIF_PORT_TYPE_P4_INGRESS LifPortType = 2
	LifPortType_LIF_PORT_TYPE_P4_EGRESS  LifPortType = 3
	LifPortType_LIF_PORT_TYPE_NCSI       LifPortType = 4
)

var LifPortType_name = map[int32]string{
	0: "LIF_PORT_TYPE_NONE",
	1: "LIF_PORT_TYPE_DMA",
	2: "LIF_PORT_TYPE_P4_INGRESS",
	3: "LIF_PORT_TYPE_P4_EGRESS",
	4: "LIF_PORT_TYPE_NCSI",
}
var LifPortType_value = map[string]int32{
	"LIF_PORT_TYPE_NONE":       0,
	"LIF_PORT_TYPE_DMA":        1,
	"LIF_PORT_TYPE_P4_INGRESS": 2,
	"LIF_PORT_TYPE_P4_EGRESS":  3,
	"LIF_PORT_TYPE_NCSI":       4,
}

func (x LifPortType) String() string {
	return proto.EnumName(LifPortType_name, int32(x))
}
func (LifPortType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

// types of interfaces
type IfType int32

const (
	IfType_IF_TYPE_NONE      IfType = 0
	IfType_IF_TYPE_ENIC      IfType = 1
	IfType_IF_TYPE_UPLINK    IfType = 2
	IfType_IF_TYPE_UPLINK_PC IfType = 3
	IfType_IF_TYPE_TUNNEL    IfType = 4
)

var IfType_name = map[int32]string{
	0: "IF_TYPE_NONE",
	1: "IF_TYPE_ENIC",
	2: "IF_TYPE_UPLINK",
	3: "IF_TYPE_UPLINK_PC",
	4: "IF_TYPE_TUNNEL",
}
var IfType_value = map[string]int32{
	"IF_TYPE_NONE":      0,
	"IF_TYPE_ENIC":      1,
	"IF_TYPE_UPLINK":    2,
	"IF_TYPE_UPLINK_PC": 3,
	"IF_TYPE_TUNNEL":    4,
}

func (x IfType) String() string {
	return proto.EnumName(IfType_name, int32(x))
}
func (IfType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_ENIC, one of the following vnic types must be
// set. IF_ENIC_TYPE_XXX identifies how a workload is attached to asic
// ------------------------------------------------------------------------------
type IfEnicType int32

const (
	IfEnicType_IF_ENIC_TYPE_NONE   IfEnicType = 0
	IfEnicType_IF_ENIC_TYPE_USEG   IfEnicType = 1
	IfEnicType_IF_ENIC_TYPE_PVLAN  IfEnicType = 2
	IfEnicType_IF_ENIC_TYPE_DIRECT IfEnicType = 3
)

var IfEnicType_name = map[int32]string{
	0: "IF_ENIC_TYPE_NONE",
	1: "IF_ENIC_TYPE_USEG",
	2: "IF_ENIC_TYPE_PVLAN",
	3: "IF_ENIC_TYPE_DIRECT",
}
var IfEnicType_value = map[string]int32{
	"IF_ENIC_TYPE_NONE":   0,
	"IF_ENIC_TYPE_USEG":   1,
	"IF_ENIC_TYPE_PVLAN":  2,
	"IF_ENIC_TYPE_DIRECT": 3,
}

func (x IfEnicType) String() string {
	return proto.EnumName(IfEnicType_name, int32(x))
}
func (IfEnicType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

// ------------------------------------------------------------------------------
// if interface type is IF_TYPE_TUNNEL, one of the following encap types must be
// set.
// ------------------------------------------------------------------------------
type IfTunnelEncapType int32

const (
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE  IfTunnelEncapType = 0
	IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_VXLAN IfTunnelEncapType = 1
)

var IfTunnelEncapType_name = map[int32]string{
	0: "IF_TUNNEL_ENCAP_TYPE_NONE",
	1: "IF_TUNNEL_ENCAP_TYPE_VXLAN",
}
var IfTunnelEncapType_value = map[string]int32{
	"IF_TUNNEL_ENCAP_TYPE_NONE":  0,
	"IF_TUNNEL_ENCAP_TYPE_VXLAN": 1,
}

func (x IfTunnelEncapType) String() string {
	return proto.EnumName(IfTunnelEncapType_name, int32(x))
}
func (IfTunnelEncapType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

// LIF can have many queues of different types
type LifQueueInfo struct {
	Qtype   LifQType `protobuf:"varint,1,opt,name=qtype,enum=intf.LifQType" json:"qtype,omitempty"`
	QueueId uint32   `protobuf:"varint,2,opt,name=queue_id,json=queueId" json:"queue_id,omitempty"`
}

func (m *LifQueueInfo) Reset()                    { *m = LifQueueInfo{} }
func (m *LifQueueInfo) String() string            { return proto.CompactTextString(m) }
func (*LifQueueInfo) ProtoMessage()               {}
func (*LifQueueInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *LifQueueInfo) GetQtype() LifQType {
	if m != nil {
		return m.Qtype
	}
	return LifQType_LIF_QUEUE_TYPE_NONE
}

func (m *LifQueueInfo) GetQueueId() uint32 {
	if m != nil {
		return m.QueueId
	}
	return 0
}

// LifKeyHandle uniquely identifies a LIF
type LifKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*LifKeyHandle_LifId
	//	*LifKeyHandle_LifHandle
	KeyOrHandle isLifKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *LifKeyHandle) Reset()                    { *m = LifKeyHandle{} }
func (m *LifKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*LifKeyHandle) ProtoMessage()               {}
func (*LifKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type isLifKeyHandle_KeyOrHandle interface {
	isLifKeyHandle_KeyOrHandle()
}

type LifKeyHandle_LifId struct {
	LifId uint32 `protobuf:"fixed32,1,opt,name=lif_id,json=lifId,oneof"`
}
type LifKeyHandle_LifHandle struct {
	LifHandle uint64 `protobuf:"fixed64,2,opt,name=lif_handle,json=lifHandle,oneof"`
}

func (*LifKeyHandle_LifId) isLifKeyHandle_KeyOrHandle()     {}
func (*LifKeyHandle_LifHandle) isLifKeyHandle_KeyOrHandle() {}

func (m *LifKeyHandle) GetKeyOrHandle() isLifKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifKeyHandle) GetLifId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*LifKeyHandle_LifId); ok {
		return x.LifId
	}
	return 0
}

func (m *LifKeyHandle) GetLifHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*LifKeyHandle_LifHandle); ok {
		return x.LifHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LifKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LifKeyHandle_OneofMarshaler, _LifKeyHandle_OneofUnmarshaler, _LifKeyHandle_OneofSizer, []interface{}{
		(*LifKeyHandle_LifId)(nil),
		(*LifKeyHandle_LifHandle)(nil),
	}
}

func _LifKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LifKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *LifKeyHandle_LifId:
		b.EncodeVarint(1<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(x.LifId))
	case *LifKeyHandle_LifHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.LifHandle))
	case nil:
	default:
		return fmt.Errorf("LifKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _LifKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LifKeyHandle)
	switch tag {
	case 1: // key_or_handle.lif_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.KeyOrHandle = &LifKeyHandle_LifId{uint32(x)}
		return true, err
	case 2: // key_or_handle.lif_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &LifKeyHandle_LifHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _LifKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LifKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *LifKeyHandle_LifId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *LifKeyHandle_LifHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// LIF object
type LifSpec struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *LifKeyHandle   `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	MacAddr     uint64          `protobuf:"varint,3,opt,name=mac_addr,json=macAddr" json:"mac_addr,omitempty"`
	PortType    LifPortType     `protobuf:"varint,4,opt,name=port_type,json=portType,enum=intf.LifPortType" json:"port_type,omitempty"`
	PortNum     uint32          `protobuf:"varint,5,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	PeerLif     *LifKeyHandle   `protobuf:"bytes,6,opt,name=peer_lif,json=peerLif" json:"peer_lif,omitempty"`
	AdminStatus IfStatus        `protobuf:"varint,7,opt,name=admin_status,json=adminStatus,enum=intf.IfStatus" json:"admin_status,omitempty"`
	Queues      []*LifQueueInfo `protobuf:"bytes,8,rep,name=queues" json:"queues,omitempty"`
	VlanStripEn bool            `protobuf:"varint,9,opt,name=vlan_strip_en,json=vlanStripEn" json:"vlan_strip_en,omitempty"`
	Allmulti    bool            `protobuf:"varint,10,opt,name=allmulti" json:"allmulti,omitempty"`
}

func (m *LifSpec) Reset()                    { *m = LifSpec{} }
func (m *LifSpec) String() string            { return proto.CompactTextString(m) }
func (*LifSpec) ProtoMessage()               {}
func (*LifSpec) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *LifSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifSpec) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifSpec) GetMacAddr() uint64 {
	if m != nil {
		return m.MacAddr
	}
	return 0
}

func (m *LifSpec) GetPortType() LifPortType {
	if m != nil {
		return m.PortType
	}
	return LifPortType_LIF_PORT_TYPE_NONE
}

func (m *LifSpec) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *LifSpec) GetPeerLif() *LifKeyHandle {
	if m != nil {
		return m.PeerLif
	}
	return nil
}

func (m *LifSpec) GetAdminStatus() IfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *LifSpec) GetQueues() []*LifQueueInfo {
	if m != nil {
		return m.Queues
	}
	return nil
}

func (m *LifSpec) GetVlanStripEn() bool {
	if m != nil {
		return m.VlanStripEn
	}
	return false
}

func (m *LifSpec) GetAllmulti() bool {
	if m != nil {
		return m.Allmulti
	}
	return false
}

// LifRequestMsg is batched request used to create/update of LIFs
type LifRequestMsg struct {
	Request []*LifSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifRequestMsg) Reset()                    { *m = LifRequestMsg{} }
func (m *LifRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifRequestMsg) ProtoMessage()               {}
func (*LifRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *LifRequestMsg) GetRequest() []*LifSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifStatus represents the operational status of LIF
type LifStatus struct {
	LifStatus IfStatus `protobuf:"varint,1,opt,name=lif_status,json=lifStatus,enum=intf.IfStatus" json:"lif_status,omitempty"`
	LifHandle uint64   `protobuf:"fixed64,2,opt,name=lif_handle,json=lifHandle" json:"lif_handle,omitempty"`
}

func (m *LifStatus) Reset()                    { *m = LifStatus{} }
func (m *LifStatus) String() string            { return proto.CompactTextString(m) }
func (*LifStatus) ProtoMessage()               {}
func (*LifStatus) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *LifStatus) GetLifStatus() IfStatus {
	if m != nil {
		return m.LifStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *LifStatus) GetLifHandle() uint64 {
	if m != nil {
		return m.LifHandle
	}
	return 0
}

// LifResponse s response to one LifSpec
type LifResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *LifStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *LifResponse) Reset()                    { *m = LifResponse{} }
func (m *LifResponse) String() string            { return proto.CompactTextString(m) }
func (*LifResponse) ProtoMessage()               {}
func (*LifResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *LifResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *LifResponse) GetStatus() *LifStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// LifResponseMsg is response to LifRequestMsg
type LifResponseMsg struct {
	Response []*LifResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifResponseMsg) Reset()                    { *m = LifResponseMsg{} }
func (m *LifResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifResponseMsg) ProtoMessage()               {}
func (*LifResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *LifResponseMsg) GetResponse() []*LifResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// LifDeleteRequest  is used to delete a LIF object
type LifDeleteRequest struct {
	Meta        *ObjectMeta   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *LifDeleteRequest) Reset()                    { *m = LifDeleteRequest{} }
func (m *LifDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequest) ProtoMessage()               {}
func (*LifDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *LifDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifDeleteRequest) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// LifDeleteRequestMsg is used to delete a batch of LIFs
type LifDeleteRequestMsg struct {
	Request []*LifDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifDeleteRequestMsg) Reset()                    { *m = LifDeleteRequestMsg{} }
func (m *LifDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteRequestMsg) ProtoMessage()               {}
func (*LifDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *LifDeleteRequestMsg) GetRequest() []*LifDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifDeleteResponseMsg is batched response to LifDeleteRequestMsg
type LifDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *LifDeleteResponseMsg) Reset()                    { *m = LifDeleteResponseMsg{} }
func (m *LifDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifDeleteResponseMsg) ProtoMessage()               {}
func (*LifDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *LifDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// check which stats will be done by p4 and which will be done by p4+
type LifTxStats struct {
	Tx_Frames_Ok           uint64 `protobuf:"varint,1,opt,name=Tx_Frames_Ok,json=TxFramesOk" json:"Tx_Frames_Ok,omitempty"`
	Tx_Unicast_Frames_Ok   uint64 `protobuf:"varint,2,opt,name=Tx_Unicast_Frames_Ok,json=TxUnicastFramesOk" json:"Tx_Unicast_Frames_Ok,omitempty"`
	Tx_Multicast_Frames_Ok uint64 `protobuf:"varint,3,opt,name=Tx_Multicast_Frames_Ok,json=TxMulticastFramesOk" json:"Tx_Multicast_Frames_Ok,omitempty"`
	Tx_Broadcast_Frames_Ok uint64 `protobuf:"varint,4,opt,name=Tx_Broadcast_Frames_Ok,json=TxBroadcastFramesOk" json:"Tx_Broadcast_Frames_Ok,omitempty"`
	Tx_Bytes_Ok            uint64 `protobuf:"varint,5,opt,name=Tx_Bytes_Ok,json=TxBytesOk" json:"Tx_Bytes_Ok,omitempty"`
	Tx_Unicast_Bytes_Ok    uint64 `protobuf:"varint,6,opt,name=Tx_Unicast_Bytes_Ok,json=TxUnicastBytesOk" json:"Tx_Unicast_Bytes_Ok,omitempty"`
	Tx_Multicast_Bytes_Ok  uint64 `protobuf:"varint,7,opt,name=Tx_Multicast_Bytes_Ok,json=TxMulticastBytesOk" json:"Tx_Multicast_Bytes_Ok,omitempty"`
	Tx_Broadcast_Bytes_Ok  uint64 `protobuf:"varint,8,opt,name=Tx_Broadcast_Bytes_Ok,json=TxBroadcastBytesOk" json:"Tx_Broadcast_Bytes_Ok,omitempty"`
	Tx_Tso                 uint64 `protobuf:"varint,9,opt,name=Tx_Tso,json=TxTso" json:"Tx_Tso,omitempty"`
}

func (m *LifTxStats) Reset()                    { *m = LifTxStats{} }
func (m *LifTxStats) String() string            { return proto.CompactTextString(m) }
func (*LifTxStats) ProtoMessage()               {}
func (*LifTxStats) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *LifTxStats) GetTx_Frames_Ok() uint64 {
	if m != nil {
		return m.Tx_Frames_Ok
	}
	return 0
}

func (m *LifTxStats) GetTx_Unicast_Frames_Ok() uint64 {
	if m != nil {
		return m.Tx_Unicast_Frames_Ok
	}
	return 0
}

func (m *LifTxStats) GetTx_Multicast_Frames_Ok() uint64 {
	if m != nil {
		return m.Tx_Multicast_Frames_Ok
	}
	return 0
}

func (m *LifTxStats) GetTx_Broadcast_Frames_Ok() uint64 {
	if m != nil {
		return m.Tx_Broadcast_Frames_Ok
	}
	return 0
}

func (m *LifTxStats) GetTx_Bytes_Ok() uint64 {
	if m != nil {
		return m.Tx_Bytes_Ok
	}
	return 0
}

func (m *LifTxStats) GetTx_Unicast_Bytes_Ok() uint64 {
	if m != nil {
		return m.Tx_Unicast_Bytes_Ok
	}
	return 0
}

func (m *LifTxStats) GetTx_Multicast_Bytes_Ok() uint64 {
	if m != nil {
		return m.Tx_Multicast_Bytes_Ok
	}
	return 0
}

func (m *LifTxStats) GetTx_Broadcast_Bytes_Ok() uint64 {
	if m != nil {
		return m.Tx_Broadcast_Bytes_Ok
	}
	return 0
}

func (m *LifTxStats) GetTx_Tso() uint64 {
	if m != nil {
		return m.Tx_Tso
	}
	return 0
}

type LifRxStats struct {
	RxFramesTotal       uint64 `protobuf:"varint,1,opt,name=Rx_frames_total,json=RxFramesTotal" json:"Rx_frames_total,omitempty"`
	RxFramesOk          uint64 `protobuf:"varint,2,opt,name=Rx_frames_ok,json=RxFramesOk" json:"Rx_frames_ok,omitempty"`
	RxUnicastFramesOk   uint64 `protobuf:"varint,3,opt,name=Rx_unicast_frames_ok,json=RxUnicastFramesOk" json:"Rx_unicast_frames_ok,omitempty"`
	RxMulticastFramesOk uint64 `protobuf:"varint,4,opt,name=Rx_multicast_frames_ok,json=RxMulticastFramesOk" json:"Rx_multicast_frames_ok,omitempty"`
	RxBroadcastFramesOk uint64 `protobuf:"varint,5,opt,name=Rx_broadcast_frames_ok,json=RxBroadcastFramesOk" json:"Rx_broadcast_frames_ok,omitempty"`
	RxBytesOk           uint64 `protobuf:"varint,6,opt,name=Rx_bytes_ok,json=RxBytesOk" json:"Rx_bytes_ok,omitempty"`
	RxUnicastBytesOk    uint64 `protobuf:"varint,7,opt,name=Rx_unicast_bytes_ok,json=RxUnicastBytesOk" json:"Rx_unicast_bytes_ok,omitempty"`
	RxMulticastBytesOk  uint64 `protobuf:"varint,8,opt,name=Rx_multicast_bytes_ok,json=RxMulticastBytesOk" json:"Rx_multicast_bytes_ok,omitempty"`
	RxBroadcastBytesOk  uint64 `protobuf:"varint,9,opt,name=Rx_broadcast_bytes_ok,json=RxBroadcastBytesOk" json:"Rx_broadcast_bytes_ok,omitempty"`
	RxDrops             uint64 `protobuf:"varint,10,opt,name=Rx_drops,json=RxDrops" json:"Rx_drops,omitempty"`
	RxNoBufs            uint64 `protobuf:"varint,11,opt,name=Rx_no_bufs,json=RxNoBufs" json:"Rx_no_bufs,omitempty"`
	RxErrors            uint64 `protobuf:"varint,12,opt,name=Rx_errors,json=RxErrors" json:"Rx_errors,omitempty"`
	RxRss               uint64 `protobuf:"varint,13,opt,name=Rx_rss,json=RxRss" json:"Rx_rss,omitempty"`
	RxCrcErrors         uint64 `protobuf:"varint,14,opt,name=Rx_crc_errors,json=RxCrcErrors" json:"Rx_crc_errors,omitempty"`
	RxFrames_64         uint64 `protobuf:"varint,15,opt,name=Rx_frames_64,json=RxFrames64" json:"Rx_frames_64,omitempty"`
	RxFrames_127        uint64 `protobuf:"varint,16,opt,name=Rx_frames_127,json=RxFrames127" json:"Rx_frames_127,omitempty"`
	RxFrames_255        uint64 `protobuf:"varint,17,opt,name=Rx_frames_255,json=RxFrames255" json:"Rx_frames_255,omitempty"`
	RxFrames_511        uint64 `protobuf:"varint,18,opt,name=Rx_frames_511,json=RxFrames511" json:"Rx_frames_511,omitempty"`
	RxFrames_1024       uint64 `protobuf:"varint,19,opt,name=Rx_frames_1024,json=RxFrames1024" json:"Rx_frames_1024,omitempty"`
	RxFrames_1518       uint64 `protobuf:"varint,20,opt,name=Rx_frames_1518,json=RxFrames1518" json:"Rx_frames_1518,omitempty"`
	RxFramesToMax       uint64 `protobuf:"varint,21,opt,name=Rx_frames_to_max,json=RxFramesToMax" json:"Rx_frames_to_max,omitempty"`
}

func (m *LifRxStats) Reset()                    { *m = LifRxStats{} }
func (m *LifRxStats) String() string            { return proto.CompactTextString(m) }
func (*LifRxStats) ProtoMessage()               {}
func (*LifRxStats) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *LifRxStats) GetRxFramesTotal() uint64 {
	if m != nil {
		return m.RxFramesTotal
	}
	return 0
}

func (m *LifRxStats) GetRxFramesOk() uint64 {
	if m != nil {
		return m.RxFramesOk
	}
	return 0
}

func (m *LifRxStats) GetRxUnicastFramesOk() uint64 {
	if m != nil {
		return m.RxUnicastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetRxMulticastFramesOk() uint64 {
	if m != nil {
		return m.RxMulticastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetRxBroadcastFramesOk() uint64 {
	if m != nil {
		return m.RxBroadcastFramesOk
	}
	return 0
}

func (m *LifRxStats) GetRxBytesOk() uint64 {
	if m != nil {
		return m.RxBytesOk
	}
	return 0
}

func (m *LifRxStats) GetRxUnicastBytesOk() uint64 {
	if m != nil {
		return m.RxUnicastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetRxMulticastBytesOk() uint64 {
	if m != nil {
		return m.RxMulticastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetRxBroadcastBytesOk() uint64 {
	if m != nil {
		return m.RxBroadcastBytesOk
	}
	return 0
}

func (m *LifRxStats) GetRxDrops() uint64 {
	if m != nil {
		return m.RxDrops
	}
	return 0
}

func (m *LifRxStats) GetRxNoBufs() uint64 {
	if m != nil {
		return m.RxNoBufs
	}
	return 0
}

func (m *LifRxStats) GetRxErrors() uint64 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

func (m *LifRxStats) GetRxRss() uint64 {
	if m != nil {
		return m.RxRss
	}
	return 0
}

func (m *LifRxStats) GetRxCrcErrors() uint64 {
	if m != nil {
		return m.RxCrcErrors
	}
	return 0
}

func (m *LifRxStats) GetRxFrames_64() uint64 {
	if m != nil {
		return m.RxFrames_64
	}
	return 0
}

func (m *LifRxStats) GetRxFrames_127() uint64 {
	if m != nil {
		return m.RxFrames_127
	}
	return 0
}

func (m *LifRxStats) GetRxFrames_255() uint64 {
	if m != nil {
		return m.RxFrames_255
	}
	return 0
}

func (m *LifRxStats) GetRxFrames_511() uint64 {
	if m != nil {
		return m.RxFrames_511
	}
	return 0
}

func (m *LifRxStats) GetRxFrames_1024() uint64 {
	if m != nil {
		return m.RxFrames_1024
	}
	return 0
}

func (m *LifRxStats) GetRxFrames_1518() uint64 {
	if m != nil {
		return m.RxFrames_1518
	}
	return 0
}

func (m *LifRxStats) GetRxFramesToMax() uint64 {
	if m != nil {
		return m.RxFramesToMax
	}
	return 0
}

// LifStats captures all the statistics of given LIF
type LifStats struct {
	TxStats *LifTxStats `protobuf:"bytes,1,opt,name=TxStats" json:"TxStats,omitempty"`
	RxStats *LifRxStats `protobuf:"bytes,2,opt,name=RxStats" json:"RxStats,omitempty"`
}

func (m *LifStats) Reset()                    { *m = LifStats{} }
func (m *LifStats) String() string            { return proto.CompactTextString(m) }
func (*LifStats) ProtoMessage()               {}
func (*LifStats) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *LifStats) GetTxStats() *LifTxStats {
	if m != nil {
		return m.TxStats
	}
	return nil
}

func (m *LifStats) GetRxStats() *LifRxStats {
	if m != nil {
		return m.RxStats
	}
	return nil
}

// LifGetRequest is used to get information about a LIF
type LifGetRequest struct {
	Meta        *ObjectMeta   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Stats       *LifStats     `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *LifGetRequest) Reset()                    { *m = LifGetRequest{} }
func (m *LifGetRequest) String() string            { return proto.CompactTextString(m) }
func (*LifGetRequest) ProtoMessage()               {}
func (*LifGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *LifGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LifGetRequest) GetKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *LifGetRequest) GetStats() *LifStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type LifGetRequestMsg struct {
	Request []*LifGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LifGetRequestMsg) Reset()                    { *m = LifGetRequestMsg{} }
func (m *LifGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LifGetRequestMsg) ProtoMessage()               {}
func (*LifGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *LifGetRequestMsg) GetRequest() []*LifGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// LifGetResponse captures all the information about a LIF
type LifGetResponse struct {
	Spec   *LifSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *LifStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats  *LifStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *LifGetResponse) Reset()                    { *m = LifGetResponse{} }
func (m *LifGetResponse) String() string            { return proto.CompactTextString(m) }
func (*LifGetResponse) ProtoMessage()               {}
func (*LifGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *LifGetResponse) GetSpec() *LifSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *LifGetResponse) GetStatus() *LifStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *LifGetResponse) GetStats() *LifStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// LifGetResponseMsg is response to LifGetRequestMsg
type LifGetResponseMsg struct {
	Response []*LifGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LifGetResponseMsg) Reset()                    { *m = LifGetResponseMsg{} }
func (m *LifGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LifGetResponseMsg) ProtoMessage()               {}
func (*LifGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *LifGetResponseMsg) GetResponse() []*LifGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// mandatory attributes expected if interface type is IF_TYPE_ENIC
type IfEnicInfo struct {
	EnicType       IfEnicType    `protobuf:"varint,1,opt,name=enic_type,json=enicType,enum=intf.IfEnicType" json:"enic_type,omitempty"`
	LifKeyOrHandle *LifKeyHandle `protobuf:"bytes,2,opt,name=lif_key_or_handle,json=lifKeyOrHandle" json:"lif_key_or_handle,omitempty"`
	L2SegmentId    uint32        `protobuf:"varint,3,opt,name=l2segment_id,json=l2segmentId" json:"l2segment_id,omitempty"`
	MacAddress     uint64        `protobuf:"fixed64,4,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	EncapVlanId    uint32        `protobuf:"varint,5,opt,name=encap_vlan_id,json=encapVlanId" json:"encap_vlan_id,omitempty"`
}

func (m *IfEnicInfo) Reset()                    { *m = IfEnicInfo{} }
func (m *IfEnicInfo) String() string            { return proto.CompactTextString(m) }
func (*IfEnicInfo) ProtoMessage()               {}
func (*IfEnicInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *IfEnicInfo) GetEnicType() IfEnicType {
	if m != nil {
		return m.EnicType
	}
	return IfEnicType_IF_ENIC_TYPE_NONE
}

func (m *IfEnicInfo) GetLifKeyOrHandle() *LifKeyHandle {
	if m != nil {
		return m.LifKeyOrHandle
	}
	return nil
}

func (m *IfEnicInfo) GetL2SegmentId() uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return 0
}

func (m *IfEnicInfo) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

func (m *IfEnicInfo) GetEncapVlanId() uint32 {
	if m != nil {
		return m.EncapVlanId
	}
	return 0
}

// Interface attributes to specify the derivation of traffic class
type TrafficClassInfo struct {
	Dot1QPcpEn             bool                    `protobuf:"varint,1,opt,name=dot1q_pcp_en,json=dot1qPcpEn" json:"dot1q_pcp_en,omitempty"`
	IpDscpEn               bool                    `protobuf:"varint,2,opt,name=ip_dscp_en,json=ipDscpEn" json:"ip_dscp_en,omitempty"`
	DefaultTrafficClass    *TrafficClass           `protobuf:"bytes,3,opt,name=default_traffic_class,json=defaultTrafficClass" json:"default_traffic_class,omitempty"`
	TrafficClassToQueueMap []*TrafficClassQueueMap `protobuf:"bytes,4,rep,name=traffic_class_to_queue_map,json=trafficClassToQueueMap" json:"traffic_class_to_queue_map,omitempty"`
}

func (m *TrafficClassInfo) Reset()                    { *m = TrafficClassInfo{} }
func (m *TrafficClassInfo) String() string            { return proto.CompactTextString(m) }
func (*TrafficClassInfo) ProtoMessage()               {}
func (*TrafficClassInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *TrafficClassInfo) GetDot1QPcpEn() bool {
	if m != nil {
		return m.Dot1QPcpEn
	}
	return false
}

func (m *TrafficClassInfo) GetIpDscpEn() bool {
	if m != nil {
		return m.IpDscpEn
	}
	return false
}

func (m *TrafficClassInfo) GetDefaultTrafficClass() *TrafficClass {
	if m != nil {
		return m.DefaultTrafficClass
	}
	return nil
}

func (m *TrafficClassInfo) GetTrafficClassToQueueMap() []*TrafficClassQueueMap {
	if m != nil {
		return m.TrafficClassToQueueMap
	}
	return nil
}

// mandatory attributes expected if interface type is IF_TYPE_UPLINK
type IfUplinkInfo struct {
	PortNum            uint32            `protobuf:"varint,1,opt,name=port_num,json=portNum" json:"port_num,omitempty"`
	NativeL2SegmentId  uint32            `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
	L2SegmentId        []uint32          `protobuf:"varint,3,rep,packed,name=l2segment_id,json=l2segmentId" json:"l2segment_id,omitempty"`
	RxTrafficClassInfo *TrafficClassInfo `protobuf:"bytes,4,opt,name=rx_traffic_class_info,json=rxTrafficClassInfo" json:"rx_traffic_class_info,omitempty"`
}

func (m *IfUplinkInfo) Reset()                    { *m = IfUplinkInfo{} }
func (m *IfUplinkInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkInfo) ProtoMessage()               {}
func (*IfUplinkInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

func (m *IfUplinkInfo) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *IfUplinkInfo) GetNativeL2SegmentId() uint32 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkInfo) GetL2SegmentId() []uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return nil
}

func (m *IfUplinkInfo) GetRxTrafficClassInfo() *TrafficClassInfo {
	if m != nil {
		return m.RxTrafficClassInfo
	}
	return nil
}

// mandatory attributes expected if interface type is IF_TYPE_UPLINK_PC
type IfUplinkPCInfo struct {
	UplinkPcNum        uint32            `protobuf:"varint,1,opt,name=uplink_pc_num,json=uplinkPcNum" json:"uplink_pc_num,omitempty"`
	NativeL2SegmentId  uint32            `protobuf:"varint,2,opt,name=native_l2segment_id,json=nativeL2segmentId" json:"native_l2segment_id,omitempty"`
	L2SegmentId        []uint32          `protobuf:"varint,3,rep,packed,name=l2segment_id,json=l2segmentId" json:"l2segment_id,omitempty"`
	RxTrafficClassInfo *TrafficClassInfo `protobuf:"bytes,4,opt,name=rx_traffic_class_info,json=rxTrafficClassInfo" json:"rx_traffic_class_info,omitempty"`
	MemberIfHandle     []uint64          `protobuf:"varint,5,rep,packed,name=member_if_handle,json=memberIfHandle" json:"member_if_handle,omitempty"`
}

func (m *IfUplinkPCInfo) Reset()                    { *m = IfUplinkPCInfo{} }
func (m *IfUplinkPCInfo) String() string            { return proto.CompactTextString(m) }
func (*IfUplinkPCInfo) ProtoMessage()               {}
func (*IfUplinkPCInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *IfUplinkPCInfo) GetUplinkPcNum() uint32 {
	if m != nil {
		return m.UplinkPcNum
	}
	return 0
}

func (m *IfUplinkPCInfo) GetNativeL2SegmentId() uint32 {
	if m != nil {
		return m.NativeL2SegmentId
	}
	return 0
}

func (m *IfUplinkPCInfo) GetL2SegmentId() []uint32 {
	if m != nil {
		return m.L2SegmentId
	}
	return nil
}

func (m *IfUplinkPCInfo) GetRxTrafficClassInfo() *TrafficClassInfo {
	if m != nil {
		return m.RxTrafficClassInfo
	}
	return nil
}

func (m *IfUplinkPCInfo) GetMemberIfHandle() []uint64 {
	if m != nil {
		return m.MemberIfHandle
	}
	return nil
}

// InterfaceKeyHandle uniquely identifies a Interface
type InterfaceKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*InterfaceKeyHandle_InterfaceId
	//	*InterfaceKeyHandle_IfHandle
	KeyOrHandle isInterfaceKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *InterfaceKeyHandle) Reset()                    { *m = InterfaceKeyHandle{} }
func (m *InterfaceKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*InterfaceKeyHandle) ProtoMessage()               {}
func (*InterfaceKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

type isInterfaceKeyHandle_KeyOrHandle interface {
	isInterfaceKeyHandle_KeyOrHandle()
}

type InterfaceKeyHandle_InterfaceId struct {
	InterfaceId uint64 `protobuf:"fixed64,1,opt,name=interface_id,json=interfaceId,oneof"`
}
type InterfaceKeyHandle_IfHandle struct {
	IfHandle uint64 `protobuf:"fixed64,2,opt,name=if_handle,json=ifHandle,oneof"`
}

func (*InterfaceKeyHandle_InterfaceId) isInterfaceKeyHandle_KeyOrHandle() {}
func (*InterfaceKeyHandle_IfHandle) isInterfaceKeyHandle_KeyOrHandle()    {}

func (m *InterfaceKeyHandle) GetKeyOrHandle() isInterfaceKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceKeyHandle) GetInterfaceId() uint64 {
	if x, ok := m.GetKeyOrHandle().(*InterfaceKeyHandle_InterfaceId); ok {
		return x.InterfaceId
	}
	return 0
}

func (m *InterfaceKeyHandle) GetIfHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*InterfaceKeyHandle_IfHandle); ok {
		return x.IfHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InterfaceKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InterfaceKeyHandle_OneofMarshaler, _InterfaceKeyHandle_OneofUnmarshaler, _InterfaceKeyHandle_OneofSizer, []interface{}{
		(*InterfaceKeyHandle_InterfaceId)(nil),
		(*InterfaceKeyHandle_IfHandle)(nil),
	}
}

func _InterfaceKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InterfaceKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *InterfaceKeyHandle_InterfaceId:
		b.EncodeVarint(1<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.InterfaceId))
	case *InterfaceKeyHandle_IfHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.IfHandle))
	case nil:
	default:
		return fmt.Errorf("InterfaceKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _InterfaceKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InterfaceKeyHandle)
	switch tag {
	case 1: // key_or_handle.interface_id
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &InterfaceKeyHandle_InterfaceId{x}
		return true, err
	case 2: // key_or_handle.if_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &InterfaceKeyHandle_IfHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _InterfaceKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InterfaceKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *InterfaceKeyHandle_InterfaceId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *InterfaceKeyHandle_IfHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IfTunnelVxlanInfo struct {
	LocalTep  *IPAddress `protobuf:"bytes,1,opt,name=local_tep,json=localTep" json:"local_tep,omitempty"`
	RemoteTep *IPAddress `protobuf:"bytes,2,opt,name=remote_tep,json=remoteTep" json:"remote_tep,omitempty"`
}

func (m *IfTunnelVxlanInfo) Reset()                    { *m = IfTunnelVxlanInfo{} }
func (m *IfTunnelVxlanInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelVxlanInfo) ProtoMessage()               {}
func (*IfTunnelVxlanInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *IfTunnelVxlanInfo) GetLocalTep() *IPAddress {
	if m != nil {
		return m.LocalTep
	}
	return nil
}

func (m *IfTunnelVxlanInfo) GetRemoteTep() *IPAddress {
	if m != nil {
		return m.RemoteTep
	}
	return nil
}

type IfTunnelInfo struct {
	EncapType IfTunnelEncapType `protobuf:"varint,1,opt,name=encap_type,json=encapType,enum=intf.IfTunnelEncapType" json:"encap_type,omitempty"`
	// Types that are valid to be assigned to EncapInfo:
	//	*IfTunnelInfo_VxlanInfo
	EncapInfo isIfTunnelInfo_EncapInfo `protobuf_oneof:"encap_info"`
}

func (m *IfTunnelInfo) Reset()                    { *m = IfTunnelInfo{} }
func (m *IfTunnelInfo) String() string            { return proto.CompactTextString(m) }
func (*IfTunnelInfo) ProtoMessage()               {}
func (*IfTunnelInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

type isIfTunnelInfo_EncapInfo interface {
	isIfTunnelInfo_EncapInfo()
}

type IfTunnelInfo_VxlanInfo struct {
	VxlanInfo *IfTunnelVxlanInfo `protobuf:"bytes,2,opt,name=vxlan_info,json=vxlanInfo,oneof"`
}

func (*IfTunnelInfo_VxlanInfo) isIfTunnelInfo_EncapInfo() {}

func (m *IfTunnelInfo) GetEncapInfo() isIfTunnelInfo_EncapInfo {
	if m != nil {
		return m.EncapInfo
	}
	return nil
}

func (m *IfTunnelInfo) GetEncapType() IfTunnelEncapType {
	if m != nil {
		return m.EncapType
	}
	return IfTunnelEncapType_IF_TUNNEL_ENCAP_TYPE_NONE
}

func (m *IfTunnelInfo) GetVxlanInfo() *IfTunnelVxlanInfo {
	if x, ok := m.GetEncapInfo().(*IfTunnelInfo_VxlanInfo); ok {
		return x.VxlanInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IfTunnelInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IfTunnelInfo_OneofMarshaler, _IfTunnelInfo_OneofUnmarshaler, _IfTunnelInfo_OneofSizer, []interface{}{
		(*IfTunnelInfo_VxlanInfo)(nil),
	}
}

func _IfTunnelInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IfTunnelInfo)
	// encap_info
	switch x := m.EncapInfo.(type) {
	case *IfTunnelInfo_VxlanInfo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VxlanInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("IfTunnelInfo.EncapInfo has unexpected type %T", x)
	}
	return nil
}

func _IfTunnelInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IfTunnelInfo)
	switch tag {
	case 2: // encap_info.vxlan_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelVxlanInfo)
		err := b.DecodeMessage(msg)
		m.EncapInfo = &IfTunnelInfo_VxlanInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _IfTunnelInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IfTunnelInfo)
	// encap_info
	switch x := m.EncapInfo.(type) {
	case *IfTunnelInfo_VxlanInfo:
		s := proto.Size(x.VxlanInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InterfaceSpec is used to add or update of an interface
type InterfaceSpec struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        IfType              `protobuf:"varint,3,opt,name=type,enum=intf.IfType" json:"type,omitempty"`
	AdminStatus IfStatus            `protobuf:"varint,4,opt,name=admin_status,json=adminStatus,enum=intf.IfStatus" json:"admin_status,omitempty"`
	// Types that are valid to be assigned to IfInfo:
	//	*InterfaceSpec_IfEnicInfo
	//	*InterfaceSpec_IfUplinkInfo
	//	*InterfaceSpec_IfUplinkPcInfo
	//	*InterfaceSpec_IfTunnelInfo
	IfInfo       isInterfaceSpec_IfInfo `protobuf_oneof:"if_info"`
	TxQosActions *QOSActions            `protobuf:"bytes,10,opt,name=tx_qos_actions,json=txQosActions" json:"tx_qos_actions,omitempty"`
	RxQosActions *QOSActions            `protobuf:"bytes,11,opt,name=rx_qos_actions,json=rxQosActions" json:"rx_qos_actions,omitempty"`
}

func (m *InterfaceSpec) Reset()                    { *m = InterfaceSpec{} }
func (m *InterfaceSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceSpec) ProtoMessage()               {}
func (*InterfaceSpec) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

type isInterfaceSpec_IfInfo interface {
	isInterfaceSpec_IfInfo()
}

type InterfaceSpec_IfEnicInfo struct {
	IfEnicInfo *IfEnicInfo `protobuf:"bytes,6,opt,name=if_enic_info,json=ifEnicInfo,oneof"`
}
type InterfaceSpec_IfUplinkInfo struct {
	IfUplinkInfo *IfUplinkInfo `protobuf:"bytes,7,opt,name=if_uplink_info,json=ifUplinkInfo,oneof"`
}
type InterfaceSpec_IfUplinkPcInfo struct {
	IfUplinkPcInfo *IfUplinkPCInfo `protobuf:"bytes,8,opt,name=if_uplink_pc_info,json=ifUplinkPcInfo,oneof"`
}
type InterfaceSpec_IfTunnelInfo struct {
	IfTunnelInfo *IfTunnelInfo `protobuf:"bytes,9,opt,name=if_tunnel_info,json=ifTunnelInfo,oneof"`
}

func (*InterfaceSpec_IfEnicInfo) isInterfaceSpec_IfInfo()     {}
func (*InterfaceSpec_IfUplinkInfo) isInterfaceSpec_IfInfo()   {}
func (*InterfaceSpec_IfUplinkPcInfo) isInterfaceSpec_IfInfo() {}
func (*InterfaceSpec_IfTunnelInfo) isInterfaceSpec_IfInfo()   {}

func (m *InterfaceSpec) GetIfInfo() isInterfaceSpec_IfInfo {
	if m != nil {
		return m.IfInfo
	}
	return nil
}

func (m *InterfaceSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceSpec) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *InterfaceSpec) GetType() IfType {
	if m != nil {
		return m.Type
	}
	return IfType_IF_TYPE_NONE
}

func (m *InterfaceSpec) GetAdminStatus() IfStatus {
	if m != nil {
		return m.AdminStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *InterfaceSpec) GetIfEnicInfo() *IfEnicInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfEnicInfo); ok {
		return x.IfEnicInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkInfo() *IfUplinkInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfUplinkInfo); ok {
		return x.IfUplinkInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfUplinkPcInfo() *IfUplinkPCInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfUplinkPcInfo); ok {
		return x.IfUplinkPcInfo
	}
	return nil
}

func (m *InterfaceSpec) GetIfTunnelInfo() *IfTunnelInfo {
	if x, ok := m.GetIfInfo().(*InterfaceSpec_IfTunnelInfo); ok {
		return x.IfTunnelInfo
	}
	return nil
}

func (m *InterfaceSpec) GetTxQosActions() *QOSActions {
	if m != nil {
		return m.TxQosActions
	}
	return nil
}

func (m *InterfaceSpec) GetRxQosActions() *QOSActions {
	if m != nil {
		return m.RxQosActions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InterfaceSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InterfaceSpec_OneofMarshaler, _InterfaceSpec_OneofUnmarshaler, _InterfaceSpec_OneofSizer, []interface{}{
		(*InterfaceSpec_IfEnicInfo)(nil),
		(*InterfaceSpec_IfUplinkInfo)(nil),
		(*InterfaceSpec_IfUplinkPcInfo)(nil),
		(*InterfaceSpec_IfTunnelInfo)(nil),
	}
}

func _InterfaceSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InterfaceSpec)
	// if_info
	switch x := m.IfInfo.(type) {
	case *InterfaceSpec_IfEnicInfo:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfEnicInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfUplinkInfo:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfUplinkInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfUplinkPcInfo:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfUplinkPcInfo); err != nil {
			return err
		}
	case *InterfaceSpec_IfTunnelInfo:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IfTunnelInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InterfaceSpec.IfInfo has unexpected type %T", x)
	}
	return nil
}

func _InterfaceSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InterfaceSpec)
	switch tag {
	case 6: // if_info.if_enic_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfEnicInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfEnicInfo{msg}
		return true, err
	case 7: // if_info.if_uplink_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfUplinkInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfUplinkInfo{msg}
		return true, err
	case 8: // if_info.if_uplink_pc_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfUplinkPCInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfUplinkPcInfo{msg}
		return true, err
	case 9: // if_info.if_tunnel_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IfTunnelInfo)
		err := b.DecodeMessage(msg)
		m.IfInfo = &InterfaceSpec_IfTunnelInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InterfaceSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InterfaceSpec)
	// if_info
	switch x := m.IfInfo.(type) {
	case *InterfaceSpec_IfEnicInfo:
		s := proto.Size(x.IfEnicInfo)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfUplinkInfo:
		s := proto.Size(x.IfUplinkInfo)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfUplinkPcInfo:
		s := proto.Size(x.IfUplinkPcInfo)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InterfaceSpec_IfTunnelInfo:
		s := proto.Size(x.IfTunnelInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// InterfaceRequestMsg is batched request message that is used to do
// create/update of interface(s)
type InterfaceRequestMsg struct {
	Request []*InterfaceSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceRequestMsg) Reset()                    { *m = InterfaceRequestMsg{} }
func (m *InterfaceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceRequestMsg) ProtoMessage()               {}
func (*InterfaceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

func (m *InterfaceRequestMsg) GetRequest() []*InterfaceSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceStatus represents the current status of the interface
type InterfaceStatus struct {
	IfStatus IfStatus `protobuf:"varint,1,opt,name=if_status,json=ifStatus,enum=intf.IfStatus" json:"if_status,omitempty"`
	IfHandle uint64   `protobuf:"fixed64,2,opt,name=if_handle,json=ifHandle" json:"if_handle,omitempty"`
}

func (m *InterfaceStatus) Reset()                    { *m = InterfaceStatus{} }
func (m *InterfaceStatus) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStatus) ProtoMessage()               {}
func (*InterfaceStatus) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

func (m *InterfaceStatus) GetIfStatus() IfStatus {
	if m != nil {
		return m.IfStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *InterfaceStatus) GetIfHandle() uint64 {
	if m != nil {
		return m.IfHandle
	}
	return 0
}

// InterfaceResponse is response to one InterfaceSpec
type InterfaceResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Status    *InterfaceStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *InterfaceResponse) Reset()                    { *m = InterfaceResponse{} }
func (m *InterfaceResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponse) ProtoMessage()               {}
func (*InterfaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

func (m *InterfaceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *InterfaceResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// InterfaceResponseMsg is response to InterfaceRequestMsg
type InterfaceResponseMsg struct {
	Response []*InterfaceResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceResponseMsg) Reset()                    { *m = InterfaceResponseMsg{} }
func (m *InterfaceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceResponseMsg) ProtoMessage()               {}
func (*InterfaceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

func (m *InterfaceResponseMsg) GetResponse() []*InterfaceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceDeleteRequest is used to delete a interface object
type InterfaceDeleteRequest struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *InterfaceDeleteRequest) Reset()                    { *m = InterfaceDeleteRequest{} }
func (m *InterfaceDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequest) ProtoMessage()               {}
func (*InterfaceDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

func (m *InterfaceDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceDeleteRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceDeleteRequestMsg is used to delete a batch of interfaces
type InterfaceDeleteRequestMsg struct {
	Request []*InterfaceDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceDeleteRequestMsg) Reset()                    { *m = InterfaceDeleteRequestMsg{} }
func (m *InterfaceDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteRequestMsg) ProtoMessage()               {}
func (*InterfaceDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

func (m *InterfaceDeleteRequestMsg) GetRequest() []*InterfaceDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceDeleteResponseMsg is batched response to InterfaceDeleteRequestMsg
type InterfaceDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *InterfaceDeleteResponseMsg) Reset()                    { *m = InterfaceDeleteResponseMsg{} }
func (m *InterfaceDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDeleteResponseMsg) ProtoMessage()               {}
func (*InterfaceDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

func (m *InterfaceDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// InterfaceStats captures all the statistics of given interface
type InterfaceStats struct {
	NumTxPackets         uint32 `protobuf:"fixed32,1,opt,name=num_tx_packets,json=numTxPackets" json:"num_tx_packets,omitempty"`
	NumTxBytes           uint32 `protobuf:"fixed32,2,opt,name=num_tx_bytes,json=numTxBytes" json:"num_tx_bytes,omitempty"`
	NumRxPackets         uint32 `protobuf:"fixed32,3,opt,name=num_rx_packets,json=numRxPackets" json:"num_rx_packets,omitempty"`
	NumRxBytes           uint32 `protobuf:"fixed32,4,opt,name=num_rx_bytes,json=numRxBytes" json:"num_rx_bytes,omitempty"`
	NumSessionsInitated  uint32 `protobuf:"fixed32,5,opt,name=num_sessions_initated,json=numSessionsInitated" json:"num_sessions_initated,omitempty"`
	NumSessionsResponded uint32 `protobuf:"fixed32,6,opt,name=num_sessions_responded,json=numSessionsResponded" json:"num_sessions_responded,omitempty"`
}

func (m *InterfaceStats) Reset()                    { *m = InterfaceStats{} }
func (m *InterfaceStats) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStats) ProtoMessage()               {}
func (*InterfaceStats) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

func (m *InterfaceStats) GetNumTxPackets() uint32 {
	if m != nil {
		return m.NumTxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumTxBytes() uint32 {
	if m != nil {
		return m.NumTxBytes
	}
	return 0
}

func (m *InterfaceStats) GetNumRxPackets() uint32 {
	if m != nil {
		return m.NumRxPackets
	}
	return 0
}

func (m *InterfaceStats) GetNumRxBytes() uint32 {
	if m != nil {
		return m.NumRxBytes
	}
	return 0
}

func (m *InterfaceStats) GetNumSessionsInitated() uint32 {
	if m != nil {
		return m.NumSessionsInitated
	}
	return 0
}

func (m *InterfaceStats) GetNumSessionsResponded() uint32 {
	if m != nil {
		return m.NumSessionsResponded
	}
	return 0
}

// InterfaceGetRequest is used to get information about a interface
type InterfaceGetRequest struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *InterfaceKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *InterfaceGetRequest) Reset()                    { *m = InterfaceGetRequest{} }
func (m *InterfaceGetRequest) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequest) ProtoMessage()               {}
func (*InterfaceGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{33} }

func (m *InterfaceGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceGetRequest) GetKeyOrHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// InterfaceGetRequestMsg is batched GET request for interfaces
type InterfaceGetRequestMsg struct {
	Request []*InterfaceGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceGetRequestMsg) Reset()                    { *m = InterfaceGetRequestMsg{} }
func (m *InterfaceGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetRequestMsg) ProtoMessage()               {}
func (*InterfaceGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{34} }

func (m *InterfaceGetRequestMsg) GetRequest() []*InterfaceGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceGetResponse captures all the information about a interface
type InterfaceGetResponse struct {
	Spec   *InterfaceSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *InterfaceStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats  *InterfaceStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *InterfaceGetResponse) Reset()                    { *m = InterfaceGetResponse{} }
func (m *InterfaceGetResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetResponse) ProtoMessage()               {}
func (*InterfaceGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{35} }

func (m *InterfaceGetResponse) GetSpec() *InterfaceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *InterfaceGetResponse) GetStatus() *InterfaceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InterfaceGetResponse) GetStats() *InterfaceStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// InterfaceGetResponseMsg is response to InterfaceGetRequestMsg
type InterfaceGetResponseMsg struct {
	Response []*InterfaceGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceGetResponseMsg) Reset()                    { *m = InterfaceGetResponseMsg{} }
func (m *InterfaceGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceGetResponseMsg) ProtoMessage()               {}
func (*InterfaceGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{36} }

func (m *InterfaceGetResponseMsg) GetResponse() []*InterfaceGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// InterfaceL2SegmentSpec carries the user vlan that is being added or deleted
// on an uplink interface or uplink PC
type InterfaceL2SegmentSpec struct {
	Meta                 *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	L2SegmentKeyOrHandle *L2SegmentKeyHandle `protobuf:"bytes,2,opt,name=l2segment_key_or_handle,json=l2segmentKeyOrHandle" json:"l2segment_key_or_handle,omitempty"`
	IfKeyHandle          *InterfaceKeyHandle `protobuf:"bytes,3,opt,name=if_key_handle,json=ifKeyHandle" json:"if_key_handle,omitempty"`
}

func (m *InterfaceL2SegmentSpec) Reset()                    { *m = InterfaceL2SegmentSpec{} }
func (m *InterfaceL2SegmentSpec) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentSpec) ProtoMessage()               {}
func (*InterfaceL2SegmentSpec) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{37} }

func (m *InterfaceL2SegmentSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *InterfaceL2SegmentSpec) GetL2SegmentKeyOrHandle() *L2SegmentKeyHandle {
	if m != nil {
		return m.L2SegmentKeyOrHandle
	}
	return nil
}

func (m *InterfaceL2SegmentSpec) GetIfKeyHandle() *InterfaceKeyHandle {
	if m != nil {
		return m.IfKeyHandle
	}
	return nil
}

// InterfaceL2SegmentRequestMsg is batched request message to bring vlans
// on interfaces
type InterfaceL2SegmentRequestMsg struct {
	Request []*InterfaceL2SegmentSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InterfaceL2SegmentRequestMsg) Reset()                    { *m = InterfaceL2SegmentRequestMsg{} }
func (m *InterfaceL2SegmentRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentRequestMsg) ProtoMessage()               {}
func (*InterfaceL2SegmentRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{38} }

func (m *InterfaceL2SegmentRequestMsg) GetRequest() []*InterfaceL2SegmentSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// InterfaceL2SegmentResponse is response to InterfaceL2SegmentSpec
type InterfaceL2SegmentResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *InterfaceL2SegmentResponse) Reset()                    { *m = InterfaceL2SegmentResponse{} }
func (m *InterfaceL2SegmentResponse) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponse) ProtoMessage()               {}
func (*InterfaceL2SegmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{39} }

func (m *InterfaceL2SegmentResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// InterfaceL2SegmentResponseMsg is batched response to InterfaceL2SegmentResponse
type InterfaceL2SegmentResponseMsg struct {
	Response []*InterfaceL2SegmentResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InterfaceL2SegmentResponseMsg) Reset()                    { *m = InterfaceL2SegmentResponseMsg{} }
func (m *InterfaceL2SegmentResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*InterfaceL2SegmentResponseMsg) ProtoMessage()               {}
func (*InterfaceL2SegmentResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{40} }

func (m *InterfaceL2SegmentResponseMsg) GetResponse() []*InterfaceL2SegmentResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*LifQueueInfo)(nil), "intf.LifQueueInfo")
	proto.RegisterType((*LifKeyHandle)(nil), "intf.LifKeyHandle")
	proto.RegisterType((*LifSpec)(nil), "intf.LifSpec")
	proto.RegisterType((*LifRequestMsg)(nil), "intf.LifRequestMsg")
	proto.RegisterType((*LifStatus)(nil), "intf.LifStatus")
	proto.RegisterType((*LifResponse)(nil), "intf.LifResponse")
	proto.RegisterType((*LifResponseMsg)(nil), "intf.LifResponseMsg")
	proto.RegisterType((*LifDeleteRequest)(nil), "intf.LifDeleteRequest")
	proto.RegisterType((*LifDeleteRequestMsg)(nil), "intf.LifDeleteRequestMsg")
	proto.RegisterType((*LifDeleteResponseMsg)(nil), "intf.LifDeleteResponseMsg")
	proto.RegisterType((*LifTxStats)(nil), "intf.LifTxStats")
	proto.RegisterType((*LifRxStats)(nil), "intf.LifRxStats")
	proto.RegisterType((*LifStats)(nil), "intf.LifStats")
	proto.RegisterType((*LifGetRequest)(nil), "intf.LifGetRequest")
	proto.RegisterType((*LifGetRequestMsg)(nil), "intf.LifGetRequestMsg")
	proto.RegisterType((*LifGetResponse)(nil), "intf.LifGetResponse")
	proto.RegisterType((*LifGetResponseMsg)(nil), "intf.LifGetResponseMsg")
	proto.RegisterType((*IfEnicInfo)(nil), "intf.IfEnicInfo")
	proto.RegisterType((*TrafficClassInfo)(nil), "intf.TrafficClassInfo")
	proto.RegisterType((*IfUplinkInfo)(nil), "intf.IfUplinkInfo")
	proto.RegisterType((*IfUplinkPCInfo)(nil), "intf.IfUplinkPCInfo")
	proto.RegisterType((*InterfaceKeyHandle)(nil), "intf.InterfaceKeyHandle")
	proto.RegisterType((*IfTunnelVxlanInfo)(nil), "intf.IfTunnelVxlanInfo")
	proto.RegisterType((*IfTunnelInfo)(nil), "intf.IfTunnelInfo")
	proto.RegisterType((*InterfaceSpec)(nil), "intf.InterfaceSpec")
	proto.RegisterType((*InterfaceRequestMsg)(nil), "intf.InterfaceRequestMsg")
	proto.RegisterType((*InterfaceStatus)(nil), "intf.InterfaceStatus")
	proto.RegisterType((*InterfaceResponse)(nil), "intf.InterfaceResponse")
	proto.RegisterType((*InterfaceResponseMsg)(nil), "intf.InterfaceResponseMsg")
	proto.RegisterType((*InterfaceDeleteRequest)(nil), "intf.InterfaceDeleteRequest")
	proto.RegisterType((*InterfaceDeleteRequestMsg)(nil), "intf.InterfaceDeleteRequestMsg")
	proto.RegisterType((*InterfaceDeleteResponseMsg)(nil), "intf.InterfaceDeleteResponseMsg")
	proto.RegisterType((*InterfaceStats)(nil), "intf.InterfaceStats")
	proto.RegisterType((*InterfaceGetRequest)(nil), "intf.InterfaceGetRequest")
	proto.RegisterType((*InterfaceGetRequestMsg)(nil), "intf.InterfaceGetRequestMsg")
	proto.RegisterType((*InterfaceGetResponse)(nil), "intf.InterfaceGetResponse")
	proto.RegisterType((*InterfaceGetResponseMsg)(nil), "intf.InterfaceGetResponseMsg")
	proto.RegisterType((*InterfaceL2SegmentSpec)(nil), "intf.InterfaceL2SegmentSpec")
	proto.RegisterType((*InterfaceL2SegmentRequestMsg)(nil), "intf.InterfaceL2SegmentRequestMsg")
	proto.RegisterType((*InterfaceL2SegmentResponse)(nil), "intf.InterfaceL2SegmentResponse")
	proto.RegisterType((*InterfaceL2SegmentResponseMsg)(nil), "intf.InterfaceL2SegmentResponseMsg")
	proto.RegisterEnum("intf.IfStatus", IfStatus_name, IfStatus_value)
	proto.RegisterEnum("intf.LifQType", LifQType_name, LifQType_value)
	proto.RegisterEnum("intf.LifPortType", LifPortType_name, LifPortType_value)
	proto.RegisterEnum("intf.IfType", IfType_name, IfType_value)
	proto.RegisterEnum("intf.IfEnicType", IfEnicType_name, IfEnicType_value)
	proto.RegisterEnum("intf.IfTunnelEncapType", IfTunnelEncapType_name, IfTunnelEncapType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Interface service

type InterfaceClient interface {
	// LIF related APIs
	LifCreate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error)
	LifUpdate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error)
	LifDelete(ctx context.Context, in *LifDeleteRequestMsg, opts ...grpc.CallOption) (*LifDeleteResponseMsg, error)
	LifGet(ctx context.Context, in *LifGetRequestMsg, opts ...grpc.CallOption) (*LifGetResponseMsg, error)
	// common APIs for all interfaces
	InterfaceCreate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error)
	InterfaceUpdate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error)
	InterfaceDelete(ctx context.Context, in *InterfaceDeleteRequestMsg, opts ...grpc.CallOption) (*InterfaceDeleteResponseMsg, error)
	InterfaceGet(ctx context.Context, in *InterfaceGetRequestMsg, opts ...grpc.CallOption) (*InterfaceGetResponseMsg, error)
	// APIs specific to Uplinks
	AddL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error)
	DelL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error)
}

type interfaceClient struct {
	cc *grpc.ClientConn
}

func NewInterfaceClient(cc *grpc.ClientConn) InterfaceClient {
	return &interfaceClient{cc}
}

func (c *interfaceClient) LifCreate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error) {
	out := new(LifResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifUpdate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error) {
	out := new(LifResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifDelete(ctx context.Context, in *LifDeleteRequestMsg, opts ...grpc.CallOption) (*LifDeleteResponseMsg, error) {
	out := new(LifDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) LifGet(ctx context.Context, in *LifGetRequestMsg, opts ...grpc.CallOption) (*LifGetResponseMsg, error) {
	out := new(LifGetResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/LifGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceCreate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error) {
	out := new(InterfaceResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceUpdate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error) {
	out := new(InterfaceResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceDelete(ctx context.Context, in *InterfaceDeleteRequestMsg, opts ...grpc.CallOption) (*InterfaceDeleteResponseMsg, error) {
	out := new(InterfaceDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) InterfaceGet(ctx context.Context, in *InterfaceGetRequestMsg, opts ...grpc.CallOption) (*InterfaceGetResponseMsg, error) {
	out := new(InterfaceGetResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/InterfaceGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) AddL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error) {
	out := new(InterfaceL2SegmentResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/AddL2SegmentOnUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) DelL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error) {
	out := new(InterfaceL2SegmentResponseMsg)
	err := grpc.Invoke(ctx, "/intf.Interface/DelL2SegmentOnUplink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Interface service

type InterfaceServer interface {
	// LIF related APIs
	LifCreate(context.Context, *LifRequestMsg) (*LifResponseMsg, error)
	LifUpdate(context.Context, *LifRequestMsg) (*LifResponseMsg, error)
	LifDelete(context.Context, *LifDeleteRequestMsg) (*LifDeleteResponseMsg, error)
	LifGet(context.Context, *LifGetRequestMsg) (*LifGetResponseMsg, error)
	// common APIs for all interfaces
	InterfaceCreate(context.Context, *InterfaceRequestMsg) (*InterfaceResponseMsg, error)
	InterfaceUpdate(context.Context, *InterfaceRequestMsg) (*InterfaceResponseMsg, error)
	InterfaceDelete(context.Context, *InterfaceDeleteRequestMsg) (*InterfaceDeleteResponseMsg, error)
	InterfaceGet(context.Context, *InterfaceGetRequestMsg) (*InterfaceGetResponseMsg, error)
	// APIs specific to Uplinks
	AddL2SegmentOnUplink(context.Context, *InterfaceL2SegmentRequestMsg) (*InterfaceL2SegmentResponseMsg, error)
	DelL2SegmentOnUplink(context.Context, *InterfaceL2SegmentRequestMsg) (*InterfaceL2SegmentResponseMsg, error)
}

func RegisterInterfaceServer(s *grpc.Server, srv InterfaceServer) {
	s.RegisterService(&_Interface_serviceDesc, srv)
}

func _Interface_LifCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifCreate(ctx, req.(*LifRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifUpdate(ctx, req.(*LifRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifDelete(ctx, req.(*LifDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_LifGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).LifGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/LifGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).LifGet(ctx, req.(*LifGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceCreate(ctx, req.(*InterfaceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceUpdate(ctx, req.(*InterfaceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceDelete(ctx, req.(*InterfaceDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_InterfaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).InterfaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/InterfaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).InterfaceGet(ctx, req.(*InterfaceGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_AddL2SegmentOnUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceL2SegmentRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).AddL2SegmentOnUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/AddL2SegmentOnUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).AddL2SegmentOnUplink(ctx, req.(*InterfaceL2SegmentRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_DelL2SegmentOnUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceL2SegmentRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).DelL2SegmentOnUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intf.Interface/DelL2SegmentOnUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).DelL2SegmentOnUplink(ctx, req.(*InterfaceL2SegmentRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intf.Interface",
	HandlerType: (*InterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LifCreate",
			Handler:    _Interface_LifCreate_Handler,
		},
		{
			MethodName: "LifUpdate",
			Handler:    _Interface_LifUpdate_Handler,
		},
		{
			MethodName: "LifDelete",
			Handler:    _Interface_LifDelete_Handler,
		},
		{
			MethodName: "LifGet",
			Handler:    _Interface_LifGet_Handler,
		},
		{
			MethodName: "InterfaceCreate",
			Handler:    _Interface_InterfaceCreate_Handler,
		},
		{
			MethodName: "InterfaceUpdate",
			Handler:    _Interface_InterfaceUpdate_Handler,
		},
		{
			MethodName: "InterfaceDelete",
			Handler:    _Interface_InterfaceDelete_Handler,
		},
		{
			MethodName: "InterfaceGet",
			Handler:    _Interface_InterfaceGet_Handler,
		},
		{
			MethodName: "AddL2SegmentOnUplink",
			Handler:    _Interface_AddL2SegmentOnUplink_Handler,
		},
		{
			MethodName: "DelL2SegmentOnUplink",
			Handler:    _Interface_DelL2SegmentOnUplink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interface.proto",
}

func init() { proto.RegisterFile("interface.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 2656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xdb, 0x6e, 0xe3, 0xd6,
	0xd5, 0xb6, 0x2c, 0x59, 0x87, 0x25, 0x59, 0xa6, 0xb7, 0x4f, 0xb2, 0x33, 0x93, 0x38, 0x4c, 0xfe,
	0x7f, 0x06, 0xfe, 0x31, 0x4e, 0xac, 0xb1, 0x27, 0x83, 0xff, 0xcf, 0x8f, 0xc2, 0x63, 0x29, 0x33,
	0x6a, 0x6c, 0x59, 0xde, 0xa2, 0xdd, 0xa4, 0x45, 0x41, 0x70, 0xa4, 0xcd, 0x09, 0x6b, 0x89, 0xa4,
	0x49, 0x6a, 0xc0, 0x29, 0xd0, 0x9b, 0xde, 0x14, 0xe8, 0x45, 0x7b, 0xd3, 0xde, 0x14, 0x7d, 0x8b,
	0xde, 0xf5, 0x05, 0xfa, 0x00, 0x45, 0x5f, 0xa0, 0x4f, 0xd0, 0x07, 0xe8, 0x45, 0xb1, 0x0f, 0xdc,
	0x3c, 0x88, 0xce, 0x1c, 0x82, 0x14, 0xbd, 0x92, 0xb8, 0xd6, 0xb7, 0xd6, 0x5e, 0x6b, 0xaf, 0xbd,
	0xd7, 0x81, 0x84, 0x15, 0xcb, 0x0e, 0x88, 0x67, 0x1a, 0x23, 0xb2, 0xef, 0x7a, 0x4e, 0xe0, 0xa0,
	0x92, 0x65, 0x07, 0xe6, 0x4e, 0x3d, 0x78, 0xe5, 0x12, 0x9f, 0x93, 0x76, 0x56, 0x26, 0x6d, 0x9f,
	0xbc, 0x98, 0x12, 0x3b, 0x10, 0x84, 0xda, 0x8d, 0x23, 0x78, 0xea, 0x39, 0x34, 0x4e, 0x2d, 0xf3,
	0x62, 0x46, 0x66, 0xa4, 0x67, 0x9b, 0x0e, 0xfa, 0x18, 0x96, 0x6e, 0xa8, 0x6c, 0xab, 0xb0, 0x5b,
	0xb8, 0xdf, 0x6c, 0x37, 0xf7, 0xa9, 0xba, 0x7d, 0x0a, 0xd1, 0x5e, 0xb9, 0x04, 0x73, 0x26, 0xda,
	0x86, 0xea, 0x0d, 0x15, 0xd1, 0xad, 0x71, 0x6b, 0x71, 0xb7, 0x70, 0x7f, 0x19, 0x57, 0xd8, 0x73,
	0x6f, 0xac, 0x7e, 0xcd, 0x14, 0x7e, 0x49, 0x5e, 0x3d, 0x33, 0xec, 0xf1, 0x84, 0xa0, 0x2d, 0x28,
	0x4f, 0x2c, 0x93, 0x02, 0xa9, 0xc6, 0xca, 0xb3, 0x05, 0xbc, 0x34, 0xb1, 0xcc, 0xde, 0x18, 0x7d,
	0x00, 0x40, 0x19, 0xdf, 0x30, 0x18, 0xd3, 0x52, 0x7e, 0xb6, 0x80, 0x6b, 0x13, 0xcb, 0xe4, 0x92,
	0x4f, 0x56, 0x60, 0xf9, 0x9a, 0xbc, 0xd2, 0x1d, 0x4f, 0x60, 0xd4, 0x3f, 0x16, 0xa1, 0x72, 0x6a,
	0x99, 0x43, 0x97, 0x8c, 0xd0, 0x7f, 0x41, 0x69, 0x4a, 0x02, 0x83, 0x29, 0xad, 0xb7, 0x57, 0xf7,
	0xb9, 0xbf, 0xe7, 0xcf, 0x7f, 0x46, 0x46, 0xc1, 0x19, 0x09, 0x0c, 0xcc, 0xd8, 0xe8, 0x51, 0x46,
	0x07, 0x5b, 0xa7, 0xde, 0x46, 0xd2, 0x2d, 0x69, 0x28, 0xae, 0x5f, 0x93, 0x57, 0xe7, 0x9e, 0xb0,
	0x7a, 0x1b, 0xaa, 0x53, 0x63, 0xa4, 0x1b, 0xe3, 0xb1, 0xd7, 0x2a, 0xee, 0x16, 0xee, 0x97, 0x70,
	0x65, 0x6a, 0x8c, 0x8e, 0xc7, 0x63, 0x0f, 0xed, 0x43, 0xcd, 0x75, 0xbc, 0x40, 0x67, 0xbb, 0x54,
	0x62, 0xbb, 0xb4, 0x2a, 0xd5, 0x0d, 0x1c, 0x2f, 0x60, 0x1b, 0x55, 0x75, 0xc5, 0x3f, 0xaa, 0x8a,
	0xe1, 0xed, 0xd9, 0xb4, 0xb5, 0xc4, 0xf7, 0x8a, 0x3e, 0xf7, 0x67, 0x53, 0xf4, 0x00, 0xaa, 0x2e,
	0x21, 0x9e, 0x3e, 0xb1, 0xcc, 0x56, 0xf9, 0x56, 0xc3, 0x2a, 0x14, 0x73, 0x6a, 0x99, 0xe8, 0x00,
	0x1a, 0xc6, 0x78, 0x6a, 0xd9, 0xba, 0x1f, 0x18, 0xc1, 0xcc, 0x6f, 0x55, 0x92, 0x21, 0xea, 0x99,
	0x43, 0x46, 0xc5, 0x75, 0x86, 0xe1, 0x0f, 0x68, 0x0f, 0xca, 0x2c, 0x30, 0x7e, 0xab, 0xba, 0x5b,
	0x4c, 0xe9, 0x97, 0x21, 0xc7, 0x02, 0x81, 0x54, 0x58, 0x7e, 0x39, 0x31, 0xa8, 0x76, 0xcf, 0x72,
	0x75, 0x62, 0xb7, 0x6a, 0xbb, 0x85, 0xfb, 0x55, 0x5c, 0xa7, 0xc4, 0x21, 0xa5, 0x75, 0x6d, 0xb4,
	0x03, 0x55, 0x63, 0x32, 0x99, 0xce, 0x26, 0x81, 0xd5, 0x02, 0xc6, 0x96, 0xcf, 0xea, 0x63, 0x58,
	0x3e, 0xb5, 0x4c, 0x4c, 0x6e, 0x66, 0xc4, 0x0f, 0xce, 0xfc, 0x17, 0xe8, 0x1e, 0x54, 0x3c, 0xfe,
	0xd4, 0x2a, 0xb0, 0xd5, 0x97, 0xe5, 0xea, 0x34, 0x86, 0x38, 0xe2, 0xaa, 0x5f, 0x43, 0x8d, 0xd2,
	0xb8, 0xc9, 0x0f, 0xf8, 0xb9, 0x10, 0x3e, 0x16, 0x72, 0x7d, 0xa4, 0xa7, 0x44, 0xc0, 0xef, 0xce,
	0x1f, 0xa3, 0xc4, 0x21, 0x52, 0x5f, 0x40, 0x9d, 0x19, 0xe5, 0xbb, 0x8e, 0xed, 0x13, 0xf4, 0x09,
	0x80, 0xe1, 0x5a, 0x69, 0xe5, 0x8a, 0x38, 0x3c, 0xc7, 0xae, 0x15, 0xa9, 0x37, 0xa2, 0xbf, 0xe8,
	0x1e, 0x94, 0x05, 0x98, 0x9f, 0x9c, 0x95, 0xd8, 0x05, 0x8e, 0x15, 0x6c, 0xf5, 0x07, 0xd0, 0x4c,
	0x2c, 0x44, 0xdd, 0x7f, 0x00, 0x55, 0x4f, 0x3c, 0x0a, 0xff, 0xe3, 0x73, 0x12, 0xe1, 0xb0, 0x84,
	0xa8, 0x37, 0xa0, 0x9c, 0x5a, 0x66, 0x87, 0x4c, 0x48, 0x40, 0xc4, 0x26, 0x7e, 0xcf, 0xa7, 0x5c,
	0x7d, 0x0a, 0x6b, 0xd9, 0x25, 0xa9, 0xe1, 0x9f, 0x66, 0xe3, 0xb6, 0x29, 0x15, 0xa5, 0xb0, 0x71,
	0x00, 0x9f, 0xc2, 0x7a, 0x82, 0x19, 0x6f, 0x41, 0x76, 0xbb, 0x8b, 0xaf, 0xd9, 0x6e, 0xf5, 0xf7,
	0x45, 0x80, 0x53, 0xcb, 0xd4, 0x42, 0xfa, 0xec, 0xa3, 0x5d, 0x68, 0x68, 0xa1, 0xfe, 0x85, 0x67,
	0x4c, 0x89, 0xaf, 0x9f, 0x5f, 0xb3, 0x7d, 0x28, 0x61, 0xd0, 0x42, 0x4e, 0x3a, 0xbf, 0x46, 0x9f,
	0xc0, 0xba, 0x16, 0xea, 0x97, 0xb6, 0x35, 0x32, 0xfc, 0x20, 0x81, 0x5c, 0x64, 0xc8, 0x55, 0x2d,
	0x14, 0x2c, 0x29, 0xf0, 0x10, 0x36, 0xb5, 0x50, 0x3f, 0xa3, 0x27, 0x36, 0x23, 0xc2, 0xef, 0xf9,
	0x9a, 0x16, 0x4a, 0x66, 0x46, 0xe8, 0x89, 0xe7, 0x18, 0xe3, 0x8c, 0x50, 0x29, 0x12, 0x92, 0x4c,
	0x29, 0xf4, 0x3e, 0xd4, 0xa9, 0xd0, 0xab, 0x80, 0x23, 0x97, 0x18, 0xb2, 0xa6, 0x85, 0x8c, 0x72,
	0x7e, 0x8d, 0x1e, 0xc0, 0x5a, 0xc2, 0x74, 0x89, 0x2b, 0x33, 0x9c, 0x22, 0x2d, 0x8f, 0xe0, 0x07,
	0xb0, 0x91, 0x32, 0x5c, 0x0a, 0x54, 0x98, 0x00, 0x4a, 0xd8, 0x9d, 0x16, 0x89, 0xcd, 0x96, 0x22,
	0xd5, 0x48, 0x44, 0xf2, 0x22, 0x91, 0x0d, 0x28, 0x6b, 0xa1, 0xae, 0xf9, 0x0e, 0xbb, 0xfd, 0x25,
	0xbc, 0xa4, 0x85, 0x9a, 0xef, 0xa8, 0x7f, 0x2e, 0xb3, 0xb8, 0x60, 0x11, 0x97, 0xff, 0x86, 0x15,
	0x1c, 0xea, 0x26, 0xdf, 0x85, 0xc0, 0x09, 0x8c, 0x89, 0x08, 0xcd, 0x32, 0x16, 0xa1, 0xd1, 0x28,
	0x91, 0xc6, 0x2f, 0xc6, 0x39, 0x51, 0x54, 0x00, 0xa7, 0xe2, 0x87, 0x43, 0x7d, 0x26, 0x36, 0x21,
	0x46, 0xf2, 0x60, 0xac, 0xe2, 0xbc, 0xf8, 0xe1, 0x50, 0x9f, 0xca, 0x6d, 0x88, 0x45, 0x44, 0x28,
	0x70, 0x7e, 0xfc, 0x70, 0xa8, 0x3f, 0x97, 0x1b, 0x11, 0x0b, 0x2d, 0x45, 0x42, 0xb9, 0xf1, 0xa3,
	0x42, 0x6c, 0xcf, 0x9c, 0x28, 0x2e, 0x35, 0x9c, 0x8c, 0x5f, 0xc2, 0x74, 0x89, 0xe3, 0xe1, 0x50,
	0x70, 0x4e, 0xfc, 0x52, 0x86, 0x4b, 0x01, 0x11, 0x0c, 0x9c, 0x1b, 0xbf, 0x94, 0xd9, 0x52, 0xa4,
	0x16, 0x89, 0xcc, 0xc5, 0x6f, 0x1b, 0xaa, 0x38, 0xd4, 0xc7, 0x9e, 0xe3, 0xfa, 0x2c, 0x41, 0x97,
	0x70, 0x05, 0x87, 0x1d, 0xfa, 0x88, 0xee, 0x00, 0xe0, 0x50, 0xb7, 0x1d, 0xfd, 0xf9, 0xcc, 0xf4,
	0x5b, 0x75, 0xc6, 0xac, 0xe2, 0xb0, 0xef, 0x3c, 0x99, 0x99, 0x3e, 0x7a, 0x0f, 0x6a, 0x38, 0xd4,
	0x89, 0xe7, 0x39, 0x9e, 0xdf, 0x6a, 0x44, 0xcc, 0x2e, 0x7b, 0xa6, 0xa7, 0x02, 0x87, 0xba, 0xe7,
	0xfb, 0xad, 0x65, 0x7e, 0x2a, 0x70, 0x88, 0x7d, 0x56, 0x31, 0x70, 0xa8, 0x8f, 0xbc, 0x51, 0x24,
	0xd7, 0x64, 0xdc, 0x3a, 0x0e, 0x4f, 0xbc, 0x91, 0x10, 0x4d, 0x1d, 0x81, 0x47, 0x87, 0xad, 0x95,
	0xf4, 0x11, 0x78, 0x74, 0x28, 0xb4, 0x08, 0xc4, 0x41, 0xfb, 0xb3, 0x96, 0x12, 0x69, 0xe1, 0x90,
	0x83, 0xf6, 0x67, 0x69, 0x4c, 0xfb, 0xe8, 0xa8, 0xb5, 0x9a, 0xc6, 0xb4, 0x8f, 0x8e, 0xd2, 0x98,
	0xa3, 0x83, 0x83, 0x16, 0x4a, 0x63, 0x8e, 0x0e, 0x0e, 0xd0, 0xc7, 0xd0, 0x4c, 0xac, 0xf5, 0x69,
	0xfb, 0xb0, 0xb5, 0xc6, 0x40, 0x0d, 0xb9, 0xd8, 0xa7, 0xed, 0xc3, 0x0c, 0xea, 0xe8, 0xe0, 0x71,
	0x6b, 0x3d, 0x83, 0x3a, 0x3a, 0x78, 0x8c, 0xee, 0x81, 0x92, 0xbc, 0x04, 0xfa, 0xd4, 0x08, 0x5b,
	0x1b, 0xd9, 0x5b, 0x70, 0x66, 0x84, 0xea, 0x73, 0xa8, 0x8a, 0x7a, 0x41, 0x0b, 0x72, 0x45, 0x24,
	0x37, 0x91, 0xd4, 0x15, 0x99, 0x5b, 0x05, 0x1d, 0x47, 0x00, 0x8a, 0x15, 0x17, 0x4e, 0x24, 0xf4,
	0x18, 0x8b, 0x23, 0xac, 0xf8, 0xa3, 0xfe, 0xae, 0xc0, 0xaa, 0xef, 0x53, 0x12, 0xfc, 0x7b, 0x6a,
	0x07, 0x6d, 0x14, 0x7d, 0x66, 0x5a, 0x91, 0xe1, 0x9b, 0xa9, 0xba, 0xe8, 0x63, 0xce, 0x54, 0x8f,
	0x59, 0x51, 0x8b, 0xad, 0xe2, 0x75, 0x31, 0x53, 0x5e, 0xd6, 0xa4, 0x6c, 0x0c, 0x8c, 0x6b, 0xcb,
	0x2f, 0x0b, 0xac, 0xb2, 0x32, 0x96, 0xa8, 0xe2, 0x1f, 0x42, 0xc9, 0x77, 0xc9, 0x48, 0xb8, 0x96,
	0xe9, 0x2a, 0x18, 0xeb, 0x8d, 0xeb, 0xf6, 0x1b, 0xfa, 0xd1, 0x85, 0xd5, 0xb4, 0x0d, 0xbc, 0x4e,
	0x66, 0x0b, 0xfc, 0x7a, 0xda, 0x93, 0xb9, 0x1a, 0xff, 0xf7, 0x02, 0x40, 0xcf, 0xec, 0xda, 0xd6,
	0x88, 0x35, 0xdb, 0x0f, 0xa0, 0x46, 0x6c, 0x6b, 0xa4, 0x27, 0x1a, 0x6e, 0x25, 0xea, 0x74, 0x28,
	0x88, 0x77, 0x92, 0x44, 0xfc, 0x43, 0xff, 0x0f, 0xab, 0xb4, 0xd5, 0x79, 0xd3, 0x70, 0x35, 0x27,
	0xec, 0x49, 0x46, 0xec, 0x43, 0x68, 0xc8, 0x41, 0x80, 0xf6, 0xe3, 0x45, 0xd6, 0x8c, 0xd6, 0x25,
	0x8d, 0xf5, 0xe4, 0xf5, 0xa8, 0xed, 0x25, 0xbe, 0xcf, 0x32, 0x6a, 0x19, 0x83, 0xe8, 0x7c, 0x09,
	0xbf, 0xf1, 0xc4, 0x1e, 0x19, 0xae, 0xce, 0x3a, 0x45, 0x6b, 0x2c, 0x3a, 0xda, 0x3a, 0x23, 0x5e,
	0x4d, 0x0c, 0xbb, 0x37, 0x56, 0xff, 0x51, 0x00, 0x45, 0xf3, 0x0c, 0xd3, 0xb4, 0x46, 0x27, 0x13,
	0xc3, 0xf7, 0x99, 0xab, 0xbb, 0xd0, 0x18, 0x3b, 0xc1, 0xc1, 0x8d, 0xee, 0x8e, 0x58, 0x6f, 0x59,
	0x60, 0xcd, 0x23, 0x30, 0xda, 0x60, 0x44, 0x5b, 0xcb, 0x3b, 0x00, 0x96, 0xab, 0x8f, 0x7d, 0xce,
	0x5f, 0xe4, 0xcd, 0xa5, 0xe5, 0x76, 0x7c, 0xc6, 0xed, 0xc2, 0xc6, 0x98, 0x98, 0xc6, 0x6c, 0x12,
	0xe8, 0x01, 0xd7, 0xad, 0x8f, 0xa8, 0x72, 0x11, 0xb6, 0xd5, 0x7d, 0x3a, 0xd2, 0x24, 0x57, 0xc5,
	0x6b, 0x02, 0x9f, 0x24, 0xa2, 0x4b, 0xd8, 0x49, 0x89, 0xd3, 0x7b, 0xcb, 0x27, 0x99, 0xa9, 0xe1,
	0xb6, 0x4a, 0x2c, 0x88, 0xdb, 0x73, 0xba, 0x58, 0xaf, 0x7c, 0x66, 0xb8, 0x78, 0x33, 0x48, 0x50,
	0x35, 0x27, 0xa2, 0xab, 0x7f, 0x29, 0x40, 0xa3, 0x67, 0x5e, 0xba, 0x13, 0xcb, 0xbe, 0x66, 0xee,
	0x26, 0x9b, 0xfe, 0x42, 0xba, 0xe9, 0xdf, 0x87, 0x35, 0xdb, 0x08, 0xac, 0x97, 0x44, 0x4f, 0x45,
	0x83, 0x8f, 0x51, 0xab, 0x9c, 0x75, 0x9a, 0x88, 0xc9, 0x7c, 0xd8, 0x8a, 0xd9, 0xb0, 0xf5, 0x60,
	0xc3, 0x0b, 0xd3, 0xfb, 0xa2, 0x5b, 0xb6, 0xe9, 0xb0, 0x00, 0xca, 0xf6, 0x2d, 0x1b, 0x13, 0x8c,
	0xbc, 0x30, 0x4b, 0x53, 0xff, 0x59, 0x80, 0x66, 0xe4, 0xc9, 0xe0, 0x84, 0xf9, 0xa2, 0xc2, 0xf2,
	0x8c, 0x3d, 0xeb, 0xee, 0x28, 0xe1, 0x50, 0x9d, 0x13, 0x07, 0xa3, 0xff, 0x78, 0xa7, 0xd0, 0x7d,
	0x50, 0xa6, 0x64, 0xfa, 0x9c, 0x78, 0x7a, 0x3c, 0x29, 0x2c, 0xed, 0x16, 0xef, 0x97, 0x70, 0x93,
	0xd3, 0x7b, 0xd1, 0xb8, 0x60, 0x01, 0xea, 0x45, 0x03, 0x75, 0x3c, 0xc3, 0x7e, 0x04, 0x0d, 0x39,
	0x66, 0x47, 0x93, 0x2c, 0x1d, 0x56, 0xeb, 0x92, 0xda, 0x1b, 0xa3, 0xbb, 0x50, 0x9b, 0x1f, 0x67,
	0xab, 0xb7, 0x4f, 0xb3, 0x3e, 0xac, 0xf6, 0x4c, 0x6d, 0x66, 0xdb, 0x64, 0x72, 0x15, 0xd2, 0x9b,
	0x23, 0x32, 0xc2, 0xc4, 0x19, 0x19, 0x13, 0x3d, 0x20, 0xae, 0x2c, 0x10, 0x3c, 0x73, 0xf7, 0x06,
	0xe2, 0x12, 0xe2, 0x2a, 0x83, 0x68, 0xc4, 0xa5, 0xfd, 0xb5, 0x47, 0xa6, 0x4e, 0x40, 0x18, 0x7e,
	0xf1, 0x16, 0x7c, 0x8d, 0x63, 0x34, 0xe2, 0xaa, 0xbf, 0x61, 0x07, 0x95, 0xaf, 0xca, 0x16, 0x7c,
	0x04, 0xc0, 0x2f, 0x74, 0x22, 0x07, 0x6d, 0x45, 0x39, 0x88, 0xe3, 0xba, 0x94, 0xcf, 0x52, 0x51,
	0x8d, 0x44, 0x7f, 0xd1, 0x63, 0x80, 0x97, 0x21, 0xcb, 0x01, 0x34, 0x24, 0x7c, 0xe5, 0x8c, 0x9c,
	0xf4, 0x8a, 0x8e, 0xf5, 0x2f, 0xa3, 0x87, 0x27, 0x8d, 0x68, 0x45, 0x2a, 0xa9, 0xfe, 0xa9, 0x04,
	0xcb, 0x72, 0xc7, 0xdf, 0x66, 0xb2, 0xff, 0x3c, 0xbf, 0x6e, 0xb5, 0x84, 0x0d, 0x73, 0x41, 0x4c,
	0x57, 0xaf, 0x5d, 0x28, 0x31, 0x87, 0x8b, 0xcc, 0xe1, 0x86, 0x34, 0x9c, 0x7a, 0xc9, 0x38, 0x73,
	0xc3, 0x76, 0xe9, 0xf5, 0xc3, 0xf6, 0x21, 0x34, 0x2c, 0x53, 0x67, 0x19, 0x9d, 0xed, 0x4a, 0x39,
	0x59, 0xb4, 0xe3, 0xb4, 0xff, 0x6c, 0x01, 0x83, 0x15, 0x17, 0x81, 0xff, 0x85, 0xa6, 0x65, 0xea,
	0xe2, 0x86, 0x31, 0xb9, 0x4a, 0x32, 0xa5, 0x27, 0xd3, 0xca, 0xb3, 0x05, 0xdc, 0xb0, 0x92, 0x69,
	0xe6, 0x18, 0x56, 0x63, 0x59, 0x57, 0x2c, 0x5b, 0x65, 0xe2, 0xeb, 0x69, 0x71, 0x7e, 0x97, 0x9f,
	0x2d, 0xe0, 0x66, 0xa4, 0x60, 0x90, 0x5c, 0x3e, 0x60, 0x11, 0xe3, 0xf2, 0xb5, 0xf4, 0xf2, 0xf1,
	0x61, 0xe1, 0xcb, 0x27, 0x0e, 0xcf, 0x11, 0x34, 0x83, 0x50, 0xbf, 0x71, 0x7c, 0xdd, 0x18, 0x05,
	0x96, 0x63, 0xf3, 0x96, 0x93, 0x16, 0x5b, 0x9a, 0x41, 0x2f, 0xce, 0x87, 0xc7, 0x9c, 0x8c, 0x1b,
	0x41, 0x78, 0xe1, 0xf8, 0xe2, 0x89, 0x8a, 0x79, 0x69, 0xb1, 0xfa, 0x2d, 0x62, 0x5e, 0x42, 0xec,
	0x49, 0x0d, 0x2a, 0x96, 0xc9, 0x4f, 0x4d, 0x07, 0xd6, 0x64, 0x84, 0xdf, 0xa0, 0xb3, 0x48, 0x1d,
	0xb0, 0xb8, 0xb3, 0xf8, 0x09, 0xac, 0xc4, 0x1c, 0x1e, 0xc2, 0xff, 0x61, 0x97, 0xf8, 0x5b, 0xdf,
	0x3d, 0x54, 0xe5, 0xab, 0x87, 0xf7, 0xe6, 0x6e, 0x7c, 0x7c, 0xdf, 0xd9, 0xf5, 0x8e, 0x4d, 0x7c,
	0xd7, 0xd7, 0x0f, 0x0f, 0x32, 0x6d, 0xcc, 0x46, 0xd6, 0xa1, 0xf4, 0x4b, 0x88, 0x2f, 0x61, 0x7d,
	0x6e, 0x51, 0xba, 0x31, 0x0f, 0xe7, 0x3a, 0x95, 0xad, 0x8c, 0xa2, 0x9c, 0x66, 0xe5, 0x17, 0xb0,
	0x29, 0xd9, 0xef, 0xf4, 0x5a, 0xe2, 0x3b, 0x5d, 0x51, 0x75, 0x08, 0xdb, 0xf9, 0xcb, 0x53, 0x87,
	0x1e, 0x65, 0x23, 0x7d, 0x27, 0xa3, 0xf4, 0x96, 0x17, 0x15, 0x67, 0xb0, 0x33, 0x07, 0xf9, 0x0e,
	0xaf, 0x2b, 0x7e, 0xbd, 0x08, 0xcd, 0x54, 0x2c, 0x68, 0x3f, 0xd9, 0xb4, 0x67, 0x53, 0x3d, 0x08,
	0x75, 0xd7, 0x18, 0x5d, 0x13, 0xd1, 0xe7, 0x57, 0x70, 0xc3, 0x9e, 0x4d, 0xb5, 0x70, 0xc0, 0x69,
	0xb4, 0x1d, 0x12, 0x28, 0x36, 0xd3, 0xb1, 0x9d, 0xa9, 0x60, 0x60, 0x18, 0x36, 0xca, 0x45, 0x7a,
	0xbc, 0x58, 0x4f, 0x51, 0xea, 0xc1, 0x59, 0x3d, 0x5e, 0xa4, 0xa7, 0x24, 0xf5, 0x88, 0x39, 0x15,
	0xb5, 0x61, 0x83, 0x22, 0x7c, 0xe2, 0xfb, 0xf4, 0x16, 0xe9, 0x96, 0x6d, 0x05, 0x46, 0x40, 0x78,
	0xe7, 0x56, 0xc1, 0x6b, 0xf6, 0x6c, 0x3a, 0x14, 0xbc, 0x9e, 0x60, 0xa1, 0x43, 0xd8, 0x4c, 0xc9,
	0xf0, 0x23, 0x31, 0x26, 0x63, 0x96, 0xd2, 0x2a, 0x78, 0x3d, 0x21, 0x84, 0x23, 0x9e, 0xfa, 0xf3,
	0xc4, 0xa5, 0x7c, 0xfb, 0x39, 0xe4, 0xbb, 0x1d, 0x96, 0xb3, 0xc4, 0x59, 0x4d, 0x4f, 0x1b, 0x0f,
	0xb3, 0x27, 0x65, 0x3b, 0xa3, 0x31, 0x6f, 0xe6, 0xf8, 0x43, 0x21, 0x71, 0x91, 0x92, 0x93, 0xc7,
	0xbd, 0xd4, 0xe4, 0x91, 0x9b, 0x5e, 0xf8, 0xfc, 0xf1, 0x76, 0x17, 0x17, 0xed, 0xa5, 0xa7, 0x90,
	0xf5, 0x1c, 0xb4, 0x9c, 0x45, 0x2e, 0x60, 0x2b, 0xcf, 0x36, 0x7e, 0x2d, 0xb2, 0xf7, 0x7c, 0x27,
	0xcf, 0xdb, 0xb9, 0xab, 0xfe, 0xd7, 0x42, 0x62, 0xff, 0x4e, 0xdb, 0x43, 0xde, 0x84, 0xbd, 0x4d,
	0x39, 0xd6, 0x60, 0x2b, 0x6e, 0xe8, 0xf2, 0x02, 0x79, 0x77, 0x3f, 0xfe, 0x0a, 0x21, 0x57, 0x88,
	0xa3, 0xb9, 0x2e, 0xb9, 0xc9, 0x91, 0xe5, 0x73, 0x58, 0x16, 0x03, 0x8f, 0xd0, 0x55, 0x7c, 0xdd,
	0xa1, 0x48, 0x0c, 0x40, 0xea, 0x15, 0xdc, 0x99, 0x77, 0xea, 0x6d, 0x92, 0x48, 0x6a, 0x27, 0xf2,
	0x93, 0x48, 0x42, 0xef, 0x3b, 0xe6, 0x78, 0xf5, 0xa7, 0x70, 0xf7, 0x76, 0x75, 0xd4, 0xce, 0xcf,
	0xe7, 0xa2, 0xba, 0x7b, 0x9b, 0xa1, 0xf3, 0xb1, 0xdd, 0xeb, 0x40, 0x35, 0xaa, 0x5d, 0x08, 0x41,
	0xb3, 0xf7, 0x85, 0x3e, 0xd4, 0x8e, 0xb5, 0xcb, 0xa1, 0xde, 0x3f, 0xef, 0x77, 0x95, 0x05, 0xa4,
	0x40, 0x23, 0xa6, 0x5d, 0x0e, 0x94, 0x42, 0x1a, 0xd5, 0x39, 0xff, 0x51, 0x5f, 0x59, 0xdc, 0xfb,
	0x5b, 0x81, 0xbd, 0xc4, 0x60, 0x5f, 0x81, 0xd0, 0x16, 0xac, 0x9d, 0xf6, 0xbe, 0xd0, 0x2f, 0x2e,
	0xbb, 0x97, 0x5d, 0x5d, 0xfb, 0x7a, 0xd0, 0x8d, 0x74, 0xb5, 0x60, 0x3d, 0xc3, 0x38, 0xee, 0x9c,
	0xf5, 0xfa, 0x4a, 0x01, 0x6d, 0xc0, 0x6a, 0x86, 0xa3, 0x7d, 0xa5, 0x2c, 0xe6, 0x90, 0xf1, 0x57,
	0x4a, 0x11, 0xdd, 0x81, 0x56, 0x96, 0xdc, 0x39, 0x3b, 0xd6, 0x87, 0xdd, 0x7e, 0x47, 0x29, 0xdd,
	0xc6, 0xc5, 0xdd, 0x93, 0x2b, 0x65, 0x29, 0x47, 0xe5, 0xc9, 0x85, 0x52, 0xce, 0x21, 0x77, 0x2f,
	0x94, 0xca, 0xde, 0x6f, 0x0b, 0xec, 0x03, 0x41, 0xf4, 0xdd, 0x06, 0x6d, 0x02, 0xa2, 0xb0, 0xc1,
	0x39, 0xd6, 0x52, 0x9e, 0x09, 0xf1, 0x98, 0xde, 0x39, 0x3b, 0x56, 0x0a, 0x91, 0x29, 0x31, 0x79,
	0x70, 0xa8, 0xf7, 0xfa, 0x4f, 0x71, 0x77, 0x38, 0x54, 0x16, 0xd1, 0x7b, 0xb0, 0x35, 0xc7, 0xed,
	0x72, 0x66, 0x31, 0x67, 0xa5, 0x93, 0x61, 0x4f, 0x29, 0xed, 0x5d, 0x43, 0x99, 0x37, 0xa2, 0x22,
	0x32, 0x49, 0x2b, 0x12, 0x94, 0x6e, 0xbf, 0x77, 0x22, 0x63, 0xc5, 0x28, 0x97, 0x83, 0xd3, 0x5e,
	0xff, 0x4b, 0xbe, 0xa9, 0x69, 0x9a, 0x3e, 0x38, 0x51, 0x8a, 0x49, 0xa8, 0x76, 0xd9, 0xef, 0x77,
	0x4f, 0xd9, 0x62, 0x10, 0xbf, 0x6a, 0x10, 0x82, 0x54, 0x73, 0xd6, 0xf7, 0x14, 0xf9, 0x72, 0xd8,
	0x7d, 0xaa, 0x14, 0xa8, 0x03, 0x29, 0xf2, 0xe0, 0xea, 0xf4, 0xb8, 0xaf, 0x2c, 0xd2, 0xd3, 0x91,
	0xa2, 0x77, 0x7a, 0xb8, 0x7b, 0xa2, 0x29, 0xc5, 0x3d, 0x1c, 0x4f, 0x3c, 0x72, 0xa6, 0x40, 0x77,
	0x61, 0x9b, 0x5a, 0xc5, 0x0c, 0xd2, 0xbb, 0xfd, 0x93, 0xe3, 0x41, 0x6a, 0xed, 0xf7, 0x61, 0x27,
	0x97, 0x7d, 0xf5, 0x15, 0x5d, 0xac, 0xd0, 0xfe, 0x55, 0x19, 0x6a, 0xf2, 0x1a, 0xa0, 0xc7, 0xec,
	0x43, 0xd2, 0x89, 0x47, 0x8c, 0x80, 0xa0, 0xb5, 0xc4, 0xd7, 0x96, 0xe8, 0xce, 0xef, 0xac, 0xcf,
	0x7d, 0x82, 0x39, 0xf3, 0x5f, 0xa8, 0x0b, 0x42, 0xf2, 0xd2, 0x1d, 0xbf, 0xb5, 0x64, 0x87, 0x49,
	0xf2, 0x66, 0x02, 0x6d, 0xe7, 0x7f, 0x29, 0xa1, 0xf2, 0x3b, 0x73, 0xac, 0xa4, 0x96, 0xff, 0x83,
	0x32, 0x7f, 0x6b, 0x84, 0x36, 0x73, 0xde, 0x86, 0x51, 0xf9, 0xad, 0xbc, 0x77, 0x4b, 0x5c, 0xf8,
	0x87, 0x89, 0x46, 0x56, 0x38, 0xbf, 0x3d, 0xd7, 0xdf, 0x65, 0x0d, 0xc9, 0x6b, 0x14, 0x33, 0xba,
	0xc4, 0x76, 0xbc, 0xb3, 0xae, 0xab, 0x84, 0x2e, 0xb1, 0x41, 0x1f, 0x7c, 0x5b, 0x9f, 0x46, 0x35,
	0xee, 0xde, 0x02, 0x48, 0xea, 0x3d, 0x83, 0x46, 0xb2, 0xa0, 0xa1, 0x3b, 0xb7, 0x96, 0x74, 0xaa,
	0xf1, 0xee, 0xed, 0x25, 0x90, 0xab, 0x33, 0x60, 0xfd, 0x78, 0x3c, 0x96, 0x39, 0xf4, 0xdc, 0xe6,
	0x03, 0x12, 0x52, 0x6f, 0xcf, 0xb2, 0x52, 0xf9, 0x47, 0xaf, 0xcb, 0xc4, 0x72, 0x89, 0x0e, 0x99,
	0x7c, 0x9f, 0x4b, 0x3c, 0x81, 0x1f, 0x57, 0xbf, 0x31, 0x26, 0xec, 0xab, 0xfe, 0xf3, 0x32, 0xfb,
	0x79, 0xf8, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x15, 0x20, 0x7b, 0x1e, 0x20, 0x00, 0x00,
}
