// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fwlogsim.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogFlowRequestMsg struct {
	Request []*FWEvent `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LogFlowRequestMsg) Reset()                    { *m = LogFlowRequestMsg{} }
func (m *LogFlowRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowRequestMsg) ProtoMessage()               {}
func (*LogFlowRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorFwlogsim, []int{0} }

func (m *LogFlowRequestMsg) GetRequest() []*FWEvent {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowResponseMsg struct {
	Response []*LogFlowResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LogFlowResponseMsg) Reset()                    { *m = LogFlowResponseMsg{} }
func (m *LogFlowResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponseMsg) ProtoMessage()               {}
func (*LogFlowResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorFwlogsim, []int{1} }

func (m *LogFlowResponseMsg) GetResponse() []*LogFlowResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type LogFlowResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *LogFlowResponse) Reset()                    { *m = LogFlowResponse{} }
func (m *LogFlowResponse) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponse) ProtoMessage()               {}
func (*LogFlowResponse) Descriptor() ([]byte, []int) { return fileDescriptorFwlogsim, []int{2} }

func (m *LogFlowResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func init() {
	proto.RegisterType((*LogFlowRequestMsg)(nil), "internal.LogFlowRequestMsg")
	proto.RegisterType((*LogFlowResponseMsg)(nil), "internal.LogFlowResponseMsg")
	proto.RegisterType((*LogFlowResponse)(nil), "internal.LogFlowResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FWLogSim service

type FWLogSimClient interface {
	LogFlow(ctx context.Context, in *LogFlowRequestMsg, opts ...grpc.CallOption) (*LogFlowResponseMsg, error)
}

type fWLogSimClient struct {
	cc *grpc.ClientConn
}

func NewFWLogSimClient(cc *grpc.ClientConn) FWLogSimClient {
	return &fWLogSimClient{cc}
}

func (c *fWLogSimClient) LogFlow(ctx context.Context, in *LogFlowRequestMsg, opts ...grpc.CallOption) (*LogFlowResponseMsg, error) {
	out := new(LogFlowResponseMsg)
	err := grpc.Invoke(ctx, "/internal.FWLogSim/LogFlow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FWLogSim service

type FWLogSimServer interface {
	LogFlow(context.Context, *LogFlowRequestMsg) (*LogFlowResponseMsg, error)
}

func RegisterFWLogSimServer(s *grpc.Server, srv FWLogSimServer) {
	s.RegisterService(&_FWLogSim_serviceDesc, srv)
}

func _FWLogSim_LogFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFlowRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FWLogSimServer).LogFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.FWLogSim/LogFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FWLogSimServer).LogFlow(ctx, req.(*LogFlowRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _FWLogSim_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.FWLogSim",
	HandlerType: (*FWLogSimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogFlow",
			Handler:    _FWLogSim_LogFlow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fwlogsim.proto",
}

func (m *LogFlowRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFlowRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFwlogsim(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LogFlowResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFlowResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFwlogsim(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LogFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFwlogsim(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func encodeVarintFwlogsim(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogFlowRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovFwlogsim(uint64(l))
		}
	}
	return n
}

func (m *LogFlowResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovFwlogsim(uint64(l))
		}
	}
	return n
}

func (m *LogFlowResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovFwlogsim(uint64(m.ApiStatus))
	}
	return n
}

func sovFwlogsim(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFwlogsim(x uint64) (n int) {
	return sovFwlogsim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogFlowRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFwlogsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFlowRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFlowRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlogsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFwlogsim
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &FWEvent{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFwlogsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFwlogsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogFlowResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFwlogsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFlowResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFlowResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlogsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFwlogsim
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LogFlowResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFwlogsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFwlogsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFwlogsim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlogsim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFwlogsim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFwlogsim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFwlogsim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFwlogsim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFwlogsim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFwlogsim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFwlogsim
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFwlogsim
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFwlogsim(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFwlogsim = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFwlogsim   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fwlogsim.proto", fileDescriptorFwlogsim) }

var fileDescriptorFwlogsim = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2b, 0xcf, 0xc9,
	0x4f, 0x2f, 0xce, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc8, 0xcc, 0x2b, 0x49,
	0x2d, 0xca, 0x4b, 0xcc, 0x91, 0xe2, 0x2e, 0xa9, 0x2c, 0x48, 0x2d, 0x86, 0x08, 0x4b, 0x71, 0x83,
	0x95, 0x41, 0x38, 0x4a, 0xb6, 0x5c, 0x82, 0x3e, 0xf9, 0xe9, 0x6e, 0x39, 0xf9, 0xe5, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0xbe, 0xc5, 0xe9, 0x42, 0x1a, 0x5c, 0xec, 0x45, 0x10, 0x9e, 0x04,
	0xa3, 0x02, 0xb3, 0x06, 0xb7, 0x11, 0x9f, 0x1e, 0x44, 0x8f, 0x5b, 0xb8, 0x6b, 0x59, 0x6a, 0x5e,
	0x49, 0x10, 0x4c, 0x5a, 0xc9, 0x9b, 0x4b, 0x08, 0xae, 0xbd, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15,
	0xa4, 0xdf, 0x94, 0x8b, 0xa3, 0x08, 0xca, 0x85, 0x1a, 0x20, 0xa9, 0x07, 0x73, 0x8b, 0x1e, 0x9a,
	0xfa, 0x20, 0xb8, 0x52, 0x25, 0x27, 0x2e, 0x7e, 0x34, 0x49, 0x21, 0x7d, 0x2e, 0xae, 0xc4, 0x82,
	0xcc, 0xf8, 0xe2, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x01,
	0x3d, 0x88, 0x6f, 0x1c, 0x0b, 0x32, 0x83, 0xc1, 0xe2, 0x41, 0x9c, 0x89, 0x30, 0xa6, 0x51, 0x10,
	0x17, 0x87, 0x5b, 0xb8, 0x4f, 0x7e, 0x7a, 0x70, 0x66, 0xae, 0x90, 0x1b, 0x17, 0x3b, 0xd4, 0x3c,
	0x21, 0x69, 0x2c, 0xf6, 0xc3, 0xbc, 0x2b, 0x25, 0x83, 0xd3, 0x71, 0xbe, 0xc5, 0xe9, 0x4a, 0x0c,
	0x4e, 0x52, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c,
	0xc7, 0x72, 0x0c, 0x51, 0x1c, 0x19, 0x89, 0x39, 0xe0, 0xf0, 0x4b, 0x62, 0x03, 0x53, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x03, 0x6c, 0x91, 0x7c, 0x01, 0x00, 0x00,
}
