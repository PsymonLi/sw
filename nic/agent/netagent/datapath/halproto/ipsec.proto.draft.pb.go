// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ipsec.proto.draft

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// IPSec protocols
type IpsecProtocol int32

const (
	IpsecProtocol_IPSEC_PROTOCOL_NONE IpsecProtocol = 0
	IpsecProtocol_IPSEC_PROTOCOL_AH   IpsecProtocol = 1
	IpsecProtocol_IPSEC_PROTOCOL_ESP  IpsecProtocol = 2
)

var IpsecProtocol_name = map[int32]string{
	0: "IPSEC_PROTOCOL_NONE",
	1: "IPSEC_PROTOCOL_AH",
	2: "IPSEC_PROTOCOL_ESP",
}
var IpsecProtocol_value = map[string]int32{
	"IPSEC_PROTOCOL_NONE": 0,
	"IPSEC_PROTOCOL_AH":   1,
	"IPSEC_PROTOCOL_ESP":  2,
}

func (x IpsecProtocol) String() string {
	return proto.EnumName(IpsecProtocol_name, int32(x))
}
func (IpsecProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptorIpsecDraft, []int{0} }

// Encryption algorithms
type EncryptionAlgorithm int32

const (
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE        EncryptionAlgorithm = 0
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_GCM_128 EncryptionAlgorithm = 1
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_GCM_256 EncryptionAlgorithm = 2
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_128 EncryptionAlgorithm = 3
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_192 EncryptionAlgorithm = 4
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CCM_256 EncryptionAlgorithm = 5
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_128 EncryptionAlgorithm = 6
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_192 EncryptionAlgorithm = 7
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_AES_CBC_256 EncryptionAlgorithm = 8
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_DES3        EncryptionAlgorithm = 9
	EncryptionAlgorithm_ENCRYPTION_ALGORITHM_CHA_CHA     EncryptionAlgorithm = 10
)

var EncryptionAlgorithm_name = map[int32]string{
	0:  "ENCRYPTION_ALGORITHM_NONE",
	1:  "ENCRYPTION_ALGORITHM_AES_GCM_128",
	2:  "ENCRYPTION_ALGORITHM_AES_GCM_256",
	3:  "ENCRYPTION_ALGORITHM_AES_CCM_128",
	4:  "ENCRYPTION_ALGORITHM_AES_CCM_192",
	5:  "ENCRYPTION_ALGORITHM_AES_CCM_256",
	6:  "ENCRYPTION_ALGORITHM_AES_CBC_128",
	7:  "ENCRYPTION_ALGORITHM_AES_CBC_192",
	8:  "ENCRYPTION_ALGORITHM_AES_CBC_256",
	9:  "ENCRYPTION_ALGORITHM_DES3",
	10: "ENCRYPTION_ALGORITHM_CHA_CHA",
}
var EncryptionAlgorithm_value = map[string]int32{
	"ENCRYPTION_ALGORITHM_NONE":        0,
	"ENCRYPTION_ALGORITHM_AES_GCM_128": 1,
	"ENCRYPTION_ALGORITHM_AES_GCM_256": 2,
	"ENCRYPTION_ALGORITHM_AES_CCM_128": 3,
	"ENCRYPTION_ALGORITHM_AES_CCM_192": 4,
	"ENCRYPTION_ALGORITHM_AES_CCM_256": 5,
	"ENCRYPTION_ALGORITHM_AES_CBC_128": 6,
	"ENCRYPTION_ALGORITHM_AES_CBC_192": 7,
	"ENCRYPTION_ALGORITHM_AES_CBC_256": 8,
	"ENCRYPTION_ALGORITHM_DES3":        9,
	"ENCRYPTION_ALGORITHM_CHA_CHA":     10,
}

func (x EncryptionAlgorithm) String() string {
	return proto.EnumName(EncryptionAlgorithm_name, int32(x))
}
func (EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptorIpsecDraft, []int{1} }

// Authentication algorithms
type AuthenticationAlgorithm int32

const (
	AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE AuthenticationAlgorithm = 0
	AuthenticationAlgorithm_AUTHENTICATION_AES_GCM        AuthenticationAlgorithm = 1
	AuthenticationAlgorithm_AUTHENTICATION_AES_CCM        AuthenticationAlgorithm = 2
	AuthenticationAlgorithm_AUTHENTICATION_HMAC           AuthenticationAlgorithm = 3
	AuthenticationAlgorithm_AUTHENTICATION_AES_CBC_SHA    AuthenticationAlgorithm = 4
)

var AuthenticationAlgorithm_name = map[int32]string{
	0: "AUTHENTICATION_ALGORITHM_NONE",
	1: "AUTHENTICATION_AES_GCM",
	2: "AUTHENTICATION_AES_CCM",
	3: "AUTHENTICATION_HMAC",
	4: "AUTHENTICATION_AES_CBC_SHA",
}
var AuthenticationAlgorithm_value = map[string]int32{
	"AUTHENTICATION_ALGORITHM_NONE": 0,
	"AUTHENTICATION_AES_GCM":        1,
	"AUTHENTICATION_AES_CCM":        2,
	"AUTHENTICATION_HMAC":           3,
	"AUTHENTICATION_AES_CBC_SHA":    4,
}

func (x AuthenticationAlgorithm) String() string {
	return proto.EnumName(AuthenticationAlgorithm_name, int32(x))
}
func (AuthenticationAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorIpsecDraft, []int{2}
}

// Key object
type Key struct {
	// Types that are valid to be assigned to KeyInfo:
	//	*Key_Key
	//	*Key_KeyLocation
	KeyInfo isKey_KeyInfo `protobuf_oneof:"key_info"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptorIpsecDraft, []int{0} }

type isKey_KeyInfo interface {
	isKey_KeyInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Key_Key struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}
type Key_KeyLocation struct {
	KeyLocation uint32 `protobuf:"varint,2,opt,name=key_location,json=keyLocation,proto3,oneof"`
}

func (*Key_Key) isKey_KeyInfo()         {}
func (*Key_KeyLocation) isKey_KeyInfo() {}

func (m *Key) GetKeyInfo() isKey_KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *Key) GetKey() []byte {
	if x, ok := m.GetKeyInfo().(*Key_Key); ok {
		return x.Key
	}
	return nil
}

func (m *Key) GetKeyLocation() uint32 {
	if x, ok := m.GetKeyInfo().(*Key_KeyLocation); ok {
		return x.KeyLocation
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Key) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Key_OneofMarshaler, _Key_OneofUnmarshaler, _Key_OneofSizer, []interface{}{
		(*Key_Key)(nil),
		(*Key_KeyLocation)(nil),
	}
}

func _Key_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Key)
	// key_info
	switch x := m.KeyInfo.(type) {
	case *Key_Key:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Key)
	case *Key_KeyLocation:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.KeyLocation))
	case nil:
	default:
		return fmt.Errorf("Key.KeyInfo has unexpected type %T", x)
	}
	return nil
}

func _Key_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Key)
	switch tag {
	case 1: // key_info.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.KeyInfo = &Key_Key{x}
		return true, err
	case 2: // key_info.key_location
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyInfo = &Key_KeyLocation{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Key_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Key)
	// key_info
	switch x := m.KeyInfo.(type) {
	case *Key_Key:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Key)))
		n += len(x.Key)
	case *Key_KeyLocation:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.KeyLocation))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IPSec security association object
type IpsecSA struct {
	Protocol                IpsecProtocol           `protobuf:"varint,1,opt,name=protocol,proto3,enum=ipsec.IpsecProtocol" json:"protocol,omitempty"`
	AuthenticationAlgorithm AuthenticationAlgorithm `protobuf:"varint,2,opt,name=authentication_algorithm,json=authenticationAlgorithm,proto3,enum=ipsec.AuthenticationAlgorithm" json:"authentication_algorithm,omitempty"`
	AuthenticationKey       *Key                    `protobuf:"bytes,3,opt,name=authentication_key,json=authenticationKey" json:"authentication_key,omitempty"`
	EncryptionAlgorithm     EncryptionAlgorithm     `protobuf:"varint,4,opt,name=encryption_algorithm,json=encryptionAlgorithm,proto3,enum=ipsec.EncryptionAlgorithm" json:"encryption_algorithm,omitempty"`
	EncryptionKey           *Key                    `protobuf:"bytes,5,opt,name=encryption_key,json=encryptionKey" json:"encryption_key,omitempty"`
	LocalGatewayIp          *IPAddress              `protobuf:"bytes,6,opt,name=local_gateway_ip,json=localGatewayIp" json:"local_gateway_ip,omitempty"`
	RemoteGatewayIp         *IPAddress              `protobuf:"bytes,7,opt,name=remote_gateway_ip,json=remoteGatewayIp" json:"remote_gateway_ip,omitempty"`
	Spi                     uint32                  `protobuf:"varint,8,opt,name=spi,proto3" json:"spi,omitempty"`
	NatTraversalPort        uint32                  `protobuf:"varint,9,opt,name=nat_traversal_port,json=natTraversalPort,proto3" json:"nat_traversal_port,omitempty"`
}

func (m *IpsecSA) Reset()                    { *m = IpsecSA{} }
func (m *IpsecSA) String() string            { return proto.CompactTextString(m) }
func (*IpsecSA) ProtoMessage()               {}
func (*IpsecSA) Descriptor() ([]byte, []int) { return fileDescriptorIpsecDraft, []int{1} }

func (m *IpsecSA) GetProtocol() IpsecProtocol {
	if m != nil {
		return m.Protocol
	}
	return IpsecProtocol_IPSEC_PROTOCOL_NONE
}

func (m *IpsecSA) GetAuthenticationAlgorithm() AuthenticationAlgorithm {
	if m != nil {
		return m.AuthenticationAlgorithm
	}
	return AuthenticationAlgorithm_AUTHENTICATION_ALGORITHM_NONE
}

func (m *IpsecSA) GetAuthenticationKey() *Key {
	if m != nil {
		return m.AuthenticationKey
	}
	return nil
}

func (m *IpsecSA) GetEncryptionAlgorithm() EncryptionAlgorithm {
	if m != nil {
		return m.EncryptionAlgorithm
	}
	return EncryptionAlgorithm_ENCRYPTION_ALGORITHM_NONE
}

func (m *IpsecSA) GetEncryptionKey() *Key {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *IpsecSA) GetLocalGatewayIp() *IPAddress {
	if m != nil {
		return m.LocalGatewayIp
	}
	return nil
}

func (m *IpsecSA) GetRemoteGatewayIp() *IPAddress {
	if m != nil {
		return m.RemoteGatewayIp
	}
	return nil
}

func (m *IpsecSA) GetSpi() uint32 {
	if m != nil {
		return m.Spi
	}
	return 0
}

func (m *IpsecSA) GetNatTraversalPort() uint32 {
	if m != nil {
		return m.NatTraversalPort
	}
	return 0
}

// IpsecRuleSpec is the user intent for the IPSec rule
type IpsecRuleSpec struct {
	Meta         *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle  *IpsecRuleKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
	VrfKeyHandle *VrfKeyHandle       `protobuf:"bytes,3,opt,name=vrf_key_handle,json=vrfKeyHandle" json:"vrf_key_handle,omitempty" venice:ref`
	// IPSec rule match conditions
	SrcAddress   []*IPAddressObj `protobuf:"bytes,4,rep,name=src_address,json=srcAddress" json:"src_address,omitempty"`
	SrcSg        []uint32        `protobuf:"varint,5,rep,packed,name=src_sg,json=srcSg" json:"src_sg,omitempty"`
	DstAddress   []*IPAddressObj `protobuf:"bytes,6,rep,name=dst_address,json=dstAddress" json:"dst_address,omitempty"`
	DstSg        []uint32        `protobuf:"varint,7,rep,packed,name=dst_sg,json=dstSg" json:"dst_sg,omitempty"`
	DstPortRange []*L4PortRange  `protobuf:"bytes,8,rep,name=dst_port_range,json=dstPortRange" json:"dst_port_range,omitempty"`
	SrcPortRange []*L4PortRange  `protobuf:"bytes,9,rep,name=src_port_range,json=srcPortRange" json:"src_port_range,omitempty"`
	// IPSec security associaton parameters
	SecurityAssociation *IpsecSA `protobuf:"bytes,10,opt,name=security_association,json=securityAssociation" json:"security_association,omitempty"`
}

func (m *IpsecRuleSpec) Reset()                    { *m = IpsecRuleSpec{} }
func (m *IpsecRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleSpec) ProtoMessage()               {}
func (*IpsecRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptorIpsecDraft, []int{2} }

func (m *IpsecRuleSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *IpsecRuleSpec) GetKeyOrHandle() *IpsecRuleKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *IpsecRuleSpec) GetVrfKeyHandle() *VrfKeyHandle {
	if m != nil {
		return m.VrfKeyHandle
	}
	return nil
}

func (m *IpsecRuleSpec) GetSrcAddress() []*IPAddressObj {
	if m != nil {
		return m.SrcAddress
	}
	return nil
}

func (m *IpsecRuleSpec) GetSrcSg() []uint32 {
	if m != nil {
		return m.SrcSg
	}
	return nil
}

func (m *IpsecRuleSpec) GetDstAddress() []*IPAddressObj {
	if m != nil {
		return m.DstAddress
	}
	return nil
}

func (m *IpsecRuleSpec) GetDstSg() []uint32 {
	if m != nil {
		return m.DstSg
	}
	return nil
}

func (m *IpsecRuleSpec) GetDstPortRange() []*L4PortRange {
	if m != nil {
		return m.DstPortRange
	}
	return nil
}

func (m *IpsecRuleSpec) GetSrcPortRange() []*L4PortRange {
	if m != nil {
		return m.SrcPortRange
	}
	return nil
}

func (m *IpsecRuleSpec) GetSecurityAssociation() *IpsecSA {
	if m != nil {
		return m.SecurityAssociation
	}
	return nil
}

// IpsecRuleRequestMsg is the batched add or modify of NAT rule request
type IpsecRuleRequestMsg struct {
	Request []*IpsecRuleSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *IpsecRuleRequestMsg) Reset()                    { *m = IpsecRuleRequestMsg{} }
func (m *IpsecRuleRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleRequestMsg) ProtoMessage()               {}
func (*IpsecRuleRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsecDraft, []int{3} }

func (m *IpsecRuleRequestMsg) GetRequest() []*IpsecRuleSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// IpsecRuleStatus reflects the current operational status of the IPSec rule
type IpsecRuleStatus struct {
	Handle uint64 `protobuf:"fixed64,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *IpsecRuleStatus) Reset()                    { *m = IpsecRuleStatus{} }
func (m *IpsecRuleStatus) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleStatus) ProtoMessage()               {}
func (*IpsecRuleStatus) Descriptor() ([]byte, []int) { return fileDescriptorIpsecDraft, []int{4} }

func (m *IpsecRuleStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// IpsecRuleResponse is the response to IpsecRuleSpec
type IpsecRuleResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
	Status    *IpsecRuleStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *IpsecRuleResponse) Reset()                    { *m = IpsecRuleResponse{} }
func (m *IpsecRuleResponse) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleResponse) ProtoMessage()               {}
func (*IpsecRuleResponse) Descriptor() ([]byte, []int) { return fileDescriptorIpsecDraft, []int{5} }

func (m *IpsecRuleResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *IpsecRuleResponse) GetStatus() *IpsecRuleStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// IpsecRuleResponseMsg is batched response to IpsecRuleRequestMsg
type IpsecRuleResponseMsg struct {
	Response []*IpsecRuleResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *IpsecRuleResponseMsg) Reset()                    { *m = IpsecRuleResponseMsg{} }
func (m *IpsecRuleResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*IpsecRuleResponseMsg) ProtoMessage()               {}
func (*IpsecRuleResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorIpsecDraft, []int{6} }

func (m *IpsecRuleResponseMsg) GetResponse() []*IpsecRuleResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*Key)(nil), "ipsec.Key")
	proto.RegisterType((*IpsecSA)(nil), "ipsec.IpsecSA")
	proto.RegisterType((*IpsecRuleSpec)(nil), "ipsec.IpsecRuleSpec")
	proto.RegisterType((*IpsecRuleRequestMsg)(nil), "ipsec.IpsecRuleRequestMsg")
	proto.RegisterType((*IpsecRuleStatus)(nil), "ipsec.IpsecRuleStatus")
	proto.RegisterType((*IpsecRuleResponse)(nil), "ipsec.IpsecRuleResponse")
	proto.RegisterType((*IpsecRuleResponseMsg)(nil), "ipsec.IpsecRuleResponseMsg")
	proto.RegisterEnum("ipsec.IpsecProtocol", IpsecProtocol_name, IpsecProtocol_value)
	proto.RegisterEnum("ipsec.EncryptionAlgorithm", EncryptionAlgorithm_name, EncryptionAlgorithm_value)
	proto.RegisterEnum("ipsec.AuthenticationAlgorithm", AuthenticationAlgorithm_name, AuthenticationAlgorithm_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ipsec service

type IpsecClient interface {
	IpsecRuleCreate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error)
}

type ipsecClient struct {
	cc *grpc.ClientConn
}

func NewIpsecClient(cc *grpc.ClientConn) IpsecClient {
	return &ipsecClient{cc}
}

func (c *ipsecClient) IpsecRuleCreate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error) {
	out := new(IpsecRuleResponseMsg)
	err := grpc.Invoke(ctx, "/ipsec.Ipsec/IpsecRuleCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ipsec service

type IpsecServer interface {
	IpsecRuleCreate(context.Context, *IpsecRuleRequestMsg) (*IpsecRuleResponseMsg, error)
}

func RegisterIpsecServer(s *grpc.Server, srv IpsecServer) {
	s.RegisterService(&_Ipsec_serviceDesc, srv)
}

func _Ipsec_IpsecRuleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpsecRuleRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).IpsecRuleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipsec.Ipsec/IpsecRuleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).IpsecRuleCreate(ctx, req.(*IpsecRuleRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ipsec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipsec.Ipsec",
	HandlerType: (*IpsecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IpsecRuleCreate",
			Handler:    _Ipsec_IpsecRuleCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipsec.proto.draft",
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyInfo != nil {
		nn1, err := m.KeyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Key_Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}
func (m *Key_KeyLocation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintIpsecDraft(dAtA, i, uint64(m.KeyLocation))
	return i, nil
}
func (m *IpsecSA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecSA) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Protocol != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.AuthenticationKey.Size()))
		n2, err := m.AuthenticationKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.EncryptionAlgorithm != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.EncryptionAlgorithm))
	}
	if m.EncryptionKey != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.EncryptionKey.Size()))
		n3, err := m.EncryptionKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.LocalGatewayIp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.LocalGatewayIp.Size()))
		n4, err := m.LocalGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.RemoteGatewayIp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.RemoteGatewayIp.Size()))
		n5, err := m.RemoteGatewayIp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Spi != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.Spi))
	}
	if m.NatTraversalPort != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.NatTraversalPort))
	}
	return i, nil
}

func (m *IpsecRuleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.Meta.Size()))
		n6, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n7, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.VrfKeyHandle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.VrfKeyHandle.Size()))
		n8, err := m.VrfKeyHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.SrcAddress) > 0 {
		for _, msg := range m.SrcAddress {
			dAtA[i] = 0x22
			i++
			i = encodeVarintIpsecDraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SrcSg) > 0 {
		dAtA10 := make([]byte, len(m.SrcSg)*10)
		var j9 int
		for _, num := range m.SrcSg {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.DstAddress) > 0 {
		for _, msg := range m.DstAddress {
			dAtA[i] = 0x32
			i++
			i = encodeVarintIpsecDraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DstSg) > 0 {
		dAtA12 := make([]byte, len(m.DstSg)*10)
		var j11 int
		for _, num := range m.DstSg {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if len(m.DstPortRange) > 0 {
		for _, msg := range m.DstPortRange {
			dAtA[i] = 0x42
			i++
			i = encodeVarintIpsecDraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SrcPortRange) > 0 {
		for _, msg := range m.SrcPortRange {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintIpsecDraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SecurityAssociation != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.SecurityAssociation.Size()))
		n13, err := m.SecurityAssociation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *IpsecRuleRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsecDraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IpsecRuleStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Handle))
		i += 8
	}
	return i, nil
}

func (m *IpsecRuleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpsecDraft(dAtA, i, uint64(m.Status.Size()))
		n14, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *IpsecRuleResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpsecRuleResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpsecDraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintIpsecDraft(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Key) Size() (n int) {
	var l int
	_ = l
	if m.KeyInfo != nil {
		n += m.KeyInfo.Size()
	}
	return n
}

func (m *Key_Key) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	return n
}
func (m *Key_KeyLocation) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovIpsecDraft(uint64(m.KeyLocation))
	return n
}
func (m *IpsecSA) Size() (n int) {
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovIpsecDraft(uint64(m.Protocol))
	}
	if m.AuthenticationAlgorithm != 0 {
		n += 1 + sovIpsecDraft(uint64(m.AuthenticationAlgorithm))
	}
	if m.AuthenticationKey != nil {
		l = m.AuthenticationKey.Size()
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	if m.EncryptionAlgorithm != 0 {
		n += 1 + sovIpsecDraft(uint64(m.EncryptionAlgorithm))
	}
	if m.EncryptionKey != nil {
		l = m.EncryptionKey.Size()
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	if m.LocalGatewayIp != nil {
		l = m.LocalGatewayIp.Size()
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	if m.RemoteGatewayIp != nil {
		l = m.RemoteGatewayIp.Size()
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	if m.Spi != 0 {
		n += 1 + sovIpsecDraft(uint64(m.Spi))
	}
	if m.NatTraversalPort != 0 {
		n += 1 + sovIpsecDraft(uint64(m.NatTraversalPort))
	}
	return n
}

func (m *IpsecRuleSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	if m.VrfKeyHandle != nil {
		l = m.VrfKeyHandle.Size()
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	if len(m.SrcAddress) > 0 {
		for _, e := range m.SrcAddress {
			l = e.Size()
			n += 1 + l + sovIpsecDraft(uint64(l))
		}
	}
	if len(m.SrcSg) > 0 {
		l = 0
		for _, e := range m.SrcSg {
			l += sovIpsecDraft(uint64(e))
		}
		n += 1 + sovIpsecDraft(uint64(l)) + l
	}
	if len(m.DstAddress) > 0 {
		for _, e := range m.DstAddress {
			l = e.Size()
			n += 1 + l + sovIpsecDraft(uint64(l))
		}
	}
	if len(m.DstSg) > 0 {
		l = 0
		for _, e := range m.DstSg {
			l += sovIpsecDraft(uint64(e))
		}
		n += 1 + sovIpsecDraft(uint64(l)) + l
	}
	if len(m.DstPortRange) > 0 {
		for _, e := range m.DstPortRange {
			l = e.Size()
			n += 1 + l + sovIpsecDraft(uint64(l))
		}
	}
	if len(m.SrcPortRange) > 0 {
		for _, e := range m.SrcPortRange {
			l = e.Size()
			n += 1 + l + sovIpsecDraft(uint64(l))
		}
	}
	if m.SecurityAssociation != nil {
		l = m.SecurityAssociation.Size()
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	return n
}

func (m *IpsecRuleRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovIpsecDraft(uint64(l))
		}
	}
	return n
}

func (m *IpsecRuleStatus) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 9
	}
	return n
}

func (m *IpsecRuleResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovIpsecDraft(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovIpsecDraft(uint64(l))
	}
	return n
}

func (m *IpsecRuleResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovIpsecDraft(uint64(l))
		}
	}
	return n
}

func sovIpsecDraft(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIpsecDraft(x uint64) (n int) {
	return sovIpsecDraft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsecDraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.KeyInfo = &Key_Key{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyLocation", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyInfo = &Key_KeyLocation{v}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsecDraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecSA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsecDraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecSA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecSA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= (IpsecProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationAlgorithm", wireType)
			}
			m.AuthenticationAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthenticationAlgorithm |= (AuthenticationAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticationKey == nil {
				m.AuthenticationKey = &Key{}
			}
			if err := m.AuthenticationKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionAlgorithm", wireType)
			}
			m.EncryptionAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionAlgorithm |= (EncryptionAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptionKey == nil {
				m.EncryptionKey = &Key{}
			}
			if err := m.EncryptionKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalGatewayIp == nil {
				m.LocalGatewayIp = &IPAddress{}
			}
			if err := m.LocalGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteGatewayIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteGatewayIp == nil {
				m.RemoteGatewayIp = &IPAddress{}
			}
			if err := m.RemoteGatewayIp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spi", wireType)
			}
			m.Spi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatTraversalPort", wireType)
			}
			m.NatTraversalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NatTraversalPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIpsecDraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsecDraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &IpsecRuleKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfKeyHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VrfKeyHandle == nil {
				m.VrfKeyHandle = &VrfKeyHandle{}
			}
			if err := m.VrfKeyHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddress = append(m.SrcAddress, &IPAddressObj{})
			if err := m.SrcAddress[len(m.SrcAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsecDraft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SrcSg = append(m.SrcSg, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsecDraft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIpsecDraft
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIpsecDraft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SrcSg = append(m.SrcSg, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcSg", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstAddress = append(m.DstAddress, &IPAddressObj{})
			if err := m.DstAddress[len(m.DstAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsecDraft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DstSg = append(m.DstSg, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIpsecDraft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIpsecDraft
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIpsecDraft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DstSg = append(m.DstSg, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DstSg", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPortRange = append(m.DstPortRange, &L4PortRange{})
			if err := m.DstPortRange[len(m.DstPortRange)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPortRange = append(m.SrcPortRange, &L4PortRange{})
			if err := m.SrcPortRange[len(m.SrcPortRange)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityAssociation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityAssociation == nil {
				m.SecurityAssociation = &IpsecSA{}
			}
			if err := m.SecurityAssociation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsecDraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsecDraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &IpsecRuleSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsecDraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsecDraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipIpsecDraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsecDraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &IpsecRuleStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsecDraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpsecRuleResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpsecDraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpsecRuleResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpsecRuleResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &IpsecRuleResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpsecDraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpsecDraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpsecDraft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpsecDraft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpsecDraft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIpsecDraft
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIpsecDraft
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIpsecDraft(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIpsecDraft = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpsecDraft   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ipsec.proto.draft", fileDescriptorIpsecDraft) }

var fileDescriptorIpsecDraft = []byte{
	// 1042 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x4f, 0x6f, 0xe2, 0x46,
	0x14, 0x8f, 0xc3, 0x9f, 0x90, 0x47, 0xc2, 0x9a, 0x21, 0x9b, 0xb8, 0xb4, 0x4b, 0x28, 0x6d, 0xa5,
	0x34, 0xaa, 0x50, 0x97, 0x4d, 0xab, 0xcd, 0xaa, 0x52, 0x65, 0x5c, 0x1a, 0x68, 0x20, 0xa0, 0x81,
	0x6d, 0xb5, 0xbd, 0x58, 0x8e, 0x99, 0x80, 0x17, 0x82, 0xdd, 0x99, 0x49, 0x2a, 0xdf, 0x7b, 0xed,
	0xbd, 0x97, 0x1e, 0x7b, 0xec, 0xf7, 0xe8, 0xb1, 0x9f, 0x20, 0xaa, 0xd2, 0x5b, 0x8f, 0xfb, 0x09,
	0xaa, 0x19, 0xdb, 0x40, 0x08, 0x24, 0x07, 0x84, 0x67, 0x7e, 0x7f, 0xde, 0xf3, 0x7b, 0x6f, 0x06,
	0x20, 0xeb, 0x78, 0x8c, 0xd8, 0x65, 0x8f, 0xba, 0xdc, 0x2d, 0xf7, 0xa9, 0x75, 0xc1, 0x51, 0x42,
	0x6e, 0xe5, 0xd3, 0xdc, 0xf7, 0x08, 0x0b, 0x90, 0x7c, 0x6a, 0x34, 0x0c, 0x9e, 0x4a, 0xdf, 0x41,
	0xec, 0x94, 0xf8, 0x08, 0x41, 0x6c, 0x44, 0x7c, 0x4d, 0x29, 0x2a, 0x07, 0x5b, 0xf5, 0x35, 0x2c,
	0x16, 0xe8, 0x23, 0xd8, 0x1a, 0x11, 0xdf, 0x1c, 0xbb, 0xb6, 0xc5, 0x1d, 0x77, 0xa2, 0xad, 0x17,
	0x95, 0x83, 0xed, 0xfa, 0x1a, 0x4e, 0x8f, 0x88, 0xdf, 0x0c, 0x37, 0xab, 0x00, 0x29, 0x41, 0x72,
	0x26, 0x17, 0x6e, 0xe9, 0xd7, 0x38, 0x6c, 0x34, 0x44, 0xb0, 0xae, 0x8e, 0x3e, 0x87, 0x94, 0x0c,
	0x60, 0xbb, 0x63, 0xe9, 0x9a, 0xa9, 0xec, 0x94, 0x83, 0xdc, 0x24, 0xa3, 0x13, 0x62, 0x78, 0xca,
	0x42, 0x6f, 0x40, 0xb3, 0xae, 0xf8, 0x90, 0x4c, 0xb8, 0x13, 0x78, 0x9b, 0xd6, 0x78, 0xe0, 0x52,
	0x87, 0x0f, 0x2f, 0x65, 0xe8, 0x4c, 0xa5, 0x10, 0x3a, 0xe8, 0x77, 0x68, 0x7a, 0xc4, 0xc2, 0x7b,
	0xd6, 0x72, 0x00, 0x1d, 0x03, 0x5a, 0xb0, 0x16, 0x2f, 0x1b, 0x2b, 0x2a, 0x07, 0xe9, 0x0a, 0x84,
	0xa6, 0xa7, 0xc4, 0xc7, 0xd9, 0xbb, 0x2c, 0x51, 0x98, 0x16, 0xec, 0x90, 0x89, 0x4d, 0x7d, 0x6f,
	0x21, 0xa3, 0xb8, 0xcc, 0x28, 0x1f, 0x8a, 0x6b, 0x53, 0xca, 0x2c, 0x9b, 0x1c, 0xb9, 0xbf, 0x89,
	0x9e, 0x43, 0x66, 0xce, 0x4e, 0x64, 0x91, 0xb8, 0x97, 0xc5, 0xf6, 0x8c, 0x21, 0x32, 0x78, 0x05,
	0xaa, 0x68, 0xc1, 0xd8, 0x1c, 0x58, 0x9c, 0xfc, 0x6c, 0xf9, 0xa6, 0xe3, 0x69, 0x49, 0x29, 0x52,
	0xcb, 0x41, 0x4f, 0x1b, 0x1d, 0xbd, 0xdf, 0xa7, 0x84, 0x31, 0x9c, 0x91, 0xcc, 0x93, 0x80, 0xd8,
	0xf0, 0xd0, 0x57, 0x90, 0xa5, 0xe4, 0xd2, 0xe5, 0x64, 0x5e, 0xbc, 0xb1, 0x42, 0xfc, 0x24, 0xa0,
	0xce, 0xd4, 0x2a, 0xc4, 0x98, 0xe7, 0x68, 0x29, 0xd1, 0x77, 0x2c, 0x1e, 0xd1, 0x67, 0x80, 0x26,
	0x16, 0x37, 0x39, 0xb5, 0xae, 0x09, 0x65, 0xd6, 0xd8, 0xf4, 0x5c, 0xca, 0xb5, 0x4d, 0x49, 0x50,
	0x27, 0x16, 0xef, 0x45, 0x40, 0xc7, 0xa5, 0xbc, 0xf4, 0x7b, 0x1c, 0xb6, 0x65, 0xb7, 0xf1, 0xd5,
	0x98, 0x74, 0x3d, 0x62, 0xa3, 0x4f, 0x20, 0x7e, 0x49, 0xb8, 0x25, 0x27, 0x22, 0x5d, 0xc9, 0x86,
	0x29, 0xb4, 0xcf, 0xdf, 0x12, 0x9b, 0xb7, 0x08, 0xb7, 0xb0, 0x84, 0x51, 0x13, 0xb6, 0xc5, 0x50,
	0xb9, 0xd4, 0x1c, 0x5a, 0x93, 0xfe, 0x98, 0xc8, 0xfe, 0xa7, 0x2b, 0xbb, 0xe5, 0xd1, 0xb0, 0x3c,
	0x35, 0x3c, 0x25, 0x7e, 0x5d, 0xa2, 0x55, 0xf5, 0xdd, 0xcd, 0xfe, 0xd6, 0x35, 0x99, 0x38, 0x36,
	0x79, 0x55, 0x1a, 0x11, 0xbf, 0x24, 0x47, 0xb4, 0x4d, 0x03, 0x18, 0x7d, 0x0b, 0x99, 0x6b, 0x7a,
	0x21, 0x8a, 0x1d, 0xd9, 0xc5, 0xc2, 0x0a, 0x8c, 0x86, 0xe5, 0xef, 0xe9, 0xc5, 0xcc, 0x28, 0xf3,
	0xee, 0x66, 0x1f, 0x42, 0x23, 0x4a, 0x2e, 0xf0, 0xd6, 0xf5, 0x1c, 0x8a, 0x8e, 0x20, 0xcd, 0xa8,
	0x6d, 0x5a, 0x41, 0xb9, 0xb4, 0x78, 0x31, 0x76, 0x90, 0xae, 0xe4, 0x16, 0xcb, 0xd8, 0x3e, 0x7f,
	0x8b, 0x81, 0x51, 0x3b, 0x5c, 0xa2, 0xa7, 0x90, 0x14, 0x2a, 0x36, 0xd0, 0x12, 0xc5, 0xd8, 0xc1,
	0x36, 0x4e, 0x30, 0x6a, 0x77, 0x07, 0xc2, 0xac, 0xcf, 0xf8, 0xd4, 0x2c, 0xf9, 0x80, 0x59, 0x9f,
	0xf1, 0x39, 0x33, 0xa1, 0x62, 0x03, 0x6d, 0x23, 0x30, 0xeb, 0x33, 0xde, 0x1d, 0xa0, 0x97, 0x90,
	0x11, 0xdb, 0xa2, 0x19, 0x26, 0xb5, 0x26, 0x03, 0xa2, 0xa5, 0xa4, 0x1f, 0x0a, 0xfd, 0x9a, 0x47,
	0xa2, 0x1f, 0x58, 0x20, 0x78, 0xab, 0xcf, 0xf8, 0x74, 0x25, 0x94, 0x22, 0xbb, 0x39, 0xe5, 0xe6,
	0x6a, 0x25, 0xa3, 0xf6, 0x4c, 0xa9, 0xc3, 0x0e, 0x23, 0xf6, 0x15, 0x75, 0xb8, 0x6f, 0x5a, 0x8c,
	0xb9, 0xb6, 0x13, 0xdc, 0x12, 0x20, 0x6b, 0x9b, 0x99, 0x3f, 0xec, 0x5d, 0x1d, 0xe7, 0x22, 0xae,
	0x3e, 0xa3, 0x96, 0x6a, 0x90, 0x9b, 0x76, 0x13, 0x93, 0x9f, 0xae, 0x08, 0xe3, 0x2d, 0x36, 0x40,
	0x65, 0xd8, 0xa0, 0xc1, 0x4a, 0x53, 0x64, 0x32, 0x77, 0x6e, 0x8e, 0x68, 0x96, 0x70, 0x44, 0x2a,
	0x7d, 0x0a, 0x4f, 0x66, 0x08, 0xb7, 0xf8, 0x15, 0x43, 0xbb, 0x90, 0x0c, 0x5b, 0x2d, 0x26, 0x2d,
	0x89, 0xc3, 0x55, 0xe9, 0x17, 0x05, 0xb2, 0x73, 0x21, 0x99, 0xe7, 0x4e, 0x18, 0x41, 0x5f, 0x03,
	0x58, 0x9e, 0x63, 0x32, 0xa9, 0x0d, 0x6f, 0xab, 0xe8, 0x78, 0xe8, 0x9e, 0x13, 0x78, 0x56, 0x33,
	0xff, 0xdd, 0xec, 0xcf, 0xf1, 0xf0, 0xa6, 0x15, 0x41, 0xa8, 0x0c, 0xc9, 0x50, 0x1c, 0x0d, 0xea,
	0x62, 0xc2, 0x81, 0x24, 0x64, 0x95, 0x9a, 0xb0, 0x73, 0x2f, 0x0b, 0xf1, 0xe6, 0x47, 0x90, 0xa2,
	0xe1, 0x32, 0x7c, 0x75, 0x6d, 0xd1, 0x29, 0xa2, 0xe3, 0x29, 0xf3, 0xf0, 0x87, 0xf0, 0x94, 0x45,
	0x77, 0x2a, 0xda, 0x83, 0x5c, 0xa3, 0xd3, 0xad, 0x19, 0x66, 0x07, 0xb7, 0x7b, 0x6d, 0xa3, 0xdd,
	0x34, 0xcf, 0xda, 0x67, 0x35, 0x75, 0x0d, 0x3d, 0x85, 0xec, 0x02, 0xa0, 0xd7, 0x55, 0x05, 0xed,
	0x02, 0x5a, 0xd8, 0xae, 0x75, 0x3b, 0xea, 0xfa, 0xe1, 0x1f, 0x31, 0xc8, 0x2d, 0xb9, 0xd9, 0xd0,
	0x33, 0x78, 0xaf, 0x76, 0x66, 0xe0, 0x37, 0x9d, 0x5e, 0xa3, 0x7d, 0x66, 0xea, 0xcd, 0x93, 0x36,
	0x6e, 0xf4, 0xea, 0xad, 0x28, 0xca, 0xc7, 0x50, 0x5c, 0x0a, 0xeb, 0xb5, 0xae, 0x79, 0x62, 0xb4,
	0xcc, 0xe7, 0x95, 0x97, 0xaa, 0xf2, 0x28, 0xab, 0xf2, 0xc5, 0x97, 0xea, 0xfa, 0x83, 0x2c, 0x23,
	0xf4, 0x8a, 0x3d, 0xce, 0x3a, 0xae, 0xa8, 0xf1, 0x47, 0x59, 0x22, 0x62, 0xe2, 0x61, 0x56, 0xd5,
	0x90, 0x11, 0x93, 0x8f, 0xb3, 0x8e, 0x2b, 0xea, 0xc6, 0xa3, 0x2c, 0x11, 0x31, 0xb5, 0xb2, 0x9c,
	0xdf, 0xd4, 0xba, 0x2f, 0xd4, 0x4d, 0x54, 0x84, 0x0f, 0x96, 0xc2, 0x46, 0x5d, 0x17, 0x1f, 0x15,
	0x0e, 0xff, 0x54, 0x60, 0x6f, 0xc5, 0x6f, 0x22, 0xfa, 0x10, 0x9e, 0xe9, 0xaf, 0x7b, 0xf5, 0xda,
	0x59, 0xaf, 0x61, 0xe8, 0xcb, 0xfb, 0x95, 0x87, 0xdd, 0x45, 0x4a, 0xd0, 0x03, 0x55, 0x59, 0x81,
	0x19, 0x46, 0x4b, 0x5d, 0x17, 0x63, 0xb6, 0x80, 0xd5, 0x5b, 0xba, 0xa1, 0xc6, 0x50, 0x01, 0xf2,
	0xcb, 0x44, 0x55, 0xc3, 0xec, 0xd6, 0x75, 0x35, 0x5e, 0x79, 0x0d, 0x09, 0x39, 0xb0, 0xa8, 0x39,
	0x77, 0x72, 0x0d, 0x4a, 0x2c, 0x4e, 0x50, 0xfe, 0xfe, 0xc0, 0x47, 0x17, 0x43, 0xfe, 0xfd, 0x55,
	0x87, 0xa1, 0xc5, 0x06, 0xa5, 0xb5, 0x6a, 0xfe, 0xaf, 0xdb, 0x82, 0xf2, 0xf7, 0x6d, 0x41, 0xf9,
	0xe7, 0xb6, 0xa0, 0xfc, 0xf6, 0x6f, 0x61, 0xed, 0xc7, 0xd4, 0xd0, 0x1a, 0xcb, 0xff, 0x17, 0xe7,
	0x49, 0xf9, 0xf5, 0xe2, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x9f, 0x7c, 0x1b, 0x20, 0x09,
	0x00, 0x00,
}
