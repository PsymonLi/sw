// Code generated by MockGen. DO NOT EDIT.
// Source: types.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockisIPAddress_V4OrV6 is a mock of isIPAddress_V4OrV6 interface
type MockisIPAddress_V4OrV6 struct {
	ctrl     *gomock.Controller
	recorder *MockisIPAddress_V4OrV6MockRecorder
}

// MockisIPAddress_V4OrV6MockRecorder is the mock recorder for MockisIPAddress_V4OrV6
type MockisIPAddress_V4OrV6MockRecorder struct {
	mock *MockisIPAddress_V4OrV6
}

// NewMockisIPAddress_V4OrV6 creates a new mock instance
func NewMockisIPAddress_V4OrV6(ctrl *gomock.Controller) *MockisIPAddress_V4OrV6 {
	mock := &MockisIPAddress_V4OrV6{ctrl: ctrl}
	mock.recorder = &MockisIPAddress_V4OrV6MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisIPAddress_V4OrV6) EXPECT() *MockisIPAddress_V4OrV6MockRecorder {
	return m.recorder
}

// isIPAddress_V4OrV6 mocks base method
func (m *MockisIPAddress_V4OrV6) isIPAddress_V4OrV6() {
	m.ctrl.Call(m, "isIPAddress_V4OrV6")
}

// isIPAddress_V4OrV6 indicates an expected call of isIPAddress_V4OrV6
func (mr *MockisIPAddress_V4OrV6MockRecorder) isIPAddress_V4OrV6() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIPAddress_V4OrV6", reflect.TypeOf((*MockisIPAddress_V4OrV6)(nil).isIPAddress_V4OrV6))
}

// MarshalTo mocks base method
func (m *MockisIPAddress_V4OrV6) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisIPAddress_V4OrV6MockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisIPAddress_V4OrV6)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisIPAddress_V4OrV6) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisIPAddress_V4OrV6MockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisIPAddress_V4OrV6)(nil).Size))
}

// MockisIPSubnet_Subnet is a mock of isIPSubnet_Subnet interface
type MockisIPSubnet_Subnet struct {
	ctrl     *gomock.Controller
	recorder *MockisIPSubnet_SubnetMockRecorder
}

// MockisIPSubnet_SubnetMockRecorder is the mock recorder for MockisIPSubnet_Subnet
type MockisIPSubnet_SubnetMockRecorder struct {
	mock *MockisIPSubnet_Subnet
}

// NewMockisIPSubnet_Subnet creates a new mock instance
func NewMockisIPSubnet_Subnet(ctrl *gomock.Controller) *MockisIPSubnet_Subnet {
	mock := &MockisIPSubnet_Subnet{ctrl: ctrl}
	mock.recorder = &MockisIPSubnet_SubnetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisIPSubnet_Subnet) EXPECT() *MockisIPSubnet_SubnetMockRecorder {
	return m.recorder
}

// isIPSubnet_Subnet mocks base method
func (m *MockisIPSubnet_Subnet) isIPSubnet_Subnet() {
	m.ctrl.Call(m, "isIPSubnet_Subnet")
}

// isIPSubnet_Subnet indicates an expected call of isIPSubnet_Subnet
func (mr *MockisIPSubnet_SubnetMockRecorder) isIPSubnet_Subnet() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIPSubnet_Subnet", reflect.TypeOf((*MockisIPSubnet_Subnet)(nil).isIPSubnet_Subnet))
}

// MarshalTo mocks base method
func (m *MockisIPSubnet_Subnet) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisIPSubnet_SubnetMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisIPSubnet_Subnet)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisIPSubnet_Subnet) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisIPSubnet_SubnetMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisIPSubnet_Subnet)(nil).Size))
}

// MockisAddressRange_Range is a mock of isAddressRange_Range interface
type MockisAddressRange_Range struct {
	ctrl     *gomock.Controller
	recorder *MockisAddressRange_RangeMockRecorder
}

// MockisAddressRange_RangeMockRecorder is the mock recorder for MockisAddressRange_Range
type MockisAddressRange_RangeMockRecorder struct {
	mock *MockisAddressRange_Range
}

// NewMockisAddressRange_Range creates a new mock instance
func NewMockisAddressRange_Range(ctrl *gomock.Controller) *MockisAddressRange_Range {
	mock := &MockisAddressRange_Range{ctrl: ctrl}
	mock.recorder = &MockisAddressRange_RangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisAddressRange_Range) EXPECT() *MockisAddressRange_RangeMockRecorder {
	return m.recorder
}

// isAddressRange_Range mocks base method
func (m *MockisAddressRange_Range) isAddressRange_Range() {
	m.ctrl.Call(m, "isAddressRange_Range")
}

// isAddressRange_Range indicates an expected call of isAddressRange_Range
func (mr *MockisAddressRange_RangeMockRecorder) isAddressRange_Range() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAddressRange_Range", reflect.TypeOf((*MockisAddressRange_Range)(nil).isAddressRange_Range))
}

// MarshalTo mocks base method
func (m *MockisAddressRange_Range) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisAddressRange_RangeMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisAddressRange_Range)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisAddressRange_Range) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisAddressRange_RangeMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisAddressRange_Range)(nil).Size))
}

// MockisAddress_Address is a mock of isAddress_Address interface
type MockisAddress_Address struct {
	ctrl     *gomock.Controller
	recorder *MockisAddress_AddressMockRecorder
}

// MockisAddress_AddressMockRecorder is the mock recorder for MockisAddress_Address
type MockisAddress_AddressMockRecorder struct {
	mock *MockisAddress_Address
}

// NewMockisAddress_Address creates a new mock instance
func NewMockisAddress_Address(ctrl *gomock.Controller) *MockisAddress_Address {
	mock := &MockisAddress_Address{ctrl: ctrl}
	mock.recorder = &MockisAddress_AddressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisAddress_Address) EXPECT() *MockisAddress_AddressMockRecorder {
	return m.recorder
}

// isAddress_Address mocks base method
func (m *MockisAddress_Address) isAddress_Address() {
	m.ctrl.Call(m, "isAddress_Address")
}

// isAddress_Address indicates an expected call of isAddress_Address
func (mr *MockisAddress_AddressMockRecorder) isAddress_Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isAddress_Address", reflect.TypeOf((*MockisAddress_Address)(nil).isAddress_Address))
}

// MarshalTo mocks base method
func (m *MockisAddress_Address) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisAddress_AddressMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisAddress_Address)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisAddress_Address) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisAddress_AddressMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisAddress_Address)(nil).Size))
}

// MockisIPAddressObj_Formats is a mock of isIPAddressObj_Formats interface
type MockisIPAddressObj_Formats struct {
	ctrl     *gomock.Controller
	recorder *MockisIPAddressObj_FormatsMockRecorder
}

// MockisIPAddressObj_FormatsMockRecorder is the mock recorder for MockisIPAddressObj_Formats
type MockisIPAddressObj_FormatsMockRecorder struct {
	mock *MockisIPAddressObj_Formats
}

// NewMockisIPAddressObj_Formats creates a new mock instance
func NewMockisIPAddressObj_Formats(ctrl *gomock.Controller) *MockisIPAddressObj_Formats {
	mock := &MockisIPAddressObj_Formats{ctrl: ctrl}
	mock.recorder = &MockisIPAddressObj_FormatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisIPAddressObj_Formats) EXPECT() *MockisIPAddressObj_FormatsMockRecorder {
	return m.recorder
}

// isIPAddressObj_Formats mocks base method
func (m *MockisIPAddressObj_Formats) isIPAddressObj_Formats() {
	m.ctrl.Call(m, "isIPAddressObj_Formats")
}

// isIPAddressObj_Formats indicates an expected call of isIPAddressObj_Formats
func (mr *MockisIPAddressObj_FormatsMockRecorder) isIPAddressObj_Formats() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIPAddressObj_Formats", reflect.TypeOf((*MockisIPAddressObj_Formats)(nil).isIPAddressObj_Formats))
}

// MarshalTo mocks base method
func (m *MockisIPAddressObj_Formats) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisIPAddressObj_FormatsMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisIPAddressObj_Formats)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisIPAddressObj_Formats) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisIPAddressObj_FormatsMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisIPAddressObj_Formats)(nil).Size))
}

// MockisRuleMatch_AppMatch_App is a mock of isRuleMatch_AppMatch_App interface
type MockisRuleMatch_AppMatch_App struct {
	ctrl     *gomock.Controller
	recorder *MockisRuleMatch_AppMatch_AppMockRecorder
}

// MockisRuleMatch_AppMatch_AppMockRecorder is the mock recorder for MockisRuleMatch_AppMatch_App
type MockisRuleMatch_AppMatch_AppMockRecorder struct {
	mock *MockisRuleMatch_AppMatch_App
}

// NewMockisRuleMatch_AppMatch_App creates a new mock instance
func NewMockisRuleMatch_AppMatch_App(ctrl *gomock.Controller) *MockisRuleMatch_AppMatch_App {
	mock := &MockisRuleMatch_AppMatch_App{ctrl: ctrl}
	mock.recorder = &MockisRuleMatch_AppMatch_AppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRuleMatch_AppMatch_App) EXPECT() *MockisRuleMatch_AppMatch_AppMockRecorder {
	return m.recorder
}

// isRuleMatch_AppMatch_App mocks base method
func (m *MockisRuleMatch_AppMatch_App) isRuleMatch_AppMatch_App() {
	m.ctrl.Call(m, "isRuleMatch_AppMatch_App")
}

// isRuleMatch_AppMatch_App indicates an expected call of isRuleMatch_AppMatch_App
func (mr *MockisRuleMatch_AppMatch_AppMockRecorder) isRuleMatch_AppMatch_App() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRuleMatch_AppMatch_App", reflect.TypeOf((*MockisRuleMatch_AppMatch_App)(nil).isRuleMatch_AppMatch_App))
}

// MarshalTo mocks base method
func (m *MockisRuleMatch_AppMatch_App) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisRuleMatch_AppMatch_AppMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRuleMatch_AppMatch_App)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisRuleMatch_AppMatch_App) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisRuleMatch_AppMatch_AppMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRuleMatch_AppMatch_App)(nil).Size))
}
