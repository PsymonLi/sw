// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SoftwarePhvPipeline: pipeline to inject the software phv
type SoftwarePhvPipeline int32

const (
	SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA   SoftwarePhvPipeline = 0
	SoftwarePhvPipeline_SOFTWARE_PHV_TXDMA   SoftwarePhvPipeline = 1
	SoftwarePhvPipeline_SOFTWARE_PHV_INGRESS SoftwarePhvPipeline = 2
	SoftwarePhvPipeline_SOFTWARE_PHV_EGRESS  SoftwarePhvPipeline = 3
)

var SoftwarePhvPipeline_name = map[int32]string{
	0: "SOFTWARE_PHV_RXDMA",
	1: "SOFTWARE_PHV_TXDMA",
	2: "SOFTWARE_PHV_INGRESS",
	3: "SOFTWARE_PHV_EGRESS",
}
var SoftwarePhvPipeline_value = map[string]int32{
	"SOFTWARE_PHV_RXDMA":   0,
	"SOFTWARE_PHV_TXDMA":   1,
	"SOFTWARE_PHV_INGRESS": 2,
	"SOFTWARE_PHV_EGRESS":  3,
}

func (x SoftwarePhvPipeline) String() string {
	return proto.EnumName(SoftwarePhvPipeline_name, int32(x))
}
func (SoftwarePhvPipeline) EnumDescriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0} }

type ProgramAddressReq struct {
	// Handle. E.g.: 'iris', 'p4plus'.
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// Program name to resolve
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName,proto3" json:"prog_name,omitempty"`
	// If resolve_label is false, returns the base address of the program.
	// Otherwise returns the PC offset (14 bits) of the program.
	ResolveLabel bool `protobuf:"varint,3,opt,name=resolve_label,json=resolveLabel,proto3" json:"resolve_label,omitempty"`
	// Label name to resolve
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *ProgramAddressReq) Reset()                    { *m = ProgramAddressReq{} }
func (m *ProgramAddressReq) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressReq) ProtoMessage()               {}
func (*ProgramAddressReq) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0} }

func (m *ProgramAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *ProgramAddressReq) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *ProgramAddressReq) GetResolveLabel() bool {
	if m != nil {
		return m.ResolveLabel
	}
	return false
}

func (m *ProgramAddressReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ProgramAddressResp struct {
	Addr int64 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *ProgramAddressResp) Reset()                    { *m = ProgramAddressResp{} }
func (m *ProgramAddressResp) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResp) ProtoMessage()               {}
func (*ProgramAddressResp) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{1} }

func (m *ProgramAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

type GetProgramAddressRequestMsg struct {
	Request []*ProgramAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GetProgramAddressRequestMsg) Reset()         { *m = GetProgramAddressRequestMsg{} }
func (m *GetProgramAddressRequestMsg) String() string { return proto.CompactTextString(m) }
func (*GetProgramAddressRequestMsg) ProtoMessage()    {}
func (*GetProgramAddressRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{2}
}

func (m *GetProgramAddressRequestMsg) GetRequest() []*ProgramAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ProgramAddressResponseMsg struct {
	Response []*ProgramAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProgramAddressResponseMsg) Reset()         { *m = ProgramAddressResponseMsg{} }
func (m *ProgramAddressResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ProgramAddressResponseMsg) ProtoMessage()    {}
func (*ProgramAddressResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{3}
}

func (m *ProgramAddressResponseMsg) GetResponse() []*ProgramAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type HbmAddressReq struct {
	// handle that specifies region in config (json) file
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *HbmAddressReq) Reset()                    { *m = HbmAddressReq{} }
func (m *HbmAddressReq) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressReq) ProtoMessage()               {}
func (*HbmAddressReq) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{4} }

func (m *HbmAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

type HbmAddressResp struct {
	Addr  int64  `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Size_ uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *HbmAddressResp) Reset()                    { *m = HbmAddressResp{} }
func (m *HbmAddressResp) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressResp) ProtoMessage()               {}
func (*HbmAddressResp) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{5} }

func (m *HbmAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *HbmAddressResp) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type AllocHbmAddressRequestMsg struct {
	Request []*HbmAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AllocHbmAddressRequestMsg) Reset()         { *m = AllocHbmAddressRequestMsg{} }
func (m *AllocHbmAddressRequestMsg) String() string { return proto.CompactTextString(m) }
func (*AllocHbmAddressRequestMsg) ProtoMessage()    {}
func (*AllocHbmAddressRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{6}
}

func (m *AllocHbmAddressRequestMsg) GetRequest() []*HbmAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type AllocHbmAddressResponseMsg struct {
	Response []*HbmAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AllocHbmAddressResponseMsg) Reset()         { *m = AllocHbmAddressResponseMsg{} }
func (m *AllocHbmAddressResponseMsg) String() string { return proto.CompactTextString(m) }
func (*AllocHbmAddressResponseMsg) ProtoMessage()    {}
func (*AllocHbmAddressResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{7}
}

func (m *AllocHbmAddressResponseMsg) GetResponse() []*HbmAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type LifBdfReq struct {
	Lif uint32 `protobuf:"varint,1,opt,name=lif,proto3" json:"lif,omitempty"`
	Bdf uint32 `protobuf:"varint,2,opt,name=bdf,proto3" json:"bdf,omitempty"`
}

func (m *LifBdfReq) Reset()                    { *m = LifBdfReq{} }
func (m *LifBdfReq) String() string            { return proto.CompactTextString(m) }
func (*LifBdfReq) ProtoMessage()               {}
func (*LifBdfReq) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{8} }

func (m *LifBdfReq) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfReq) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

type LifBdfResp struct {
	Lif    uint32 `protobuf:"varint,1,opt,name=lif,proto3" json:"lif,omitempty"`
	Bdf    uint32 `protobuf:"varint,2,opt,name=bdf,proto3" json:"bdf,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *LifBdfResp) Reset()                    { *m = LifBdfResp{} }
func (m *LifBdfResp) String() string            { return proto.CompactTextString(m) }
func (*LifBdfResp) ProtoMessage()               {}
func (*LifBdfResp) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{9} }

func (m *LifBdfResp) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfResp) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

func (m *LifBdfResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ConfigureLifBdfRequestMsg struct {
	Request []*LifBdfReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ConfigureLifBdfRequestMsg) Reset()         { *m = ConfigureLifBdfRequestMsg{} }
func (m *ConfigureLifBdfRequestMsg) String() string { return proto.CompactTextString(m) }
func (*ConfigureLifBdfRequestMsg) ProtoMessage()    {}
func (*ConfigureLifBdfRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{10}
}

func (m *ConfigureLifBdfRequestMsg) GetRequest() []*LifBdfReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ConfigureLifBdfResponseMsg struct {
	Response []*LifBdfResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ConfigureLifBdfResponseMsg) Reset()         { *m = ConfigureLifBdfResponseMsg{} }
func (m *ConfigureLifBdfResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ConfigureLifBdfResponseMsg) ProtoMessage()    {}
func (*ConfigureLifBdfResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{11}
}

func (m *ConfigureLifBdfResponseMsg) GetResponse() []*LifBdfResp {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvStatus represents the current status of the PHVs
type SoftwarePhvStatus struct {
	Pipeline    SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,proto3,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
	Enabled     bool                `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Done        bool                `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
	CurrentCntr uint32              `protobuf:"varint,4,opt,name=current_cntr,json=currentCntr,proto3" json:"current_cntr,omitempty"`
	InjectCntr  uint32              `protobuf:"varint,5,opt,name=inject_cntr,json=injectCntr,proto3" json:"inject_cntr,omitempty"`
}

func (m *SoftwarePhvStatus) Reset()                    { *m = SoftwarePhvStatus{} }
func (m *SoftwarePhvStatus) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvStatus) ProtoMessage()               {}
func (*SoftwarePhvStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{12} }

func (m *SoftwarePhvStatus) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

func (m *SoftwarePhvStatus) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SoftwarePhvStatus) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *SoftwarePhvStatus) GetCurrentCntr() uint32 {
	if m != nil {
		return m.CurrentCntr
	}
	return 0
}

func (m *SoftwarePhvStatus) GetInjectCntr() uint32 {
	if m != nil {
		return m.InjectCntr
	}
	return 0
}

// SoftwarePhvResponse is generic response
type SoftwarePhvResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
}

func (m *SoftwarePhvResponse) Reset()                    { *m = SoftwarePhvResponse{} }
func (m *SoftwarePhvResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponse) ProtoMessage()               {}
func (*SoftwarePhvResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{13} }

func (m *SoftwarePhvResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// SoftwarePhvResponseMsg is batched response to SoftwarePhvRequestMsg
type SoftwarePhvResponseMsg struct {
	Response []*SoftwarePhvResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvResponseMsg) Reset()                    { *m = SoftwarePhvResponseMsg{} }
func (m *SoftwarePhvResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponseMsg) ProtoMessage()               {}
func (*SoftwarePhvResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{14} }

func (m *SoftwarePhvResponseMsg) GetResponse() []*SoftwarePhvResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvGetRequest is used to get information about a PHV
type SoftwarePhvGetRequest struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,proto3,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvGetRequest) Reset()                    { *m = SoftwarePhvGetRequest{} }
func (m *SoftwarePhvGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequest) ProtoMessage()               {}
func (*SoftwarePhvGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{15} }

func (m *SoftwarePhvGetRequest) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvGetRequestMsg is batched GET request for PHV
type SoftwarePhvGetRequestMsg struct {
	Request []*SoftwarePhvGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvGetRequestMsg) Reset()         { *m = SoftwarePhvGetRequestMsg{} }
func (m *SoftwarePhvGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequestMsg) ProtoMessage()    {}
func (*SoftwarePhvGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{16}
}

func (m *SoftwarePhvGetRequestMsg) GetRequest() []*SoftwarePhvGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SoftwarePhvGetResponse captures all the information about a Sw PHV
// only if api_status indicates success, other fields are valid
type SoftwarePhvGetResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
	Status    *SoftwarePhvStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SoftwarePhvGetResponse) Reset()                    { *m = SoftwarePhvGetResponse{} }
func (m *SoftwarePhvGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponse) ProtoMessage()               {}
func (*SoftwarePhvGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{17} }

func (m *SoftwarePhvGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SoftwarePhvGetResponse) GetStatus() *SoftwarePhvStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SoftwarePhvGetResponseMsg is the batched response to SoftwarePhvGetRequestMsg
type SoftwarePhvGetResponseMsg struct {
	Response []*SoftwarePhvGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvGetResponseMsg) Reset()         { *m = SoftwarePhvGetResponseMsg{} }
func (m *SoftwarePhvGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponseMsg) ProtoMessage()    {}
func (*SoftwarePhvGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{18}
}

func (m *SoftwarePhvGetResponseMsg) GetResponse() []*SoftwarePhvGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvInject is the packet inject spec
type SoftwarePhvInject struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,proto3,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvInject) Reset()                    { *m = SoftwarePhvInject{} }
func (m *SoftwarePhvInject) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInject) ProtoMessage()               {}
func (*SoftwarePhvInject) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{19} }

func (m *SoftwarePhvInject) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvInjectMsg is the inject message
type SoftwarePhvInjectMsg struct {
	Request []*SoftwarePhvInject `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvInjectMsg) Reset()                    { *m = SoftwarePhvInjectMsg{} }
func (m *SoftwarePhvInjectMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInjectMsg) ProtoMessage()               {}
func (*SoftwarePhvInjectMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{20} }

func (m *SoftwarePhvInjectMsg) GetRequest() []*SoftwarePhvInject {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowRequestMsg struct {
	Request []*FWEvent `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LogFlowRequestMsg) Reset()                    { *m = LogFlowRequestMsg{} }
func (m *LogFlowRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowRequestMsg) ProtoMessage()               {}
func (*LogFlowRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{21} }

func (m *LogFlowRequestMsg) GetRequest() []*FWEvent {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowResponseMsg struct {
	Response []*LogFlowResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LogFlowResponseMsg) Reset()                    { *m = LogFlowResponseMsg{} }
func (m *LogFlowResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponseMsg) ProtoMessage()               {}
func (*LogFlowResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{22} }

func (m *LogFlowResponseMsg) GetResponse() []*LogFlowResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type LogFlowResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
}

func (m *LogFlowResponse) Reset()                    { *m = LogFlowResponse{} }
func (m *LogFlowResponse) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponse) ProtoMessage()               {}
func (*LogFlowResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{23} }

func (m *LogFlowResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// Codegen forms the Request and Response messages using the package name "internal"
// This is to calm the autogenerator
type EmptyRequest struct {
	Request []*Empty `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{24} }

func (m *EmptyRequest) GetRequest() []*Empty {
	if m != nil {
		return m.Request
	}
	return nil
}

type EmptyResponse struct {
	Response []*Empty `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{25} }

func (m *EmptyResponse) GetResponse() []*Empty {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*ProgramAddressReq)(nil), "internal.ProgramAddressReq")
	proto.RegisterType((*ProgramAddressResp)(nil), "internal.ProgramAddressResp")
	proto.RegisterType((*GetProgramAddressRequestMsg)(nil), "internal.GetProgramAddressRequestMsg")
	proto.RegisterType((*ProgramAddressResponseMsg)(nil), "internal.ProgramAddressResponseMsg")
	proto.RegisterType((*HbmAddressReq)(nil), "internal.HbmAddressReq")
	proto.RegisterType((*HbmAddressResp)(nil), "internal.HbmAddressResp")
	proto.RegisterType((*AllocHbmAddressRequestMsg)(nil), "internal.AllocHbmAddressRequestMsg")
	proto.RegisterType((*AllocHbmAddressResponseMsg)(nil), "internal.AllocHbmAddressResponseMsg")
	proto.RegisterType((*LifBdfReq)(nil), "internal.LifBdfReq")
	proto.RegisterType((*LifBdfResp)(nil), "internal.LifBdfResp")
	proto.RegisterType((*ConfigureLifBdfRequestMsg)(nil), "internal.ConfigureLifBdfRequestMsg")
	proto.RegisterType((*ConfigureLifBdfResponseMsg)(nil), "internal.ConfigureLifBdfResponseMsg")
	proto.RegisterType((*SoftwarePhvStatus)(nil), "internal.SoftwarePhvStatus")
	proto.RegisterType((*SoftwarePhvResponse)(nil), "internal.SoftwarePhvResponse")
	proto.RegisterType((*SoftwarePhvResponseMsg)(nil), "internal.SoftwarePhvResponseMsg")
	proto.RegisterType((*SoftwarePhvGetRequest)(nil), "internal.SoftwarePhvGetRequest")
	proto.RegisterType((*SoftwarePhvGetRequestMsg)(nil), "internal.SoftwarePhvGetRequestMsg")
	proto.RegisterType((*SoftwarePhvGetResponse)(nil), "internal.SoftwarePhvGetResponse")
	proto.RegisterType((*SoftwarePhvGetResponseMsg)(nil), "internal.SoftwarePhvGetResponseMsg")
	proto.RegisterType((*SoftwarePhvInject)(nil), "internal.SoftwarePhvInject")
	proto.RegisterType((*SoftwarePhvInjectMsg)(nil), "internal.SoftwarePhvInjectMsg")
	proto.RegisterType((*LogFlowRequestMsg)(nil), "internal.LogFlowRequestMsg")
	proto.RegisterType((*LogFlowResponseMsg)(nil), "internal.LogFlowResponseMsg")
	proto.RegisterType((*LogFlowResponse)(nil), "internal.LogFlowResponse")
	proto.RegisterType((*EmptyRequest)(nil), "internal.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "internal.EmptyResponse")
	proto.RegisterEnum("internal.SoftwarePhvPipeline", SoftwarePhvPipeline_name, SoftwarePhvPipeline_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Internal service

type InternalClient interface {
	// Program resolution related APIs
	GetProgramAddress(ctx context.Context, in *GetProgramAddressRequestMsg, opts ...grpc.CallOption) (*ProgramAddressResponseMsg, error)
	// Program resolution related APIs
	AllocHbmAddress(ctx context.Context, in *AllocHbmAddressRequestMsg, opts ...grpc.CallOption) (*AllocHbmAddressResponseMsg, error)
	// LIF BDF association APIs
	ConfigureLifBdf(ctx context.Context, in *ConfigureLifBdfRequestMsg, opts ...grpc.CallOption) (*ConfigureLifBdfResponseMsg, error)
	// Inject a software PHV
	SoftwarePhvInject(ctx context.Context, in *SoftwarePhvInjectMsg, opts ...grpc.CallOption) (*SoftwarePhvResponseMsg, error)
	// Get software PHV injection status
	SoftwarePhvGet(ctx context.Context, in *SoftwarePhvGetRequestMsg, opts ...grpc.CallOption) (*SoftwarePhvGetResponseMsg, error)
	// Simulator service definition
	LogFlow(ctx context.Context, in *LogFlowRequestMsg, opts ...grpc.CallOption) (*LogFlowResponseMsg, error)
	// Quiesce RPCs
	QuiesceMsgSnd(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	QuiesceStart(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	QuiesceStop(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type internalClient struct {
	cc *grpc.ClientConn
}

func NewInternalClient(cc *grpc.ClientConn) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) GetProgramAddress(ctx context.Context, in *GetProgramAddressRequestMsg, opts ...grpc.CallOption) (*ProgramAddressResponseMsg, error) {
	out := new(ProgramAddressResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/GetProgramAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) AllocHbmAddress(ctx context.Context, in *AllocHbmAddressRequestMsg, opts ...grpc.CallOption) (*AllocHbmAddressResponseMsg, error) {
	out := new(AllocHbmAddressResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/AllocHbmAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ConfigureLifBdf(ctx context.Context, in *ConfigureLifBdfRequestMsg, opts ...grpc.CallOption) (*ConfigureLifBdfResponseMsg, error) {
	out := new(ConfigureLifBdfResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ConfigureLifBdf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) SoftwarePhvInject(ctx context.Context, in *SoftwarePhvInjectMsg, opts ...grpc.CallOption) (*SoftwarePhvResponseMsg, error) {
	out := new(SoftwarePhvResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/SoftwarePhvInject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) SoftwarePhvGet(ctx context.Context, in *SoftwarePhvGetRequestMsg, opts ...grpc.CallOption) (*SoftwarePhvGetResponseMsg, error) {
	out := new(SoftwarePhvGetResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/SoftwarePhvGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) LogFlow(ctx context.Context, in *LogFlowRequestMsg, opts ...grpc.CallOption) (*LogFlowResponseMsg, error) {
	out := new(LogFlowResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/LogFlow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) QuiesceMsgSnd(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/internal.Internal/QuiesceMsgSnd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) QuiesceStart(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/internal.Internal/QuiesceStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) QuiesceStop(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/internal.Internal/QuiesceStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Internal service

type InternalServer interface {
	// Program resolution related APIs
	GetProgramAddress(context.Context, *GetProgramAddressRequestMsg) (*ProgramAddressResponseMsg, error)
	// Program resolution related APIs
	AllocHbmAddress(context.Context, *AllocHbmAddressRequestMsg) (*AllocHbmAddressResponseMsg, error)
	// LIF BDF association APIs
	ConfigureLifBdf(context.Context, *ConfigureLifBdfRequestMsg) (*ConfigureLifBdfResponseMsg, error)
	// Inject a software PHV
	SoftwarePhvInject(context.Context, *SoftwarePhvInjectMsg) (*SoftwarePhvResponseMsg, error)
	// Get software PHV injection status
	SoftwarePhvGet(context.Context, *SoftwarePhvGetRequestMsg) (*SoftwarePhvGetResponseMsg, error)
	// Simulator service definition
	LogFlow(context.Context, *LogFlowRequestMsg) (*LogFlowResponseMsg, error)
	// Quiesce RPCs
	QuiesceMsgSnd(context.Context, *EmptyRequest) (*EmptyResponse, error)
	QuiesceStart(context.Context, *EmptyRequest) (*EmptyResponse, error)
	QuiesceStop(context.Context, *EmptyRequest) (*EmptyResponse, error)
}

func RegisterInternalServer(s *grpc.Server, srv InternalServer) {
	s.RegisterService(&_Internal_serviceDesc, srv)
}

func _Internal_GetProgramAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramAddressRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetProgramAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/GetProgramAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetProgramAddress(ctx, req.(*GetProgramAddressRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_AllocHbmAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocHbmAddressRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).AllocHbmAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/AllocHbmAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).AllocHbmAddress(ctx, req.(*AllocHbmAddressRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ConfigureLifBdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureLifBdfRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ConfigureLifBdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ConfigureLifBdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ConfigureLifBdf(ctx, req.(*ConfigureLifBdfRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_SoftwarePhvInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftwarePhvInjectMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).SoftwarePhvInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/SoftwarePhvInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).SoftwarePhvInject(ctx, req.(*SoftwarePhvInjectMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_SoftwarePhvGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftwarePhvGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).SoftwarePhvGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/SoftwarePhvGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).SoftwarePhvGet(ctx, req.(*SoftwarePhvGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_LogFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFlowRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).LogFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/LogFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).LogFlow(ctx, req.(*LogFlowRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_QuiesceMsgSnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).QuiesceMsgSnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/QuiesceMsgSnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).QuiesceMsgSnd(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_QuiesceStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).QuiesceStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/QuiesceStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).QuiesceStart(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_QuiesceStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).QuiesceStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/QuiesceStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).QuiesceStop(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Internal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProgramAddress",
			Handler:    _Internal_GetProgramAddress_Handler,
		},
		{
			MethodName: "AllocHbmAddress",
			Handler:    _Internal_AllocHbmAddress_Handler,
		},
		{
			MethodName: "ConfigureLifBdf",
			Handler:    _Internal_ConfigureLifBdf_Handler,
		},
		{
			MethodName: "SoftwarePhvInject",
			Handler:    _Internal_SoftwarePhvInject_Handler,
		},
		{
			MethodName: "SoftwarePhvGet",
			Handler:    _Internal_SoftwarePhvGet_Handler,
		},
		{
			MethodName: "LogFlow",
			Handler:    _Internal_LogFlow_Handler,
		},
		{
			MethodName: "QuiesceMsgSnd",
			Handler:    _Internal_QuiesceMsgSnd_Handler,
		},
		{
			MethodName: "QuiesceStart",
			Handler:    _Internal_QuiesceStart_Handler,
		},
		{
			MethodName: "QuiesceStop",
			Handler:    _Internal_QuiesceStop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}

// Client API for SoftwarePhv service

type SoftwarePhvClient interface {
}

type softwarePhvClient struct {
	cc *grpc.ClientConn
}

func NewSoftwarePhvClient(cc *grpc.ClientConn) SoftwarePhvClient {
	return &softwarePhvClient{cc}
}

// Server API for SoftwarePhv service

type SoftwarePhvServer interface {
}

func RegisterSoftwarePhvServer(s *grpc.Server, srv SoftwarePhvServer) {
	s.RegisterService(&_SoftwarePhv_serviceDesc, srv)
}

var _SoftwarePhv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.SoftwarePhv",
	HandlerType: (*SoftwarePhvServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "internal.proto",
}

func (m *ProgramAddressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramAddressReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Handle)))
		i += copy(dAtA[i:], m.Handle)
	}
	if len(m.ProgName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ProgName)))
		i += copy(dAtA[i:], m.ProgName)
	}
	if m.ResolveLabel {
		dAtA[i] = 0x18
		i++
		if m.ResolveLabel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	return i, nil
}

func (m *ProgramAddressResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramAddressResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Addr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Addr))
	}
	return i, nil
}

func (m *GetProgramAddressRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProgramAddressRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProgramAddressResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramAddressResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HbmAddressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmAddressReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Handle)))
		i += copy(dAtA[i:], m.Handle)
	}
	return i, nil
}

func (m *HbmAddressResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmAddressResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Addr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Addr))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *AllocHbmAddressRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocHbmAddressRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AllocHbmAddressResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocHbmAddressResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifBdfReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifBdfReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lif != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Lif))
	}
	if m.Bdf != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Bdf))
	}
	return i, nil
}

func (m *LifBdfResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifBdfResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lif != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Lif))
	}
	if m.Bdf != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Bdf))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *ConfigureLifBdfRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureLifBdfRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConfigureLifBdfResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureLifBdfResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SoftwarePhvStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pipeline != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pipeline))
	}
	if m.Enabled {
		dAtA[i] = 0x10
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Done {
		dAtA[i] = 0x18
		i++
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CurrentCntr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CurrentCntr))
	}
	if m.InjectCntr != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InjectCntr))
	}
	return i, nil
}

func (m *SoftwarePhvResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *SoftwarePhvResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SoftwarePhvGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pipeline != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pipeline))
	}
	return i, nil
}

func (m *SoftwarePhvGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SoftwarePhvGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SoftwarePhvGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SoftwarePhvInject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvInject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pipeline != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pipeline))
	}
	return i, nil
}

func (m *SoftwarePhvInjectMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvInjectMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LogFlowRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFlowRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LogFlowResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFlowResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LogFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *EmptyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintInternal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProgramAddressReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.ProgName)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.ResolveLabel {
		n += 2
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProgramAddressResp) Size() (n int) {
	var l int
	_ = l
	if m.Addr != 0 {
		n += 1 + sovInternal(uint64(m.Addr))
	}
	return n
}

func (m *GetProgramAddressRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProgramAddressResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *HbmAddressReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *HbmAddressResp) Size() (n int) {
	var l int
	_ = l
	if m.Addr != 0 {
		n += 1 + sovInternal(uint64(m.Addr))
	}
	if m.Size_ != 0 {
		n += 1 + sovInternal(uint64(m.Size_))
	}
	return n
}

func (m *AllocHbmAddressRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *AllocHbmAddressResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *LifBdfReq) Size() (n int) {
	var l int
	_ = l
	if m.Lif != 0 {
		n += 1 + sovInternal(uint64(m.Lif))
	}
	if m.Bdf != 0 {
		n += 1 + sovInternal(uint64(m.Bdf))
	}
	return n
}

func (m *LifBdfResp) Size() (n int) {
	var l int
	_ = l
	if m.Lif != 0 {
		n += 1 + sovInternal(uint64(m.Lif))
	}
	if m.Bdf != 0 {
		n += 1 + sovInternal(uint64(m.Bdf))
	}
	if m.Status != 0 {
		n += 1 + sovInternal(uint64(m.Status))
	}
	return n
}

func (m *ConfigureLifBdfRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ConfigureLifBdfResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *SoftwarePhvStatus) Size() (n int) {
	var l int
	_ = l
	if m.Pipeline != 0 {
		n += 1 + sovInternal(uint64(m.Pipeline))
	}
	if m.Enabled {
		n += 2
	}
	if m.Done {
		n += 2
	}
	if m.CurrentCntr != 0 {
		n += 1 + sovInternal(uint64(m.CurrentCntr))
	}
	if m.InjectCntr != 0 {
		n += 1 + sovInternal(uint64(m.InjectCntr))
	}
	return n
}

func (m *SoftwarePhvResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	return n
}

func (m *SoftwarePhvResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *SoftwarePhvGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Pipeline != 0 {
		n += 1 + sovInternal(uint64(m.Pipeline))
	}
	return n
}

func (m *SoftwarePhvGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *SoftwarePhvGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *SoftwarePhvGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *SoftwarePhvInject) Size() (n int) {
	var l int
	_ = l
	if m.Pipeline != 0 {
		n += 1 + sovInternal(uint64(m.Pipeline))
	}
	return n
}

func (m *SoftwarePhvInjectMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *LogFlowRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *LogFlowResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *LogFlowResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	return n
}

func (m *EmptyRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *EmptyResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func sovInternal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProgramAddressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramAddressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramAddressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveLabel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResolveLabel = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgramAddressResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramAddressResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramAddressResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProgramAddressRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProgramAddressRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProgramAddressRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProgramAddressReq{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgramAddressResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramAddressResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramAddressResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProgramAddressResp{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmAddressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmAddressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmAddressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmAddressResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmAddressResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmAddressResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocHbmAddressRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocHbmAddressRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocHbmAddressRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &HbmAddressReq{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocHbmAddressResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocHbmAddressResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocHbmAddressResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &HbmAddressResp{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifBdfReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifBdfReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifBdfReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lif", wireType)
			}
			m.Lif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bdf", wireType)
			}
			m.Bdf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bdf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifBdfResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifBdfResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifBdfResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lif", wireType)
			}
			m.Lif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bdf", wireType)
			}
			m.Bdf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bdf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureLifBdfRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureLifBdfRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureLifBdfRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &LifBdfReq{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureLifBdfResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureLifBdfResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureLifBdfResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LifBdfResp{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			m.Pipeline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pipeline |= (SoftwarePhvPipeline(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCntr", wireType)
			}
			m.CurrentCntr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCntr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InjectCntr", wireType)
			}
			m.InjectCntr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InjectCntr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SoftwarePhvResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			m.Pipeline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pipeline |= (SoftwarePhvPipeline(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SoftwarePhvGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SoftwarePhvStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SoftwarePhvGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvInject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvInject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvInject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			m.Pipeline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pipeline |= (SoftwarePhvPipeline(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvInjectMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvInjectMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvInjectMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SoftwarePhvInject{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogFlowRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFlowRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFlowRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &FWEvent{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogFlowResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFlowResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFlowResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LogFlowResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &Empty{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &Empty{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("internal.proto", fileDescriptorInternal) }

var fileDescriptorInternal = []byte{
	// 993 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5b, 0x73, 0xdb, 0x44,
	0x14, 0xb6, 0xea, 0xa6, 0x71, 0x8e, 0x2f, 0x4d, 0x36, 0xc1, 0xb1, 0x9d, 0x92, 0x18, 0x95, 0x8b,
	0x87, 0x19, 0x02, 0xa4, 0x94, 0x69, 0x66, 0x60, 0xc0, 0x29, 0xce, 0x05, 0x12, 0x13, 0xd6, 0x69,
	0xc3, 0x65, 0x06, 0x8f, 0x6c, 0xad, 0x1d, 0x31, 0xb2, 0x24, 0x56, 0x72, 0x42, 0x79, 0xe5, 0x9d,
	0xdf, 0xc4, 0x23, 0x8f, 0xfc, 0x02, 0x86, 0xc9, 0x23, 0xcf, 0xfc, 0x00, 0x46, 0xbb, 0xab, 0xeb,
	0xca, 0x6e, 0xa7, 0xe9, 0x53, 0xf6, 0x9c, 0x3d, 0xe7, 0xf3, 0x39, 0xdf, 0xb9, 0xac, 0x02, 0x15,
	0xc3, 0xf2, 0x08, 0xb5, 0x34, 0x73, 0xdb, 0xa1, 0xb6, 0x67, 0xa3, 0x42, 0x20, 0x37, 0x8a, 0xde,
	0x33, 0x87, 0xb8, 0x5c, 0xdd, 0x28, 0x8e, 0xae, 0x4c, 0x7b, 0xcc, 0x05, 0xf5, 0x37, 0x05, 0x56,
	0x4e, 0xa9, 0x3d, 0xa6, 0xda, 0xa4, 0xad, 0xeb, 0x94, 0xb8, 0x2e, 0x26, 0x3f, 0xa3, 0x2a, 0xdc,
	0xb9, 0xd0, 0x2c, 0xdd, 0x24, 0x35, 0xa5, 0xa9, 0xb4, 0x96, 0xb0, 0x90, 0xd0, 0x06, 0x2c, 0x39,
	0xd4, 0x1e, 0xf7, 0x2d, 0x6d, 0x42, 0x6a, 0xb7, 0xd8, 0x55, 0xc1, 0x57, 0x74, 0xb5, 0x09, 0x41,
	0xf7, 0xa1, 0x4c, 0x89, 0x6b, 0x9b, 0x97, 0xa4, 0x6f, 0x6a, 0x03, 0x62, 0xd6, 0xf2, 0x4d, 0xa5,
	0x55, 0xc0, 0x25, 0xa1, 0x3c, 0xf6, 0x75, 0x68, 0x0d, 0x16, 0xf8, 0xe5, 0x6d, 0xe6, 0xcd, 0x05,
	0xb5, 0x05, 0x28, 0x1d, 0x84, 0xeb, 0x20, 0x04, 0xb7, 0x35, 0x5d, 0xa7, 0x2c, 0x86, 0x3c, 0x66,
	0x67, 0xf5, 0x0c, 0x36, 0x0e, 0x88, 0x27, 0x45, 0x3c, 0x25, 0xae, 0x77, 0xe2, 0x8e, 0xd1, 0x43,
	0x58, 0xa4, 0x5c, 0xaa, 0x29, 0xcd, 0x7c, 0xab, 0xb8, 0xb3, 0xb1, 0x1d, 0x92, 0x22, 0x39, 0xe1,
	0xc0, 0x56, 0x7d, 0x02, 0x75, 0xf9, 0xf7, 0x6d, 0xcb, 0x25, 0x3e, 0xe6, 0x23, 0x28, 0x50, 0x21,
	0x0a, 0xd0, 0x7b, 0xb3, 0x41, 0x5d, 0x07, 0x87, 0xd6, 0xea, 0x3b, 0x50, 0x3e, 0x1c, 0xbc, 0x00,
	0xaf, 0xea, 0x23, 0xa8, 0xc4, 0x0d, 0xb3, 0x73, 0xf7, 0x75, 0xae, 0xf1, 0x2b, 0x27, 0xbe, 0x8c,
	0xd9, 0x59, 0xed, 0x42, 0xbd, 0x6d, 0x9a, 0xf6, 0x30, 0xf1, 0x3b, 0x01, 0x1b, 0x1f, 0xa6, 0xd9,
	0x58, 0x8f, 0x02, 0x4f, 0x38, 0x44, 0x4c, 0x60, 0x68, 0x48, 0x78, 0x11, 0x15, 0x1f, 0x49, 0x54,
	0xd4, 0xb2, 0x11, 0x13, 0x34, 0xbc, 0x0f, 0x4b, 0xc7, 0xc6, 0x68, 0x4f, 0x1f, 0xf9, 0x14, 0x2c,
	0x43, 0xde, 0x34, 0x46, 0x2c, 0xaf, 0x32, 0xf6, 0x8f, 0xbe, 0x66, 0xa0, 0x8f, 0x44, 0x56, 0xfe,
	0x51, 0x3d, 0x04, 0x08, 0x1c, 0x5c, 0xe7, 0x45, 0x3c, 0x7c, 0x62, 0x5d, 0x4f, 0xf3, 0xa6, 0x2e,
	0x6b, 0xba, 0x05, 0x2c, 0x24, 0xf5, 0x4b, 0xa8, 0x3f, 0xb6, 0xad, 0x91, 0x31, 0x9e, 0x52, 0x12,
	0xc6, 0x10, 0xd0, 0xf3, 0x5e, 0x9a, 0x9e, 0xd5, 0x28, 0x99, 0xd0, 0x38, 0xa2, 0xa6, 0x0b, 0x0d,
	0x09, 0x2b, 0xa2, 0xe6, 0x03, 0x89, 0x9a, 0x35, 0x19, 0x2d, 0x41, 0xcb, 0x1f, 0x0a, 0xac, 0xf4,
	0xec, 0x91, 0x77, 0xa5, 0x51, 0x72, 0x7a, 0x71, 0xd9, 0x63, 0x11, 0xa3, 0x5d, 0x28, 0x38, 0x86,
	0x43, 0x4c, 0xc3, 0xe2, 0x4d, 0x52, 0xd9, 0x79, 0x3d, 0xc2, 0x89, 0x99, 0x9f, 0x0a, 0x23, 0x1c,
	0x9a, 0xa3, 0x1a, 0x2c, 0x12, 0x4b, 0x1b, 0x98, 0x44, 0x67, 0xd4, 0x14, 0x70, 0x20, 0xfa, 0x9d,
	0xa3, 0xdb, 0x16, 0x11, 0x13, 0xc9, 0xce, 0xe8, 0x0d, 0x28, 0x0d, 0xa7, 0x94, 0x12, 0xcb, 0xeb,
	0x0f, 0x2d, 0x8f, 0xb2, 0x81, 0x2c, 0xe3, 0xa2, 0xd0, 0x3d, 0xb6, 0x3c, 0x8a, 0xb6, 0xa0, 0x68,
	0x58, 0x3f, 0x91, 0xa1, 0xb0, 0x58, 0x60, 0x16, 0xc0, 0x55, 0xbe, 0x81, 0xfa, 0x14, 0x56, 0x63,
	0x21, 0x05, 0x74, 0xa0, 0xcf, 0x00, 0x34, 0xc7, 0xe8, 0x8b, 0x8a, 0xf0, 0x2c, 0x96, 0xb7, 0xf9,
	0x0e, 0x6a, 0x3b, 0x06, 0xcf, 0x74, 0xaf, 0xf2, 0xef, 0xdf, 0x5b, 0x31, 0x3b, 0xbc, 0xa4, 0x05,
	0x57, 0x6a, 0x0f, 0xaa, 0x19, 0xb8, 0x3e, 0xcd, 0xbb, 0x12, 0xcd, 0xd9, 0xf4, 0x04, 0x3e, 0x31,
	0xbe, 0x31, 0xbc, 0x16, 0x33, 0x38, 0x20, 0x9e, 0x68, 0x85, 0x1b, 0x50, 0xae, 0x3e, 0x81, 0x5a,
	0x26, 0x26, 0x0f, 0x35, 0xd5, 0x5e, 0x5b, 0x99, 0xa8, 0x91, 0x53, 0xd4, 0x6a, 0xbf, 0x2b, 0x09,
	0x02, 0x98, 0xc9, 0x2b, 0xe2, 0x16, 0x3d, 0x08, 0x47, 0xc5, 0x6f, 0x92, 0xc4, 0x86, 0x94, 0xba,
	0x31, 0x9c, 0xa3, 0xef, 0xa0, 0x9e, 0x1d, 0x8f, 0x9f, 0xe8, 0x27, 0x52, 0x4d, 0x9a, 0xb3, 0x33,
	0x95, 0xca, 0xd2, 0x4d, 0x4c, 0xc1, 0x11, 0x6b, 0xae, 0x9b, 0x94, 0xe4, 0x04, 0xd6, 0x24, 0xbc,
	0xe7, 0x3d, 0x0d, 0x92, 0x43, 0x54, 0x8a, 0x4f, 0x61, 0xe5, 0xd8, 0x1e, 0xef, 0x9b, 0xf6, 0x55,
	0xac, 0xb4, 0xad, 0x34, 0x56, 0x65, 0x9b, 0x3f, 0xaa, 0xfb, 0xe7, 0x9d, 0x4b, 0x62, 0xc5, 0xdc,
	0xbf, 0x02, 0x14, 0xba, 0x47, 0x8c, 0x3d, 0x94, 0x18, 0xab, 0xc7, 0x96, 0x45, 0xd2, 0x3e, 0xd1,
	0xc1, 0x77, 0x53, 0x97, 0x37, 0x1f, 0xb5, 0x8f, 0xa1, 0xd4, 0x99, 0x38, 0xde, 0xb3, 0x60, 0x18,
	0xde, 0x4e, 0xa7, 0x56, 0x12, 0x68, 0xdc, 0x2a, 0x4c, 0x6c, 0x17, 0xca, 0xc2, 0x4f, 0x44, 0xd2,
	0x92, 0x72, 0x4a, 0x7a, 0x86, 0xb7, 0xef, 0xfe, 0x92, 0xd8, 0x1a, 0x41, 0x09, 0x51, 0x15, 0x50,
	0xef, 0xeb, 0xfd, 0xb3, 0xf3, 0x36, 0xee, 0xf4, 0x4f, 0x0f, 0x9f, 0xf6, 0xf1, 0xb7, 0x5f, 0x9c,
	0xb4, 0x97, 0x73, 0x92, 0xfe, 0x8c, 0xe9, 0x15, 0x54, 0x83, 0xb5, 0x84, 0xfe, 0xa8, 0x7b, 0x80,
	0x3b, 0xbd, 0xde, 0xf2, 0x2d, 0xb4, 0x0e, 0xab, 0x89, 0x9b, 0x0e, 0xbf, 0xc8, 0xef, 0xfc, 0xb7,
	0x00, 0x85, 0x23, 0xc1, 0x33, 0xd2, 0x60, 0x45, 0xfa, 0x94, 0x40, 0x6f, 0x45, 0x75, 0x98, 0xf3,
	0x9d, 0xd1, 0xb8, 0x3f, 0xef, 0x0b, 0x40, 0x54, 0x59, 0xcd, 0xa1, 0x1f, 0xe1, 0x6e, 0xea, 0x35,
	0x45, 0x31, 0xcf, 0x99, 0x0f, 0x77, 0xe3, 0xcd, 0x39, 0x46, 0x29, 0xfc, 0xd4, 0x93, 0x14, 0xc7,
	0x9f, 0xf9, 0xf2, 0xc5, 0xf1, 0x67, 0x3f, 0x69, 0x6a, 0x0e, 0x9d, 0x67, 0xcd, 0xe6, 0xe6, 0x9c,
	0xb9, 0xf1, 0xc1, 0x9b, 0x73, 0x17, 0x32, 0x07, 0xfe, 0x01, 0x2a, 0xc9, 0xc5, 0x80, 0xd4, 0xe7,
	0x2c, 0xc7, 0x14, 0xeb, 0x33, 0xb7, 0x91, 0x9a, 0x43, 0xfb, 0xb0, 0x28, 0xc6, 0x04, 0x6d, 0x64,
	0x8c, 0x55, 0x08, 0x77, 0x6f, 0xe6, 0xcc, 0x71, 0x9c, 0x3d, 0x28, 0x7f, 0x33, 0x35, 0x88, 0x3b,
	0xf4, 0xe5, 0x9e, 0xa5, 0xa3, 0x6a, 0xe4, 0x10, 0x9f, 0x99, 0xc6, 0xba, 0xa4, 0x17, 0x03, 0x9b,
	0x43, 0x6d, 0x28, 0x09, 0x8c, 0x9e, 0xa7, 0x51, 0xef, 0x65, 0x20, 0x3e, 0x87, 0x62, 0x08, 0x61,
	0x3b, 0x2f, 0x81, 0xb0, 0x53, 0x86, 0x62, 0x8c, 0xaf, 0xbd, 0xea, 0x9f, 0xd7, 0x9b, 0xca, 0x5f,
	0xd7, 0x9b, 0xca, 0x3f, 0xd7, 0x9b, 0xca, 0xf7, 0x85, 0x0b, 0xcd, 0x64, 0xff, 0x0b, 0x0c, 0xee,
	0xb0, 0x3f, 0x0f, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x74, 0x32, 0x5d, 0xc4, 0x48, 0x0c, 0x00,
	0x00,
}
