// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SoftwarePhvPipeline: pipeline to inject the software phv
type SoftwarePhvPipeline int32

const (
	SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA   SoftwarePhvPipeline = 0
	SoftwarePhvPipeline_SOFTWARE_PHV_TXDMA   SoftwarePhvPipeline = 1
	SoftwarePhvPipeline_SOFTWARE_PHV_INGRESS SoftwarePhvPipeline = 2
	SoftwarePhvPipeline_SOFTWARE_PHV_EGRESS  SoftwarePhvPipeline = 3
)

var SoftwarePhvPipeline_name = map[int32]string{
	0: "SOFTWARE_PHV_RXDMA",
	1: "SOFTWARE_PHV_TXDMA",
	2: "SOFTWARE_PHV_INGRESS",
	3: "SOFTWARE_PHV_EGRESS",
}
var SoftwarePhvPipeline_value = map[string]int32{
	"SOFTWARE_PHV_RXDMA":   0,
	"SOFTWARE_PHV_TXDMA":   1,
	"SOFTWARE_PHV_INGRESS": 2,
	"SOFTWARE_PHV_EGRESS":  3,
}

func (x SoftwarePhvPipeline) String() string {
	return proto.EnumName(SoftwarePhvPipeline_name, int32(x))
}
func (SoftwarePhvPipeline) EnumDescriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0} }

// Types of Crypto Hash algos
type CryptoApiHashType int32

const (
	CryptoApiHashType_none        CryptoApiHashType = 0
	CryptoApiHashType_MD5         CryptoApiHashType = 1
	CryptoApiHashType_SHA1        CryptoApiHashType = 2
	CryptoApiHashType_SHA224      CryptoApiHashType = 3
	CryptoApiHashType_SHA256      CryptoApiHashType = 4
	CryptoApiHashType_SHA384      CryptoApiHashType = 5
	CryptoApiHashType_SHA512      CryptoApiHashType = 6
	CryptoApiHashType_SHA512_224  CryptoApiHashType = 7
	CryptoApiHashType_SHA512_256  CryptoApiHashType = 8
	CryptoApiHashType_HMAC_MD5    CryptoApiHashType = 9
	CryptoApiHashType_HMAC_SHA1   CryptoApiHashType = 10
	CryptoApiHashType_HMAC_SHA224 CryptoApiHashType = 11
	CryptoApiHashType_HMAC_SHA256 CryptoApiHashType = 12
	CryptoApiHashType_HMAC_SHA384 CryptoApiHashType = 13
	CryptoApiHashType_HMAC_SHA512 CryptoApiHashType = 14
	CryptoApiHashType_SHA3_224    CryptoApiHashType = 15
	CryptoApiHashType_SHA3_256    CryptoApiHashType = 16
	CryptoApiHashType_SHA3_384    CryptoApiHashType = 17
	CryptoApiHashType_SHA3_512    CryptoApiHashType = 18
)

var CryptoApiHashType_name = map[int32]string{
	0:  "CRYPTOAPI_HASHTYPE_NONE",
	1:  "CRYPTOAPI_HASHTYPE_MD5",
	2:  "CRYPTOAPI_HASHTYPE_SHA1",
	3:  "CRYPTOAPI_HASHTYPE_SHA224",
	4:  "CRYPTOAPI_HASHTYPE_SHA256",
	5:  "CRYPTOAPI_HASHTYPE_SHA384",
	6:  "CRYPTOAPI_HASHTYPE_SHA512",
	7:  "CRYPTOAPI_HASHTYPE_SHA512_224",
	8:  "CRYPTOAPI_HASHTYPE_SHA512_256",
	9:  "CRYPTOAPI_HASHTYPE_HMAC_MD5",
	10: "CRYPTOAPI_HASHTYPE_HMAC_SHA1",
	11: "CRYPTOAPI_HASHTYPE_HMAC_SHA224",
	12: "CRYPTOAPI_HASHTYPE_HMAC_SHA256",
	13: "CRYPTOAPI_HASHTYPE_HMAC_SHA384",
	14: "CRYPTOAPI_HASHTYPE_HMAC_SHA512",
	15: "CRYPTOAPI_HASHTYPE_SHA3_224",
	16: "CRYPTOAPI_HASHTYPE_SHA3_256",
	17: "CRYPTOAPI_HASHTYPE_SHA3_384",
	18: "CRYPTOAPI_HASHTYPE_SHA3_512",
}
var CryptoApiHashType_value = map[string]int32{
	"CRYPTOAPI_HASHTYPE_NONE":        0,
	"CRYPTOAPI_HASHTYPE_MD5":         1,
	"CRYPTOAPI_HASHTYPE_SHA1":        2,
	"CRYPTOAPI_HASHTYPE_SHA224":      3,
	"CRYPTOAPI_HASHTYPE_SHA256":      4,
	"CRYPTOAPI_HASHTYPE_SHA384":      5,
	"CRYPTOAPI_HASHTYPE_SHA512":      6,
	"CRYPTOAPI_HASHTYPE_SHA512_224":  7,
	"CRYPTOAPI_HASHTYPE_SHA512_256":  8,
	"CRYPTOAPI_HASHTYPE_HMAC_MD5":    9,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA1":   10,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA224": 11,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA256": 12,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA384": 13,
	"CRYPTOAPI_HASHTYPE_HMAC_SHA512": 14,
	"CRYPTOAPI_HASHTYPE_SHA3_224":    15,
	"CRYPTOAPI_HASHTYPE_SHA3_256":    16,
	"CRYPTOAPI_HASHTYPE_SHA3_384":    17,
	"CRYPTOAPI_HASHTYPE_SHA3_512":    18,
}

func (x CryptoApiHashType) String() string {
	return proto.EnumName(CryptoApiHashType_name, int32(x))
}
func (CryptoApiHashType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInternal, []int{1} }

type CryptoApiType int32

const (
	CryptoApiType_ASYMAPI_ECC_POINT_MUL_FP    CryptoApiType = 0
	CryptoApiType_ASYMAPI_ECDSA_SIG_GEN_FP    CryptoApiType = 1
	CryptoApiType_ASYMAPI_ECDSA_SIG_VERIFY_FP CryptoApiType = 2
	CryptoApiType_ASYMAPI_RSA_ENCRYPT         CryptoApiType = 3
	CryptoApiType_ASYMAPI_RSA_DECRYPT         CryptoApiType = 4
	CryptoApiType_ASYMAPI_RSA_CRT_DECRYPT     CryptoApiType = 5
	CryptoApiType_SYMMAPI_HASH_GENERATE       CryptoApiType = 6
	CryptoApiType_SYMMAPI_HASH_VERIFY         CryptoApiType = 7
	CryptoApiType_ASYMAPI_RSA_SIG_GEN         CryptoApiType = 8
	CryptoApiType_ASYMAPI_RSA_SIG_VERIFY      CryptoApiType = 9
	CryptoApiType_ASYMAPI_SETUP_PRIV_KEY      CryptoApiType = 10
	CryptoApiType_ASYMAPI_SETUP_CERT          CryptoApiType = 11
	CryptoApiType_ASYMAPI_SETUP_PRIV_KEY_EX   CryptoApiType = 13
	CryptoApiType_ASYMAPI_FIPS_RSA_SIG_GEN    CryptoApiType = 14
	CryptoApiType_ASYMAPI_FIPS_RSA_SIG_VERIFY CryptoApiType = 15
)

var CryptoApiType_name = map[int32]string{
	0:  "ASYMAPI_ECC_POINT_MUL_FP",
	1:  "ASYMAPI_ECDSA_SIG_GEN_FP",
	2:  "ASYMAPI_ECDSA_SIG_VERIFY_FP",
	3:  "ASYMAPI_RSA_ENCRYPT",
	4:  "ASYMAPI_RSA_DECRYPT",
	5:  "ASYMAPI_RSA_CRT_DECRYPT",
	6:  "SYMMAPI_HASH_GENERATE",
	7:  "SYMMAPI_HASH_VERIFY",
	8:  "ASYMAPI_RSA_SIG_GEN",
	9:  "ASYMAPI_RSA_SIG_VERIFY",
	10: "ASYMAPI_SETUP_PRIV_KEY",
	11: "ASYMAPI_SETUP_CERT",
	13: "ASYMAPI_SETUP_PRIV_KEY_EX",
	14: "ASYMAPI_FIPS_RSA_SIG_GEN",
	15: "ASYMAPI_FIPS_RSA_SIG_VERIFY",
}
var CryptoApiType_value = map[string]int32{
	"ASYMAPI_ECC_POINT_MUL_FP":    0,
	"ASYMAPI_ECDSA_SIG_GEN_FP":    1,
	"ASYMAPI_ECDSA_SIG_VERIFY_FP": 2,
	"ASYMAPI_RSA_ENCRYPT":         3,
	"ASYMAPI_RSA_DECRYPT":         4,
	"ASYMAPI_RSA_CRT_DECRYPT":     5,
	"SYMMAPI_HASH_GENERATE":       6,
	"SYMMAPI_HASH_VERIFY":         7,
	"ASYMAPI_RSA_SIG_GEN":         8,
	"ASYMAPI_RSA_SIG_VERIFY":      9,
	"ASYMAPI_SETUP_PRIV_KEY":      10,
	"ASYMAPI_SETUP_CERT":          11,
	"ASYMAPI_SETUP_PRIV_KEY_EX":   13,
	"ASYMAPI_FIPS_RSA_SIG_GEN":    14,
	"ASYMAPI_FIPS_RSA_SIG_VERIFY": 15,
}

func (x CryptoApiType) String() string {
	return proto.EnumName(CryptoApiType_name, int32(x))
}
func (CryptoApiType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInternal, []int{2} }

type UpdateType int32

const (
	UpdateType_ADD_UPDATE UpdateType = 0
	UpdateType_DELETE     UpdateType = 1
)

var UpdateType_name = map[int32]string{
	0: "ADD_UPDATE",
	1: "DELETE",
}
var UpdateType_value = map[string]int32{
	"ADD_UPDATE": 0,
	"DELETE":     1,
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}
func (UpdateType) EnumDescriptor() ([]byte, []int) { return fileDescriptorInternal, []int{3} }

type IntPortSpeed int32

const (
	IntPortSpeed_SPEED_10M   IntPortSpeed = 0
	IntPortSpeed_SPEED_100M  IntPortSpeed = 1
	IntPortSpeed_SPEED_1G    IntPortSpeed = 2
	IntPortSpeed_SPEED_RESVD IntPortSpeed = 3
)

var IntPortSpeed_name = map[int32]string{
	0: "SPEED_10M",
	1: "SPEED_100M",
	2: "SPEED_1G",
	3: "SPEED_RESVD",
}
var IntPortSpeed_value = map[string]int32{
	"SPEED_10M":   0,
	"SPEED_100M":  1,
	"SPEED_1G":    2,
	"SPEED_RESVD": 3,
}

func (x IntPortSpeed) String() string {
	return proto.EnumName(IntPortSpeed_name, int32(x))
}
func (IntPortSpeed) EnumDescriptor() ([]byte, []int) { return fileDescriptorInternal, []int{4} }

type IntPortDplxMode int32

const (
	IntPortDplxMode_HALF_DUPLEX IntPortDplxMode = 0
	IntPortDplxMode_FULL_DUPLEX IntPortDplxMode = 1
)

var IntPortDplxMode_name = map[int32]string{
	0: "HALF_DUPLEX",
	1: "FULL_DUPLEX",
}
var IntPortDplxMode_value = map[string]int32{
	"HALF_DUPLEX": 0,
	"FULL_DUPLEX": 1,
}

func (x IntPortDplxMode) String() string {
	return proto.EnumName(IntPortDplxMode_name, int32(x))
}
func (IntPortDplxMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorInternal, []int{5} }

type ProgramAddressReq struct {
	// Handle. E.g.: 'iris', 'p4plus'.
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// Program name to resolve
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName,proto3" json:"prog_name,omitempty"`
	// If resolve_label is false, returns the base address of the program.
	// Otherwise returns the PC offset (14 bits) of the program.
	ResolveLabel bool `protobuf:"varint,3,opt,name=resolve_label,json=resolveLabel,proto3" json:"resolve_label,omitempty"`
	// Label name to resolve
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *ProgramAddressReq) Reset()                    { *m = ProgramAddressReq{} }
func (m *ProgramAddressReq) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressReq) ProtoMessage()               {}
func (*ProgramAddressReq) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0} }

func (m *ProgramAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *ProgramAddressReq) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *ProgramAddressReq) GetResolveLabel() bool {
	if m != nil {
		return m.ResolveLabel
	}
	return false
}

func (m *ProgramAddressReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ProgramAddressResp struct {
	Addr int64 `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *ProgramAddressResp) Reset()                    { *m = ProgramAddressResp{} }
func (m *ProgramAddressResp) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResp) ProtoMessage()               {}
func (*ProgramAddressResp) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{1} }

func (m *ProgramAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

type GetProgramAddressRequestMsg struct {
	Request []*ProgramAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GetProgramAddressRequestMsg) Reset()         { *m = GetProgramAddressRequestMsg{} }
func (m *GetProgramAddressRequestMsg) String() string { return proto.CompactTextString(m) }
func (*GetProgramAddressRequestMsg) ProtoMessage()    {}
func (*GetProgramAddressRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{2}
}

func (m *GetProgramAddressRequestMsg) GetRequest() []*ProgramAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ProgramAddressResponseMsg struct {
	Response []*ProgramAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProgramAddressResponseMsg) Reset()         { *m = ProgramAddressResponseMsg{} }
func (m *ProgramAddressResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ProgramAddressResponseMsg) ProtoMessage()    {}
func (*ProgramAddressResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{3}
}

func (m *ProgramAddressResponseMsg) GetResponse() []*ProgramAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type HbmAddressReq struct {
	// handle that specifies region in config (json) file
	Handle string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *HbmAddressReq) Reset()                    { *m = HbmAddressReq{} }
func (m *HbmAddressReq) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressReq) ProtoMessage()               {}
func (*HbmAddressReq) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{4} }

func (m *HbmAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

type HbmAddressResp struct {
	Addr  int64  `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Size_ uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *HbmAddressResp) Reset()                    { *m = HbmAddressResp{} }
func (m *HbmAddressResp) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressResp) ProtoMessage()               {}
func (*HbmAddressResp) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{5} }

func (m *HbmAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *HbmAddressResp) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type AllocHbmAddressRequestMsg struct {
	Request []*HbmAddressReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AllocHbmAddressRequestMsg) Reset()         { *m = AllocHbmAddressRequestMsg{} }
func (m *AllocHbmAddressRequestMsg) String() string { return proto.CompactTextString(m) }
func (*AllocHbmAddressRequestMsg) ProtoMessage()    {}
func (*AllocHbmAddressRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{6}
}

func (m *AllocHbmAddressRequestMsg) GetRequest() []*HbmAddressReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type AllocHbmAddressResponseMsg struct {
	Response []*HbmAddressResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *AllocHbmAddressResponseMsg) Reset()         { *m = AllocHbmAddressResponseMsg{} }
func (m *AllocHbmAddressResponseMsg) String() string { return proto.CompactTextString(m) }
func (*AllocHbmAddressResponseMsg) ProtoMessage()    {}
func (*AllocHbmAddressResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{7}
}

func (m *AllocHbmAddressResponseMsg) GetResponse() []*HbmAddressResp {
	if m != nil {
		return m.Response
	}
	return nil
}

type LifBdfReq struct {
	Lif uint32 `protobuf:"varint,1,opt,name=lif,proto3" json:"lif,omitempty"`
	Bdf uint32 `protobuf:"varint,2,opt,name=bdf,proto3" json:"bdf,omitempty"`
}

func (m *LifBdfReq) Reset()                    { *m = LifBdfReq{} }
func (m *LifBdfReq) String() string            { return proto.CompactTextString(m) }
func (*LifBdfReq) ProtoMessage()               {}
func (*LifBdfReq) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{8} }

func (m *LifBdfReq) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfReq) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

type LifBdfResp struct {
	Lif    uint32 `protobuf:"varint,1,opt,name=lif,proto3" json:"lif,omitempty"`
	Bdf    uint32 `protobuf:"varint,2,opt,name=bdf,proto3" json:"bdf,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *LifBdfResp) Reset()                    { *m = LifBdfResp{} }
func (m *LifBdfResp) String() string            { return proto.CompactTextString(m) }
func (*LifBdfResp) ProtoMessage()               {}
func (*LifBdfResp) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{9} }

func (m *LifBdfResp) GetLif() uint32 {
	if m != nil {
		return m.Lif
	}
	return 0
}

func (m *LifBdfResp) GetBdf() uint32 {
	if m != nil {
		return m.Bdf
	}
	return 0
}

func (m *LifBdfResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ConfigureLifBdfRequestMsg struct {
	Request []*LifBdfReq `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ConfigureLifBdfRequestMsg) Reset()         { *m = ConfigureLifBdfRequestMsg{} }
func (m *ConfigureLifBdfRequestMsg) String() string { return proto.CompactTextString(m) }
func (*ConfigureLifBdfRequestMsg) ProtoMessage()    {}
func (*ConfigureLifBdfRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{10}
}

func (m *ConfigureLifBdfRequestMsg) GetRequest() []*LifBdfReq {
	if m != nil {
		return m.Request
	}
	return nil
}

type ConfigureLifBdfResponseMsg struct {
	Response []*LifBdfResp `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ConfigureLifBdfResponseMsg) Reset()         { *m = ConfigureLifBdfResponseMsg{} }
func (m *ConfigureLifBdfResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ConfigureLifBdfResponseMsg) ProtoMessage()    {}
func (*ConfigureLifBdfResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{11}
}

func (m *ConfigureLifBdfResponseMsg) GetResponse() []*LifBdfResp {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvStatus represents the current status of the PHVs
type SoftwarePhvStatus struct {
	Pipeline    SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,proto3,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
	Enabled     bool                `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Done        bool                `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
	CurrentCntr uint32              `protobuf:"varint,4,opt,name=current_cntr,json=currentCntr,proto3" json:"current_cntr,omitempty"`
	InjectCntr  uint32              `protobuf:"varint,5,opt,name=inject_cntr,json=injectCntr,proto3" json:"inject_cntr,omitempty"`
}

func (m *SoftwarePhvStatus) Reset()                    { *m = SoftwarePhvStatus{} }
func (m *SoftwarePhvStatus) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvStatus) ProtoMessage()               {}
func (*SoftwarePhvStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{12} }

func (m *SoftwarePhvStatus) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

func (m *SoftwarePhvStatus) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *SoftwarePhvStatus) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *SoftwarePhvStatus) GetCurrentCntr() uint32 {
	if m != nil {
		return m.CurrentCntr
	}
	return 0
}

func (m *SoftwarePhvStatus) GetInjectCntr() uint32 {
	if m != nil {
		return m.InjectCntr
	}
	return 0
}

// SoftwarePhvResponse is generic response
type SoftwarePhvResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
}

func (m *SoftwarePhvResponse) Reset()                    { *m = SoftwarePhvResponse{} }
func (m *SoftwarePhvResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponse) ProtoMessage()               {}
func (*SoftwarePhvResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{13} }

func (m *SoftwarePhvResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// SoftwarePhvResponseMsg is batched response to SoftwarePhvRequestMsg
type SoftwarePhvResponseMsg struct {
	Response []*SoftwarePhvResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvResponseMsg) Reset()                    { *m = SoftwarePhvResponseMsg{} }
func (m *SoftwarePhvResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvResponseMsg) ProtoMessage()               {}
func (*SoftwarePhvResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{14} }

func (m *SoftwarePhvResponseMsg) GetResponse() []*SoftwarePhvResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvGetRequest is used to get information about a PHV
type SoftwarePhvGetRequest struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,proto3,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvGetRequest) Reset()                    { *m = SoftwarePhvGetRequest{} }
func (m *SoftwarePhvGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequest) ProtoMessage()               {}
func (*SoftwarePhvGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{15} }

func (m *SoftwarePhvGetRequest) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvGetRequestMsg is batched GET request for PHV
type SoftwarePhvGetRequestMsg struct {
	Request []*SoftwarePhvGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvGetRequestMsg) Reset()         { *m = SoftwarePhvGetRequestMsg{} }
func (m *SoftwarePhvGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*SoftwarePhvGetRequestMsg) ProtoMessage()    {}
func (*SoftwarePhvGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{16}
}

func (m *SoftwarePhvGetRequestMsg) GetRequest() []*SoftwarePhvGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SoftwarePhvGetResponse captures all the information about a Sw PHV
// only if api_status indicates success, other fields are valid
type SoftwarePhvGetResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
	Status    *SoftwarePhvStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *SoftwarePhvGetResponse) Reset()                    { *m = SoftwarePhvGetResponse{} }
func (m *SoftwarePhvGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponse) ProtoMessage()               {}
func (*SoftwarePhvGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{17} }

func (m *SoftwarePhvGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SoftwarePhvGetResponse) GetStatus() *SoftwarePhvStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// SoftwarePhvGetResponseMsg is the batched response to SoftwarePhvGetRequestMsg
type SoftwarePhvGetResponseMsg struct {
	Response []*SoftwarePhvGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SoftwarePhvGetResponseMsg) Reset()         { *m = SoftwarePhvGetResponseMsg{} }
func (m *SoftwarePhvGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SoftwarePhvGetResponseMsg) ProtoMessage()    {}
func (*SoftwarePhvGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{18}
}

func (m *SoftwarePhvGetResponseMsg) GetResponse() []*SoftwarePhvGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SoftwarePhvInject is the packet inject spec
type SoftwarePhvInject struct {
	Pipeline SoftwarePhvPipeline `protobuf:"varint,1,opt,name=pipeline,proto3,enum=internal.SoftwarePhvPipeline" json:"pipeline,omitempty"`
}

func (m *SoftwarePhvInject) Reset()                    { *m = SoftwarePhvInject{} }
func (m *SoftwarePhvInject) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInject) ProtoMessage()               {}
func (*SoftwarePhvInject) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{19} }

func (m *SoftwarePhvInject) GetPipeline() SoftwarePhvPipeline {
	if m != nil {
		return m.Pipeline
	}
	return SoftwarePhvPipeline_SOFTWARE_PHV_RXDMA
}

// SoftwarePhvInjectMsg is the inject message
type SoftwarePhvInjectMsg struct {
	Request []*SoftwarePhvInject `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SoftwarePhvInjectMsg) Reset()                    { *m = SoftwarePhvInjectMsg{} }
func (m *SoftwarePhvInjectMsg) String() string            { return proto.CompactTextString(m) }
func (*SoftwarePhvInjectMsg) ProtoMessage()               {}
func (*SoftwarePhvInjectMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{20} }

func (m *SoftwarePhvInjectMsg) GetRequest() []*SoftwarePhvInject {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowRequestMsg struct {
	Request []*FWEvent `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LogFlowRequestMsg) Reset()                    { *m = LogFlowRequestMsg{} }
func (m *LogFlowRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowRequestMsg) ProtoMessage()               {}
func (*LogFlowRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{21} }

func (m *LogFlowRequestMsg) GetRequest() []*FWEvent {
	if m != nil {
		return m.Request
	}
	return nil
}

type LogFlowResponseMsg struct {
	Response []*LogFlowResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LogFlowResponseMsg) Reset()                    { *m = LogFlowResponseMsg{} }
func (m *LogFlowResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponseMsg) ProtoMessage()               {}
func (*LogFlowResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{22} }

func (m *LogFlowResponseMsg) GetResponse() []*LogFlowResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type LogFlowResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
}

func (m *LogFlowResponse) Reset()                    { *m = LogFlowResponse{} }
func (m *LogFlowResponse) String() string            { return proto.CompactTextString(m) }
func (*LogFlowResponse) ProtoMessage()               {}
func (*LogFlowResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{23} }

func (m *LogFlowResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// Codegen forms the Request and Response messages using the package name "internal"
// This is to calm the autogenerator
type EmptyRequest struct {
	Request []*Empty `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{24} }

func (m *EmptyRequest) GetRequest() []*Empty {
	if m != nil {
		return m.Request
	}
	return nil
}

type EmptyResponse struct {
	Response []*Empty `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *EmptyResponse) Reset()                    { *m = EmptyResponse{} }
func (m *EmptyResponse) String() string            { return proto.CompactTextString(m) }
func (*EmptyResponse) ProtoMessage()               {}
func (*EmptyResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{25} }

func (m *EmptyResponse) GetResponse() []*Empty {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpCbKeyHandle is used to operate on a tcp_cb either by its key or handle
type TcpCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TcpCbKeyHandle_TcpcbId
	//	*TcpCbKeyHandle_TcpcbHandle
	KeyOrHandle isTcpCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TcpCbKeyHandle) Reset()                    { *m = TcpCbKeyHandle{} }
func (m *TcpCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TcpCbKeyHandle) ProtoMessage()               {}
func (*TcpCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{26} }

type isTcpCbKeyHandle_KeyOrHandle interface {
	isTcpCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TcpCbKeyHandle_TcpcbId struct {
	TcpcbId uint32 `protobuf:"varint,1,opt,name=tcpcb_id,json=tcpcbId,proto3,oneof"`
}
type TcpCbKeyHandle_TcpcbHandle struct {
	TcpcbHandle uint64 `protobuf:"fixed64,2,opt,name=tcpcb_handle,json=tcpcbHandle,proto3,oneof"`
}

func (*TcpCbKeyHandle_TcpcbId) isTcpCbKeyHandle_KeyOrHandle()     {}
func (*TcpCbKeyHandle_TcpcbHandle) isTcpCbKeyHandle_KeyOrHandle() {}

func (m *TcpCbKeyHandle) GetKeyOrHandle() isTcpCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbKeyHandle) GetTcpcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbId); ok {
		return x.TcpcbId
	}
	return 0
}

func (m *TcpCbKeyHandle) GetTcpcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbHandle); ok {
		return x.TcpcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TcpCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TcpCbKeyHandle_OneofMarshaler, _TcpCbKeyHandle_OneofUnmarshaler, _TcpCbKeyHandle_OneofSizer, []interface{}{
		(*TcpCbKeyHandle_TcpcbId)(nil),
		(*TcpCbKeyHandle_TcpcbHandle)(nil),
	}
}

func _TcpCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.TcpcbHandle))
	case nil:
	default:
		return fmt.Errorf("TcpCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TcpCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TcpCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tcpcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tcpcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TcpCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TcpCbSpec captures all the tcp_cb level configuration
type TcpCbSpec struct {
	KeyOrHandle        *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RcvNxt             uint32          `protobuf:"varint,2,opt,name=rcv_nxt,json=rcvNxt,proto3" json:"rcv_nxt,omitempty"`
	SndNxt             uint32          `protobuf:"varint,3,opt,name=snd_nxt,json=sndNxt,proto3" json:"snd_nxt,omitempty"`
	SndUna             uint32          `protobuf:"varint,4,opt,name=snd_una,json=sndUna,proto3" json:"snd_una,omitempty"`
	RcvTsval           uint32          `protobuf:"varint,5,opt,name=rcv_tsval,json=rcvTsval,proto3" json:"rcv_tsval,omitempty"`
	TsRecent           uint32          `protobuf:"varint,6,opt,name=ts_recent,json=tsRecent,proto3" json:"ts_recent,omitempty"`
	SerqBase           uint64          `protobuf:"fixed64,7,opt,name=serq_base,json=serqBase,proto3" json:"serq_base,omitempty"`
	DebugDol           uint32          `protobuf:"varint,8,opt,name=debug_dol,json=debugDol,proto3" json:"debug_dol,omitempty"`
	SesqBase           uint64          `protobuf:"fixed64,9,opt,name=sesq_base,json=sesqBase,proto3" json:"sesq_base,omitempty"`
	SesqPi             uint32          `protobuf:"varint,10,opt,name=sesq_pi,json=sesqPi,proto3" json:"sesq_pi,omitempty"`
	SesqCi             uint32          `protobuf:"varint,11,opt,name=sesq_ci,json=sesqCi,proto3" json:"sesq_ci,omitempty"`
	SndWnd             uint32          `protobuf:"varint,12,opt,name=snd_wnd,json=sndWnd,proto3" json:"snd_wnd,omitempty"`
	SndCwnd            uint32          `protobuf:"varint,13,opt,name=snd_cwnd,json=sndCwnd,proto3" json:"snd_cwnd,omitempty"`
	RcvMss             uint32          `protobuf:"varint,14,opt,name=rcv_mss,json=rcvMss,proto3" json:"rcv_mss,omitempty"`
	SourcePort         uint32          `protobuf:"varint,15,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestPort           uint32          `protobuf:"varint,16,opt,name=dest_port,json=destPort,proto3" json:"dest_port,omitempty"`
	HeaderTemplate     []byte          `protobuf:"bytes,17,opt,name=header_template,json=headerTemplate,proto3" json:"header_template,omitempty"`
	State              uint32          `protobuf:"varint,18,opt,name=state,proto3" json:"state,omitempty"`
	SourceLif          uint32          `protobuf:"varint,19,opt,name=source_lif,json=sourceLif,proto3" json:"source_lif,omitempty"`
	AsesqBase          uint64          `protobuf:"fixed64,20,opt,name=asesq_base,json=asesqBase,proto3" json:"asesq_base,omitempty"`
	AsesqPi            uint32          `protobuf:"varint,21,opt,name=asesq_pi,json=asesqPi,proto3" json:"asesq_pi,omitempty"`
	AsesqCi            uint32          `protobuf:"varint,22,opt,name=asesq_ci,json=asesqCi,proto3" json:"asesq_ci,omitempty"`
	DebugDolTx         uint32          `protobuf:"varint,23,opt,name=debug_dol_tx,json=debugDolTx,proto3" json:"debug_dol_tx,omitempty"`
	HeaderLen          uint32          `protobuf:"varint,24,opt,name=header_len,json=headerLen,proto3" json:"header_len,omitempty"`
	PendingAckSend     bool            `protobuf:"varint,25,opt,name=pending_ack_send,json=pendingAckSend,proto3" json:"pending_ack_send,omitempty"`
	L7ProxyType        AppRedirType    `protobuf:"varint,26,opt,name=l7_proxy_type,json=l7ProxyType,proto3,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	SesqRetxCi         uint32          `protobuf:"varint,27,opt,name=sesq_retx_ci,json=sesqRetxCi,proto3" json:"sesq_retx_ci,omitempty"`
	RetxSndUna         uint64          `protobuf:"varint,28,opt,name=retx_snd_una,json=retxSndUna,proto3" json:"retx_snd_una,omitempty"`
	RxTs               uint64          `protobuf:"varint,29,opt,name=rx_ts,json=rxTs,proto3" json:"rx_ts,omitempty"`
	Rto                uint64          `protobuf:"varint,30,opt,name=rto,proto3" json:"rto,omitempty"`
	SndCwndCnt         uint32          `protobuf:"varint,31,opt,name=snd_cwnd_cnt,json=sndCwndCnt,proto3" json:"snd_cwnd_cnt,omitempty"`
	DebugDolTblsetaddr uint32          `protobuf:"varint,32,opt,name=debug_dol_tblsetaddr,json=debugDolTblsetaddr,proto3" json:"debug_dol_tblsetaddr,omitempty"`
	SerqPi             uint32          `protobuf:"varint,33,opt,name=serq_pi,json=serqPi,proto3" json:"serq_pi,omitempty"`
	PredFlags          uint32          `protobuf:"varint,34,opt,name=pred_flags,json=predFlags,proto3" json:"pred_flags,omitempty"`
	OtherQid           uint32          `protobuf:"varint,35,opt,name=other_qid,json=otherQid,proto3" json:"other_qid,omitempty"`
	PacketsOut         uint32          `protobuf:"varint,36,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	SndSsthresh        uint32          `protobuf:"varint,37,opt,name=snd_ssthresh,json=sndSsthresh,proto3" json:"snd_ssthresh,omitempty"`
	CcAlgo             uint32          `protobuf:"varint,38,opt,name=cc_algo,json=ccAlgo,proto3" json:"cc_algo,omitempty"`
	RtoBackoff         uint32          `protobuf:"varint,39,opt,name=rto_backoff,json=rtoBackoff,proto3" json:"rto_backoff,omitempty"`
	CpuId              uint32          `protobuf:"varint,40,opt,name=cpu_id,json=cpuId,proto3" json:"cpu_id,omitempty"`
	SerqCi             uint32          `protobuf:"varint,41,opt,name=serq_ci,json=serqCi,proto3" json:"serq_ci,omitempty"`
	RcvWnd             uint32          `protobuf:"varint,42,opt,name=rcv_wnd,json=rcvWnd,proto3" json:"rcv_wnd,omitempty"`
	SndWscale          uint32          `protobuf:"varint,43,opt,name=snd_wscale,json=sndWscale,proto3" json:"snd_wscale,omitempty"`
	RcvWscale          uint32          `protobuf:"varint,44,opt,name=rcv_wscale,json=rcvWscale,proto3" json:"rcv_wscale,omitempty"`
	SesqTxCi           uint32          `protobuf:"varint,45,opt,name=sesq_tx_ci,json=sesqTxCi,proto3" json:"sesq_tx_ci,omitempty"`
	DelayAck           bool            `protobuf:"varint,46,opt,name=delay_ack,json=delayAck,proto3" json:"delay_ack,omitempty"`
	Ato                uint32          `protobuf:"varint,47,opt,name=ato,proto3" json:"ato,omitempty"`
	SndRecover         uint32          `protobuf:"varint,48,opt,name=snd_recover,json=sndRecover,proto3" json:"snd_recover,omitempty"`
	Smss               uint32          `protobuf:"varint,49,opt,name=smss,proto3" json:"smss,omitempty"`
	InitialWindow      uint32          `protobuf:"varint,50,opt,name=initial_window,json=initialWindow,proto3" json:"initial_window,omitempty"`
	AbcLVar            uint32          `protobuf:"varint,51,opt,name=abc_l_var,json=abcLVar,proto3" json:"abc_l_var,omitempty"`
	OooQueue           bool            `protobuf:"varint,52,opt,name=ooo_queue,json=oooQueue,proto3" json:"ooo_queue,omitempty"`
	OooRx2TxQbase      uint64          `protobuf:"varint,53,opt,name=ooo_rx2tx_qbase,json=oooRx2txQbase,proto3" json:"ooo_rx2tx_qbase,omitempty"`
	RcvWup             uint32          `protobuf:"varint,54,opt,name=rcv_wup,json=rcvWup,proto3" json:"rcv_wup,omitempty"`
	CbBase             uint64          `protobuf:"fixed64,55,opt,name=cb_base,json=cbBase,proto3" json:"cb_base,omitempty"`
	ZeroWindowSent     uint32          `protobuf:"varint,56,opt,name=zero_window_sent,json=zeroWindowSent,proto3" json:"zero_window_sent,omitempty"`
	CbBaseQtype1       uint64          `protobuf:"fixed64,57,opt,name=cb_base_qtype1,json=cbBaseQtype1,proto3" json:"cb_base_qtype1,omitempty"`
	SrttUs             uint32          `protobuf:"varint,58,opt,name=srtt_us,json=srttUs,proto3" json:"srtt_us,omitempty"`
	SackPerm           bool            `protobuf:"varint,59,opt,name=sack_perm,json=sackPerm,proto3" json:"sack_perm,omitempty"`
	Timestamps         bool            `protobuf:"varint,60,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	TxWindowUpdatePi   uint32          `protobuf:"varint,61,opt,name=tx_window_update_pi,json=txWindowUpdatePi,proto3" json:"tx_window_update_pi,omitempty"`
	RttSeqTsoffset     uint32          `protobuf:"varint,62,opt,name=rtt_seq_tsoffset,json=rttSeqTsoffset,proto3" json:"rtt_seq_tsoffset,omitempty"`
	RttTime            uint32          `protobuf:"varint,63,opt,name=rtt_time,json=rttTime,proto3" json:"rtt_time,omitempty"`
	TsLearned          uint32          `protobuf:"varint,64,opt,name=ts_learned,json=tsLearned,proto3" json:"ts_learned,omitempty"`
	TsOffset           uint32          `protobuf:"varint,65,opt,name=ts_offset,json=tsOffset,proto3" json:"ts_offset,omitempty"`
	TsTime             uint32          `protobuf:"varint,66,opt,name=ts_time,json=tsTime,proto3" json:"ts_time,omitempty"`
	ProxyType          ProxyType       `protobuf:"varint,68,opt,name=proxy_type,json=proxyType,proto3,enum=types.ProxyType" json:"proxy_type,omitempty"`
}

func (m *TcpCbSpec) Reset()                    { *m = TcpCbSpec{} }
func (m *TcpCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpCbSpec) ProtoMessage()               {}
func (*TcpCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{27} }

func (m *TcpCbSpec) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbSpec) GetRcvNxt() uint32 {
	if m != nil {
		return m.RcvNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndNxt() uint32 {
	if m != nil {
		return m.SndNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndUna() uint32 {
	if m != nil {
		return m.SndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRcvTsval() uint32 {
	if m != nil {
		return m.RcvTsval
	}
	return 0
}

func (m *TcpCbSpec) GetTsRecent() uint32 {
	if m != nil {
		return m.TsRecent
	}
	return 0
}

func (m *TcpCbSpec) GetSerqBase() uint64 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TcpCbSpec) GetSesqBase() uint64 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetSndWnd() uint32 {
	if m != nil {
		return m.SndWnd
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwnd() uint32 {
	if m != nil {
		return m.SndCwnd
	}
	return 0
}

func (m *TcpCbSpec) GetRcvMss() uint32 {
	if m != nil {
		return m.RcvMss
	}
	return 0
}

func (m *TcpCbSpec) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *TcpCbSpec) GetDestPort() uint32 {
	if m != nil {
		return m.DestPort
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderTemplate() []byte {
	if m != nil {
		return m.HeaderTemplate
	}
	return nil
}

func (m *TcpCbSpec) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TcpCbSpec) GetSourceLif() uint32 {
	if m != nil {
		return m.SourceLif
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqBase() uint64 {
	if m != nil {
		return m.AsesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTx() uint32 {
	if m != nil {
		return m.DebugDolTx
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderLen() uint32 {
	if m != nil {
		return m.HeaderLen
	}
	return 0
}

func (m *TcpCbSpec) GetPendingAckSend() bool {
	if m != nil {
		return m.PendingAckSend
	}
	return false
}

func (m *TcpCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TcpCbSpec) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpCbSpec) GetRetxSndUna() uint64 {
	if m != nil {
		return m.RetxSndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRxTs() uint64 {
	if m != nil {
		return m.RxTs
	}
	return 0
}

func (m *TcpCbSpec) GetRto() uint64 {
	if m != nil {
		return m.Rto
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwndCnt() uint32 {
	if m != nil {
		return m.SndCwndCnt
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTblsetaddr() uint32 {
	if m != nil {
		return m.DebugDolTblsetaddr
	}
	return 0
}

func (m *TcpCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TcpCbSpec) GetPredFlags() uint32 {
	if m != nil {
		return m.PredFlags
	}
	return 0
}

func (m *TcpCbSpec) GetOtherQid() uint32 {
	if m != nil {
		return m.OtherQid
	}
	return 0
}

func (m *TcpCbSpec) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *TcpCbSpec) GetSndSsthresh() uint32 {
	if m != nil {
		return m.SndSsthresh
	}
	return 0
}

func (m *TcpCbSpec) GetCcAlgo() uint32 {
	if m != nil {
		return m.CcAlgo
	}
	return 0
}

func (m *TcpCbSpec) GetRtoBackoff() uint32 {
	if m != nil {
		return m.RtoBackoff
	}
	return 0
}

func (m *TcpCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

func (m *TcpCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

func (m *TcpCbSpec) GetRcvWnd() uint32 {
	if m != nil {
		return m.RcvWnd
	}
	return 0
}

func (m *TcpCbSpec) GetSndWscale() uint32 {
	if m != nil {
		return m.SndWscale
	}
	return 0
}

func (m *TcpCbSpec) GetRcvWscale() uint32 {
	if m != nil {
		return m.RcvWscale
	}
	return 0
}

func (m *TcpCbSpec) GetSesqTxCi() uint32 {
	if m != nil {
		return m.SesqTxCi
	}
	return 0
}

func (m *TcpCbSpec) GetDelayAck() bool {
	if m != nil {
		return m.DelayAck
	}
	return false
}

func (m *TcpCbSpec) GetAto() uint32 {
	if m != nil {
		return m.Ato
	}
	return 0
}

func (m *TcpCbSpec) GetSndRecover() uint32 {
	if m != nil {
		return m.SndRecover
	}
	return 0
}

func (m *TcpCbSpec) GetSmss() uint32 {
	if m != nil {
		return m.Smss
	}
	return 0
}

func (m *TcpCbSpec) GetInitialWindow() uint32 {
	if m != nil {
		return m.InitialWindow
	}
	return 0
}

func (m *TcpCbSpec) GetAbcLVar() uint32 {
	if m != nil {
		return m.AbcLVar
	}
	return 0
}

func (m *TcpCbSpec) GetOooQueue() bool {
	if m != nil {
		return m.OooQueue
	}
	return false
}

func (m *TcpCbSpec) GetOooRx2TxQbase() uint64 {
	if m != nil {
		return m.OooRx2TxQbase
	}
	return 0
}

func (m *TcpCbSpec) GetRcvWup() uint32 {
	if m != nil {
		return m.RcvWup
	}
	return 0
}

func (m *TcpCbSpec) GetCbBase() uint64 {
	if m != nil {
		return m.CbBase
	}
	return 0
}

func (m *TcpCbSpec) GetZeroWindowSent() uint32 {
	if m != nil {
		return m.ZeroWindowSent
	}
	return 0
}

func (m *TcpCbSpec) GetCbBaseQtype1() uint64 {
	if m != nil {
		return m.CbBaseQtype1
	}
	return 0
}

func (m *TcpCbSpec) GetSrttUs() uint32 {
	if m != nil {
		return m.SrttUs
	}
	return 0
}

func (m *TcpCbSpec) GetSackPerm() bool {
	if m != nil {
		return m.SackPerm
	}
	return false
}

func (m *TcpCbSpec) GetTimestamps() bool {
	if m != nil {
		return m.Timestamps
	}
	return false
}

func (m *TcpCbSpec) GetTxWindowUpdatePi() uint32 {
	if m != nil {
		return m.TxWindowUpdatePi
	}
	return 0
}

func (m *TcpCbSpec) GetRttSeqTsoffset() uint32 {
	if m != nil {
		return m.RttSeqTsoffset
	}
	return 0
}

func (m *TcpCbSpec) GetRttTime() uint32 {
	if m != nil {
		return m.RttTime
	}
	return 0
}

func (m *TcpCbSpec) GetTsLearned() uint32 {
	if m != nil {
		return m.TsLearned
	}
	return 0
}

func (m *TcpCbSpec) GetTsOffset() uint32 {
	if m != nil {
		return m.TsOffset
	}
	return 0
}

func (m *TcpCbSpec) GetTsTime() uint32 {
	if m != nil {
		return m.TsTime
	}
	return 0
}

func (m *TcpCbSpec) GetProxyType() ProxyType {
	if m != nil {
		return m.ProxyType
	}
	return ProxyType_PROXY_TYPE_NONE
}

// TcpCbRequestMsg is batched add or modify tcpcb request
type TcpCbRequestMsg struct {
	Request []*TcpCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbRequestMsg) Reset()                    { *m = TcpCbRequestMsg{} }
func (m *TcpCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbRequestMsg) ProtoMessage()               {}
func (*TcpCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{28} }

func (m *TcpCbRequestMsg) GetRequest() []*TcpCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type TcpCbOoqStatus struct {
	QueueAddr  uint64 `protobuf:"varint,1,opt,name=queue_addr,json=queueAddr,proto3" json:"queue_addr,omitempty"`
	StartSeq   uint32 `protobuf:"varint,2,opt,name=start_seq,json=startSeq,proto3" json:"start_seq,omitempty"`
	EndSeq     uint32 `protobuf:"varint,3,opt,name=end_seq,json=endSeq,proto3" json:"end_seq,omitempty"`
	NumEntries uint32 `protobuf:"varint,4,opt,name=num_entries,json=numEntries,proto3" json:"num_entries,omitempty"`
}

func (m *TcpCbOoqStatus) Reset()                    { *m = TcpCbOoqStatus{} }
func (m *TcpCbOoqStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpCbOoqStatus) ProtoMessage()               {}
func (*TcpCbOoqStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{29} }

func (m *TcpCbOoqStatus) GetQueueAddr() uint64 {
	if m != nil {
		return m.QueueAddr
	}
	return 0
}

func (m *TcpCbOoqStatus) GetStartSeq() uint32 {
	if m != nil {
		return m.StartSeq
	}
	return 0
}

func (m *TcpCbOoqStatus) GetEndSeq() uint32 {
	if m != nil {
		return m.EndSeq
	}
	return 0
}

func (m *TcpCbOoqStatus) GetNumEntries() uint32 {
	if m != nil {
		return m.NumEntries
	}
	return 0
}

// TcpCbStatus is the operational status of a given tcpcb
type TcpCbStatus struct {
	TcpcbHandle uint64            `protobuf:"fixed64,1,opt,name=tcpcb_handle,json=tcpcbHandle,proto3" json:"tcpcb_handle,omitempty"`
	OoqNotEmpty bool              `protobuf:"varint,2,opt,name=ooq_not_empty,json=ooqNotEmpty,proto3" json:"ooq_not_empty,omitempty"`
	OoqStatus   []*TcpCbOoqStatus `protobuf:"bytes,3,rep,name=ooq_status,json=ooqStatus" json:"ooq_status,omitempty"`
}

func (m *TcpCbStatus) Reset()                    { *m = TcpCbStatus{} }
func (m *TcpCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStatus) ProtoMessage()               {}
func (*TcpCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{30} }

func (m *TcpCbStatus) GetTcpcbHandle() uint64 {
	if m != nil {
		return m.TcpcbHandle
	}
	return 0
}

func (m *TcpCbStatus) GetOoqNotEmpty() bool {
	if m != nil {
		return m.OoqNotEmpty
	}
	return false
}

func (m *TcpCbStatus) GetOoqStatus() []*TcpCbOoqStatus {
	if m != nil {
		return m.OoqStatus
	}
	return nil
}

// TcpCbResponse is response to TcpCbSpec
type TcpCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	TcpcbStatus *TcpCbStatus `protobuf:"bytes,2,opt,name=tcpcb_status,json=tcpcbStatus" json:"tcpcb_status,omitempty"`
}

func (m *TcpCbResponse) Reset()                    { *m = TcpCbResponse{} }
func (m *TcpCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponse) ProtoMessage()               {}
func (*TcpCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{31} }

func (m *TcpCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbResponse) GetTcpcbStatus() *TcpCbStatus {
	if m != nil {
		return m.TcpcbStatus
	}
	return nil
}

// TcpCbResponseMsg is batched response to TcpCbRequestMsg
type TcpCbResponseMsg struct {
	Response []*TcpCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbResponseMsg) Reset()                    { *m = TcpCbResponseMsg{} }
func (m *TcpCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponseMsg) ProtoMessage()               {}
func (*TcpCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{32} }

func (m *TcpCbResponseMsg) GetResponse() []*TcpCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpCbDeleteRequest is used to delete a tcpcb
type TcpCbDeleteRequest struct {
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbDeleteRequest) Reset()                    { *m = TcpCbDeleteRequest{} }
func (m *TcpCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequest) ProtoMessage()               {}
func (*TcpCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{33} }

func (m *TcpCbDeleteRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbDeleteRequestMsg is used to delete a batch of tcpcbs
type TcpCbDeleteRequestMsg struct {
	Request []*TcpCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbDeleteRequestMsg) Reset()                    { *m = TcpCbDeleteRequestMsg{} }
func (m *TcpCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequestMsg) ProtoMessage()               {}
func (*TcpCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{34} }

func (m *TcpCbDeleteRequestMsg) GetRequest() []*TcpCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbDeleteResponseMsg is batched response to TcpCbDeleteRequestMsg
type TcpCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TcpCbDeleteResponseMsg) Reset()                    { *m = TcpCbDeleteResponseMsg{} }
func (m *TcpCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteResponseMsg) ProtoMessage()               {}
func (*TcpCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{35} }

func (m *TcpCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TcpCbGetRequest is used to get information about a tcpcb
type TcpCbGetRequest struct {
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbGetRequest) Reset()                    { *m = TcpCbGetRequest{} }
func (m *TcpCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequest) ProtoMessage()               {}
func (*TcpCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{36} }

func (m *TcpCbGetRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbGetRequestMsg is batched GET requests for tcpcbs
type TcpCbGetRequestMsg struct {
	Request []*TcpCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbGetRequestMsg) Reset()                    { *m = TcpCbGetRequestMsg{} }
func (m *TcpCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequestMsg) ProtoMessage()               {}
func (*TcpCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{37} }

func (m *TcpCbGetRequestMsg) GetRequest() []*TcpCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStats is the statistics object for each tcpcb
type TcpCbStats struct {
	// rx stats
	BytesRcvd    uint64 `protobuf:"varint,1,opt,name=bytes_rcvd,json=bytesRcvd,proto3" json:"bytes_rcvd,omitempty"`
	PktsRcvd     uint64 `protobuf:"varint,2,opt,name=pkts_rcvd,json=pktsRcvd,proto3" json:"pkts_rcvd,omitempty"`
	BytesAcked   uint64 `protobuf:"varint,3,opt,name=bytes_acked,json=bytesAcked,proto3" json:"bytes_acked,omitempty"`
	PureAcksRcvd uint64 `protobuf:"varint,4,opt,name=pure_acks_rcvd,json=pureAcksRcvd,proto3" json:"pure_acks_rcvd,omitempty"`
	DupAcksRcvd  uint64 `protobuf:"varint,5,opt,name=dup_acks_rcvd,json=dupAcksRcvd,proto3" json:"dup_acks_rcvd,omitempty"`
	SlowPathCnt  uint64 `protobuf:"varint,6,opt,name=slow_path_cnt,json=slowPathCnt,proto3" json:"slow_path_cnt,omitempty"`
	SerqFullCnt  uint64 `protobuf:"varint,7,opt,name=serq_full_cnt,json=serqFullCnt,proto3" json:"serq_full_cnt,omitempty"`
	OooCnt       uint64 `protobuf:"varint,8,opt,name=ooo_cnt,json=oooCnt,proto3" json:"ooo_cnt,omitempty"`
	RxDropCnt    uint64 `protobuf:"varint,9,opt,name=rx_drop_cnt,json=rxDropCnt,proto3" json:"rx_drop_cnt,omitempty"`
	// tx stats
	BytesSent        uint64 `protobuf:"varint,10001,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	PktsSent         uint64 `protobuf:"varint,10002,opt,name=pkts_sent,json=pktsSent,proto3" json:"pkts_sent,omitempty"`
	PureAcksSent     uint64 `protobuf:"varint,10003,opt,name=pure_acks_sent,json=pureAcksSent,proto3" json:"pure_acks_sent,omitempty"`
	SesqPi           uint32 `protobuf:"varint,10005,opt,name=sesq_pi,json=sesqPi,proto3" json:"sesq_pi,omitempty"`
	SesqCi           uint32 `protobuf:"varint,10006,opt,name=sesq_ci,json=sesqCi,proto3" json:"sesq_ci,omitempty"`
	SendAckPi        uint32 `protobuf:"varint,10007,opt,name=send_ack_pi,json=sendAckPi,proto3" json:"send_ack_pi,omitempty"`
	SendAckCi        uint32 `protobuf:"varint,10008,opt,name=send_ack_ci,json=sendAckCi,proto3" json:"send_ack_ci,omitempty"`
	FastTimerPi      uint32 `protobuf:"varint,10009,opt,name=fast_timer_pi,json=fastTimerPi,proto3" json:"fast_timer_pi,omitempty"`
	FastTimerCi      uint32 `protobuf:"varint,10010,opt,name=fast_timer_ci,json=fastTimerCi,proto3" json:"fast_timer_ci,omitempty"`
	DelAckPi         uint32 `protobuf:"varint,10011,opt,name=del_ack_pi,json=delAckPi,proto3" json:"del_ack_pi,omitempty"`
	DelAckCi         uint32 `protobuf:"varint,10012,opt,name=del_ack_ci,json=delAckCi,proto3" json:"del_ack_ci,omitempty"`
	AsesqPi          uint32 `protobuf:"varint,10013,opt,name=asesq_pi,json=asesqPi,proto3" json:"asesq_pi,omitempty"`
	AsesqCi          uint32 `protobuf:"varint,10014,opt,name=asesq_ci,json=asesqCi,proto3" json:"asesq_ci,omitempty"`
	PendingTxPi      uint32 `protobuf:"varint,10015,opt,name=pending_tx_pi,json=pendingTxPi,proto3" json:"pending_tx_pi,omitempty"`
	PendingTxCi      uint32 `protobuf:"varint,10016,opt,name=pending_tx_ci,json=pendingTxCi,proto3" json:"pending_tx_ci,omitempty"`
	FastRetransPi    uint32 `protobuf:"varint,10017,opt,name=fast_retrans_pi,json=fastRetransPi,proto3" json:"fast_retrans_pi,omitempty"`
	FastRetransCi    uint32 `protobuf:"varint,10018,opt,name=fast_retrans_ci,json=fastRetransCi,proto3" json:"fast_retrans_ci,omitempty"`
	CleanRetxPi      uint32 `protobuf:"varint,10019,opt,name=clean_retx_pi,json=cleanRetxPi,proto3" json:"clean_retx_pi,omitempty"`
	CleanRetxCi      uint32 `protobuf:"varint,10020,opt,name=clean_retx_ci,json=cleanRetxCi,proto3" json:"clean_retx_ci,omitempty"`
	PacketsOut       uint32 `protobuf:"varint,10021,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	SesqTxCi         uint32 `protobuf:"varint,10022,opt,name=sesq_tx_ci,json=sesqTxCi,proto3" json:"sesq_tx_ci,omitempty"`
	SesqRetxCi       uint32 `protobuf:"varint,10023,opt,name=sesq_retx_ci,json=sesqRetxCi,proto3" json:"sesq_retx_ci,omitempty"`
	AsesqRetxCi      uint32 `protobuf:"varint,10024,opt,name=asesq_retx_ci,json=asesqRetxCi,proto3" json:"asesq_retx_ci,omitempty"`
	TxRingPi         uint32 `protobuf:"varint,10025,opt,name=tx_ring_pi,json=txRingPi,proto3" json:"tx_ring_pi,omitempty"`
	PartialPktAckCnt uint32 `protobuf:"varint,10026,opt,name=partial_pkt_ack_cnt,json=partialPktAckCnt,proto3" json:"partial_pkt_ack_cnt,omitempty"`
	AtoDeadline      uint32 `protobuf:"varint,10027,opt,name=ato_deadline,json=atoDeadline,proto3" json:"ato_deadline,omitempty"`
	RtoDeadline      uint32 `protobuf:"varint,10028,opt,name=rto_deadline,json=rtoDeadline,proto3" json:"rto_deadline,omitempty"`
	CcFlags          uint32 `protobuf:"varint,10029,opt,name=cc_flags,json=ccFlags,proto3" json:"cc_flags,omitempty"`
	IdleDeadline     uint32 `protobuf:"varint,10030,opt,name=idle_deadline,json=idleDeadline,proto3" json:"idle_deadline,omitempty"`
	WindowFullCnt    uint32 `protobuf:"varint,10031,opt,name=window_full_cnt,json=windowFullCnt,proto3" json:"window_full_cnt,omitempty"`
	OoqRx2TxPi       uint32 `protobuf:"varint,10032,opt,name=ooq_rx2tx_pi,json=ooqRx2txPi,proto3" json:"ooq_rx2tx_pi,omitempty"`
	OoqRx2TxCi       uint32 `protobuf:"varint,10033,opt,name=ooq_rx2tx_ci,json=ooqRx2txCi,proto3" json:"ooq_rx2tx_ci,omitempty"`
	RetxCnt          uint32 `protobuf:"varint,10034,opt,name=retx_cnt,json=retxCnt,proto3" json:"retx_cnt,omitempty"`
	WindowUpdatePi   uint32 `protobuf:"varint,10035,opt,name=window_update_pi,json=windowUpdatePi,proto3" json:"window_update_pi,omitempty"`
	WindowUpdateCi   uint32 `protobuf:"varint,10036,opt,name=window_update_ci,json=windowUpdateCi,proto3" json:"window_update_ci,omitempty"`
}

func (m *TcpCbStats) Reset()                    { *m = TcpCbStats{} }
func (m *TcpCbStats) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStats) ProtoMessage()               {}
func (*TcpCbStats) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{38} }

func (m *TcpCbStats) GetBytesRcvd() uint64 {
	if m != nil {
		return m.BytesRcvd
	}
	return 0
}

func (m *TcpCbStats) GetPktsRcvd() uint64 {
	if m != nil {
		return m.PktsRcvd
	}
	return 0
}

func (m *TcpCbStats) GetBytesAcked() uint64 {
	if m != nil {
		return m.BytesAcked
	}
	return 0
}

func (m *TcpCbStats) GetPureAcksRcvd() uint64 {
	if m != nil {
		return m.PureAcksRcvd
	}
	return 0
}

func (m *TcpCbStats) GetDupAcksRcvd() uint64 {
	if m != nil {
		return m.DupAcksRcvd
	}
	return 0
}

func (m *TcpCbStats) GetSlowPathCnt() uint64 {
	if m != nil {
		return m.SlowPathCnt
	}
	return 0
}

func (m *TcpCbStats) GetSerqFullCnt() uint64 {
	if m != nil {
		return m.SerqFullCnt
	}
	return 0
}

func (m *TcpCbStats) GetOooCnt() uint64 {
	if m != nil {
		return m.OooCnt
	}
	return 0
}

func (m *TcpCbStats) GetRxDropCnt() uint64 {
	if m != nil {
		return m.RxDropCnt
	}
	return 0
}

func (m *TcpCbStats) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *TcpCbStats) GetPktsSent() uint64 {
	if m != nil {
		return m.PktsSent
	}
	return 0
}

func (m *TcpCbStats) GetPureAcksSent() uint64 {
	if m != nil {
		return m.PureAcksSent
	}
	return 0
}

func (m *TcpCbStats) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpCbStats) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpCbStats) GetSendAckPi() uint32 {
	if m != nil {
		return m.SendAckPi
	}
	return 0
}

func (m *TcpCbStats) GetSendAckCi() uint32 {
	if m != nil {
		return m.SendAckCi
	}
	return 0
}

func (m *TcpCbStats) GetFastTimerPi() uint32 {
	if m != nil {
		return m.FastTimerPi
	}
	return 0
}

func (m *TcpCbStats) GetFastTimerCi() uint32 {
	if m != nil {
		return m.FastTimerCi
	}
	return 0
}

func (m *TcpCbStats) GetDelAckPi() uint32 {
	if m != nil {
		return m.DelAckPi
	}
	return 0
}

func (m *TcpCbStats) GetDelAckCi() uint32 {
	if m != nil {
		return m.DelAckCi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpCbStats) GetPendingTxPi() uint32 {
	if m != nil {
		return m.PendingTxPi
	}
	return 0
}

func (m *TcpCbStats) GetPendingTxCi() uint32 {
	if m != nil {
		return m.PendingTxCi
	}
	return 0
}

func (m *TcpCbStats) GetFastRetransPi() uint32 {
	if m != nil {
		return m.FastRetransPi
	}
	return 0
}

func (m *TcpCbStats) GetFastRetransCi() uint32 {
	if m != nil {
		return m.FastRetransCi
	}
	return 0
}

func (m *TcpCbStats) GetCleanRetxPi() uint32 {
	if m != nil {
		return m.CleanRetxPi
	}
	return 0
}

func (m *TcpCbStats) GetCleanRetxCi() uint32 {
	if m != nil {
		return m.CleanRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetPacketsOut() uint32 {
	if m != nil {
		return m.PacketsOut
	}
	return 0
}

func (m *TcpCbStats) GetSesqTxCi() uint32 {
	if m != nil {
		return m.SesqTxCi
	}
	return 0
}

func (m *TcpCbStats) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetAsesqRetxCi() uint32 {
	if m != nil {
		return m.AsesqRetxCi
	}
	return 0
}

func (m *TcpCbStats) GetTxRingPi() uint32 {
	if m != nil {
		return m.TxRingPi
	}
	return 0
}

func (m *TcpCbStats) GetPartialPktAckCnt() uint32 {
	if m != nil {
		return m.PartialPktAckCnt
	}
	return 0
}

func (m *TcpCbStats) GetAtoDeadline() uint32 {
	if m != nil {
		return m.AtoDeadline
	}
	return 0
}

func (m *TcpCbStats) GetRtoDeadline() uint32 {
	if m != nil {
		return m.RtoDeadline
	}
	return 0
}

func (m *TcpCbStats) GetCcFlags() uint32 {
	if m != nil {
		return m.CcFlags
	}
	return 0
}

func (m *TcpCbStats) GetIdleDeadline() uint32 {
	if m != nil {
		return m.IdleDeadline
	}
	return 0
}

func (m *TcpCbStats) GetWindowFullCnt() uint32 {
	if m != nil {
		return m.WindowFullCnt
	}
	return 0
}

func (m *TcpCbStats) GetOoqRx2TxPi() uint32 {
	if m != nil {
		return m.OoqRx2TxPi
	}
	return 0
}

func (m *TcpCbStats) GetOoqRx2TxCi() uint32 {
	if m != nil {
		return m.OoqRx2TxCi
	}
	return 0
}

func (m *TcpCbStats) GetRetxCnt() uint32 {
	if m != nil {
		return m.RetxCnt
	}
	return 0
}

func (m *TcpCbStats) GetWindowUpdatePi() uint32 {
	if m != nil {
		return m.WindowUpdatePi
	}
	return 0
}

func (m *TcpCbStats) GetWindowUpdateCi() uint32 {
	if m != nil {
		return m.WindowUpdateCi
	}
	return 0
}

// TcpCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
type TcpCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TcpCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TcpCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TcpCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TcpCbGetResponse) Reset()                    { *m = TcpCbGetResponse{} }
func (m *TcpCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponse) ProtoMessage()               {}
func (*TcpCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{39} }

func (m *TcpCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbGetResponse) GetSpec() *TcpCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TcpCbGetResponse) GetStatus() *TcpCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TcpCbGetResponse) GetStats() *TcpCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TcpCbGetResponseMsg is batched response to TcpCbGetRequestMsg
type TcpCbGetResponseMsg struct {
	Response []*TcpCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbGetResponseMsg) Reset()                    { *m = TcpCbGetResponseMsg{} }
func (m *TcpCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponseMsg) ProtoMessage()               {}
func (*TcpCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{40} }

func (m *TcpCbGetResponseMsg) GetResponse() []*TcpCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TlsCbKeyHandle is used to operate on a tlscb either by its key or handle
type TlsCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TlsCbKeyHandle_TlscbId
	//	*TlsCbKeyHandle_TlscbHandle
	KeyOrHandle isTlsCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TlsCbKeyHandle) Reset()                    { *m = TlsCbKeyHandle{} }
func (m *TlsCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TlsCbKeyHandle) ProtoMessage()               {}
func (*TlsCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{41} }

type isTlsCbKeyHandle_KeyOrHandle interface {
	isTlsCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TlsCbKeyHandle_TlscbId struct {
	TlscbId uint32 `protobuf:"varint,1,opt,name=tlscb_id,json=tlscbId,proto3,oneof"`
}
type TlsCbKeyHandle_TlscbHandle struct {
	TlscbHandle uint64 `protobuf:"fixed64,2,opt,name=tlscb_handle,json=tlscbHandle,proto3,oneof"`
}

func (*TlsCbKeyHandle_TlscbId) isTlsCbKeyHandle_KeyOrHandle()     {}
func (*TlsCbKeyHandle_TlscbHandle) isTlsCbKeyHandle_KeyOrHandle() {}

func (m *TlsCbKeyHandle) GetKeyOrHandle() isTlsCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsCbKeyHandle) GetTlscbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TlsCbKeyHandle_TlscbId); ok {
		return x.TlscbId
	}
	return 0
}

func (m *TlsCbKeyHandle) GetTlscbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TlsCbKeyHandle_TlscbHandle); ok {
		return x.TlscbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TlsCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TlsCbKeyHandle_OneofMarshaler, _TlsCbKeyHandle_OneofUnmarshaler, _TlsCbKeyHandle_OneofSizer, []interface{}{
		(*TlsCbKeyHandle_TlscbId)(nil),
		(*TlsCbKeyHandle_TlscbHandle)(nil),
	}
}

func _TlsCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TlsCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsCbKeyHandle_TlscbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TlscbId))
	case *TlsCbKeyHandle_TlscbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.TlscbHandle))
	case nil:
	default:
		return fmt.Errorf("TlsCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TlsCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TlsCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tlscb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TlsCbKeyHandle_TlscbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tlscb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TlsCbKeyHandle_TlscbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TlsCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TlsCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsCbKeyHandle_TlscbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TlscbId))
	case *TlsCbKeyHandle_TlscbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TlsCbSpec captures all the tlscb level configuration
type TlsCbSpec struct {
	KeyOrHandle             *TlsCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	NicDecHead              uint32          `protobuf:"varint,2,opt,name=nic_dec_head,json=nicDecHead,proto3" json:"nic_dec_head,omitempty"`
	NicDecTail              uint32          `protobuf:"varint,3,opt,name=nic_dec_tail,json=nicDecTail,proto3" json:"nic_dec_tail,omitempty"`
	Command                 uint32          `protobuf:"varint,4,opt,name=command,proto3" json:"command,omitempty"`
	DebugDol                uint32          `protobuf:"varint,5,opt,name=debug_dol,json=debugDol,proto3" json:"debug_dol,omitempty"`
	SerqPi                  uint32          `protobuf:"varint,6,opt,name=serq_pi,json=serqPi,proto3" json:"serq_pi,omitempty"`
	SerqCi                  uint32          `protobuf:"varint,7,opt,name=serq_ci,json=serqCi,proto3" json:"serq_ci,omitempty"`
	BsqPi                   uint32          `protobuf:"varint,8,opt,name=bsq_pi,json=bsqPi,proto3" json:"bsq_pi,omitempty"`
	BsqCi                   uint32          `protobuf:"varint,9,opt,name=bsq_ci,json=bsqCi,proto3" json:"bsq_ci,omitempty"`
	CryptoKeyIdx            uint32          `protobuf:"varint,10,opt,name=crypto_key_idx,json=cryptoKeyIdx,proto3" json:"crypto_key_idx,omitempty"`
	SerqBase                uint32          `protobuf:"varint,11,opt,name=serq_base,json=serqBase,proto3" json:"serq_base,omitempty"`
	SesqBase                uint32          `protobuf:"varint,12,opt,name=sesq_base,json=sesqBase,proto3" json:"sesq_base,omitempty"`
	TnmdprAlloc             uint64          `protobuf:"fixed64,13,opt,name=tnmdpr_alloc,json=tnmdprAlloc,proto3" json:"tnmdpr_alloc,omitempty"`
	RnmdprFree              uint64          `protobuf:"fixed64,14,opt,name=rnmdpr_free,json=rnmdprFree,proto3" json:"rnmdpr_free,omitempty"`
	EncRequests             uint64          `protobuf:"fixed64,15,opt,name=enc_requests,json=encRequests,proto3" json:"enc_requests,omitempty"`
	EncCompletions          uint64          `protobuf:"fixed64,16,opt,name=enc_completions,json=encCompletions,proto3" json:"enc_completions,omitempty"`
	EncFailures             uint64          `protobuf:"fixed64,17,opt,name=enc_failures,json=encFailures,proto3" json:"enc_failures,omitempty"`
	DecRequests             uint64          `protobuf:"fixed64,18,opt,name=dec_requests,json=decRequests,proto3" json:"dec_requests,omitempty"`
	DecCompletions          uint64          `protobuf:"fixed64,19,opt,name=dec_completions,json=decCompletions,proto3" json:"dec_completions,omitempty"`
	DecFailures             uint64          `protobuf:"fixed64,20,opt,name=dec_failures,json=decFailures,proto3" json:"dec_failures,omitempty"`
	Salt                    uint32          `protobuf:"varint,21,opt,name=salt,proto3" json:"salt,omitempty"`
	ExplicitIv              uint64          `protobuf:"varint,22,opt,name=explicit_iv,json=explicitIv,proto3" json:"explicit_iv,omitempty"`
	PreDebugStage0_7Thread  uint32          `protobuf:"varint,23,opt,name=pre_debug_stage0_7_thread,json=preDebugStage07Thread,proto3" json:"pre_debug_stage0_7_thread,omitempty"`
	PostDebugStage0_7Thread uint32          `protobuf:"varint,24,opt,name=post_debug_stage0_7_thread,json=postDebugStage07Thread,proto3" json:"post_debug_stage0_7_thread,omitempty"`
	IsDecryptFlow           bool            `protobuf:"varint,25,opt,name=is_decrypt_flow,json=isDecryptFlow,proto3" json:"is_decrypt_flow,omitempty"`
	OtherFid                uint32          `protobuf:"varint,26,opt,name=other_fid,json=otherFid,proto3" json:"other_fid,omitempty"`
	L7ProxyType             AppRedirType    `protobuf:"varint,27,opt,name=l7_proxy_type,json=l7ProxyType,proto3,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	CryptoHmacKeyIdx        uint32          `protobuf:"varint,28,opt,name=crypto_hmac_key_idx,json=cryptoHmacKeyIdx,proto3" json:"crypto_hmac_key_idx,omitempty"`
	MacRequests             uint64          `protobuf:"fixed64,29,opt,name=mac_requests,json=macRequests,proto3" json:"mac_requests,omitempty"`
	MacCompletions          uint64          `protobuf:"fixed64,30,opt,name=mac_completions,json=macCompletions,proto3" json:"mac_completions,omitempty"`
	MacFailures             uint64          `protobuf:"fixed64,31,opt,name=mac_failures,json=macFailures,proto3" json:"mac_failures,omitempty"`
	CpuId                   uint32          `protobuf:"varint,32,opt,name=cpu_id,json=cpuId,proto3" json:"cpu_id,omitempty"`
}

func (m *TlsCbSpec) Reset()                    { *m = TlsCbSpec{} }
func (m *TlsCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TlsCbSpec) ProtoMessage()               {}
func (*TlsCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{42} }

func (m *TlsCbSpec) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsCbSpec) GetNicDecHead() uint32 {
	if m != nil {
		return m.NicDecHead
	}
	return 0
}

func (m *TlsCbSpec) GetNicDecTail() uint32 {
	if m != nil {
		return m.NicDecTail
	}
	return 0
}

func (m *TlsCbSpec) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *TlsCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TlsCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TlsCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

func (m *TlsCbSpec) GetBsqPi() uint32 {
	if m != nil {
		return m.BsqPi
	}
	return 0
}

func (m *TlsCbSpec) GetBsqCi() uint32 {
	if m != nil {
		return m.BsqCi
	}
	return 0
}

func (m *TlsCbSpec) GetCryptoKeyIdx() uint32 {
	if m != nil {
		return m.CryptoKeyIdx
	}
	return 0
}

func (m *TlsCbSpec) GetSerqBase() uint32 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TlsCbSpec) GetSesqBase() uint32 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TlsCbSpec) GetTnmdprAlloc() uint64 {
	if m != nil {
		return m.TnmdprAlloc
	}
	return 0
}

func (m *TlsCbSpec) GetRnmdprFree() uint64 {
	if m != nil {
		return m.RnmdprFree
	}
	return 0
}

func (m *TlsCbSpec) GetEncRequests() uint64 {
	if m != nil {
		return m.EncRequests
	}
	return 0
}

func (m *TlsCbSpec) GetEncCompletions() uint64 {
	if m != nil {
		return m.EncCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetEncFailures() uint64 {
	if m != nil {
		return m.EncFailures
	}
	return 0
}

func (m *TlsCbSpec) GetDecRequests() uint64 {
	if m != nil {
		return m.DecRequests
	}
	return 0
}

func (m *TlsCbSpec) GetDecCompletions() uint64 {
	if m != nil {
		return m.DecCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetDecFailures() uint64 {
	if m != nil {
		return m.DecFailures
	}
	return 0
}

func (m *TlsCbSpec) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *TlsCbSpec) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *TlsCbSpec) GetPreDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PreDebugStage0_7Thread
	}
	return 0
}

func (m *TlsCbSpec) GetPostDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PostDebugStage0_7Thread
	}
	return 0
}

func (m *TlsCbSpec) GetIsDecryptFlow() bool {
	if m != nil {
		return m.IsDecryptFlow
	}
	return false
}

func (m *TlsCbSpec) GetOtherFid() uint32 {
	if m != nil {
		return m.OtherFid
	}
	return 0
}

func (m *TlsCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TlsCbSpec) GetCryptoHmacKeyIdx() uint32 {
	if m != nil {
		return m.CryptoHmacKeyIdx
	}
	return 0
}

func (m *TlsCbSpec) GetMacRequests() uint64 {
	if m != nil {
		return m.MacRequests
	}
	return 0
}

func (m *TlsCbSpec) GetMacCompletions() uint64 {
	if m != nil {
		return m.MacCompletions
	}
	return 0
}

func (m *TlsCbSpec) GetMacFailures() uint64 {
	if m != nil {
		return m.MacFailures
	}
	return 0
}

func (m *TlsCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

// TlsCbRequestMsg is batched add or modify tlscb request
type TlsCbRequestMsg struct {
	Request []*TlsCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbRequestMsg) Reset()                    { *m = TlsCbRequestMsg{} }
func (m *TlsCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbRequestMsg) ProtoMessage()               {}
func (*TlsCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{43} }

func (m *TlsCbRequestMsg) GetRequest() []*TlsCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbStatus is the operational status of a given tlscb
type TlsCbStatus struct {
	TlscbHandle uint64 `protobuf:"fixed64,1,opt,name=tlscb_handle,json=tlscbHandle,proto3" json:"tlscb_handle,omitempty"`
}

func (m *TlsCbStatus) Reset()                    { *m = TlsCbStatus{} }
func (m *TlsCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TlsCbStatus) ProtoMessage()               {}
func (*TlsCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{44} }

func (m *TlsCbStatus) GetTlscbHandle() uint64 {
	if m != nil {
		return m.TlscbHandle
	}
	return 0
}

// TlsCbResponse is response to TlsCbSpec
type TlsCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	TlscbStatus *TlsCbStatus `protobuf:"bytes,2,opt,name=tlscb_status,json=tlscbStatus" json:"tlscb_status,omitempty"`
}

func (m *TlsCbResponse) Reset()                    { *m = TlsCbResponse{} }
func (m *TlsCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TlsCbResponse) ProtoMessage()               {}
func (*TlsCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{45} }

func (m *TlsCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsCbResponse) GetTlscbStatus() *TlsCbStatus {
	if m != nil {
		return m.TlscbStatus
	}
	return nil
}

// TlsCbResponseMsg is batched response to TlsCbRequestMsg
type TlsCbResponseMsg struct {
	Response []*TlsCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsCbResponseMsg) Reset()                    { *m = TlsCbResponseMsg{} }
func (m *TlsCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbResponseMsg) ProtoMessage()               {}
func (*TlsCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{46} }

func (m *TlsCbResponseMsg) GetResponse() []*TlsCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TlsCbDeleteRequest is used to delete a tlscb
type TlsCbDeleteRequest struct {
	KeyOrHandle *TlsCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsCbDeleteRequest) Reset()                    { *m = TlsCbDeleteRequest{} }
func (m *TlsCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteRequest) ProtoMessage()               {}
func (*TlsCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{47} }

func (m *TlsCbDeleteRequest) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsCbDeleteRequestMsg is used to delete a batch of tlscbs
type TlsCbDeleteRequestMsg struct {
	Request []*TlsCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbDeleteRequestMsg) Reset()                    { *m = TlsCbDeleteRequestMsg{} }
func (m *TlsCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteRequestMsg) ProtoMessage()               {}
func (*TlsCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{48} }

func (m *TlsCbDeleteRequestMsg) GetRequest() []*TlsCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbDeleteResponseMsg is batched response to TlsCbDeleteRequestMsg
type TlsCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TlsCbDeleteResponseMsg) Reset()                    { *m = TlsCbDeleteResponseMsg{} }
func (m *TlsCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbDeleteResponseMsg) ProtoMessage()               {}
func (*TlsCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{49} }

func (m *TlsCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TlsCbGetRequest is used to get information about a tlscb
type TlsCbGetRequest struct {
	KeyOrHandle *TlsCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsCbGetRequest) Reset()                    { *m = TlsCbGetRequest{} }
func (m *TlsCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetRequest) ProtoMessage()               {}
func (*TlsCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{50} }

func (m *TlsCbGetRequest) GetKeyOrHandle() *TlsCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsCbGetRequestMsg is batched GET requests for tlscbs
type TlsCbGetRequestMsg struct {
	Request []*TlsCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsCbGetRequestMsg) Reset()                    { *m = TlsCbGetRequestMsg{} }
func (m *TlsCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetRequestMsg) ProtoMessage()               {}
func (*TlsCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{51} }

func (m *TlsCbGetRequestMsg) GetRequest() []*TlsCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsCbStats is the statistics object for each tlscb
type TlsCbStats struct {
}

func (m *TlsCbStats) Reset()                    { *m = TlsCbStats{} }
func (m *TlsCbStats) String() string            { return proto.CompactTextString(m) }
func (*TlsCbStats) ProtoMessage()               {}
func (*TlsCbStats) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{52} }

// TlsCbGetResponse captures all the information about a tlscb
// only if api_status indicates success, other fields are valid
type TlsCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TlsCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TlsCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TlsCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TlsCbGetResponse) Reset()                    { *m = TlsCbGetResponse{} }
func (m *TlsCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetResponse) ProtoMessage()               {}
func (*TlsCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{53} }

func (m *TlsCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsCbGetResponse) GetSpec() *TlsCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TlsCbGetResponse) GetStatus() *TlsCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TlsCbGetResponse) GetStats() *TlsCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TlsCbGetResponseMsg is batched response to TlsCbGetRequestMsg
type TlsCbGetResponseMsg struct {
	Response []*TlsCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsCbGetResponseMsg) Reset()                    { *m = TlsCbGetResponseMsg{} }
func (m *TlsCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsCbGetResponseMsg) ProtoMessage()               {}
func (*TlsCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{54} }

func (m *TlsCbGetResponseMsg) GetResponse() []*TlsCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingKeyHandle is used to operate either by its key or handle
type WRingKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*WRingKeyHandle_WringId
	//	*WRingKeyHandle_WringHandle
	KeyOrHandle isWRingKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *WRingKeyHandle) Reset()                    { *m = WRingKeyHandle{} }
func (m *WRingKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*WRingKeyHandle) ProtoMessage()               {}
func (*WRingKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{55} }

type isWRingKeyHandle_KeyOrHandle interface {
	isWRingKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WRingKeyHandle_WringId struct {
	WringId uint32 `protobuf:"varint,1,opt,name=wring_id,json=wringId,proto3,oneof"`
}
type WRingKeyHandle_WringHandle struct {
	WringHandle uint64 `protobuf:"fixed64,2,opt,name=wring_handle,json=wringHandle,proto3,oneof"`
}

func (*WRingKeyHandle_WringId) isWRingKeyHandle_KeyOrHandle()     {}
func (*WRingKeyHandle_WringHandle) isWRingKeyHandle_KeyOrHandle() {}

func (m *WRingKeyHandle) GetKeyOrHandle() isWRingKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingKeyHandle) GetWringId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*WRingKeyHandle_WringId); ok {
		return x.WringId
	}
	return 0
}

func (m *WRingKeyHandle) GetWringHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*WRingKeyHandle_WringHandle); ok {
		return x.WringHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WRingKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WRingKeyHandle_OneofMarshaler, _WRingKeyHandle_OneofUnmarshaler, _WRingKeyHandle_OneofSizer, []interface{}{
		(*WRingKeyHandle_WringId)(nil),
		(*WRingKeyHandle_WringHandle)(nil),
	}
}

func _WRingKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WRingKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *WRingKeyHandle_WringId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.WringId))
	case *WRingKeyHandle_WringHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.WringHandle))
	case nil:
	default:
		return fmt.Errorf("WRingKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _WRingKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WRingKeyHandle)
	switch tag {
	case 1: // key_or_handle.wring_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &WRingKeyHandle_WringId{uint32(x)}
		return true, err
	case 2: // key_or_handle.wring_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &WRingKeyHandle_WringHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _WRingKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WRingKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *WRingKeyHandle_WringId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.WringId))
	case *WRingKeyHandle_WringHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WRingSpec captures all the WRing level configuration
type WRingSpec struct {
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        WRingType       `protobuf:"varint,2,opt,name=type,proto3,enum=types.WRingType" json:"type,omitempty"`
	Pi          uint32          `protobuf:"varint,3,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci          uint32          `protobuf:"varint,4,opt,name=ci,proto3" json:"ci,omitempty"`
}

func (m *WRingSpec) Reset()                    { *m = WRingSpec{} }
func (m *WRingSpec) String() string            { return proto.CompactTextString(m) }
func (*WRingSpec) ProtoMessage()               {}
func (*WRingSpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{56} }

func (m *WRingSpec) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingSpec) GetType() WRingType {
	if m != nil {
		return m.Type
	}
	return WRingType_WRING_TYPE_NONE
}

func (m *WRingSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *WRingSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

// WRingRequestMsg is batched add or modify wring request
type WRingRequestMsg struct {
	Request []*WRingSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingRequestMsg) Reset()                    { *m = WRingRequestMsg{} }
func (m *WRingRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingRequestMsg) ProtoMessage()               {}
func (*WRingRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{57} }

func (m *WRingRequestMsg) GetRequest() []*WRingSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingStatus is the operational status of a given wring
type WRingStatus struct {
	WringHandle uint64 `protobuf:"fixed64,1,opt,name=wring_handle,json=wringHandle,proto3" json:"wring_handle,omitempty"`
}

func (m *WRingStatus) Reset()                    { *m = WRingStatus{} }
func (m *WRingStatus) String() string            { return proto.CompactTextString(m) }
func (*WRingStatus) ProtoMessage()               {}
func (*WRingStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{58} }

func (m *WRingStatus) GetWringHandle() uint64 {
	if m != nil {
		return m.WringHandle
	}
	return 0
}

// WRingResponse is response to WRingSpec
type WRingResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	WringStatus *WRingStatus `protobuf:"bytes,2,opt,name=wring_status,json=wringStatus" json:"wring_status,omitempty"`
}

func (m *WRingResponse) Reset()                    { *m = WRingResponse{} }
func (m *WRingResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingResponse) ProtoMessage()               {}
func (*WRingResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{59} }

func (m *WRingResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingResponse) GetWringStatus() *WRingStatus {
	if m != nil {
		return m.WringStatus
	}
	return nil
}

// WRingResponseMsg is batched response to WRingRequestMsg
type WRingResponseMsg struct {
	Response []*WRingResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingResponseMsg) Reset()                    { *m = WRingResponseMsg{} }
func (m *WRingResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingResponseMsg) ProtoMessage()               {}
func (*WRingResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{60} }

func (m *WRingResponseMsg) GetResponse() []*WRingResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingDeleteRequest is used to delete a wring
type WRingDeleteRequest struct {
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *WRingDeleteRequest) Reset()                    { *m = WRingDeleteRequest{} }
func (m *WRingDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteRequest) ProtoMessage()               {}
func (*WRingDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{61} }

func (m *WRingDeleteRequest) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// WRingDeleteRequestMsg is used to delete a batch of wrings
type WRingDeleteRequestMsg struct {
	Request []*WRingDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingDeleteRequestMsg) Reset()                    { *m = WRingDeleteRequestMsg{} }
func (m *WRingDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteRequestMsg) ProtoMessage()               {}
func (*WRingDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{62} }

func (m *WRingDeleteRequestMsg) GetRequest() []*WRingDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingDeleteResponseMsg is batched response to WRingDeleteRequestMsg
type WRingDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *WRingDeleteResponseMsg) Reset()                    { *m = WRingDeleteResponseMsg{} }
func (m *WRingDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteResponseMsg) ProtoMessage()               {}
func (*WRingDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{63} }

func (m *WRingDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// WRingGetRequest is used to get information about a wring
type WRingGetEntriesRequest struct {
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        WRingType       `protobuf:"varint,2,opt,name=type,proto3,enum=types.WRingType" json:"type,omitempty"`
	Index       uint32          `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *WRingGetEntriesRequest) Reset()                    { *m = WRingGetEntriesRequest{} }
func (m *WRingGetEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesRequest) ProtoMessage()               {}
func (*WRingGetEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{64} }

func (m *WRingGetEntriesRequest) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingGetEntriesRequest) GetType() WRingType {
	if m != nil {
		return m.Type
	}
	return WRingType_WRING_TYPE_NONE
}

func (m *WRingGetEntriesRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// WRingGetEntriesRequestMsg is batched GET requests for wrings
type WRingGetEntriesRequestMsg struct {
	Request []*WRingGetEntriesRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingGetEntriesRequestMsg) Reset()         { *m = WRingGetEntriesRequestMsg{} }
func (m *WRingGetEntriesRequestMsg) String() string { return proto.CompactTextString(m) }
func (*WRingGetEntriesRequestMsg) ProtoMessage()    {}
func (*WRingGetEntriesRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{65}
}

func (m *WRingGetEntriesRequestMsg) GetRequest() []*WRingGetEntriesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingStats is the statistics object for each wring
type WRingStats struct {
}

func (m *WRingStats) Reset()                    { *m = WRingStats{} }
func (m *WRingStats) String() string            { return proto.CompactTextString(m) }
func (*WRingStats) ProtoMessage()               {}
func (*WRingStats) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{66} }

type WRingBarcoGCMDescMsg struct {
	IlistAddr    uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr,proto3" json:"ilist_addr,omitempty"`
	OlistAddr    uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr,proto3" json:"olist_addr,omitempty"`
	Command      uint32 `protobuf:"varint,3,opt,name=command,proto3" json:"command,omitempty"`
	KeyDescIndex uint32 `protobuf:"varint,4,opt,name=key_desc_index,json=keyDescIndex,proto3" json:"key_desc_index,omitempty"`
	IvAddr       uint64 `protobuf:"fixed64,5,opt,name=iv_addr,json=ivAddr,proto3" json:"iv_addr,omitempty"`
	StatusAddr   uint64 `protobuf:"fixed64,6,opt,name=status_addr,json=statusAddr,proto3" json:"status_addr,omitempty"`
	DoorbellAddr uint64 `protobuf:"fixed64,7,opt,name=doorbell_addr,json=doorbellAddr,proto3" json:"doorbell_addr,omitempty"`
	DoorbellData uint64 `protobuf:"fixed64,8,opt,name=doorbell_data,json=doorbellData,proto3" json:"doorbell_data,omitempty"`
	Salt         uint32 `protobuf:"varint,9,opt,name=salt,proto3" json:"salt,omitempty"`
	ExplicitIv   uint64 `protobuf:"fixed64,10,opt,name=explicit_iv,json=explicitIv,proto3" json:"explicit_iv,omitempty"`
	HeaderSize   uint32 `protobuf:"varint,11,opt,name=header_size,json=headerSize,proto3" json:"header_size,omitempty"`
	BarcoStatus  uint32 `protobuf:"varint,12,opt,name=barco_status,json=barcoStatus,proto3" json:"barco_status,omitempty"`
}

func (m *WRingBarcoGCMDescMsg) Reset()                    { *m = WRingBarcoGCMDescMsg{} }
func (m *WRingBarcoGCMDescMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingBarcoGCMDescMsg) ProtoMessage()               {}
func (*WRingBarcoGCMDescMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{67} }

func (m *WRingBarcoGCMDescMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetIvAddr() uint64 {
	if m != nil {
		return m.IvAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetDoorbellAddr() uint64 {
	if m != nil {
		return m.DoorbellAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetDoorbellData() uint64 {
	if m != nil {
		return m.DoorbellData
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetHeaderSize() uint32 {
	if m != nil {
		return m.HeaderSize
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetBarcoStatus() uint32 {
	if m != nil {
		return m.BarcoStatus
	}
	return 0
}

// WRingGetResponse captures all the information about a wring
// only if api_status indicates success, other fields are valid
type WRingGetEntriesResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Index     uint32       `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Status    *WRingStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Stats     *WRingStats  `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	// Types that are valid to be assigned to WRingSlotInfo:
	//	*WRingGetEntriesResponse_Value
	//	*WRingGetEntriesResponse_BarcoGcmDesc
	//	*WRingGetEntriesResponse_Raw
	WRingSlotInfo isWRingGetEntriesResponse_WRingSlotInfo `protobuf_oneof:"WRingSlotInfo"`
}

func (m *WRingGetEntriesResponse) Reset()                    { *m = WRingGetEntriesResponse{} }
func (m *WRingGetEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesResponse) ProtoMessage()               {}
func (*WRingGetEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{68} }

type isWRingGetEntriesResponse_WRingSlotInfo interface {
	isWRingGetEntriesResponse_WRingSlotInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WRingGetEntriesResponse_Value struct {
	Value uint64 `protobuf:"fixed64,6,opt,name=value,proto3,oneof"`
}
type WRingGetEntriesResponse_BarcoGcmDesc struct {
	BarcoGcmDesc *WRingBarcoGCMDescMsg `protobuf:"bytes,7,opt,name=barco_gcm_desc,json=barcoGcmDesc,oneof"`
}
type WRingGetEntriesResponse_Raw struct {
	Raw []byte `protobuf:"bytes,8,opt,name=raw,proto3,oneof"`
}

func (*WRingGetEntriesResponse_Value) isWRingGetEntriesResponse_WRingSlotInfo()        {}
func (*WRingGetEntriesResponse_BarcoGcmDesc) isWRingGetEntriesResponse_WRingSlotInfo() {}
func (*WRingGetEntriesResponse_Raw) isWRingGetEntriesResponse_WRingSlotInfo()          {}

func (m *WRingGetEntriesResponse) GetWRingSlotInfo() isWRingGetEntriesResponse_WRingSlotInfo {
	if m != nil {
		return m.WRingSlotInfo
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingGetEntriesResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WRingGetEntriesResponse) GetStatus() *WRingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetStats() *WRingStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetValue() uint64 {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_Value); ok {
		return x.Value
	}
	return 0
}

func (m *WRingGetEntriesResponse) GetBarcoGcmDesc() *WRingBarcoGCMDescMsg {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_BarcoGcmDesc); ok {
		return x.BarcoGcmDesc
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetRaw() []byte {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_Raw); ok {
		return x.Raw
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WRingGetEntriesResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WRingGetEntriesResponse_OneofMarshaler, _WRingGetEntriesResponse_OneofUnmarshaler, _WRingGetEntriesResponse_OneofSizer, []interface{}{
		(*WRingGetEntriesResponse_Value)(nil),
		(*WRingGetEntriesResponse_BarcoGcmDesc)(nil),
		(*WRingGetEntriesResponse_Raw)(nil),
	}
}

func _WRingGetEntriesResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WRingGetEntriesResponse)
	// WRingSlotInfo
	switch x := m.WRingSlotInfo.(type) {
	case *WRingGetEntriesResponse_Value:
		_ = b.EncodeVarint(6<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.Value))
	case *WRingGetEntriesResponse_BarcoGcmDesc:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BarcoGcmDesc); err != nil {
			return err
		}
	case *WRingGetEntriesResponse_Raw:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Raw)
	case nil:
	default:
		return fmt.Errorf("WRingGetEntriesResponse.WRingSlotInfo has unexpected type %T", x)
	}
	return nil
}

func _WRingGetEntriesResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WRingGetEntriesResponse)
	switch tag {
	case 6: // WRingSlotInfo.value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.WRingSlotInfo = &WRingGetEntriesResponse_Value{x}
		return true, err
	case 7: // WRingSlotInfo.barco_gcm_desc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WRingBarcoGCMDescMsg)
		err := b.DecodeMessage(msg)
		m.WRingSlotInfo = &WRingGetEntriesResponse_BarcoGcmDesc{msg}
		return true, err
	case 8: // WRingSlotInfo.raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.WRingSlotInfo = &WRingGetEntriesResponse_Raw{x}
		return true, err
	default:
		return false, nil
	}
}

func _WRingGetEntriesResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WRingGetEntriesResponse)
	// WRingSlotInfo
	switch x := m.WRingSlotInfo.(type) {
	case *WRingGetEntriesResponse_Value:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *WRingGetEntriesResponse_BarcoGcmDesc:
		s := proto.Size(x.BarcoGcmDesc)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WRingGetEntriesResponse_Raw:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Raw)))
		n += len(x.Raw)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WRingGetEntriesResponseMsg is batched response to WRingGetEntriesRequestMsg
type WRingGetEntriesResponseMsg struct {
	Response []*WRingGetEntriesResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingGetEntriesResponseMsg) Reset()         { *m = WRingGetEntriesResponseMsg{} }
func (m *WRingGetEntriesResponseMsg) String() string { return proto.CompactTextString(m) }
func (*WRingGetEntriesResponseMsg) ProtoMessage()    {}
func (*WRingGetEntriesResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{69}
}

func (m *WRingGetEntriesResponseMsg) GetResponse() []*WRingGetEntriesResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingGetMetaResponseMsg captures all the information about a wring metadata
// only if api_status indicates success, other fields are valid
type WRingGetMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *WRingGetMetaResponse) Reset()                    { *m = WRingGetMetaResponse{} }
func (m *WRingGetMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingGetMetaResponse) ProtoMessage()               {}
func (*WRingGetMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{70} }

func (m *WRingGetMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingGetMetaResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// WRingGetMetaResponse is batched response to WRingGetMetaResponseMsg
type WRingGetMetaResponseMsg struct {
	Response []*WRingGetMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingGetMetaResponseMsg) Reset()                    { *m = WRingGetMetaResponseMsg{} }
func (m *WRingGetMetaResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetMetaResponseMsg) ProtoMessage()               {}
func (*WRingGetMetaResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{71} }

func (m *WRingGetMetaResponseMsg) GetResponse() []*WRingGetMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingSetMetaResponseMsg captures all the information about a wring metadata
// only if api_status indicates success, other fields are valid
type WRingSetMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *WRingSetMetaResponse) Reset()                    { *m = WRingSetMetaResponse{} }
func (m *WRingSetMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingSetMetaResponse) ProtoMessage()               {}
func (*WRingSetMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{72} }

func (m *WRingSetMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingSetMetaResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// WRingSetMetaResponse is batched response to WRingSetMetaResponseMsg
type WRingSetMetaResponseMsg struct {
	Response []*WRingSetMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingSetMetaResponseMsg) Reset()                    { *m = WRingSetMetaResponseMsg{} }
func (m *WRingSetMetaResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingSetMetaResponseMsg) ProtoMessage()               {}
func (*WRingSetMetaResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{73} }

func (m *WRingSetMetaResponseMsg) GetResponse() []*WRingSetMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type GetOpaqueTagAddrRequest struct {
	RingType BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
}

func (m *GetOpaqueTagAddrRequest) Reset()                    { *m = GetOpaqueTagAddrRequest{} }
func (m *GetOpaqueTagAddrRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrRequest) ProtoMessage()               {}
func (*GetOpaqueTagAddrRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{74} }

func (m *GetOpaqueTagAddrRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

type GetOpaqueTagAddrRequestMsg struct {
	Request []*GetOpaqueTagAddrRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GetOpaqueTagAddrRequestMsg) Reset()         { *m = GetOpaqueTagAddrRequestMsg{} }
func (m *GetOpaqueTagAddrRequestMsg) String() string { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrRequestMsg) ProtoMessage()    {}
func (*GetOpaqueTagAddrRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{75}
}

func (m *GetOpaqueTagAddrRequestMsg) GetRequest() []*GetOpaqueTagAddrRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type GetOpaqueTagAddrResponse struct {
	OpaqueTagAddr uint64    `protobuf:"varint,1,opt,name=opaque_tag_addr,json=opaqueTagAddr,proto3" json:"opaque_tag_addr,omitempty"`
	ApiStatus     ApiStatus `protobuf:"varint,2,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *GetOpaqueTagAddrResponse) Reset()         { *m = GetOpaqueTagAddrResponse{} }
func (m *GetOpaqueTagAddrResponse) String() string { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrResponse) ProtoMessage()    {}
func (*GetOpaqueTagAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{76}
}

func (m *GetOpaqueTagAddrResponse) GetOpaqueTagAddr() uint64 {
	if m != nil {
		return m.OpaqueTagAddr
	}
	return 0
}

func (m *GetOpaqueTagAddrResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type GetOpaqueTagAddrResponseMsg struct {
	Response []*GetOpaqueTagAddrResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GetOpaqueTagAddrResponseMsg) Reset()         { *m = GetOpaqueTagAddrResponseMsg{} }
func (m *GetOpaqueTagAddrResponseMsg) String() string { return proto.CompactTextString(m) }
func (*GetOpaqueTagAddrResponseMsg) ProtoMessage()    {}
func (*GetOpaqueTagAddrResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{77}
}

func (m *GetOpaqueTagAddrResponseMsg) GetResponse() []*GetOpaqueTagAddrResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// BarcoGetReqDescrEntryRequest - get request descriptor entry from a barco ring slot
type BarcoGetReqDescrEntryRequest struct {
	RingType  BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
	SlotIndex uint32     `protobuf:"varint,2,opt,name=slot_index,json=slotIndex,proto3" json:"slot_index,omitempty"`
}

func (m *BarcoGetReqDescrEntryRequest) Reset()         { *m = BarcoGetReqDescrEntryRequest{} }
func (m *BarcoGetReqDescrEntryRequest) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryRequest) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{78}
}

func (m *BarcoGetReqDescrEntryRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetReqDescrEntryRequest) GetSlotIndex() uint32 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

// BarcoGetReqDescrEntryRequestMsg is batched GET requests for barco rings
type BarcoGetReqDescrEntryRequestMsg struct {
	Request []*BarcoGetReqDescrEntryRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BarcoGetReqDescrEntryRequestMsg) Reset()         { *m = BarcoGetReqDescrEntryRequestMsg{} }
func (m *BarcoGetReqDescrEntryRequestMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryRequestMsg) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{79}
}

func (m *BarcoGetReqDescrEntryRequestMsg) GetRequest() []*BarcoGetReqDescrEntryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// Required fields of the Barco Symmetric crypto Request descriptor
type BarcoSymmReqDescrMsg struct {
	IlistAddr          uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr,proto3" json:"ilist_addr,omitempty"`
	OlistAddr          uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr,proto3" json:"olist_addr,omitempty"`
	Command            uint32 `protobuf:"varint,3,opt,name=command,proto3" json:"command,omitempty"`
	KeyDescIndex       uint32 `protobuf:"varint,4,opt,name=key_desc_index,json=keyDescIndex,proto3" json:"key_desc_index,omitempty"`
	IvAddr             uint64 `protobuf:"fixed64,5,opt,name=iv_addr,json=ivAddr,proto3" json:"iv_addr,omitempty"`
	StatusAddr         uint64 `protobuf:"fixed64,6,opt,name=status_addr,json=statusAddr,proto3" json:"status_addr,omitempty"`
	DoorbellAddr       uint64 `protobuf:"fixed64,7,opt,name=doorbell_addr,json=doorbellAddr,proto3" json:"doorbell_addr,omitempty"`
	DoorbellData       uint64 `protobuf:"fixed64,8,opt,name=doorbell_data,json=doorbellData,proto3" json:"doorbell_data,omitempty"`
	Salt               uint32 `protobuf:"varint,9,opt,name=salt,proto3" json:"salt,omitempty"`
	ExplicitIv         uint64 `protobuf:"fixed64,10,opt,name=explicit_iv,json=explicitIv,proto3" json:"explicit_iv,omitempty"`
	HeaderSize         uint32 `protobuf:"varint,11,opt,name=header_size,json=headerSize,proto3" json:"header_size,omitempty"`
	BarcoStatus        uint32 `protobuf:"varint,12,opt,name=barco_status,json=barcoStatus,proto3" json:"barco_status,omitempty"`
	SecondKeyDescIndex uint32 `protobuf:"varint,13,opt,name=second_key_desc_index,json=secondKeyDescIndex,proto3" json:"second_key_desc_index,omitempty"`
}

func (m *BarcoSymmReqDescrMsg) Reset()                    { *m = BarcoSymmReqDescrMsg{} }
func (m *BarcoSymmReqDescrMsg) String() string            { return proto.CompactTextString(m) }
func (*BarcoSymmReqDescrMsg) ProtoMessage()               {}
func (*BarcoSymmReqDescrMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{80} }

func (m *BarcoSymmReqDescrMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetIvAddr() uint64 {
	if m != nil {
		return m.IvAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetDoorbellAddr() uint64 {
	if m != nil {
		return m.DoorbellAddr
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetDoorbellData() uint64 {
	if m != nil {
		return m.DoorbellData
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetHeaderSize() uint32 {
	if m != nil {
		return m.HeaderSize
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetBarcoStatus() uint32 {
	if m != nil {
		return m.BarcoStatus
	}
	return 0
}

func (m *BarcoSymmReqDescrMsg) GetSecondKeyDescIndex() uint32 {
	if m != nil {
		return m.SecondKeyDescIndex
	}
	return 0
}

// Required fields of the Barco ASymmetric crypto Request descriptor
type BarcoASymReqDescrMsg struct {
	IlistAddr      uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr,proto3" json:"ilist_addr,omitempty"`
	OlistAddr      uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr,proto3" json:"olist_addr,omitempty"`
	KeyDescIndex   uint32 `protobuf:"varint,3,opt,name=key_desc_index,json=keyDescIndex,proto3" json:"key_desc_index,omitempty"`
	StatusAddr     uint64 `protobuf:"fixed64,4,opt,name=status_addr,json=statusAddr,proto3" json:"status_addr,omitempty"`
	OpaqueTagValue uint32 `protobuf:"varint,5,opt,name=opaque_tag_value,json=opaqueTagValue,proto3" json:"opaque_tag_value,omitempty"`
	OpaqueTagWrEn  uint32 `protobuf:"varint,6,opt,name=opaque_tag_wr_en,json=opaqueTagWrEn,proto3" json:"opaque_tag_wr_en,omitempty"`
	FlagA          uint32 `protobuf:"varint,7,opt,name=flag_a,json=flagA,proto3" json:"flag_a,omitempty"`
	FlagB          uint32 `protobuf:"varint,8,opt,name=flag_b,json=flagB,proto3" json:"flag_b,omitempty"`
}

func (m *BarcoASymReqDescrMsg) Reset()                    { *m = BarcoASymReqDescrMsg{} }
func (m *BarcoASymReqDescrMsg) String() string            { return proto.CompactTextString(m) }
func (*BarcoASymReqDescrMsg) ProtoMessage()               {}
func (*BarcoASymReqDescrMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{81} }

func (m *BarcoASymReqDescrMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetOpaqueTagValue() uint32 {
	if m != nil {
		return m.OpaqueTagValue
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetOpaqueTagWrEn() uint32 {
	if m != nil {
		return m.OpaqueTagWrEn
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetFlagA() uint32 {
	if m != nil {
		return m.FlagA
	}
	return 0
}

func (m *BarcoASymReqDescrMsg) GetFlagB() uint32 {
	if m != nil {
		return m.FlagB
	}
	return 0
}

// BarcoGetReqDescrEntryResponse returns the barco request descriptor content
// only if api_status indicates success, other fields are valid
type BarcoGetReqDescrEntryResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	RingType  BarcoRings `protobuf:"varint,2,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
	SlotIndex uint32     `protobuf:"varint,3,opt,name=slot_index,json=slotIndex,proto3" json:"slot_index,omitempty"`
	// Types that are valid to be assigned to ReqDescrMsg:
	//	*BarcoGetReqDescrEntryResponse_SymmReqDescr
	//	*BarcoGetReqDescrEntryResponse_AsymReqDescr
	ReqDescrMsg isBarcoGetReqDescrEntryResponse_ReqDescrMsg `protobuf_oneof:"ReqDescrMsg"`
}

func (m *BarcoGetReqDescrEntryResponse) Reset()         { *m = BarcoGetReqDescrEntryResponse{} }
func (m *BarcoGetReqDescrEntryResponse) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryResponse) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{82}
}

type isBarcoGetReqDescrEntryResponse_ReqDescrMsg interface {
	isBarcoGetReqDescrEntryResponse_ReqDescrMsg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BarcoGetReqDescrEntryResponse_SymmReqDescr struct {
	SymmReqDescr *BarcoSymmReqDescrMsg `protobuf:"bytes,4,opt,name=symm_req_descr,json=symmReqDescr,oneof"`
}
type BarcoGetReqDescrEntryResponse_AsymReqDescr struct {
	AsymReqDescr *BarcoASymReqDescrMsg `protobuf:"bytes,5,opt,name=asym_req_descr,json=asymReqDescr,oneof"`
}

func (*BarcoGetReqDescrEntryResponse_SymmReqDescr) isBarcoGetReqDescrEntryResponse_ReqDescrMsg() {}
func (*BarcoGetReqDescrEntryResponse_AsymReqDescr) isBarcoGetReqDescrEntryResponse_ReqDescrMsg() {}

func (m *BarcoGetReqDescrEntryResponse) GetReqDescrMsg() isBarcoGetReqDescrEntryResponse_ReqDescrMsg {
	if m != nil {
		return m.ReqDescrMsg
	}
	return nil
}

func (m *BarcoGetReqDescrEntryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BarcoGetReqDescrEntryResponse) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetReqDescrEntryResponse) GetSlotIndex() uint32 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

func (m *BarcoGetReqDescrEntryResponse) GetSymmReqDescr() *BarcoSymmReqDescrMsg {
	if x, ok := m.GetReqDescrMsg().(*BarcoGetReqDescrEntryResponse_SymmReqDescr); ok {
		return x.SymmReqDescr
	}
	return nil
}

func (m *BarcoGetReqDescrEntryResponse) GetAsymReqDescr() *BarcoASymReqDescrMsg {
	if x, ok := m.GetReqDescrMsg().(*BarcoGetReqDescrEntryResponse_AsymReqDescr); ok {
		return x.AsymReqDescr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BarcoGetReqDescrEntryResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BarcoGetReqDescrEntryResponse_OneofMarshaler, _BarcoGetReqDescrEntryResponse_OneofUnmarshaler, _BarcoGetReqDescrEntryResponse_OneofSizer, []interface{}{
		(*BarcoGetReqDescrEntryResponse_SymmReqDescr)(nil),
		(*BarcoGetReqDescrEntryResponse_AsymReqDescr)(nil),
	}
}

func _BarcoGetReqDescrEntryResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BarcoGetReqDescrEntryResponse)
	// ReqDescrMsg
	switch x := m.ReqDescrMsg.(type) {
	case *BarcoGetReqDescrEntryResponse_SymmReqDescr:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SymmReqDescr); err != nil {
			return err
		}
	case *BarcoGetReqDescrEntryResponse_AsymReqDescr:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AsymReqDescr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BarcoGetReqDescrEntryResponse.ReqDescrMsg has unexpected type %T", x)
	}
	return nil
}

func _BarcoGetReqDescrEntryResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BarcoGetReqDescrEntryResponse)
	switch tag {
	case 4: // ReqDescrMsg.symm_req_descr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BarcoSymmReqDescrMsg)
		err := b.DecodeMessage(msg)
		m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_SymmReqDescr{msg}
		return true, err
	case 5: // ReqDescrMsg.asym_req_descr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BarcoASymReqDescrMsg)
		err := b.DecodeMessage(msg)
		m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_AsymReqDescr{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BarcoGetReqDescrEntryResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BarcoGetReqDescrEntryResponse)
	// ReqDescrMsg
	switch x := m.ReqDescrMsg.(type) {
	case *BarcoGetReqDescrEntryResponse_SymmReqDescr:
		s := proto.Size(x.SymmReqDescr)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BarcoGetReqDescrEntryResponse_AsymReqDescr:
		s := proto.Size(x.AsymReqDescr)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// BarcoGetReqDescrEntryResponseMsg is batched response to BarcoGetReqDescrEntryRequestMsg
type BarcoGetReqDescrEntryResponseMsg struct {
	Response []*BarcoGetReqDescrEntryResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BarcoGetReqDescrEntryResponseMsg) Reset()         { *m = BarcoGetReqDescrEntryResponseMsg{} }
func (m *BarcoGetReqDescrEntryResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetReqDescrEntryResponseMsg) ProtoMessage()    {}
func (*BarcoGetReqDescrEntryResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{83}
}

func (m *BarcoGetReqDescrEntryResponseMsg) GetResponse() []*BarcoGetReqDescrEntryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// BarcoGetRingMetaRequest - get ring meta data for a barco ring
type BarcoGetRingMetaRequest struct {
	RingType BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
}

func (m *BarcoGetRingMetaRequest) Reset()                    { *m = BarcoGetRingMetaRequest{} }
func (m *BarcoGetRingMetaRequest) String() string            { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaRequest) ProtoMessage()               {}
func (*BarcoGetRingMetaRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{84} }

func (m *BarcoGetRingMetaRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

// BarcoGetRingMetaRequestMsg is batched GET requests for barco rings
type BarcoGetRingMetaRequestMsg struct {
	Request []*BarcoGetRingMetaRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BarcoGetRingMetaRequestMsg) Reset()         { *m = BarcoGetRingMetaRequestMsg{} }
func (m *BarcoGetRingMetaRequestMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaRequestMsg) ProtoMessage()    {}
func (*BarcoGetRingMetaRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{85}
}

func (m *BarcoGetRingMetaRequestMsg) GetRequest() []*BarcoGetRingMetaRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// BarcoGetRingMetaResponse returns the barco ring meta data
// only if api_status indicates success, other fields are valid
type BarcoGetRingMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	RingType  BarcoRings `protobuf:"varint,2,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
	Pi        uint32     `protobuf:"varint,3,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci        uint32     `protobuf:"varint,4,opt,name=ci,proto3" json:"ci,omitempty"`
}

func (m *BarcoGetRingMetaResponse) Reset()         { *m = BarcoGetRingMetaResponse{} }
func (m *BarcoGetRingMetaResponse) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaResponse) ProtoMessage()    {}
func (*BarcoGetRingMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{86}
}

func (m *BarcoGetRingMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BarcoGetRingMetaResponse) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetRingMetaResponse) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *BarcoGetRingMetaResponse) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

// BarcoGetRingMetaResponseMsg is batched response to BarcoGetRingMetaRequestMsg
type BarcoGetRingMetaResponseMsg struct {
	Response []*BarcoGetRingMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BarcoGetRingMetaResponseMsg) Reset()         { *m = BarcoGetRingMetaResponseMsg{} }
func (m *BarcoGetRingMetaResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaResponseMsg) ProtoMessage()    {}
func (*BarcoGetRingMetaResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{87}
}

func (m *BarcoGetRingMetaResponseMsg) GetResponse() []*BarcoGetRingMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// BarcoGetRingMetaConfigRequest - get ring meta config data for a barco ring
type BarcoGetRingMetaConfigRequest struct {
	RingType BarcoRings `protobuf:"varint,1,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
}

func (m *BarcoGetRingMetaConfigRequest) Reset()         { *m = BarcoGetRingMetaConfigRequest{} }
func (m *BarcoGetRingMetaConfigRequest) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaConfigRequest) ProtoMessage()    {}
func (*BarcoGetRingMetaConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{88}
}

func (m *BarcoGetRingMetaConfigRequest) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

// BarcoGetRingMetaConfigRequestMsg is batched GET requests for barco rings
type BarcoGetRingMetaConfigRequestMsg struct {
	Request []*BarcoGetRingMetaConfigRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BarcoGetRingMetaConfigRequestMsg) Reset()         { *m = BarcoGetRingMetaConfigRequestMsg{} }
func (m *BarcoGetRingMetaConfigRequestMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaConfigRequestMsg) ProtoMessage()    {}
func (*BarcoGetRingMetaConfigRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{89}
}

func (m *BarcoGetRingMetaConfigRequestMsg) GetRequest() []*BarcoGetRingMetaConfigRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// BarcoGetRingMetaConfigResponse returns the barco ring meta data
// only if api_status indicates success, other fields are valid
type BarcoGetRingMetaConfigResponse struct {
	ApiStatus       ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	RingType        BarcoRings `protobuf:"varint,2,opt,name=ring_type,json=ringType,proto3,enum=types.BarcoRings" json:"ring_type,omitempty"`
	RingBase        uint64     `protobuf:"varint,3,opt,name=ring_base,json=ringBase,proto3" json:"ring_base,omitempty"`
	ProducerIdxAddr uint64     `protobuf:"varint,4,opt,name=producer_idx_addr,json=producerIdxAddr,proto3" json:"producer_idx_addr,omitempty"`
	ShadowPndxAddr  uint64     `protobuf:"varint,5,opt,name=shadow_pndx_addr,json=shadowPndxAddr,proto3" json:"shadow_pndx_addr,omitempty"`
	OpaqueTagAddr   uint64     `protobuf:"varint,6,opt,name=opaque_tag_addr,json=opaqueTagAddr,proto3" json:"opaque_tag_addr,omitempty"`
	RingSize        uint32     `protobuf:"varint,7,opt,name=ring_size,json=ringSize,proto3" json:"ring_size,omitempty"`
	DescSize        uint32     `protobuf:"varint,8,opt,name=desc_size,json=descSize,proto3" json:"desc_size,omitempty"`
	PndxSize        uint32     `protobuf:"varint,9,opt,name=pndx_size,json=pndxSize,proto3" json:"pndx_size,omitempty"`
	OpaqueTagSize   uint32     `protobuf:"varint,10,opt,name=opaque_tag_size,json=opaqueTagSize,proto3" json:"opaque_tag_size,omitempty"`
}

func (m *BarcoGetRingMetaConfigResponse) Reset()         { *m = BarcoGetRingMetaConfigResponse{} }
func (m *BarcoGetRingMetaConfigResponse) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaConfigResponse) ProtoMessage()    {}
func (*BarcoGetRingMetaConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{90}
}

func (m *BarcoGetRingMetaConfigResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BarcoGetRingMetaConfigResponse) GetRingType() BarcoRings {
	if m != nil {
		return m.RingType
	}
	return BarcoRings_BARCO_RING_ASYM
}

func (m *BarcoGetRingMetaConfigResponse) GetRingBase() uint64 {
	if m != nil {
		return m.RingBase
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetProducerIdxAddr() uint64 {
	if m != nil {
		return m.ProducerIdxAddr
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetShadowPndxAddr() uint64 {
	if m != nil {
		return m.ShadowPndxAddr
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetOpaqueTagAddr() uint64 {
	if m != nil {
		return m.OpaqueTagAddr
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetRingSize() uint32 {
	if m != nil {
		return m.RingSize
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetDescSize() uint32 {
	if m != nil {
		return m.DescSize
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetPndxSize() uint32 {
	if m != nil {
		return m.PndxSize
	}
	return 0
}

func (m *BarcoGetRingMetaConfigResponse) GetOpaqueTagSize() uint32 {
	if m != nil {
		return m.OpaqueTagSize
	}
	return 0
}

// BarcoGetRingMetaConfigResponseMsg is batched response to BarcoGetRingMetaConfigRequestMsg
type BarcoGetRingMetaConfigResponseMsg struct {
	Response []*BarcoGetRingMetaConfigResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BarcoGetRingMetaConfigResponseMsg) Reset()         { *m = BarcoGetRingMetaConfigResponseMsg{} }
func (m *BarcoGetRingMetaConfigResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BarcoGetRingMetaConfigResponseMsg) ProtoMessage()    {}
func (*BarcoGetRingMetaConfigResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{91}
}

func (m *BarcoGetRingMetaConfigResponseMsg) GetResponse() []*BarcoGetRingMetaConfigResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyCreateRequest struct {
}

func (m *CryptoKeyCreateRequest) Reset()                    { *m = CryptoKeyCreateRequest{} }
func (m *CryptoKeyCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateRequest) ProtoMessage()               {}
func (*CryptoKeyCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{92} }

type CryptoKeyCreateRequestMsg struct {
	Request []*CryptoKeyCreateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyCreateRequestMsg) Reset()         { *m = CryptoKeyCreateRequestMsg{} }
func (m *CryptoKeyCreateRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateRequestMsg) ProtoMessage()    {}
func (*CryptoKeyCreateRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{93}
}

func (m *CryptoKeyCreateRequestMsg) GetRequest() []*CryptoKeyCreateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyCreateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyCreateResponse) Reset()                    { *m = CryptoKeyCreateResponse{} }
func (m *CryptoKeyCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyCreateResponse) ProtoMessage()               {}
func (*CryptoKeyCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{94} }

func (m *CryptoKeyCreateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyCreateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyCreateResponseMsg struct {
	Response []*CryptoKeyCreateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyCreateResponseMsg) Reset()         { *m = CryptoKeyCreateResponseMsg{} }
func (m *CryptoKeyCreateResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateResponseMsg) ProtoMessage()    {}
func (*CryptoKeyCreateResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{95}
}

func (m *CryptoKeyCreateResponseMsg) GetResponse() []*CryptoKeyCreateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyCreateWithIdRequest struct {
	Keyindex      uint32 `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
	AllowDupAlloc uint32 `protobuf:"varint,2,opt,name=allow_dup_alloc,json=allowDupAlloc,proto3" json:"allow_dup_alloc,omitempty"`
}

func (m *CryptoKeyCreateWithIdRequest) Reset()         { *m = CryptoKeyCreateWithIdRequest{} }
func (m *CryptoKeyCreateWithIdRequest) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdRequest) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{96}
}

func (m *CryptoKeyCreateWithIdRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

func (m *CryptoKeyCreateWithIdRequest) GetAllowDupAlloc() uint32 {
	if m != nil {
		return m.AllowDupAlloc
	}
	return 0
}

type CryptoKeyCreateWithIdRequestMsg struct {
	Request []*CryptoKeyCreateWithIdRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyCreateWithIdRequestMsg) Reset()         { *m = CryptoKeyCreateWithIdRequestMsg{} }
func (m *CryptoKeyCreateWithIdRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdRequestMsg) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{97}
}

func (m *CryptoKeyCreateWithIdRequestMsg) GetRequest() []*CryptoKeyCreateWithIdRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyCreateWithIdResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyCreateWithIdResponse) Reset()         { *m = CryptoKeyCreateWithIdResponse{} }
func (m *CryptoKeyCreateWithIdResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdResponse) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{98}
}

func (m *CryptoKeyCreateWithIdResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyCreateWithIdResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyCreateWithIdResponseMsg struct {
	Response []*CryptoKeyCreateWithIdResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyCreateWithIdResponseMsg) Reset()         { *m = CryptoKeyCreateWithIdResponseMsg{} }
func (m *CryptoKeyCreateWithIdResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyCreateWithIdResponseMsg) ProtoMessage()    {}
func (*CryptoKeyCreateWithIdResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{99}
}

func (m *CryptoKeyCreateWithIdResponseMsg) GetResponse() []*CryptoKeyCreateWithIdResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeySpec struct {
	Keyindex uint32        `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
	KeyType  CryptoKeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=types.CryptoKeyType" json:"key_type,omitempty"`
	KeySize  uint32        `protobuf:"varint,3,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	Key      []byte        `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CryptoKeySpec) Reset()                    { *m = CryptoKeySpec{} }
func (m *CryptoKeySpec) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeySpec) ProtoMessage()               {}
func (*CryptoKeySpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{100} }

func (m *CryptoKeySpec) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

func (m *CryptoKeySpec) GetKeyType() CryptoKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoKeyType_CRYPTO_KEY_TYPE_AES128
}

func (m *CryptoKeySpec) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoKeySpec) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyReadRequest struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyReadRequest) Reset()                    { *m = CryptoKeyReadRequest{} }
func (m *CryptoKeyReadRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadRequest) ProtoMessage()               {}
func (*CryptoKeyReadRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{101} }

func (m *CryptoKeyReadRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyReadRequestMsg struct {
	Request []*CryptoKeyReadRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyReadRequestMsg) Reset()         { *m = CryptoKeyReadRequestMsg{} }
func (m *CryptoKeyReadRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyReadRequestMsg) ProtoMessage()    {}
func (*CryptoKeyReadRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{102}
}

func (m *CryptoKeyReadRequestMsg) GetRequest() []*CryptoKeyReadRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyReadResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Key       *CryptoKeySpec `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoKeyReadResponse) Reset()                    { *m = CryptoKeyReadResponse{} }
func (m *CryptoKeyReadResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyReadResponse) ProtoMessage()               {}
func (*CryptoKeyReadResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{103} }

func (m *CryptoKeyReadResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyReadResponse) GetKey() *CryptoKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyReadResponseMsg struct {
	Response []*CryptoKeyReadResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyReadResponseMsg) Reset()         { *m = CryptoKeyReadResponseMsg{} }
func (m *CryptoKeyReadResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyReadResponseMsg) ProtoMessage()    {}
func (*CryptoKeyReadResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{104}
}

func (m *CryptoKeyReadResponseMsg) GetResponse() []*CryptoKeyReadResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyUpdateRequest struct {
	Key *CryptoKeySpec `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoKeyUpdateRequest) Reset()                    { *m = CryptoKeyUpdateRequest{} }
func (m *CryptoKeyUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateRequest) ProtoMessage()               {}
func (*CryptoKeyUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{105} }

func (m *CryptoKeyUpdateRequest) GetKey() *CryptoKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoKeyUpdateRequestMsg struct {
	Request []*CryptoKeyUpdateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyUpdateRequestMsg) Reset()         { *m = CryptoKeyUpdateRequestMsg{} }
func (m *CryptoKeyUpdateRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateRequestMsg) ProtoMessage()    {}
func (*CryptoKeyUpdateRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{106}
}

func (m *CryptoKeyUpdateRequestMsg) GetRequest() []*CryptoKeyUpdateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyUpdateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyUpdateResponse) Reset()         { *m = CryptoKeyUpdateResponse{} }
func (m *CryptoKeyUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateResponse) ProtoMessage()    {}
func (*CryptoKeyUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{107}
}

func (m *CryptoKeyUpdateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyUpdateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyUpdateResponseMsg struct {
	Response []*CryptoKeyUpdateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyUpdateResponseMsg) Reset()         { *m = CryptoKeyUpdateResponseMsg{} }
func (m *CryptoKeyUpdateResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyUpdateResponseMsg) ProtoMessage()    {}
func (*CryptoKeyUpdateResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{108}
}

func (m *CryptoKeyUpdateResponseMsg) GetResponse() []*CryptoKeyUpdateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoKeyDeleteRequest struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyDeleteRequest) Reset()                    { *m = CryptoKeyDeleteRequest{} }
func (m *CryptoKeyDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteRequest) ProtoMessage()               {}
func (*CryptoKeyDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{109} }

func (m *CryptoKeyDeleteRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyDeleteRequestMsg struct {
	Request []*CryptoKeyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoKeyDeleteRequestMsg) Reset()         { *m = CryptoKeyDeleteRequestMsg{} }
func (m *CryptoKeyDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteRequestMsg) ProtoMessage()    {}
func (*CryptoKeyDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{110}
}

func (m *CryptoKeyDeleteRequestMsg) GetRequest() []*CryptoKeyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoKeyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoKeyDeleteResponse) Reset()         { *m = CryptoKeyDeleteResponse{} }
func (m *CryptoKeyDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteResponse) ProtoMessage()    {}
func (*CryptoKeyDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{111}
}

func (m *CryptoKeyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoKeyDeleteResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoKeyDeleteResponseMsg struct {
	Response []*CryptoKeyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoKeyDeleteResponseMsg) Reset()         { *m = CryptoKeyDeleteResponseMsg{} }
func (m *CryptoKeyDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoKeyDeleteResponseMsg) ProtoMessage()    {}
func (*CryptoKeyDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{112}
}

func (m *CryptoKeyDeleteResponseMsg) GetResponse() []*CryptoKeyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoAsymKeyCreateRequest struct {
}

func (m *CryptoAsymKeyCreateRequest) Reset()         { *m = CryptoAsymKeyCreateRequest{} }
func (m *CryptoAsymKeyCreateRequest) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyCreateRequest) ProtoMessage()    {}
func (*CryptoAsymKeyCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{113}
}

type CryptoAsymKeyCreateRequestMsg struct {
	Request []*CryptoAsymKeyCreateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoAsymKeyCreateRequestMsg) Reset()         { *m = CryptoAsymKeyCreateRequestMsg{} }
func (m *CryptoAsymKeyCreateRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyCreateRequestMsg) ProtoMessage()    {}
func (*CryptoAsymKeyCreateRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{114}
}

func (m *CryptoAsymKeyCreateRequestMsg) GetRequest() []*CryptoAsymKeyCreateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoAsymKeyCreateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoAsymKeyCreateResponse) Reset()         { *m = CryptoAsymKeyCreateResponse{} }
func (m *CryptoAsymKeyCreateResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyCreateResponse) ProtoMessage()    {}
func (*CryptoAsymKeyCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{115}
}

func (m *CryptoAsymKeyCreateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoAsymKeyCreateResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoAsymKeyCreateResponseMsg struct {
	Response []*CryptoAsymKeyCreateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoAsymKeyCreateResponseMsg) Reset()         { *m = CryptoAsymKeyCreateResponseMsg{} }
func (m *CryptoAsymKeyCreateResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyCreateResponseMsg) ProtoMessage()    {}
func (*CryptoAsymKeyCreateResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{116}
}

func (m *CryptoAsymKeyCreateResponseMsg) GetResponse() []*CryptoAsymKeyCreateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoAsymKeyDeleteRequest struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoAsymKeyDeleteRequest) Reset()         { *m = CryptoAsymKeyDeleteRequest{} }
func (m *CryptoAsymKeyDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyDeleteRequest) ProtoMessage()    {}
func (*CryptoAsymKeyDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{117}
}

func (m *CryptoAsymKeyDeleteRequest) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoAsymKeyDeleteRequestMsg struct {
	Request []*CryptoAsymKeyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoAsymKeyDeleteRequestMsg) Reset()         { *m = CryptoAsymKeyDeleteRequestMsg{} }
func (m *CryptoAsymKeyDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyDeleteRequestMsg) ProtoMessage()    {}
func (*CryptoAsymKeyDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{118}
}

func (m *CryptoAsymKeyDeleteRequestMsg) GetRequest() []*CryptoAsymKeyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoAsymKeyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoAsymKeyDeleteResponse) Reset()         { *m = CryptoAsymKeyDeleteResponse{} }
func (m *CryptoAsymKeyDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyDeleteResponse) ProtoMessage()    {}
func (*CryptoAsymKeyDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{119}
}

func (m *CryptoAsymKeyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoAsymKeyDeleteResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoAsymKeyDeleteResponseMsg struct {
	Response []*CryptoAsymKeyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoAsymKeyDeleteResponseMsg) Reset()         { *m = CryptoAsymKeyDeleteResponseMsg{} }
func (m *CryptoAsymKeyDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyDeleteResponseMsg) ProtoMessage()    {}
func (*CryptoAsymKeyDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{120}
}

func (m *CryptoAsymKeyDeleteResponseMsg) GetResponse() []*CryptoAsymKeyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CryptoAsymKeySpec struct {
	Keyindex uint32 `protobuf:"varint,1,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
	Key      []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CryptoAsymKeySpec) Reset()                    { *m = CryptoAsymKeySpec{} }
func (m *CryptoAsymKeySpec) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymKeySpec) ProtoMessage()               {}
func (*CryptoAsymKeySpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{121} }

func (m *CryptoAsymKeySpec) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

func (m *CryptoAsymKeySpec) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoAsymKeyWriteRequest struct {
	Key *CryptoAsymKeySpec `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *CryptoAsymKeyWriteRequest) Reset()         { *m = CryptoAsymKeyWriteRequest{} }
func (m *CryptoAsymKeyWriteRequest) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyWriteRequest) ProtoMessage()    {}
func (*CryptoAsymKeyWriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{122}
}

func (m *CryptoAsymKeyWriteRequest) GetKey() *CryptoAsymKeySpec {
	if m != nil {
		return m.Key
	}
	return nil
}

type CryptoAsymKeyWriteRequestMsg struct {
	Request []*CryptoAsymKeyWriteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoAsymKeyWriteRequestMsg) Reset()         { *m = CryptoAsymKeyWriteRequestMsg{} }
func (m *CryptoAsymKeyWriteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyWriteRequestMsg) ProtoMessage()    {}
func (*CryptoAsymKeyWriteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{123}
}

func (m *CryptoAsymKeyWriteRequestMsg) GetRequest() []*CryptoAsymKeyWriteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoAsymKeyWriteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Keyindex  uint32    `protobuf:"varint,2,opt,name=keyindex,proto3" json:"keyindex,omitempty"`
}

func (m *CryptoAsymKeyWriteResponse) Reset()         { *m = CryptoAsymKeyWriteResponse{} }
func (m *CryptoAsymKeyWriteResponse) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyWriteResponse) ProtoMessage()    {}
func (*CryptoAsymKeyWriteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{124}
}

func (m *CryptoAsymKeyWriteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoAsymKeyWriteResponse) GetKeyindex() uint32 {
	if m != nil {
		return m.Keyindex
	}
	return 0
}

type CryptoAsymKeyWriteResponseMsg struct {
	Response []*CryptoAsymKeyWriteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoAsymKeyWriteResponseMsg) Reset()         { *m = CryptoAsymKeyWriteResponseMsg{} }
func (m *CryptoAsymKeyWriteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymKeyWriteResponseMsg) ProtoMessage()    {}
func (*CryptoAsymKeyWriteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{125}
}

func (m *CryptoAsymKeyWriteResponseMsg) GetResponse() []*CryptoAsymKeyWriteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type ECCPoint struct {
	X []byte `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *ECCPoint) Reset()                    { *m = ECCPoint{} }
func (m *ECCPoint) String() string            { return proto.CompactTextString(m) }
func (*ECCPoint) ProtoMessage()               {}
func (*ECCPoint) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{126} }

func (m *ECCPoint) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECCPoint) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type CryptoAsymApiECCDomainParamsFp struct {
	KeySize uint32    `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	P       []byte    `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
	A       []byte    `protobuf:"bytes,3,opt,name=a,proto3" json:"a,omitempty"`
	B       []byte    `protobuf:"bytes,4,opt,name=b,proto3" json:"b,omitempty"`
	G       *ECCPoint `protobuf:"bytes,5,opt,name=G" json:"G,omitempty"`
	N       []byte    `protobuf:"bytes,6,opt,name=n,proto3" json:"n,omitempty"`
}

func (m *CryptoAsymApiECCDomainParamsFp) Reset()         { *m = CryptoAsymApiECCDomainParamsFp{} }
func (m *CryptoAsymApiECCDomainParamsFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiECCDomainParamsFp) ProtoMessage()    {}
func (*CryptoAsymApiECCDomainParamsFp) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{127}
}

func (m *CryptoAsymApiECCDomainParamsFp) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiECCDomainParamsFp) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetG() *ECCPoint {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CryptoAsymApiECCDomainParamsFp) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

type CryptoAsymApiReqECCPointMulFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	EccPoint        *ECCPoint                       `protobuf:"bytes,2,opt,name=ecc_point,json=eccPoint" json:"ecc_point,omitempty"`
	K               []byte                          `protobuf:"bytes,3,opt,name=k,proto3" json:"k,omitempty"`
}

func (m *CryptoAsymApiReqECCPointMulFp) Reset()         { *m = CryptoAsymApiReqECCPointMulFp{} }
func (m *CryptoAsymApiReqECCPointMulFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECCPointMulFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECCPointMulFp) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{128}
}

func (m *CryptoAsymApiReqECCPointMulFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECCPointMulFp) GetEccPoint() *ECCPoint {
	if m != nil {
		return m.EccPoint
	}
	return nil
}

func (m *CryptoAsymApiReqECCPointMulFp) GetK() []byte {
	if m != nil {
		return m.K
	}
	return nil
}

type CryptoAsymApiRespECCPointMulFp struct {
	Q *ECCPoint `protobuf:"bytes,1,opt,name=Q" json:"Q,omitempty"`
}

func (m *CryptoAsymApiRespECCPointMulFp) Reset()         { *m = CryptoAsymApiRespECCPointMulFp{} }
func (m *CryptoAsymApiRespECCPointMulFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECCPointMulFp) ProtoMessage()    {}
func (*CryptoAsymApiRespECCPointMulFp) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{129}
}

func (m *CryptoAsymApiRespECCPointMulFp) GetQ() *ECCPoint {
	if m != nil {
		return m.Q
	}
	return nil
}

// ESCDA Signature Generation
type CryptoAsymApiReqECDSASignatureGenFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	Da              []byte                          `protobuf:"bytes,2,opt,name=da,proto3" json:"da,omitempty"`
	K               []byte                          `protobuf:"bytes,3,opt,name=k,proto3" json:"k,omitempty"`
	H               []byte                          `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	KeyIdx          int32                           `protobuf:"varint,5,opt,name=key_idx,json=keyIdx,proto3" json:"key_idx,omitempty"`
	AsyncEn         bool                            `protobuf:"varint,6,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) Reset()         { *m = CryptoAsymApiReqECDSASignatureGenFp{} }
func (m *CryptoAsymApiReqECDSASignatureGenFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECDSASignatureGenFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECDSASignatureGenFp) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{130}
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetDa() []byte {
	if m != nil {
		return m.Da
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetK() []byte {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespECDSASignatureGenFp struct {
	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) Reset()         { *m = CryptoAsymApiRespECDSASignatureGenFp{} }
func (m *CryptoAsymApiRespECDSASignatureGenFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECDSASignatureGenFp) ProtoMessage()    {}
func (*CryptoAsymApiRespECDSASignatureGenFp) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{131}
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// ECDSA Signature Verification
type CryptoAsymApiReqECDSASignatureVerifyFp struct {
	EccDomainParams *CryptoAsymApiECCDomainParamsFp `protobuf:"bytes,1,opt,name=ecc_domain_params,json=eccDomainParams" json:"ecc_domain_params,omitempty"`
	Q               *ECCPoint                       `protobuf:"bytes,2,opt,name=Q" json:"Q,omitempty"`
	R               []byte                          `protobuf:"bytes,3,opt,name=r,proto3" json:"r,omitempty"`
	S               []byte                          `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	H               []byte                          `protobuf:"bytes,5,opt,name=h,proto3" json:"h,omitempty"`
	AsyncEn         bool                            `protobuf:"varint,6,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Reset() {
	*m = CryptoAsymApiReqECDSASignatureVerifyFp{}
}
func (m *CryptoAsymApiReqECDSASignatureVerifyFp) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqECDSASignatureVerifyFp) ProtoMessage()    {}
func (*CryptoAsymApiReqECDSASignatureVerifyFp) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{132}
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetEccDomainParams() *CryptoAsymApiECCDomainParamsFp {
	if m != nil {
		return m.EccDomainParams
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetQ() *ECCPoint {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

// RSA Encryption
type CryptoAsymApiReqRSAEncrypt struct {
	KeySize   uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	ModN      []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E         []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	PlainText []byte `protobuf:"bytes,4,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
	AsyncEn   bool   `protobuf:"varint,5,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSAEncrypt) Reset()         { *m = CryptoAsymApiReqRSAEncrypt{} }
func (m *CryptoAsymApiReqRSAEncrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSAEncrypt) ProtoMessage()    {}
func (*CryptoAsymApiReqRSAEncrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{133}
}

func (m *CryptoAsymApiReqRSAEncrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSAEncrypt) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

func (m *CryptoAsymApiReqRSAEncrypt) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSAEncrypt struct {
	CipherText []byte `protobuf:"bytes,1,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
}

func (m *CryptoAsymApiRespRSAEncrypt) Reset()         { *m = CryptoAsymApiRespRSAEncrypt{} }
func (m *CryptoAsymApiRespRSAEncrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSAEncrypt) ProtoMessage()    {}
func (*CryptoAsymApiRespRSAEncrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{134}
}

func (m *CryptoAsymApiRespRSAEncrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

// RSA Decryption
type CryptoAsymApiReqRSADecrypt struct {
	KeySize    uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	ModN       []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	D          []byte `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	CipherText []byte `protobuf:"bytes,4,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
}

func (m *CryptoAsymApiReqRSADecrypt) Reset()         { *m = CryptoAsymApiReqRSADecrypt{} }
func (m *CryptoAsymApiReqRSADecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSADecrypt) ProtoMessage()    {}
func (*CryptoAsymApiReqRSADecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{135}
}

func (m *CryptoAsymApiReqRSADecrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSADecrypt) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSADecrypt) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *CryptoAsymApiReqRSADecrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

type CryptoAsymApiRespRSADecrypt struct {
	PlainText []byte `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (m *CryptoAsymApiRespRSADecrypt) Reset()         { *m = CryptoAsymApiRespRSADecrypt{} }
func (m *CryptoAsymApiRespRSADecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSADecrypt) ProtoMessage()    {}
func (*CryptoAsymApiRespRSADecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{136}
}

func (m *CryptoAsymApiRespRSADecrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

// RSA CRT Decryption
type CryptoAsymApiReqRSACRTDecrypt struct {
	KeySize    uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	P          []byte `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
	Q          []byte `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Dp         []byte `protobuf:"bytes,4,opt,name=dp,proto3" json:"dp,omitempty"`
	Dq         []byte `protobuf:"bytes,5,opt,name=dq,proto3" json:"dq,omitempty"`
	Qinv       []byte `protobuf:"bytes,6,opt,name=qinv,proto3" json:"qinv,omitempty"`
	CipherText []byte `protobuf:"bytes,7,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
	KeyIdx     int32  `protobuf:"varint,8,opt,name=key_idx,json=keyIdx,proto3" json:"key_idx,omitempty"`
	AsyncEn    bool   `protobuf:"varint,9,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSACRTDecrypt) Reset()         { *m = CryptoAsymApiReqRSACRTDecrypt{} }
func (m *CryptoAsymApiReqRSACRTDecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSACRTDecrypt) ProtoMessage()    {}
func (*CryptoAsymApiReqRSACRTDecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{137}
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetDp() []byte {
	if m != nil {
		return m.Dp
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetDq() []byte {
	if m != nil {
		return m.Dq
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetQinv() []byte {
	if m != nil {
		return m.Qinv
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetCipherText() []byte {
	if m != nil {
		return m.CipherText
	}
	return nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqRSACRTDecrypt) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSACRTDecrypt struct {
	PlainText []byte `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
}

func (m *CryptoAsymApiRespRSACRTDecrypt) Reset()         { *m = CryptoAsymApiRespRSACRTDecrypt{} }
func (m *CryptoAsymApiRespRSACRTDecrypt) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSACRTDecrypt) ProtoMessage()    {}
func (*CryptoAsymApiRespRSACRTDecrypt) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{138}
}

func (m *CryptoAsymApiRespRSACRTDecrypt) GetPlainText() []byte {
	if m != nil {
		return m.PlainText
	}
	return nil
}

// Asymmetric Private Key Setup
// Temp API as a workaround until securemon is ready
type CryptoAsymApiReqSetupPrivateKey struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *CryptoAsymApiReqSetupPrivateKey) Reset()         { *m = CryptoAsymApiReqSetupPrivateKey{} }
func (m *CryptoAsymApiReqSetupPrivateKey) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupPrivateKey) ProtoMessage()    {}
func (*CryptoAsymApiReqSetupPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{139}
}

func (m *CryptoAsymApiReqSetupPrivateKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CryptoAsymApiRespECDSAKeyInfo struct {
	SignKeyIdx int32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx,proto3" json:"sign_key_idx,omitempty"`
}

func (m *CryptoAsymApiRespECDSAKeyInfo) Reset()         { *m = CryptoAsymApiRespECDSAKeyInfo{} }
func (m *CryptoAsymApiRespECDSAKeyInfo) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespECDSAKeyInfo) ProtoMessage()    {}
func (*CryptoAsymApiRespECDSAKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{140}
}

func (m *CryptoAsymApiRespECDSAKeyInfo) GetSignKeyIdx() int32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

type CryptoAsymApiRespRSAKeyInfo struct {
	SignKeyIdx    int32 `protobuf:"varint,1,opt,name=sign_key_idx,json=signKeyIdx,proto3" json:"sign_key_idx,omitempty"`
	DecryptKeyIdx int32 `protobuf:"varint,2,opt,name=decrypt_key_idx,json=decryptKeyIdx,proto3" json:"decrypt_key_idx,omitempty"`
}

func (m *CryptoAsymApiRespRSAKeyInfo) Reset()         { *m = CryptoAsymApiRespRSAKeyInfo{} }
func (m *CryptoAsymApiRespRSAKeyInfo) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSAKeyInfo) ProtoMessage()    {}
func (*CryptoAsymApiRespRSAKeyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{141}
}

func (m *CryptoAsymApiRespRSAKeyInfo) GetSignKeyIdx() int32 {
	if m != nil {
		return m.SignKeyIdx
	}
	return 0
}

func (m *CryptoAsymApiRespRSAKeyInfo) GetDecryptKeyIdx() int32 {
	if m != nil {
		return m.DecryptKeyIdx
	}
	return 0
}

type CryptoAsymApiRespSetupPrivateKey struct {
	KeyType CryptoAsymKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=types.CryptoAsymKeyType" json:"key_type,omitempty"`
	// Types that are valid to be assigned to KeyInfo:
	//	*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo
	//	*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo
	KeyInfo isCryptoAsymApiRespSetupPrivateKey_KeyInfo `protobuf_oneof:"KeyInfo"`
}

func (m *CryptoAsymApiRespSetupPrivateKey) Reset()         { *m = CryptoAsymApiRespSetupPrivateKey{} }
func (m *CryptoAsymApiRespSetupPrivateKey) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupPrivateKey) ProtoMessage()    {}
func (*CryptoAsymApiRespSetupPrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{142}
}

type isCryptoAsymApiRespSetupPrivateKey_KeyInfo interface {
	isCryptoAsymApiRespSetupPrivateKey_KeyInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo struct {
	EcdsaKeyInfo *CryptoAsymApiRespECDSAKeyInfo `protobuf:"bytes,2,opt,name=ecdsa_key_info,json=ecdsaKeyInfo,oneof"`
}
type CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo struct {
	RsaKeyInfo *CryptoAsymApiRespRSAKeyInfo `protobuf:"bytes,3,opt,name=rsa_key_info,json=rsaKeyInfo,oneof"`
}

func (*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo() {}
func (*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo()   {}

func (m *CryptoAsymApiRespSetupPrivateKey) GetKeyInfo() isCryptoAsymApiRespSetupPrivateKey_KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetEcdsaKeyInfo() *CryptoAsymApiRespECDSAKeyInfo {
	if x, ok := m.GetKeyInfo().(*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo); ok {
		return x.EcdsaKeyInfo
	}
	return nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) GetRsaKeyInfo() *CryptoAsymApiRespRSAKeyInfo {
	if x, ok := m.GetKeyInfo().(*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo); ok {
		return x.RsaKeyInfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoAsymApiRespSetupPrivateKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoAsymApiRespSetupPrivateKey_OneofMarshaler, _CryptoAsymApiRespSetupPrivateKey_OneofUnmarshaler, _CryptoAsymApiRespSetupPrivateKey_OneofSizer, []interface{}{
		(*CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo)(nil),
		(*CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo)(nil),
	}
}

func _CryptoAsymApiRespSetupPrivateKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	// KeyInfo
	switch x := m.KeyInfo.(type) {
	case *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaKeyInfo); err != nil {
			return err
		}
	case *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaKeyInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoAsymApiRespSetupPrivateKey.KeyInfo has unexpected type %T", x)
	}
	return nil
}

func _CryptoAsymApiRespSetupPrivateKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	switch tag {
	case 2: // KeyInfo.ecdsa_key_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECDSAKeyInfo)
		err := b.DecodeMessage(msg)
		m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo{msg}
		return true, err
	case 3: // KeyInfo.rsa_key_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSAKeyInfo)
		err := b.DecodeMessage(msg)
		m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoAsymApiRespSetupPrivateKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoAsymApiRespSetupPrivateKey)
	// KeyInfo
	switch x := m.KeyInfo.(type) {
	case *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo:
		s := proto.Size(x.EcdsaKeyInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo:
		s := proto.Size(x.RsaKeyInfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Certificate Setup
type CryptoAsymApiReqSetupCert struct {
	UpdateType UpdateType `protobuf:"varint,1,opt,name=update_type,json=updateType,proto3,enum=internal.UpdateType" json:"update_type,omitempty"`
	CertId     int32      `protobuf:"varint,2,opt,name=cert_id,json=certId,proto3" json:"cert_id,omitempty"`
	Body       string     `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	NextCertId int32      `protobuf:"varint,5,opt,name=next_cert_id,json=nextCertId,proto3" json:"next_cert_id,omitempty"`
}

func (m *CryptoAsymApiReqSetupCert) Reset()         { *m = CryptoAsymApiReqSetupCert{} }
func (m *CryptoAsymApiReqSetupCert) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupCert) ProtoMessage()    {}
func (*CryptoAsymApiReqSetupCert) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{143}
}

func (m *CryptoAsymApiReqSetupCert) GetUpdateType() UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return UpdateType_ADD_UPDATE
}

func (m *CryptoAsymApiReqSetupCert) GetCertId() int32 {
	if m != nil {
		return m.CertId
	}
	return 0
}

func (m *CryptoAsymApiReqSetupCert) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *CryptoAsymApiReqSetupCert) GetNextCertId() int32 {
	if m != nil {
		return m.NextCertId
	}
	return 0
}

type CryptoAsymApiRespSetupCert struct {
}

func (m *CryptoAsymApiRespSetupCert) Reset()         { *m = CryptoAsymApiRespSetupCert{} }
func (m *CryptoAsymApiRespSetupCert) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupCert) ProtoMessage()    {}
func (*CryptoAsymApiRespSetupCert) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{144}
}

// Asymmetric Private Key Setup - key elements
type CryptoAsymRsaKey struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	N       []byte `protobuf:"bytes,2,opt,name=n,proto3" json:"n,omitempty"`
	E       []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	D       []byte `protobuf:"bytes,4,opt,name=d,proto3" json:"d,omitempty"`
}

func (m *CryptoAsymRsaKey) Reset()                    { *m = CryptoAsymRsaKey{} }
func (m *CryptoAsymRsaKey) String() string            { return proto.CompactTextString(m) }
func (*CryptoAsymRsaKey) ProtoMessage()               {}
func (*CryptoAsymRsaKey) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{145} }

func (m *CryptoAsymRsaKey) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymRsaKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *CryptoAsymRsaKey) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymRsaKey) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

type CryptoAsymApiReqSetupPrivateKeyEx struct {
	KeyType CryptoAsymKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=types.CryptoAsymKeyType" json:"key_type,omitempty"`
	// Types that are valid to be assigned to Key:
	//	*CryptoAsymApiReqSetupPrivateKeyEx_RsaKey
	Key isCryptoAsymApiReqSetupPrivateKeyEx_Key `protobuf_oneof:"Key"`
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) Reset()         { *m = CryptoAsymApiReqSetupPrivateKeyEx{} }
func (m *CryptoAsymApiReqSetupPrivateKeyEx) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqSetupPrivateKeyEx) ProtoMessage()    {}
func (*CryptoAsymApiReqSetupPrivateKeyEx) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{146}
}

type isCryptoAsymApiReqSetupPrivateKeyEx_Key interface {
	isCryptoAsymApiReqSetupPrivateKeyEx_Key()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CryptoAsymApiReqSetupPrivateKeyEx_RsaKey struct {
	RsaKey *CryptoAsymRsaKey `protobuf:"bytes,2,opt,name=rsa_key,json=rsaKey,oneof"`
}

func (*CryptoAsymApiReqSetupPrivateKeyEx_RsaKey) isCryptoAsymApiReqSetupPrivateKeyEx_Key() {}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) GetKey() isCryptoAsymApiReqSetupPrivateKeyEx_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) GetKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) GetRsaKey() *CryptoAsymRsaKey {
	if x, ok := m.GetKey().(*CryptoAsymApiReqSetupPrivateKeyEx_RsaKey); ok {
		return x.RsaKey
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoAsymApiReqSetupPrivateKeyEx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoAsymApiReqSetupPrivateKeyEx_OneofMarshaler, _CryptoAsymApiReqSetupPrivateKeyEx_OneofUnmarshaler, _CryptoAsymApiReqSetupPrivateKeyEx_OneofSizer, []interface{}{
		(*CryptoAsymApiReqSetupPrivateKeyEx_RsaKey)(nil),
	}
}

func _CryptoAsymApiReqSetupPrivateKeyEx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoAsymApiReqSetupPrivateKeyEx)
	// Key
	switch x := m.Key.(type) {
	case *CryptoAsymApiReqSetupPrivateKeyEx_RsaKey:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaKey); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoAsymApiReqSetupPrivateKeyEx.Key has unexpected type %T", x)
	}
	return nil
}

func _CryptoAsymApiReqSetupPrivateKeyEx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoAsymApiReqSetupPrivateKeyEx)
	switch tag {
	case 2: // Key.rsa_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymRsaKey)
		err := b.DecodeMessage(msg)
		m.Key = &CryptoAsymApiReqSetupPrivateKeyEx_RsaKey{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoAsymApiReqSetupPrivateKeyEx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoAsymApiReqSetupPrivateKeyEx)
	// Key
	switch x := m.Key.(type) {
	case *CryptoAsymApiReqSetupPrivateKeyEx_RsaKey:
		s := proto.Size(x.RsaKey)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoAsymApiRespSetupPrivateKeyEx struct {
	KeyType CryptoAsymKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=types.CryptoAsymKeyType" json:"key_type,omitempty"`
	KeyIdx  int32             `protobuf:"varint,2,opt,name=key_idx,json=keyIdx,proto3" json:"key_idx,omitempty"`
}

func (m *CryptoAsymApiRespSetupPrivateKeyEx) Reset()         { *m = CryptoAsymApiRespSetupPrivateKeyEx{} }
func (m *CryptoAsymApiRespSetupPrivateKeyEx) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespSetupPrivateKeyEx) ProtoMessage()    {}
func (*CryptoAsymApiRespSetupPrivateKeyEx) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{147}
}

func (m *CryptoAsymApiRespSetupPrivateKeyEx) GetKeyType() CryptoAsymKeyType {
	if m != nil {
		return m.KeyType
	}
	return CryptoAsymKeyType_CRYPTO_ASYM_KEY_TYPE_ECDSA
}

func (m *CryptoAsymApiRespSetupPrivateKeyEx) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

// RSA Signature Generation
type CryptoAsymApiReqRSASignatureGen struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	ModN    []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	D       []byte `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	H       []byte `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	KeyIdx  int32  `protobuf:"varint,5,opt,name=key_idx,json=keyIdx,proto3" json:"key_idx,omitempty"`
	AsyncEn bool   `protobuf:"varint,6,opt,name=async_en,json=asyncEn,proto3" json:"async_en,omitempty"`
}

func (m *CryptoAsymApiReqRSASignatureGen) Reset()         { *m = CryptoAsymApiReqRSASignatureGen{} }
func (m *CryptoAsymApiReqRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiReqRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{148}
}

func (m *CryptoAsymApiReqRSASignatureGen) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureGen) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetD() []byte {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureGen) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureGen) GetAsyncEn() bool {
	if m != nil {
		return m.AsyncEn
	}
	return false
}

type CryptoAsymApiRespRSASignatureGen struct {
	S []byte `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespRSASignatureGen) Reset()         { *m = CryptoAsymApiRespRSASignatureGen{} }
func (m *CryptoAsymApiRespRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiRespRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{149}
}

func (m *CryptoAsymApiRespRSASignatureGen) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// RSA Signature Verification
type CryptoAsymApiReqRSASignatureVerify struct {
	KeySize uint32 `protobuf:"varint,1,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	ModN    []byte `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E       []byte `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	H       []byte `protobuf:"bytes,4,opt,name=h,proto3" json:"h,omitempty"`
	S       []byte `protobuf:"bytes,5,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiReqRSASignatureVerify) Reset()         { *m = CryptoAsymApiReqRSASignatureVerify{} }
func (m *CryptoAsymApiReqRSASignatureVerify) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqRSASignatureVerify) ProtoMessage()    {}
func (*CryptoAsymApiReqRSASignatureVerify) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{150}
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// Crypto Hash digest generate request
type CryptoSymmApiReqHashGenerate struct {
	Hashtype  CryptoApiHashType `protobuf:"varint,1,opt,name=hashtype,proto3,enum=internal.CryptoApiHashType" json:"hashtype,omitempty"`
	Key       []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeyLen    int32             `protobuf:"varint,3,opt,name=key_len,json=keyLen,proto3" json:"key_len,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataLen   int32             `protobuf:"varint,5,opt,name=data_len,json=dataLen,proto3" json:"data_len,omitempty"`
	DigestLen int32             `protobuf:"varint,6,opt,name=digest_len,json=digestLen,proto3" json:"digest_len,omitempty"`
}

func (m *CryptoSymmApiReqHashGenerate) Reset()         { *m = CryptoSymmApiReqHashGenerate{} }
func (m *CryptoSymmApiReqHashGenerate) String() string { return proto.CompactTextString(m) }
func (*CryptoSymmApiReqHashGenerate) ProtoMessage()    {}
func (*CryptoSymmApiReqHashGenerate) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{151}
}

func (m *CryptoSymmApiReqHashGenerate) GetHashtype() CryptoApiHashType {
	if m != nil {
		return m.Hashtype
	}
	return CryptoApiHashType_none
}

func (m *CryptoSymmApiReqHashGenerate) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoSymmApiReqHashGenerate) GetKeyLen() int32 {
	if m != nil {
		return m.KeyLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashGenerate) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CryptoSymmApiReqHashGenerate) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashGenerate) GetDigestLen() int32 {
	if m != nil {
		return m.DigestLen
	}
	return 0
}

type CryptoSymmApiRespHashGenerate struct {
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *CryptoSymmApiRespHashGenerate) Reset()         { *m = CryptoSymmApiRespHashGenerate{} }
func (m *CryptoSymmApiRespHashGenerate) String() string { return proto.CompactTextString(m) }
func (*CryptoSymmApiRespHashGenerate) ProtoMessage()    {}
func (*CryptoSymmApiRespHashGenerate) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{152}
}

func (m *CryptoSymmApiRespHashGenerate) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// Crypto Hash digest verify request
type CryptoSymmApiReqHashVerify struct {
	Hashtype  CryptoApiHashType `protobuf:"varint,1,opt,name=hashtype,proto3,enum=internal.CryptoApiHashType" json:"hashtype,omitempty"`
	Key       []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	KeyLen    int32             `protobuf:"varint,3,opt,name=key_len,json=keyLen,proto3" json:"key_len,omitempty"`
	Data      []byte            `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	DataLen   int32             `protobuf:"varint,5,opt,name=data_len,json=dataLen,proto3" json:"data_len,omitempty"`
	Digest    []byte            `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
	DigestLen int32             `protobuf:"varint,7,opt,name=digest_len,json=digestLen,proto3" json:"digest_len,omitempty"`
}

func (m *CryptoSymmApiReqHashVerify) Reset()         { *m = CryptoSymmApiReqHashVerify{} }
func (m *CryptoSymmApiReqHashVerify) String() string { return proto.CompactTextString(m) }
func (*CryptoSymmApiReqHashVerify) ProtoMessage()    {}
func (*CryptoSymmApiReqHashVerify) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{153}
}

func (m *CryptoSymmApiReqHashVerify) GetHashtype() CryptoApiHashType {
	if m != nil {
		return m.Hashtype
	}
	return CryptoApiHashType_none
}

func (m *CryptoSymmApiReqHashVerify) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetKeyLen() int32 {
	if m != nil {
		return m.KeyLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashVerify) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetDataLen() int32 {
	if m != nil {
		return m.DataLen
	}
	return 0
}

func (m *CryptoSymmApiReqHashVerify) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *CryptoSymmApiReqHashVerify) GetDigestLen() int32 {
	if m != nil {
		return m.DigestLen
	}
	return 0
}

// FIPS RSA Signature Generation
type CryptoAsymApiReqFIPSRSASignatureGen struct {
	KeyIdx    int32              `protobuf:"varint,1,opt,name=key_idx,json=keyIdx,proto3" json:"key_idx,omitempty"`
	ModN      []byte             `protobuf:"bytes,2,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E         []byte             `protobuf:"bytes,3,opt,name=e,proto3" json:"e,omitempty"`
	Msg       []byte             `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	HashType  HashType           `protobuf:"varint,5,opt,name=hash_type,json=hashType,proto3,enum=types.HashType" json:"hash_type,omitempty"`
	SigScheme RSASignatureScheme `protobuf:"varint,6,opt,name=sig_scheme,json=sigScheme,proto3,enum=types.RSASignatureScheme" json:"sig_scheme,omitempty"`
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) Reset()         { *m = CryptoAsymApiReqFIPSRSASignatureGen{} }
func (m *CryptoAsymApiReqFIPSRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqFIPSRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiReqFIPSRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{154}
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetKeyIdx() int32 {
	if m != nil {
		return m.KeyIdx
	}
	return 0
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetHashType() HashType {
	if m != nil {
		return m.HashType
	}
	return HashType_SHA1
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) GetSigScheme() RSASignatureScheme {
	if m != nil {
		return m.SigScheme
	}
	return RSASignatureScheme_RSASSA_PSS
}

type CryptoAsymApiRespFIPSRSASignatureGen struct {
	S []byte `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
}

func (m *CryptoAsymApiRespFIPSRSASignatureGen) Reset()         { *m = CryptoAsymApiRespFIPSRSASignatureGen{} }
func (m *CryptoAsymApiRespFIPSRSASignatureGen) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiRespFIPSRSASignatureGen) ProtoMessage()    {}
func (*CryptoAsymApiRespFIPSRSASignatureGen) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{155}
}

func (m *CryptoAsymApiRespFIPSRSASignatureGen) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

// FIPS RSA Signature Verification
type CryptoAsymApiReqFIPSRSASignatureVerify struct {
	ModN      []byte             `protobuf:"bytes,1,opt,name=mod_n,json=modN,proto3" json:"mod_n,omitempty"`
	E         []byte             `protobuf:"bytes,2,opt,name=e,proto3" json:"e,omitempty"`
	Msg       []byte             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	S         []byte             `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	HashType  HashType           `protobuf:"varint,5,opt,name=hash_type,json=hashType,proto3,enum=types.HashType" json:"hash_type,omitempty"`
	SigScheme RSASignatureScheme `protobuf:"varint,6,opt,name=sig_scheme,json=sigScheme,proto3,enum=types.RSASignatureScheme" json:"sig_scheme,omitempty"`
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) Reset() {
	*m = CryptoAsymApiReqFIPSRSASignatureVerify{}
}
func (m *CryptoAsymApiReqFIPSRSASignatureVerify) String() string { return proto.CompactTextString(m) }
func (*CryptoAsymApiReqFIPSRSASignatureVerify) ProtoMessage()    {}
func (*CryptoAsymApiReqFIPSRSASignatureVerify) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{156}
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetModN() []byte {
	if m != nil {
		return m.ModN
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetHashType() HashType {
	if m != nil {
		return m.HashType
	}
	return HashType_SHA1
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) GetSigScheme() RSASignatureScheme {
	if m != nil {
		return m.SigScheme
	}
	return RSASignatureScheme_RSASSA_PSS
}

type CryptoApiRequest struct {
	ApiType CryptoApiType `protobuf:"varint,1,opt,name=api_type,json=apiType,proto3,enum=internal.CryptoApiType" json:"api_type,omitempty"`
	// Types that are valid to be assigned to CryptoApiReq:
	//	*CryptoApiRequest_EccPointMulFp
	//	*CryptoApiRequest_EcdsaSigGenFp
	//	*CryptoApiRequest_EcdsaSigVerifyFp
	//	*CryptoApiRequest_RsaEncrypt
	//	*CryptoApiRequest_RsaDecrypt
	//	*CryptoApiRequest_RsaCrtDecrypt
	//	*CryptoApiRequest_HashGenerate
	//	*CryptoApiRequest_HashVerify
	//	*CryptoApiRequest_RsaSigGen
	//	*CryptoApiRequest_RsaSigVerify
	//	*CryptoApiRequest_SetupPrivKey
	//	*CryptoApiRequest_SetupCert
	//	*CryptoApiRequest_SetupPrivKeyEx
	//	*CryptoApiRequest_FipsRsaSigGen
	//	*CryptoApiRequest_FipsRsaSigVerify
	CryptoApiReq isCryptoApiRequest_CryptoApiReq `protobuf_oneof:"CryptoApiReq"`
}

func (m *CryptoApiRequest) Reset()                    { *m = CryptoApiRequest{} }
func (m *CryptoApiRequest) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiRequest) ProtoMessage()               {}
func (*CryptoApiRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{157} }

type isCryptoApiRequest_CryptoApiReq interface {
	isCryptoApiRequest_CryptoApiReq()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CryptoApiRequest_EccPointMulFp struct {
	EccPointMulFp *CryptoAsymApiReqECCPointMulFp `protobuf:"bytes,2,opt,name=ecc_point_mul_fp,json=eccPointMulFp,oneof"`
}
type CryptoApiRequest_EcdsaSigGenFp struct {
	EcdsaSigGenFp *CryptoAsymApiReqECDSASignatureGenFp `protobuf:"bytes,3,opt,name=ecdsa_sig_gen_fp,json=ecdsaSigGenFp,oneof"`
}
type CryptoApiRequest_EcdsaSigVerifyFp struct {
	EcdsaSigVerifyFp *CryptoAsymApiReqECDSASignatureVerifyFp `protobuf:"bytes,4,opt,name=ecdsa_sig_verify_fp,json=ecdsaSigVerifyFp,oneof"`
}
type CryptoApiRequest_RsaEncrypt struct {
	RsaEncrypt *CryptoAsymApiReqRSAEncrypt `protobuf:"bytes,5,opt,name=rsa_encrypt,json=rsaEncrypt,oneof"`
}
type CryptoApiRequest_RsaDecrypt struct {
	RsaDecrypt *CryptoAsymApiReqRSADecrypt `protobuf:"bytes,6,opt,name=rsa_decrypt,json=rsaDecrypt,oneof"`
}
type CryptoApiRequest_RsaCrtDecrypt struct {
	RsaCrtDecrypt *CryptoAsymApiReqRSACRTDecrypt `protobuf:"bytes,7,opt,name=rsa_crt_decrypt,json=rsaCrtDecrypt,oneof"`
}
type CryptoApiRequest_HashGenerate struct {
	HashGenerate *CryptoSymmApiReqHashGenerate `protobuf:"bytes,8,opt,name=hash_generate,json=hashGenerate,oneof"`
}
type CryptoApiRequest_HashVerify struct {
	HashVerify *CryptoSymmApiReqHashVerify `protobuf:"bytes,9,opt,name=hash_verify,json=hashVerify,oneof"`
}
type CryptoApiRequest_RsaSigGen struct {
	RsaSigGen *CryptoAsymApiReqRSASignatureGen `protobuf:"bytes,10,opt,name=rsa_sig_gen,json=rsaSigGen,oneof"`
}
type CryptoApiRequest_RsaSigVerify struct {
	RsaSigVerify *CryptoAsymApiReqRSASignatureVerify `protobuf:"bytes,11,opt,name=rsa_sig_verify,json=rsaSigVerify,oneof"`
}
type CryptoApiRequest_SetupPrivKey struct {
	SetupPrivKey *CryptoAsymApiReqSetupPrivateKey `protobuf:"bytes,12,opt,name=setup_priv_key,json=setupPrivKey,oneof"`
}
type CryptoApiRequest_SetupCert struct {
	SetupCert *CryptoAsymApiReqSetupCert `protobuf:"bytes,13,opt,name=setup_cert,json=setupCert,oneof"`
}
type CryptoApiRequest_SetupPrivKeyEx struct {
	SetupPrivKeyEx *CryptoAsymApiReqSetupPrivateKeyEx `protobuf:"bytes,14,opt,name=setup_priv_key_ex,json=setupPrivKeyEx,oneof"`
}
type CryptoApiRequest_FipsRsaSigGen struct {
	FipsRsaSigGen *CryptoAsymApiReqFIPSRSASignatureGen `protobuf:"bytes,15,opt,name=fips_rsa_sig_gen,json=fipsRsaSigGen,oneof"`
}
type CryptoApiRequest_FipsRsaSigVerify struct {
	FipsRsaSigVerify *CryptoAsymApiReqFIPSRSASignatureVerify `protobuf:"bytes,16,opt,name=fips_rsa_sig_verify,json=fipsRsaSigVerify,oneof"`
}

func (*CryptoApiRequest_EccPointMulFp) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_EcdsaSigGenFp) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_EcdsaSigVerifyFp) isCryptoApiRequest_CryptoApiReq() {}
func (*CryptoApiRequest_RsaEncrypt) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaDecrypt) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaCrtDecrypt) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_HashGenerate) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_HashVerify) isCryptoApiRequest_CryptoApiReq()       {}
func (*CryptoApiRequest_RsaSigGen) isCryptoApiRequest_CryptoApiReq()        {}
func (*CryptoApiRequest_RsaSigVerify) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_SetupPrivKey) isCryptoApiRequest_CryptoApiReq()     {}
func (*CryptoApiRequest_SetupCert) isCryptoApiRequest_CryptoApiReq()        {}
func (*CryptoApiRequest_SetupPrivKeyEx) isCryptoApiRequest_CryptoApiReq()   {}
func (*CryptoApiRequest_FipsRsaSigGen) isCryptoApiRequest_CryptoApiReq()    {}
func (*CryptoApiRequest_FipsRsaSigVerify) isCryptoApiRequest_CryptoApiReq() {}

func (m *CryptoApiRequest) GetCryptoApiReq() isCryptoApiRequest_CryptoApiReq {
	if m != nil {
		return m.CryptoApiReq
	}
	return nil
}

func (m *CryptoApiRequest) GetApiType() CryptoApiType {
	if m != nil {
		return m.ApiType
	}
	return CryptoApiType_ASYMAPI_ECC_POINT_MUL_FP
}

func (m *CryptoApiRequest) GetEccPointMulFp() *CryptoAsymApiReqECCPointMulFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EccPointMulFp); ok {
		return x.EccPointMulFp
	}
	return nil
}

func (m *CryptoApiRequest) GetEcdsaSigGenFp() *CryptoAsymApiReqECDSASignatureGenFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EcdsaSigGenFp); ok {
		return x.EcdsaSigGenFp
	}
	return nil
}

func (m *CryptoApiRequest) GetEcdsaSigVerifyFp() *CryptoAsymApiReqECDSASignatureVerifyFp {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_EcdsaSigVerifyFp); ok {
		return x.EcdsaSigVerifyFp
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaEncrypt() *CryptoAsymApiReqRSAEncrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaEncrypt); ok {
		return x.RsaEncrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaDecrypt() *CryptoAsymApiReqRSADecrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaDecrypt); ok {
		return x.RsaDecrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaCrtDecrypt() *CryptoAsymApiReqRSACRTDecrypt {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaCrtDecrypt); ok {
		return x.RsaCrtDecrypt
	}
	return nil
}

func (m *CryptoApiRequest) GetHashGenerate() *CryptoSymmApiReqHashGenerate {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_HashGenerate); ok {
		return x.HashGenerate
	}
	return nil
}

func (m *CryptoApiRequest) GetHashVerify() *CryptoSymmApiReqHashVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_HashVerify); ok {
		return x.HashVerify
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaSigGen() *CryptoAsymApiReqRSASignatureGen {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaSigGen); ok {
		return x.RsaSigGen
	}
	return nil
}

func (m *CryptoApiRequest) GetRsaSigVerify() *CryptoAsymApiReqRSASignatureVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_RsaSigVerify); ok {
		return x.RsaSigVerify
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupPrivKey() *CryptoAsymApiReqSetupPrivateKey {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupPrivKey); ok {
		return x.SetupPrivKey
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupCert() *CryptoAsymApiReqSetupCert {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupCert); ok {
		return x.SetupCert
	}
	return nil
}

func (m *CryptoApiRequest) GetSetupPrivKeyEx() *CryptoAsymApiReqSetupPrivateKeyEx {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_SetupPrivKeyEx); ok {
		return x.SetupPrivKeyEx
	}
	return nil
}

func (m *CryptoApiRequest) GetFipsRsaSigGen() *CryptoAsymApiReqFIPSRSASignatureGen {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_FipsRsaSigGen); ok {
		return x.FipsRsaSigGen
	}
	return nil
}

func (m *CryptoApiRequest) GetFipsRsaSigVerify() *CryptoAsymApiReqFIPSRSASignatureVerify {
	if x, ok := m.GetCryptoApiReq().(*CryptoApiRequest_FipsRsaSigVerify); ok {
		return x.FipsRsaSigVerify
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoApiRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoApiRequest_OneofMarshaler, _CryptoApiRequest_OneofUnmarshaler, _CryptoApiRequest_OneofSizer, []interface{}{
		(*CryptoApiRequest_EccPointMulFp)(nil),
		(*CryptoApiRequest_EcdsaSigGenFp)(nil),
		(*CryptoApiRequest_EcdsaSigVerifyFp)(nil),
		(*CryptoApiRequest_RsaEncrypt)(nil),
		(*CryptoApiRequest_RsaDecrypt)(nil),
		(*CryptoApiRequest_RsaCrtDecrypt)(nil),
		(*CryptoApiRequest_HashGenerate)(nil),
		(*CryptoApiRequest_HashVerify)(nil),
		(*CryptoApiRequest_RsaSigGen)(nil),
		(*CryptoApiRequest_RsaSigVerify)(nil),
		(*CryptoApiRequest_SetupPrivKey)(nil),
		(*CryptoApiRequest_SetupCert)(nil),
		(*CryptoApiRequest_SetupPrivKeyEx)(nil),
		(*CryptoApiRequest_FipsRsaSigGen)(nil),
		(*CryptoApiRequest_FipsRsaSigVerify)(nil),
	}
}

func _CryptoApiRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoApiRequest)
	// CryptoApiReq
	switch x := m.CryptoApiReq.(type) {
	case *CryptoApiRequest_EccPointMulFp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EccPointMulFp); err != nil {
			return err
		}
	case *CryptoApiRequest_EcdsaSigGenFp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigGenFp); err != nil {
			return err
		}
	case *CryptoApiRequest_EcdsaSigVerifyFp:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigVerifyFp); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaEncrypt:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaEncrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaDecrypt:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaDecrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaCrtDecrypt:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaCrtDecrypt); err != nil {
			return err
		}
	case *CryptoApiRequest_HashGenerate:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashGenerate); err != nil {
			return err
		}
	case *CryptoApiRequest_HashVerify:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashVerify); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaSigGen:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigGen); err != nil {
			return err
		}
	case *CryptoApiRequest_RsaSigVerify:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigVerify); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupPrivKey:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKey); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupCert:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupCert); err != nil {
			return err
		}
	case *CryptoApiRequest_SetupPrivKeyEx:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKeyEx); err != nil {
			return err
		}
	case *CryptoApiRequest_FipsRsaSigGen:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FipsRsaSigGen); err != nil {
			return err
		}
	case *CryptoApiRequest_FipsRsaSigVerify:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FipsRsaSigVerify); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoApiRequest.CryptoApiReq has unexpected type %T", x)
	}
	return nil
}

func _CryptoApiRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoApiRequest)
	switch tag {
	case 2: // CryptoApiReq.ecc_point_mul_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECCPointMulFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EccPointMulFp{msg}
		return true, err
	case 3: // CryptoApiReq.ecdsa_sig_gen_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECDSASignatureGenFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EcdsaSigGenFp{msg}
		return true, err
	case 4: // CryptoApiReq.ecdsa_sig_verify_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqECDSASignatureVerifyFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_EcdsaSigVerifyFp{msg}
		return true, err
	case 5: // CryptoApiReq.rsa_encrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSAEncrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaEncrypt{msg}
		return true, err
	case 6: // CryptoApiReq.rsa_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSADecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaDecrypt{msg}
		return true, err
	case 7: // CryptoApiReq.rsa_crt_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSACRTDecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaCrtDecrypt{msg}
		return true, err
	case 8: // CryptoApiReq.hash_generate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiReqHashGenerate)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_HashGenerate{msg}
		return true, err
	case 9: // CryptoApiReq.hash_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiReqHashVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_HashVerify{msg}
		return true, err
	case 10: // CryptoApiReq.rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaSigGen{msg}
		return true, err
	case 11: // CryptoApiReq.rsa_sig_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqRSASignatureVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_RsaSigVerify{msg}
		return true, err
	case 12: // CryptoApiReq.setup_priv_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupPrivateKey)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupPrivKey{msg}
		return true, err
	case 13: // CryptoApiReq.setup_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupCert)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupCert{msg}
		return true, err
	case 14: // CryptoApiReq.setup_priv_key_ex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqSetupPrivateKeyEx)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_SetupPrivKeyEx{msg}
		return true, err
	case 15: // CryptoApiReq.fips_rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqFIPSRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_FipsRsaSigGen{msg}
		return true, err
	case 16: // CryptoApiReq.fips_rsa_sig_verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiReqFIPSRSASignatureVerify)
		err := b.DecodeMessage(msg)
		m.CryptoApiReq = &CryptoApiRequest_FipsRsaSigVerify{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoApiRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoApiRequest)
	// CryptoApiReq
	switch x := m.CryptoApiReq.(type) {
	case *CryptoApiRequest_EccPointMulFp:
		s := proto.Size(x.EccPointMulFp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_EcdsaSigGenFp:
		s := proto.Size(x.EcdsaSigGenFp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_EcdsaSigVerifyFp:
		s := proto.Size(x.EcdsaSigVerifyFp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaEncrypt:
		s := proto.Size(x.RsaEncrypt)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaDecrypt:
		s := proto.Size(x.RsaDecrypt)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaCrtDecrypt:
		s := proto.Size(x.RsaCrtDecrypt)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_HashGenerate:
		s := proto.Size(x.HashGenerate)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_HashVerify:
		s := proto.Size(x.HashVerify)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaSigGen:
		s := proto.Size(x.RsaSigGen)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_RsaSigVerify:
		s := proto.Size(x.RsaSigVerify)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupPrivKey:
		s := proto.Size(x.SetupPrivKey)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupCert:
		s := proto.Size(x.SetupCert)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_SetupPrivKeyEx:
		s := proto.Size(x.SetupPrivKeyEx)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_FipsRsaSigGen:
		s := proto.Size(x.FipsRsaSigGen)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiRequest_FipsRsaSigVerify:
		s := proto.Size(x.FipsRsaSigVerify)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoApiResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	// Types that are valid to be assigned to CryptoApiResp:
	//	*CryptoApiResponse_EccPointMulFp
	//	*CryptoApiResponse_EcdsaSigGenFp
	//	*CryptoApiResponse_RsaEncrypt
	//	*CryptoApiResponse_RsaDecrypt
	//	*CryptoApiResponse_RsaCrtDecrypt
	//	*CryptoApiResponse_HashGenerate
	//	*CryptoApiResponse_RsaSigGen
	//	*CryptoApiResponse_SetupPrivKey
	//	*CryptoApiResponse_SetupCert
	//	*CryptoApiResponse_SetupPrivKeyEx
	//	*CryptoApiResponse_FipsRsaSigGen
	CryptoApiResp isCryptoApiResponse_CryptoApiResp `protobuf_oneof:"CryptoApiResp"`
}

func (m *CryptoApiResponse) Reset()                    { *m = CryptoApiResponse{} }
func (m *CryptoApiResponse) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiResponse) ProtoMessage()               {}
func (*CryptoApiResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{158} }

type isCryptoApiResponse_CryptoApiResp interface {
	isCryptoApiResponse_CryptoApiResp()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CryptoApiResponse_EccPointMulFp struct {
	EccPointMulFp *CryptoAsymApiRespECCPointMulFp `protobuf:"bytes,2,opt,name=ecc_point_mul_fp,json=eccPointMulFp,oneof"`
}
type CryptoApiResponse_EcdsaSigGenFp struct {
	EcdsaSigGenFp *CryptoAsymApiRespECDSASignatureGenFp `protobuf:"bytes,3,opt,name=ecdsa_sig_gen_fp,json=ecdsaSigGenFp,oneof"`
}
type CryptoApiResponse_RsaEncrypt struct {
	RsaEncrypt *CryptoAsymApiRespRSAEncrypt `protobuf:"bytes,4,opt,name=rsa_encrypt,json=rsaEncrypt,oneof"`
}
type CryptoApiResponse_RsaDecrypt struct {
	RsaDecrypt *CryptoAsymApiRespRSADecrypt `protobuf:"bytes,5,opt,name=rsa_decrypt,json=rsaDecrypt,oneof"`
}
type CryptoApiResponse_RsaCrtDecrypt struct {
	RsaCrtDecrypt *CryptoAsymApiRespRSACRTDecrypt `protobuf:"bytes,6,opt,name=rsa_crt_decrypt,json=rsaCrtDecrypt,oneof"`
}
type CryptoApiResponse_HashGenerate struct {
	HashGenerate *CryptoSymmApiRespHashGenerate `protobuf:"bytes,7,opt,name=hash_generate,json=hashGenerate,oneof"`
}
type CryptoApiResponse_RsaSigGen struct {
	RsaSigGen *CryptoAsymApiRespRSASignatureGen `protobuf:"bytes,8,opt,name=rsa_sig_gen,json=rsaSigGen,oneof"`
}
type CryptoApiResponse_SetupPrivKey struct {
	SetupPrivKey *CryptoAsymApiRespSetupPrivateKey `protobuf:"bytes,9,opt,name=setup_priv_key,json=setupPrivKey,oneof"`
}
type CryptoApiResponse_SetupCert struct {
	SetupCert *CryptoAsymApiRespSetupCert `protobuf:"bytes,10,opt,name=setup_cert,json=setupCert,oneof"`
}
type CryptoApiResponse_SetupPrivKeyEx struct {
	SetupPrivKeyEx *CryptoAsymApiRespSetupPrivateKeyEx `protobuf:"bytes,11,opt,name=setup_priv_key_ex,json=setupPrivKeyEx,oneof"`
}
type CryptoApiResponse_FipsRsaSigGen struct {
	FipsRsaSigGen *CryptoAsymApiRespFIPSRSASignatureGen `protobuf:"bytes,12,opt,name=fips_rsa_sig_gen,json=fipsRsaSigGen,oneof"`
}

func (*CryptoApiResponse_EccPointMulFp) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_EcdsaSigGenFp) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_RsaEncrypt) isCryptoApiResponse_CryptoApiResp()     {}
func (*CryptoApiResponse_RsaDecrypt) isCryptoApiResponse_CryptoApiResp()     {}
func (*CryptoApiResponse_RsaCrtDecrypt) isCryptoApiResponse_CryptoApiResp()  {}
func (*CryptoApiResponse_HashGenerate) isCryptoApiResponse_CryptoApiResp()   {}
func (*CryptoApiResponse_RsaSigGen) isCryptoApiResponse_CryptoApiResp()      {}
func (*CryptoApiResponse_SetupPrivKey) isCryptoApiResponse_CryptoApiResp()   {}
func (*CryptoApiResponse_SetupCert) isCryptoApiResponse_CryptoApiResp()      {}
func (*CryptoApiResponse_SetupPrivKeyEx) isCryptoApiResponse_CryptoApiResp() {}
func (*CryptoApiResponse_FipsRsaSigGen) isCryptoApiResponse_CryptoApiResp()  {}

func (m *CryptoApiResponse) GetCryptoApiResp() isCryptoApiResponse_CryptoApiResp {
	if m != nil {
		return m.CryptoApiResp
	}
	return nil
}

func (m *CryptoApiResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *CryptoApiResponse) GetEccPointMulFp() *CryptoAsymApiRespECCPointMulFp {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_EccPointMulFp); ok {
		return x.EccPointMulFp
	}
	return nil
}

func (m *CryptoApiResponse) GetEcdsaSigGenFp() *CryptoAsymApiRespECDSASignatureGenFp {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_EcdsaSigGenFp); ok {
		return x.EcdsaSigGenFp
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaEncrypt() *CryptoAsymApiRespRSAEncrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaEncrypt); ok {
		return x.RsaEncrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaDecrypt() *CryptoAsymApiRespRSADecrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaDecrypt); ok {
		return x.RsaDecrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaCrtDecrypt() *CryptoAsymApiRespRSACRTDecrypt {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaCrtDecrypt); ok {
		return x.RsaCrtDecrypt
	}
	return nil
}

func (m *CryptoApiResponse) GetHashGenerate() *CryptoSymmApiRespHashGenerate {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_HashGenerate); ok {
		return x.HashGenerate
	}
	return nil
}

func (m *CryptoApiResponse) GetRsaSigGen() *CryptoAsymApiRespRSASignatureGen {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_RsaSigGen); ok {
		return x.RsaSigGen
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupPrivKey() *CryptoAsymApiRespSetupPrivateKey {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupPrivKey); ok {
		return x.SetupPrivKey
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupCert() *CryptoAsymApiRespSetupCert {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupCert); ok {
		return x.SetupCert
	}
	return nil
}

func (m *CryptoApiResponse) GetSetupPrivKeyEx() *CryptoAsymApiRespSetupPrivateKeyEx {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_SetupPrivKeyEx); ok {
		return x.SetupPrivKeyEx
	}
	return nil
}

func (m *CryptoApiResponse) GetFipsRsaSigGen() *CryptoAsymApiRespFIPSRSASignatureGen {
	if x, ok := m.GetCryptoApiResp().(*CryptoApiResponse_FipsRsaSigGen); ok {
		return x.FipsRsaSigGen
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptoApiResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptoApiResponse_OneofMarshaler, _CryptoApiResponse_OneofUnmarshaler, _CryptoApiResponse_OneofSizer, []interface{}{
		(*CryptoApiResponse_EccPointMulFp)(nil),
		(*CryptoApiResponse_EcdsaSigGenFp)(nil),
		(*CryptoApiResponse_RsaEncrypt)(nil),
		(*CryptoApiResponse_RsaDecrypt)(nil),
		(*CryptoApiResponse_RsaCrtDecrypt)(nil),
		(*CryptoApiResponse_HashGenerate)(nil),
		(*CryptoApiResponse_RsaSigGen)(nil),
		(*CryptoApiResponse_SetupPrivKey)(nil),
		(*CryptoApiResponse_SetupCert)(nil),
		(*CryptoApiResponse_SetupPrivKeyEx)(nil),
		(*CryptoApiResponse_FipsRsaSigGen)(nil),
	}
}

func _CryptoApiResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptoApiResponse)
	// CryptoApiResp
	switch x := m.CryptoApiResp.(type) {
	case *CryptoApiResponse_EccPointMulFp:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EccPointMulFp); err != nil {
			return err
		}
	case *CryptoApiResponse_EcdsaSigGenFp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcdsaSigGenFp); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaEncrypt:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaEncrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaDecrypt:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaDecrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaCrtDecrypt:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaCrtDecrypt); err != nil {
			return err
		}
	case *CryptoApiResponse_HashGenerate:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashGenerate); err != nil {
			return err
		}
	case *CryptoApiResponse_RsaSigGen:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RsaSigGen); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupPrivKey:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKey); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupCert:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupCert); err != nil {
			return err
		}
	case *CryptoApiResponse_SetupPrivKeyEx:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetupPrivKeyEx); err != nil {
			return err
		}
	case *CryptoApiResponse_FipsRsaSigGen:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FipsRsaSigGen); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptoApiResponse.CryptoApiResp has unexpected type %T", x)
	}
	return nil
}

func _CryptoApiResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptoApiResponse)
	switch tag {
	case 2: // CryptoApiResp.ecc_point_mul_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECCPointMulFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_EccPointMulFp{msg}
		return true, err
	case 3: // CryptoApiResp.ecdsa_sig_gen_fp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespECDSASignatureGenFp)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_EcdsaSigGenFp{msg}
		return true, err
	case 4: // CryptoApiResp.rsa_encrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSAEncrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaEncrypt{msg}
		return true, err
	case 5: // CryptoApiResp.rsa_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSADecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaDecrypt{msg}
		return true, err
	case 6: // CryptoApiResp.rsa_crt_decrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSACRTDecrypt)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaCrtDecrypt{msg}
		return true, err
	case 7: // CryptoApiResp.hash_generate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoSymmApiRespHashGenerate)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_HashGenerate{msg}
		return true, err
	case 8: // CryptoApiResp.rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_RsaSigGen{msg}
		return true, err
	case 9: // CryptoApiResp.setup_priv_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupPrivateKey)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupPrivKey{msg}
		return true, err
	case 10: // CryptoApiResp.setup_cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupCert)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupCert{msg}
		return true, err
	case 11: // CryptoApiResp.setup_priv_key_ex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespSetupPrivateKeyEx)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_SetupPrivKeyEx{msg}
		return true, err
	case 12: // CryptoApiResp.fips_rsa_sig_gen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CryptoAsymApiRespFIPSRSASignatureGen)
		err := b.DecodeMessage(msg)
		m.CryptoApiResp = &CryptoApiResponse_FipsRsaSigGen{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptoApiResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptoApiResponse)
	// CryptoApiResp
	switch x := m.CryptoApiResp.(type) {
	case *CryptoApiResponse_EccPointMulFp:
		s := proto.Size(x.EccPointMulFp)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_EcdsaSigGenFp:
		s := proto.Size(x.EcdsaSigGenFp)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaEncrypt:
		s := proto.Size(x.RsaEncrypt)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaDecrypt:
		s := proto.Size(x.RsaDecrypt)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaCrtDecrypt:
		s := proto.Size(x.RsaCrtDecrypt)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_HashGenerate:
		s := proto.Size(x.HashGenerate)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_RsaSigGen:
		s := proto.Size(x.RsaSigGen)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupPrivKey:
		s := proto.Size(x.SetupPrivKey)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupCert:
		s := proto.Size(x.SetupCert)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_SetupPrivKeyEx:
		s := proto.Size(x.SetupPrivKeyEx)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptoApiResponse_FipsRsaSigGen:
		s := proto.Size(x.FipsRsaSigGen)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CryptoApiRequestMsg struct {
	Request []*CryptoApiRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *CryptoApiRequestMsg) Reset()                    { *m = CryptoApiRequestMsg{} }
func (m *CryptoApiRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiRequestMsg) ProtoMessage()               {}
func (*CryptoApiRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{159} }

func (m *CryptoApiRequestMsg) GetRequest() []*CryptoApiRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type CryptoApiResponseMsg struct {
	Response []*CryptoApiResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *CryptoApiResponseMsg) Reset()                    { *m = CryptoApiResponseMsg{} }
func (m *CryptoApiResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*CryptoApiResponseMsg) ProtoMessage()               {}
func (*CryptoApiResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{160} }

func (m *CryptoApiResponseMsg) GetResponse() []*CryptoApiResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type DescrAolRequest struct {
	DescrAolHandle uint64 `protobuf:"fixed64,1,opt,name=descr_aol_handle,json=descrAolHandle,proto3" json:"descr_aol_handle,omitempty"`
}

func (m *DescrAolRequest) Reset()                    { *m = DescrAolRequest{} }
func (m *DescrAolRequest) String() string            { return proto.CompactTextString(m) }
func (*DescrAolRequest) ProtoMessage()               {}
func (*DescrAolRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{161} }

func (m *DescrAolRequest) GetDescrAolHandle() uint64 {
	if m != nil {
		return m.DescrAolHandle
	}
	return 0
}

type DescrAolRequestMsg struct {
	Request []*DescrAolRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *DescrAolRequestMsg) Reset()                    { *m = DescrAolRequestMsg{} }
func (m *DescrAolRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*DescrAolRequestMsg) ProtoMessage()               {}
func (*DescrAolRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{162} }

func (m *DescrAolRequestMsg) GetRequest() []*DescrAolRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type DescrAolSpec struct {
	ApiStatus          ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	DescrAolHandle     uint64    `protobuf:"fixed64,2,opt,name=descr_aol_handle,json=descrAolHandle,proto3" json:"descr_aol_handle,omitempty"`
	Address1           uint64    `protobuf:"fixed64,3,opt,name=Address1,proto3" json:"Address1,omitempty"`
	Offset1            uint32    `protobuf:"fixed32,4,opt,name=Offset1,proto3" json:"Offset1,omitempty"`
	Length1            uint32    `protobuf:"fixed32,5,opt,name=Length1,proto3" json:"Length1,omitempty"`
	Address2           uint64    `protobuf:"fixed64,6,opt,name=Address2,proto3" json:"Address2,omitempty"`
	Offset2            uint32    `protobuf:"fixed32,7,opt,name=Offset2,proto3" json:"Offset2,omitempty"`
	Length2            uint32    `protobuf:"fixed32,8,opt,name=Length2,proto3" json:"Length2,omitempty"`
	Address3           uint64    `protobuf:"fixed64,9,opt,name=Address3,proto3" json:"Address3,omitempty"`
	Offset3            uint32    `protobuf:"fixed32,10,opt,name=Offset3,proto3" json:"Offset3,omitempty"`
	Length3            uint32    `protobuf:"fixed32,11,opt,name=Length3,proto3" json:"Length3,omitempty"`
	NextDescrAolHandle uint64    `protobuf:"fixed64,12,opt,name=next_descr_aol_handle,json=nextDescrAolHandle,proto3" json:"next_descr_aol_handle,omitempty"`
}

func (m *DescrAolSpec) Reset()                    { *m = DescrAolSpec{} }
func (m *DescrAolSpec) String() string            { return proto.CompactTextString(m) }
func (*DescrAolSpec) ProtoMessage()               {}
func (*DescrAolSpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{163} }

func (m *DescrAolSpec) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DescrAolSpec) GetDescrAolHandle() uint64 {
	if m != nil {
		return m.DescrAolHandle
	}
	return 0
}

func (m *DescrAolSpec) GetAddress1() uint64 {
	if m != nil {
		return m.Address1
	}
	return 0
}

func (m *DescrAolSpec) GetOffset1() uint32 {
	if m != nil {
		return m.Offset1
	}
	return 0
}

func (m *DescrAolSpec) GetLength1() uint32 {
	if m != nil {
		return m.Length1
	}
	return 0
}

func (m *DescrAolSpec) GetAddress2() uint64 {
	if m != nil {
		return m.Address2
	}
	return 0
}

func (m *DescrAolSpec) GetOffset2() uint32 {
	if m != nil {
		return m.Offset2
	}
	return 0
}

func (m *DescrAolSpec) GetLength2() uint32 {
	if m != nil {
		return m.Length2
	}
	return 0
}

func (m *DescrAolSpec) GetAddress3() uint64 {
	if m != nil {
		return m.Address3
	}
	return 0
}

func (m *DescrAolSpec) GetOffset3() uint32 {
	if m != nil {
		return m.Offset3
	}
	return 0
}

func (m *DescrAolSpec) GetLength3() uint32 {
	if m != nil {
		return m.Length3
	}
	return 0
}

func (m *DescrAolSpec) GetNextDescrAolHandle() uint64 {
	if m != nil {
		return m.NextDescrAolHandle
	}
	return 0
}

type DescrAolResponseMsg struct {
	Response []*DescrAolSpec `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *DescrAolResponseMsg) Reset()                    { *m = DescrAolResponseMsg{} }
func (m *DescrAolResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*DescrAolResponseMsg) ProtoMessage()               {}
func (*DescrAolResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{164} }

func (m *DescrAolResponseMsg) GetResponse() []*DescrAolSpec {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxycCbKeyHandle is used to operate on a proxyccb either by its key or handle
type ProxycCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*ProxycCbKeyHandle_ProxyccbId
	//	*ProxycCbKeyHandle_ProxyccbHandle
	KeyOrHandle isProxycCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *ProxycCbKeyHandle) Reset()                    { *m = ProxycCbKeyHandle{} }
func (m *ProxycCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbKeyHandle) ProtoMessage()               {}
func (*ProxycCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{165} }

type isProxycCbKeyHandle_KeyOrHandle interface {
	isProxycCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxycCbKeyHandle_ProxyccbId struct {
	ProxyccbId uint32 `protobuf:"varint,1,opt,name=proxyccb_id,json=proxyccbId,proto3,oneof"`
}
type ProxycCbKeyHandle_ProxyccbHandle struct {
	ProxyccbHandle uint64 `protobuf:"fixed64,2,opt,name=proxyccb_handle,json=proxyccbHandle,proto3,oneof"`
}

func (*ProxycCbKeyHandle_ProxyccbId) isProxycCbKeyHandle_KeyOrHandle()     {}
func (*ProxycCbKeyHandle_ProxyccbHandle) isProxycCbKeyHandle_KeyOrHandle() {}

func (m *ProxycCbKeyHandle) GetKeyOrHandle() isProxycCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxycCbKeyHandle) GetProxyccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*ProxycCbKeyHandle_ProxyccbId); ok {
		return x.ProxyccbId
	}
	return 0
}

func (m *ProxycCbKeyHandle) GetProxyccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*ProxycCbKeyHandle_ProxyccbHandle); ok {
		return x.ProxyccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxycCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxycCbKeyHandle_OneofMarshaler, _ProxycCbKeyHandle_OneofUnmarshaler, _ProxycCbKeyHandle_OneofSizer, []interface{}{
		(*ProxycCbKeyHandle_ProxyccbId)(nil),
		(*ProxycCbKeyHandle_ProxyccbHandle)(nil),
	}
}

func _ProxycCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxycCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxycCbKeyHandle_ProxyccbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ProxyccbId))
	case *ProxycCbKeyHandle_ProxyccbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.ProxyccbHandle))
	case nil:
	default:
		return fmt.Errorf("ProxycCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _ProxycCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxycCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.proxyccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.proxyccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProxycCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxycCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxycCbKeyHandle_ProxyccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProxyccbId))
	case *ProxycCbKeyHandle_ProxyccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProxycCbSpec captures all the proxyccb level configuration
type ProxycCbSpec struct {
	KeyOrHandle             *ProxycCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi                      uint32             `protobuf:"varint,2,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci                      uint32             `protobuf:"varint,3,opt,name=ci,proto3" json:"ci,omitempty"`
	ProxyccbFlags           uint32             `protobuf:"varint,4,opt,name=proxyccb_flags,json=proxyccbFlags,proto3" json:"proxyccb_flags,omitempty"`
	MyTxqBase               uint64             `protobuf:"varint,5,opt,name=my_txq_base,json=myTxqBase,proto3" json:"my_txq_base,omitempty"`
	MyTxqRingSizeShift      uint32             `protobuf:"varint,6,opt,name=my_txq_ring_size_shift,json=myTxqRingSizeShift,proto3" json:"my_txq_ring_size_shift,omitempty"`
	MyTxqEntrySizeShift     uint32             `protobuf:"varint,7,opt,name=my_txq_entry_size_shift,json=myTxqEntrySizeShift,proto3" json:"my_txq_entry_size_shift,omitempty"`
	ChainTxqBase            uint64             `protobuf:"varint,8,opt,name=chain_txq_base,json=chainTxqBase,proto3" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint64             `protobuf:"varint,9,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr,proto3" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32             `protobuf:"varint,10,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift,proto3" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32             `protobuf:"varint,11,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift,proto3" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqLif             uint32             `protobuf:"varint,12,opt,name=chain_txq_lif,json=chainTxqLif,proto3" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32             `protobuf:"varint,13,opt,name=chain_txq_qtype,json=chainTxqQtype,proto3" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32             `protobuf:"varint,14,opt,name=chain_txq_qid,json=chainTxqQid,proto3" json:"chain_txq_qid,omitempty"`
	ChainTxqRing            uint32             `protobuf:"varint,15,opt,name=chain_txq_ring,json=chainTxqRing,proto3" json:"chain_txq_ring,omitempty"`
	RedirSpan               uint32             `protobuf:"varint,16,opt,name=redir_span,json=redirSpan,proto3" json:"redir_span,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsChain   uint64 `protobuf:"varint,17,opt,name=stat_pkts_chain,json=statPktsChain,proto3" json:"stat_pkts_chain,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,18,opt,name=stat_pkts_discard,json=statPktsDiscard,proto3" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady      uint32 `protobuf:"varint,19,opt,name=stat_cb_not_ready,json=statCbNotReady,proto3" json:"stat_cb_not_ready,omitempty"`
	StatMyTxqEmpty      uint32 `protobuf:"varint,20,opt,name=stat_my_txq_empty,json=statMyTxqEmpty,proto3" json:"stat_my_txq_empty,omitempty"`
	StatAolErr          uint32 `protobuf:"varint,21,opt,name=stat_aol_err,json=statAolErr,proto3" json:"stat_aol_err,omitempty"`
	StatTxqFull         uint32 `protobuf:"varint,22,opt,name=stat_txq_full,json=statTxqFull,proto3" json:"stat_txq_full,omitempty"`
	StatDescSemFreeFull uint32 `protobuf:"varint,23,opt,name=stat_desc_sem_free_full,json=statDescSemFreeFull,proto3" json:"stat_desc_sem_free_full,omitempty"`
	StatPageSemFreeFull uint32 `protobuf:"varint,24,opt,name=stat_page_sem_free_full,json=statPageSemFreeFull,proto3" json:"stat_page_sem_free_full,omitempty"`
}

func (m *ProxycCbSpec) Reset()                    { *m = ProxycCbSpec{} }
func (m *ProxycCbSpec) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbSpec) ProtoMessage()               {}
func (*ProxycCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{166} }

func (m *ProxycCbSpec) GetKeyOrHandle() *ProxycCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxycCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *ProxycCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *ProxycCbSpec) GetProxyccbFlags() uint32 {
	if m != nil {
		return m.ProxyccbFlags
	}
	return 0
}

func (m *ProxycCbSpec) GetMyTxqBase() uint64 {
	if m != nil {
		return m.MyTxqBase
	}
	return 0
}

func (m *ProxycCbSpec) GetMyTxqRingSizeShift() uint32 {
	if m != nil {
		return m.MyTxqRingSizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetMyTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.MyTxqEntrySizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqBase() uint64 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *ProxycCbSpec) GetChainTxqRing() uint32 {
	if m != nil {
		return m.ChainTxqRing
	}
	return 0
}

func (m *ProxycCbSpec) GetRedirSpan() uint32 {
	if m != nil {
		return m.RedirSpan
	}
	return 0
}

func (m *ProxycCbSpec) GetStatPktsChain() uint64 {
	if m != nil {
		return m.StatPktsChain
	}
	return 0
}

func (m *ProxycCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *ProxycCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *ProxycCbSpec) GetStatMyTxqEmpty() uint32 {
	if m != nil {
		return m.StatMyTxqEmpty
	}
	return 0
}

func (m *ProxycCbSpec) GetStatAolErr() uint32 {
	if m != nil {
		return m.StatAolErr
	}
	return 0
}

func (m *ProxycCbSpec) GetStatTxqFull() uint32 {
	if m != nil {
		return m.StatTxqFull
	}
	return 0
}

func (m *ProxycCbSpec) GetStatDescSemFreeFull() uint32 {
	if m != nil {
		return m.StatDescSemFreeFull
	}
	return 0
}

func (m *ProxycCbSpec) GetStatPageSemFreeFull() uint32 {
	if m != nil {
		return m.StatPageSemFreeFull
	}
	return 0
}

// ProxycCbRequestMsg is batched add or modify proxyccb request
type ProxycCbRequestMsg struct {
	Request []*ProxycCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxycCbRequestMsg) Reset()                    { *m = ProxycCbRequestMsg{} }
func (m *ProxycCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbRequestMsg) ProtoMessage()               {}
func (*ProxycCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{167} }

func (m *ProxycCbRequestMsg) GetRequest() []*ProxycCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxycCbStatus is the operational status of a given proxyccb
type ProxycCbStatus struct {
	ProxyccbHandle uint64 `protobuf:"fixed64,1,opt,name=proxyccb_handle,json=proxyccbHandle,proto3" json:"proxyccb_handle,omitempty"`
}

func (m *ProxycCbStatus) Reset()                    { *m = ProxycCbStatus{} }
func (m *ProxycCbStatus) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbStatus) ProtoMessage()               {}
func (*ProxycCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{168} }

func (m *ProxycCbStatus) GetProxyccbHandle() uint64 {
	if m != nil {
		return m.ProxyccbHandle
	}
	return 0
}

// ProxycCbResponse is response to ProxycCbSpec
type ProxycCbResponse struct {
	ApiStatus      ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProxyccbStatus *ProxycCbStatus `protobuf:"bytes,2,opt,name=proxyccb_status,json=proxyccbStatus" json:"proxyccb_status,omitempty"`
}

func (m *ProxycCbResponse) Reset()                    { *m = ProxycCbResponse{} }
func (m *ProxycCbResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbResponse) ProtoMessage()               {}
func (*ProxycCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{169} }

func (m *ProxycCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxycCbResponse) GetProxyccbStatus() *ProxycCbStatus {
	if m != nil {
		return m.ProxyccbStatus
	}
	return nil
}

// ProxycCbResponseMsg is batched response to ProxycCbRequestMsg
type ProxycCbResponseMsg struct {
	Response []*ProxycCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxycCbResponseMsg) Reset()                    { *m = ProxycCbResponseMsg{} }
func (m *ProxycCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbResponseMsg) ProtoMessage()               {}
func (*ProxycCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{170} }

func (m *ProxycCbResponseMsg) GetResponse() []*ProxycCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxycCbDeleteRequest is used to delete a proxyccb
type ProxycCbDeleteRequest struct {
	KeyOrHandle *ProxycCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxycCbDeleteRequest) Reset()                    { *m = ProxycCbDeleteRequest{} }
func (m *ProxycCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbDeleteRequest) ProtoMessage()               {}
func (*ProxycCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{171} }

func (m *ProxycCbDeleteRequest) GetKeyOrHandle() *ProxycCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxycCbDeleteRequestMsg is used to delete a batch of proxyccbs
type ProxycCbDeleteRequestMsg struct {
	Request []*ProxycCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxycCbDeleteRequestMsg) Reset()         { *m = ProxycCbDeleteRequestMsg{} }
func (m *ProxycCbDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*ProxycCbDeleteRequestMsg) ProtoMessage()    {}
func (*ProxycCbDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{172}
}

func (m *ProxycCbDeleteRequestMsg) GetRequest() []*ProxycCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxycCbDeleteResponseMsg is batched response to ProxycCbDeleteRequestMsg
type ProxycCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxycCbDeleteResponseMsg) Reset()         { *m = ProxycCbDeleteResponseMsg{} }
func (m *ProxycCbDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ProxycCbDeleteResponseMsg) ProtoMessage()    {}
func (*ProxycCbDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{173}
}

func (m *ProxycCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// ProxycCbGetRequest is used to get information about a proxyccb
type ProxycCbGetRequest struct {
	KeyOrHandle *ProxycCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxycCbGetRequest) Reset()                    { *m = ProxycCbGetRequest{} }
func (m *ProxycCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetRequest) ProtoMessage()               {}
func (*ProxycCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{174} }

func (m *ProxycCbGetRequest) GetKeyOrHandle() *ProxycCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxycCbGetRequestMsg is batched GET requests for proxyccbs
type ProxycCbGetRequestMsg struct {
	Request []*ProxycCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxycCbGetRequestMsg) Reset()                    { *m = ProxycCbGetRequestMsg{} }
func (m *ProxycCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetRequestMsg) ProtoMessage()               {}
func (*ProxycCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{175} }

func (m *ProxycCbGetRequestMsg) GetRequest() []*ProxycCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxycCbStats is the statistics object for each proxyccb
type ProxycCbStats struct {
}

func (m *ProxycCbStats) Reset()                    { *m = ProxycCbStats{} }
func (m *ProxycCbStats) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbStats) ProtoMessage()               {}
func (*ProxycCbStats) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{176} }

// ProxycCbGetResponse captures all the information about a proxyccb
// only if api_status indicates success, other fields are valid
type ProxycCbGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *ProxycCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *ProxycCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *ProxycCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *ProxycCbGetResponse) Reset()                    { *m = ProxycCbGetResponse{} }
func (m *ProxycCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetResponse) ProtoMessage()               {}
func (*ProxycCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{177} }

func (m *ProxycCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxycCbGetResponse) GetSpec() *ProxycCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxycCbGetResponse) GetStatus() *ProxycCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProxycCbGetResponse) GetStats() *ProxycCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ProxycCbGetResponseMsg is batched response to ProxycCbGetRequestMsg
type ProxycCbGetResponseMsg struct {
	Response []*ProxycCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxycCbGetResponseMsg) Reset()                    { *m = ProxycCbGetResponseMsg{} }
func (m *ProxycCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxycCbGetResponseMsg) ProtoMessage()               {}
func (*ProxycCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{178} }

func (m *ProxycCbGetResponseMsg) GetResponse() []*ProxycCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxyrCbKeyHandle is used to operate on a proxyrcb either by its key or handle
type ProxyrCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*ProxyrCbKeyHandle_ProxyrcbId
	//	*ProxyrCbKeyHandle_ProxyrcbHandle
	KeyOrHandle isProxyrCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *ProxyrCbKeyHandle) Reset()                    { *m = ProxyrCbKeyHandle{} }
func (m *ProxyrCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbKeyHandle) ProtoMessage()               {}
func (*ProxyrCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{179} }

type isProxyrCbKeyHandle_KeyOrHandle interface {
	isProxyrCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ProxyrCbKeyHandle_ProxyrcbId struct {
	ProxyrcbId uint32 `protobuf:"varint,1,opt,name=proxyrcb_id,json=proxyrcbId,proto3,oneof"`
}
type ProxyrCbKeyHandle_ProxyrcbHandle struct {
	ProxyrcbHandle uint64 `protobuf:"fixed64,2,opt,name=proxyrcb_handle,json=proxyrcbHandle,proto3,oneof"`
}

func (*ProxyrCbKeyHandle_ProxyrcbId) isProxyrCbKeyHandle_KeyOrHandle()     {}
func (*ProxyrCbKeyHandle_ProxyrcbHandle) isProxyrCbKeyHandle_KeyOrHandle() {}

func (m *ProxyrCbKeyHandle) GetKeyOrHandle() isProxyrCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxyrCbKeyHandle) GetProxyrcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*ProxyrCbKeyHandle_ProxyrcbId); ok {
		return x.ProxyrcbId
	}
	return 0
}

func (m *ProxyrCbKeyHandle) GetProxyrcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*ProxyrCbKeyHandle_ProxyrcbHandle); ok {
		return x.ProxyrcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxyrCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxyrCbKeyHandle_OneofMarshaler, _ProxyrCbKeyHandle_OneofUnmarshaler, _ProxyrCbKeyHandle_OneofSizer, []interface{}{
		(*ProxyrCbKeyHandle_ProxyrcbId)(nil),
		(*ProxyrCbKeyHandle_ProxyrcbHandle)(nil),
	}
}

func _ProxyrCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxyrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyrCbKeyHandle_ProxyrcbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ProxyrcbId))
	case *ProxyrCbKeyHandle_ProxyrcbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.ProxyrcbHandle))
	case nil:
	default:
		return fmt.Errorf("ProxyrCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _ProxyrCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxyrCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.proxyrcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.proxyrcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _ProxyrCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxyrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *ProxyrCbKeyHandle_ProxyrcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ProxyrcbId))
	case *ProxyrCbKeyHandle_ProxyrcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProxyrCbSpec captures all the proxyrcb level configuration
type ProxyrCbSpec struct {
	Meta                    *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *ProxyrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi                      uint32             `protobuf:"varint,3,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci                      uint32             `protobuf:"varint,4,opt,name=ci,proto3" json:"ci,omitempty"`
	ProxyrcbFlags           uint32             `protobuf:"varint,5,opt,name=proxyrcb_flags,json=proxyrcbFlags,proto3" json:"proxyrcb_flags,omitempty"`
	MyTxqBase               uint64             `protobuf:"varint,6,opt,name=my_txq_base,json=myTxqBase,proto3" json:"my_txq_base,omitempty"`
	MyTxqRingSizeShift      uint32             `protobuf:"varint,7,opt,name=my_txq_ring_size_shift,json=myTxqRingSizeShift,proto3" json:"my_txq_ring_size_shift,omitempty"`
	MyTxqEntrySizeShift     uint32             `protobuf:"varint,8,opt,name=my_txq_entry_size_shift,json=myTxqEntrySizeShift,proto3" json:"my_txq_entry_size_shift,omitempty"`
	ChainRxqBase            uint64             `protobuf:"varint,9,opt,name=chain_rxq_base,json=chainRxqBase,proto3" json:"chain_rxq_base,omitempty"`
	ChainRxqRingIndicesAddr uint64             `protobuf:"varint,10,opt,name=chain_rxq_ring_indices_addr,json=chainRxqRingIndicesAddr,proto3" json:"chain_rxq_ring_indices_addr,omitempty"`
	ChainRxqRingSizeShift   uint32             `protobuf:"varint,11,opt,name=chain_rxq_ring_size_shift,json=chainRxqRingSizeShift,proto3" json:"chain_rxq_ring_size_shift,omitempty"`
	ChainRxqEntrySizeShift  uint32             `protobuf:"varint,12,opt,name=chain_rxq_entry_size_shift,json=chainRxqEntrySizeShift,proto3" json:"chain_rxq_entry_size_shift,omitempty"`
	ChainRxqRingIndexSelect uint32             `protobuf:"varint,13,opt,name=chain_rxq_ring_index_select,json=chainRxqRingIndexSelect,proto3" json:"chain_rxq_ring_index_select,omitempty"`
	RedirSpan               uint32             `protobuf:"varint,14,opt,name=redir_span,json=redirSpan,proto3" json:"redir_span,omitempty"`
	IpSa                    *IPAddress         `protobuf:"bytes,15,opt,name=ip_sa,json=ipSa" json:"ip_sa,omitempty"`
	IpDa                    *IPAddress         `protobuf:"bytes,16,opt,name=ip_da,json=ipDa" json:"ip_da,omitempty"`
	Sport                   uint32             `protobuf:"varint,17,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport                   uint32             `protobuf:"varint,18,opt,name=dport,proto3" json:"dport,omitempty"`
	Vrf                     uint32             `protobuf:"varint,19,opt,name=vrf,proto3" json:"vrf,omitempty"`
	Af                      uint32             `protobuf:"varint,20,opt,name=af,proto3" json:"af,omitempty"`
	IpProto                 IPProtocol         `protobuf:"varint,21,opt,name=ip_proto,json=ipProto,proto3,enum=types.IPProtocol" json:"ip_proto,omitempty"`
	Dir                     uint32             `protobuf:"varint,22,opt,name=dir,proto3" json:"dir,omitempty"`
	Role                    uint32             `protobuf:"varint,23,opt,name=role,proto3" json:"role,omitempty"`
	RevCbId                 uint32             `protobuf:"varint,24,opt,name=rev_cb_id,json=revCbId,proto3" json:"rev_cb_id,omitempty"`
	//
	// 64-bit statistic counters
	StatPktsRedir   uint64 `protobuf:"varint,25,opt,name=stat_pkts_redir,json=statPktsRedir,proto3" json:"stat_pkts_redir,omitempty"`
	StatPktsDiscard uint64 `protobuf:"varint,26,opt,name=stat_pkts_discard,json=statPktsDiscard,proto3" json:"stat_pkts_discard,omitempty"`
	//
	// 32-bit saturating statistic counters
	StatCbNotReady          uint32 `protobuf:"varint,27,opt,name=stat_cb_not_ready,json=statCbNotReady,proto3" json:"stat_cb_not_ready,omitempty"`
	StatNullRingIndicesAddr uint32 `protobuf:"varint,28,opt,name=stat_null_ring_indices_addr,json=statNullRingIndicesAddr,proto3" json:"stat_null_ring_indices_addr,omitempty"`
	StatAolErr              uint32 `protobuf:"varint,29,opt,name=stat_aol_err,json=statAolErr,proto3" json:"stat_aol_err,omitempty"`
	StatRxqFull             uint32 `protobuf:"varint,30,opt,name=stat_rxq_full,json=statRxqFull,proto3" json:"stat_rxq_full,omitempty"`
	StatTxqEmpty            uint32 `protobuf:"varint,31,opt,name=stat_txq_empty,json=statTxqEmpty,proto3" json:"stat_txq_empty,omitempty"`
	StatSemAllocFull        uint32 `protobuf:"varint,32,opt,name=stat_sem_alloc_full,json=statSemAllocFull,proto3" json:"stat_sem_alloc_full,omitempty"`
	StatSemFreeFull         uint32 `protobuf:"varint,33,opt,name=stat_sem_free_full,json=statSemFreeFull,proto3" json:"stat_sem_free_full,omitempty"`
}

func (m *ProxyrCbSpec) Reset()                    { *m = ProxyrCbSpec{} }
func (m *ProxyrCbSpec) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbSpec) ProtoMessage()               {}
func (*ProxyrCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{180} }

func (m *ProxyrCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyrCbSpec) GetKeyOrHandle() *ProxyrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *ProxyrCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *ProxyrCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *ProxyrCbSpec) GetProxyrcbFlags() uint32 {
	if m != nil {
		return m.ProxyrcbFlags
	}
	return 0
}

func (m *ProxyrCbSpec) GetMyTxqBase() uint64 {
	if m != nil {
		return m.MyTxqBase
	}
	return 0
}

func (m *ProxyrCbSpec) GetMyTxqRingSizeShift() uint32 {
	if m != nil {
		return m.MyTxqRingSizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetMyTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.MyTxqEntrySizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqBase() uint64 {
	if m != nil {
		return m.ChainRxqBase
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainRxqRingIndicesAddr
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainRxqRingSizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainRxqEntrySizeShift
	}
	return 0
}

func (m *ProxyrCbSpec) GetChainRxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainRxqRingIndexSelect
	}
	return 0
}

func (m *ProxyrCbSpec) GetRedirSpan() uint32 {
	if m != nil {
		return m.RedirSpan
	}
	return 0
}

func (m *ProxyrCbSpec) GetIpSa() *IPAddress {
	if m != nil {
		return m.IpSa
	}
	return nil
}

func (m *ProxyrCbSpec) GetIpDa() *IPAddress {
	if m != nil {
		return m.IpDa
	}
	return nil
}

func (m *ProxyrCbSpec) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *ProxyrCbSpec) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *ProxyrCbSpec) GetVrf() uint32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

func (m *ProxyrCbSpec) GetAf() uint32 {
	if m != nil {
		return m.Af
	}
	return 0
}

func (m *ProxyrCbSpec) GetIpProto() IPProtocol {
	if m != nil {
		return m.IpProto
	}
	return IPProtocol_IPPROTO_NONE
}

func (m *ProxyrCbSpec) GetDir() uint32 {
	if m != nil {
		return m.Dir
	}
	return 0
}

func (m *ProxyrCbSpec) GetRole() uint32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *ProxyrCbSpec) GetRevCbId() uint32 {
	if m != nil {
		return m.RevCbId
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatPktsRedir() uint64 {
	if m != nil {
		return m.StatPktsRedir
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatPktsDiscard() uint64 {
	if m != nil {
		return m.StatPktsDiscard
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatCbNotReady() uint32 {
	if m != nil {
		return m.StatCbNotReady
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatNullRingIndicesAddr() uint32 {
	if m != nil {
		return m.StatNullRingIndicesAddr
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatAolErr() uint32 {
	if m != nil {
		return m.StatAolErr
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatRxqFull() uint32 {
	if m != nil {
		return m.StatRxqFull
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatTxqEmpty() uint32 {
	if m != nil {
		return m.StatTxqEmpty
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatSemAllocFull() uint32 {
	if m != nil {
		return m.StatSemAllocFull
	}
	return 0
}

func (m *ProxyrCbSpec) GetStatSemFreeFull() uint32 {
	if m != nil {
		return m.StatSemFreeFull
	}
	return 0
}

// ProxyrCbRequestMsg is batched add or modify proxyrcb request
type ProxyrCbRequestMsg struct {
	Request []*ProxyrCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyrCbRequestMsg) Reset()                    { *m = ProxyrCbRequestMsg{} }
func (m *ProxyrCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbRequestMsg) ProtoMessage()               {}
func (*ProxyrCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{181} }

func (m *ProxyrCbRequestMsg) GetRequest() []*ProxyrCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyrCbStatus is the operational status of a given proxyrcb
type ProxyrCbStatus struct {
	ProxyrcbHandle uint64 `protobuf:"fixed64,1,opt,name=proxyrcb_handle,json=proxyrcbHandle,proto3" json:"proxyrcb_handle,omitempty"`
}

func (m *ProxyrCbStatus) Reset()                    { *m = ProxyrCbStatus{} }
func (m *ProxyrCbStatus) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbStatus) ProtoMessage()               {}
func (*ProxyrCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{182} }

func (m *ProxyrCbStatus) GetProxyrcbHandle() uint64 {
	if m != nil {
		return m.ProxyrcbHandle
	}
	return 0
}

// ProxyrCbResponse is response to ProxyrCbSpec
type ProxyrCbResponse struct {
	ApiStatus      ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	ProxyrcbStatus *ProxyrCbStatus `protobuf:"bytes,2,opt,name=proxyrcb_status,json=proxyrcbStatus" json:"proxyrcb_status,omitempty"`
}

func (m *ProxyrCbResponse) Reset()                    { *m = ProxyrCbResponse{} }
func (m *ProxyrCbResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbResponse) ProtoMessage()               {}
func (*ProxyrCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{183} }

func (m *ProxyrCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyrCbResponse) GetProxyrcbStatus() *ProxyrCbStatus {
	if m != nil {
		return m.ProxyrcbStatus
	}
	return nil
}

// ProxyrCbResponseMsg is batched response to ProxyrCbRequestMsg
type ProxyrCbResponseMsg struct {
	Response []*ProxyrCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyrCbResponseMsg) Reset()                    { *m = ProxyrCbResponseMsg{} }
func (m *ProxyrCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbResponseMsg) ProtoMessage()               {}
func (*ProxyrCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{184} }

func (m *ProxyrCbResponseMsg) GetResponse() []*ProxyrCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ProxyrCbDeleteRequest is used to delete a proxyrcb
type ProxyrCbDeleteRequest struct {
	Meta        *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxyrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyrCbDeleteRequest) Reset()                    { *m = ProxyrCbDeleteRequest{} }
func (m *ProxyrCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbDeleteRequest) ProtoMessage()               {}
func (*ProxyrCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{185} }

func (m *ProxyrCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyrCbDeleteRequest) GetKeyOrHandle() *ProxyrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyrCbDeleteRequestMsg is used to delete a batch of proxyrcbs
type ProxyrCbDeleteRequestMsg struct {
	Request []*ProxyrCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyrCbDeleteRequestMsg) Reset()         { *m = ProxyrCbDeleteRequestMsg{} }
func (m *ProxyrCbDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*ProxyrCbDeleteRequestMsg) ProtoMessage()    {}
func (*ProxyrCbDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{186}
}

func (m *ProxyrCbDeleteRequestMsg) GetRequest() []*ProxyrCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyrCbDeleteResponseMsg is batched response to ProxyrCbDeleteRequestMsg
type ProxyrCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *ProxyrCbDeleteResponseMsg) Reset()         { *m = ProxyrCbDeleteResponseMsg{} }
func (m *ProxyrCbDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*ProxyrCbDeleteResponseMsg) ProtoMessage()    {}
func (*ProxyrCbDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{187}
}

func (m *ProxyrCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// ProxyrCbGetRequest is used to get information about a proxyrcb
type ProxyrCbGetRequest struct {
	Meta        *ObjectMeta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *ProxyrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *ProxyrCbGetRequest) Reset()                    { *m = ProxyrCbGetRequest{} }
func (m *ProxyrCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetRequest) ProtoMessage()               {}
func (*ProxyrCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{188} }

func (m *ProxyrCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ProxyrCbGetRequest) GetKeyOrHandle() *ProxyrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ProxyrCbGetRequestMsg is batched GET requests for proxyrcbs
type ProxyrCbGetRequestMsg struct {
	Request []*ProxyrCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ProxyrCbGetRequestMsg) Reset()                    { *m = ProxyrCbGetRequestMsg{} }
func (m *ProxyrCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetRequestMsg) ProtoMessage()               {}
func (*ProxyrCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{189} }

func (m *ProxyrCbGetRequestMsg) GetRequest() []*ProxyrCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ProxyrCbStats is the statistics object for each proxyrcb
type ProxyrCbStats struct {
}

func (m *ProxyrCbStats) Reset()                    { *m = ProxyrCbStats{} }
func (m *ProxyrCbStats) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbStats) ProtoMessage()               {}
func (*ProxyrCbStats) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{190} }

// ProxyrCbGetResponse captures all the information about a proxyrcb
// only if api_status indicates success, other fields are valid
type ProxyrCbGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *ProxyrCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *ProxyrCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *ProxyrCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *ProxyrCbGetResponse) Reset()                    { *m = ProxyrCbGetResponse{} }
func (m *ProxyrCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetResponse) ProtoMessage()               {}
func (*ProxyrCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{191} }

func (m *ProxyrCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ProxyrCbGetResponse) GetSpec() *ProxyrCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProxyrCbGetResponse) GetStatus() *ProxyrCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProxyrCbGetResponse) GetStats() *ProxyrCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ProxyrCbGetResponseMsg is batched response to ProxyrCbGetRequestMsg
type ProxyrCbGetResponseMsg struct {
	Response []*ProxyrCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ProxyrCbGetResponseMsg) Reset()                    { *m = ProxyrCbGetResponseMsg{} }
func (m *ProxyrCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProxyrCbGetResponseMsg) ProtoMessage()               {}
func (*ProxyrCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{192} }

func (m *ProxyrCbGetResponseMsg) GetResponse() []*ProxyrCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawrCbKeyHandle is used to operate on a rawrcb either by its key or handle
type RawrCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*RawrCbKeyHandle_RawrcbId
	//	*RawrCbKeyHandle_RawrcbHandle
	KeyOrHandle isRawrCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *RawrCbKeyHandle) Reset()                    { *m = RawrCbKeyHandle{} }
func (m *RawrCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*RawrCbKeyHandle) ProtoMessage()               {}
func (*RawrCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{193} }

type isRawrCbKeyHandle_KeyOrHandle interface {
	isRawrCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RawrCbKeyHandle_RawrcbId struct {
	RawrcbId uint32 `protobuf:"varint,1,opt,name=rawrcb_id,json=rawrcbId,proto3,oneof"`
}
type RawrCbKeyHandle_RawrcbHandle struct {
	RawrcbHandle uint64 `protobuf:"fixed64,2,opt,name=rawrcb_handle,json=rawrcbHandle,proto3,oneof"`
}

func (*RawrCbKeyHandle_RawrcbId) isRawrCbKeyHandle_KeyOrHandle()     {}
func (*RawrCbKeyHandle_RawrcbHandle) isRawrCbKeyHandle_KeyOrHandle() {}

func (m *RawrCbKeyHandle) GetKeyOrHandle() isRawrCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawrCbKeyHandle) GetRawrcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*RawrCbKeyHandle_RawrcbId); ok {
		return x.RawrcbId
	}
	return 0
}

func (m *RawrCbKeyHandle) GetRawrcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*RawrCbKeyHandle_RawrcbHandle); ok {
		return x.RawrcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RawrCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RawrCbKeyHandle_OneofMarshaler, _RawrCbKeyHandle_OneofUnmarshaler, _RawrCbKeyHandle_OneofSizer, []interface{}{
		(*RawrCbKeyHandle_RawrcbId)(nil),
		(*RawrCbKeyHandle_RawrcbHandle)(nil),
	}
}

func _RawrCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RawrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawrCbKeyHandle_RawrcbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.RawrcbId))
	case *RawrCbKeyHandle_RawrcbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.RawrcbHandle))
	case nil:
	default:
		return fmt.Errorf("RawrCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _RawrCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RawrCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.rawrcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &RawrCbKeyHandle_RawrcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.rawrcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &RawrCbKeyHandle_RawrcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _RawrCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RawrCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawrCbKeyHandle_RawrcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.RawrcbId))
	case *RawrCbKeyHandle_RawrcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RawrCbSpec captures all the rawrcb level configuration
type RawrCbSpec struct {
	Meta                    *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle             *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RawrcbFlags             uint32           `protobuf:"varint,3,opt,name=rawrcb_flags,json=rawrcbFlags,proto3" json:"rawrcb_flags,omitempty"`
	ChainRxqBase            uint64           `protobuf:"varint,4,opt,name=chain_rxq_base,json=chainRxqBase,proto3" json:"chain_rxq_base,omitempty"`
	ChainRxqRingIndicesAddr uint64           `protobuf:"varint,5,opt,name=chain_rxq_ring_indices_addr,json=chainRxqRingIndicesAddr,proto3" json:"chain_rxq_ring_indices_addr,omitempty"`
	ChainRxqRingSizeShift   uint32           `protobuf:"varint,6,opt,name=chain_rxq_ring_size_shift,json=chainRxqRingSizeShift,proto3" json:"chain_rxq_ring_size_shift,omitempty"`
	ChainRxqEntrySizeShift  uint32           `protobuf:"varint,7,opt,name=chain_rxq_entry_size_shift,json=chainRxqEntrySizeShift,proto3" json:"chain_rxq_entry_size_shift,omitempty"`
	ChainRxqRingIndexSelect uint32           `protobuf:"varint,8,opt,name=chain_rxq_ring_index_select,json=chainRxqRingIndexSelect,proto3" json:"chain_rxq_ring_index_select,omitempty"`
	ChainTxqBase            uint64           `protobuf:"varint,9,opt,name=chain_txq_base,json=chainTxqBase,proto3" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint64           `protobuf:"varint,10,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr,proto3" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32           `protobuf:"varint,11,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift,proto3" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32           `protobuf:"varint,12,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift,proto3" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqRingIndexSelect uint32           `protobuf:"varint,13,opt,name=chain_txq_ring_index_select,json=chainTxqRingIndexSelect,proto3" json:"chain_txq_ring_index_select,omitempty"`
	ChainTxqLif             uint32           `protobuf:"varint,14,opt,name=chain_txq_lif,json=chainTxqLif,proto3" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32           `protobuf:"varint,15,opt,name=chain_txq_qtype,json=chainTxqQtype,proto3" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32           `protobuf:"varint,16,opt,name=chain_txq_qid,json=chainTxqQid,proto3" json:"chain_txq_qid,omitempty"`
	CpuId                   uint32           `protobuf:"varint,17,opt,name=cpu_id,json=cpuId,proto3" json:"cpu_id,omitempty"`
	AscqBase                uint64           `protobuf:"varint,18,opt,name=ascq_base,json=ascqBase,proto3" json:"ascq_base,omitempty"`
	AscqSemInfAddr          uint64           `protobuf:"varint,19,opt,name=ascq_sem_inf_addr,json=ascqSemInfAddr,proto3" json:"ascq_sem_inf_addr,omitempty"`
	//
	// 64-bit statistic counters
	RedirPkts          uint64 `protobuf:"varint,20,opt,name=redir_pkts,json=redirPkts,proto3" json:"redir_pkts,omitempty"`
	CbNotReadyDiscards uint64 `protobuf:"varint,21,opt,name=cb_not_ready_discards,json=cbNotReadyDiscards,proto3" json:"cb_not_ready_discards,omitempty"`
	QstateCfgDiscards  uint64 `protobuf:"varint,22,opt,name=qstate_cfg_discards,json=qstateCfgDiscards,proto3" json:"qstate_cfg_discards,omitempty"`
	PktLenDiscards     uint64 `protobuf:"varint,23,opt,name=pkt_len_discards,json=pktLenDiscards,proto3" json:"pkt_len_discards,omitempty"`
	RxqFullDiscards    uint64 `protobuf:"varint,24,opt,name=rxq_full_discards,json=rxqFullDiscards,proto3" json:"rxq_full_discards,omitempty"`
	TxqFullDiscards    uint64 `protobuf:"varint,25,opt,name=txq_full_discards,json=txqFullDiscards,proto3" json:"txq_full_discards,omitempty"`
	PktAllocErrors     uint64 `protobuf:"varint,26,opt,name=pkt_alloc_errors,json=pktAllocErrors,proto3" json:"pkt_alloc_errors,omitempty"`
	PktFreeErrors      uint64 `protobuf:"varint,27,opt,name=pkt_free_errors,json=pktFreeErrors,proto3" json:"pkt_free_errors,omitempty"`
}

func (m *RawrCbSpec) Reset()                    { *m = RawrCbSpec{} }
func (m *RawrCbSpec) String() string            { return proto.CompactTextString(m) }
func (*RawrCbSpec) ProtoMessage()               {}
func (*RawrCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{194} }

func (m *RawrCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbSpec) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawrCbSpec) GetRawrcbFlags() uint32 {
	if m != nil {
		return m.RawrcbFlags
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqBase() uint64 {
	if m != nil {
		return m.ChainRxqBase
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainRxqRingIndicesAddr
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainRxqRingSizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainRxqEntrySizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainRxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainRxqRingIndexSelect
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqBase() uint64 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqRingIndexSelect() uint32 {
	if m != nil {
		return m.ChainTxqRingIndexSelect
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *RawrCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *RawrCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

func (m *RawrCbSpec) GetAscqBase() uint64 {
	if m != nil {
		return m.AscqBase
	}
	return 0
}

func (m *RawrCbSpec) GetAscqSemInfAddr() uint64 {
	if m != nil {
		return m.AscqSemInfAddr
	}
	return 0
}

func (m *RawrCbSpec) GetRedirPkts() uint64 {
	if m != nil {
		return m.RedirPkts
	}
	return 0
}

func (m *RawrCbSpec) GetCbNotReadyDiscards() uint64 {
	if m != nil {
		return m.CbNotReadyDiscards
	}
	return 0
}

func (m *RawrCbSpec) GetQstateCfgDiscards() uint64 {
	if m != nil {
		return m.QstateCfgDiscards
	}
	return 0
}

func (m *RawrCbSpec) GetPktLenDiscards() uint64 {
	if m != nil {
		return m.PktLenDiscards
	}
	return 0
}

func (m *RawrCbSpec) GetRxqFullDiscards() uint64 {
	if m != nil {
		return m.RxqFullDiscards
	}
	return 0
}

func (m *RawrCbSpec) GetTxqFullDiscards() uint64 {
	if m != nil {
		return m.TxqFullDiscards
	}
	return 0
}

func (m *RawrCbSpec) GetPktAllocErrors() uint64 {
	if m != nil {
		return m.PktAllocErrors
	}
	return 0
}

func (m *RawrCbSpec) GetPktFreeErrors() uint64 {
	if m != nil {
		return m.PktFreeErrors
	}
	return 0
}

// RawrCbRequestMsg is batched add or modify rawrcb request
type RawrCbRequestMsg struct {
	Request []*RawrCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbRequestMsg) Reset()                    { *m = RawrCbRequestMsg{} }
func (m *RawrCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbRequestMsg) ProtoMessage()               {}
func (*RawrCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{195} }

func (m *RawrCbRequestMsg) GetRequest() []*RawrCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbStatus is the operational status of a given rawrcb
type RawrCbStatus struct {
	RawrcbHandle uint64 `protobuf:"fixed64,1,opt,name=rawrcb_handle,json=rawrcbHandle,proto3" json:"rawrcb_handle,omitempty"`
}

func (m *RawrCbStatus) Reset()                    { *m = RawrCbStatus{} }
func (m *RawrCbStatus) String() string            { return proto.CompactTextString(m) }
func (*RawrCbStatus) ProtoMessage()               {}
func (*RawrCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{196} }

func (m *RawrCbStatus) GetRawrcbHandle() uint64 {
	if m != nil {
		return m.RawrcbHandle
	}
	return 0
}

// RawrCbResponse is response to RawrCbSpec
type RawrCbResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	RawrcbStatus *RawrCbStatus `protobuf:"bytes,2,opt,name=rawrcb_status,json=rawrcbStatus" json:"rawrcb_status,omitempty"`
}

func (m *RawrCbResponse) Reset()                    { *m = RawrCbResponse{} }
func (m *RawrCbResponse) String() string            { return proto.CompactTextString(m) }
func (*RawrCbResponse) ProtoMessage()               {}
func (*RawrCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{197} }

func (m *RawrCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawrCbResponse) GetRawrcbStatus() *RawrCbStatus {
	if m != nil {
		return m.RawrcbStatus
	}
	return nil
}

// RawrCbResponseMsg is batched response to RawrCbRequestMsg
type RawrCbResponseMsg struct {
	Response []*RawrCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawrCbResponseMsg) Reset()                    { *m = RawrCbResponseMsg{} }
func (m *RawrCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbResponseMsg) ProtoMessage()               {}
func (*RawrCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{198} }

func (m *RawrCbResponseMsg) GetResponse() []*RawrCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawrCbDeleteRequest is used to delete a rawrcb
type RawrCbDeleteRequest struct {
	Meta        *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawrCbDeleteRequest) Reset()                    { *m = RawrCbDeleteRequest{} }
func (m *RawrCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteRequest) ProtoMessage()               {}
func (*RawrCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{199} }

func (m *RawrCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbDeleteRequest) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawrCbDeleteRequestMsg is used to delete a batch of rawrcbs
type RawrCbDeleteRequestMsg struct {
	Request []*RawrCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbDeleteRequestMsg) Reset()                    { *m = RawrCbDeleteRequestMsg{} }
func (m *RawrCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbDeleteRequestMsg) ProtoMessage()               {}
func (*RawrCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{200} }

func (m *RawrCbDeleteRequestMsg) GetRequest() []*RawrCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbDeleteResponseMsg is batched response to RawrCbDeleteRequestMsg
type RawrCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RawrCbDeleteResponseMsg) Reset()         { *m = RawrCbDeleteResponseMsg{} }
func (m *RawrCbDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*RawrCbDeleteResponseMsg) ProtoMessage()    {}
func (*RawrCbDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{201}
}

func (m *RawrCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// RawrCbGetRequest is used to get information about a rawrcb
type RawrCbGetRequest struct {
	Meta        *ObjectMeta      `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *RawrCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawrCbGetRequest) Reset()                    { *m = RawrCbGetRequest{} }
func (m *RawrCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetRequest) ProtoMessage()               {}
func (*RawrCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{202} }

func (m *RawrCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RawrCbGetRequest) GetKeyOrHandle() *RawrCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawrCbGetRequestMsg is batched GET requests for rawrcbs
type RawrCbGetRequestMsg struct {
	Request []*RawrCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawrCbGetRequestMsg) Reset()                    { *m = RawrCbGetRequestMsg{} }
func (m *RawrCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetRequestMsg) ProtoMessage()               {}
func (*RawrCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{203} }

func (m *RawrCbGetRequestMsg) GetRequest() []*RawrCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawrCbStats is the statistics object for each rawrcb
type RawrCbStats struct {
}

func (m *RawrCbStats) Reset()                    { *m = RawrCbStats{} }
func (m *RawrCbStats) String() string            { return proto.CompactTextString(m) }
func (*RawrCbStats) ProtoMessage()               {}
func (*RawrCbStats) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{204} }

// RawrCbGetResponse captures all the information about a rawrcb
// only if api_status indicates success, other fields are valid
type RawrCbGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *RawrCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *RawrCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *RawrCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *RawrCbGetResponse) Reset()                    { *m = RawrCbGetResponse{} }
func (m *RawrCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetResponse) ProtoMessage()               {}
func (*RawrCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{205} }

func (m *RawrCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawrCbGetResponse) GetSpec() *RawrCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *RawrCbGetResponse) GetStatus() *RawrCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RawrCbGetResponse) GetStats() *RawrCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// RawrCbGetResponseMsg is batched response to RawrCbGetRequestMsg
type RawrCbGetResponseMsg struct {
	Response []*RawrCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawrCbGetResponseMsg) Reset()                    { *m = RawrCbGetResponseMsg{} }
func (m *RawrCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawrCbGetResponseMsg) ProtoMessage()               {}
func (*RawrCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{206} }

func (m *RawrCbGetResponseMsg) GetResponse() []*RawrCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawcCbKeyHandle is used to operate on a rawccb either by its key or handle
type RawcCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*RawcCbKeyHandle_RawccbId
	//	*RawcCbKeyHandle_RawccbHandle
	KeyOrHandle isRawcCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *RawcCbKeyHandle) Reset()                    { *m = RawcCbKeyHandle{} }
func (m *RawcCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*RawcCbKeyHandle) ProtoMessage()               {}
func (*RawcCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{207} }

type isRawcCbKeyHandle_KeyOrHandle interface {
	isRawcCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RawcCbKeyHandle_RawccbId struct {
	RawccbId uint32 `protobuf:"varint,1,opt,name=rawccb_id,json=rawccbId,proto3,oneof"`
}
type RawcCbKeyHandle_RawccbHandle struct {
	RawccbHandle uint64 `protobuf:"fixed64,2,opt,name=rawccb_handle,json=rawccbHandle,proto3,oneof"`
}

func (*RawcCbKeyHandle_RawccbId) isRawcCbKeyHandle_KeyOrHandle()     {}
func (*RawcCbKeyHandle_RawccbHandle) isRawcCbKeyHandle_KeyOrHandle() {}

func (m *RawcCbKeyHandle) GetKeyOrHandle() isRawcCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawcCbKeyHandle) GetRawccbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*RawcCbKeyHandle_RawccbId); ok {
		return x.RawccbId
	}
	return 0
}

func (m *RawcCbKeyHandle) GetRawccbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*RawcCbKeyHandle_RawccbHandle); ok {
		return x.RawccbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RawcCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RawcCbKeyHandle_OneofMarshaler, _RawcCbKeyHandle_OneofUnmarshaler, _RawcCbKeyHandle_OneofSizer, []interface{}{
		(*RawcCbKeyHandle_RawccbId)(nil),
		(*RawcCbKeyHandle_RawccbHandle)(nil),
	}
}

func _RawcCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RawcCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawcCbKeyHandle_RawccbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.RawccbId))
	case *RawcCbKeyHandle_RawccbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.RawccbHandle))
	case nil:
	default:
		return fmt.Errorf("RawcCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _RawcCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RawcCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.rawccb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &RawcCbKeyHandle_RawccbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.rawccb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &RawcCbKeyHandle_RawccbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _RawcCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RawcCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *RawcCbKeyHandle_RawccbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.RawccbId))
	case *RawcCbKeyHandle_RawccbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RawcCbSpec captures all the rawccb level configuration
type RawcCbSpec struct {
	KeyOrHandle             *RawcCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Pi                      uint32           `protobuf:"varint,2,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci                      uint32           `protobuf:"varint,3,opt,name=ci,proto3" json:"ci,omitempty"`
	RawccbFlags             uint32           `protobuf:"varint,4,opt,name=rawccb_flags,json=rawccbFlags,proto3" json:"rawccb_flags,omitempty"`
	MyTxqBase               uint64           `protobuf:"varint,5,opt,name=my_txq_base,json=myTxqBase,proto3" json:"my_txq_base,omitempty"`
	MyTxqRingSizeShift      uint32           `protobuf:"varint,6,opt,name=my_txq_ring_size_shift,json=myTxqRingSizeShift,proto3" json:"my_txq_ring_size_shift,omitempty"`
	MyTxqEntrySizeShift     uint32           `protobuf:"varint,7,opt,name=my_txq_entry_size_shift,json=myTxqEntrySizeShift,proto3" json:"my_txq_entry_size_shift,omitempty"`
	ChainTxqBase            uint64           `protobuf:"varint,8,opt,name=chain_txq_base,json=chainTxqBase,proto3" json:"chain_txq_base,omitempty"`
	ChainTxqRingIndicesAddr uint64           `protobuf:"varint,9,opt,name=chain_txq_ring_indices_addr,json=chainTxqRingIndicesAddr,proto3" json:"chain_txq_ring_indices_addr,omitempty"`
	ChainTxqRingSizeShift   uint32           `protobuf:"varint,10,opt,name=chain_txq_ring_size_shift,json=chainTxqRingSizeShift,proto3" json:"chain_txq_ring_size_shift,omitempty"`
	ChainTxqEntrySizeShift  uint32           `protobuf:"varint,11,opt,name=chain_txq_entry_size_shift,json=chainTxqEntrySizeShift,proto3" json:"chain_txq_entry_size_shift,omitempty"`
	ChainTxqLif             uint32           `protobuf:"varint,12,opt,name=chain_txq_lif,json=chainTxqLif,proto3" json:"chain_txq_lif,omitempty"`
	ChainTxqQtype           uint32           `protobuf:"varint,13,opt,name=chain_txq_qtype,json=chainTxqQtype,proto3" json:"chain_txq_qtype,omitempty"`
	ChainTxqQid             uint32           `protobuf:"varint,14,opt,name=chain_txq_qid,json=chainTxqQid,proto3" json:"chain_txq_qid,omitempty"`
	ChainTxqRing            uint32           `protobuf:"varint,15,opt,name=chain_txq_ring,json=chainTxqRing,proto3" json:"chain_txq_ring,omitempty"`
	CpuId                   uint32           `protobuf:"varint,16,opt,name=cpu_id,json=cpuId,proto3" json:"cpu_id,omitempty"`
	AscqBase                uint64           `protobuf:"varint,17,opt,name=ascq_base,json=ascqBase,proto3" json:"ascq_base,omitempty"`
	AscqSemInfAddr          uint64           `protobuf:"varint,18,opt,name=ascq_sem_inf_addr,json=ascqSemInfAddr,proto3" json:"ascq_sem_inf_addr,omitempty"`
	//
	// 64-bit statistic counters
	ChainPkts          uint64 `protobuf:"varint,19,opt,name=chain_pkts,json=chainPkts,proto3" json:"chain_pkts,omitempty"`
	CbNotReadyDiscards uint64 `protobuf:"varint,20,opt,name=cb_not_ready_discards,json=cbNotReadyDiscards,proto3" json:"cb_not_ready_discards,omitempty"`
	QstateCfgDiscards  uint64 `protobuf:"varint,21,opt,name=qstate_cfg_discards,json=qstateCfgDiscards,proto3" json:"qstate_cfg_discards,omitempty"`
	AolErrorDiscards   uint64 `protobuf:"varint,22,opt,name=aol_error_discards,json=aolErrorDiscards,proto3" json:"aol_error_discards,omitempty"`
	MyTxqEmptyDiscards uint64 `protobuf:"varint,23,opt,name=my_txq_empty_discards,json=myTxqEmptyDiscards,proto3" json:"my_txq_empty_discards,omitempty"`
	TxqFullDiscards    uint64 `protobuf:"varint,24,opt,name=txq_full_discards,json=txqFullDiscards,proto3" json:"txq_full_discards,omitempty"`
	PktFreeErrors      uint64 `protobuf:"varint,25,opt,name=pkt_free_errors,json=pktFreeErrors,proto3" json:"pkt_free_errors,omitempty"`
}

func (m *RawcCbSpec) Reset()                    { *m = RawcCbSpec{} }
func (m *RawcCbSpec) String() string            { return proto.CompactTextString(m) }
func (*RawcCbSpec) ProtoMessage()               {}
func (*RawcCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{208} }

func (m *RawcCbSpec) GetKeyOrHandle() *RawcCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *RawcCbSpec) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *RawcCbSpec) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

func (m *RawcCbSpec) GetRawccbFlags() uint32 {
	if m != nil {
		return m.RawccbFlags
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqBase() uint64 {
	if m != nil {
		return m.MyTxqBase
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqRingSizeShift() uint32 {
	if m != nil {
		return m.MyTxqRingSizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.MyTxqEntrySizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqBase() uint64 {
	if m != nil {
		return m.ChainTxqBase
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqRingIndicesAddr() uint64 {
	if m != nil {
		return m.ChainTxqRingIndicesAddr
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqRingSizeShift() uint32 {
	if m != nil {
		return m.ChainTxqRingSizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqEntrySizeShift() uint32 {
	if m != nil {
		return m.ChainTxqEntrySizeShift
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqLif() uint32 {
	if m != nil {
		return m.ChainTxqLif
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqQtype() uint32 {
	if m != nil {
		return m.ChainTxqQtype
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqQid() uint32 {
	if m != nil {
		return m.ChainTxqQid
	}
	return 0
}

func (m *RawcCbSpec) GetChainTxqRing() uint32 {
	if m != nil {
		return m.ChainTxqRing
	}
	return 0
}

func (m *RawcCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

func (m *RawcCbSpec) GetAscqBase() uint64 {
	if m != nil {
		return m.AscqBase
	}
	return 0
}

func (m *RawcCbSpec) GetAscqSemInfAddr() uint64 {
	if m != nil {
		return m.AscqSemInfAddr
	}
	return 0
}

func (m *RawcCbSpec) GetChainPkts() uint64 {
	if m != nil {
		return m.ChainPkts
	}
	return 0
}

func (m *RawcCbSpec) GetCbNotReadyDiscards() uint64 {
	if m != nil {
		return m.CbNotReadyDiscards
	}
	return 0
}

func (m *RawcCbSpec) GetQstateCfgDiscards() uint64 {
	if m != nil {
		return m.QstateCfgDiscards
	}
	return 0
}

func (m *RawcCbSpec) GetAolErrorDiscards() uint64 {
	if m != nil {
		return m.AolErrorDiscards
	}
	return 0
}

func (m *RawcCbSpec) GetMyTxqEmptyDiscards() uint64 {
	if m != nil {
		return m.MyTxqEmptyDiscards
	}
	return 0
}

func (m *RawcCbSpec) GetTxqFullDiscards() uint64 {
	if m != nil {
		return m.TxqFullDiscards
	}
	return 0
}

func (m *RawcCbSpec) GetPktFreeErrors() uint64 {
	if m != nil {
		return m.PktFreeErrors
	}
	return 0
}

// RawcCbRequestMsg is batched add or modify rawccb request
type RawcCbRequestMsg struct {
	Request []*RawcCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawcCbRequestMsg) Reset()                    { *m = RawcCbRequestMsg{} }
func (m *RawcCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbRequestMsg) ProtoMessage()               {}
func (*RawcCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{209} }

func (m *RawcCbRequestMsg) GetRequest() []*RawcCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawcCbStatus is the operational status of a given rawccb
type RawcCbStatus struct {
	RawccbHandle uint64 `protobuf:"fixed64,1,opt,name=rawccb_handle,json=rawccbHandle,proto3" json:"rawccb_handle,omitempty"`
}

func (m *RawcCbStatus) Reset()                    { *m = RawcCbStatus{} }
func (m *RawcCbStatus) String() string            { return proto.CompactTextString(m) }
func (*RawcCbStatus) ProtoMessage()               {}
func (*RawcCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{210} }

func (m *RawcCbStatus) GetRawccbHandle() uint64 {
	if m != nil {
		return m.RawccbHandle
	}
	return 0
}

// RawcCbResponse is response to RawcCbSpec
type RawcCbResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	RawccbStatus *RawcCbStatus `protobuf:"bytes,2,opt,name=rawccb_status,json=rawccbStatus" json:"rawccb_status,omitempty"`
}

func (m *RawcCbResponse) Reset()                    { *m = RawcCbResponse{} }
func (m *RawcCbResponse) String() string            { return proto.CompactTextString(m) }
func (*RawcCbResponse) ProtoMessage()               {}
func (*RawcCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{211} }

func (m *RawcCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawcCbResponse) GetRawccbStatus() *RawcCbStatus {
	if m != nil {
		return m.RawccbStatus
	}
	return nil
}

// RawcCbResponseMsg is batched response to RawcCbRequestMsg
type RawcCbResponseMsg struct {
	Response []*RawcCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawcCbResponseMsg) Reset()                    { *m = RawcCbResponseMsg{} }
func (m *RawcCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbResponseMsg) ProtoMessage()               {}
func (*RawcCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{212} }

func (m *RawcCbResponseMsg) GetResponse() []*RawcCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawcCbDeleteRequest is used to delete a rawccb
type RawcCbDeleteRequest struct {
	KeyOrHandle *RawcCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawcCbDeleteRequest) Reset()                    { *m = RawcCbDeleteRequest{} }
func (m *RawcCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteRequest) ProtoMessage()               {}
func (*RawcCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{213} }

func (m *RawcCbDeleteRequest) GetKeyOrHandle() *RawcCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawcCbDeleteRequestMsg is used to delete a batch of rawccbs
type RawcCbDeleteRequestMsg struct {
	Request []*RawcCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawcCbDeleteRequestMsg) Reset()                    { *m = RawcCbDeleteRequestMsg{} }
func (m *RawcCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteRequestMsg) ProtoMessage()               {}
func (*RawcCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{214} }

func (m *RawcCbDeleteRequestMsg) GetRequest() []*RawcCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type RawcCbDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *RawcCbDeleteResponse) Reset()                    { *m = RawcCbDeleteResponse{} }
func (m *RawcCbDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*RawcCbDeleteResponse) ProtoMessage()               {}
func (*RawcCbDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{215} }

func (m *RawcCbDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// RawcCbDeleteResponseMsg is batched response to RawcCbDeleteRequestMsg
type RawcCbDeleteResponseMsg struct {
	Response []*RawcCbDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawcCbDeleteResponseMsg) Reset()         { *m = RawcCbDeleteResponseMsg{} }
func (m *RawcCbDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*RawcCbDeleteResponseMsg) ProtoMessage()    {}
func (*RawcCbDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{216}
}

func (m *RawcCbDeleteResponseMsg) GetResponse() []*RawcCbDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// RawcCbGetRequest is used to get information about a rawccb
type RawcCbGetRequest struct {
	KeyOrHandle *RawcCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *RawcCbGetRequest) Reset()                    { *m = RawcCbGetRequest{} }
func (m *RawcCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetRequest) ProtoMessage()               {}
func (*RawcCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{217} }

func (m *RawcCbGetRequest) GetKeyOrHandle() *RawcCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// RawcCbGetRequestMsg is batched GET requests for rawccbs
type RawcCbGetRequestMsg struct {
	Request []*RawcCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RawcCbGetRequestMsg) Reset()                    { *m = RawcCbGetRequestMsg{} }
func (m *RawcCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetRequestMsg) ProtoMessage()               {}
func (*RawcCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{218} }

func (m *RawcCbGetRequestMsg) GetRequest() []*RawcCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// RawcCbStats is the statistics object for each rawccb
type RawcCbStats struct {
}

func (m *RawcCbStats) Reset()                    { *m = RawcCbStats{} }
func (m *RawcCbStats) String() string            { return proto.CompactTextString(m) }
func (*RawcCbStats) ProtoMessage()               {}
func (*RawcCbStats) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{219} }

// RawcCbGetResponse captures all the information about a rawccb
// only if api_status indicates success, other fields are valid
type RawcCbGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *RawcCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *RawcCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *RawcCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *RawcCbGetResponse) Reset()                    { *m = RawcCbGetResponse{} }
func (m *RawcCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetResponse) ProtoMessage()               {}
func (*RawcCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{220} }

func (m *RawcCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RawcCbGetResponse) GetSpec() *RawcCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *RawcCbGetResponse) GetStatus() *RawcCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *RawcCbGetResponse) GetStats() *RawcCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// RawcCbGetResponseMsg is batched response to RawcCbGetRequestMsg
type RawcCbGetResponseMsg struct {
	Response []*RawcCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RawcCbGetResponseMsg) Reset()                    { *m = RawcCbGetResponseMsg{} }
func (m *RawcCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RawcCbGetResponseMsg) ProtoMessage()               {}
func (*RawcCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{221} }

func (m *RawcCbGetResponseMsg) GetResponse() []*RawcCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// vMotion Debug dump
type VmotionDebugSendRequestMsg struct {
	Request []*VmotionDebugSendRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *VmotionDebugSendRequestMsg) Reset()         { *m = VmotionDebugSendRequestMsg{} }
func (m *VmotionDebugSendRequestMsg) String() string { return proto.CompactTextString(m) }
func (*VmotionDebugSendRequestMsg) ProtoMessage()    {}
func (*VmotionDebugSendRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{222}
}

func (m *VmotionDebugSendRequestMsg) GetRequest() []*VmotionDebugSendRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type VmotionDebugSendRequest struct {
}

func (m *VmotionDebugSendRequest) Reset()         { *m = VmotionDebugSendRequest{} }
func (m *VmotionDebugSendRequest) String() string { return proto.CompactTextString(m) }
func (*VmotionDebugSendRequest) ProtoMessage()    {}
func (*VmotionDebugSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{223}
}

type VmotionDebugResponseMsg struct {
	Response []*VmotionDebugResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *VmotionDebugResponseMsg) Reset()         { *m = VmotionDebugResponseMsg{} }
func (m *VmotionDebugResponseMsg) String() string { return proto.CompactTextString(m) }
func (*VmotionDebugResponseMsg) ProtoMessage()    {}
func (*VmotionDebugResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{224}
}

func (m *VmotionDebugResponseMsg) GetResponse() []*VmotionDebugResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type VmotionStats struct {
	TotalVmotion  uint32 `protobuf:"varint,1,opt,name=total_vmotion,json=totalVmotion,proto3" json:"total_vmotion,omitempty"`
	MigInVmotion  uint32 `protobuf:"varint,2,opt,name=mig_in_vmotion,json=migInVmotion,proto3" json:"mig_in_vmotion,omitempty"`
	MigOutVmotion uint32 `protobuf:"varint,3,opt,name=mig_out_vmotion,json=migOutVmotion,proto3" json:"mig_out_vmotion,omitempty"`
	MigSuccess    uint32 `protobuf:"varint,4,opt,name=mig_success,json=migSuccess,proto3" json:"mig_success,omitempty"`
	MigFailed     uint32 `protobuf:"varint,5,opt,name=mig_failed,json=migFailed,proto3" json:"mig_failed,omitempty"`
	MigAborted    uint32 `protobuf:"varint,6,opt,name=mig_aborted,json=migAborted,proto3" json:"mig_aborted,omitempty"`
	MigTimeout    uint32 `protobuf:"varint,7,opt,name=mig_timeout,json=migTimeout,proto3" json:"mig_timeout,omitempty"`
	MigCold       uint32 `protobuf:"varint,8,opt,name=mig_cold,json=migCold,proto3" json:"mig_cold,omitempty"`
}

func (m *VmotionStats) Reset()                    { *m = VmotionStats{} }
func (m *VmotionStats) String() string            { return proto.CompactTextString(m) }
func (*VmotionStats) ProtoMessage()               {}
func (*VmotionStats) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{225} }

func (m *VmotionStats) GetTotalVmotion() uint32 {
	if m != nil {
		return m.TotalVmotion
	}
	return 0
}

func (m *VmotionStats) GetMigInVmotion() uint32 {
	if m != nil {
		return m.MigInVmotion
	}
	return 0
}

func (m *VmotionStats) GetMigOutVmotion() uint32 {
	if m != nil {
		return m.MigOutVmotion
	}
	return 0
}

func (m *VmotionStats) GetMigSuccess() uint32 {
	if m != nil {
		return m.MigSuccess
	}
	return 0
}

func (m *VmotionStats) GetMigFailed() uint32 {
	if m != nil {
		return m.MigFailed
	}
	return 0
}

func (m *VmotionStats) GetMigAborted() uint32 {
	if m != nil {
		return m.MigAborted
	}
	return 0
}

func (m *VmotionStats) GetMigTimeout() uint32 {
	if m != nil {
		return m.MigTimeout
	}
	return 0
}

func (m *VmotionStats) GetMigCold() uint32 {
	if m != nil {
		return m.MigCold
	}
	return 0
}

type VmotionDebugEp struct {
	MacAddress      string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	OldHomingHostIp string `protobuf:"bytes,2,opt,name=old_homing_host_ip,json=oldHomingHostIp,proto3" json:"old_homing_host_ip,omitempty"`
	MigrationType   uint32 `protobuf:"varint,3,opt,name=migration_type,json=migrationType,proto3" json:"migration_type,omitempty"`
	VmotionState    uint32 `protobuf:"varint,4,opt,name=vmotion_state,json=vmotionState,proto3" json:"vmotion_state,omitempty"`
	Flags           uint32 `protobuf:"varint,5,opt,name=flags,proto3" json:"flags,omitempty"`
	State           uint32 `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *VmotionDebugEp) Reset()                    { *m = VmotionDebugEp{} }
func (m *VmotionDebugEp) String() string            { return proto.CompactTextString(m) }
func (*VmotionDebugEp) ProtoMessage()               {}
func (*VmotionDebugEp) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{226} }

func (m *VmotionDebugEp) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *VmotionDebugEp) GetOldHomingHostIp() string {
	if m != nil {
		return m.OldHomingHostIp
	}
	return ""
}

func (m *VmotionDebugEp) GetMigrationType() uint32 {
	if m != nil {
		return m.MigrationType
	}
	return 0
}

func (m *VmotionDebugEp) GetVmotionState() uint32 {
	if m != nil {
		return m.VmotionState
	}
	return 0
}

func (m *VmotionDebugEp) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *VmotionDebugEp) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type VmotionActiveEp struct {
	MacAddress     string `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	MigrationState uint32 `protobuf:"varint,2,opt,name=migration_state,json=migrationState,proto3" json:"migration_state,omitempty"`
	UsegVlan       uint32 `protobuf:"varint,3,opt,name=useg_vlan,json=usegVlan,proto3" json:"useg_vlan,omitempty"`
}

func (m *VmotionActiveEp) Reset()                    { *m = VmotionActiveEp{} }
func (m *VmotionActiveEp) String() string            { return proto.CompactTextString(m) }
func (*VmotionActiveEp) ProtoMessage()               {}
func (*VmotionActiveEp) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{227} }

func (m *VmotionActiveEp) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *VmotionActiveEp) GetMigrationState() uint32 {
	if m != nil {
		return m.MigrationState
	}
	return 0
}

func (m *VmotionActiveEp) GetUsegVlan() uint32 {
	if m != nil {
		return m.UsegVlan
	}
	return 0
}

type VmotionDebugResponse struct {
	ApiStatus     ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
	VmotionEnable bool               `protobuf:"varint,2,opt,name=vmotion_enable,json=vmotionEnable,proto3" json:"vmotion_enable,omitempty"`
	Stats         *VmotionStats      `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
	Ep            []*VmotionDebugEp  `protobuf:"bytes,4,rep,name=ep" json:"ep,omitempty"`
	ActiveEp      []*VmotionActiveEp `protobuf:"bytes,5,rep,name=active_ep,json=activeEp" json:"active_ep,omitempty"`
}

func (m *VmotionDebugResponse) Reset()                    { *m = VmotionDebugResponse{} }
func (m *VmotionDebugResponse) String() string            { return proto.CompactTextString(m) }
func (*VmotionDebugResponse) ProtoMessage()               {}
func (*VmotionDebugResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{228} }

func (m *VmotionDebugResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VmotionDebugResponse) GetVmotionEnable() bool {
	if m != nil {
		return m.VmotionEnable
	}
	return false
}

func (m *VmotionDebugResponse) GetStats() *VmotionStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *VmotionDebugResponse) GetEp() []*VmotionDebugEp {
	if m != nil {
		return m.Ep
	}
	return nil
}

func (m *VmotionDebugResponse) GetActiveEp() []*VmotionActiveEp {
	if m != nil {
		return m.ActiveEp
	}
	return nil
}

// Debug test to send FIN on local EPs
type TestSendFinRequestMsg struct {
	Request []*TestSendFinRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TestSendFinRequestMsg) Reset()                    { *m = TestSendFinRequestMsg{} }
func (m *TestSendFinRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TestSendFinRequestMsg) ProtoMessage()               {}
func (*TestSendFinRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{229} }

func (m *TestSendFinRequestMsg) GetRequest() []*TestSendFinRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type TestSendFinRequest struct {
}

func (m *TestSendFinRequest) Reset()                    { *m = TestSendFinRequest{} }
func (m *TestSendFinRequest) String() string            { return proto.CompactTextString(m) }
func (*TestSendFinRequest) ProtoMessage()               {}
func (*TestSendFinRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{230} }

type TestSendFinResponseMsg struct {
	Response []*TestSendFinResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TestSendFinResponseMsg) Reset()                    { *m = TestSendFinResponseMsg{} }
func (m *TestSendFinResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TestSendFinResponseMsg) ProtoMessage()               {}
func (*TestSendFinResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{231} }

func (m *TestSendFinResponseMsg) GetResponse() []*TestSendFinResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type TestSendFinResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
}

func (m *TestSendFinResponse) Reset()                    { *m = TestSendFinResponse{} }
func (m *TestSendFinResponse) String() string            { return proto.CompactTextString(m) }
func (*TestSendFinResponse) ProtoMessage()               {}
func (*TestSendFinResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{232} }

func (m *TestSendFinResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// Debug test to force sync clock
type TestClockSyncRequestMsg struct {
	Request []*TestClockSyncRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TestClockSyncRequestMsg) Reset()         { *m = TestClockSyncRequestMsg{} }
func (m *TestClockSyncRequestMsg) String() string { return proto.CompactTextString(m) }
func (*TestClockSyncRequestMsg) ProtoMessage()    {}
func (*TestClockSyncRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{233}
}

func (m *TestClockSyncRequestMsg) GetRequest() []*TestClockSyncRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type TestClockSyncRequest struct {
}

func (m *TestClockSyncRequest) Reset()                    { *m = TestClockSyncRequest{} }
func (m *TestClockSyncRequest) String() string            { return proto.CompactTextString(m) }
func (*TestClockSyncRequest) ProtoMessage()               {}
func (*TestClockSyncRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{234} }

type TestClockSyncResponseMsg struct {
	Response []*TestClockSyncResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TestClockSyncResponseMsg) Reset()         { *m = TestClockSyncResponseMsg{} }
func (m *TestClockSyncResponseMsg) String() string { return proto.CompactTextString(m) }
func (*TestClockSyncResponseMsg) ProtoMessage()    {}
func (*TestClockSyncResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{235}
}

func (m *TestClockSyncResponseMsg) GetResponse() []*TestClockSyncResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type TestClockSyncResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
}

func (m *TestClockSyncResponse) Reset()                    { *m = TestClockSyncResponse{} }
func (m *TestClockSyncResponse) String() string            { return proto.CompactTextString(m) }
func (*TestClockSyncResponse) ProtoMessage()               {}
func (*TestClockSyncResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{236} }

func (m *TestClockSyncResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// Debug test to fte cps
type TestInjectFtePacketRequestMsg struct {
	Request []*TestInjectFtePacketRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TestInjectFtePacketRequestMsg) Reset()         { *m = TestInjectFtePacketRequestMsg{} }
func (m *TestInjectFtePacketRequestMsg) String() string { return proto.CompactTextString(m) }
func (*TestInjectFtePacketRequestMsg) ProtoMessage()    {}
func (*TestInjectFtePacketRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{237}
}

func (m *TestInjectFtePacketRequestMsg) GetRequest() []*TestInjectFtePacketRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type TestInjectFtePacketRequest struct {
	SourceEndpoint      *EndpointKeyHandle `protobuf:"bytes,1,opt,name=source_endpoint,json=sourceEndpoint" json:"source_endpoint,omitempty"`
	DestinationEndpoint *EndpointKeyHandle `protobuf:"bytes,2,opt,name=destination_endpoint,json=destinationEndpoint" json:"destination_endpoint,omitempty"`
	SourceIp            uint32             `protobuf:"varint,3,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	DestinationIp       uint32             `protobuf:"varint,4,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
}

func (m *TestInjectFtePacketRequest) Reset()         { *m = TestInjectFtePacketRequest{} }
func (m *TestInjectFtePacketRequest) String() string { return proto.CompactTextString(m) }
func (*TestInjectFtePacketRequest) ProtoMessage()    {}
func (*TestInjectFtePacketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{238}
}

func (m *TestInjectFtePacketRequest) GetSourceEndpoint() *EndpointKeyHandle {
	if m != nil {
		return m.SourceEndpoint
	}
	return nil
}

func (m *TestInjectFtePacketRequest) GetDestinationEndpoint() *EndpointKeyHandle {
	if m != nil {
		return m.DestinationEndpoint
	}
	return nil
}

func (m *TestInjectFtePacketRequest) GetSourceIp() uint32 {
	if m != nil {
		return m.SourceIp
	}
	return 0
}

func (m *TestInjectFtePacketRequest) GetDestinationIp() uint32 {
	if m != nil {
		return m.DestinationIp
	}
	return 0
}

type TestInjectFtePacketResponseMsg struct {
	Response []*TestInjectFtePacketResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TestInjectFtePacketResponseMsg) Reset()         { *m = TestInjectFtePacketResponseMsg{} }
func (m *TestInjectFtePacketResponseMsg) String() string { return proto.CompactTextString(m) }
func (*TestInjectFtePacketResponseMsg) ProtoMessage()    {}
func (*TestInjectFtePacketResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{239}
}

func (m *TestInjectFtePacketResponseMsg) GetResponse() []*TestInjectFtePacketResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type TestInjectFtePacketResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
}

func (m *TestInjectFtePacketResponse) Reset()         { *m = TestInjectFtePacketResponse{} }
func (m *TestInjectFtePacketResponse) String() string { return proto.CompactTextString(m) }
func (*TestInjectFtePacketResponse) ProtoMessage()    {}
func (*TestInjectFtePacketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{240}
}

func (m *TestInjectFtePacketResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type FlowHashGetResponseMsg struct {
	Response []*FlowHashGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *FlowHashGetResponseMsg) Reset()                    { *m = FlowHashGetResponseMsg{} }
func (m *FlowHashGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*FlowHashGetResponseMsg) ProtoMessage()               {}
func (*FlowHashGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{241} }

func (m *FlowHashGetResponseMsg) GetResponse() []*FlowHashGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type FlowHashGetResponse struct {
	ApiStatus           ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	PrimaryIndexValid   bool      `protobuf:"varint,2,opt,name=primary_index_valid,json=primaryIndexValid,proto3" json:"primary_index_valid,omitempty"`
	PrimaryIndex        uint32    `protobuf:"varint,3,opt,name=primary_index,json=primaryIndex,proto3" json:"primary_index,omitempty"`
	SecondaryIndexValid bool      `protobuf:"varint,4,opt,name=secondary_index_valid,json=secondaryIndexValid,proto3" json:"secondary_index_valid,omitempty"`
	SecondaryIndex      uint32    `protobuf:"varint,5,opt,name=secondary_index,json=secondaryIndex,proto3" json:"secondary_index,omitempty"`
	Key                 string    `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Data                string    `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FlowHashGetResponse) Reset()                    { *m = FlowHashGetResponse{} }
func (m *FlowHashGetResponse) String() string            { return proto.CompactTextString(m) }
func (*FlowHashGetResponse) ProtoMessage()               {}
func (*FlowHashGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{242} }

func (m *FlowHashGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FlowHashGetResponse) GetPrimaryIndexValid() bool {
	if m != nil {
		return m.PrimaryIndexValid
	}
	return false
}

func (m *FlowHashGetResponse) GetPrimaryIndex() uint32 {
	if m != nil {
		return m.PrimaryIndex
	}
	return 0
}

func (m *FlowHashGetResponse) GetSecondaryIndexValid() bool {
	if m != nil {
		return m.SecondaryIndexValid
	}
	return false
}

func (m *FlowHashGetResponse) GetSecondaryIndex() uint32 {
	if m != nil {
		return m.SecondaryIndex
	}
	return 0
}

func (m *FlowHashGetResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FlowHashGetResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// FlowTableGetRequest is used to get information about the flows programmed in the hardware
type FlowHashGetRequest struct {
	HardwareVrfId uint64        `protobuf:"varint,1,opt,name=hardware_vrf_id,json=hardwareVrfId,proto3" json:"hardware_vrf_id,omitempty"`
	FlowKey       *FlowKey      `protobuf:"bytes,2,opt,name=flow_key,json=flowKey" json:"flow_key,omitempty"`
	FlowDirection FlowDirection `protobuf:"varint,3,opt,name=flow_direction,json=flowDirection,proto3,enum=types.FlowDirection" json:"flow_direction,omitempty"`
	FlowInstance  FlowInstance  `protobuf:"varint,4,opt,name=flow_instance,json=flowInstance,proto3,enum=session.FlowInstance" json:"flow_instance,omitempty"`
}

func (m *FlowHashGetRequest) Reset()                    { *m = FlowHashGetRequest{} }
func (m *FlowHashGetRequest) String() string            { return proto.CompactTextString(m) }
func (*FlowHashGetRequest) ProtoMessage()               {}
func (*FlowHashGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{243} }

func (m *FlowHashGetRequest) GetHardwareVrfId() uint64 {
	if m != nil {
		return m.HardwareVrfId
	}
	return 0
}

func (m *FlowHashGetRequest) GetFlowKey() *FlowKey {
	if m != nil {
		return m.FlowKey
	}
	return nil
}

func (m *FlowHashGetRequest) GetFlowDirection() FlowDirection {
	if m != nil {
		return m.FlowDirection
	}
	return FlowDirection_FLOW_DIRECTION_NONE
}

func (m *FlowHashGetRequest) GetFlowInstance() FlowInstance {
	if m != nil {
		return m.FlowInstance
	}
	return FlowInstance_FLOW_INSTANCE_NONE
}

type FlowHashGetRequestMsg struct {
	Request []*FlowHashGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FlowHashGetRequestMsg) Reset()                    { *m = FlowHashGetRequestMsg{} }
func (m *FlowHashGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*FlowHashGetRequestMsg) ProtoMessage()               {}
func (*FlowHashGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{244} }

func (m *FlowHashGetRequestMsg) GetRequest() []*FlowHashGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type InternalPortStatus struct {
	PortDescr    string          `protobuf:"bytes,1,opt,name=port_descr,json=portDescr,proto3" json:"port_descr,omitempty"`
	PortStatus   IfStatus        `protobuf:"varint,2,opt,name=port_status,json=portStatus,proto3,enum=intf.IfStatus" json:"port_status,omitempty"`
	PortSpeed    IntPortSpeed    `protobuf:"varint,3,opt,name=port_speed,json=portSpeed,proto3,enum=internal.IntPortSpeed" json:"port_speed,omitempty"`
	PortMode     IntPortDplxMode `protobuf:"varint,4,opt,name=port_mode,json=portMode,proto3,enum=internal.IntPortDplxMode" json:"port_mode,omitempty"`
	PortTxPaused bool            `protobuf:"varint,5,opt,name=port_tx_paused,json=portTxPaused,proto3" json:"port_tx_paused,omitempty"`
	PortFlowCtrl bool            `protobuf:"varint,6,opt,name=port_flow_ctrl,json=portFlowCtrl,proto3" json:"port_flow_ctrl,omitempty"`
}

func (m *InternalPortStatus) Reset()                    { *m = InternalPortStatus{} }
func (m *InternalPortStatus) String() string            { return proto.CompactTextString(m) }
func (*InternalPortStatus) ProtoMessage()               {}
func (*InternalPortStatus) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{245} }

func (m *InternalPortStatus) GetPortDescr() string {
	if m != nil {
		return m.PortDescr
	}
	return ""
}

func (m *InternalPortStatus) GetPortStatus() IfStatus {
	if m != nil {
		return m.PortStatus
	}
	return IfStatus_IF_STATUS_NONE
}

func (m *InternalPortStatus) GetPortSpeed() IntPortSpeed {
	if m != nil {
		return m.PortSpeed
	}
	return IntPortSpeed_SPEED_10M
}

func (m *InternalPortStatus) GetPortMode() IntPortDplxMode {
	if m != nil {
		return m.PortMode
	}
	return IntPortDplxMode_HALF_DUPLEX
}

func (m *InternalPortStatus) GetPortTxPaused() bool {
	if m != nil {
		return m.PortTxPaused
	}
	return false
}

func (m *InternalPortStatus) GetPortFlowCtrl() bool {
	if m != nil {
		return m.PortFlowCtrl
	}
	return false
}

type InternalPortStats struct {
	InGoodOctets  uint64 `protobuf:"varint,1,opt,name=in_good_octets,json=inGoodOctets,proto3" json:"in_good_octets,omitempty"`
	InBadOctets   uint32 `protobuf:"varint,2,opt,name=in_bad_octets,json=inBadOctets,proto3" json:"in_bad_octets,omitempty"`
	InUnicast     uint32 `protobuf:"varint,3,opt,name=in_unicast,json=inUnicast,proto3" json:"in_unicast,omitempty"`
	InBroadcast   uint32 `protobuf:"varint,4,opt,name=in_broadcast,json=inBroadcast,proto3" json:"in_broadcast,omitempty"`
	InMulticast   uint32 `protobuf:"varint,5,opt,name=in_multicast,json=inMulticast,proto3" json:"in_multicast,omitempty"`
	InPause       uint32 `protobuf:"varint,6,opt,name=in_pause,json=inPause,proto3" json:"in_pause,omitempty"`
	InUndersize   uint32 `protobuf:"varint,7,opt,name=in_undersize,json=inUndersize,proto3" json:"in_undersize,omitempty"`
	InFragments   uint32 `protobuf:"varint,8,opt,name=in_fragments,json=inFragments,proto3" json:"in_fragments,omitempty"`
	InOversize    uint32 `protobuf:"varint,9,opt,name=in_oversize,json=inOversize,proto3" json:"in_oversize,omitempty"`
	InJabber      uint32 `protobuf:"varint,10,opt,name=in_jabber,json=inJabber,proto3" json:"in_jabber,omitempty"`
	InRxErr       uint32 `protobuf:"varint,11,opt,name=in_rx_err,json=inRxErr,proto3" json:"in_rx_err,omitempty"`
	InFcsErr      uint32 `protobuf:"varint,12,opt,name=in_fcs_err,json=inFcsErr,proto3" json:"in_fcs_err,omitempty"`
	OutOctets     uint64 `protobuf:"varint,13,opt,name=out_octets,json=outOctets,proto3" json:"out_octets,omitempty"`
	OutUnicast    uint32 `protobuf:"varint,14,opt,name=out_unicast,json=outUnicast,proto3" json:"out_unicast,omitempty"`
	OutBroadcast  uint32 `protobuf:"varint,15,opt,name=out_broadcast,json=outBroadcast,proto3" json:"out_broadcast,omitempty"`
	OutMulticast  uint32 `protobuf:"varint,16,opt,name=out_multicast,json=outMulticast,proto3" json:"out_multicast,omitempty"`
	OutFcsErr     uint32 `protobuf:"varint,17,opt,name=out_fcs_err,json=outFcsErr,proto3" json:"out_fcs_err,omitempty"`
	OutPause      uint32 `protobuf:"varint,18,opt,name=out_pause,json=outPause,proto3" json:"out_pause,omitempty"`
	OutCollisions uint32 `protobuf:"varint,19,opt,name=out_collisions,json=outCollisions,proto3" json:"out_collisions,omitempty"`
	OutDeferred   uint32 `protobuf:"varint,20,opt,name=out_deferred,json=outDeferred,proto3" json:"out_deferred,omitempty"`
	OutSingle     uint32 `protobuf:"varint,21,opt,name=out_single,json=outSingle,proto3" json:"out_single,omitempty"`
	OutMultiple   uint32 `protobuf:"varint,22,opt,name=out_multiple,json=outMultiple,proto3" json:"out_multiple,omitempty"`
	OutExcessive  uint32 `protobuf:"varint,23,opt,name=out_excessive,json=outExcessive,proto3" json:"out_excessive,omitempty"`
	OutLate       uint32 `protobuf:"varint,24,opt,name=out_late,json=outLate,proto3" json:"out_late,omitempty"`
}

func (m *InternalPortStats) Reset()                    { *m = InternalPortStats{} }
func (m *InternalPortStats) String() string            { return proto.CompactTextString(m) }
func (*InternalPortStats) ProtoMessage()               {}
func (*InternalPortStats) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{246} }

func (m *InternalPortStats) GetInGoodOctets() uint64 {
	if m != nil {
		return m.InGoodOctets
	}
	return 0
}

func (m *InternalPortStats) GetInBadOctets() uint32 {
	if m != nil {
		return m.InBadOctets
	}
	return 0
}

func (m *InternalPortStats) GetInUnicast() uint32 {
	if m != nil {
		return m.InUnicast
	}
	return 0
}

func (m *InternalPortStats) GetInBroadcast() uint32 {
	if m != nil {
		return m.InBroadcast
	}
	return 0
}

func (m *InternalPortStats) GetInMulticast() uint32 {
	if m != nil {
		return m.InMulticast
	}
	return 0
}

func (m *InternalPortStats) GetInPause() uint32 {
	if m != nil {
		return m.InPause
	}
	return 0
}

func (m *InternalPortStats) GetInUndersize() uint32 {
	if m != nil {
		return m.InUndersize
	}
	return 0
}

func (m *InternalPortStats) GetInFragments() uint32 {
	if m != nil {
		return m.InFragments
	}
	return 0
}

func (m *InternalPortStats) GetInOversize() uint32 {
	if m != nil {
		return m.InOversize
	}
	return 0
}

func (m *InternalPortStats) GetInJabber() uint32 {
	if m != nil {
		return m.InJabber
	}
	return 0
}

func (m *InternalPortStats) GetInRxErr() uint32 {
	if m != nil {
		return m.InRxErr
	}
	return 0
}

func (m *InternalPortStats) GetInFcsErr() uint32 {
	if m != nil {
		return m.InFcsErr
	}
	return 0
}

func (m *InternalPortStats) GetOutOctets() uint64 {
	if m != nil {
		return m.OutOctets
	}
	return 0
}

func (m *InternalPortStats) GetOutUnicast() uint32 {
	if m != nil {
		return m.OutUnicast
	}
	return 0
}

func (m *InternalPortStats) GetOutBroadcast() uint32 {
	if m != nil {
		return m.OutBroadcast
	}
	return 0
}

func (m *InternalPortStats) GetOutMulticast() uint32 {
	if m != nil {
		return m.OutMulticast
	}
	return 0
}

func (m *InternalPortStats) GetOutFcsErr() uint32 {
	if m != nil {
		return m.OutFcsErr
	}
	return 0
}

func (m *InternalPortStats) GetOutPause() uint32 {
	if m != nil {
		return m.OutPause
	}
	return 0
}

func (m *InternalPortStats) GetOutCollisions() uint32 {
	if m != nil {
		return m.OutCollisions
	}
	return 0
}

func (m *InternalPortStats) GetOutDeferred() uint32 {
	if m != nil {
		return m.OutDeferred
	}
	return 0
}

func (m *InternalPortStats) GetOutSingle() uint32 {
	if m != nil {
		return m.OutSingle
	}
	return 0
}

func (m *InternalPortStats) GetOutMultiple() uint32 {
	if m != nil {
		return m.OutMultiple
	}
	return 0
}

func (m *InternalPortStats) GetOutExcessive() uint32 {
	if m != nil {
		return m.OutExcessive
	}
	return 0
}

func (m *InternalPortStats) GetOutLate() uint32 {
	if m != nil {
		return m.OutLate
	}
	return 0
}

type InternalPortResponse struct {
	PortNumber uint32              `protobuf:"varint,1,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	Status     *InternalPortStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Stats      *InternalPortStats  `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
}

func (m *InternalPortResponse) Reset()                    { *m = InternalPortResponse{} }
func (m *InternalPortResponse) String() string            { return proto.CompactTextString(m) }
func (*InternalPortResponse) ProtoMessage()               {}
func (*InternalPortResponse) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{247} }

func (m *InternalPortResponse) GetPortNumber() uint32 {
	if m != nil {
		return m.PortNumber
	}
	return 0
}

func (m *InternalPortResponse) GetStatus() *InternalPortStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *InternalPortResponse) GetStats() *InternalPortStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type InternalPortResponseMsg struct {
	Response []*InternalPortResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *InternalPortResponseMsg) Reset()         { *m = InternalPortResponseMsg{} }
func (m *InternalPortResponseMsg) String() string { return proto.CompactTextString(m) }
func (*InternalPortResponseMsg) ProtoMessage()    {}
func (*InternalPortResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorInternal, []int{248}
}

func (m *InternalPortResponseMsg) GetResponse() []*InternalPortResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type InternalPortRequest struct {
	PortNumber uint32 `protobuf:"varint,1,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
}

func (m *InternalPortRequest) Reset()                    { *m = InternalPortRequest{} }
func (m *InternalPortRequest) String() string            { return proto.CompactTextString(m) }
func (*InternalPortRequest) ProtoMessage()               {}
func (*InternalPortRequest) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{249} }

func (m *InternalPortRequest) GetPortNumber() uint32 {
	if m != nil {
		return m.PortNumber
	}
	return 0
}

type InternalPortRequestMsg struct {
	Request []*InternalPortRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *InternalPortRequestMsg) Reset()                    { *m = InternalPortRequestMsg{} }
func (m *InternalPortRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*InternalPortRequestMsg) ProtoMessage()               {}
func (*InternalPortRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{250} }

func (m *InternalPortRequestMsg) GetRequest() []*InternalPortRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*ProgramAddressReq)(nil), "internal.ProgramAddressReq")
	proto.RegisterType((*ProgramAddressResp)(nil), "internal.ProgramAddressResp")
	proto.RegisterType((*GetProgramAddressRequestMsg)(nil), "internal.GetProgramAddressRequestMsg")
	proto.RegisterType((*ProgramAddressResponseMsg)(nil), "internal.ProgramAddressResponseMsg")
	proto.RegisterType((*HbmAddressReq)(nil), "internal.HbmAddressReq")
	proto.RegisterType((*HbmAddressResp)(nil), "internal.HbmAddressResp")
	proto.RegisterType((*AllocHbmAddressRequestMsg)(nil), "internal.AllocHbmAddressRequestMsg")
	proto.RegisterType((*AllocHbmAddressResponseMsg)(nil), "internal.AllocHbmAddressResponseMsg")
	proto.RegisterType((*LifBdfReq)(nil), "internal.LifBdfReq")
	proto.RegisterType((*LifBdfResp)(nil), "internal.LifBdfResp")
	proto.RegisterType((*ConfigureLifBdfRequestMsg)(nil), "internal.ConfigureLifBdfRequestMsg")
	proto.RegisterType((*ConfigureLifBdfResponseMsg)(nil), "internal.ConfigureLifBdfResponseMsg")
	proto.RegisterType((*SoftwarePhvStatus)(nil), "internal.SoftwarePhvStatus")
	proto.RegisterType((*SoftwarePhvResponse)(nil), "internal.SoftwarePhvResponse")
	proto.RegisterType((*SoftwarePhvResponseMsg)(nil), "internal.SoftwarePhvResponseMsg")
	proto.RegisterType((*SoftwarePhvGetRequest)(nil), "internal.SoftwarePhvGetRequest")
	proto.RegisterType((*SoftwarePhvGetRequestMsg)(nil), "internal.SoftwarePhvGetRequestMsg")
	proto.RegisterType((*SoftwarePhvGetResponse)(nil), "internal.SoftwarePhvGetResponse")
	proto.RegisterType((*SoftwarePhvGetResponseMsg)(nil), "internal.SoftwarePhvGetResponseMsg")
	proto.RegisterType((*SoftwarePhvInject)(nil), "internal.SoftwarePhvInject")
	proto.RegisterType((*SoftwarePhvInjectMsg)(nil), "internal.SoftwarePhvInjectMsg")
	proto.RegisterType((*LogFlowRequestMsg)(nil), "internal.LogFlowRequestMsg")
	proto.RegisterType((*LogFlowResponseMsg)(nil), "internal.LogFlowResponseMsg")
	proto.RegisterType((*LogFlowResponse)(nil), "internal.LogFlowResponse")
	proto.RegisterType((*EmptyRequest)(nil), "internal.EmptyRequest")
	proto.RegisterType((*EmptyResponse)(nil), "internal.EmptyResponse")
	proto.RegisterType((*TcpCbKeyHandle)(nil), "internal.TcpCbKeyHandle")
	proto.RegisterType((*TcpCbSpec)(nil), "internal.TcpCbSpec")
	proto.RegisterType((*TcpCbRequestMsg)(nil), "internal.TcpCbRequestMsg")
	proto.RegisterType((*TcpCbOoqStatus)(nil), "internal.TcpCbOoqStatus")
	proto.RegisterType((*TcpCbStatus)(nil), "internal.TcpCbStatus")
	proto.RegisterType((*TcpCbResponse)(nil), "internal.TcpCbResponse")
	proto.RegisterType((*TcpCbResponseMsg)(nil), "internal.TcpCbResponseMsg")
	proto.RegisterType((*TcpCbDeleteRequest)(nil), "internal.TcpCbDeleteRequest")
	proto.RegisterType((*TcpCbDeleteRequestMsg)(nil), "internal.TcpCbDeleteRequestMsg")
	proto.RegisterType((*TcpCbDeleteResponseMsg)(nil), "internal.TcpCbDeleteResponseMsg")
	proto.RegisterType((*TcpCbGetRequest)(nil), "internal.TcpCbGetRequest")
	proto.RegisterType((*TcpCbGetRequestMsg)(nil), "internal.TcpCbGetRequestMsg")
	proto.RegisterType((*TcpCbStats)(nil), "internal.TcpCbStats")
	proto.RegisterType((*TcpCbGetResponse)(nil), "internal.TcpCbGetResponse")
	proto.RegisterType((*TcpCbGetResponseMsg)(nil), "internal.TcpCbGetResponseMsg")
	proto.RegisterType((*TlsCbKeyHandle)(nil), "internal.TlsCbKeyHandle")
	proto.RegisterType((*TlsCbSpec)(nil), "internal.TlsCbSpec")
	proto.RegisterType((*TlsCbRequestMsg)(nil), "internal.TlsCbRequestMsg")
	proto.RegisterType((*TlsCbStatus)(nil), "internal.TlsCbStatus")
	proto.RegisterType((*TlsCbResponse)(nil), "internal.TlsCbResponse")
	proto.RegisterType((*TlsCbResponseMsg)(nil), "internal.TlsCbResponseMsg")
	proto.RegisterType((*TlsCbDeleteRequest)(nil), "internal.TlsCbDeleteRequest")
	proto.RegisterType((*TlsCbDeleteRequestMsg)(nil), "internal.TlsCbDeleteRequestMsg")
	proto.RegisterType((*TlsCbDeleteResponseMsg)(nil), "internal.TlsCbDeleteResponseMsg")
	proto.RegisterType((*TlsCbGetRequest)(nil), "internal.TlsCbGetRequest")
	proto.RegisterType((*TlsCbGetRequestMsg)(nil), "internal.TlsCbGetRequestMsg")
	proto.RegisterType((*TlsCbStats)(nil), "internal.TlsCbStats")
	proto.RegisterType((*TlsCbGetResponse)(nil), "internal.TlsCbGetResponse")
	proto.RegisterType((*TlsCbGetResponseMsg)(nil), "internal.TlsCbGetResponseMsg")
	proto.RegisterType((*WRingKeyHandle)(nil), "internal.WRingKeyHandle")
	proto.RegisterType((*WRingSpec)(nil), "internal.WRingSpec")
	proto.RegisterType((*WRingRequestMsg)(nil), "internal.WRingRequestMsg")
	proto.RegisterType((*WRingStatus)(nil), "internal.WRingStatus")
	proto.RegisterType((*WRingResponse)(nil), "internal.WRingResponse")
	proto.RegisterType((*WRingResponseMsg)(nil), "internal.WRingResponseMsg")
	proto.RegisterType((*WRingDeleteRequest)(nil), "internal.WRingDeleteRequest")
	proto.RegisterType((*WRingDeleteRequestMsg)(nil), "internal.WRingDeleteRequestMsg")
	proto.RegisterType((*WRingDeleteResponseMsg)(nil), "internal.WRingDeleteResponseMsg")
	proto.RegisterType((*WRingGetEntriesRequest)(nil), "internal.WRingGetEntriesRequest")
	proto.RegisterType((*WRingGetEntriesRequestMsg)(nil), "internal.WRingGetEntriesRequestMsg")
	proto.RegisterType((*WRingStats)(nil), "internal.WRingStats")
	proto.RegisterType((*WRingBarcoGCMDescMsg)(nil), "internal.WRingBarcoGCMDescMsg")
	proto.RegisterType((*WRingGetEntriesResponse)(nil), "internal.WRingGetEntriesResponse")
	proto.RegisterType((*WRingGetEntriesResponseMsg)(nil), "internal.WRingGetEntriesResponseMsg")
	proto.RegisterType((*WRingGetMetaResponse)(nil), "internal.WRingGetMetaResponse")
	proto.RegisterType((*WRingGetMetaResponseMsg)(nil), "internal.WRingGetMetaResponseMsg")
	proto.RegisterType((*WRingSetMetaResponse)(nil), "internal.WRingSetMetaResponse")
	proto.RegisterType((*WRingSetMetaResponseMsg)(nil), "internal.WRingSetMetaResponseMsg")
	proto.RegisterType((*GetOpaqueTagAddrRequest)(nil), "internal.GetOpaqueTagAddrRequest")
	proto.RegisterType((*GetOpaqueTagAddrRequestMsg)(nil), "internal.GetOpaqueTagAddrRequestMsg")
	proto.RegisterType((*GetOpaqueTagAddrResponse)(nil), "internal.GetOpaqueTagAddrResponse")
	proto.RegisterType((*GetOpaqueTagAddrResponseMsg)(nil), "internal.GetOpaqueTagAddrResponseMsg")
	proto.RegisterType((*BarcoGetReqDescrEntryRequest)(nil), "internal.BarcoGetReqDescrEntryRequest")
	proto.RegisterType((*BarcoGetReqDescrEntryRequestMsg)(nil), "internal.BarcoGetReqDescrEntryRequestMsg")
	proto.RegisterType((*BarcoSymmReqDescrMsg)(nil), "internal.BarcoSymmReqDescrMsg")
	proto.RegisterType((*BarcoASymReqDescrMsg)(nil), "internal.BarcoASymReqDescrMsg")
	proto.RegisterType((*BarcoGetReqDescrEntryResponse)(nil), "internal.BarcoGetReqDescrEntryResponse")
	proto.RegisterType((*BarcoGetReqDescrEntryResponseMsg)(nil), "internal.BarcoGetReqDescrEntryResponseMsg")
	proto.RegisterType((*BarcoGetRingMetaRequest)(nil), "internal.BarcoGetRingMetaRequest")
	proto.RegisterType((*BarcoGetRingMetaRequestMsg)(nil), "internal.BarcoGetRingMetaRequestMsg")
	proto.RegisterType((*BarcoGetRingMetaResponse)(nil), "internal.BarcoGetRingMetaResponse")
	proto.RegisterType((*BarcoGetRingMetaResponseMsg)(nil), "internal.BarcoGetRingMetaResponseMsg")
	proto.RegisterType((*BarcoGetRingMetaConfigRequest)(nil), "internal.BarcoGetRingMetaConfigRequest")
	proto.RegisterType((*BarcoGetRingMetaConfigRequestMsg)(nil), "internal.BarcoGetRingMetaConfigRequestMsg")
	proto.RegisterType((*BarcoGetRingMetaConfigResponse)(nil), "internal.BarcoGetRingMetaConfigResponse")
	proto.RegisterType((*BarcoGetRingMetaConfigResponseMsg)(nil), "internal.BarcoGetRingMetaConfigResponseMsg")
	proto.RegisterType((*CryptoKeyCreateRequest)(nil), "internal.CryptoKeyCreateRequest")
	proto.RegisterType((*CryptoKeyCreateRequestMsg)(nil), "internal.CryptoKeyCreateRequestMsg")
	proto.RegisterType((*CryptoKeyCreateResponse)(nil), "internal.CryptoKeyCreateResponse")
	proto.RegisterType((*CryptoKeyCreateResponseMsg)(nil), "internal.CryptoKeyCreateResponseMsg")
	proto.RegisterType((*CryptoKeyCreateWithIdRequest)(nil), "internal.CryptoKeyCreateWithIdRequest")
	proto.RegisterType((*CryptoKeyCreateWithIdRequestMsg)(nil), "internal.CryptoKeyCreateWithIdRequestMsg")
	proto.RegisterType((*CryptoKeyCreateWithIdResponse)(nil), "internal.CryptoKeyCreateWithIdResponse")
	proto.RegisterType((*CryptoKeyCreateWithIdResponseMsg)(nil), "internal.CryptoKeyCreateWithIdResponseMsg")
	proto.RegisterType((*CryptoKeySpec)(nil), "internal.CryptoKeySpec")
	proto.RegisterType((*CryptoKeyReadRequest)(nil), "internal.CryptoKeyReadRequest")
	proto.RegisterType((*CryptoKeyReadRequestMsg)(nil), "internal.CryptoKeyReadRequestMsg")
	proto.RegisterType((*CryptoKeyReadResponse)(nil), "internal.CryptoKeyReadResponse")
	proto.RegisterType((*CryptoKeyReadResponseMsg)(nil), "internal.CryptoKeyReadResponseMsg")
	proto.RegisterType((*CryptoKeyUpdateRequest)(nil), "internal.CryptoKeyUpdateRequest")
	proto.RegisterType((*CryptoKeyUpdateRequestMsg)(nil), "internal.CryptoKeyUpdateRequestMsg")
	proto.RegisterType((*CryptoKeyUpdateResponse)(nil), "internal.CryptoKeyUpdateResponse")
	proto.RegisterType((*CryptoKeyUpdateResponseMsg)(nil), "internal.CryptoKeyUpdateResponseMsg")
	proto.RegisterType((*CryptoKeyDeleteRequest)(nil), "internal.CryptoKeyDeleteRequest")
	proto.RegisterType((*CryptoKeyDeleteRequestMsg)(nil), "internal.CryptoKeyDeleteRequestMsg")
	proto.RegisterType((*CryptoKeyDeleteResponse)(nil), "internal.CryptoKeyDeleteResponse")
	proto.RegisterType((*CryptoKeyDeleteResponseMsg)(nil), "internal.CryptoKeyDeleteResponseMsg")
	proto.RegisterType((*CryptoAsymKeyCreateRequest)(nil), "internal.CryptoAsymKeyCreateRequest")
	proto.RegisterType((*CryptoAsymKeyCreateRequestMsg)(nil), "internal.CryptoAsymKeyCreateRequestMsg")
	proto.RegisterType((*CryptoAsymKeyCreateResponse)(nil), "internal.CryptoAsymKeyCreateResponse")
	proto.RegisterType((*CryptoAsymKeyCreateResponseMsg)(nil), "internal.CryptoAsymKeyCreateResponseMsg")
	proto.RegisterType((*CryptoAsymKeyDeleteRequest)(nil), "internal.CryptoAsymKeyDeleteRequest")
	proto.RegisterType((*CryptoAsymKeyDeleteRequestMsg)(nil), "internal.CryptoAsymKeyDeleteRequestMsg")
	proto.RegisterType((*CryptoAsymKeyDeleteResponse)(nil), "internal.CryptoAsymKeyDeleteResponse")
	proto.RegisterType((*CryptoAsymKeyDeleteResponseMsg)(nil), "internal.CryptoAsymKeyDeleteResponseMsg")
	proto.RegisterType((*CryptoAsymKeySpec)(nil), "internal.CryptoAsymKeySpec")
	proto.RegisterType((*CryptoAsymKeyWriteRequest)(nil), "internal.CryptoAsymKeyWriteRequest")
	proto.RegisterType((*CryptoAsymKeyWriteRequestMsg)(nil), "internal.CryptoAsymKeyWriteRequestMsg")
	proto.RegisterType((*CryptoAsymKeyWriteResponse)(nil), "internal.CryptoAsymKeyWriteResponse")
	proto.RegisterType((*CryptoAsymKeyWriteResponseMsg)(nil), "internal.CryptoAsymKeyWriteResponseMsg")
	proto.RegisterType((*ECCPoint)(nil), "internal.ECCPoint")
	proto.RegisterType((*CryptoAsymApiECCDomainParamsFp)(nil), "internal.CryptoAsymApiECCDomainParamsFp")
	proto.RegisterType((*CryptoAsymApiReqECCPointMulFp)(nil), "internal.CryptoAsymApiReqECCPointMulFp")
	proto.RegisterType((*CryptoAsymApiRespECCPointMulFp)(nil), "internal.CryptoAsymApiRespECCPointMulFp")
	proto.RegisterType((*CryptoAsymApiReqECDSASignatureGenFp)(nil), "internal.CryptoAsymApiReqECDSASignatureGenFp")
	proto.RegisterType((*CryptoAsymApiRespECDSASignatureGenFp)(nil), "internal.CryptoAsymApiRespECDSASignatureGenFp")
	proto.RegisterType((*CryptoAsymApiReqECDSASignatureVerifyFp)(nil), "internal.CryptoAsymApiReqECDSASignatureVerifyFp")
	proto.RegisterType((*CryptoAsymApiReqRSAEncrypt)(nil), "internal.CryptoAsymApiReqRSAEncrypt")
	proto.RegisterType((*CryptoAsymApiRespRSAEncrypt)(nil), "internal.CryptoAsymApiRespRSAEncrypt")
	proto.RegisterType((*CryptoAsymApiReqRSADecrypt)(nil), "internal.CryptoAsymApiReqRSADecrypt")
	proto.RegisterType((*CryptoAsymApiRespRSADecrypt)(nil), "internal.CryptoAsymApiRespRSADecrypt")
	proto.RegisterType((*CryptoAsymApiReqRSACRTDecrypt)(nil), "internal.CryptoAsymApiReqRSACRTDecrypt")
	proto.RegisterType((*CryptoAsymApiRespRSACRTDecrypt)(nil), "internal.CryptoAsymApiRespRSACRTDecrypt")
	proto.RegisterType((*CryptoAsymApiReqSetupPrivateKey)(nil), "internal.CryptoAsymApiReqSetupPrivateKey")
	proto.RegisterType((*CryptoAsymApiRespECDSAKeyInfo)(nil), "internal.CryptoAsymApiRespECDSAKeyInfo")
	proto.RegisterType((*CryptoAsymApiRespRSAKeyInfo)(nil), "internal.CryptoAsymApiRespRSAKeyInfo")
	proto.RegisterType((*CryptoAsymApiRespSetupPrivateKey)(nil), "internal.CryptoAsymApiRespSetupPrivateKey")
	proto.RegisterType((*CryptoAsymApiReqSetupCert)(nil), "internal.CryptoAsymApiReqSetupCert")
	proto.RegisterType((*CryptoAsymApiRespSetupCert)(nil), "internal.CryptoAsymApiRespSetupCert")
	proto.RegisterType((*CryptoAsymRsaKey)(nil), "internal.CryptoAsymRsaKey")
	proto.RegisterType((*CryptoAsymApiReqSetupPrivateKeyEx)(nil), "internal.CryptoAsymApiReqSetupPrivateKeyEx")
	proto.RegisterType((*CryptoAsymApiRespSetupPrivateKeyEx)(nil), "internal.CryptoAsymApiRespSetupPrivateKeyEx")
	proto.RegisterType((*CryptoAsymApiReqRSASignatureGen)(nil), "internal.CryptoAsymApiReqRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiRespRSASignatureGen)(nil), "internal.CryptoAsymApiRespRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiReqRSASignatureVerify)(nil), "internal.CryptoAsymApiReqRSASignatureVerify")
	proto.RegisterType((*CryptoSymmApiReqHashGenerate)(nil), "internal.CryptoSymmApiReqHashGenerate")
	proto.RegisterType((*CryptoSymmApiRespHashGenerate)(nil), "internal.CryptoSymmApiRespHashGenerate")
	proto.RegisterType((*CryptoSymmApiReqHashVerify)(nil), "internal.CryptoSymmApiReqHashVerify")
	proto.RegisterType((*CryptoAsymApiReqFIPSRSASignatureGen)(nil), "internal.CryptoAsymApiReqFIPSRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiRespFIPSRSASignatureGen)(nil), "internal.CryptoAsymApiRespFIPSRSASignatureGen")
	proto.RegisterType((*CryptoAsymApiReqFIPSRSASignatureVerify)(nil), "internal.CryptoAsymApiReqFIPSRSASignatureVerify")
	proto.RegisterType((*CryptoApiRequest)(nil), "internal.CryptoApiRequest")
	proto.RegisterType((*CryptoApiResponse)(nil), "internal.CryptoApiResponse")
	proto.RegisterType((*CryptoApiRequestMsg)(nil), "internal.CryptoApiRequestMsg")
	proto.RegisterType((*CryptoApiResponseMsg)(nil), "internal.CryptoApiResponseMsg")
	proto.RegisterType((*DescrAolRequest)(nil), "internal.DescrAolRequest")
	proto.RegisterType((*DescrAolRequestMsg)(nil), "internal.DescrAolRequestMsg")
	proto.RegisterType((*DescrAolSpec)(nil), "internal.DescrAolSpec")
	proto.RegisterType((*DescrAolResponseMsg)(nil), "internal.DescrAolResponseMsg")
	proto.RegisterType((*ProxycCbKeyHandle)(nil), "internal.ProxycCbKeyHandle")
	proto.RegisterType((*ProxycCbSpec)(nil), "internal.ProxycCbSpec")
	proto.RegisterType((*ProxycCbRequestMsg)(nil), "internal.ProxycCbRequestMsg")
	proto.RegisterType((*ProxycCbStatus)(nil), "internal.ProxycCbStatus")
	proto.RegisterType((*ProxycCbResponse)(nil), "internal.ProxycCbResponse")
	proto.RegisterType((*ProxycCbResponseMsg)(nil), "internal.ProxycCbResponseMsg")
	proto.RegisterType((*ProxycCbDeleteRequest)(nil), "internal.ProxycCbDeleteRequest")
	proto.RegisterType((*ProxycCbDeleteRequestMsg)(nil), "internal.ProxycCbDeleteRequestMsg")
	proto.RegisterType((*ProxycCbDeleteResponseMsg)(nil), "internal.ProxycCbDeleteResponseMsg")
	proto.RegisterType((*ProxycCbGetRequest)(nil), "internal.ProxycCbGetRequest")
	proto.RegisterType((*ProxycCbGetRequestMsg)(nil), "internal.ProxycCbGetRequestMsg")
	proto.RegisterType((*ProxycCbStats)(nil), "internal.ProxycCbStats")
	proto.RegisterType((*ProxycCbGetResponse)(nil), "internal.ProxycCbGetResponse")
	proto.RegisterType((*ProxycCbGetResponseMsg)(nil), "internal.ProxycCbGetResponseMsg")
	proto.RegisterType((*ProxyrCbKeyHandle)(nil), "internal.ProxyrCbKeyHandle")
	proto.RegisterType((*ProxyrCbSpec)(nil), "internal.ProxyrCbSpec")
	proto.RegisterType((*ProxyrCbRequestMsg)(nil), "internal.ProxyrCbRequestMsg")
	proto.RegisterType((*ProxyrCbStatus)(nil), "internal.ProxyrCbStatus")
	proto.RegisterType((*ProxyrCbResponse)(nil), "internal.ProxyrCbResponse")
	proto.RegisterType((*ProxyrCbResponseMsg)(nil), "internal.ProxyrCbResponseMsg")
	proto.RegisterType((*ProxyrCbDeleteRequest)(nil), "internal.ProxyrCbDeleteRequest")
	proto.RegisterType((*ProxyrCbDeleteRequestMsg)(nil), "internal.ProxyrCbDeleteRequestMsg")
	proto.RegisterType((*ProxyrCbDeleteResponseMsg)(nil), "internal.ProxyrCbDeleteResponseMsg")
	proto.RegisterType((*ProxyrCbGetRequest)(nil), "internal.ProxyrCbGetRequest")
	proto.RegisterType((*ProxyrCbGetRequestMsg)(nil), "internal.ProxyrCbGetRequestMsg")
	proto.RegisterType((*ProxyrCbStats)(nil), "internal.ProxyrCbStats")
	proto.RegisterType((*ProxyrCbGetResponse)(nil), "internal.ProxyrCbGetResponse")
	proto.RegisterType((*ProxyrCbGetResponseMsg)(nil), "internal.ProxyrCbGetResponseMsg")
	proto.RegisterType((*RawrCbKeyHandle)(nil), "internal.RawrCbKeyHandle")
	proto.RegisterType((*RawrCbSpec)(nil), "internal.RawrCbSpec")
	proto.RegisterType((*RawrCbRequestMsg)(nil), "internal.RawrCbRequestMsg")
	proto.RegisterType((*RawrCbStatus)(nil), "internal.RawrCbStatus")
	proto.RegisterType((*RawrCbResponse)(nil), "internal.RawrCbResponse")
	proto.RegisterType((*RawrCbResponseMsg)(nil), "internal.RawrCbResponseMsg")
	proto.RegisterType((*RawrCbDeleteRequest)(nil), "internal.RawrCbDeleteRequest")
	proto.RegisterType((*RawrCbDeleteRequestMsg)(nil), "internal.RawrCbDeleteRequestMsg")
	proto.RegisterType((*RawrCbDeleteResponseMsg)(nil), "internal.RawrCbDeleteResponseMsg")
	proto.RegisterType((*RawrCbGetRequest)(nil), "internal.RawrCbGetRequest")
	proto.RegisterType((*RawrCbGetRequestMsg)(nil), "internal.RawrCbGetRequestMsg")
	proto.RegisterType((*RawrCbStats)(nil), "internal.RawrCbStats")
	proto.RegisterType((*RawrCbGetResponse)(nil), "internal.RawrCbGetResponse")
	proto.RegisterType((*RawrCbGetResponseMsg)(nil), "internal.RawrCbGetResponseMsg")
	proto.RegisterType((*RawcCbKeyHandle)(nil), "internal.RawcCbKeyHandle")
	proto.RegisterType((*RawcCbSpec)(nil), "internal.RawcCbSpec")
	proto.RegisterType((*RawcCbRequestMsg)(nil), "internal.RawcCbRequestMsg")
	proto.RegisterType((*RawcCbStatus)(nil), "internal.RawcCbStatus")
	proto.RegisterType((*RawcCbResponse)(nil), "internal.RawcCbResponse")
	proto.RegisterType((*RawcCbResponseMsg)(nil), "internal.RawcCbResponseMsg")
	proto.RegisterType((*RawcCbDeleteRequest)(nil), "internal.RawcCbDeleteRequest")
	proto.RegisterType((*RawcCbDeleteRequestMsg)(nil), "internal.RawcCbDeleteRequestMsg")
	proto.RegisterType((*RawcCbDeleteResponse)(nil), "internal.RawcCbDeleteResponse")
	proto.RegisterType((*RawcCbDeleteResponseMsg)(nil), "internal.RawcCbDeleteResponseMsg")
	proto.RegisterType((*RawcCbGetRequest)(nil), "internal.RawcCbGetRequest")
	proto.RegisterType((*RawcCbGetRequestMsg)(nil), "internal.RawcCbGetRequestMsg")
	proto.RegisterType((*RawcCbStats)(nil), "internal.RawcCbStats")
	proto.RegisterType((*RawcCbGetResponse)(nil), "internal.RawcCbGetResponse")
	proto.RegisterType((*RawcCbGetResponseMsg)(nil), "internal.RawcCbGetResponseMsg")
	proto.RegisterType((*VmotionDebugSendRequestMsg)(nil), "internal.VmotionDebugSendRequestMsg")
	proto.RegisterType((*VmotionDebugSendRequest)(nil), "internal.VmotionDebugSendRequest")
	proto.RegisterType((*VmotionDebugResponseMsg)(nil), "internal.VmotionDebugResponseMsg")
	proto.RegisterType((*VmotionStats)(nil), "internal.VmotionStats")
	proto.RegisterType((*VmotionDebugEp)(nil), "internal.VmotionDebugEp")
	proto.RegisterType((*VmotionActiveEp)(nil), "internal.VmotionActiveEp")
	proto.RegisterType((*VmotionDebugResponse)(nil), "internal.VmotionDebugResponse")
	proto.RegisterType((*TestSendFinRequestMsg)(nil), "internal.TestSendFinRequestMsg")
	proto.RegisterType((*TestSendFinRequest)(nil), "internal.TestSendFinRequest")
	proto.RegisterType((*TestSendFinResponseMsg)(nil), "internal.TestSendFinResponseMsg")
	proto.RegisterType((*TestSendFinResponse)(nil), "internal.TestSendFinResponse")
	proto.RegisterType((*TestClockSyncRequestMsg)(nil), "internal.TestClockSyncRequestMsg")
	proto.RegisterType((*TestClockSyncRequest)(nil), "internal.TestClockSyncRequest")
	proto.RegisterType((*TestClockSyncResponseMsg)(nil), "internal.TestClockSyncResponseMsg")
	proto.RegisterType((*TestClockSyncResponse)(nil), "internal.TestClockSyncResponse")
	proto.RegisterType((*TestInjectFtePacketRequestMsg)(nil), "internal.TestInjectFtePacketRequestMsg")
	proto.RegisterType((*TestInjectFtePacketRequest)(nil), "internal.TestInjectFtePacketRequest")
	proto.RegisterType((*TestInjectFtePacketResponseMsg)(nil), "internal.TestInjectFtePacketResponseMsg")
	proto.RegisterType((*TestInjectFtePacketResponse)(nil), "internal.TestInjectFtePacketResponse")
	proto.RegisterType((*FlowHashGetResponseMsg)(nil), "internal.FlowHashGetResponseMsg")
	proto.RegisterType((*FlowHashGetResponse)(nil), "internal.FlowHashGetResponse")
	proto.RegisterType((*FlowHashGetRequest)(nil), "internal.FlowHashGetRequest")
	proto.RegisterType((*FlowHashGetRequestMsg)(nil), "internal.FlowHashGetRequestMsg")
	proto.RegisterType((*InternalPortStatus)(nil), "internal.InternalPortStatus")
	proto.RegisterType((*InternalPortStats)(nil), "internal.InternalPortStats")
	proto.RegisterType((*InternalPortResponse)(nil), "internal.InternalPortResponse")
	proto.RegisterType((*InternalPortResponseMsg)(nil), "internal.InternalPortResponseMsg")
	proto.RegisterType((*InternalPortRequest)(nil), "internal.InternalPortRequest")
	proto.RegisterType((*InternalPortRequestMsg)(nil), "internal.InternalPortRequestMsg")
	proto.RegisterEnum("internal.SoftwarePhvPipeline", SoftwarePhvPipeline_name, SoftwarePhvPipeline_value)
	proto.RegisterEnum("internal.CryptoApiHashType", CryptoApiHashType_name, CryptoApiHashType_value)
	proto.RegisterEnum("internal.CryptoApiType", CryptoApiType_name, CryptoApiType_value)
	proto.RegisterEnum("internal.UpdateType", UpdateType_name, UpdateType_value)
	proto.RegisterEnum("internal.IntPortSpeed", IntPortSpeed_name, IntPortSpeed_value)
	proto.RegisterEnum("internal.IntPortDplxMode", IntPortDplxMode_name, IntPortDplxMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Internal service

type InternalClient interface {
	// Program resolution related APIs
	GetProgramAddress(ctx context.Context, in *GetProgramAddressRequestMsg, opts ...grpc.CallOption) (*ProgramAddressResponseMsg, error)
	// Program resolution related APIs
	AllocHbmAddress(ctx context.Context, in *AllocHbmAddressRequestMsg, opts ...grpc.CallOption) (*AllocHbmAddressResponseMsg, error)
	// LIF BDF association APIs
	ConfigureLifBdf(ctx context.Context, in *ConfigureLifBdfRequestMsg, opts ...grpc.CallOption) (*ConfigureLifBdfResponseMsg, error)
	// Inject a software PHV
	SoftwarePhvInject(ctx context.Context, in *SoftwarePhvInjectMsg, opts ...grpc.CallOption) (*SoftwarePhvResponseMsg, error)
	// Get software PHV injection status
	SoftwarePhvGet(ctx context.Context, in *SoftwarePhvGetRequestMsg, opts ...grpc.CallOption) (*SoftwarePhvGetResponseMsg, error)
	// Simulator service definition
	LogFlow(ctx context.Context, in *LogFlowRequestMsg, opts ...grpc.CallOption) (*LogFlowResponseMsg, error)
	// Quiesce RPCs
	QuiesceMsgSnd(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	QuiesceStart(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	QuiesceStop(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// TcpCb
	TcpCbCreate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error)
	TcpCbUpdate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error)
	TcpCbDelete(ctx context.Context, in *TcpCbDeleteRequestMsg, opts ...grpc.CallOption) (*TcpCbDeleteResponseMsg, error)
	TcpCbGet(ctx context.Context, in *TcpCbGetRequestMsg, opts ...grpc.CallOption) (*TcpCbGetResponseMsg, error)
	// TlsCb
	TlsCbCreate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error)
	TlsCbUpdate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error)
	TlsCbDelete(ctx context.Context, in *TlsCbDeleteRequestMsg, opts ...grpc.CallOption) (*TlsCbDeleteResponseMsg, error)
	TlsCbGet(ctx context.Context, in *TlsCbGetRequestMsg, opts ...grpc.CallOption) (*TlsCbGetResponseMsg, error)
	// Wring
	WRingCreate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error)
	WRingUpdate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error)
	// rpc WRingDelete (WRingDeleteRequestMsg) returns (WRingDeleteResponseMsg) {}
	WRingGetEntries(ctx context.Context, in *WRingGetEntriesRequestMsg, opts ...grpc.CallOption) (*WRingGetEntriesResponseMsg, error)
	WRingGetMeta(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingGetMetaResponseMsg, error)
	WRingSetMeta(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingSetMetaResponseMsg, error)
	// barco
	GetOpaqueTagAddr(ctx context.Context, in *GetOpaqueTagAddrRequestMsg, opts ...grpc.CallOption) (*GetOpaqueTagAddrResponseMsg, error)
	BarcoGetReqDescrEntry(ctx context.Context, in *BarcoGetReqDescrEntryRequestMsg, opts ...grpc.CallOption) (*BarcoGetReqDescrEntryResponseMsg, error)
	BarcoGetRingMeta(ctx context.Context, in *BarcoGetRingMetaRequestMsg, opts ...grpc.CallOption) (*BarcoGetRingMetaResponseMsg, error)
	BarcoGetRingMetaConfig(ctx context.Context, in *BarcoGetRingMetaConfigRequestMsg, opts ...grpc.CallOption) (*BarcoGetRingMetaConfigResponseMsg, error)
	// Crypto keys
	CryptoKeyCreate(ctx context.Context, in *CryptoKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateResponseMsg, error)
	CryptoKeyCreateWithId(ctx context.Context, in *CryptoKeyCreateWithIdRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateWithIdResponseMsg, error)
	CryptoKeyRead(ctx context.Context, in *CryptoKeyReadRequestMsg, opts ...grpc.CallOption) (*CryptoKeyReadResponseMsg, error)
	CryptoKeyUpdate(ctx context.Context, in *CryptoKeyUpdateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyUpdateResponseMsg, error)
	CryptoKeyDelete(ctx context.Context, in *CryptoKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoKeyDeleteResponseMsg, error)
	CryptoAsymKeyCreate(ctx context.Context, in *CryptoAsymKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoAsymKeyCreateResponseMsg, error)
	CryptoAsymKeyDelete(ctx context.Context, in *CryptoAsymKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoAsymKeyDeleteResponseMsg, error)
	CryptoAsymKeyWrite(ctx context.Context, in *CryptoAsymKeyWriteRequestMsg, opts ...grpc.CallOption) (*CryptoAsymKeyWriteResponseMsg, error)
	// CryptoApi
	CryptoApiInvoke(ctx context.Context, in *CryptoApiRequestMsg, opts ...grpc.CallOption) (*CryptoApiResponseMsg, error)
	// DescrAol
	DescrAolGet(ctx context.Context, in *DescrAolRequestMsg, opts ...grpc.CallOption) (*DescrAolResponseMsg, error)
	ProxycCbCreate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error)
	ProxycCbUpdate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error)
	ProxycCbDelete(ctx context.Context, in *ProxycCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxycCbDeleteResponseMsg, error)
	ProxycCbGet(ctx context.Context, in *ProxycCbGetRequestMsg, opts ...grpc.CallOption) (*ProxycCbGetResponseMsg, error)
	ProxyrCbCreate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error)
	ProxyrCbUpdate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error)
	ProxyrCbDelete(ctx context.Context, in *ProxyrCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxyrCbDeleteResponseMsg, error)
	ProxyrCbGet(ctx context.Context, in *ProxyrCbGetRequestMsg, opts ...grpc.CallOption) (*ProxyrCbGetResponseMsg, error)
	RawrCbCreate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error)
	RawrCbUpdate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error)
	RawrCbDelete(ctx context.Context, in *RawrCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawrCbDeleteResponseMsg, error)
	RawrCbGet(ctx context.Context, in *RawrCbGetRequestMsg, opts ...grpc.CallOption) (*RawrCbGetResponseMsg, error)
	RawcCbCreate(ctx context.Context, in *RawcCbRequestMsg, opts ...grpc.CallOption) (*RawcCbResponseMsg, error)
	RawcCbUpdate(ctx context.Context, in *RawcCbRequestMsg, opts ...grpc.CallOption) (*RawcCbResponseMsg, error)
	RawcCbDelete(ctx context.Context, in *RawcCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawcCbDeleteResponseMsg, error)
	RawcCbGet(ctx context.Context, in *RawcCbGetRequestMsg, opts ...grpc.CallOption) (*RawcCbGetResponseMsg, error)
	// vMotion debug dump
	VmotionDebugReq(ctx context.Context, in *VmotionDebugSendRequestMsg, opts ...grpc.CallOption) (*VmotionDebugResponseMsg, error)
	// Test send fin
	TestSendFinReq(ctx context.Context, in *TestSendFinRequestMsg, opts ...grpc.CallOption) (*TestSendFinResponseMsg, error)
	// Test clock sync
	TestClockSyncReq(ctx context.Context, in *TestClockSyncRequestMsg, opts ...grpc.CallOption) (*TestClockSyncResponseMsg, error)
	FlowHashGet(ctx context.Context, in *FlowHashGetRequestMsg, opts ...grpc.CallOption) (*FlowHashGetResponseMsg, error)
	// Internal (Marvell) port status
	InternalPortGet(ctx context.Context, in *InternalPortRequestMsg, opts ...grpc.CallOption) (*InternalPortResponseMsg, error)
	// Inject Packets to FTE
	TestFteInjectPackets(ctx context.Context, in *TestInjectFtePacketRequestMsg, opts ...grpc.CallOption) (*TestInjectFtePacketResponseMsg, error)
}

type internalClient struct {
	cc *grpc.ClientConn
}

func NewInternalClient(cc *grpc.ClientConn) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) GetProgramAddress(ctx context.Context, in *GetProgramAddressRequestMsg, opts ...grpc.CallOption) (*ProgramAddressResponseMsg, error) {
	out := new(ProgramAddressResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/GetProgramAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) AllocHbmAddress(ctx context.Context, in *AllocHbmAddressRequestMsg, opts ...grpc.CallOption) (*AllocHbmAddressResponseMsg, error) {
	out := new(AllocHbmAddressResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/AllocHbmAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ConfigureLifBdf(ctx context.Context, in *ConfigureLifBdfRequestMsg, opts ...grpc.CallOption) (*ConfigureLifBdfResponseMsg, error) {
	out := new(ConfigureLifBdfResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ConfigureLifBdf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) SoftwarePhvInject(ctx context.Context, in *SoftwarePhvInjectMsg, opts ...grpc.CallOption) (*SoftwarePhvResponseMsg, error) {
	out := new(SoftwarePhvResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/SoftwarePhvInject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) SoftwarePhvGet(ctx context.Context, in *SoftwarePhvGetRequestMsg, opts ...grpc.CallOption) (*SoftwarePhvGetResponseMsg, error) {
	out := new(SoftwarePhvGetResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/SoftwarePhvGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) LogFlow(ctx context.Context, in *LogFlowRequestMsg, opts ...grpc.CallOption) (*LogFlowResponseMsg, error) {
	out := new(LogFlowResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/LogFlow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) QuiesceMsgSnd(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/internal.Internal/QuiesceMsgSnd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) QuiesceStart(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/internal.Internal/QuiesceStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) QuiesceStop(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := grpc.Invoke(ctx, "/internal.Internal/QuiesceStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TcpCbCreate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	out := new(TcpCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TcpCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TcpCbUpdate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	out := new(TcpCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TcpCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TcpCbDelete(ctx context.Context, in *TcpCbDeleteRequestMsg, opts ...grpc.CallOption) (*TcpCbDeleteResponseMsg, error) {
	out := new(TcpCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TcpCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TcpCbGet(ctx context.Context, in *TcpCbGetRequestMsg, opts ...grpc.CallOption) (*TcpCbGetResponseMsg, error) {
	out := new(TcpCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TcpCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TlsCbCreate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error) {
	out := new(TlsCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TlsCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TlsCbUpdate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error) {
	out := new(TlsCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TlsCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TlsCbDelete(ctx context.Context, in *TlsCbDeleteRequestMsg, opts ...grpc.CallOption) (*TlsCbDeleteResponseMsg, error) {
	out := new(TlsCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TlsCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TlsCbGet(ctx context.Context, in *TlsCbGetRequestMsg, opts ...grpc.CallOption) (*TlsCbGetResponseMsg, error) {
	out := new(TlsCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TlsCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) WRingCreate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error) {
	out := new(WRingResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/WRingCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) WRingUpdate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error) {
	out := new(WRingResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/WRingUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) WRingGetEntries(ctx context.Context, in *WRingGetEntriesRequestMsg, opts ...grpc.CallOption) (*WRingGetEntriesResponseMsg, error) {
	out := new(WRingGetEntriesResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/WRingGetEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) WRingGetMeta(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingGetMetaResponseMsg, error) {
	out := new(WRingGetMetaResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/WRingGetMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) WRingSetMeta(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingSetMetaResponseMsg, error) {
	out := new(WRingSetMetaResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/WRingSetMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) GetOpaqueTagAddr(ctx context.Context, in *GetOpaqueTagAddrRequestMsg, opts ...grpc.CallOption) (*GetOpaqueTagAddrResponseMsg, error) {
	out := new(GetOpaqueTagAddrResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/GetOpaqueTagAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) BarcoGetReqDescrEntry(ctx context.Context, in *BarcoGetReqDescrEntryRequestMsg, opts ...grpc.CallOption) (*BarcoGetReqDescrEntryResponseMsg, error) {
	out := new(BarcoGetReqDescrEntryResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/BarcoGetReqDescrEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) BarcoGetRingMeta(ctx context.Context, in *BarcoGetRingMetaRequestMsg, opts ...grpc.CallOption) (*BarcoGetRingMetaResponseMsg, error) {
	out := new(BarcoGetRingMetaResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/BarcoGetRingMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) BarcoGetRingMetaConfig(ctx context.Context, in *BarcoGetRingMetaConfigRequestMsg, opts ...grpc.CallOption) (*BarcoGetRingMetaConfigResponseMsg, error) {
	out := new(BarcoGetRingMetaConfigResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/BarcoGetRingMetaConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) CryptoKeyCreate(ctx context.Context, in *CryptoKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateResponseMsg, error) {
	out := new(CryptoKeyCreateResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/CryptoKeyCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) CryptoKeyCreateWithId(ctx context.Context, in *CryptoKeyCreateWithIdRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateWithIdResponseMsg, error) {
	out := new(CryptoKeyCreateWithIdResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/CryptoKeyCreateWithId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) CryptoKeyRead(ctx context.Context, in *CryptoKeyReadRequestMsg, opts ...grpc.CallOption) (*CryptoKeyReadResponseMsg, error) {
	out := new(CryptoKeyReadResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/CryptoKeyRead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) CryptoKeyUpdate(ctx context.Context, in *CryptoKeyUpdateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyUpdateResponseMsg, error) {
	out := new(CryptoKeyUpdateResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/CryptoKeyUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) CryptoKeyDelete(ctx context.Context, in *CryptoKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoKeyDeleteResponseMsg, error) {
	out := new(CryptoKeyDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/CryptoKeyDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) CryptoAsymKeyCreate(ctx context.Context, in *CryptoAsymKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoAsymKeyCreateResponseMsg, error) {
	out := new(CryptoAsymKeyCreateResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/CryptoAsymKeyCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) CryptoAsymKeyDelete(ctx context.Context, in *CryptoAsymKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoAsymKeyDeleteResponseMsg, error) {
	out := new(CryptoAsymKeyDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/CryptoAsymKeyDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) CryptoAsymKeyWrite(ctx context.Context, in *CryptoAsymKeyWriteRequestMsg, opts ...grpc.CallOption) (*CryptoAsymKeyWriteResponseMsg, error) {
	out := new(CryptoAsymKeyWriteResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/CryptoAsymKeyWrite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) CryptoApiInvoke(ctx context.Context, in *CryptoApiRequestMsg, opts ...grpc.CallOption) (*CryptoApiResponseMsg, error) {
	out := new(CryptoApiResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/CryptoApiInvoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) DescrAolGet(ctx context.Context, in *DescrAolRequestMsg, opts ...grpc.CallOption) (*DescrAolResponseMsg, error) {
	out := new(DescrAolResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/DescrAolGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProxycCbCreate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error) {
	out := new(ProxycCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ProxycCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProxycCbUpdate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error) {
	out := new(ProxycCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ProxycCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProxycCbDelete(ctx context.Context, in *ProxycCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxycCbDeleteResponseMsg, error) {
	out := new(ProxycCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ProxycCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProxycCbGet(ctx context.Context, in *ProxycCbGetRequestMsg, opts ...grpc.CallOption) (*ProxycCbGetResponseMsg, error) {
	out := new(ProxycCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ProxycCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProxyrCbCreate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error) {
	out := new(ProxyrCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ProxyrCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProxyrCbUpdate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error) {
	out := new(ProxyrCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ProxyrCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProxyrCbDelete(ctx context.Context, in *ProxyrCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxyrCbDeleteResponseMsg, error) {
	out := new(ProxyrCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ProxyrCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProxyrCbGet(ctx context.Context, in *ProxyrCbGetRequestMsg, opts ...grpc.CallOption) (*ProxyrCbGetResponseMsg, error) {
	out := new(ProxyrCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/ProxyrCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) RawrCbCreate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error) {
	out := new(RawrCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/RawrCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) RawrCbUpdate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error) {
	out := new(RawrCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/RawrCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) RawrCbDelete(ctx context.Context, in *RawrCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawrCbDeleteResponseMsg, error) {
	out := new(RawrCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/RawrCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) RawrCbGet(ctx context.Context, in *RawrCbGetRequestMsg, opts ...grpc.CallOption) (*RawrCbGetResponseMsg, error) {
	out := new(RawrCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/RawrCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) RawcCbCreate(ctx context.Context, in *RawcCbRequestMsg, opts ...grpc.CallOption) (*RawcCbResponseMsg, error) {
	out := new(RawcCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/RawcCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) RawcCbUpdate(ctx context.Context, in *RawcCbRequestMsg, opts ...grpc.CallOption) (*RawcCbResponseMsg, error) {
	out := new(RawcCbResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/RawcCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) RawcCbDelete(ctx context.Context, in *RawcCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawcCbDeleteResponseMsg, error) {
	out := new(RawcCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/RawcCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) RawcCbGet(ctx context.Context, in *RawcCbGetRequestMsg, opts ...grpc.CallOption) (*RawcCbGetResponseMsg, error) {
	out := new(RawcCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/RawcCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) VmotionDebugReq(ctx context.Context, in *VmotionDebugSendRequestMsg, opts ...grpc.CallOption) (*VmotionDebugResponseMsg, error) {
	out := new(VmotionDebugResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/VmotionDebugReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TestSendFinReq(ctx context.Context, in *TestSendFinRequestMsg, opts ...grpc.CallOption) (*TestSendFinResponseMsg, error) {
	out := new(TestSendFinResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TestSendFinReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TestClockSyncReq(ctx context.Context, in *TestClockSyncRequestMsg, opts ...grpc.CallOption) (*TestClockSyncResponseMsg, error) {
	out := new(TestClockSyncResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TestClockSyncReq", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) FlowHashGet(ctx context.Context, in *FlowHashGetRequestMsg, opts ...grpc.CallOption) (*FlowHashGetResponseMsg, error) {
	out := new(FlowHashGetResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/FlowHashGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) InternalPortGet(ctx context.Context, in *InternalPortRequestMsg, opts ...grpc.CallOption) (*InternalPortResponseMsg, error) {
	out := new(InternalPortResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/InternalPortGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) TestFteInjectPackets(ctx context.Context, in *TestInjectFtePacketRequestMsg, opts ...grpc.CallOption) (*TestInjectFtePacketResponseMsg, error) {
	out := new(TestInjectFtePacketResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/TestFteInjectPackets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Internal service

type InternalServer interface {
	// Program resolution related APIs
	GetProgramAddress(context.Context, *GetProgramAddressRequestMsg) (*ProgramAddressResponseMsg, error)
	// Program resolution related APIs
	AllocHbmAddress(context.Context, *AllocHbmAddressRequestMsg) (*AllocHbmAddressResponseMsg, error)
	// LIF BDF association APIs
	ConfigureLifBdf(context.Context, *ConfigureLifBdfRequestMsg) (*ConfigureLifBdfResponseMsg, error)
	// Inject a software PHV
	SoftwarePhvInject(context.Context, *SoftwarePhvInjectMsg) (*SoftwarePhvResponseMsg, error)
	// Get software PHV injection status
	SoftwarePhvGet(context.Context, *SoftwarePhvGetRequestMsg) (*SoftwarePhvGetResponseMsg, error)
	// Simulator service definition
	LogFlow(context.Context, *LogFlowRequestMsg) (*LogFlowResponseMsg, error)
	// Quiesce RPCs
	QuiesceMsgSnd(context.Context, *EmptyRequest) (*EmptyResponse, error)
	QuiesceStart(context.Context, *EmptyRequest) (*EmptyResponse, error)
	QuiesceStop(context.Context, *EmptyRequest) (*EmptyResponse, error)
	// TcpCb
	TcpCbCreate(context.Context, *TcpCbRequestMsg) (*TcpCbResponseMsg, error)
	TcpCbUpdate(context.Context, *TcpCbRequestMsg) (*TcpCbResponseMsg, error)
	TcpCbDelete(context.Context, *TcpCbDeleteRequestMsg) (*TcpCbDeleteResponseMsg, error)
	TcpCbGet(context.Context, *TcpCbGetRequestMsg) (*TcpCbGetResponseMsg, error)
	// TlsCb
	TlsCbCreate(context.Context, *TlsCbRequestMsg) (*TlsCbResponseMsg, error)
	TlsCbUpdate(context.Context, *TlsCbRequestMsg) (*TlsCbResponseMsg, error)
	TlsCbDelete(context.Context, *TlsCbDeleteRequestMsg) (*TlsCbDeleteResponseMsg, error)
	TlsCbGet(context.Context, *TlsCbGetRequestMsg) (*TlsCbGetResponseMsg, error)
	// Wring
	WRingCreate(context.Context, *WRingRequestMsg) (*WRingResponseMsg, error)
	WRingUpdate(context.Context, *WRingRequestMsg) (*WRingResponseMsg, error)
	// rpc WRingDelete (WRingDeleteRequestMsg) returns (WRingDeleteResponseMsg) {}
	WRingGetEntries(context.Context, *WRingGetEntriesRequestMsg) (*WRingGetEntriesResponseMsg, error)
	WRingGetMeta(context.Context, *WRingRequestMsg) (*WRingGetMetaResponseMsg, error)
	WRingSetMeta(context.Context, *WRingRequestMsg) (*WRingSetMetaResponseMsg, error)
	// barco
	GetOpaqueTagAddr(context.Context, *GetOpaqueTagAddrRequestMsg) (*GetOpaqueTagAddrResponseMsg, error)
	BarcoGetReqDescrEntry(context.Context, *BarcoGetReqDescrEntryRequestMsg) (*BarcoGetReqDescrEntryResponseMsg, error)
	BarcoGetRingMeta(context.Context, *BarcoGetRingMetaRequestMsg) (*BarcoGetRingMetaResponseMsg, error)
	BarcoGetRingMetaConfig(context.Context, *BarcoGetRingMetaConfigRequestMsg) (*BarcoGetRingMetaConfigResponseMsg, error)
	// Crypto keys
	CryptoKeyCreate(context.Context, *CryptoKeyCreateRequestMsg) (*CryptoKeyCreateResponseMsg, error)
	CryptoKeyCreateWithId(context.Context, *CryptoKeyCreateWithIdRequestMsg) (*CryptoKeyCreateWithIdResponseMsg, error)
	CryptoKeyRead(context.Context, *CryptoKeyReadRequestMsg) (*CryptoKeyReadResponseMsg, error)
	CryptoKeyUpdate(context.Context, *CryptoKeyUpdateRequestMsg) (*CryptoKeyUpdateResponseMsg, error)
	CryptoKeyDelete(context.Context, *CryptoKeyDeleteRequestMsg) (*CryptoKeyDeleteResponseMsg, error)
	CryptoAsymKeyCreate(context.Context, *CryptoAsymKeyCreateRequestMsg) (*CryptoAsymKeyCreateResponseMsg, error)
	CryptoAsymKeyDelete(context.Context, *CryptoAsymKeyDeleteRequestMsg) (*CryptoAsymKeyDeleteResponseMsg, error)
	CryptoAsymKeyWrite(context.Context, *CryptoAsymKeyWriteRequestMsg) (*CryptoAsymKeyWriteResponseMsg, error)
	// CryptoApi
	CryptoApiInvoke(context.Context, *CryptoApiRequestMsg) (*CryptoApiResponseMsg, error)
	// DescrAol
	DescrAolGet(context.Context, *DescrAolRequestMsg) (*DescrAolResponseMsg, error)
	ProxycCbCreate(context.Context, *ProxycCbRequestMsg) (*ProxycCbResponseMsg, error)
	ProxycCbUpdate(context.Context, *ProxycCbRequestMsg) (*ProxycCbResponseMsg, error)
	ProxycCbDelete(context.Context, *ProxycCbDeleteRequestMsg) (*ProxycCbDeleteResponseMsg, error)
	ProxycCbGet(context.Context, *ProxycCbGetRequestMsg) (*ProxycCbGetResponseMsg, error)
	ProxyrCbCreate(context.Context, *ProxyrCbRequestMsg) (*ProxyrCbResponseMsg, error)
	ProxyrCbUpdate(context.Context, *ProxyrCbRequestMsg) (*ProxyrCbResponseMsg, error)
	ProxyrCbDelete(context.Context, *ProxyrCbDeleteRequestMsg) (*ProxyrCbDeleteResponseMsg, error)
	ProxyrCbGet(context.Context, *ProxyrCbGetRequestMsg) (*ProxyrCbGetResponseMsg, error)
	RawrCbCreate(context.Context, *RawrCbRequestMsg) (*RawrCbResponseMsg, error)
	RawrCbUpdate(context.Context, *RawrCbRequestMsg) (*RawrCbResponseMsg, error)
	RawrCbDelete(context.Context, *RawrCbDeleteRequestMsg) (*RawrCbDeleteResponseMsg, error)
	RawrCbGet(context.Context, *RawrCbGetRequestMsg) (*RawrCbGetResponseMsg, error)
	RawcCbCreate(context.Context, *RawcCbRequestMsg) (*RawcCbResponseMsg, error)
	RawcCbUpdate(context.Context, *RawcCbRequestMsg) (*RawcCbResponseMsg, error)
	RawcCbDelete(context.Context, *RawcCbDeleteRequestMsg) (*RawcCbDeleteResponseMsg, error)
	RawcCbGet(context.Context, *RawcCbGetRequestMsg) (*RawcCbGetResponseMsg, error)
	// vMotion debug dump
	VmotionDebugReq(context.Context, *VmotionDebugSendRequestMsg) (*VmotionDebugResponseMsg, error)
	// Test send fin
	TestSendFinReq(context.Context, *TestSendFinRequestMsg) (*TestSendFinResponseMsg, error)
	// Test clock sync
	TestClockSyncReq(context.Context, *TestClockSyncRequestMsg) (*TestClockSyncResponseMsg, error)
	FlowHashGet(context.Context, *FlowHashGetRequestMsg) (*FlowHashGetResponseMsg, error)
	// Internal (Marvell) port status
	InternalPortGet(context.Context, *InternalPortRequestMsg) (*InternalPortResponseMsg, error)
	// Inject Packets to FTE
	TestFteInjectPackets(context.Context, *TestInjectFtePacketRequestMsg) (*TestInjectFtePacketResponseMsg, error)
}

func RegisterInternalServer(s *grpc.Server, srv InternalServer) {
	s.RegisterService(&_Internal_serviceDesc, srv)
}

func _Internal_GetProgramAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramAddressRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetProgramAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/GetProgramAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetProgramAddress(ctx, req.(*GetProgramAddressRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_AllocHbmAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocHbmAddressRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).AllocHbmAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/AllocHbmAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).AllocHbmAddress(ctx, req.(*AllocHbmAddressRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ConfigureLifBdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureLifBdfRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ConfigureLifBdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ConfigureLifBdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ConfigureLifBdf(ctx, req.(*ConfigureLifBdfRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_SoftwarePhvInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftwarePhvInjectMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).SoftwarePhvInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/SoftwarePhvInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).SoftwarePhvInject(ctx, req.(*SoftwarePhvInjectMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_SoftwarePhvGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftwarePhvGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).SoftwarePhvGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/SoftwarePhvGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).SoftwarePhvGet(ctx, req.(*SoftwarePhvGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_LogFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogFlowRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).LogFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/LogFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).LogFlow(ctx, req.(*LogFlowRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_QuiesceMsgSnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).QuiesceMsgSnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/QuiesceMsgSnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).QuiesceMsgSnd(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_QuiesceStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).QuiesceStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/QuiesceStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).QuiesceStart(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_QuiesceStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).QuiesceStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/QuiesceStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).QuiesceStop(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TcpCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TcpCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TcpCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TcpCbCreate(ctx, req.(*TcpCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TcpCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TcpCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TcpCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TcpCbUpdate(ctx, req.(*TcpCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TcpCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TcpCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TcpCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TcpCbDelete(ctx, req.(*TcpCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TcpCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TcpCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TcpCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TcpCbGet(ctx, req.(*TcpCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TlsCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TlsCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TlsCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TlsCbCreate(ctx, req.(*TlsCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TlsCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TlsCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TlsCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TlsCbUpdate(ctx, req.(*TlsCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TlsCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TlsCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TlsCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TlsCbDelete(ctx, req.(*TlsCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TlsCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TlsCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TlsCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TlsCbGet(ctx, req.(*TlsCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_WRingCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).WRingCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/WRingCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).WRingCreate(ctx, req.(*WRingRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_WRingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).WRingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/WRingUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).WRingUpdate(ctx, req.(*WRingRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_WRingGetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingGetEntriesRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).WRingGetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/WRingGetEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).WRingGetEntries(ctx, req.(*WRingGetEntriesRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_WRingGetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).WRingGetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/WRingGetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).WRingGetMeta(ctx, req.(*WRingRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_WRingSetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).WRingSetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/WRingSetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).WRingSetMeta(ctx, req.(*WRingRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_GetOpaqueTagAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpaqueTagAddrRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetOpaqueTagAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/GetOpaqueTagAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetOpaqueTagAddr(ctx, req.(*GetOpaqueTagAddrRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_BarcoGetReqDescrEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarcoGetReqDescrEntryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).BarcoGetReqDescrEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/BarcoGetReqDescrEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).BarcoGetReqDescrEntry(ctx, req.(*BarcoGetReqDescrEntryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_BarcoGetRingMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarcoGetRingMetaRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).BarcoGetRingMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/BarcoGetRingMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).BarcoGetRingMeta(ctx, req.(*BarcoGetRingMetaRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_BarcoGetRingMetaConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarcoGetRingMetaConfigRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).BarcoGetRingMetaConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/BarcoGetRingMetaConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).BarcoGetRingMetaConfig(ctx, req.(*BarcoGetRingMetaConfigRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CryptoKeyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyCreateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CryptoKeyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/CryptoKeyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CryptoKeyCreate(ctx, req.(*CryptoKeyCreateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CryptoKeyCreateWithId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyCreateWithIdRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CryptoKeyCreateWithId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/CryptoKeyCreateWithId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CryptoKeyCreateWithId(ctx, req.(*CryptoKeyCreateWithIdRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CryptoKeyRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyReadRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CryptoKeyRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/CryptoKeyRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CryptoKeyRead(ctx, req.(*CryptoKeyReadRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CryptoKeyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyUpdateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CryptoKeyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/CryptoKeyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CryptoKeyUpdate(ctx, req.(*CryptoKeyUpdateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CryptoKeyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoKeyDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CryptoKeyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/CryptoKeyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CryptoKeyDelete(ctx, req.(*CryptoKeyDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CryptoAsymKeyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoAsymKeyCreateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CryptoAsymKeyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/CryptoAsymKeyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CryptoAsymKeyCreate(ctx, req.(*CryptoAsymKeyCreateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CryptoAsymKeyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoAsymKeyDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CryptoAsymKeyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/CryptoAsymKeyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CryptoAsymKeyDelete(ctx, req.(*CryptoAsymKeyDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CryptoAsymKeyWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoAsymKeyWriteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CryptoAsymKeyWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/CryptoAsymKeyWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CryptoAsymKeyWrite(ctx, req.(*CryptoAsymKeyWriteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CryptoApiInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptoApiRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CryptoApiInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/CryptoApiInvoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CryptoApiInvoke(ctx, req.(*CryptoApiRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_DescrAolGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescrAolRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).DescrAolGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/DescrAolGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).DescrAolGet(ctx, req.(*DescrAolRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProxycCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxycCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProxycCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ProxycCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProxycCbCreate(ctx, req.(*ProxycCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProxycCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxycCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProxycCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ProxycCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProxycCbUpdate(ctx, req.(*ProxycCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProxycCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxycCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProxycCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ProxycCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProxycCbDelete(ctx, req.(*ProxycCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProxycCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxycCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProxycCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ProxycCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProxycCbGet(ctx, req.(*ProxycCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProxyrCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyrCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProxyrCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ProxyrCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProxyrCbCreate(ctx, req.(*ProxyrCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProxyrCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyrCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProxyrCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ProxyrCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProxyrCbUpdate(ctx, req.(*ProxyrCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProxyrCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyrCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProxyrCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ProxyrCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProxyrCbDelete(ctx, req.(*ProxyrCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProxyrCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyrCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProxyrCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/ProxyrCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProxyrCbGet(ctx, req.(*ProxyrCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_RawrCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawrCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RawrCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/RawrCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RawrCbCreate(ctx, req.(*RawrCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_RawrCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawrCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RawrCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/RawrCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RawrCbUpdate(ctx, req.(*RawrCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_RawrCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawrCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RawrCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/RawrCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RawrCbDelete(ctx, req.(*RawrCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_RawrCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawrCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RawrCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/RawrCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RawrCbGet(ctx, req.(*RawrCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_RawcCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawcCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RawcCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/RawcCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RawcCbCreate(ctx, req.(*RawcCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_RawcCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawcCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RawcCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/RawcCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RawcCbUpdate(ctx, req.(*RawcCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_RawcCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawcCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RawcCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/RawcCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RawcCbDelete(ctx, req.(*RawcCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_RawcCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawcCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RawcCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/RawcCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RawcCbGet(ctx, req.(*RawcCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_VmotionDebugReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmotionDebugSendRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).VmotionDebugReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/VmotionDebugReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).VmotionDebugReq(ctx, req.(*VmotionDebugSendRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TestSendFinReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSendFinRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TestSendFinReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TestSendFinReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TestSendFinReq(ctx, req.(*TestSendFinRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TestClockSyncReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestClockSyncRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TestClockSyncReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TestClockSyncReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TestClockSyncReq(ctx, req.(*TestClockSyncRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_FlowHashGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowHashGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).FlowHashGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/FlowHashGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).FlowHashGet(ctx, req.(*FlowHashGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_InternalPortGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalPortRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).InternalPortGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/InternalPortGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).InternalPortGet(ctx, req.(*InternalPortRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_TestFteInjectPackets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestInjectFtePacketRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).TestFteInjectPackets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/TestFteInjectPackets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).TestFteInjectPackets(ctx, req.(*TestInjectFtePacketRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Internal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProgramAddress",
			Handler:    _Internal_GetProgramAddress_Handler,
		},
		{
			MethodName: "AllocHbmAddress",
			Handler:    _Internal_AllocHbmAddress_Handler,
		},
		{
			MethodName: "ConfigureLifBdf",
			Handler:    _Internal_ConfigureLifBdf_Handler,
		},
		{
			MethodName: "SoftwarePhvInject",
			Handler:    _Internal_SoftwarePhvInject_Handler,
		},
		{
			MethodName: "SoftwarePhvGet",
			Handler:    _Internal_SoftwarePhvGet_Handler,
		},
		{
			MethodName: "LogFlow",
			Handler:    _Internal_LogFlow_Handler,
		},
		{
			MethodName: "QuiesceMsgSnd",
			Handler:    _Internal_QuiesceMsgSnd_Handler,
		},
		{
			MethodName: "QuiesceStart",
			Handler:    _Internal_QuiesceStart_Handler,
		},
		{
			MethodName: "QuiesceStop",
			Handler:    _Internal_QuiesceStop_Handler,
		},
		{
			MethodName: "TcpCbCreate",
			Handler:    _Internal_TcpCbCreate_Handler,
		},
		{
			MethodName: "TcpCbUpdate",
			Handler:    _Internal_TcpCbUpdate_Handler,
		},
		{
			MethodName: "TcpCbDelete",
			Handler:    _Internal_TcpCbDelete_Handler,
		},
		{
			MethodName: "TcpCbGet",
			Handler:    _Internal_TcpCbGet_Handler,
		},
		{
			MethodName: "TlsCbCreate",
			Handler:    _Internal_TlsCbCreate_Handler,
		},
		{
			MethodName: "TlsCbUpdate",
			Handler:    _Internal_TlsCbUpdate_Handler,
		},
		{
			MethodName: "TlsCbDelete",
			Handler:    _Internal_TlsCbDelete_Handler,
		},
		{
			MethodName: "TlsCbGet",
			Handler:    _Internal_TlsCbGet_Handler,
		},
		{
			MethodName: "WRingCreate",
			Handler:    _Internal_WRingCreate_Handler,
		},
		{
			MethodName: "WRingUpdate",
			Handler:    _Internal_WRingUpdate_Handler,
		},
		{
			MethodName: "WRingGetEntries",
			Handler:    _Internal_WRingGetEntries_Handler,
		},
		{
			MethodName: "WRingGetMeta",
			Handler:    _Internal_WRingGetMeta_Handler,
		},
		{
			MethodName: "WRingSetMeta",
			Handler:    _Internal_WRingSetMeta_Handler,
		},
		{
			MethodName: "GetOpaqueTagAddr",
			Handler:    _Internal_GetOpaqueTagAddr_Handler,
		},
		{
			MethodName: "BarcoGetReqDescrEntry",
			Handler:    _Internal_BarcoGetReqDescrEntry_Handler,
		},
		{
			MethodName: "BarcoGetRingMeta",
			Handler:    _Internal_BarcoGetRingMeta_Handler,
		},
		{
			MethodName: "BarcoGetRingMetaConfig",
			Handler:    _Internal_BarcoGetRingMetaConfig_Handler,
		},
		{
			MethodName: "CryptoKeyCreate",
			Handler:    _Internal_CryptoKeyCreate_Handler,
		},
		{
			MethodName: "CryptoKeyCreateWithId",
			Handler:    _Internal_CryptoKeyCreateWithId_Handler,
		},
		{
			MethodName: "CryptoKeyRead",
			Handler:    _Internal_CryptoKeyRead_Handler,
		},
		{
			MethodName: "CryptoKeyUpdate",
			Handler:    _Internal_CryptoKeyUpdate_Handler,
		},
		{
			MethodName: "CryptoKeyDelete",
			Handler:    _Internal_CryptoKeyDelete_Handler,
		},
		{
			MethodName: "CryptoAsymKeyCreate",
			Handler:    _Internal_CryptoAsymKeyCreate_Handler,
		},
		{
			MethodName: "CryptoAsymKeyDelete",
			Handler:    _Internal_CryptoAsymKeyDelete_Handler,
		},
		{
			MethodName: "CryptoAsymKeyWrite",
			Handler:    _Internal_CryptoAsymKeyWrite_Handler,
		},
		{
			MethodName: "CryptoApiInvoke",
			Handler:    _Internal_CryptoApiInvoke_Handler,
		},
		{
			MethodName: "DescrAolGet",
			Handler:    _Internal_DescrAolGet_Handler,
		},
		{
			MethodName: "ProxycCbCreate",
			Handler:    _Internal_ProxycCbCreate_Handler,
		},
		{
			MethodName: "ProxycCbUpdate",
			Handler:    _Internal_ProxycCbUpdate_Handler,
		},
		{
			MethodName: "ProxycCbDelete",
			Handler:    _Internal_ProxycCbDelete_Handler,
		},
		{
			MethodName: "ProxycCbGet",
			Handler:    _Internal_ProxycCbGet_Handler,
		},
		{
			MethodName: "ProxyrCbCreate",
			Handler:    _Internal_ProxyrCbCreate_Handler,
		},
		{
			MethodName: "ProxyrCbUpdate",
			Handler:    _Internal_ProxyrCbUpdate_Handler,
		},
		{
			MethodName: "ProxyrCbDelete",
			Handler:    _Internal_ProxyrCbDelete_Handler,
		},
		{
			MethodName: "ProxyrCbGet",
			Handler:    _Internal_ProxyrCbGet_Handler,
		},
		{
			MethodName: "RawrCbCreate",
			Handler:    _Internal_RawrCbCreate_Handler,
		},
		{
			MethodName: "RawrCbUpdate",
			Handler:    _Internal_RawrCbUpdate_Handler,
		},
		{
			MethodName: "RawrCbDelete",
			Handler:    _Internal_RawrCbDelete_Handler,
		},
		{
			MethodName: "RawrCbGet",
			Handler:    _Internal_RawrCbGet_Handler,
		},
		{
			MethodName: "RawcCbCreate",
			Handler:    _Internal_RawcCbCreate_Handler,
		},
		{
			MethodName: "RawcCbUpdate",
			Handler:    _Internal_RawcCbUpdate_Handler,
		},
		{
			MethodName: "RawcCbDelete",
			Handler:    _Internal_RawcCbDelete_Handler,
		},
		{
			MethodName: "RawcCbGet",
			Handler:    _Internal_RawcCbGet_Handler,
		},
		{
			MethodName: "VmotionDebugReq",
			Handler:    _Internal_VmotionDebugReq_Handler,
		},
		{
			MethodName: "TestSendFinReq",
			Handler:    _Internal_TestSendFinReq_Handler,
		},
		{
			MethodName: "TestClockSyncReq",
			Handler:    _Internal_TestClockSyncReq_Handler,
		},
		{
			MethodName: "FlowHashGet",
			Handler:    _Internal_FlowHashGet_Handler,
		},
		{
			MethodName: "InternalPortGet",
			Handler:    _Internal_InternalPortGet_Handler,
		},
		{
			MethodName: "TestFteInjectPackets",
			Handler:    _Internal_TestFteInjectPackets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}

// Client API for SoftwarePhv service

type SoftwarePhvClient interface {
}

type softwarePhvClient struct {
	cc *grpc.ClientConn
}

func NewSoftwarePhvClient(cc *grpc.ClientConn) SoftwarePhvClient {
	return &softwarePhvClient{cc}
}

// Server API for SoftwarePhv service

type SoftwarePhvServer interface {
}

func RegisterSoftwarePhvServer(s *grpc.Server, srv SoftwarePhvServer) {
	s.RegisterService(&_SoftwarePhv_serviceDesc, srv)
}

var _SoftwarePhv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.SoftwarePhv",
	HandlerType: (*SoftwarePhvServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "internal.proto",
}

func (m *ProgramAddressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramAddressReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Handle)))
		i += copy(dAtA[i:], m.Handle)
	}
	if len(m.ProgName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ProgName)))
		i += copy(dAtA[i:], m.ProgName)
	}
	if m.ResolveLabel {
		dAtA[i] = 0x18
		i++
		if m.ResolveLabel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	return i, nil
}

func (m *ProgramAddressResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramAddressResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Addr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Addr))
	}
	return i, nil
}

func (m *GetProgramAddressRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProgramAddressRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProgramAddressResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramAddressResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HbmAddressReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmAddressReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Handle)))
		i += copy(dAtA[i:], m.Handle)
	}
	return i, nil
}

func (m *HbmAddressResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmAddressResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Addr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Addr))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *AllocHbmAddressRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocHbmAddressRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AllocHbmAddressResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocHbmAddressResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LifBdfReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifBdfReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lif != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Lif))
	}
	if m.Bdf != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Bdf))
	}
	return i, nil
}

func (m *LifBdfResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LifBdfResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lif != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Lif))
	}
	if m.Bdf != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Bdf))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *ConfigureLifBdfRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureLifBdfRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConfigureLifBdfResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigureLifBdfResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SoftwarePhvStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pipeline != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pipeline))
	}
	if m.Enabled {
		dAtA[i] = 0x10
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Done {
		dAtA[i] = 0x18
		i++
		if m.Done {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CurrentCntr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CurrentCntr))
	}
	if m.InjectCntr != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InjectCntr))
	}
	return i, nil
}

func (m *SoftwarePhvResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *SoftwarePhvResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SoftwarePhvGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pipeline != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pipeline))
	}
	return i, nil
}

func (m *SoftwarePhvGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SoftwarePhvGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SoftwarePhvGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SoftwarePhvInject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvInject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pipeline != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pipeline))
	}
	return i, nil
}

func (m *SoftwarePhvInjectMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SoftwarePhvInjectMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LogFlowRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFlowRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LogFlowResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFlowResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LogFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *EmptyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EmptyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *TcpCbKeyHandle_TcpcbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternal(dAtA, i, uint64(m.TcpcbId))
	return i, nil
}
func (m *TcpCbKeyHandle_TcpcbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TcpcbHandle))
	i += 8
	return i, nil
}
func (m *TcpCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n3, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.RcvNxt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RcvNxt))
	}
	if m.SndNxt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SndNxt))
	}
	if m.SndUna != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SndUna))
	}
	if m.RcvTsval != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RcvTsval))
	}
	if m.TsRecent != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TsRecent))
	}
	if m.SerqBase != 0 {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SerqBase))
		i += 8
	}
	if m.DebugDol != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DebugDol))
	}
	if m.SesqBase != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SesqBase))
		i += 8
	}
	if m.SesqPi != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SesqPi))
	}
	if m.SesqCi != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SesqCi))
	}
	if m.SndWnd != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SndWnd))
	}
	if m.SndCwnd != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SndCwnd))
	}
	if m.RcvMss != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RcvMss))
	}
	if m.SourcePort != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SourcePort))
	}
	if m.DestPort != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DestPort))
	}
	if len(m.HeaderTemplate) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.HeaderTemplate)))
		i += copy(dAtA[i:], m.HeaderTemplate)
	}
	if m.State != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.State))
	}
	if m.SourceLif != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SourceLif))
	}
	if m.AsesqBase != 0 {
		dAtA[i] = 0xa1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AsesqBase))
		i += 8
	}
	if m.AsesqPi != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AsesqPi))
	}
	if m.AsesqCi != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AsesqCi))
	}
	if m.DebugDolTx != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DebugDolTx))
	}
	if m.HeaderLen != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.HeaderLen))
	}
	if m.PendingAckSend {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.PendingAckSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.L7ProxyType != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.L7ProxyType))
	}
	if m.SesqRetxCi != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SesqRetxCi))
	}
	if m.RetxSndUna != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RetxSndUna))
	}
	if m.RxTs != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RxTs))
	}
	if m.Rto != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Rto))
	}
	if m.SndCwndCnt != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SndCwndCnt))
	}
	if m.DebugDolTblsetaddr != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DebugDolTblsetaddr))
	}
	if m.SerqPi != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SerqPi))
	}
	if m.PredFlags != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PredFlags))
	}
	if m.OtherQid != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OtherQid))
	}
	if m.PacketsOut != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PacketsOut))
	}
	if m.SndSsthresh != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SndSsthresh))
	}
	if m.CcAlgo != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CcAlgo))
	}
	if m.RtoBackoff != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RtoBackoff))
	}
	if m.CpuId != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CpuId))
	}
	if m.SerqCi != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SerqCi))
	}
	if m.RcvWnd != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RcvWnd))
	}
	if m.SndWscale != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SndWscale))
	}
	if m.RcvWscale != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RcvWscale))
	}
	if m.SesqTxCi != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SesqTxCi))
	}
	if m.DelayAck {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		if m.DelayAck {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ato != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Ato))
	}
	if m.SndRecover != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SndRecover))
	}
	if m.Smss != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Smss))
	}
	if m.InitialWindow != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InitialWindow))
	}
	if m.AbcLVar != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AbcLVar))
	}
	if m.OooQueue {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x3
		i++
		if m.OooQueue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OooRx2TxQbase != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OooRx2TxQbase))
	}
	if m.RcvWup != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RcvWup))
	}
	if m.CbBase != 0 {
		dAtA[i] = 0xb9
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.CbBase))
		i += 8
	}
	if m.ZeroWindowSent != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ZeroWindowSent))
	}
	if m.CbBaseQtype1 != 0 {
		dAtA[i] = 0xc9
		i++
		dAtA[i] = 0x3
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.CbBaseQtype1))
		i += 8
	}
	if m.SrttUs != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SrttUs))
	}
	if m.SackPerm {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3
		i++
		if m.SackPerm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Timestamps {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3
		i++
		if m.Timestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TxWindowUpdatePi != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TxWindowUpdatePi))
	}
	if m.RttSeqTsoffset != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RttSeqTsoffset))
	}
	if m.RttTime != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RttTime))
	}
	if m.TsLearned != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TsLearned))
	}
	if m.TsOffset != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TsOffset))
	}
	if m.TsTime != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TsTime))
	}
	if m.ProxyType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ProxyType))
	}
	return i, nil
}

func (m *TcpCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbOoqStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbOoqStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QueueAddr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.QueueAddr))
	}
	if m.StartSeq != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StartSeq))
	}
	if m.EndSeq != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EndSeq))
	}
	if m.NumEntries != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.NumEntries))
	}
	return i, nil
}

func (m *TcpCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TcpcbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TcpcbHandle))
		i += 8
	}
	if m.OoqNotEmpty {
		dAtA[i] = 0x10
		i++
		if m.OoqNotEmpty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.OoqStatus) > 0 {
		for _, msg := range m.OoqStatus {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.TcpcbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TcpcbStatus.Size()))
		n4, err := m.TcpcbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *TcpCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n5, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *TcpCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA7 := make([]byte, len(m.ApiStatus)*10)
		var j6 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *TcpCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n8, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *TcpCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BytesRcvd != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.BytesRcvd))
	}
	if m.PktsRcvd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PktsRcvd))
	}
	if m.BytesAcked != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.BytesAcked))
	}
	if m.PureAcksRcvd != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PureAcksRcvd))
	}
	if m.DupAcksRcvd != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DupAcksRcvd))
	}
	if m.SlowPathCnt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SlowPathCnt))
	}
	if m.SerqFullCnt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SerqFullCnt))
	}
	if m.OooCnt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OooCnt))
	}
	if m.RxDropCnt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RxDropCnt))
	}
	if m.BytesSent != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.BytesSent))
	}
	if m.PktsSent != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PktsSent))
	}
	if m.PureAcksSent != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PureAcksSent))
	}
	if m.SesqPi != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SesqPi))
	}
	if m.SesqCi != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SesqCi))
	}
	if m.SendAckPi != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SendAckPi))
	}
	if m.SendAckCi != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SendAckCi))
	}
	if m.FastTimerPi != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FastTimerPi))
	}
	if m.FastTimerCi != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FastTimerCi))
	}
	if m.DelAckPi != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DelAckPi))
	}
	if m.DelAckCi != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DelAckCi))
	}
	if m.AsesqPi != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AsesqPi))
	}
	if m.AsesqCi != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AsesqCi))
	}
	if m.PendingTxPi != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PendingTxPi))
	}
	if m.PendingTxCi != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PendingTxCi))
	}
	if m.FastRetransPi != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FastRetransPi))
	}
	if m.FastRetransCi != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FastRetransCi))
	}
	if m.CleanRetxPi != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CleanRetxPi))
	}
	if m.CleanRetxCi != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CleanRetxCi))
	}
	if m.PacketsOut != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PacketsOut))
	}
	if m.SesqTxCi != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SesqTxCi))
	}
	if m.SesqRetxCi != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SesqRetxCi))
	}
	if m.AsesqRetxCi != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AsesqRetxCi))
	}
	if m.TxRingPi != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TxRingPi))
	}
	if m.PartialPktAckCnt != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PartialPktAckCnt))
	}
	if m.AtoDeadline != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AtoDeadline))
	}
	if m.RtoDeadline != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RtoDeadline))
	}
	if m.CcFlags != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CcFlags))
	}
	if m.IdleDeadline != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.IdleDeadline))
	}
	if m.WindowFullCnt != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.WindowFullCnt))
	}
	if m.OoqRx2TxPi != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0xf3
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OoqRx2TxPi))
	}
	if m.OoqRx2TxCi != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0xf3
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OoqRx2TxCi))
	}
	if m.RetxCnt != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0xf3
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RetxCnt))
	}
	if m.WindowUpdatePi != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0xf3
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.WindowUpdatePi))
	}
	if m.WindowUpdateCi != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0xf3
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.WindowUpdateCi))
	}
	return i, nil
}

func (m *TcpCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Spec.Size()))
		n9, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n10, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Stats.Size()))
		n11, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *TcpCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TlsCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn12, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	return i, nil
}

func (m *TlsCbKeyHandle_TlscbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternal(dAtA, i, uint64(m.TlscbId))
	return i, nil
}
func (m *TlsCbKeyHandle_TlscbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TlscbHandle))
	i += 8
	return i, nil
}
func (m *TlsCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n13, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.NicDecHead != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.NicDecHead))
	}
	if m.NicDecTail != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.NicDecTail))
	}
	if m.Command != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Command))
	}
	if m.DebugDol != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DebugDol))
	}
	if m.SerqPi != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SerqPi))
	}
	if m.SerqCi != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SerqCi))
	}
	if m.BsqPi != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.BsqPi))
	}
	if m.BsqCi != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.BsqCi))
	}
	if m.CryptoKeyIdx != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CryptoKeyIdx))
	}
	if m.SerqBase != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SerqBase))
	}
	if m.SesqBase != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SesqBase))
	}
	if m.TnmdprAlloc != 0 {
		dAtA[i] = 0x69
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TnmdprAlloc))
		i += 8
	}
	if m.RnmdprFree != 0 {
		dAtA[i] = 0x71
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RnmdprFree))
		i += 8
	}
	if m.EncRequests != 0 {
		dAtA[i] = 0x79
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.EncRequests))
		i += 8
	}
	if m.EncCompletions != 0 {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.EncCompletions))
		i += 8
	}
	if m.EncFailures != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.EncFailures))
		i += 8
	}
	if m.DecRequests != 0 {
		dAtA[i] = 0x91
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DecRequests))
		i += 8
	}
	if m.DecCompletions != 0 {
		dAtA[i] = 0x99
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DecCompletions))
		i += 8
	}
	if m.DecFailures != 0 {
		dAtA[i] = 0xa1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DecFailures))
		i += 8
	}
	if m.Salt != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ExplicitIv))
	}
	if m.PreDebugStage0_7Thread != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PreDebugStage0_7Thread))
	}
	if m.PostDebugStage0_7Thread != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PostDebugStage0_7Thread))
	}
	if m.IsDecryptFlow {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.IsDecryptFlow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OtherFid != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OtherFid))
	}
	if m.L7ProxyType != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.L7ProxyType))
	}
	if m.CryptoHmacKeyIdx != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CryptoHmacKeyIdx))
	}
	if m.MacRequests != 0 {
		dAtA[i] = 0xe9
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MacRequests))
		i += 8
	}
	if m.MacCompletions != 0 {
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MacCompletions))
		i += 8
	}
	if m.MacFailures != 0 {
		dAtA[i] = 0xf9
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MacFailures))
		i += 8
	}
	if m.CpuId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CpuId))
	}
	return i, nil
}

func (m *TlsCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TlsCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TlscbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TlscbHandle))
		i += 8
	}
	return i, nil
}

func (m *TlsCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.TlscbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TlscbStatus.Size()))
		n14, err := m.TlscbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *TlsCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TlsCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n15, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *TlsCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TlsCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA17 := make([]byte, len(m.ApiStatus)*10)
		var j16 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	return i, nil
}

func (m *TlsCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n18, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *TlsCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TlsCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TlsCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Spec.Size()))
		n19, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n20, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Stats.Size()))
		n21, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *TlsCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn22, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	return i, nil
}

func (m *WRingKeyHandle_WringId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternal(dAtA, i, uint64(m.WringId))
	return i, nil
}
func (m *WRingKeyHandle_WringHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.WringHandle))
	i += 8
	return i, nil
}
func (m *WRingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n23, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Type))
	}
	if m.Pi != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Ci))
	}
	return i, nil
}

func (m *WRingRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WringHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.WringHandle))
		i += 8
	}
	return i, nil
}

func (m *WRingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.WringStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.WringStatus.Size()))
		n24, err := m.WringStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *WRingResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n25, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *WRingDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA27 := make([]byte, len(m.ApiStatus)*10)
		var j26 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	return i, nil
}

func (m *WRingGetEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n28, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Type))
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *WRingGetEntriesRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetEntriesRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WRingBarcoGCMDescMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingBarcoGCMDescMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IlistAddr != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IlistAddr))
		i += 8
	}
	if m.OlistAddr != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.OlistAddr))
		i += 8
	}
	if m.Command != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Command))
	}
	if m.KeyDescIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyDescIndex))
	}
	if m.IvAddr != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IvAddr))
		i += 8
	}
	if m.StatusAddr != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.StatusAddr))
		i += 8
	}
	if m.DoorbellAddr != 0 {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DoorbellAddr))
		i += 8
	}
	if m.DoorbellData != 0 {
		dAtA[i] = 0x41
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DoorbellData))
		i += 8
	}
	if m.Salt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ExplicitIv))
		i += 8
	}
	if m.HeaderSize != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.HeaderSize))
	}
	if m.BarcoStatus != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.BarcoStatus))
	}
	return i, nil
}

func (m *WRingGetEntriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetEntriesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Spec.Size()))
		n29, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Index))
	}
	if m.Status != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n30, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Stats != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Stats.Size()))
		n31, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.WRingSlotInfo != nil {
		nn32, err := m.WRingSlotInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn32
	}
	return i, nil
}

func (m *WRingGetEntriesResponse_Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x31
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Value))
	i += 8
	return i, nil
}
func (m *WRingGetEntriesResponse_BarcoGcmDesc) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BarcoGcmDesc != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.BarcoGcmDesc.Size()))
		n33, err := m.BarcoGcmDesc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *WRingGetEntriesResponse_Raw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Raw != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Raw)))
		i += copy(dAtA[i:], m.Raw)
	}
	return i, nil
}
func (m *WRingGetEntriesResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetEntriesResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingGetMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Spec.Size()))
		n34, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *WRingGetMetaResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetMetaResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingSetMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingSetMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Spec.Size()))
		n35, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *WRingSetMetaResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingSetMetaResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetOpaqueTagAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpaqueTagAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RingType))
	}
	return i, nil
}

func (m *GetOpaqueTagAddrRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpaqueTagAddrRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetOpaqueTagAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpaqueTagAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpaqueTagAddr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OpaqueTagAddr))
	}
	if m.ApiStatus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *GetOpaqueTagAddrResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpaqueTagAddrResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoGetReqDescrEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetReqDescrEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RingType))
	}
	if m.SlotIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SlotIndex))
	}
	return i, nil
}

func (m *BarcoGetReqDescrEntryRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetReqDescrEntryRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoSymmReqDescrMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoSymmReqDescrMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IlistAddr != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IlistAddr))
		i += 8
	}
	if m.OlistAddr != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.OlistAddr))
		i += 8
	}
	if m.Command != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Command))
	}
	if m.KeyDescIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyDescIndex))
	}
	if m.IvAddr != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IvAddr))
		i += 8
	}
	if m.StatusAddr != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.StatusAddr))
		i += 8
	}
	if m.DoorbellAddr != 0 {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DoorbellAddr))
		i += 8
	}
	if m.DoorbellData != 0 {
		dAtA[i] = 0x41
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DoorbellData))
		i += 8
	}
	if m.Salt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ExplicitIv))
		i += 8
	}
	if m.HeaderSize != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.HeaderSize))
	}
	if m.BarcoStatus != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.BarcoStatus))
	}
	if m.SecondKeyDescIndex != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SecondKeyDescIndex))
	}
	return i, nil
}

func (m *BarcoASymReqDescrMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoASymReqDescrMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IlistAddr != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.IlistAddr))
		i += 8
	}
	if m.OlistAddr != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.OlistAddr))
		i += 8
	}
	if m.KeyDescIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyDescIndex))
	}
	if m.StatusAddr != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.StatusAddr))
		i += 8
	}
	if m.OpaqueTagValue != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OpaqueTagValue))
	}
	if m.OpaqueTagWrEn != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OpaqueTagWrEn))
	}
	if m.FlagA != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FlagA))
	}
	if m.FlagB != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FlagB))
	}
	return i, nil
}

func (m *BarcoGetReqDescrEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetReqDescrEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RingType))
	}
	if m.SlotIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SlotIndex))
	}
	if m.ReqDescrMsg != nil {
		nn36, err := m.ReqDescrMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	return i, nil
}

func (m *BarcoGetReqDescrEntryResponse_SymmReqDescr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SymmReqDescr != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SymmReqDescr.Size()))
		n37, err := m.SymmReqDescr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *BarcoGetReqDescrEntryResponse_AsymReqDescr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AsymReqDescr != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AsymReqDescr.Size()))
		n38, err := m.AsymReqDescr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *BarcoGetReqDescrEntryResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetReqDescrEntryResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoGetRingMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RingType))
	}
	return i, nil
}

func (m *BarcoGetRingMetaRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoGetRingMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RingType))
	}
	if m.Pi != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Ci))
	}
	return i, nil
}

func (m *BarcoGetRingMetaResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoGetRingMetaConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RingType))
	}
	return i, nil
}

func (m *BarcoGetRingMetaConfigRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaConfigRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BarcoGetRingMetaConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RingType))
	}
	if m.RingBase != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RingBase))
	}
	if m.ProducerIdxAddr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ProducerIdxAddr))
	}
	if m.ShadowPndxAddr != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ShadowPndxAddr))
	}
	if m.OpaqueTagAddr != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OpaqueTagAddr))
	}
	if m.RingSize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RingSize))
	}
	if m.DescSize != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DescSize))
	}
	if m.PndxSize != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PndxSize))
	}
	if m.OpaqueTagSize != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OpaqueTagSize))
	}
	return i, nil
}

func (m *BarcoGetRingMetaConfigResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BarcoGetRingMetaConfigResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CryptoKeyCreateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyCreateResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyCreateWithIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateWithIdRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	if m.AllowDupAlloc != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AllowDupAlloc))
	}
	return i, nil
}

func (m *CryptoKeyCreateWithIdRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateWithIdRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyCreateWithIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateWithIdResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyCreateWithIdResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyCreateWithIdResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	if m.KeyType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyType))
	}
	if m.KeySize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeySize))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *CryptoKeyReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyReadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyReadRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyReadRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyReadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Key.Size()))
		n39, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *CryptoKeyReadResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyReadResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Key.Size()))
		n40, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *CryptoKeyUpdateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyUpdateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyUpdateResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyUpdateResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoKeyDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoKeyDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoKeyDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoAsymKeyCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CryptoAsymKeyCreateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyCreateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoAsymKeyCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoAsymKeyCreateResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyCreateResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoAsymKeyDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoAsymKeyDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoAsymKeyDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoAsymKeyDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoAsymKeySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keyindex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *CryptoAsymKeyWriteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyWriteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Key.Size()))
		n41, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *CryptoAsymKeyWriteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyWriteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoAsymKeyWriteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyWriteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Keyindex))
	}
	return i, nil
}

func (m *CryptoAsymKeyWriteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymKeyWriteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ECCPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ECCPoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.X) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.X)))
		i += copy(dAtA[i:], m.X)
	}
	if len(m.Y) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Y)))
		i += copy(dAtA[i:], m.Y)
	}
	return i, nil
}

func (m *CryptoAsymApiECCDomainParamsFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiECCDomainParamsFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeySize))
	}
	if len(m.P) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.P)))
		i += copy(dAtA[i:], m.P)
	}
	if len(m.A) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.A)))
		i += copy(dAtA[i:], m.A)
	}
	if len(m.B) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.B)))
		i += copy(dAtA[i:], m.B)
	}
	if m.G != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.G.Size()))
		n42, err := m.G.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if len(m.N) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.N)))
		i += copy(dAtA[i:], m.N)
	}
	return i, nil
}

func (m *CryptoAsymApiReqECCPointMulFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqECCPointMulFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EccDomainParams != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EccDomainParams.Size()))
		n43, err := m.EccDomainParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.EccPoint != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EccPoint.Size()))
		n44, err := m.EccPoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if len(m.K) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.K)))
		i += copy(dAtA[i:], m.K)
	}
	return i, nil
}

func (m *CryptoAsymApiRespECCPointMulFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespECCPointMulFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Q != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Q.Size()))
		n45, err := m.Q.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EccDomainParams != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EccDomainParams.Size()))
		n46, err := m.EccDomainParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if len(m.Da) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Da)))
		i += copy(dAtA[i:], m.Da)
	}
	if len(m.K) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.K)))
		i += copy(dAtA[i:], m.K)
	}
	if len(m.H) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.H)))
		i += copy(dAtA[i:], m.H)
	}
	if m.KeyIdx != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		dAtA[i] = 0x30
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.R) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.R)))
		i += copy(dAtA[i:], m.R)
	}
	if len(m.S) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	return i, nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EccDomainParams != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EccDomainParams.Size()))
		n47, err := m.EccDomainParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if m.Q != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Q.Size()))
		n48, err := m.Q.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if len(m.R) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.R)))
		i += copy(dAtA[i:], m.R)
	}
	if len(m.S) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	if len(m.H) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.H)))
		i += copy(dAtA[i:], m.H)
	}
	if m.AsyncEn {
		dAtA[i] = 0x30
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiReqRSAEncrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSAEncrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeySize))
	}
	if len(m.ModN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.E) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.E)))
		i += copy(dAtA[i:], m.E)
	}
	if len(m.PlainText) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.PlainText)))
		i += copy(dAtA[i:], m.PlainText)
	}
	if m.AsyncEn {
		dAtA[i] = 0x28
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSAEncrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSAEncrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CipherText) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.CipherText)))
		i += copy(dAtA[i:], m.CipherText)
	}
	return i, nil
}

func (m *CryptoAsymApiReqRSADecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSADecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeySize))
	}
	if len(m.ModN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.D) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.D)))
		i += copy(dAtA[i:], m.D)
	}
	if len(m.CipherText) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.CipherText)))
		i += copy(dAtA[i:], m.CipherText)
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSADecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSADecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlainText) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.PlainText)))
		i += copy(dAtA[i:], m.PlainText)
	}
	return i, nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSACRTDecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeySize))
	}
	if len(m.P) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.P)))
		i += copy(dAtA[i:], m.P)
	}
	if len(m.Q) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Q)))
		i += copy(dAtA[i:], m.Q)
	}
	if len(m.Dp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Dp)))
		i += copy(dAtA[i:], m.Dp)
	}
	if len(m.Dq) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Dq)))
		i += copy(dAtA[i:], m.Dq)
	}
	if len(m.Qinv) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Qinv)))
		i += copy(dAtA[i:], m.Qinv)
	}
	if len(m.CipherText) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.CipherText)))
		i += copy(dAtA[i:], m.CipherText)
	}
	if m.KeyIdx != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		dAtA[i] = 0x48
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSACRTDecrypt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSACRTDecrypt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlainText) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.PlainText)))
		i += copy(dAtA[i:], m.PlainText)
	}
	return i, nil
}

func (m *CryptoAsymApiReqSetupPrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqSetupPrivateKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *CryptoAsymApiRespECDSAKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespECDSAKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SignKeyIdx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SignKeyIdx))
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSAKeyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSAKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SignKeyIdx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SignKeyIdx))
	}
	if m.DecryptKeyIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DecryptKeyIdx))
	}
	return i, nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespSetupPrivateKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyType))
	}
	if m.KeyInfo != nil {
		nn49, err := m.KeyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn49
	}
	return i, nil
}

func (m *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EcdsaKeyInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EcdsaKeyInfo.Size()))
		n50, err := m.EcdsaKeyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}
func (m *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaKeyInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaKeyInfo.Size()))
		n51, err := m.RsaKeyInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}
func (m *CryptoAsymApiReqSetupCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqSetupCert) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpdateType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.UpdateType))
	}
	if m.CertId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CertId))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.NextCertId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.NextCertId))
	}
	return i, nil
}

func (m *CryptoAsymApiRespSetupCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespSetupCert) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CryptoAsymRsaKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymRsaKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeySize))
	}
	if len(m.N) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.N)))
		i += copy(dAtA[i:], m.N)
	}
	if len(m.E) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.E)))
		i += copy(dAtA[i:], m.E)
	}
	if len(m.D) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.D)))
		i += copy(dAtA[i:], m.D)
	}
	return i, nil
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyType))
	}
	if m.Key != nil {
		nn52, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn52
	}
	return i, nil
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx_RsaKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaKey.Size()))
		n53, err := m.RsaKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}
func (m *CryptoAsymApiRespSetupPrivateKeyEx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespSetupPrivateKeyEx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyType))
	}
	if m.KeyIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyIdx))
	}
	return i, nil
}

func (m *CryptoAsymApiReqRSASignatureGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSASignatureGen) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeySize))
	}
	if len(m.ModN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.D) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.D)))
		i += copy(dAtA[i:], m.D)
	}
	if len(m.H) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.H)))
		i += copy(dAtA[i:], m.H)
	}
	if m.KeyIdx != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		dAtA[i] = 0x30
		i++
		if m.AsyncEn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CryptoAsymApiRespRSASignatureGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespRSASignatureGen) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	return i, nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqRSASignatureVerify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeySize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeySize))
	}
	if len(m.ModN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.E) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.E)))
		i += copy(dAtA[i:], m.E)
	}
	if len(m.H) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.H)))
		i += copy(dAtA[i:], m.H)
	}
	if len(m.S) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	return i, nil
}

func (m *CryptoSymmApiReqHashGenerate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoSymmApiReqHashGenerate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hashtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Hashtype))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.KeyLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyLen))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.DataLen != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DataLen))
	}
	if m.DigestLen != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DigestLen))
	}
	return i, nil
}

func (m *CryptoSymmApiRespHashGenerate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoSymmApiRespHashGenerate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Digest) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	return i, nil
}

func (m *CryptoSymmApiReqHashVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoSymmApiReqHashVerify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hashtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Hashtype))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.KeyLen != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyLen))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.DataLen != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DataLen))
	}
	if len(m.Digest) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	if m.DigestLen != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DigestLen))
	}
	return i, nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyIdx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyIdx))
	}
	if len(m.ModN) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.E) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.E)))
		i += copy(dAtA[i:], m.E)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.HashType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.HashType))
	}
	if m.SigScheme != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SigScheme))
	}
	return i, nil
}

func (m *CryptoAsymApiRespFIPSRSASignatureGen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiRespFIPSRSASignatureGen) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.S) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	return i, nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModN) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ModN)))
		i += copy(dAtA[i:], m.ModN)
	}
	if len(m.E) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.E)))
		i += copy(dAtA[i:], m.E)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.S) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.S)))
		i += copy(dAtA[i:], m.S)
	}
	if m.HashType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.HashType))
	}
	if m.SigScheme != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SigScheme))
	}
	return i, nil
}

func (m *CryptoApiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoApiRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiType))
	}
	if m.CryptoApiReq != nil {
		nn54, err := m.CryptoApiReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn54
	}
	return i, nil
}

func (m *CryptoApiRequest_EccPointMulFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EccPointMulFp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EccPointMulFp.Size()))
		n55, err := m.EccPointMulFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}
func (m *CryptoApiRequest_EcdsaSigGenFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EcdsaSigGenFp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EcdsaSigGenFp.Size()))
		n56, err := m.EcdsaSigGenFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}
func (m *CryptoApiRequest_EcdsaSigVerifyFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EcdsaSigVerifyFp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EcdsaSigVerifyFp.Size()))
		n57, err := m.EcdsaSigVerifyFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaEncrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaEncrypt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaEncrypt.Size()))
		n58, err := m.RsaEncrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaDecrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaDecrypt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaDecrypt.Size()))
		n59, err := m.RsaDecrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaCrtDecrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaCrtDecrypt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaCrtDecrypt.Size()))
		n60, err := m.RsaCrtDecrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}
func (m *CryptoApiRequest_HashGenerate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashGenerate != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.HashGenerate.Size()))
		n61, err := m.HashGenerate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	return i, nil
}
func (m *CryptoApiRequest_HashVerify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashVerify != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.HashVerify.Size()))
		n62, err := m.HashVerify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaSigGen) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaSigGen != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaSigGen.Size()))
		n63, err := m.RsaSigGen.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}
func (m *CryptoApiRequest_RsaSigVerify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaSigVerify != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaSigVerify.Size()))
		n64, err := m.RsaSigVerify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	return i, nil
}
func (m *CryptoApiRequest_SetupPrivKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupPrivKey != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SetupPrivKey.Size()))
		n65, err := m.SetupPrivKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}
func (m *CryptoApiRequest_SetupCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupCert != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SetupCert.Size()))
		n66, err := m.SetupCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	return i, nil
}
func (m *CryptoApiRequest_SetupPrivKeyEx) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupPrivKeyEx != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SetupPrivKeyEx.Size()))
		n67, err := m.SetupPrivKeyEx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	return i, nil
}
func (m *CryptoApiRequest_FipsRsaSigGen) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FipsRsaSigGen != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FipsRsaSigGen.Size()))
		n68, err := m.FipsRsaSigGen.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	return i, nil
}
func (m *CryptoApiRequest_FipsRsaSigVerify) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FipsRsaSigVerify != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FipsRsaSigVerify.Size()))
		n69, err := m.FipsRsaSigVerify.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}
func (m *CryptoApiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoApiResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.CryptoApiResp != nil {
		nn70, err := m.CryptoApiResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn70
	}
	return i, nil
}

func (m *CryptoApiResponse_EccPointMulFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EccPointMulFp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EccPointMulFp.Size()))
		n71, err := m.EccPointMulFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	return i, nil
}
func (m *CryptoApiResponse_EcdsaSigGenFp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EcdsaSigGenFp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.EcdsaSigGenFp.Size()))
		n72, err := m.EcdsaSigGenFp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	return i, nil
}
func (m *CryptoApiResponse_RsaEncrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaEncrypt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaEncrypt.Size()))
		n73, err := m.RsaEncrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	return i, nil
}
func (m *CryptoApiResponse_RsaDecrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaDecrypt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaDecrypt.Size()))
		n74, err := m.RsaDecrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	return i, nil
}
func (m *CryptoApiResponse_RsaCrtDecrypt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaCrtDecrypt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaCrtDecrypt.Size()))
		n75, err := m.RsaCrtDecrypt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}
func (m *CryptoApiResponse_HashGenerate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashGenerate != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.HashGenerate.Size()))
		n76, err := m.HashGenerate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	return i, nil
}
func (m *CryptoApiResponse_RsaSigGen) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RsaSigGen != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RsaSigGen.Size()))
		n77, err := m.RsaSigGen.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	return i, nil
}
func (m *CryptoApiResponse_SetupPrivKey) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupPrivKey != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SetupPrivKey.Size()))
		n78, err := m.SetupPrivKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}
func (m *CryptoApiResponse_SetupCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupCert != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SetupCert.Size()))
		n79, err := m.SetupCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	return i, nil
}
func (m *CryptoApiResponse_SetupPrivKeyEx) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SetupPrivKeyEx != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SetupPrivKeyEx.Size()))
		n80, err := m.SetupPrivKeyEx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *CryptoApiResponse_FipsRsaSigGen) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FipsRsaSigGen != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FipsRsaSigGen.Size()))
		n81, err := m.FipsRsaSigGen.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *CryptoApiRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoApiRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CryptoApiResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CryptoApiResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DescrAolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescrAolRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DescrAolHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DescrAolHandle))
		i += 8
	}
	return i, nil
}

func (m *DescrAolRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescrAolRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DescrAolSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescrAolSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.DescrAolHandle != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DescrAolHandle))
		i += 8
	}
	if m.Address1 != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Address1))
		i += 8
	}
	if m.Offset1 != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Offset1))
		i += 4
	}
	if m.Length1 != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Length1))
		i += 4
	}
	if m.Address2 != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Address2))
		i += 8
	}
	if m.Offset2 != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Offset2))
		i += 4
	}
	if m.Length2 != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Length2))
		i += 4
	}
	if m.Address3 != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Address3))
		i += 8
	}
	if m.Offset3 != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Offset3))
		i += 4
	}
	if m.Length3 != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Length3))
		i += 4
	}
	if m.NextDescrAolHandle != 0 {
		dAtA[i] = 0x61
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.NextDescrAolHandle))
		i += 8
	}
	return i, nil
}

func (m *DescrAolResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescrAolResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxycCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn82, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn82
	}
	return i, nil
}

func (m *ProxycCbKeyHandle_ProxyccbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternal(dAtA, i, uint64(m.ProxyccbId))
	return i, nil
}
func (m *ProxycCbKeyHandle_ProxyccbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ProxyccbHandle))
	i += 8
	return i, nil
}
func (m *ProxycCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n83, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	if m.Pi != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Ci))
	}
	if m.ProxyccbFlags != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ProxyccbFlags))
	}
	if m.MyTxqBase != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainTxqBase != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqLif != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqQid))
	}
	if m.ChainTxqRing != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqRing))
	}
	if m.RedirSpan != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RedirSpan))
	}
	if m.StatPktsChain != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatPktsChain))
	}
	if m.StatPktsDiscard != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatPktsDiscard))
	}
	if m.StatCbNotReady != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatCbNotReady))
	}
	if m.StatMyTxqEmpty != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatMyTxqEmpty))
	}
	if m.StatAolErr != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatAolErr))
	}
	if m.StatTxqFull != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatTxqFull))
	}
	if m.StatDescSemFreeFull != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatDescSemFreeFull))
	}
	if m.StatPageSemFreeFull != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatPageSemFreeFull))
	}
	return i, nil
}

func (m *ProxycCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxycCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyccbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ProxyccbHandle))
		i += 8
	}
	return i, nil
}

func (m *ProxycCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.ProxyccbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ProxyccbStatus.Size()))
		n84, err := m.ProxyccbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}

func (m *ProxycCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxycCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n85, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	return i, nil
}

func (m *ProxycCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxycCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA87 := make([]byte, len(m.ApiStatus)*10)
		var j86 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA87[j86] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j86++
			}
			dAtA87[j86] = uint8(num)
			j86++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(j86))
		i += copy(dAtA[i:], dAtA87[:j86])
	}
	return i, nil
}

func (m *ProxycCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n88, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	return i, nil
}

func (m *ProxycCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxycCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ProxycCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Spec.Size()))
		n89, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n90, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Stats.Size()))
		n91, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n91
	}
	return i, nil
}

func (m *ProxycCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxycCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyrCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn92, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn92
	}
	return i, nil
}

func (m *ProxyrCbKeyHandle_ProxyrcbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternal(dAtA, i, uint64(m.ProxyrcbId))
	return i, nil
}
func (m *ProxyrCbKeyHandle_ProxyrcbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ProxyrcbHandle))
	i += 8
	return i, nil
}
func (m *ProxyrCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Meta.Size()))
		n93, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n94, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	if m.Pi != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Ci))
	}
	if m.ProxyrcbFlags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ProxyrcbFlags))
	}
	if m.MyTxqBase != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainRxqBase != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqBase))
	}
	if m.ChainRxqRingIndicesAddr != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqRingIndicesAddr))
	}
	if m.ChainRxqRingSizeShift != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqRingSizeShift))
	}
	if m.ChainRxqEntrySizeShift != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqEntrySizeShift))
	}
	if m.ChainRxqRingIndexSelect != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqRingIndexSelect))
	}
	if m.RedirSpan != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RedirSpan))
	}
	if m.IpSa != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.IpSa.Size()))
		n95, err := m.IpSa.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	if m.IpDa != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.IpDa.Size()))
		n96, err := m.IpDa.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	if m.Sport != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Sport))
	}
	if m.Dport != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Dport))
	}
	if m.Vrf != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Vrf))
	}
	if m.Af != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Af))
	}
	if m.IpProto != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.IpProto))
	}
	if m.Dir != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Dir))
	}
	if m.Role != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Role))
	}
	if m.RevCbId != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RevCbId))
	}
	if m.StatPktsRedir != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatPktsRedir))
	}
	if m.StatPktsDiscard != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatPktsDiscard))
	}
	if m.StatCbNotReady != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatCbNotReady))
	}
	if m.StatNullRingIndicesAddr != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatNullRingIndicesAddr))
	}
	if m.StatAolErr != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatAolErr))
	}
	if m.StatRxqFull != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatRxqFull))
	}
	if m.StatTxqEmpty != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatTxqEmpty))
	}
	if m.StatSemAllocFull != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatSemAllocFull))
	}
	if m.StatSemFreeFull != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.StatSemFreeFull))
	}
	return i, nil
}

func (m *ProxyrCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyrCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProxyrcbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ProxyrcbHandle))
		i += 8
	}
	return i, nil
}

func (m *ProxyrCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.ProxyrcbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ProxyrcbStatus.Size()))
		n97, err := m.ProxyrcbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	return i, nil
}

func (m *ProxyrCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyrCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Meta.Size()))
		n98, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n99, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	return i, nil
}

func (m *ProxyrCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyrCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA101 := make([]byte, len(m.ApiStatus)*10)
		var j100 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA101[j100] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j100++
			}
			dAtA101[j100] = uint8(num)
			j100++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(j100))
		i += copy(dAtA[i:], dAtA101[:j100])
	}
	return i, nil
}

func (m *ProxyrCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Meta.Size()))
		n102, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n103, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	return i, nil
}

func (m *ProxyrCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ProxyrCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ProxyrCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Spec.Size()))
		n104, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n105, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n105
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Stats.Size()))
		n106, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n106
	}
	return i, nil
}

func (m *ProxyrCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyrCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawrCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn107, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn107
	}
	return i, nil
}

func (m *RawrCbKeyHandle_RawrcbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternal(dAtA, i, uint64(m.RawrcbId))
	return i, nil
}
func (m *RawrCbKeyHandle_RawrcbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RawrcbHandle))
	i += 8
	return i, nil
}
func (m *RawrCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Meta.Size()))
		n108, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n109, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	if m.RawrcbFlags != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RawrcbFlags))
	}
	if m.ChainRxqBase != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqBase))
	}
	if m.ChainRxqRingIndicesAddr != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqRingIndicesAddr))
	}
	if m.ChainRxqRingSizeShift != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqRingSizeShift))
	}
	if m.ChainRxqEntrySizeShift != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqEntrySizeShift))
	}
	if m.ChainRxqRingIndexSelect != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainRxqRingIndexSelect))
	}
	if m.ChainTxqBase != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqRingIndexSelect != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqRingIndexSelect))
	}
	if m.ChainTxqLif != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqQid))
	}
	if m.CpuId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CpuId))
	}
	if m.AscqBase != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AscqBase))
	}
	if m.AscqSemInfAddr != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AscqSemInfAddr))
	}
	if m.RedirPkts != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RedirPkts))
	}
	if m.CbNotReadyDiscards != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CbNotReadyDiscards))
	}
	if m.QstateCfgDiscards != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.QstateCfgDiscards))
	}
	if m.PktLenDiscards != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PktLenDiscards))
	}
	if m.RxqFullDiscards != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RxqFullDiscards))
	}
	if m.TxqFullDiscards != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TxqFullDiscards))
	}
	if m.PktAllocErrors != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PktAllocErrors))
	}
	if m.PktFreeErrors != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PktFreeErrors))
	}
	return i, nil
}

func (m *RawrCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawrCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RawrcbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RawrcbHandle))
		i += 8
	}
	return i, nil
}

func (m *RawrCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.RawrcbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RawrcbStatus.Size()))
		n110, err := m.RawrcbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	return i, nil
}

func (m *RawrCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawrCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Meta.Size()))
		n111, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n112, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	return i, nil
}

func (m *RawrCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawrCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA114 := make([]byte, len(m.ApiStatus)*10)
		var j113 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA114[j113] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j113++
			}
			dAtA114[j113] = uint8(num)
			j113++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(j113))
		i += copy(dAtA[i:], dAtA114[:j113])
	}
	return i, nil
}

func (m *RawrCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Meta.Size()))
		n115, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n116, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	return i, nil
}

func (m *RawrCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawrCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RawrCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Spec.Size()))
		n117, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n117
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n118, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Stats.Size()))
		n119, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n119
	}
	return i, nil
}

func (m *RawrCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawrCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawcCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn120, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn120
	}
	return i, nil
}

func (m *RawcCbKeyHandle_RawccbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintInternal(dAtA, i, uint64(m.RawccbId))
	return i, nil
}
func (m *RawcCbKeyHandle_RawccbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RawccbHandle))
	i += 8
	return i, nil
}
func (m *RawcCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n121, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n121
	}
	if m.Pi != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Ci))
	}
	if m.RawccbFlags != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RawccbFlags))
	}
	if m.MyTxqBase != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainTxqBase != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqLif != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqQid))
	}
	if m.ChainTxqRing != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainTxqRing))
	}
	if m.CpuId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CpuId))
	}
	if m.AscqBase != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AscqBase))
	}
	if m.AscqSemInfAddr != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AscqSemInfAddr))
	}
	if m.ChainPkts != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ChainPkts))
	}
	if m.CbNotReadyDiscards != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.CbNotReadyDiscards))
	}
	if m.QstateCfgDiscards != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.QstateCfgDiscards))
	}
	if m.AolErrorDiscards != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.AolErrorDiscards))
	}
	if m.MyTxqEmptyDiscards != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MyTxqEmptyDiscards))
	}
	if m.TxqFullDiscards != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TxqFullDiscards))
	}
	if m.PktFreeErrors != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PktFreeErrors))
	}
	return i, nil
}

func (m *RawcCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawcCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RawccbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RawccbHandle))
		i += 8
	}
	return i, nil
}

func (m *RawcCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.RawccbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.RawccbStatus.Size()))
		n122, err := m.RawccbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n122
	}
	return i, nil
}

func (m *RawcCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawcCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n123, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n123
	}
	return i, nil
}

func (m *RawcCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawcCbDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *RawcCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawcCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n124, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	return i, nil
}

func (m *RawcCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawcCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RawcCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Spec.Size()))
		n125, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n125
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n126, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Stats.Size()))
		n127, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n127
	}
	return i, nil
}

func (m *RawcCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawcCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VmotionDebugSendRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionDebugSendRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VmotionDebugSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionDebugSendRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VmotionDebugResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionDebugResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VmotionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalVmotion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.TotalVmotion))
	}
	if m.MigInVmotion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MigInVmotion))
	}
	if m.MigOutVmotion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MigOutVmotion))
	}
	if m.MigSuccess != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MigSuccess))
	}
	if m.MigFailed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MigFailed))
	}
	if m.MigAborted != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MigAborted))
	}
	if m.MigTimeout != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MigTimeout))
	}
	if m.MigCold != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MigCold))
	}
	return i, nil
}

func (m *VmotionDebugEp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionDebugEp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MacAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.MacAddress)))
		i += copy(dAtA[i:], m.MacAddress)
	}
	if len(m.OldHomingHostIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.OldHomingHostIp)))
		i += copy(dAtA[i:], m.OldHomingHostIp)
	}
	if m.MigrationType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MigrationType))
	}
	if m.VmotionState != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.VmotionState))
	}
	if m.Flags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Flags))
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *VmotionActiveEp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionActiveEp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MacAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.MacAddress)))
		i += copy(dAtA[i:], m.MacAddress)
	}
	if m.MigrationState != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.MigrationState))
	}
	if m.UsegVlan != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.UsegVlan))
	}
	return i, nil
}

func (m *VmotionDebugResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmotionDebugResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.VmotionEnable {
		dAtA[i] = 0x10
		i++
		if m.VmotionEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Stats != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Stats.Size()))
		n128, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	if len(m.Ep) > 0 {
		for _, msg := range m.Ep {
			dAtA[i] = 0x22
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ActiveEp) > 0 {
		for _, msg := range m.ActiveEp {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestSendFinRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSendFinRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestSendFinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSendFinRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TestSendFinResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSendFinResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestSendFinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSendFinResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *TestClockSyncRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestClockSyncRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestClockSyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestClockSyncRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TestClockSyncResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestClockSyncResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestClockSyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestClockSyncResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *TestInjectFtePacketRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestInjectFtePacketRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestInjectFtePacketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestInjectFtePacketRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SourceEndpoint != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SourceEndpoint.Size()))
		n129, err := m.SourceEndpoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n129
	}
	if m.DestinationEndpoint != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DestinationEndpoint.Size()))
		n130, err := m.DestinationEndpoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n130
	}
	if m.SourceIp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SourceIp))
	}
	if m.DestinationIp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.DestinationIp))
	}
	return i, nil
}

func (m *TestInjectFtePacketResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestInjectFtePacketResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TestInjectFtePacketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestInjectFtePacketResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *FlowHashGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowHashGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlowHashGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowHashGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.ApiStatus))
	}
	if m.PrimaryIndexValid {
		dAtA[i] = 0x10
		i++
		if m.PrimaryIndexValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PrimaryIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PrimaryIndex))
	}
	if m.SecondaryIndexValid {
		dAtA[i] = 0x20
		i++
		if m.SecondaryIndexValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SecondaryIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.SecondaryIndex))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *FlowHashGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowHashGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HardwareVrfId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.HardwareVrfId))
	}
	if m.FlowKey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FlowKey.Size()))
		n131, err := m.FlowKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n131
	}
	if m.FlowDirection != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FlowDirection))
	}
	if m.FlowInstance != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.FlowInstance))
	}
	return i, nil
}

func (m *FlowHashGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowHashGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InternalPortStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalPortStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PortDescr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInternal(dAtA, i, uint64(len(m.PortDescr)))
		i += copy(dAtA[i:], m.PortDescr)
	}
	if m.PortStatus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PortStatus))
	}
	if m.PortSpeed != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PortSpeed))
	}
	if m.PortMode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PortMode))
	}
	if m.PortTxPaused {
		dAtA[i] = 0x28
		i++
		if m.PortTxPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PortFlowCtrl {
		dAtA[i] = 0x30
		i++
		if m.PortFlowCtrl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *InternalPortStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalPortStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InGoodOctets != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InGoodOctets))
	}
	if m.InBadOctets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InBadOctets))
	}
	if m.InUnicast != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InUnicast))
	}
	if m.InBroadcast != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InBroadcast))
	}
	if m.InMulticast != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InMulticast))
	}
	if m.InPause != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InPause))
	}
	if m.InUndersize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InUndersize))
	}
	if m.InFragments != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InFragments))
	}
	if m.InOversize != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InOversize))
	}
	if m.InJabber != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InJabber))
	}
	if m.InRxErr != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InRxErr))
	}
	if m.InFcsErr != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.InFcsErr))
	}
	if m.OutOctets != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutOctets))
	}
	if m.OutUnicast != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutUnicast))
	}
	if m.OutBroadcast != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutBroadcast))
	}
	if m.OutMulticast != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutMulticast))
	}
	if m.OutFcsErr != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutFcsErr))
	}
	if m.OutPause != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutPause))
	}
	if m.OutCollisions != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutCollisions))
	}
	if m.OutDeferred != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutDeferred))
	}
	if m.OutSingle != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutSingle))
	}
	if m.OutMultiple != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutMultiple))
	}
	if m.OutExcessive != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutExcessive))
	}
	if m.OutLate != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.OutLate))
	}
	return i, nil
}

func (m *InternalPortResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalPortResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PortNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PortNumber))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Status.Size()))
		n132, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n132
	}
	if m.Stats != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.Stats.Size()))
		n133, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n133
	}
	return i, nil
}

func (m *InternalPortResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalPortResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *InternalPortRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalPortRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PortNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInternal(dAtA, i, uint64(m.PortNumber))
	}
	return i, nil
}

func (m *InternalPortRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalPortRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintInternal(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintInternal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProgramAddressReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.ProgName)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.ResolveLabel {
		n += 2
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProgramAddressResp) Size() (n int) {
	var l int
	_ = l
	if m.Addr != 0 {
		n += 1 + sovInternal(uint64(m.Addr))
	}
	return n
}

func (m *GetProgramAddressRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProgramAddressResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *HbmAddressReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Handle)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *HbmAddressResp) Size() (n int) {
	var l int
	_ = l
	if m.Addr != 0 {
		n += 1 + sovInternal(uint64(m.Addr))
	}
	if m.Size_ != 0 {
		n += 1 + sovInternal(uint64(m.Size_))
	}
	return n
}

func (m *AllocHbmAddressRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *AllocHbmAddressResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *LifBdfReq) Size() (n int) {
	var l int
	_ = l
	if m.Lif != 0 {
		n += 1 + sovInternal(uint64(m.Lif))
	}
	if m.Bdf != 0 {
		n += 1 + sovInternal(uint64(m.Bdf))
	}
	return n
}

func (m *LifBdfResp) Size() (n int) {
	var l int
	_ = l
	if m.Lif != 0 {
		n += 1 + sovInternal(uint64(m.Lif))
	}
	if m.Bdf != 0 {
		n += 1 + sovInternal(uint64(m.Bdf))
	}
	if m.Status != 0 {
		n += 1 + sovInternal(uint64(m.Status))
	}
	return n
}

func (m *ConfigureLifBdfRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ConfigureLifBdfResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *SoftwarePhvStatus) Size() (n int) {
	var l int
	_ = l
	if m.Pipeline != 0 {
		n += 1 + sovInternal(uint64(m.Pipeline))
	}
	if m.Enabled {
		n += 2
	}
	if m.Done {
		n += 2
	}
	if m.CurrentCntr != 0 {
		n += 1 + sovInternal(uint64(m.CurrentCntr))
	}
	if m.InjectCntr != 0 {
		n += 1 + sovInternal(uint64(m.InjectCntr))
	}
	return n
}

func (m *SoftwarePhvResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	return n
}

func (m *SoftwarePhvResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *SoftwarePhvGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Pipeline != 0 {
		n += 1 + sovInternal(uint64(m.Pipeline))
	}
	return n
}

func (m *SoftwarePhvGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *SoftwarePhvGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *SoftwarePhvGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *SoftwarePhvInject) Size() (n int) {
	var l int
	_ = l
	if m.Pipeline != 0 {
		n += 1 + sovInternal(uint64(m.Pipeline))
	}
	return n
}

func (m *SoftwarePhvInjectMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *LogFlowRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *LogFlowResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *LogFlowResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	return n
}

func (m *EmptyRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *EmptyResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TcpCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *TcpCbKeyHandle_TcpcbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovInternal(uint64(m.TcpcbId))
	return n
}
func (m *TcpCbKeyHandle_TcpcbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *TcpCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.RcvNxt != 0 {
		n += 1 + sovInternal(uint64(m.RcvNxt))
	}
	if m.SndNxt != 0 {
		n += 1 + sovInternal(uint64(m.SndNxt))
	}
	if m.SndUna != 0 {
		n += 1 + sovInternal(uint64(m.SndUna))
	}
	if m.RcvTsval != 0 {
		n += 1 + sovInternal(uint64(m.RcvTsval))
	}
	if m.TsRecent != 0 {
		n += 1 + sovInternal(uint64(m.TsRecent))
	}
	if m.SerqBase != 0 {
		n += 9
	}
	if m.DebugDol != 0 {
		n += 1 + sovInternal(uint64(m.DebugDol))
	}
	if m.SesqBase != 0 {
		n += 9
	}
	if m.SesqPi != 0 {
		n += 1 + sovInternal(uint64(m.SesqPi))
	}
	if m.SesqCi != 0 {
		n += 1 + sovInternal(uint64(m.SesqCi))
	}
	if m.SndWnd != 0 {
		n += 1 + sovInternal(uint64(m.SndWnd))
	}
	if m.SndCwnd != 0 {
		n += 1 + sovInternal(uint64(m.SndCwnd))
	}
	if m.RcvMss != 0 {
		n += 1 + sovInternal(uint64(m.RcvMss))
	}
	if m.SourcePort != 0 {
		n += 1 + sovInternal(uint64(m.SourcePort))
	}
	if m.DestPort != 0 {
		n += 2 + sovInternal(uint64(m.DestPort))
	}
	l = len(m.HeaderTemplate)
	if l > 0 {
		n += 2 + l + sovInternal(uint64(l))
	}
	if m.State != 0 {
		n += 2 + sovInternal(uint64(m.State))
	}
	if m.SourceLif != 0 {
		n += 2 + sovInternal(uint64(m.SourceLif))
	}
	if m.AsesqBase != 0 {
		n += 10
	}
	if m.AsesqPi != 0 {
		n += 2 + sovInternal(uint64(m.AsesqPi))
	}
	if m.AsesqCi != 0 {
		n += 2 + sovInternal(uint64(m.AsesqCi))
	}
	if m.DebugDolTx != 0 {
		n += 2 + sovInternal(uint64(m.DebugDolTx))
	}
	if m.HeaderLen != 0 {
		n += 2 + sovInternal(uint64(m.HeaderLen))
	}
	if m.PendingAckSend {
		n += 3
	}
	if m.L7ProxyType != 0 {
		n += 2 + sovInternal(uint64(m.L7ProxyType))
	}
	if m.SesqRetxCi != 0 {
		n += 2 + sovInternal(uint64(m.SesqRetxCi))
	}
	if m.RetxSndUna != 0 {
		n += 2 + sovInternal(uint64(m.RetxSndUna))
	}
	if m.RxTs != 0 {
		n += 2 + sovInternal(uint64(m.RxTs))
	}
	if m.Rto != 0 {
		n += 2 + sovInternal(uint64(m.Rto))
	}
	if m.SndCwndCnt != 0 {
		n += 2 + sovInternal(uint64(m.SndCwndCnt))
	}
	if m.DebugDolTblsetaddr != 0 {
		n += 2 + sovInternal(uint64(m.DebugDolTblsetaddr))
	}
	if m.SerqPi != 0 {
		n += 2 + sovInternal(uint64(m.SerqPi))
	}
	if m.PredFlags != 0 {
		n += 2 + sovInternal(uint64(m.PredFlags))
	}
	if m.OtherQid != 0 {
		n += 2 + sovInternal(uint64(m.OtherQid))
	}
	if m.PacketsOut != 0 {
		n += 2 + sovInternal(uint64(m.PacketsOut))
	}
	if m.SndSsthresh != 0 {
		n += 2 + sovInternal(uint64(m.SndSsthresh))
	}
	if m.CcAlgo != 0 {
		n += 2 + sovInternal(uint64(m.CcAlgo))
	}
	if m.RtoBackoff != 0 {
		n += 2 + sovInternal(uint64(m.RtoBackoff))
	}
	if m.CpuId != 0 {
		n += 2 + sovInternal(uint64(m.CpuId))
	}
	if m.SerqCi != 0 {
		n += 2 + sovInternal(uint64(m.SerqCi))
	}
	if m.RcvWnd != 0 {
		n += 2 + sovInternal(uint64(m.RcvWnd))
	}
	if m.SndWscale != 0 {
		n += 2 + sovInternal(uint64(m.SndWscale))
	}
	if m.RcvWscale != 0 {
		n += 2 + sovInternal(uint64(m.RcvWscale))
	}
	if m.SesqTxCi != 0 {
		n += 2 + sovInternal(uint64(m.SesqTxCi))
	}
	if m.DelayAck {
		n += 3
	}
	if m.Ato != 0 {
		n += 2 + sovInternal(uint64(m.Ato))
	}
	if m.SndRecover != 0 {
		n += 2 + sovInternal(uint64(m.SndRecover))
	}
	if m.Smss != 0 {
		n += 2 + sovInternal(uint64(m.Smss))
	}
	if m.InitialWindow != 0 {
		n += 2 + sovInternal(uint64(m.InitialWindow))
	}
	if m.AbcLVar != 0 {
		n += 2 + sovInternal(uint64(m.AbcLVar))
	}
	if m.OooQueue {
		n += 3
	}
	if m.OooRx2TxQbase != 0 {
		n += 2 + sovInternal(uint64(m.OooRx2TxQbase))
	}
	if m.RcvWup != 0 {
		n += 2 + sovInternal(uint64(m.RcvWup))
	}
	if m.CbBase != 0 {
		n += 10
	}
	if m.ZeroWindowSent != 0 {
		n += 2 + sovInternal(uint64(m.ZeroWindowSent))
	}
	if m.CbBaseQtype1 != 0 {
		n += 10
	}
	if m.SrttUs != 0 {
		n += 2 + sovInternal(uint64(m.SrttUs))
	}
	if m.SackPerm {
		n += 3
	}
	if m.Timestamps {
		n += 3
	}
	if m.TxWindowUpdatePi != 0 {
		n += 2 + sovInternal(uint64(m.TxWindowUpdatePi))
	}
	if m.RttSeqTsoffset != 0 {
		n += 2 + sovInternal(uint64(m.RttSeqTsoffset))
	}
	if m.RttTime != 0 {
		n += 2 + sovInternal(uint64(m.RttTime))
	}
	if m.TsLearned != 0 {
		n += 2 + sovInternal(uint64(m.TsLearned))
	}
	if m.TsOffset != 0 {
		n += 2 + sovInternal(uint64(m.TsOffset))
	}
	if m.TsTime != 0 {
		n += 2 + sovInternal(uint64(m.TsTime))
	}
	if m.ProxyType != 0 {
		n += 2 + sovInternal(uint64(m.ProxyType))
	}
	return n
}

func (m *TcpCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TcpCbOoqStatus) Size() (n int) {
	var l int
	_ = l
	if m.QueueAddr != 0 {
		n += 1 + sovInternal(uint64(m.QueueAddr))
	}
	if m.StartSeq != 0 {
		n += 1 + sovInternal(uint64(m.StartSeq))
	}
	if m.EndSeq != 0 {
		n += 1 + sovInternal(uint64(m.EndSeq))
	}
	if m.NumEntries != 0 {
		n += 1 + sovInternal(uint64(m.NumEntries))
	}
	return n
}

func (m *TcpCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.TcpcbHandle != 0 {
		n += 9
	}
	if m.OoqNotEmpty {
		n += 2
	}
	if len(m.OoqStatus) > 0 {
		for _, e := range m.OoqStatus {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TcpCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.TcpcbStatus != nil {
		l = m.TcpcbStatus.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *TcpCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TcpCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *TcpCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TcpCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovInternal(uint64(e))
		}
		n += 1 + sovInternal(uint64(l)) + l
	}
	return n
}

func (m *TcpCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *TcpCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TcpCbStats) Size() (n int) {
	var l int
	_ = l
	if m.BytesRcvd != 0 {
		n += 1 + sovInternal(uint64(m.BytesRcvd))
	}
	if m.PktsRcvd != 0 {
		n += 1 + sovInternal(uint64(m.PktsRcvd))
	}
	if m.BytesAcked != 0 {
		n += 1 + sovInternal(uint64(m.BytesAcked))
	}
	if m.PureAcksRcvd != 0 {
		n += 1 + sovInternal(uint64(m.PureAcksRcvd))
	}
	if m.DupAcksRcvd != 0 {
		n += 1 + sovInternal(uint64(m.DupAcksRcvd))
	}
	if m.SlowPathCnt != 0 {
		n += 1 + sovInternal(uint64(m.SlowPathCnt))
	}
	if m.SerqFullCnt != 0 {
		n += 1 + sovInternal(uint64(m.SerqFullCnt))
	}
	if m.OooCnt != 0 {
		n += 1 + sovInternal(uint64(m.OooCnt))
	}
	if m.RxDropCnt != 0 {
		n += 1 + sovInternal(uint64(m.RxDropCnt))
	}
	if m.BytesSent != 0 {
		n += 3 + sovInternal(uint64(m.BytesSent))
	}
	if m.PktsSent != 0 {
		n += 3 + sovInternal(uint64(m.PktsSent))
	}
	if m.PureAcksSent != 0 {
		n += 3 + sovInternal(uint64(m.PureAcksSent))
	}
	if m.SesqPi != 0 {
		n += 3 + sovInternal(uint64(m.SesqPi))
	}
	if m.SesqCi != 0 {
		n += 3 + sovInternal(uint64(m.SesqCi))
	}
	if m.SendAckPi != 0 {
		n += 3 + sovInternal(uint64(m.SendAckPi))
	}
	if m.SendAckCi != 0 {
		n += 3 + sovInternal(uint64(m.SendAckCi))
	}
	if m.FastTimerPi != 0 {
		n += 3 + sovInternal(uint64(m.FastTimerPi))
	}
	if m.FastTimerCi != 0 {
		n += 3 + sovInternal(uint64(m.FastTimerCi))
	}
	if m.DelAckPi != 0 {
		n += 3 + sovInternal(uint64(m.DelAckPi))
	}
	if m.DelAckCi != 0 {
		n += 3 + sovInternal(uint64(m.DelAckCi))
	}
	if m.AsesqPi != 0 {
		n += 3 + sovInternal(uint64(m.AsesqPi))
	}
	if m.AsesqCi != 0 {
		n += 3 + sovInternal(uint64(m.AsesqCi))
	}
	if m.PendingTxPi != 0 {
		n += 3 + sovInternal(uint64(m.PendingTxPi))
	}
	if m.PendingTxCi != 0 {
		n += 3 + sovInternal(uint64(m.PendingTxCi))
	}
	if m.FastRetransPi != 0 {
		n += 3 + sovInternal(uint64(m.FastRetransPi))
	}
	if m.FastRetransCi != 0 {
		n += 3 + sovInternal(uint64(m.FastRetransCi))
	}
	if m.CleanRetxPi != 0 {
		n += 3 + sovInternal(uint64(m.CleanRetxPi))
	}
	if m.CleanRetxCi != 0 {
		n += 3 + sovInternal(uint64(m.CleanRetxCi))
	}
	if m.PacketsOut != 0 {
		n += 3 + sovInternal(uint64(m.PacketsOut))
	}
	if m.SesqTxCi != 0 {
		n += 3 + sovInternal(uint64(m.SesqTxCi))
	}
	if m.SesqRetxCi != 0 {
		n += 3 + sovInternal(uint64(m.SesqRetxCi))
	}
	if m.AsesqRetxCi != 0 {
		n += 3 + sovInternal(uint64(m.AsesqRetxCi))
	}
	if m.TxRingPi != 0 {
		n += 3 + sovInternal(uint64(m.TxRingPi))
	}
	if m.PartialPktAckCnt != 0 {
		n += 3 + sovInternal(uint64(m.PartialPktAckCnt))
	}
	if m.AtoDeadline != 0 {
		n += 3 + sovInternal(uint64(m.AtoDeadline))
	}
	if m.RtoDeadline != 0 {
		n += 3 + sovInternal(uint64(m.RtoDeadline))
	}
	if m.CcFlags != 0 {
		n += 3 + sovInternal(uint64(m.CcFlags))
	}
	if m.IdleDeadline != 0 {
		n += 3 + sovInternal(uint64(m.IdleDeadline))
	}
	if m.WindowFullCnt != 0 {
		n += 3 + sovInternal(uint64(m.WindowFullCnt))
	}
	if m.OoqRx2TxPi != 0 {
		n += 3 + sovInternal(uint64(m.OoqRx2TxPi))
	}
	if m.OoqRx2TxCi != 0 {
		n += 3 + sovInternal(uint64(m.OoqRx2TxCi))
	}
	if m.RetxCnt != 0 {
		n += 3 + sovInternal(uint64(m.RetxCnt))
	}
	if m.WindowUpdatePi != 0 {
		n += 3 + sovInternal(uint64(m.WindowUpdatePi))
	}
	if m.WindowUpdateCi != 0 {
		n += 3 + sovInternal(uint64(m.WindowUpdateCi))
	}
	return n
}

func (m *TcpCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *TcpCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TlsCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *TlsCbKeyHandle_TlscbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovInternal(uint64(m.TlscbId))
	return n
}
func (m *TlsCbKeyHandle_TlscbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *TlsCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.NicDecHead != 0 {
		n += 1 + sovInternal(uint64(m.NicDecHead))
	}
	if m.NicDecTail != 0 {
		n += 1 + sovInternal(uint64(m.NicDecTail))
	}
	if m.Command != 0 {
		n += 1 + sovInternal(uint64(m.Command))
	}
	if m.DebugDol != 0 {
		n += 1 + sovInternal(uint64(m.DebugDol))
	}
	if m.SerqPi != 0 {
		n += 1 + sovInternal(uint64(m.SerqPi))
	}
	if m.SerqCi != 0 {
		n += 1 + sovInternal(uint64(m.SerqCi))
	}
	if m.BsqPi != 0 {
		n += 1 + sovInternal(uint64(m.BsqPi))
	}
	if m.BsqCi != 0 {
		n += 1 + sovInternal(uint64(m.BsqCi))
	}
	if m.CryptoKeyIdx != 0 {
		n += 1 + sovInternal(uint64(m.CryptoKeyIdx))
	}
	if m.SerqBase != 0 {
		n += 1 + sovInternal(uint64(m.SerqBase))
	}
	if m.SesqBase != 0 {
		n += 1 + sovInternal(uint64(m.SesqBase))
	}
	if m.TnmdprAlloc != 0 {
		n += 9
	}
	if m.RnmdprFree != 0 {
		n += 9
	}
	if m.EncRequests != 0 {
		n += 9
	}
	if m.EncCompletions != 0 {
		n += 10
	}
	if m.EncFailures != 0 {
		n += 10
	}
	if m.DecRequests != 0 {
		n += 10
	}
	if m.DecCompletions != 0 {
		n += 10
	}
	if m.DecFailures != 0 {
		n += 10
	}
	if m.Salt != 0 {
		n += 2 + sovInternal(uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		n += 2 + sovInternal(uint64(m.ExplicitIv))
	}
	if m.PreDebugStage0_7Thread != 0 {
		n += 2 + sovInternal(uint64(m.PreDebugStage0_7Thread))
	}
	if m.PostDebugStage0_7Thread != 0 {
		n += 2 + sovInternal(uint64(m.PostDebugStage0_7Thread))
	}
	if m.IsDecryptFlow {
		n += 3
	}
	if m.OtherFid != 0 {
		n += 2 + sovInternal(uint64(m.OtherFid))
	}
	if m.L7ProxyType != 0 {
		n += 2 + sovInternal(uint64(m.L7ProxyType))
	}
	if m.CryptoHmacKeyIdx != 0 {
		n += 2 + sovInternal(uint64(m.CryptoHmacKeyIdx))
	}
	if m.MacRequests != 0 {
		n += 10
	}
	if m.MacCompletions != 0 {
		n += 10
	}
	if m.MacFailures != 0 {
		n += 10
	}
	if m.CpuId != 0 {
		n += 2 + sovInternal(uint64(m.CpuId))
	}
	return n
}

func (m *TlsCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TlsCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.TlscbHandle != 0 {
		n += 9
	}
	return n
}

func (m *TlsCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.TlscbStatus != nil {
		l = m.TlscbStatus.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *TlsCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TlsCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *TlsCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TlsCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovInternal(uint64(e))
		}
		n += 1 + sovInternal(uint64(l)) + l
	}
	return n
}

func (m *TlsCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *TlsCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TlsCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TlsCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *TlsCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *WRingKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *WRingKeyHandle_WringId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovInternal(uint64(m.WringId))
	return n
}
func (m *WRingKeyHandle_WringHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *WRingSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovInternal(uint64(m.Type))
	}
	if m.Pi != 0 {
		n += 1 + sovInternal(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovInternal(uint64(m.Ci))
	}
	return n
}

func (m *WRingRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *WRingStatus) Size() (n int) {
	var l int
	_ = l
	if m.WringHandle != 0 {
		n += 9
	}
	return n
}

func (m *WRingResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.WringStatus != nil {
		l = m.WringStatus.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *WRingResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *WRingDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *WRingDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *WRingDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovInternal(uint64(e))
		}
		n += 1 + sovInternal(uint64(l)) + l
	}
	return n
}

func (m *WRingGetEntriesRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovInternal(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovInternal(uint64(m.Index))
	}
	return n
}

func (m *WRingGetEntriesRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *WRingStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WRingBarcoGCMDescMsg) Size() (n int) {
	var l int
	_ = l
	if m.IlistAddr != 0 {
		n += 9
	}
	if m.OlistAddr != 0 {
		n += 9
	}
	if m.Command != 0 {
		n += 1 + sovInternal(uint64(m.Command))
	}
	if m.KeyDescIndex != 0 {
		n += 1 + sovInternal(uint64(m.KeyDescIndex))
	}
	if m.IvAddr != 0 {
		n += 9
	}
	if m.StatusAddr != 0 {
		n += 9
	}
	if m.DoorbellAddr != 0 {
		n += 9
	}
	if m.DoorbellData != 0 {
		n += 9
	}
	if m.Salt != 0 {
		n += 1 + sovInternal(uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		n += 9
	}
	if m.HeaderSize != 0 {
		n += 1 + sovInternal(uint64(m.HeaderSize))
	}
	if m.BarcoStatus != 0 {
		n += 1 + sovInternal(uint64(m.BarcoStatus))
	}
	return n
}

func (m *WRingGetEntriesResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovInternal(uint64(m.Index))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.WRingSlotInfo != nil {
		n += m.WRingSlotInfo.Size()
	}
	return n
}

func (m *WRingGetEntriesResponse_Value) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *WRingGetEntriesResponse_BarcoGcmDesc) Size() (n int) {
	var l int
	_ = l
	if m.BarcoGcmDesc != nil {
		l = m.BarcoGcmDesc.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *WRingGetEntriesResponse_Raw) Size() (n int) {
	var l int
	_ = l
	if m.Raw != nil {
		l = len(m.Raw)
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *WRingGetEntriesResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *WRingGetMetaResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *WRingGetMetaResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *WRingSetMetaResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *WRingSetMetaResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *GetOpaqueTagAddrRequest) Size() (n int) {
	var l int
	_ = l
	if m.RingType != 0 {
		n += 1 + sovInternal(uint64(m.RingType))
	}
	return n
}

func (m *GetOpaqueTagAddrRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *GetOpaqueTagAddrResponse) Size() (n int) {
	var l int
	_ = l
	if m.OpaqueTagAddr != 0 {
		n += 1 + sovInternal(uint64(m.OpaqueTagAddr))
	}
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	return n
}

func (m *GetOpaqueTagAddrResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *BarcoGetReqDescrEntryRequest) Size() (n int) {
	var l int
	_ = l
	if m.RingType != 0 {
		n += 1 + sovInternal(uint64(m.RingType))
	}
	if m.SlotIndex != 0 {
		n += 1 + sovInternal(uint64(m.SlotIndex))
	}
	return n
}

func (m *BarcoGetReqDescrEntryRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *BarcoSymmReqDescrMsg) Size() (n int) {
	var l int
	_ = l
	if m.IlistAddr != 0 {
		n += 9
	}
	if m.OlistAddr != 0 {
		n += 9
	}
	if m.Command != 0 {
		n += 1 + sovInternal(uint64(m.Command))
	}
	if m.KeyDescIndex != 0 {
		n += 1 + sovInternal(uint64(m.KeyDescIndex))
	}
	if m.IvAddr != 0 {
		n += 9
	}
	if m.StatusAddr != 0 {
		n += 9
	}
	if m.DoorbellAddr != 0 {
		n += 9
	}
	if m.DoorbellData != 0 {
		n += 9
	}
	if m.Salt != 0 {
		n += 1 + sovInternal(uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		n += 9
	}
	if m.HeaderSize != 0 {
		n += 1 + sovInternal(uint64(m.HeaderSize))
	}
	if m.BarcoStatus != 0 {
		n += 1 + sovInternal(uint64(m.BarcoStatus))
	}
	if m.SecondKeyDescIndex != 0 {
		n += 1 + sovInternal(uint64(m.SecondKeyDescIndex))
	}
	return n
}

func (m *BarcoASymReqDescrMsg) Size() (n int) {
	var l int
	_ = l
	if m.IlistAddr != 0 {
		n += 9
	}
	if m.OlistAddr != 0 {
		n += 9
	}
	if m.KeyDescIndex != 0 {
		n += 1 + sovInternal(uint64(m.KeyDescIndex))
	}
	if m.StatusAddr != 0 {
		n += 9
	}
	if m.OpaqueTagValue != 0 {
		n += 1 + sovInternal(uint64(m.OpaqueTagValue))
	}
	if m.OpaqueTagWrEn != 0 {
		n += 1 + sovInternal(uint64(m.OpaqueTagWrEn))
	}
	if m.FlagA != 0 {
		n += 1 + sovInternal(uint64(m.FlagA))
	}
	if m.FlagB != 0 {
		n += 1 + sovInternal(uint64(m.FlagB))
	}
	return n
}

func (m *BarcoGetReqDescrEntryResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		n += 1 + sovInternal(uint64(m.RingType))
	}
	if m.SlotIndex != 0 {
		n += 1 + sovInternal(uint64(m.SlotIndex))
	}
	if m.ReqDescrMsg != nil {
		n += m.ReqDescrMsg.Size()
	}
	return n
}

func (m *BarcoGetReqDescrEntryResponse_SymmReqDescr) Size() (n int) {
	var l int
	_ = l
	if m.SymmReqDescr != nil {
		l = m.SymmReqDescr.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *BarcoGetReqDescrEntryResponse_AsymReqDescr) Size() (n int) {
	var l int
	_ = l
	if m.AsymReqDescr != nil {
		l = m.AsymReqDescr.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *BarcoGetReqDescrEntryResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *BarcoGetRingMetaRequest) Size() (n int) {
	var l int
	_ = l
	if m.RingType != 0 {
		n += 1 + sovInternal(uint64(m.RingType))
	}
	return n
}

func (m *BarcoGetRingMetaRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *BarcoGetRingMetaResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		n += 1 + sovInternal(uint64(m.RingType))
	}
	if m.Pi != 0 {
		n += 1 + sovInternal(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovInternal(uint64(m.Ci))
	}
	return n
}

func (m *BarcoGetRingMetaResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *BarcoGetRingMetaConfigRequest) Size() (n int) {
	var l int
	_ = l
	if m.RingType != 0 {
		n += 1 + sovInternal(uint64(m.RingType))
	}
	return n
}

func (m *BarcoGetRingMetaConfigRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *BarcoGetRingMetaConfigResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.RingType != 0 {
		n += 1 + sovInternal(uint64(m.RingType))
	}
	if m.RingBase != 0 {
		n += 1 + sovInternal(uint64(m.RingBase))
	}
	if m.ProducerIdxAddr != 0 {
		n += 1 + sovInternal(uint64(m.ProducerIdxAddr))
	}
	if m.ShadowPndxAddr != 0 {
		n += 1 + sovInternal(uint64(m.ShadowPndxAddr))
	}
	if m.OpaqueTagAddr != 0 {
		n += 1 + sovInternal(uint64(m.OpaqueTagAddr))
	}
	if m.RingSize != 0 {
		n += 1 + sovInternal(uint64(m.RingSize))
	}
	if m.DescSize != 0 {
		n += 1 + sovInternal(uint64(m.DescSize))
	}
	if m.PndxSize != 0 {
		n += 1 + sovInternal(uint64(m.PndxSize))
	}
	if m.OpaqueTagSize != 0 {
		n += 1 + sovInternal(uint64(m.OpaqueTagSize))
	}
	return n
}

func (m *BarcoGetRingMetaConfigResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyCreateRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CryptoKeyCreateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyCreateResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyCreateResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyCreateWithIdRequest) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	if m.AllowDupAlloc != 0 {
		n += 1 + sovInternal(uint64(m.AllowDupAlloc))
	}
	return n
}

func (m *CryptoKeyCreateWithIdRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyCreateWithIdResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyCreateWithIdResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeySpec) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	if m.KeyType != 0 {
		n += 1 + sovInternal(uint64(m.KeyType))
	}
	if m.KeySize != 0 {
		n += 1 + sovInternal(uint64(m.KeySize))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoKeyReadRequest) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyReadRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyReadResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoKeyReadResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoKeyUpdateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyUpdateResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoKeyDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoKeyDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoAsymKeyCreateRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CryptoAsymKeyCreateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoAsymKeyCreateResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoAsymKeyCreateResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoAsymKeyDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoAsymKeyDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoAsymKeyDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoAsymKeyDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoAsymKeySpec) Size() (n int) {
	var l int
	_ = l
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymKeyWriteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymKeyWriteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoAsymKeyWriteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Keyindex != 0 {
		n += 1 + sovInternal(uint64(m.Keyindex))
	}
	return n
}

func (m *CryptoAsymKeyWriteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ECCPoint) Size() (n int) {
	var l int
	_ = l
	l = len(m.X)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Y)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiECCDomainParamsFp) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovInternal(uint64(m.KeySize))
	}
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.G != nil {
		l = m.G.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.N)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqECCPointMulFp) Size() (n int) {
	var l int
	_ = l
	if m.EccDomainParams != nil {
		l = m.EccDomainParams.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.EccPoint != nil {
		l = m.EccPoint.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.K)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiRespECCPointMulFp) Size() (n int) {
	var l int
	_ = l
	if m.Q != nil {
		l = m.Q.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqECDSASignatureGenFp) Size() (n int) {
	var l int
	_ = l
	if m.EccDomainParams != nil {
		l = m.EccDomainParams.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Da)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.K)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyIdx != 0 {
		n += 1 + sovInternal(uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiRespECDSASignatureGenFp) Size() (n int) {
	var l int
	_ = l
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Size() (n int) {
	var l int
	_ = l
	if m.EccDomainParams != nil {
		l = m.EccDomainParams.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Q != nil {
		l = m.Q.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiReqRSAEncrypt) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovInternal(uint64(m.KeySize))
	}
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.PlainText)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiRespRSAEncrypt) Size() (n int) {
	var l int
	_ = l
	l = len(m.CipherText)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqRSADecrypt) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovInternal(uint64(m.KeySize))
	}
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.CipherText)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiRespRSADecrypt) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlainText)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqRSACRTDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovInternal(uint64(m.KeySize))
	}
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Dp)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Dq)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Qinv)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.CipherText)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyIdx != 0 {
		n += 1 + sovInternal(uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiRespRSACRTDecrypt) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlainText)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqSetupPrivateKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiRespECDSAKeyInfo) Size() (n int) {
	var l int
	_ = l
	if m.SignKeyIdx != 0 {
		n += 1 + sovInternal(uint64(m.SignKeyIdx))
	}
	return n
}

func (m *CryptoAsymApiRespRSAKeyInfo) Size() (n int) {
	var l int
	_ = l
	if m.SignKeyIdx != 0 {
		n += 1 + sovInternal(uint64(m.SignKeyIdx))
	}
	if m.DecryptKeyIdx != 0 {
		n += 1 + sovInternal(uint64(m.DecryptKeyIdx))
	}
	return n
}

func (m *CryptoAsymApiRespSetupPrivateKey) Size() (n int) {
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovInternal(uint64(m.KeyType))
	}
	if m.KeyInfo != nil {
		n += m.KeyInfo.Size()
	}
	return n
}

func (m *CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo) Size() (n int) {
	var l int
	_ = l
	if m.EcdsaKeyInfo != nil {
		l = m.EcdsaKeyInfo.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo) Size() (n int) {
	var l int
	_ = l
	if m.RsaKeyInfo != nil {
		l = m.RsaKeyInfo.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoAsymApiReqSetupCert) Size() (n int) {
	var l int
	_ = l
	if m.UpdateType != 0 {
		n += 1 + sovInternal(uint64(m.UpdateType))
	}
	if m.CertId != 0 {
		n += 1 + sovInternal(uint64(m.CertId))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.NextCertId != 0 {
		n += 1 + sovInternal(uint64(m.NextCertId))
	}
	return n
}

func (m *CryptoAsymApiRespSetupCert) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CryptoAsymRsaKey) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovInternal(uint64(m.KeySize))
	}
	l = len(m.N)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx) Size() (n int) {
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovInternal(uint64(m.KeyType))
	}
	if m.Key != nil {
		n += m.Key.Size()
	}
	return n
}

func (m *CryptoAsymApiReqSetupPrivateKeyEx_RsaKey) Size() (n int) {
	var l int
	_ = l
	if m.RsaKey != nil {
		l = m.RsaKey.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoAsymApiRespSetupPrivateKeyEx) Size() (n int) {
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovInternal(uint64(m.KeyType))
	}
	if m.KeyIdx != 0 {
		n += 1 + sovInternal(uint64(m.KeyIdx))
	}
	return n
}

func (m *CryptoAsymApiReqRSASignatureGen) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovInternal(uint64(m.KeySize))
	}
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.D)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyIdx != 0 {
		n += 1 + sovInternal(uint64(m.KeyIdx))
	}
	if m.AsyncEn {
		n += 2
	}
	return n
}

func (m *CryptoAsymApiRespRSASignatureGen) Size() (n int) {
	var l int
	_ = l
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqRSASignatureVerify) Size() (n int) {
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 1 + sovInternal(uint64(m.KeySize))
	}
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.H)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoSymmApiReqHashGenerate) Size() (n int) {
	var l int
	_ = l
	if m.Hashtype != 0 {
		n += 1 + sovInternal(uint64(m.Hashtype))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyLen != 0 {
		n += 1 + sovInternal(uint64(m.KeyLen))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.DataLen != 0 {
		n += 1 + sovInternal(uint64(m.DataLen))
	}
	if m.DigestLen != 0 {
		n += 1 + sovInternal(uint64(m.DigestLen))
	}
	return n
}

func (m *CryptoSymmApiRespHashGenerate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoSymmApiReqHashVerify) Size() (n int) {
	var l int
	_ = l
	if m.Hashtype != 0 {
		n += 1 + sovInternal(uint64(m.Hashtype))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyLen != 0 {
		n += 1 + sovInternal(uint64(m.KeyLen))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.DataLen != 0 {
		n += 1 + sovInternal(uint64(m.DataLen))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.DigestLen != 0 {
		n += 1 + sovInternal(uint64(m.DigestLen))
	}
	return n
}

func (m *CryptoAsymApiReqFIPSRSASignatureGen) Size() (n int) {
	var l int
	_ = l
	if m.KeyIdx != 0 {
		n += 1 + sovInternal(uint64(m.KeyIdx))
	}
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.HashType != 0 {
		n += 1 + sovInternal(uint64(m.HashType))
	}
	if m.SigScheme != 0 {
		n += 1 + sovInternal(uint64(m.SigScheme))
	}
	return n
}

func (m *CryptoAsymApiRespFIPSRSASignatureGen) Size() (n int) {
	var l int
	_ = l
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CryptoAsymApiReqFIPSRSASignatureVerify) Size() (n int) {
	var l int
	_ = l
	l = len(m.ModN)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.S)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.HashType != 0 {
		n += 1 + sovInternal(uint64(m.HashType))
	}
	if m.SigScheme != 0 {
		n += 1 + sovInternal(uint64(m.SigScheme))
	}
	return n
}

func (m *CryptoApiRequest) Size() (n int) {
	var l int
	_ = l
	if m.ApiType != 0 {
		n += 1 + sovInternal(uint64(m.ApiType))
	}
	if m.CryptoApiReq != nil {
		n += m.CryptoApiReq.Size()
	}
	return n
}

func (m *CryptoApiRequest_EccPointMulFp) Size() (n int) {
	var l int
	_ = l
	if m.EccPointMulFp != nil {
		l = m.EccPointMulFp.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_EcdsaSigGenFp) Size() (n int) {
	var l int
	_ = l
	if m.EcdsaSigGenFp != nil {
		l = m.EcdsaSigGenFp.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_EcdsaSigVerifyFp) Size() (n int) {
	var l int
	_ = l
	if m.EcdsaSigVerifyFp != nil {
		l = m.EcdsaSigVerifyFp.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaEncrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaEncrypt != nil {
		l = m.RsaEncrypt.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaDecrypt != nil {
		l = m.RsaDecrypt.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaCrtDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaCrtDecrypt != nil {
		l = m.RsaCrtDecrypt.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_HashGenerate) Size() (n int) {
	var l int
	_ = l
	if m.HashGenerate != nil {
		l = m.HashGenerate.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_HashVerify) Size() (n int) {
	var l int
	_ = l
	if m.HashVerify != nil {
		l = m.HashVerify.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaSigGen) Size() (n int) {
	var l int
	_ = l
	if m.RsaSigGen != nil {
		l = m.RsaSigGen.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_RsaSigVerify) Size() (n int) {
	var l int
	_ = l
	if m.RsaSigVerify != nil {
		l = m.RsaSigVerify.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_SetupPrivKey) Size() (n int) {
	var l int
	_ = l
	if m.SetupPrivKey != nil {
		l = m.SetupPrivKey.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_SetupCert) Size() (n int) {
	var l int
	_ = l
	if m.SetupCert != nil {
		l = m.SetupCert.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_SetupPrivKeyEx) Size() (n int) {
	var l int
	_ = l
	if m.SetupPrivKeyEx != nil {
		l = m.SetupPrivKeyEx.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_FipsRsaSigGen) Size() (n int) {
	var l int
	_ = l
	if m.FipsRsaSigGen != nil {
		l = m.FipsRsaSigGen.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequest_FipsRsaSigVerify) Size() (n int) {
	var l int
	_ = l
	if m.FipsRsaSigVerify != nil {
		l = m.FipsRsaSigVerify.Size()
		n += 2 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.CryptoApiResp != nil {
		n += m.CryptoApiResp.Size()
	}
	return n
}

func (m *CryptoApiResponse_EccPointMulFp) Size() (n int) {
	var l int
	_ = l
	if m.EccPointMulFp != nil {
		l = m.EccPointMulFp.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_EcdsaSigGenFp) Size() (n int) {
	var l int
	_ = l
	if m.EcdsaSigGenFp != nil {
		l = m.EcdsaSigGenFp.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_RsaEncrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaEncrypt != nil {
		l = m.RsaEncrypt.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_RsaDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaDecrypt != nil {
		l = m.RsaDecrypt.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_RsaCrtDecrypt) Size() (n int) {
	var l int
	_ = l
	if m.RsaCrtDecrypt != nil {
		l = m.RsaCrtDecrypt.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_HashGenerate) Size() (n int) {
	var l int
	_ = l
	if m.HashGenerate != nil {
		l = m.HashGenerate.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_RsaSigGen) Size() (n int) {
	var l int
	_ = l
	if m.RsaSigGen != nil {
		l = m.RsaSigGen.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_SetupPrivKey) Size() (n int) {
	var l int
	_ = l
	if m.SetupPrivKey != nil {
		l = m.SetupPrivKey.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_SetupCert) Size() (n int) {
	var l int
	_ = l
	if m.SetupCert != nil {
		l = m.SetupCert.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_SetupPrivKeyEx) Size() (n int) {
	var l int
	_ = l
	if m.SetupPrivKeyEx != nil {
		l = m.SetupPrivKeyEx.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiResponse_FipsRsaSigGen) Size() (n int) {
	var l int
	_ = l
	if m.FipsRsaSigGen != nil {
		l = m.FipsRsaSigGen.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *CryptoApiRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *CryptoApiResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *DescrAolRequest) Size() (n int) {
	var l int
	_ = l
	if m.DescrAolHandle != 0 {
		n += 9
	}
	return n
}

func (m *DescrAolRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *DescrAolSpec) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.DescrAolHandle != 0 {
		n += 9
	}
	if m.Address1 != 0 {
		n += 9
	}
	if m.Offset1 != 0 {
		n += 5
	}
	if m.Length1 != 0 {
		n += 5
	}
	if m.Address2 != 0 {
		n += 9
	}
	if m.Offset2 != 0 {
		n += 5
	}
	if m.Length2 != 0 {
		n += 5
	}
	if m.Address3 != 0 {
		n += 9
	}
	if m.Offset3 != 0 {
		n += 5
	}
	if m.Length3 != 0 {
		n += 5
	}
	if m.NextDescrAolHandle != 0 {
		n += 9
	}
	return n
}

func (m *DescrAolResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxycCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *ProxycCbKeyHandle_ProxyccbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovInternal(uint64(m.ProxyccbId))
	return n
}
func (m *ProxycCbKeyHandle_ProxyccbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *ProxycCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Pi != 0 {
		n += 1 + sovInternal(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovInternal(uint64(m.Ci))
	}
	if m.ProxyccbFlags != 0 {
		n += 1 + sovInternal(uint64(m.ProxyccbFlags))
	}
	if m.MyTxqBase != 0 {
		n += 1 + sovInternal(uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		n += 1 + sovInternal(uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		n += 1 + sovInternal(uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainTxqBase != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqLif != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqQid))
	}
	if m.ChainTxqRing != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqRing))
	}
	if m.RedirSpan != 0 {
		n += 2 + sovInternal(uint64(m.RedirSpan))
	}
	if m.StatPktsChain != 0 {
		n += 2 + sovInternal(uint64(m.StatPktsChain))
	}
	if m.StatPktsDiscard != 0 {
		n += 2 + sovInternal(uint64(m.StatPktsDiscard))
	}
	if m.StatCbNotReady != 0 {
		n += 2 + sovInternal(uint64(m.StatCbNotReady))
	}
	if m.StatMyTxqEmpty != 0 {
		n += 2 + sovInternal(uint64(m.StatMyTxqEmpty))
	}
	if m.StatAolErr != 0 {
		n += 2 + sovInternal(uint64(m.StatAolErr))
	}
	if m.StatTxqFull != 0 {
		n += 2 + sovInternal(uint64(m.StatTxqFull))
	}
	if m.StatDescSemFreeFull != 0 {
		n += 2 + sovInternal(uint64(m.StatDescSemFreeFull))
	}
	if m.StatPageSemFreeFull != 0 {
		n += 2 + sovInternal(uint64(m.StatPageSemFreeFull))
	}
	return n
}

func (m *ProxycCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxycCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.ProxyccbHandle != 0 {
		n += 9
	}
	return n
}

func (m *ProxycCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.ProxyccbStatus != nil {
		l = m.ProxyccbStatus.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProxycCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxycCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProxycCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxycCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovInternal(uint64(e))
		}
		n += 1 + sovInternal(uint64(l)) + l
	}
	return n
}

func (m *ProxycCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProxycCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxycCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ProxycCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProxycCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxyrCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *ProxyrCbKeyHandle_ProxyrcbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovInternal(uint64(m.ProxyrcbId))
	return n
}
func (m *ProxyrCbKeyHandle_ProxyrcbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *ProxyrCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Pi != 0 {
		n += 1 + sovInternal(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovInternal(uint64(m.Ci))
	}
	if m.ProxyrcbFlags != 0 {
		n += 1 + sovInternal(uint64(m.ProxyrcbFlags))
	}
	if m.MyTxqBase != 0 {
		n += 1 + sovInternal(uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		n += 1 + sovInternal(uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		n += 1 + sovInternal(uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainRxqBase != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqBase))
	}
	if m.ChainRxqRingIndicesAddr != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqRingIndicesAddr))
	}
	if m.ChainRxqRingSizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqRingSizeShift))
	}
	if m.ChainRxqEntrySizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqEntrySizeShift))
	}
	if m.ChainRxqRingIndexSelect != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqRingIndexSelect))
	}
	if m.RedirSpan != 0 {
		n += 1 + sovInternal(uint64(m.RedirSpan))
	}
	if m.IpSa != nil {
		l = m.IpSa.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.IpDa != nil {
		l = m.IpDa.Size()
		n += 2 + l + sovInternal(uint64(l))
	}
	if m.Sport != 0 {
		n += 2 + sovInternal(uint64(m.Sport))
	}
	if m.Dport != 0 {
		n += 2 + sovInternal(uint64(m.Dport))
	}
	if m.Vrf != 0 {
		n += 2 + sovInternal(uint64(m.Vrf))
	}
	if m.Af != 0 {
		n += 2 + sovInternal(uint64(m.Af))
	}
	if m.IpProto != 0 {
		n += 2 + sovInternal(uint64(m.IpProto))
	}
	if m.Dir != 0 {
		n += 2 + sovInternal(uint64(m.Dir))
	}
	if m.Role != 0 {
		n += 2 + sovInternal(uint64(m.Role))
	}
	if m.RevCbId != 0 {
		n += 2 + sovInternal(uint64(m.RevCbId))
	}
	if m.StatPktsRedir != 0 {
		n += 2 + sovInternal(uint64(m.StatPktsRedir))
	}
	if m.StatPktsDiscard != 0 {
		n += 2 + sovInternal(uint64(m.StatPktsDiscard))
	}
	if m.StatCbNotReady != 0 {
		n += 2 + sovInternal(uint64(m.StatCbNotReady))
	}
	if m.StatNullRingIndicesAddr != 0 {
		n += 2 + sovInternal(uint64(m.StatNullRingIndicesAddr))
	}
	if m.StatAolErr != 0 {
		n += 2 + sovInternal(uint64(m.StatAolErr))
	}
	if m.StatRxqFull != 0 {
		n += 2 + sovInternal(uint64(m.StatRxqFull))
	}
	if m.StatTxqEmpty != 0 {
		n += 2 + sovInternal(uint64(m.StatTxqEmpty))
	}
	if m.StatSemAllocFull != 0 {
		n += 2 + sovInternal(uint64(m.StatSemAllocFull))
	}
	if m.StatSemFreeFull != 0 {
		n += 2 + sovInternal(uint64(m.StatSemFreeFull))
	}
	return n
}

func (m *ProxyrCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxyrCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.ProxyrcbHandle != 0 {
		n += 9
	}
	return n
}

func (m *ProxyrCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.ProxyrcbStatus != nil {
		l = m.ProxyrcbStatus.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProxyrCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxyrCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProxyrCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxyrCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovInternal(uint64(e))
		}
		n += 1 + sovInternal(uint64(l)) + l
	}
	return n
}

func (m *ProxyrCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProxyrCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProxyrCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ProxyrCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProxyrCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawrCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *RawrCbKeyHandle_RawrcbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovInternal(uint64(m.RawrcbId))
	return n
}
func (m *RawrCbKeyHandle_RawrcbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *RawrCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.RawrcbFlags != 0 {
		n += 1 + sovInternal(uint64(m.RawrcbFlags))
	}
	if m.ChainRxqBase != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqBase))
	}
	if m.ChainRxqRingIndicesAddr != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqRingIndicesAddr))
	}
	if m.ChainRxqRingSizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqRingSizeShift))
	}
	if m.ChainRxqEntrySizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqEntrySizeShift))
	}
	if m.ChainRxqRingIndexSelect != 0 {
		n += 1 + sovInternal(uint64(m.ChainRxqRingIndexSelect))
	}
	if m.ChainTxqBase != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqRingIndexSelect != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqRingIndexSelect))
	}
	if m.ChainTxqLif != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		n += 2 + sovInternal(uint64(m.ChainTxqQid))
	}
	if m.CpuId != 0 {
		n += 2 + sovInternal(uint64(m.CpuId))
	}
	if m.AscqBase != 0 {
		n += 2 + sovInternal(uint64(m.AscqBase))
	}
	if m.AscqSemInfAddr != 0 {
		n += 2 + sovInternal(uint64(m.AscqSemInfAddr))
	}
	if m.RedirPkts != 0 {
		n += 2 + sovInternal(uint64(m.RedirPkts))
	}
	if m.CbNotReadyDiscards != 0 {
		n += 2 + sovInternal(uint64(m.CbNotReadyDiscards))
	}
	if m.QstateCfgDiscards != 0 {
		n += 2 + sovInternal(uint64(m.QstateCfgDiscards))
	}
	if m.PktLenDiscards != 0 {
		n += 2 + sovInternal(uint64(m.PktLenDiscards))
	}
	if m.RxqFullDiscards != 0 {
		n += 2 + sovInternal(uint64(m.RxqFullDiscards))
	}
	if m.TxqFullDiscards != 0 {
		n += 2 + sovInternal(uint64(m.TxqFullDiscards))
	}
	if m.PktAllocErrors != 0 {
		n += 2 + sovInternal(uint64(m.PktAllocErrors))
	}
	if m.PktFreeErrors != 0 {
		n += 2 + sovInternal(uint64(m.PktFreeErrors))
	}
	return n
}

func (m *RawrCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawrCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.RawrcbHandle != 0 {
		n += 9
	}
	return n
}

func (m *RawrCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.RawrcbStatus != nil {
		l = m.RawrcbStatus.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RawrCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawrCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RawrCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawrCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovInternal(uint64(e))
		}
		n += 1 + sovInternal(uint64(l)) + l
	}
	return n
}

func (m *RawrCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RawrCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawrCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RawrCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RawrCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawcCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *RawcCbKeyHandle_RawccbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovInternal(uint64(m.RawccbId))
	return n
}
func (m *RawcCbKeyHandle_RawccbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *RawcCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Pi != 0 {
		n += 1 + sovInternal(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovInternal(uint64(m.Ci))
	}
	if m.RawccbFlags != 0 {
		n += 1 + sovInternal(uint64(m.RawccbFlags))
	}
	if m.MyTxqBase != 0 {
		n += 1 + sovInternal(uint64(m.MyTxqBase))
	}
	if m.MyTxqRingSizeShift != 0 {
		n += 1 + sovInternal(uint64(m.MyTxqRingSizeShift))
	}
	if m.MyTxqEntrySizeShift != 0 {
		n += 1 + sovInternal(uint64(m.MyTxqEntrySizeShift))
	}
	if m.ChainTxqBase != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqBase))
	}
	if m.ChainTxqRingIndicesAddr != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqRingIndicesAddr))
	}
	if m.ChainTxqRingSizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqRingSizeShift))
	}
	if m.ChainTxqEntrySizeShift != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqEntrySizeShift))
	}
	if m.ChainTxqLif != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqLif))
	}
	if m.ChainTxqQtype != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqQtype))
	}
	if m.ChainTxqQid != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqQid))
	}
	if m.ChainTxqRing != 0 {
		n += 1 + sovInternal(uint64(m.ChainTxqRing))
	}
	if m.CpuId != 0 {
		n += 2 + sovInternal(uint64(m.CpuId))
	}
	if m.AscqBase != 0 {
		n += 2 + sovInternal(uint64(m.AscqBase))
	}
	if m.AscqSemInfAddr != 0 {
		n += 2 + sovInternal(uint64(m.AscqSemInfAddr))
	}
	if m.ChainPkts != 0 {
		n += 2 + sovInternal(uint64(m.ChainPkts))
	}
	if m.CbNotReadyDiscards != 0 {
		n += 2 + sovInternal(uint64(m.CbNotReadyDiscards))
	}
	if m.QstateCfgDiscards != 0 {
		n += 2 + sovInternal(uint64(m.QstateCfgDiscards))
	}
	if m.AolErrorDiscards != 0 {
		n += 2 + sovInternal(uint64(m.AolErrorDiscards))
	}
	if m.MyTxqEmptyDiscards != 0 {
		n += 2 + sovInternal(uint64(m.MyTxqEmptyDiscards))
	}
	if m.TxqFullDiscards != 0 {
		n += 2 + sovInternal(uint64(m.TxqFullDiscards))
	}
	if m.PktFreeErrors != 0 {
		n += 2 + sovInternal(uint64(m.PktFreeErrors))
	}
	return n
}

func (m *RawcCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawcCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.RawccbHandle != 0 {
		n += 9
	}
	return n
}

func (m *RawcCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.RawccbStatus != nil {
		l = m.RawccbStatus.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RawcCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawcCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RawcCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawcCbDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	return n
}

func (m *RawcCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawcCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RawcCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *RawcCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RawcCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RawcCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *VmotionDebugSendRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *VmotionDebugSendRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VmotionDebugResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *VmotionStats) Size() (n int) {
	var l int
	_ = l
	if m.TotalVmotion != 0 {
		n += 1 + sovInternal(uint64(m.TotalVmotion))
	}
	if m.MigInVmotion != 0 {
		n += 1 + sovInternal(uint64(m.MigInVmotion))
	}
	if m.MigOutVmotion != 0 {
		n += 1 + sovInternal(uint64(m.MigOutVmotion))
	}
	if m.MigSuccess != 0 {
		n += 1 + sovInternal(uint64(m.MigSuccess))
	}
	if m.MigFailed != 0 {
		n += 1 + sovInternal(uint64(m.MigFailed))
	}
	if m.MigAborted != 0 {
		n += 1 + sovInternal(uint64(m.MigAborted))
	}
	if m.MigTimeout != 0 {
		n += 1 + sovInternal(uint64(m.MigTimeout))
	}
	if m.MigCold != 0 {
		n += 1 + sovInternal(uint64(m.MigCold))
	}
	return n
}

func (m *VmotionDebugEp) Size() (n int) {
	var l int
	_ = l
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.OldHomingHostIp)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.MigrationType != 0 {
		n += 1 + sovInternal(uint64(m.MigrationType))
	}
	if m.VmotionState != 0 {
		n += 1 + sovInternal(uint64(m.VmotionState))
	}
	if m.Flags != 0 {
		n += 1 + sovInternal(uint64(m.Flags))
	}
	if m.State != 0 {
		n += 1 + sovInternal(uint64(m.State))
	}
	return n
}

func (m *VmotionActiveEp) Size() (n int) {
	var l int
	_ = l
	l = len(m.MacAddress)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.MigrationState != 0 {
		n += 1 + sovInternal(uint64(m.MigrationState))
	}
	if m.UsegVlan != 0 {
		n += 1 + sovInternal(uint64(m.UsegVlan))
	}
	return n
}

func (m *VmotionDebugResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.VmotionEnable {
		n += 2
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if len(m.Ep) > 0 {
		for _, e := range m.Ep {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	if len(m.ActiveEp) > 0 {
		for _, e := range m.ActiveEp {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TestSendFinRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TestSendFinRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TestSendFinResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TestSendFinResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	return n
}

func (m *TestClockSyncRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TestClockSyncRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TestClockSyncResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TestClockSyncResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	return n
}

func (m *TestInjectFtePacketRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TestInjectFtePacketRequest) Size() (n int) {
	var l int
	_ = l
	if m.SourceEndpoint != nil {
		l = m.SourceEndpoint.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.DestinationEndpoint != nil {
		l = m.DestinationEndpoint.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.SourceIp != 0 {
		n += 1 + sovInternal(uint64(m.SourceIp))
	}
	if m.DestinationIp != 0 {
		n += 1 + sovInternal(uint64(m.DestinationIp))
	}
	return n
}

func (m *TestInjectFtePacketResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *TestInjectFtePacketResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	return n
}

func (m *FlowHashGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *FlowHashGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovInternal(uint64(m.ApiStatus))
	}
	if m.PrimaryIndexValid {
		n += 2
	}
	if m.PrimaryIndex != 0 {
		n += 1 + sovInternal(uint64(m.PrimaryIndex))
	}
	if m.SecondaryIndexValid {
		n += 2
	}
	if m.SecondaryIndex != 0 {
		n += 1 + sovInternal(uint64(m.SecondaryIndex))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *FlowHashGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.HardwareVrfId != 0 {
		n += 1 + sovInternal(uint64(m.HardwareVrfId))
	}
	if m.FlowKey != nil {
		l = m.FlowKey.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.FlowDirection != 0 {
		n += 1 + sovInternal(uint64(m.FlowDirection))
	}
	if m.FlowInstance != 0 {
		n += 1 + sovInternal(uint64(m.FlowInstance))
	}
	return n
}

func (m *FlowHashGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *InternalPortStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.PortDescr)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.PortStatus != 0 {
		n += 1 + sovInternal(uint64(m.PortStatus))
	}
	if m.PortSpeed != 0 {
		n += 1 + sovInternal(uint64(m.PortSpeed))
	}
	if m.PortMode != 0 {
		n += 1 + sovInternal(uint64(m.PortMode))
	}
	if m.PortTxPaused {
		n += 2
	}
	if m.PortFlowCtrl {
		n += 2
	}
	return n
}

func (m *InternalPortStats) Size() (n int) {
	var l int
	_ = l
	if m.InGoodOctets != 0 {
		n += 1 + sovInternal(uint64(m.InGoodOctets))
	}
	if m.InBadOctets != 0 {
		n += 1 + sovInternal(uint64(m.InBadOctets))
	}
	if m.InUnicast != 0 {
		n += 1 + sovInternal(uint64(m.InUnicast))
	}
	if m.InBroadcast != 0 {
		n += 1 + sovInternal(uint64(m.InBroadcast))
	}
	if m.InMulticast != 0 {
		n += 1 + sovInternal(uint64(m.InMulticast))
	}
	if m.InPause != 0 {
		n += 1 + sovInternal(uint64(m.InPause))
	}
	if m.InUndersize != 0 {
		n += 1 + sovInternal(uint64(m.InUndersize))
	}
	if m.InFragments != 0 {
		n += 1 + sovInternal(uint64(m.InFragments))
	}
	if m.InOversize != 0 {
		n += 1 + sovInternal(uint64(m.InOversize))
	}
	if m.InJabber != 0 {
		n += 1 + sovInternal(uint64(m.InJabber))
	}
	if m.InRxErr != 0 {
		n += 1 + sovInternal(uint64(m.InRxErr))
	}
	if m.InFcsErr != 0 {
		n += 1 + sovInternal(uint64(m.InFcsErr))
	}
	if m.OutOctets != 0 {
		n += 1 + sovInternal(uint64(m.OutOctets))
	}
	if m.OutUnicast != 0 {
		n += 1 + sovInternal(uint64(m.OutUnicast))
	}
	if m.OutBroadcast != 0 {
		n += 1 + sovInternal(uint64(m.OutBroadcast))
	}
	if m.OutMulticast != 0 {
		n += 2 + sovInternal(uint64(m.OutMulticast))
	}
	if m.OutFcsErr != 0 {
		n += 2 + sovInternal(uint64(m.OutFcsErr))
	}
	if m.OutPause != 0 {
		n += 2 + sovInternal(uint64(m.OutPause))
	}
	if m.OutCollisions != 0 {
		n += 2 + sovInternal(uint64(m.OutCollisions))
	}
	if m.OutDeferred != 0 {
		n += 2 + sovInternal(uint64(m.OutDeferred))
	}
	if m.OutSingle != 0 {
		n += 2 + sovInternal(uint64(m.OutSingle))
	}
	if m.OutMultiple != 0 {
		n += 2 + sovInternal(uint64(m.OutMultiple))
	}
	if m.OutExcessive != 0 {
		n += 2 + sovInternal(uint64(m.OutExcessive))
	}
	if m.OutLate != 0 {
		n += 2 + sovInternal(uint64(m.OutLate))
	}
	return n
}

func (m *InternalPortResponse) Size() (n int) {
	var l int
	_ = l
	if m.PortNumber != 0 {
		n += 1 + sovInternal(uint64(m.PortNumber))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *InternalPortResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *InternalPortRequest) Size() (n int) {
	var l int
	_ = l
	if m.PortNumber != 0 {
		n += 1 + sovInternal(uint64(m.PortNumber))
	}
	return n
}

func (m *InternalPortRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func sovInternal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProgramAddressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramAddressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramAddressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveLabel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResolveLabel = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgramAddressResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramAddressResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramAddressResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProgramAddressRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProgramAddressRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProgramAddressRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProgramAddressReq{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgramAddressResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramAddressResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramAddressResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProgramAddressResp{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmAddressReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmAddressReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmAddressReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmAddressResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmAddressResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmAddressResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocHbmAddressRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocHbmAddressRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocHbmAddressRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &HbmAddressReq{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocHbmAddressResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocHbmAddressResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocHbmAddressResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &HbmAddressResp{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifBdfReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifBdfReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifBdfReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lif", wireType)
			}
			m.Lif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bdf", wireType)
			}
			m.Bdf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bdf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LifBdfResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LifBdfResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LifBdfResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lif", wireType)
			}
			m.Lif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bdf", wireType)
			}
			m.Bdf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bdf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureLifBdfRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureLifBdfRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureLifBdfRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &LifBdfReq{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigureLifBdfResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigureLifBdfResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigureLifBdfResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LifBdfResp{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			m.Pipeline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pipeline |= (SoftwarePhvPipeline(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Done", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Done = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCntr", wireType)
			}
			m.CurrentCntr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCntr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InjectCntr", wireType)
			}
			m.InjectCntr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InjectCntr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SoftwarePhvResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			m.Pipeline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pipeline |= (SoftwarePhvPipeline(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SoftwarePhvGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SoftwarePhvStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SoftwarePhvGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvInject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvInject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvInject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			m.Pipeline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pipeline |= (SoftwarePhvPipeline(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SoftwarePhvInjectMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SoftwarePhvInjectMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SoftwarePhvInjectMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SoftwarePhvInject{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogFlowRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFlowRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFlowRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &FWEvent{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogFlowResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFlowResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFlowResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LogFlowResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &Empty{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &Empty{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpcbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &TcpCbKeyHandle_TcpcbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpcbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &TcpCbKeyHandle_TcpcbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TcpCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvNxt", wireType)
			}
			m.RcvNxt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvNxt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndNxt", wireType)
			}
			m.SndNxt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndNxt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndUna", wireType)
			}
			m.SndUna = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndUna |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvTsval", wireType)
			}
			m.RcvTsval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvTsval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsRecent", wireType)
			}
			m.TsRecent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsRecent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqBase", wireType)
			}
			m.SerqBase = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SerqBase = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugDol", wireType)
			}
			m.DebugDol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugDol |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqBase", wireType)
			}
			m.SesqBase = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SesqBase = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqPi", wireType)
			}
			m.SesqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqCi", wireType)
			}
			m.SesqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndWnd", wireType)
			}
			m.SndWnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndWnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndCwnd", wireType)
			}
			m.SndCwnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndCwnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvMss", wireType)
			}
			m.RcvMss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvMss |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			m.SourcePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourcePort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPort", wireType)
			}
			m.DestPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderTemplate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderTemplate = append(m.HeaderTemplate[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderTemplate == nil {
				m.HeaderTemplate = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceLif", wireType)
			}
			m.SourceLif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceLif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsesqBase", wireType)
			}
			m.AsesqBase = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AsesqBase = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsesqPi", wireType)
			}
			m.AsesqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsesqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsesqCi", wireType)
			}
			m.AsesqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsesqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugDolTx", wireType)
			}
			m.DebugDolTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugDolTx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderLen", wireType)
			}
			m.HeaderLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAckSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendingAckSend = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7ProxyType", wireType)
			}
			m.L7ProxyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L7ProxyType |= (AppRedirType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqRetxCi", wireType)
			}
			m.SesqRetxCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqRetxCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetxSndUna", wireType)
			}
			m.RetxSndUna = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetxSndUna |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxTs", wireType)
			}
			m.RxTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rto", wireType)
			}
			m.Rto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rto |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndCwndCnt", wireType)
			}
			m.SndCwndCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndCwndCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugDolTblsetaddr", wireType)
			}
			m.DebugDolTblsetaddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugDolTblsetaddr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqPi", wireType)
			}
			m.SerqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredFlags", wireType)
			}
			m.PredFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PredFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherQid", wireType)
			}
			m.OtherQid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherQid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsOut", wireType)
			}
			m.PacketsOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsOut |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndSsthresh", wireType)
			}
			m.SndSsthresh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndSsthresh |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CcAlgo", wireType)
			}
			m.CcAlgo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CcAlgo |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RtoBackoff", wireType)
			}
			m.RtoBackoff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RtoBackoff |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuId", wireType)
			}
			m.CpuId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqCi", wireType)
			}
			m.SerqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvWnd", wireType)
			}
			m.RcvWnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvWnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndWscale", wireType)
			}
			m.SndWscale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndWscale |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvWscale", wireType)
			}
			m.RcvWscale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvWscale |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqTxCi", wireType)
			}
			m.SesqTxCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqTxCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayAck", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelayAck = bool(v != 0)
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ato", wireType)
			}
			m.Ato = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ato |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndRecover", wireType)
			}
			m.SndRecover = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndRecover |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Smss", wireType)
			}
			m.Smss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Smss |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialWindow", wireType)
			}
			m.InitialWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialWindow |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbcLVar", wireType)
			}
			m.AbcLVar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbcLVar |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OooQueue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OooQueue = bool(v != 0)
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OooRx2TxQbase", wireType)
			}
			m.OooRx2TxQbase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OooRx2TxQbase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvWup", wireType)
			}
			m.RcvWup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvWup |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbBase", wireType)
			}
			m.CbBase = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.CbBase = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroWindowSent", wireType)
			}
			m.ZeroWindowSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZeroWindowSent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbBaseQtype1", wireType)
			}
			m.CbBaseQtype1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.CbBaseQtype1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrttUs", wireType)
			}
			m.SrttUs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrttUs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SackPerm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SackPerm = bool(v != 0)
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamps = bool(v != 0)
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxWindowUpdatePi", wireType)
			}
			m.TxWindowUpdatePi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxWindowUpdatePi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttSeqTsoffset", wireType)
			}
			m.RttSeqTsoffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RttSeqTsoffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RttTime", wireType)
			}
			m.RttTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RttTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsLearned", wireType)
			}
			m.TsLearned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsLearned |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsOffset", wireType)
			}
			m.TsOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsOffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsTime", wireType)
			}
			m.TsTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyType", wireType)
			}
			m.ProxyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyType |= (ProxyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TcpCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbOoqStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbOoqStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbOoqStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueAddr", wireType)
			}
			m.QueueAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartSeq", wireType)
			}
			m.StartSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartSeq |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndSeq", wireType)
			}
			m.EndSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndSeq |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEntries", wireType)
			}
			m.NumEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEntries |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpcbHandle", wireType)
			}
			m.TcpcbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpcbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OoqNotEmpty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OoqNotEmpty = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OoqStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OoqStatus = append(m.OoqStatus, &TcpCbOoqStatus{})
			if err := m.OoqStatus[len(m.OoqStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpcbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpcbStatus == nil {
				m.TcpcbStatus = &TcpCbStatus{}
			}
			if err := m.TcpcbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TcpCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TcpCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TcpCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInternal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TcpCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TcpCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRcvd", wireType)
			}
			m.BytesRcvd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRcvd |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktsRcvd", wireType)
			}
			m.PktsRcvd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PktsRcvd |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesAcked", wireType)
			}
			m.BytesAcked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesAcked |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PureAcksRcvd", wireType)
			}
			m.PureAcksRcvd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PureAcksRcvd |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DupAcksRcvd", wireType)
			}
			m.DupAcksRcvd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DupAcksRcvd |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowPathCnt", wireType)
			}
			m.SlowPathCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlowPathCnt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqFullCnt", wireType)
			}
			m.SerqFullCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqFullCnt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OooCnt", wireType)
			}
			m.OooCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OooCnt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxDropCnt", wireType)
			}
			m.RxDropCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxDropCnt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSent", wireType)
			}
			m.BytesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10002:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktsSent", wireType)
			}
			m.PktsSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PktsSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PureAcksSent", wireType)
			}
			m.PureAcksSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PureAcksSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10005:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqPi", wireType)
			}
			m.SesqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10006:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqCi", wireType)
			}
			m.SesqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10007:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendAckPi", wireType)
			}
			m.SendAckPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendAckPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10008:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendAckCi", wireType)
			}
			m.SendAckCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendAckCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10009:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastTimerPi", wireType)
			}
			m.FastTimerPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FastTimerPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10010:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastTimerCi", wireType)
			}
			m.FastTimerCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FastTimerCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10011:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelAckPi", wireType)
			}
			m.DelAckPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelAckPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10012:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelAckCi", wireType)
			}
			m.DelAckCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelAckCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10013:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsesqPi", wireType)
			}
			m.AsesqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsesqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10014:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsesqCi", wireType)
			}
			m.AsesqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsesqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10015:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTxPi", wireType)
			}
			m.PendingTxPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingTxPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10016:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTxCi", wireType)
			}
			m.PendingTxCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingTxCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10017:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastRetransPi", wireType)
			}
			m.FastRetransPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FastRetransPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10018:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastRetransCi", wireType)
			}
			m.FastRetransCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FastRetransCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10019:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CleanRetxPi", wireType)
			}
			m.CleanRetxPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CleanRetxPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10020:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CleanRetxCi", wireType)
			}
			m.CleanRetxCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CleanRetxCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10021:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketsOut", wireType)
			}
			m.PacketsOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PacketsOut |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10022:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqTxCi", wireType)
			}
			m.SesqTxCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqTxCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10023:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqRetxCi", wireType)
			}
			m.SesqRetxCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqRetxCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10024:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsesqRetxCi", wireType)
			}
			m.AsesqRetxCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsesqRetxCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10025:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRingPi", wireType)
			}
			m.TxRingPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxRingPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10026:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialPktAckCnt", wireType)
			}
			m.PartialPktAckCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartialPktAckCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10027:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtoDeadline", wireType)
			}
			m.AtoDeadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtoDeadline |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10028:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RtoDeadline", wireType)
			}
			m.RtoDeadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RtoDeadline |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10029:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CcFlags", wireType)
			}
			m.CcFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CcFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10030:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleDeadline", wireType)
			}
			m.IdleDeadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleDeadline |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10031:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowFullCnt", wireType)
			}
			m.WindowFullCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowFullCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10032:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OoqRx2TxPi", wireType)
			}
			m.OoqRx2TxPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OoqRx2TxPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10033:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OoqRx2TxCi", wireType)
			}
			m.OoqRx2TxCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OoqRx2TxCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10034:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetxCnt", wireType)
			}
			m.RetxCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetxCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10035:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowUpdatePi", wireType)
			}
			m.WindowUpdatePi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowUpdatePi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10036:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowUpdateCi", wireType)
			}
			m.WindowUpdateCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowUpdateCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &TcpCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &TcpCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &TcpCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TcpCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlscbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &TlsCbKeyHandle_TlscbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlscbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &TlsCbKeyHandle_TlscbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TlsCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicDecHead", wireType)
			}
			m.NicDecHead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NicDecHead |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicDecTail", wireType)
			}
			m.NicDecTail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NicDecTail |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugDol", wireType)
			}
			m.DebugDol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugDol |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqPi", wireType)
			}
			m.SerqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqCi", wireType)
			}
			m.SerqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsqPi", wireType)
			}
			m.BsqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsqCi", wireType)
			}
			m.BsqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptoKeyIdx", wireType)
			}
			m.CryptoKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CryptoKeyIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqBase", wireType)
			}
			m.SerqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqBase |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqBase", wireType)
			}
			m.SesqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqBase |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TnmdprAlloc", wireType)
			}
			m.TnmdprAlloc = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TnmdprAlloc = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RnmdprFree", wireType)
			}
			m.RnmdprFree = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.RnmdprFree = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncRequests", wireType)
			}
			m.EncRequests = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.EncRequests = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCompletions", wireType)
			}
			m.EncCompletions = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCompletions = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncFailures", wireType)
			}
			m.EncFailures = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.EncFailures = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecRequests", wireType)
			}
			m.DecRequests = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DecRequests = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecCompletions", wireType)
			}
			m.DecCompletions = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DecCompletions = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecFailures", wireType)
			}
			m.DecFailures = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DecFailures = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitIv", wireType)
			}
			m.ExplicitIv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExplicitIv |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDebugStage0_7Thread", wireType)
			}
			m.PreDebugStage0_7Thread = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreDebugStage0_7Thread |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostDebugStage0_7Thread", wireType)
			}
			m.PostDebugStage0_7Thread = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostDebugStage0_7Thread |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDecryptFlow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDecryptFlow = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherFid", wireType)
			}
			m.OtherFid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherFid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7ProxyType", wireType)
			}
			m.L7ProxyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L7ProxyType |= (AppRedirType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptoHmacKeyIdx", wireType)
			}
			m.CryptoHmacKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CryptoHmacKeyIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacRequests", wireType)
			}
			m.MacRequests = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MacRequests = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 30:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacCompletions", wireType)
			}
			m.MacCompletions = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MacCompletions = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 31:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacFailures", wireType)
			}
			m.MacFailures = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MacFailures = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuId", wireType)
			}
			m.CpuId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TlsCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlscbHandle", wireType)
			}
			m.TlscbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TlscbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlscbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlscbStatus == nil {
				m.TlscbStatus = &TlsCbStatus{}
			}
			if err := m.TlscbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TlsCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TlsCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TlsCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInternal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TlsCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TlsCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &TlsCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &TlsCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &TlsCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TlsCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WringId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &WRingKeyHandle_WringId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WringHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &WRingKeyHandle_WringHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &WRingKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (WRingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &WRingSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WringHandle", wireType)
			}
			m.WringHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.WringHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WringStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WringStatus == nil {
				m.WringStatus = &WRingStatus{}
			}
			if err := m.WringStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &WRingResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &WRingKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &WRingDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInternal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &WRingKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (WRingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetEntriesRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetEntriesRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetEntriesRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &WRingGetEntriesRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingBarcoGCMDescMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingBarcoGCMDescMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingBarcoGCMDescMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IlistAddr", wireType)
			}
			m.IlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IlistAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OlistAddr", wireType)
			}
			m.OlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.OlistAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyDescIndex", wireType)
			}
			m.KeyDescIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyDescIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IvAddr", wireType)
			}
			m.IvAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IvAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusAddr", wireType)
			}
			m.StatusAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellAddr", wireType)
			}
			m.DoorbellAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DoorbellAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellData", wireType)
			}
			m.DoorbellData = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DoorbellData = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitIv", wireType)
			}
			m.ExplicitIv = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplicitIv = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderSize", wireType)
			}
			m.HeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcoStatus", wireType)
			}
			m.BarcoStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcoStatus |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetEntriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetEntriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetEntriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &WRingSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &WRingStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &WRingStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WRingSlotInfo = &WRingGetEntriesResponse_Value{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcoGcmDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WRingBarcoGCMDescMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WRingSlotInfo = &WRingGetEntriesResponse_BarcoGcmDesc{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.WRingSlotInfo = &WRingGetEntriesResponse_Raw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetEntriesResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetEntriesResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetEntriesResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &WRingGetEntriesResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &WRingSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetMetaResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetMetaResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetMetaResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &WRingGetMetaResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingSetMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingSetMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingSetMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &WRingSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingSetMetaResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingSetMetaResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingSetMetaResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &WRingSetMetaResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpaqueTagAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpaqueTagAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpaqueTagAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpaqueTagAddrRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpaqueTagAddrRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpaqueTagAddrRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &GetOpaqueTagAddrRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpaqueTagAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpaqueTagAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpaqueTagAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpaqueTagAddr", wireType)
			}
			m.OpaqueTagAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpaqueTagAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpaqueTagAddrResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpaqueTagAddrResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpaqueTagAddrResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &GetOpaqueTagAddrResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetReqDescrEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIndex", wireType)
			}
			m.SlotIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetReqDescrEntryRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &BarcoGetReqDescrEntryRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoSymmReqDescrMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoSymmReqDescrMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoSymmReqDescrMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IlistAddr", wireType)
			}
			m.IlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IlistAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OlistAddr", wireType)
			}
			m.OlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.OlistAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyDescIndex", wireType)
			}
			m.KeyDescIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyDescIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IvAddr", wireType)
			}
			m.IvAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IvAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusAddr", wireType)
			}
			m.StatusAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellAddr", wireType)
			}
			m.DoorbellAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DoorbellAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellData", wireType)
			}
			m.DoorbellData = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DoorbellData = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitIv", wireType)
			}
			m.ExplicitIv = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplicitIv = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderSize", wireType)
			}
			m.HeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcoStatus", wireType)
			}
			m.BarcoStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcoStatus |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondKeyDescIndex", wireType)
			}
			m.SecondKeyDescIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondKeyDescIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoASymReqDescrMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoASymReqDescrMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoASymReqDescrMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IlistAddr", wireType)
			}
			m.IlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.IlistAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OlistAddr", wireType)
			}
			m.OlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.OlistAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyDescIndex", wireType)
			}
			m.KeyDescIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyDescIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusAddr", wireType)
			}
			m.StatusAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusAddr = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpaqueTagValue", wireType)
			}
			m.OpaqueTagValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpaqueTagValue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpaqueTagWrEn", wireType)
			}
			m.OpaqueTagWrEn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpaqueTagWrEn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagA", wireType)
			}
			m.FlagA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagA |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagB", wireType)
			}
			m.FlagB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagB |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetReqDescrEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIndex", wireType)
			}
			m.SlotIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SymmReqDescr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BarcoSymmReqDescrMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_SymmReqDescr{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsymReqDescr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BarcoASymReqDescrMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ReqDescrMsg = &BarcoGetReqDescrEntryResponse_AsymReqDescr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetReqDescrEntryResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetReqDescrEntryResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &BarcoGetReqDescrEntryResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &BarcoGetRingMetaRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &BarcoGetRingMetaResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaConfigRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaConfigRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaConfigRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &BarcoGetRingMetaConfigRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingType", wireType)
			}
			m.RingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingType |= (BarcoRings(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingBase", wireType)
			}
			m.RingBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducerIdxAddr", wireType)
			}
			m.ProducerIdxAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProducerIdxAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShadowPndxAddr", wireType)
			}
			m.ShadowPndxAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShadowPndxAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpaqueTagAddr", wireType)
			}
			m.OpaqueTagAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpaqueTagAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RingSize", wireType)
			}
			m.RingSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RingSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescSize", wireType)
			}
			m.DescSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PndxSize", wireType)
			}
			m.PndxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PndxSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpaqueTagSize", wireType)
			}
			m.OpaqueTagSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpaqueTagSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BarcoGetRingMetaConfigResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BarcoGetRingMetaConfigResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BarcoGetRingMetaConfigResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &BarcoGetRingMetaConfigResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyCreateRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyCreateResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateWithIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDupAlloc", wireType)
			}
			m.AllowDupAlloc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowDupAlloc |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateWithIdRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyCreateWithIdRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateWithIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyCreateWithIdResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyCreateWithIdResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyCreateWithIdResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (CryptoKeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyReadRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyReadRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyReadRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyReadRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &CryptoKeySpec{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyReadResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyReadResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyReadResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyReadResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &CryptoKeySpec{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyUpdateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyUpdateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyUpdateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyUpdateRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyUpdateResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyUpdateResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyUpdateResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyUpdateResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoKeyDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoKeyDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoKeyDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoKeyDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoKeyDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyCreateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyCreateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyCreateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoAsymKeyCreateRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyCreateResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyCreateResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyCreateResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoAsymKeyCreateResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoAsymKeyDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoAsymKeyDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyWriteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyWriteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyWriteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &CryptoAsymKeySpec{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyWriteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyWriteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyWriteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoAsymKeyWriteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyWriteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyWriteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyWriteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyindex", wireType)
			}
			m.Keyindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keyindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymKeyWriteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymKeyWriteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymKeyWriteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoAsymKeyWriteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ECCPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ECCPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ECCPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.X = append(m.X[:0], dAtA[iNdEx:postIndex]...)
			if m.X == nil {
				m.X = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Y = append(m.Y[:0], dAtA[iNdEx:postIndex]...)
			if m.Y == nil {
				m.Y = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiECCDomainParamsFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiECCDomainParamsFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiECCDomainParamsFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = append(m.P[:0], dAtA[iNdEx:postIndex]...)
			if m.P == nil {
				m.P = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = append(m.A[:0], dAtA[iNdEx:postIndex]...)
			if m.A == nil {
				m.A = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B[:0], dAtA[iNdEx:postIndex]...)
			if m.B == nil {
				m.B = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.G == nil {
				m.G = &ECCPoint{}
			}
			if err := m.G.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = append(m.N[:0], dAtA[iNdEx:postIndex]...)
			if m.N == nil {
				m.N = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqECCPointMulFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqECCPointMulFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqECCPointMulFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccDomainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EccDomainParams == nil {
				m.EccDomainParams = &CryptoAsymApiECCDomainParamsFp{}
			}
			if err := m.EccDomainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EccPoint == nil {
				m.EccPoint = &ECCPoint{}
			}
			if err := m.EccPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K = append(m.K[:0], dAtA[iNdEx:postIndex]...)
			if m.K == nil {
				m.K = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespECCPointMulFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespECCPointMulFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespECCPointMulFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Q == nil {
				m.Q = &ECCPoint{}
			}
			if err := m.Q.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqECDSASignatureGenFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqECDSASignatureGenFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqECDSASignatureGenFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccDomainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EccDomainParams == nil {
				m.EccDomainParams = &CryptoAsymApiECCDomainParamsFp{}
			}
			if err := m.EccDomainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Da", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Da = append(m.Da[:0], dAtA[iNdEx:postIndex]...)
			if m.Da == nil {
				m.Da = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K = append(m.K[:0], dAtA[iNdEx:postIndex]...)
			if m.K == nil {
				m.K = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIdx", wireType)
			}
			m.KeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespECDSASignatureGenFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespECDSASignatureGenFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespECDSASignatureGenFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqECDSASignatureVerifyFp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqECDSASignatureVerifyFp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqECDSASignatureVerifyFp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccDomainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EccDomainParams == nil {
				m.EccDomainParams = &CryptoAsymApiECCDomainParamsFp{}
			}
			if err := m.EccDomainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Q == nil {
				m.Q = &ECCPoint{}
			}
			if err := m.Q.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSAEncrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSAEncrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSAEncrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = append(m.E[:0], dAtA[iNdEx:postIndex]...)
			if m.E == nil {
				m.E = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlainText = append(m.PlainText[:0], dAtA[iNdEx:postIndex]...)
			if m.PlainText == nil {
				m.PlainText = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSAEncrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSAEncrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSAEncrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherText = append(m.CipherText[:0], dAtA[iNdEx:postIndex]...)
			if m.CipherText == nil {
				m.CipherText = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSADecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSADecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSADecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = append(m.D[:0], dAtA[iNdEx:postIndex]...)
			if m.D == nil {
				m.D = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherText = append(m.CipherText[:0], dAtA[iNdEx:postIndex]...)
			if m.CipherText == nil {
				m.CipherText = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSADecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSADecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSADecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlainText = append(m.PlainText[:0], dAtA[iNdEx:postIndex]...)
			if m.PlainText == nil {
				m.PlainText = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSACRTDecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSACRTDecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSACRTDecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = append(m.P[:0], dAtA[iNdEx:postIndex]...)
			if m.P == nil {
				m.P = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = append(m.Q[:0], dAtA[iNdEx:postIndex]...)
			if m.Q == nil {
				m.Q = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dp", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dp = append(m.Dp[:0], dAtA[iNdEx:postIndex]...)
			if m.Dp == nil {
				m.Dp = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dq", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dq = append(m.Dq[:0], dAtA[iNdEx:postIndex]...)
			if m.Dq == nil {
				m.Dq = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qinv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qinv = append(m.Qinv[:0], dAtA[iNdEx:postIndex]...)
			if m.Qinv == nil {
				m.Qinv = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CipherText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CipherText = append(m.CipherText[:0], dAtA[iNdEx:postIndex]...)
			if m.CipherText == nil {
				m.CipherText = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIdx", wireType)
			}
			m.KeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSACRTDecrypt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSACRTDecrypt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSACRTDecrypt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainText", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlainText = append(m.PlainText[:0], dAtA[iNdEx:postIndex]...)
			if m.PlainText == nil {
				m.PlainText = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqSetupPrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupPrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupPrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespECDSAKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespECDSAKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespECDSAKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignKeyIdx", wireType)
			}
			m.SignKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignKeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSAKeyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSAKeyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSAKeyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignKeyIdx", wireType)
			}
			m.SignKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignKeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecryptKeyIdx", wireType)
			}
			m.DecryptKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecryptKeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespSetupPrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupPrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupPrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (CryptoAsymKeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaKeyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespECDSAKeyInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_EcdsaKeyInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaKeyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSAKeyInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.KeyInfo = &CryptoAsymApiRespSetupPrivateKey_RsaKeyInfo{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqSetupCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= (UpdateType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertId", wireType)
			}
			m.CertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCertId", wireType)
			}
			m.NextCertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCertId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespSetupCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymRsaKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymRsaKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymRsaKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = append(m.N[:0], dAtA[iNdEx:postIndex]...)
			if m.N == nil {
				m.N = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = append(m.E[:0], dAtA[iNdEx:postIndex]...)
			if m.E == nil {
				m.E = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = append(m.D[:0], dAtA[iNdEx:postIndex]...)
			if m.D == nil {
				m.D = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqSetupPrivateKeyEx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupPrivateKeyEx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqSetupPrivateKeyEx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (CryptoAsymKeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymRsaKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Key = &CryptoAsymApiReqSetupPrivateKeyEx_RsaKey{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespSetupPrivateKeyEx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupPrivateKeyEx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespSetupPrivateKeyEx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (CryptoAsymKeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIdx", wireType)
			}
			m.KeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSASignatureGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSASignatureGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSASignatureGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.D = append(m.D[:0], dAtA[iNdEx:postIndex]...)
			if m.D == nil {
				m.D = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIdx", wireType)
			}
			m.KeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsyncEn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsyncEn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespRSASignatureGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSASignatureGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespRSASignatureGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqRSASignatureVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSASignatureVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqRSASignatureVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = append(m.E[:0], dAtA[iNdEx:postIndex]...)
			if m.E == nil {
				m.E = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H = append(m.H[:0], dAtA[iNdEx:postIndex]...)
			if m.H == nil {
				m.H = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoSymmApiReqHashGenerate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoSymmApiReqHashGenerate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoSymmApiReqHashGenerate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashtype", wireType)
			}
			m.Hashtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hashtype |= (CryptoApiHashType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyLen", wireType)
			}
			m.KeyLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLen", wireType)
			}
			m.DataLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestLen", wireType)
			}
			m.DigestLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DigestLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoSymmApiRespHashGenerate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoSymmApiRespHashGenerate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoSymmApiRespHashGenerate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoSymmApiReqHashVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoSymmApiReqHashVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoSymmApiReqHashVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashtype", wireType)
			}
			m.Hashtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hashtype |= (CryptoApiHashType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyLen", wireType)
			}
			m.KeyLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLen", wireType)
			}
			m.DataLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestLen", wireType)
			}
			m.DigestLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DigestLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqFIPSRSASignatureGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqFIPSRSASignatureGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqFIPSRSASignatureGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyIdx", wireType)
			}
			m.KeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = append(m.E[:0], dAtA[iNdEx:postIndex]...)
			if m.E == nil {
				m.E = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashType", wireType)
			}
			m.HashType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashType |= (HashType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigScheme", wireType)
			}
			m.SigScheme = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigScheme |= (RSASignatureScheme(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiRespFIPSRSASignatureGen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiRespFIPSRSASignatureGen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiRespFIPSRSASignatureGen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoAsymApiReqFIPSRSASignatureVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoAsymApiReqFIPSRSASignatureVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoAsymApiReqFIPSRSASignatureVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModN = append(m.ModN[:0], dAtA[iNdEx:postIndex]...)
			if m.ModN == nil {
				m.ModN = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = append(m.E[:0], dAtA[iNdEx:postIndex]...)
			if m.E == nil {
				m.E = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = append(m.S[:0], dAtA[iNdEx:postIndex]...)
			if m.S == nil {
				m.S = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashType", wireType)
			}
			m.HashType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HashType |= (HashType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigScheme", wireType)
			}
			m.SigScheme = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigScheme |= (RSASignatureScheme(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoApiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoApiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoApiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiType", wireType)
			}
			m.ApiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiType |= (CryptoApiType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccPointMulFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqECCPointMulFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_EccPointMulFp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaSigGenFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqECDSASignatureGenFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_EcdsaSigGenFp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaSigVerifyFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqECDSASignatureVerifyFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_EcdsaSigVerifyFp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaEncrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSAEncrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaEncrypt{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaDecrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSADecrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaDecrypt{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaCrtDecrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSACRTDecrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaCrtDecrypt{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashGenerate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoSymmApiReqHashGenerate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_HashGenerate{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoSymmApiReqHashVerify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_HashVerify{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaSigGen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSASignatureGen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaSigGen{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaSigVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqRSASignatureVerify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_RsaSigVerify{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupPrivKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqSetupPrivateKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_SetupPrivKey{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqSetupCert{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_SetupCert{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupPrivKeyEx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqSetupPrivateKeyEx{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_SetupPrivKeyEx{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FipsRsaSigGen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqFIPSRSASignatureGen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_FipsRsaSigGen{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FipsRsaSigVerify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiReqFIPSRSASignatureVerify{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiReq = &CryptoApiRequest_FipsRsaSigVerify{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoApiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoApiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoApiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EccPointMulFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespECCPointMulFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_EccPointMulFp{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaSigGenFp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespECDSASignatureGenFp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_EcdsaSigGenFp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaEncrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSAEncrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_RsaEncrypt{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaDecrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSADecrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_RsaDecrypt{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaCrtDecrypt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSACRTDecrypt{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_RsaCrtDecrypt{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashGenerate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoSymmApiRespHashGenerate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_HashGenerate{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RsaSigGen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespRSASignatureGen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_RsaSigGen{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupPrivKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespSetupPrivateKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_SetupPrivKey{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespSetupCert{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_SetupCert{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupPrivKeyEx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespSetupPrivateKeyEx{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_SetupPrivKeyEx{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FipsRsaSigGen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CryptoAsymApiRespFIPSRSASignatureGen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CryptoApiResp = &CryptoApiResponse_FipsRsaSigGen{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoApiRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoApiRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoApiRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &CryptoApiRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CryptoApiResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CryptoApiResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CryptoApiResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &CryptoApiResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescrAolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescrAolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescrAolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescrAolHandle", wireType)
			}
			m.DescrAolHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DescrAolHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescrAolRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescrAolRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescrAolRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &DescrAolRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescrAolSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescrAolSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescrAolSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescrAolHandle", wireType)
			}
			m.DescrAolHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DescrAolHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address1", wireType)
			}
			m.Address1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Address1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset1", wireType)
			}
			m.Offset1 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset1 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length1", wireType)
			}
			m.Length1 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Length1 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address2", wireType)
			}
			m.Address2 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Address2 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset2", wireType)
			}
			m.Offset2 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset2 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length2", wireType)
			}
			m.Length2 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Length2 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address3", wireType)
			}
			m.Address3 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Address3 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset3", wireType)
			}
			m.Offset3 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset3 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length3", wireType)
			}
			m.Length3 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Length3 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDescrAolHandle", wireType)
			}
			m.NextDescrAolHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.NextDescrAolHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescrAolResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescrAolResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescrAolResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &DescrAolSpec{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &ProxycCbKeyHandle_ProxyccbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxycCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbFlags", wireType)
			}
			m.ProxyccbFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyccbFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqBase", wireType)
			}
			m.MyTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqRingSizeShift", wireType)
			}
			m.MyTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqEntrySizeShift", wireType)
			}
			m.MyTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqBase", wireType)
			}
			m.ChainTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingIndicesAddr", wireType)
			}
			m.ChainTxqRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingIndicesAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingSizeShift", wireType)
			}
			m.ChainTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqEntrySizeShift", wireType)
			}
			m.ChainTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqLif", wireType)
			}
			m.ChainTxqLif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqLif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQtype", wireType)
			}
			m.ChainTxqQtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQid", wireType)
			}
			m.ChainTxqQid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRing", wireType)
			}
			m.ChainTxqRing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRing |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirSpan", wireType)
			}
			m.RedirSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedirSpan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPktsChain", wireType)
			}
			m.StatPktsChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPktsChain |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPktsDiscard", wireType)
			}
			m.StatPktsDiscard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPktsDiscard |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatCbNotReady", wireType)
			}
			m.StatCbNotReady = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatCbNotReady |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatMyTxqEmpty", wireType)
			}
			m.StatMyTxqEmpty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatMyTxqEmpty |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatAolErr", wireType)
			}
			m.StatAolErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatAolErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatTxqFull", wireType)
			}
			m.StatTxqFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatTxqFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatDescSemFreeFull", wireType)
			}
			m.StatDescSemFreeFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatDescSemFreeFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPageSemFreeFull", wireType)
			}
			m.StatPageSemFreeFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPageSemFreeFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxycCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbHandle", wireType)
			}
			m.ProxyccbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyccbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyccbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyccbStatus == nil {
				m.ProxyccbStatus = &ProxycCbStatus{}
			}
			if err := m.ProxyccbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxycCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxycCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxycCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInternal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxycCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxycCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ProxycCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ProxycCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &ProxycCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxycCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxycCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxycCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxycCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &ProxyrCbKeyHandle_ProxyrcbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxyrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbFlags", wireType)
			}
			m.ProxyrcbFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyrcbFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqBase", wireType)
			}
			m.MyTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqRingSizeShift", wireType)
			}
			m.MyTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqEntrySizeShift", wireType)
			}
			m.MyTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqBase", wireType)
			}
			m.ChainRxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingIndicesAddr", wireType)
			}
			m.ChainRxqRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingIndicesAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingSizeShift", wireType)
			}
			m.ChainRxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqEntrySizeShift", wireType)
			}
			m.ChainRxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingIndexSelect", wireType)
			}
			m.ChainRxqRingIndexSelect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingIndexSelect |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirSpan", wireType)
			}
			m.RedirSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedirSpan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpSa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpSa == nil {
				m.IpSa = &IPAddress{}
			}
			if err := m.IpSa.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpDa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IpDa == nil {
				m.IpDa = &IPAddress{}
			}
			if err := m.IpDa.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sport", wireType)
			}
			m.Sport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dport", wireType)
			}
			m.Dport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrf", wireType)
			}
			m.Vrf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vrf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Af", wireType)
			}
			m.Af = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Af |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProto", wireType)
			}
			m.IpProto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpProto |= (IPProtocol(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			m.Dir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dir |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevCbId", wireType)
			}
			m.RevCbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevCbId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPktsRedir", wireType)
			}
			m.StatPktsRedir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPktsRedir |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatPktsDiscard", wireType)
			}
			m.StatPktsDiscard = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatPktsDiscard |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatCbNotReady", wireType)
			}
			m.StatCbNotReady = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatCbNotReady |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatNullRingIndicesAddr", wireType)
			}
			m.StatNullRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatNullRingIndicesAddr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatAolErr", wireType)
			}
			m.StatAolErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatAolErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatRxqFull", wireType)
			}
			m.StatRxqFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatRxqFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatTxqEmpty", wireType)
			}
			m.StatTxqEmpty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatTxqEmpty |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatSemAllocFull", wireType)
			}
			m.StatSemAllocFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatSemAllocFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatSemFreeFull", wireType)
			}
			m.StatSemFreeFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatSemFreeFull |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyrCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbHandle", wireType)
			}
			m.ProxyrcbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyrcbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyrcbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyrcbStatus == nil {
				m.ProxyrcbStatus = &ProxyrCbStatus{}
			}
			if err := m.ProxyrcbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxyrCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxyrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyrCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInternal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &ProxyrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ProxyrCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ProxyrCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ProxyrCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &ProxyrCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyrCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyrCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyrCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ProxyrCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawrcbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &RawrCbKeyHandle_RawrcbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawrcbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &RawrCbKeyHandle_RawrcbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &RawrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawrcbFlags", wireType)
			}
			m.RawrcbFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RawrcbFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqBase", wireType)
			}
			m.ChainRxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingIndicesAddr", wireType)
			}
			m.ChainRxqRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingIndicesAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingSizeShift", wireType)
			}
			m.ChainRxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqEntrySizeShift", wireType)
			}
			m.ChainRxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainRxqRingIndexSelect", wireType)
			}
			m.ChainRxqRingIndexSelect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainRxqRingIndexSelect |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqBase", wireType)
			}
			m.ChainTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingIndicesAddr", wireType)
			}
			m.ChainTxqRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingIndicesAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingSizeShift", wireType)
			}
			m.ChainTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqEntrySizeShift", wireType)
			}
			m.ChainTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingIndexSelect", wireType)
			}
			m.ChainTxqRingIndexSelect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingIndexSelect |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqLif", wireType)
			}
			m.ChainTxqLif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqLif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQtype", wireType)
			}
			m.ChainTxqQtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQid", wireType)
			}
			m.ChainTxqQid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuId", wireType)
			}
			m.CpuId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AscqBase", wireType)
			}
			m.AscqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AscqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AscqSemInfAddr", wireType)
			}
			m.AscqSemInfAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AscqSemInfAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirPkts", wireType)
			}
			m.RedirPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedirPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbNotReadyDiscards", wireType)
			}
			m.CbNotReadyDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbNotReadyDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QstateCfgDiscards", wireType)
			}
			m.QstateCfgDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QstateCfgDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktLenDiscards", wireType)
			}
			m.PktLenDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PktLenDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxqFullDiscards", wireType)
			}
			m.RxqFullDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxqFullDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxqFullDiscards", wireType)
			}
			m.TxqFullDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxqFullDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktAllocErrors", wireType)
			}
			m.PktAllocErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PktAllocErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktFreeErrors", wireType)
			}
			m.PktFreeErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PktFreeErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RawrCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawrcbHandle", wireType)
			}
			m.RawrcbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.RawrcbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawrcbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawrcbStatus == nil {
				m.RawrcbStatus = &RawrCbStatus{}
			}
			if err := m.RawrcbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &RawrCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &RawrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RawrCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInternal
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &RawrCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RawrCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &RawrCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RawrCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &RawrCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawrCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawrCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawrCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &RawrCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawccbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &RawcCbKeyHandle_RawccbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawccbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &RawcCbKeyHandle_RawccbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &RawcCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawccbFlags", wireType)
			}
			m.RawccbFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RawccbFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqBase", wireType)
			}
			m.MyTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqRingSizeShift", wireType)
			}
			m.MyTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqEntrySizeShift", wireType)
			}
			m.MyTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqBase", wireType)
			}
			m.ChainTxqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingIndicesAddr", wireType)
			}
			m.ChainTxqRingIndicesAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingIndicesAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRingSizeShift", wireType)
			}
			m.ChainTxqRingSizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRingSizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqEntrySizeShift", wireType)
			}
			m.ChainTxqEntrySizeShift = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqEntrySizeShift |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqLif", wireType)
			}
			m.ChainTxqLif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqLif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQtype", wireType)
			}
			m.ChainTxqQtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqQid", wireType)
			}
			m.ChainTxqQid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqQid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTxqRing", wireType)
			}
			m.ChainTxqRing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainTxqRing |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuId", wireType)
			}
			m.CpuId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AscqBase", wireType)
			}
			m.AscqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AscqBase |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AscqSemInfAddr", wireType)
			}
			m.AscqSemInfAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AscqSemInfAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainPkts", wireType)
			}
			m.ChainPkts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainPkts |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CbNotReadyDiscards", wireType)
			}
			m.CbNotReadyDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CbNotReadyDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QstateCfgDiscards", wireType)
			}
			m.QstateCfgDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QstateCfgDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AolErrorDiscards", wireType)
			}
			m.AolErrorDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AolErrorDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTxqEmptyDiscards", wireType)
			}
			m.MyTxqEmptyDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTxqEmptyDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxqFullDiscards", wireType)
			}
			m.TxqFullDiscards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxqFullDiscards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktFreeErrors", wireType)
			}
			m.PktFreeErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PktFreeErrors |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RawcCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawccbHandle", wireType)
			}
			m.RawccbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.RawccbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawccbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawccbStatus == nil {
				m.RawccbStatus = &RawcCbStatus{}
			}
			if err := m.RawccbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &RawcCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &RawcCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RawcCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &RawcCbDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &RawcCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RawcCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &RawcCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RawcCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &RawcCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawcCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawcCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawcCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &RawcCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionDebugSendRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionDebugSendRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionDebugSendRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VmotionDebugSendRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionDebugSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionDebugSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionDebugSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionDebugResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionDebugResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionDebugResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VmotionDebugResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVmotion", wireType)
			}
			m.TotalVmotion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVmotion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigInVmotion", wireType)
			}
			m.MigInVmotion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigInVmotion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigOutVmotion", wireType)
			}
			m.MigOutVmotion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigOutVmotion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigSuccess", wireType)
			}
			m.MigSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigSuccess |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigFailed", wireType)
			}
			m.MigFailed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigFailed |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigAborted", wireType)
			}
			m.MigAborted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigAborted |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigTimeout", wireType)
			}
			m.MigTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigCold", wireType)
			}
			m.MigCold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigCold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionDebugEp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionDebugEp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionDebugEp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldHomingHostIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldHomingHostIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrationType", wireType)
			}
			m.MigrationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigrationType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmotionState", wireType)
			}
			m.VmotionState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmotionState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionActiveEp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionActiveEp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionActiveEp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrationState", wireType)
			}
			m.MigrationState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigrationState |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsegVlan", wireType)
			}
			m.UsegVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsegVlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VmotionDebugResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmotionDebugResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmotionDebugResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmotionEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VmotionEnable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &VmotionStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ep = append(m.Ep, &VmotionDebugEp{})
			if err := m.Ep[len(m.Ep)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveEp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveEp = append(m.ActiveEp, &VmotionActiveEp{})
			if err := m.ActiveEp[len(m.ActiveEp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSendFinRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSendFinRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSendFinRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TestSendFinRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSendFinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSendFinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSendFinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSendFinResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSendFinResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSendFinResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TestSendFinResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSendFinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSendFinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSendFinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestClockSyncRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestClockSyncRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestClockSyncRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TestClockSyncRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestClockSyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestClockSyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestClockSyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestClockSyncResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestClockSyncResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestClockSyncResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TestClockSyncResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestClockSyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestClockSyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestClockSyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestInjectFtePacketRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestInjectFtePacketRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestInjectFtePacketRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TestInjectFtePacketRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestInjectFtePacketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestInjectFtePacketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestInjectFtePacketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceEndpoint == nil {
				m.SourceEndpoint = &EndpointKeyHandle{}
			}
			if err := m.SourceEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DestinationEndpoint == nil {
				m.DestinationEndpoint = &EndpointKeyHandle{}
			}
			if err := m.DestinationEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIp", wireType)
			}
			m.SourceIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceIp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationIp", wireType)
			}
			m.DestinationIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationIp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestInjectFtePacketResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestInjectFtePacketResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestInjectFtePacketResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TestInjectFtePacketResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestInjectFtePacketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestInjectFtePacketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestInjectFtePacketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowHashGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowHashGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowHashGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &FlowHashGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowHashGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowHashGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowHashGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIndexValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrimaryIndexValid = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryIndex", wireType)
			}
			m.PrimaryIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryIndexValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SecondaryIndexValid = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryIndex", wireType)
			}
			m.SecondaryIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondaryIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowHashGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowHashGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowHashGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareVrfId", wireType)
			}
			m.HardwareVrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardwareVrfId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowKey == nil {
				m.FlowKey = &FlowKey{}
			}
			if err := m.FlowKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowDirection", wireType)
			}
			m.FlowDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowDirection |= (FlowDirection(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowInstance", wireType)
			}
			m.FlowInstance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowInstance |= (FlowInstance(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowHashGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowHashGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowHashGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &FlowHashGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalPortStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalPortStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalPortStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortDescr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortDescr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortStatus", wireType)
			}
			m.PortStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortStatus |= (IfStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortSpeed", wireType)
			}
			m.PortSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortSpeed |= (IntPortSpeed(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortMode", wireType)
			}
			m.PortMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortMode |= (IntPortDplxMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortTxPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortTxPaused = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortFlowCtrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortFlowCtrl = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalPortStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalPortStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalPortStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InGoodOctets", wireType)
			}
			m.InGoodOctets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InGoodOctets |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBadOctets", wireType)
			}
			m.InBadOctets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBadOctets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUnicast", wireType)
			}
			m.InUnicast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InUnicast |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBroadcast", wireType)
			}
			m.InBroadcast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBroadcast |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMulticast", wireType)
			}
			m.InMulticast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InMulticast |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InPause", wireType)
			}
			m.InPause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InPause |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUndersize", wireType)
			}
			m.InUndersize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InUndersize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFragments", wireType)
			}
			m.InFragments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InFragments |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOversize", wireType)
			}
			m.InOversize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InOversize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InJabber", wireType)
			}
			m.InJabber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InJabber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InRxErr", wireType)
			}
			m.InRxErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InRxErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InFcsErr", wireType)
			}
			m.InFcsErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InFcsErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutOctets", wireType)
			}
			m.OutOctets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutOctets |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutUnicast", wireType)
			}
			m.OutUnicast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutUnicast |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBroadcast", wireType)
			}
			m.OutBroadcast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutBroadcast |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutMulticast", wireType)
			}
			m.OutMulticast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutMulticast |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutFcsErr", wireType)
			}
			m.OutFcsErr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutFcsErr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPause", wireType)
			}
			m.OutPause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutPause |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutCollisions", wireType)
			}
			m.OutCollisions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutCollisions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutDeferred", wireType)
			}
			m.OutDeferred = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutDeferred |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutSingle", wireType)
			}
			m.OutSingle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutSingle |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutMultiple", wireType)
			}
			m.OutMultiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutMultiple |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutExcessive", wireType)
			}
			m.OutExcessive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutExcessive |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutLate", wireType)
			}
			m.OutLate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutLate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalPortResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalPortResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalPortResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortNumber", wireType)
			}
			m.PortNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &InternalPortStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &InternalPortStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalPortResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalPortResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalPortResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &InternalPortResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalPortRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalPortRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalPortRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortNumber", wireType)
			}
			m.PortNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalPortRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalPortRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalPortRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &InternalPortRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("internal.proto", fileDescriptorInternal) }

var fileDescriptorInternal = []byte{
	// 11617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0xe9, 0x6f, 0x1c, 0x49,
	0x96, 0x1f, 0x8b, 0x67, 0xf1, 0xd5, 0xc1, 0x52, 0x52, 0x47, 0x89, 0x12, 0x25, 0xaa, 0x74, 0xb6,
	0x7a, 0x5a, 0xdd, 0xa2, 0x5a, 0xdd, 0x3d, 0xf7, 0x50, 0x3c, 0x44, 0x8e, 0x28, 0x8a, 0xca, 0xa2,
	0xa4, 0x6e, 0x8f, 0x77, 0x13, 0xc9, 0xcc, 0x28, 0x32, 0x87, 0x59, 0x99, 0xc9, 0xc8, 0x2c, 0xaa,
	0x38, 0xbe, 0x3e, 0xd8, 0x58, 0xd8, 0x6d, 0x7b, 0x17, 0xbb, 0x6b, 0xaf, 0x8f, 0xdd, 0xde, 0xc3,
	0xd7, 0xfa, 0x5c, 0x5f, 0x0b, 0xfb, 0x9b, 0xe1, 0x0f, 0x06, 0x6c, 0xc0, 0x5f, 0x16, 0x30, 0xe0,
	0x2f, 0x36, 0x16, 0xc6, 0x00, 0x36, 0xe0, 0xf9, 0x0b, 0xfc, 0xc9, 0x30, 0xe2, 0x45, 0x64, 0x66,
	0xe4, 0x51, 0x07, 0xc9, 0xee, 0xb6, 0x01, 0xef, 0xa7, 0xaa, 0x7c, 0xef, 0xc5, 0x8b, 0x88, 0x17,
	0x2f, 0x5e, 0xfc, 0x22, 0x32, 0x32, 0x02, 0xaa, 0x96, 0x13, 0x10, 0xea, 0xe8, 0xf6, 0x03, 0x8f,
	0xba, 0x81, 0xab, 0x14, 0xc3, 0xe7, 0xb9, 0x52, 0x70, 0xec, 0x11, 0x9f, 0x93, 0xe7, 0x4a, 0xad,
	0xb7, 0xb6, 0xbb, 0x27, 0x1e, 0x2a, 0x3e, 0xf1, 0x7d, 0xcb, 0x75, 0xc4, 0xe3, 0x0c, 0x26, 0x69,
	0xe9, 0x06, 0x11, 0x84, 0xe2, 0xc1, 0x3e, 0xff, 0xd7, 0xf8, 0xb3, 0x05, 0x38, 0xb7, 0x4d, 0xdd,
	0x3d, 0xaa, 0xb7, 0x97, 0x4c, 0x93, 0x12, 0xdf, 0x57, 0xc9, 0xa1, 0x72, 0x11, 0x26, 0xf7, 0x75,
	0xc7, 0xb4, 0x49, 0xbd, 0xb0, 0x50, 0xb8, 0x37, 0xad, 0x8a, 0x27, 0xe5, 0x0a, 0x4c, 0x7b, 0xd4,
	0xdd, 0xd3, 0x1c, 0xbd, 0x4d, 0xea, 0xa3, 0xc8, 0x2a, 0x32, 0xc2, 0x96, 0xde, 0x26, 0xca, 0x4d,
	0xa8, 0x50, 0xe2, 0xbb, 0xf6, 0x11, 0xd1, 0x6c, 0x7d, 0x97, 0xd8, 0xf5, 0xb1, 0x85, 0xc2, 0xbd,
	0xa2, 0x5a, 0x16, 0xc4, 0x4d, 0x46, 0x53, 0xce, 0xc3, 0x04, 0x67, 0x8e, 0x63, 0x6a, 0xfe, 0xd0,
	0xb8, 0x07, 0x4a, 0xba, 0x10, 0xbe, 0xa7, 0x28, 0x30, 0xae, 0x9b, 0x26, 0xc5, 0x32, 0x8c, 0xa9,
	0xf8, 0xbf, 0xb1, 0x03, 0x57, 0x9e, 0x92, 0x20, 0x53, 0xe2, 0x0e, 0xf1, 0x83, 0xe7, 0xfe, 0x9e,
	0xf2, 0x18, 0xa6, 0x28, 0x7f, 0xaa, 0x17, 0x16, 0xc6, 0xee, 0x95, 0x16, 0xaf, 0x3c, 0x88, 0xcc,
	0x97, 0x49, 0xa4, 0x86, 0xb2, 0x8d, 0x57, 0x70, 0x39, 0x9b, 0xbf, 0xeb, 0xf8, 0x84, 0xe9, 0xfc,
	0x04, 0x8a, 0x54, 0x3c, 0x0a, 0xa5, 0x57, 0x7b, 0x2b, 0xf5, 0x3d, 0x35, 0x92, 0x6e, 0xdc, 0x85,
	0xca, 0xfa, 0xee, 0x10, 0x76, 0x6d, 0x7c, 0x02, 0x55, 0x59, 0x30, 0xbf, 0xee, 0x8c, 0xe6, 0x5b,
	0x3f, 0xe1, 0x86, 0xaf, 0xa8, 0xf8, 0xbf, 0xb1, 0x05, 0x97, 0x97, 0x6c, 0xdb, 0x35, 0x12, 0xf9,
	0x84, 0xd6, 0x78, 0x98, 0xb6, 0xc6, 0xa5, 0xb8, 0xe0, 0x89, 0x04, 0xb1, 0x25, 0x54, 0x98, 0xcb,
	0xe8, 0x8b, 0x4d, 0xf1, 0x61, 0xc6, 0x14, 0xf5, 0x7c, 0x8d, 0x09, 0x33, 0xbc, 0x0f, 0xd3, 0x9b,
	0x56, 0xeb, 0x89, 0xd9, 0x62, 0x26, 0xa8, 0xc1, 0x98, 0x6d, 0xb5, 0xb0, 0x5e, 0x15, 0x95, 0xfd,
	0x65, 0x94, 0x5d, 0xb3, 0x25, 0x6a, 0xc5, 0xfe, 0x36, 0xd6, 0x01, 0xc2, 0x04, 0xbe, 0x37, 0x4c,
	0x0a, 0x66, 0x58, 0x3f, 0xd0, 0x83, 0x8e, 0x8f, 0x4e, 0x37, 0xa1, 0x8a, 0xa7, 0xc6, 0x0f, 0xe1,
	0xf2, 0xb2, 0xeb, 0xb4, 0xac, 0xbd, 0x0e, 0x25, 0x51, 0x19, 0x42, 0xf3, 0xbc, 0x97, 0x36, 0xcf,
	0x6c, 0x5c, 0x99, 0x48, 0x38, 0x36, 0xcd, 0x16, 0xcc, 0x65, 0x74, 0xc5, 0xa6, 0xf9, 0x20, 0x63,
	0x9a, 0xf3, 0x59, 0x6d, 0x09, 0xb3, 0xfc, 0xdb, 0x02, 0x9c, 0x6b, 0xba, 0xad, 0xe0, 0xad, 0x4e,
	0xc9, 0xf6, 0xfe, 0x51, 0x13, 0x4b, 0xac, 0x7c, 0x13, 0x8a, 0x9e, 0xe5, 0x11, 0xdb, 0x72, 0xb8,
	0x93, 0x54, 0x17, 0xe7, 0x63, 0x3d, 0x92, 0xf8, 0xb6, 0x10, 0x52, 0x23, 0x71, 0xa5, 0x0e, 0x53,
	0xc4, 0xd1, 0x77, 0x6d, 0x62, 0xa2, 0x69, 0x8a, 0x6a, 0xf8, 0xc8, 0x3c, 0xc7, 0x74, 0x1d, 0x22,
	0x7a, 0x24, 0xfe, 0x57, 0x6e, 0x40, 0xd9, 0xe8, 0x50, 0x4a, 0x9c, 0x40, 0x33, 0x9c, 0x80, 0x62,
	0x87, 0xac, 0xa8, 0x25, 0x41, 0x5b, 0x76, 0x02, 0xaa, 0x5c, 0x87, 0x92, 0xe5, 0xfc, 0x98, 0x18,
	0x42, 0x62, 0x02, 0x25, 0x80, 0x93, 0x98, 0x40, 0xe3, 0x35, 0xcc, 0x4a, 0x45, 0x0a, 0xcd, 0xa1,
	0x7c, 0x1f, 0x40, 0xf7, 0x2c, 0x4d, 0xb4, 0x08, 0xaf, 0x45, 0xed, 0x01, 0x8f, 0x56, 0x4b, 0x9e,
	0xc5, 0x6b, 0xfa, 0xa4, 0xfa, 0xb3, 0x3f, 0xbc, 0x2e, 0xc9, 0xa9, 0xd3, 0x7a, 0xc8, 0x6a, 0x34,
	0xe1, 0x62, 0x8e, 0x5e, 0x66, 0xe6, 0x6f, 0x66, 0xcc, 0x9c, 0x6f, 0x9e, 0x30, 0x8d, 0x64, 0x6f,
	0x15, 0x2e, 0x48, 0x02, 0x4f, 0x49, 0x20, 0x5c, 0xe1, 0x0c, 0x26, 0x6f, 0xbc, 0x82, 0x7a, 0xae,
	0x4e, 0x5e, 0xd4, 0x94, 0x7b, 0x5d, 0xcf, 0xd5, 0x1a, 0x27, 0x8a, 0x5d, 0xed, 0x17, 0x0b, 0x09,
	0x03, 0xa0, 0xc8, 0x97, 0x64, 0x5b, 0xe5, 0x51, 0xd4, 0x55, 0x98, 0x93, 0x24, 0x22, 0x64, 0xc6,
	0x1b, 0xa3, 0x7e, 0xf4, 0x19, 0x5c, 0xce, 0x2f, 0x0f, 0xab, 0xe8, 0x77, 0x32, 0x6d, 0xb2, 0xd0,
	0xbb, 0xa6, 0x99, 0x66, 0xd9, 0x4a, 0xf4, 0x82, 0x0d, 0x74, 0xae, 0xb3, 0x34, 0xc9, 0x73, 0x38,
	0x9f, 0xd1, 0x37, 0x68, 0x68, 0xc8, 0x24, 0x88, 0x9b, 0xe2, 0xbb, 0x70, 0x6e, 0xd3, 0xdd, 0x5b,
	0xb3, 0xdd, 0xb7, 0x52, 0xd3, 0xde, 0x4b, 0xeb, 0xaa, 0x3e, 0xe0, 0xc3, 0xef, 0xda, 0x9b, 0xd5,
	0x23, 0xe2, 0x48, 0xc9, 0x9f, 0x81, 0x12, 0x25, 0x8f, 0x2d, 0xf6, 0x38, 0x63, 0xb1, 0xcb, 0x52,
	0xb0, 0x48, 0xca, 0x27, 0x3c, 0x78, 0x26, 0xc5, 0x3c, 0x7b, 0x57, 0xfb, 0x08, 0xca, 0xab, 0x6d,
	0x2f, 0x38, 0x0e, 0x3b, 0xc3, 0x9d, 0x74, 0xd5, 0xca, 0x42, 0x1b, 0x97, 0x8a, 0x2a, 0xf6, 0x4d,
	0xa8, 0x88, 0x74, 0xa2, 0x24, 0xf7, 0x32, 0x75, 0x4a, 0xa6, 0x8c, 0xab, 0x61, 0x40, 0x75, 0xc7,
	0xf0, 0x96, 0x77, 0x9f, 0x91, 0xe3, 0xf5, 0x10, 0x57, 0x14, 0x03, 0xc3, 0x33, 0x76, 0x35, 0xcb,
	0xe4, 0x71, 0x7e, 0x7d, 0x44, 0x9d, 0x42, 0xca, 0x86, 0xa9, 0xdc, 0x84, 0x32, 0x67, 0x8a, 0xa1,
	0x93, 0xb9, 0xed, 0xe4, 0xfa, 0x88, 0x5a, 0x42, 0x2a, 0xd7, 0xf0, 0x64, 0x06, 0x2a, 0x07, 0xe4,
	0x58, 0x73, 0xa9, 0x90, 0x6a, 0xfc, 0x5e, 0x0d, 0xa6, 0x31, 0x97, 0xa6, 0x47, 0x0c, 0xe5, 0x3b,
	0x29, 0x36, 0xe6, 0x92, 0x18, 0xbd, 0x92, 0x25, 0x52, 0x4b, 0x07, 0xe4, 0xf8, 0x05, 0x15, 0xc5,
	0xbb, 0x04, 0x53, 0xd4, 0x38, 0xd2, 0x9c, 0x6e, 0x20, 0xc6, 0x9c, 0x49, 0x6a, 0x1c, 0x6d, 0x75,
	0x03, 0xc6, 0xf0, 0x1d, 0x13, 0x19, 0x63, 0x9c, 0xe1, 0x3b, 0xa6, 0xc4, 0xe8, 0x38, 0xba, 0x88,
	0xab, 0x8c, 0xf1, 0xca, 0xd1, 0x19, 0x82, 0x62, 0xaa, 0x02, 0xff, 0x48, 0xb7, 0x45, 0x40, 0x2d,
	0x52, 0xe3, 0x68, 0x87, 0x3d, 0x33, 0x66, 0xe0, 0x6b, 0x94, 0x18, 0xc4, 0x09, 0xea, 0x93, 0x9c,
	0x19, 0xf8, 0x2a, 0x3e, 0x33, 0xa6, 0x4f, 0xe8, 0xa1, 0xb6, 0xab, 0xfb, 0xa4, 0x3e, 0xc5, 0x6c,
	0xa0, 0x16, 0x19, 0xe1, 0x89, 0xee, 0x23, 0x30, 0x33, 0xc9, 0x6e, 0x67, 0x4f, 0x33, 0x5d, 0xbb,
	0x5e, 0xe4, 0x29, 0x91, 0xb0, 0xe2, 0xda, 0x3c, 0xa5, 0x2f, 0x52, 0x4e, 0x87, 0x29, 0x7d, 0x9e,
	0x92, 0x95, 0x94, 0x31, 0x3d, 0xab, 0x0e, 0xa2, 0xa4, 0xc4, 0x3f, 0xdc, 0xb6, 0x22, 0x86, 0x61,
	0xd5, 0x4b, 0x31, 0x63, 0xd9, 0x0a, 0xeb, 0xf6, 0xd6, 0x31, 0xeb, 0xe5, 0xa8, 0x6e, 0x6f, 0x1c,
	0x53, 0xb9, 0x0c, 0x45, 0xc6, 0x30, 0x18, 0xa7, 0x82, 0x1c, 0x26, 0xb8, 0xfc, 0xd6, 0x31, 0x43,
	0x0b, 0xb6, 0x7d, 0xbf, 0x5e, 0x8d, 0x2c, 0xf8, 0xdc, 0xf7, 0xd9, 0x10, 0xe3, 0xbb, 0x1d, 0x6a,
	0x10, 0xcd, 0x73, 0x69, 0x50, 0x9f, 0xe1, 0x43, 0x0c, 0x27, 0x6d, 0xbb, 0x34, 0xe0, 0x35, 0xf3,
	0x03, 0xce, 0xae, 0x85, 0x35, 0xf3, 0x03, 0x64, 0xde, 0x85, 0x99, 0x7d, 0xa2, 0x9b, 0x84, 0x6a,
	0x01, 0x69, 0x7b, 0xb6, 0x1e, 0x90, 0xfa, 0xb9, 0x85, 0xc2, 0xbd, 0xb2, 0x5a, 0xe5, 0xe4, 0x1d,
	0x41, 0x65, 0xb0, 0x93, 0xb9, 0x3e, 0xa9, 0x2b, 0xa8, 0x81, 0x3f, 0x28, 0xf3, 0x20, 0x72, 0xd2,
	0x18, 0xc0, 0x98, 0x45, 0xd6, 0x34, 0xa7, 0x6c, 0x5a, 0x2d, 0xc6, 0xd6, 0x63, 0xc3, 0x9d, 0x47,
	0xc3, 0x4d, 0xeb, 0x91, 0xe5, 0x2e, 0x43, 0x51, 0x0f, 0x4d, 0x77, 0x81, 0x57, 0x57, 0x17, 0xb6,
	0x8b, 0x58, 0x86, 0x55, 0xbf, 0x28, 0xb1, 0x96, 0x2d, 0x65, 0x01, 0xca, 0x51, 0x4b, 0x69, 0x41,
	0xb7, 0x7e, 0x89, 0xd7, 0x38, 0x6c, 0xac, 0x9d, 0x2e, 0xcb, 0x56, 0x54, 0xca, 0x26, 0x4e, 0xbd,
	0xce, 0x4b, 0xc5, 0x29, 0x9b, 0xc4, 0x51, 0xee, 0x41, 0xcd, 0x23, 0x8e, 0x69, 0x39, 0x7b, 0x9a,
	0x6e, 0x1c, 0x68, 0x3e, 0x71, 0xcc, 0xfa, 0x65, 0x1c, 0xd7, 0xab, 0x82, 0xbe, 0x64, 0x1c, 0x34,
	0x89, 0x63, 0x2a, 0x1f, 0x43, 0xc5, 0xfe, 0x58, 0xf3, 0xa8, 0xdb, 0x3d, 0xd6, 0x58, 0x4f, 0xac,
	0xcf, 0x61, 0x78, 0x98, 0x8d, 0xc2, 0x83, 0xa7, 0x12, 0xd3, 0xa2, 0x3b, 0xc7, 0x1e, 0x51, 0x4b,
	0xf6, 0xc7, 0xdb, 0x4c, 0x90, 0x3d, 0xb0, 0x32, 0x62, 0xe9, 0x29, 0x09, 0xba, 0xac, 0x0a, 0x57,
	0x44, 0xab, 0x10, 0xff, 0x50, 0x25, 0x41, 0x97, 0xd7, 0x02, 0x99, 0xa1, 0x93, 0x5f, 0x5d, 0x28,
	0xdc, 0x1b, 0x57, 0x81, 0xd1, 0x9a, 0xdc, 0xd1, 0x67, 0x61, 0x82, 0x76, 0xb5, 0xc0, 0xaf, 0xcf,
	0x23, 0x6b, 0x9c, 0x76, 0x77, 0x7c, 0x06, 0xdc, 0x68, 0xe0, 0xd6, 0xaf, 0x21, 0x89, 0xfd, 0xc5,
	0xac, 0x84, 0xcf, 0x30, 0x90, 0x51, 0xbf, 0x2e, 0xb2, 0xe2, 0x7e, 0xb3, 0xec, 0x04, 0xca, 0x07,
	0x70, 0x5e, 0x32, 0xd8, 0xae, 0xed, 0x93, 0x00, 0x91, 0xf1, 0x02, 0x4a, 0x2a, 0x91, 0xe1, 0x22,
	0x0e, 0xf7, 0x5c, 0x8a, 0xed, 0x72, 0x23, 0xf4, 0x5c, 0xca, 0x9a, 0x65, 0x1e, 0xc0, 0xa3, 0xc4,
	0xd4, 0x5a, 0xb6, 0xbe, 0xe7, 0xd7, 0x1b, 0xdc, 0xb2, 0x8c, 0xb2, 0xc6, 0x08, 0xcc, 0xd5, 0xdc,
	0x60, 0x9f, 0x50, 0xed, 0xd0, 0x32, 0xeb, 0x37, 0xb9, 0xab, 0x21, 0xe1, 0xa5, 0x65, 0x32, 0x47,
	0xf5, 0x74, 0xe3, 0x80, 0x04, 0xbe, 0xe6, 0x76, 0x82, 0xfa, 0x2d, 0x5e, 0x4e, 0x41, 0x7a, 0xd1,
	0x09, 0x18, 0x9e, 0x62, 0x35, 0xf1, 0xfd, 0x60, 0x9f, 0x12, 0x7f, 0xbf, 0x7e, 0x9b, 0xe3, 0x29,
	0xdf, 0x31, 0x9b, 0x82, 0xc4, 0x0a, 0x66, 0x18, 0x9a, 0x6e, 0xef, 0xb9, 0xf5, 0x3b, 0xbc, 0x60,
	0x86, 0xb1, 0x64, 0xef, 0xb9, 0x4c, 0x39, 0x0d, 0x5c, 0x6d, 0x57, 0x37, 0x0e, 0xdc, 0x56, 0xab,
	0x7e, 0x97, 0x2b, 0xa7, 0x81, 0xfb, 0x84, 0x53, 0x94, 0x0b, 0x30, 0x69, 0x78, 0x1d, 0x16, 0x1e,
	0xef, 0x71, 0x07, 0x36, 0xbc, 0xce, 0x86, 0x19, 0xd5, 0xd4, 0xb0, 0xea, 0xef, 0xc4, 0x35, 0xe5,
	0x7d, 0x94, 0xf5, 0x37, 0xd6, 0x13, 0xef, 0x47, 0xfd, 0x8d, 0xf5, 0x51, 0xe6, 0xf2, 0xac, 0xf3,
	0xfa, 0x86, 0x6e, 0x93, 0xfa, 0xbb, 0xc2, 0xe5, 0x1d, 0xf3, 0x0d, 0x12, 0x18, 0x1b, 0xd3, 0x71,
	0xf6, 0x37, 0x38, 0x9b, 0x25, 0xe5, 0xec, 0xab, 0x80, 0x4e, 0xa0, 0x71, 0xb7, 0x78, 0x8f, 0x9b,
	0x88, 0x51, 0x76, 0x98, 0x53, 0x60, 0x57, 0xb5, 0xf5, 0x63, 0xe6, 0x97, 0xf5, 0x07, 0xe8, 0x92,
	0x45, 0x24, 0x2c, 0x19, 0x07, 0xac, 0xe9, 0xf5, 0xc0, 0xad, 0xbf, 0xcf, 0x31, 0xbb, 0x1e, 0x60,
	0xa5, 0x59, 0x51, 0x28, 0x31, 0xdc, 0x23, 0x42, 0xeb, 0x1f, 0x44, 0x2d, 0xaf, 0x72, 0x0a, 0xce,
	0x77, 0x58, 0xc4, 0x78, 0x28, 0xe6, 0x3b, 0x6d, 0xdf, 0x57, 0x6e, 0xb3, 0xf9, 0xb0, 0x15, 0x58,
	0xba, 0xad, 0xbd, 0xb5, 0x1c, 0xd3, 0x7d, 0x5b, 0x5f, 0x44, 0x6e, 0x45, 0x50, 0xdf, 0x20, 0x51,
	0x99, 0x83, 0x69, 0x7d, 0xd7, 0xd0, 0x6c, 0xed, 0x48, 0xa7, 0xf5, 0x47, 0xa2, 0x07, 0xee, 0x1a,
	0x9b, 0xaf, 0x75, 0x8a, 0xcd, 0xec, 0xba, 0xda, 0x61, 0x87, 0x74, 0x48, 0xfd, 0x43, 0x5e, 0x4c,
	0xd7, 0x75, 0x5f, 0xb2, 0x67, 0xe5, 0x0e, 0xcc, 0x30, 0x26, 0xed, 0x2e, 0x06, 0x5d, 0xed, 0x10,
	0x3b, 0xfe, 0x63, 0xf4, 0xd6, 0x8a, 0xeb, 0xba, 0x2a, 0xa3, 0xbe, 0xdc, 0x15, 0x61, 0x13, 0x0d,
	0xd5, 0xf1, 0xea, 0x1f, 0xc5, 0x06, 0xee, 0x78, 0xd8, 0xc6, 0xbb, 0x3c, 0x62, 0x7c, 0x8c, 0x11,
	0x63, 0xd2, 0xd8, 0xc5, 0x70, 0x71, 0x0f, 0x6a, 0x3f, 0x21, 0xd4, 0x15, 0xc5, 0x66, 0xfd, 0x36,
	0xa8, 0x7f, 0x82, 0x49, 0xab, 0x8c, 0xce, 0x0b, 0xde, 0x64, 0x91, 0xfe, 0x16, 0x54, 0x85, 0x0a,
	0xed, 0x90, 0x75, 0xd5, 0x87, 0xf5, 0x6f, 0xa2, 0xa6, 0x32, 0xd7, 0xf4, 0x12, 0x69, 0xd8, 0xf6,
	0x34, 0x08, 0xb4, 0x8e, 0x5f, 0xff, 0x96, 0x68, 0x7b, 0x1a, 0x04, 0xaf, 0xd0, 0x8d, 0x7d, 0x16,
	0x19, 0x3c, 0x42, 0xdb, 0xf5, 0x6f, 0xf3, 0xfa, 0x31, 0xc2, 0x36, 0xa1, 0x6d, 0xe5, 0x1a, 0x40,
	0x60, 0xb5, 0x89, 0x1f, 0xe8, 0x6d, 0xcf, 0xaf, 0x7f, 0x07, 0xb9, 0x12, 0x45, 0x79, 0x0f, 0x66,
	0x83, 0x6e, 0x58, 0xc6, 0x8e, 0x67, 0xea, 0x01, 0x61, 0xfd, 0xe8, 0xbb, 0x98, 0x43, 0x2d, 0xe8,
	0xf2, 0x62, 0xbe, 0x42, 0xc6, 0xb6, 0xc5, 0x2a, 0xc5, 0xca, 0xe0, 0x93, 0x43, 0x2d, 0xf0, 0xdd,
	0x56, 0xcb, 0x27, 0x41, 0xfd, 0x7b, 0xbc, 0x52, 0x34, 0x08, 0x9a, 0xe4, 0x70, 0x47, 0x50, 0x59,
	0x48, 0x64, 0x92, 0x2c, 0xab, 0xfa, 0xf7, 0x79, 0x83, 0xd0, 0x20, 0xd8, 0xb1, 0xda, 0xe8, 0x74,
	0x81, 0xaf, 0xd9, 0x44, 0xa7, 0x0e, 0x31, 0xeb, 0x3f, 0xe0, 0x4e, 0x17, 0xf8, 0x9b, 0x9c, 0x20,
	0x46, 0x45, 0xa1, 0x7c, 0x29, 0x1c, 0x15, 0x5f, 0x70, 0xb5, 0x97, 0x60, 0x2a, 0xf0, 0xb9, 0xd6,
	0x27, 0xdc, 0x0a, 0x81, 0x8f, 0x4a, 0xdf, 0x67, 0x7d, 0x3d, 0x8a, 0x7c, 0x2b, 0x09, 0x60, 0x14,
	0x45, 0x3a, 0xd6, 0xfb, 0xc5, 0xdf, 0xc6, 0x0f, 0x60, 0x06, 0x31, 0xc0, 0x90, 0x13, 0xc4, 0x08,
	0x5b, 0xc4, 0x90, 0xe8, 0x17, 0x0a, 0x02, 0xd8, 0xbc, 0x70, 0x0f, 0x05, 0xd8, 0x9e, 0x07, 0x40,
	0x3f, 0xd3, 0xa2, 0xc9, 0xfc, 0xb8, 0x3a, 0x8d, 0x14, 0x36, 0x55, 0xc6, 0xa6, 0x0a, 0x74, 0x8a,
	0x06, 0x14, 0xd0, 0xa2, 0x88, 0x84, 0x26, 0x39, 0x64, 0x55, 0x23, 0x2c, 0xa0, 0x90, 0xc3, 0x10,
	0x5c, 0x10, 0xc7, 0x64, 0x8c, 0xeb, 0x50, 0x72, 0x3a, 0x6d, 0x8d, 0x38, 0x01, 0xb5, 0x88, 0x2f,
	0x00, 0x06, 0x38, 0x9d, 0xf6, 0x2a, 0xa7, 0x34, 0xfe, 0x72, 0x01, 0x4a, 0xbc, 0x7c, 0xbc, 0x14,
	0x37, 0x52, 0x08, 0xaa, 0x80, 0xee, 0x24, 0xe3, 0x27, 0xa5, 0x01, 0x15, 0xd7, 0x3d, 0xd4, 0x1c,
	0x37, 0xd0, 0x08, 0x83, 0x6b, 0x62, 0x06, 0x59, 0x72, 0xdd, 0xc3, 0x2d, 0x37, 0x40, 0x04, 0xa7,
	0x7c, 0x0c, 0xc0, 0x64, 0xa2, 0x89, 0xf6, 0x58, 0x0e, 0x82, 0x8a, 0xaa, 0xae, 0x4e, 0xbb, 0xe1,
	0xdf, 0xc6, 0x4f, 0xa0, 0x22, 0x4c, 0x2b, 0xb0, 0xe2, 0xfb, 0xc3, 0xa0, 0x56, 0x79, 0xd2, 0xf2,
	0x49, 0x58, 0x83, 0xc4, 0xd4, 0xe5, 0x42, 0xba, 0x39, 0x78, 0x3a, 0x5e, 0x31, 0x91, 0xf7, 0x53,
	0xa8, 0x25, 0xf2, 0x66, 0xed, 0xfa, 0x28, 0x03, 0x55, 0x2f, 0xa5, 0x34, 0xe5, 0x82, 0x6f, 0x05,
	0x59, 0x2b, 0xc4, 0x26, 0x01, 0x09, 0xe1, 0xf2, 0x99, 0x80, 0x65, 0xe3, 0x05, 0x5c, 0xc8, 0xea,
	0x64, 0x25, 0xfc, 0x28, 0xed, 0x79, 0x57, 0x53, 0x0a, 0x13, 0x29, 0x62, 0x17, 0xdc, 0x80, 0x8b,
	0x09, 0x76, 0x5c, 0xe7, 0xb4, 0xc9, 0xc7, 0x06, 0x98, 0xbc, 0xf1, 0x42, 0xf4, 0x07, 0x69, 0xa2,
	0x7c, 0xb6, 0xca, 0x6e, 0x08, 0x03, 0x26, 0x67, 0xc9, 0x8f, 0xd2, 0x35, 0xbd, 0x9c, 0xd2, 0x96,
	0x37, 0x3f, 0xfe, 0x5f, 0x25, 0x80, 0xa8, 0xc5, 0xb1, 0x97, 0xed, 0x1e, 0x07, 0xc4, 0xd7, 0xa8,
	0x71, 0x64, 0x86, 0xbd, 0x0c, 0x29, 0xaa, 0x71, 0x84, 0x01, 0xc4, 0x3b, 0x08, 0x04, 0x77, 0x14,
	0xb9, 0x45, 0x46, 0x40, 0xe6, 0x75, 0x28, 0xf1, 0xb4, 0x6c, 0x24, 0x37, 0xb1, 0xa7, 0x8d, 0xab,
	0x5c, 0xdd, 0x12, 0xa3, 0xb0, 0x68, 0xec, 0x75, 0x28, 0x61, 0x7c, 0xa1, 0x62, 0x1c, 0x65, 0xca,
	0x8c, 0xba, 0x64, 0x1c, 0x70, 0x35, 0x0d, 0xa8, 0x98, 0x1d, 0x4f, 0x12, 0x9a, 0x40, 0xa1, 0x92,
	0xd9, 0xf1, 0x64, 0x19, 0xdf, 0x76, 0xdf, 0x6a, 0x9e, 0x1e, 0xec, 0x23, 0xd8, 0x99, 0xe4, 0x32,
	0x8c, 0xb8, 0xad, 0x07, 0xfb, 0x0c, 0xed, 0x30, 0x19, 0x36, 0xa2, 0xb7, 0x3a, 0xb6, 0x8d, 0x32,
	0x53, 0x42, 0x86, 0xd0, 0xc3, 0xb5, 0x8e, 0x6d, 0x33, 0x99, 0x4b, 0x30, 0xc5, 0xc6, 0x28, 0xc6,
	0x2d, 0x22, 0x77, 0xd2, 0x75, 0x5d, 0xc6, 0xb8, 0x06, 0x25, 0xda, 0xd5, 0x4c, 0xea, 0x7a, 0xc8,
	0x9c, 0xe6, 0x86, 0xa0, 0xdd, 0x15, 0xea, 0x7a, 0x9c, 0x2f, 0xec, 0x84, 0x83, 0xcf, 0x2f, 0x6f,
	0x49, 0x86, 0xc2, 0x81, 0xe7, 0xaa, 0x30, 0x14, 0xb2, 0x7f, 0x65, 0x2b, 0xb6, 0x14, 0x72, 0x6f,
	0xcb, 0x86, 0x40, 0x91, 0x5f, 0xdd, 0x4a, 0x5a, 0x02, 0xc5, 0xea, 0xf1, 0x84, 0xe2, 0xaf, 0x6e,
	0x25, 0x66, 0x14, 0xf5, 0x78, 0x46, 0xf1, 0x6b, 0x5b, 0x89, 0x29, 0x05, 0x83, 0x02, 0x2c, 0xd6,
	0xe1, 0xb0, 0x65, 0xd5, 0xff, 0xda, 0x96, 0xc0, 0x25, 0xc4, 0x31, 0x97, 0x8c, 0x83, 0xed, 0xa4,
	0x80, 0x61, 0xd5, 0xff, 0x7a, 0x52, 0x60, 0xd9, 0x52, 0x6e, 0x42, 0xa5, 0xa5, 0xfb, 0x7c, 0x7c,
	0xa1, 0x4c, 0xc7, 0xdf, 0xe0, 0x22, 0x25, 0x46, 0x65, 0x03, 0x02, 0xdd, 0x4e, 0x0b, 0x19, 0x56,
	0xfd, 0x6f, 0xa6, 0x85, 0x96, 0x11, 0x24, 0x9a, 0xc4, 0x0e, 0x8b, 0xf2, 0xeb, 0x5b, 0xe1, 0x94,
	0xc3, 0xe6, 0x25, 0x91, 0xd8, 0x86, 0x55, 0xff, 0x8d, 0x04, 0x7b, 0xd9, 0x52, 0xe6, 0xa4, 0x49,
	0xc1, 0x17, 0x5b, 0xc9, 0x59, 0xc1, 0x9c, 0x34, 0x2b, 0xf8, 0xcd, 0xad, 0xe4, 0xb4, 0xe0, 0x26,
	0x54, 0x42, 0x54, 0x1f, 0x74, 0x59, 0xe2, 0xdf, 0x12, 0x45, 0x13, 0xd4, 0x9d, 0xee, 0x76, 0x5a,
	0xc8, 0xb0, 0xea, 0xbf, 0x9d, 0x16, 0x5a, 0xb6, 0xd8, 0x9c, 0x08, 0x2b, 0x49, 0x49, 0x40, 0x75,
	0xc7, 0x67, 0xba, 0x7e, 0x87, 0x8b, 0x61, 0xe5, 0x55, 0x4e, 0xde, 0xce, 0x0a, 0x1a, 0x56, 0xfd,
	0x6f, 0x65, 0x05, 0x79, 0xd9, 0x0c, 0x9b, 0xe8, 0x0e, 0x9f, 0x0f, 0x78, 0x56, 0xfd, 0x6f, 0x8b,
	0x6c, 0x91, 0xca, 0x66, 0x04, 0xdb, 0x69, 0x21, 0xc3, 0xaa, 0xff, 0x9d, 0xb4, 0x10, 0x4e, 0x1b,
	0x12, 0x20, 0xfa, 0xef, 0x6e, 0x65, 0x50, 0xf4, 0x7c, 0x02, 0x61, 0xfe, 0xbd, 0xad, 0x14, 0xc4,
	0xbc, 0x91, 0x9a, 0x99, 0xfc, 0xee, 0x56, 0x66, 0x6a, 0x72, 0x13, 0x2a, 0x7a, 0x42, 0xe6, 0xef,
	0x8b, 0x82, 0xe8, 0x92, 0x10, 0x83, 0x1c, 0x5d, 0x8d, 0x32, 0x4b, 0x7a, 0x56, 0xfd, 0x1f, 0x88,
	0x6c, 0x82, 0xae, 0x6a, 0x39, 0x7b, 0xdb, 0x96, 0xf2, 0x00, 0x66, 0x3d, 0x9d, 0x22, 0xca, 0xf4,
	0x0e, 0x02, 0xde, 0xd8, 0x4e, 0x50, 0xff, 0x87, 0x5c, 0xae, 0x26, 0x78, 0xdb, 0x07, 0x01, 0x6b,
	0x74, 0xec, 0xb5, 0x65, 0x3d, 0x70, 0x35, 0x93, 0xe8, 0x26, 0x2e, 0x59, 0xfd, 0xa3, 0x30, 0xcb,
	0xc0, 0x5d, 0x11, 0x34, 0x26, 0x43, 0x65, 0x99, 0x7f, 0x2c, 0x64, 0xa8, 0x24, 0x33, 0x07, 0x45,
	0xc3, 0x10, 0xd3, 0x93, 0x7f, 0x22, 0x3c, 0xc4, 0x30, 0xf8, 0xec, 0xe4, 0x16, 0x54, 0x2c, 0xd3,
	0x26, 0xb1, 0x82, 0xdf, 0xe3, 0x02, 0x65, 0x46, 0x8d, 0x34, 0xdc, 0x85, 0x19, 0x01, 0xde, 0xa2,
	0x08, 0xf2, 0x4f, 0x45, 0xa3, 0x72, 0x7a, 0x18, 0x44, 0x6e, 0x40, 0x99, 0x0d, 0xe6, 0x1c, 0xe8,
	0x7a, 0x56, 0xfd, 0x9f, 0x09, 0x4b, 0xba, 0xee, 0x21, 0xc2, 0xdc, 0x6d, 0x2b, 0x29, 0x62, 0x58,
	0xf5, 0x7f, 0x9e, 0x12, 0xe1, 0xee, 0xce, 0xcd, 0xec, 0x04, 0xf5, 0x7f, 0x21, 0x0a, 0xcc, 0x08,
	0x2c, 0x87, 0x77, 0xa0, 0x96, 0xc1, 0x91, 0xff, 0x92, 0xcb, 0x54, 0xdf, 0x26, 0x61, 0x64, 0x46,
	0xd4, 0xb0, 0xea, 0xbf, 0x9f, 0x23, 0xba, 0x6c, 0x35, 0xfe, 0x7d, 0x41, 0x0c, 0xe8, 0xf2, 0xa2,
	0xe8, 0x89, 0xf1, 0xc4, 0x5d, 0x18, 0xf7, 0x3d, 0x62, 0x08, 0x1c, 0x91, 0x0b, 0xeb, 0x50, 0x40,
	0x79, 0x2f, 0xf1, 0x62, 0xa1, 0x27, 0xe4, 0x10, 0x42, 0xca, 0x7d, 0xbe, 0xce, 0xc0, 0x41, 0x59,
	0xe2, 0x15, 0x40, 0x3c, 0x5c, 0xf1, 0xd5, 0x07, 0xbf, 0xf1, 0x1c, 0x66, 0xd3, 0x15, 0xe1, 0x43,
	0x7f, 0x1a, 0x9c, 0xcc, 0xe5, 0x8d, 0x88, 0x19, 0x7c, 0x62, 0x40, 0x75, 0xc7, 0xf6, 0xd3, 0xab,
	0x6a, 0xb6, 0x9f, 0x5e, 0x55, 0x63, 0x14, 0xb1, 0xaa, 0x86, 0xcc, 0xcc, 0xaa, 0x1a, 0xa3, 0xf6,
	0x5a, 0x55, 0xfb, 0x73, 0xd3, 0x30, 0x8d, 0xb9, 0x0c, 0xbb, 0xaa, 0x96, 0x28, 0x51, 0x72, 0x55,
	0x6d, 0x01, 0xca, 0x8e, 0x65, 0x68, 0x26, 0x31, 0xb4, 0x7d, 0xa2, 0x9b, 0x02, 0xff, 0x82, 0x63,
	0x19, 0x2b, 0xc4, 0x58, 0x27, 0xba, 0x29, 0x4b, 0x04, 0xba, 0x65, 0x0b, 0x18, 0x2c, 0x24, 0x76,
	0x74, 0xcb, 0x66, 0x43, 0x8a, 0xe1, 0xb6, 0xdb, 0xba, 0x63, 0x0a, 0x18, 0x1c, 0x3e, 0x26, 0x57,
	0xc4, 0x26, 0x52, 0x2b, 0x62, 0xd2, 0x0a, 0xc1, 0x64, 0x62, 0x85, 0x40, 0x9a, 0x50, 0x4f, 0x25,
	0x26, 0xd4, 0x17, 0x60, 0x72, 0x97, 0x47, 0x75, 0xbe, 0xba, 0x36, 0xb1, 0x8b, 0x21, 0x5d, 0x90,
	0x0d, 0x0b, 0x07, 0x5b, 0x4e, 0x5e, 0xb6, 0x70, 0x06, 0x47, 0x8f, 0xbd, 0xc0, 0xd5, 0x98, 0x7d,
	0x2c, 0xb3, 0x2b, 0xd6, 0xd6, 0xca, 0x9c, 0xfa, 0x8c, 0x1c, 0x6f, 0x98, 0xdd, 0xe4, 0x8a, 0x5e,
	0x29, 0x8c, 0x74, 0xf1, 0x8a, 0x5e, 0xbc, 0xf6, 0x54, 0x8e, 0xc3, 0x20, 0x32, 0x19, 0xa0, 0x77,
	0xda, 0xa6, 0x47, 0x35, 0xdd, 0xb6, 0x5d, 0x03, 0x57, 0xdb, 0x18, 0xa0, 0x47, 0x1a, 0xbe, 0xbf,
	0xc3, 0x25, 0x05, 0x2e, 0xd2, 0xa2, 0x84, 0xe0, 0xaa, 0xdb, 0xa4, 0x0a, 0x9c, 0xb4, 0x46, 0x09,
	0xea, 0x20, 0x8e, 0xa1, 0x09, 0x48, 0xe5, 0xe3, 0xd2, 0xdb, 0xa4, 0x5a, 0x22, 0x8e, 0x21, 0xe0,
	0x16, 0xeb, 0x25, 0x33, 0x4c, 0xc4, 0x70, 0xdb, 0x9e, 0x4d, 0x02, 0xcb, 0x75, 0x7c, 0x5c, 0x81,
	0x9b, 0x54, 0xab, 0xc4, 0x31, 0x96, 0x63, 0x6a, 0xa8, 0xab, 0xa5, 0x5b, 0x76, 0x87, 0x12, 0x1f,
	0x17, 0xe1, 0xb8, 0xae, 0x35, 0x41, 0x62, 0x22, 0xac, 0x1d, 0xa3, 0xec, 0x14, 0x2e, 0x62, 0x92,
	0x44, 0x76, 0x4c, 0x44, 0xce, 0x6e, 0x96, 0x67, 0x67, 0x92, 0x74, 0x76, 0x4c, 0x30, 0xca, 0xee,
	0x7c, 0xa4, 0x2b, 0xca, 0x4e, 0x81, 0x71, 0x5f, 0xb7, 0x03, 0xb1, 0x30, 0x87, 0xff, 0x99, 0x49,
	0x48, 0xd7, 0xb3, 0x2d, 0xc3, 0x0a, 0x34, 0xeb, 0x08, 0x17, 0xe6, 0xc6, 0x55, 0x08, 0x49, 0x1b,
	0x47, 0xca, 0x27, 0x70, 0xd9, 0xa3, 0x2c, 0xc2, 0x32, 0xbf, 0xf1, 0x03, 0x7d, 0x8f, 0x7c, 0xa0,
	0x7d, 0xac, 0x05, 0xfb, 0x94, 0xb9, 0x27, 0x5f, 0xa8, 0xbb, 0xe0, 0x51, 0xb2, 0xc2, 0xf8, 0x4d,
	0x64, 0x7f, 0xbc, 0x83, 0x4c, 0xe5, 0x5b, 0x30, 0xe7, 0xb9, 0x7e, 0xd0, 0x23, 0x29, 0x5f, 0xc3,
	0xbb, 0xc8, 0x24, 0x72, 0xd2, 0xde, 0x81, 0x19, 0xcb, 0x67, 0x4e, 0xce, 0x7c, 0x43, 0x6b, 0xd9,
	0xee, 0x5b, 0xb1, 0x9e, 0x57, 0xb1, 0xfc, 0x15, 0x4e, 0x5d, 0xb3, 0xdd, 0xb7, 0xf1, 0xf2, 0x54,
	0xcb, 0x32, 0x71, 0x29, 0x2f, 0x5c, 0x9e, 0x5a, 0xb3, 0x72, 0xd6, 0xfa, 0xae, 0x0c, 0xb9, 0xd6,
	0xf7, 0x1e, 0xcc, 0x0a, 0x57, 0xdd, 0x6f, 0xeb, 0x46, 0xe4, 0xaf, 0x57, 0xf9, 0x48, 0xc7, 0x59,
	0xeb, 0x6d, 0xdd, 0x10, 0x3e, 0x7b, 0x03, 0xca, 0x4c, 0x2c, 0x6a, 0xc6, 0x79, 0x6e, 0xfa, 0xb6,
	0x9e, 0x68, 0x46, 0x26, 0x22, 0x37, 0xe3, 0x35, 0xde, 0x8c, 0x6d, 0x3d, 0xdd, 0x8c, 0x4c, 0x30,
	0x6a, 0xc6, 0xeb, 0x91, 0xae, 0xa8, 0x19, 0xe3, 0x75, 0xaf, 0x05, 0x69, 0xdd, 0x0b, 0xe7, 0xea,
	0x2c, 0xb2, 0x0c, 0x3b, 0x57, 0x0f, 0x23, 0x56, 0x3c, 0x83, 0xf8, 0x00, 0x4a, 0x9c, 0x1a, 0xcf,
	0x90, 0xe5, 0x68, 0x18, 0xce, 0x90, 0xe3, 0x58, 0x88, 0x93, 0x58, 0x9e, 0xe7, 0x59, 0x26, 0xb1,
	0x98, 0x49, 0xcf, 0x49, 0x6c, 0x5c, 0x22, 0x91, 0xb7, 0x34, 0x89, 0x95, 0xf3, 0x1e, 0x3c, 0x89,
	0x95, 0xa5, 0x53, 0x93, 0x58, 0xc6, 0x3a, 0xf1, 0x24, 0xb6, 0x77, 0x1c, 0xc7, 0x49, 0x6c, 0x46,
	0xe7, 0xc0, 0x49, 0x6c, 0x26, 0x45, 0x72, 0x12, 0x2b, 0xb3, 0xcf, 0x38, 0x89, 0x65, 0xaa, 0x4e,
	0x36, 0x89, 0xed, 0x53, 0xd9, 0x0d, 0x61, 0xc0, 0x13, 0x4c, 0x62, 0x93, 0xe2, 0x71, 0x35, 0xcb,
	0x00, 0x51, 0x83, 0xfb, 0x1c, 0xd7, 0x44, 0xa2, 0x5f, 0x3e, 0xae, 0x89, 0xba, 0xc0, 0x60, 0x5c,
	0x23, 0x79, 0xe1, 0x10, 0xb8, 0x26, 0xaa, 0x82, 0x8c, 0x6b, 0x52, 0x15, 0x19, 0x8c, 0x6b, 0x52,
	0x09, 0x92, 0xb8, 0xe6, 0x0d, 0x83, 0xe5, 0x09, 0x5c, 0xf3, 0x16, 0xa1, 0xbb, 0x8c, 0x6b, 0x90,
	0xc2, 0x71, 0x0d, 0x67, 0xa6, 0x71, 0x0d, 0x52, 0x7b, 0xe1, 0x9a, 0x5f, 0x2a, 0xc0, 0x34, 0xe6,
	0x32, 0x24, 0xae, 0x49, 0x96, 0x28, 0x89, 0x6b, 0x6e, 0xc1, 0x38, 0x46, 0xe0, 0xd1, 0x44, 0x73,
	0x61, 0x0a, 0x0c, 0xbf, 0xc8, 0x55, 0xaa, 0x30, 0xea, 0x59, 0x02, 0xd1, 0x8c, 0x7a, 0x16, 0x7b,
	0x36, 0x2c, 0x01, 0x62, 0x46, 0x0d, 0x8b, 0x85, 0x38, 0x4c, 0x32, 0x64, 0x88, 0x8b, 0x0a, 0x9f,
	0x08, 0x71, 0x9c, 0x1a, 0x85, 0xb8, 0x84, 0x61, 0x44, 0x88, 0x93, 0xcc, 0xc2, 0x42, 0x9c, 0xc8,
	0xf3, 0x0c, 0x21, 0x8e, 0x67, 0xd2, 0x2b, 0xc4, 0x49, 0x25, 0x12, 0x79, 0xc7, 0x21, 0x2e, 0x91,
	0xf7, 0xc0, 0x10, 0x97, 0x90, 0x4e, 0x86, 0x38, 0x64, 0x9d, 0x34, 0xc4, 0xf5, 0x69, 0x52, 0x16,
	0xe2, 0xb2, 0x3a, 0x07, 0x85, 0xb8, 0x6c, 0x8a, 0x44, 0x88, 0x4b, 0xb0, 0xcf, 0x10, 0xe2, 0x7e,
	0xa5, 0x20, 0x74, 0x3d, 0x25, 0x81, 0x58, 0x00, 0xfe, 0x52, 0x2a, 0x3d, 0xa4, 0x1f, 0x9f, 0x87,
	0x09, 0xcb, 0x31, 0x49, 0x57, 0xb8, 0x32, 0x7f, 0x68, 0xbc, 0x81, 0xcb, 0xf9, 0x65, 0x62, 0x55,
	0xfc, 0x56, 0xda, 0x68, 0x0b, 0xa9, 0x02, 0x65, 0x52, 0x25, 0x82, 0x66, 0xe4, 0x42, 0x7e, 0xe3,
	0x97, 0xc7, 0xe0, 0x3c, 0x3e, 0x3e, 0xd1, 0xa9, 0xe1, 0x3e, 0x5d, 0x7e, 0xbe, 0x42, 0x7c, 0x83,
	0x65, 0x31, 0x0f, 0x60, 0xd9, 0x96, 0x1f, 0xc4, 0xeb, 0xee, 0x93, 0xea, 0x34, 0x52, 0x70, 0xdd,
	0x7d, 0x1e, 0xc0, 0x8d, 0xd9, 0xa3, 0x9c, 0xed, 0x46, 0x6c, 0x69, 0x56, 0x31, 0x96, 0x9c, 0x55,
	0xdc, 0x82, 0x2a, 0xb3, 0xa8, 0x49, 0x7c, 0x43, 0xe3, 0xd5, 0xe6, 0x3d, 0xb6, 0x7c, 0x40, 0x8e,
	0x59, 0xde, 0x1b, 0x8c, 0xc6, 0x66, 0x11, 0xd6, 0x11, 0xd7, 0x3d, 0xc1, 0xdf, 0x01, 0x59, 0x47,
	0xa8, 0xf8, 0x3a, 0x94, 0x78, 0xc3, 0x72, 0xe6, 0x24, 0x07, 0xe5, 0x9c, 0x84, 0x02, 0x37, 0xa1,
	0x62, 0xba, 0x2e, 0xdd, 0x25, 0xb6, 0xcd, 0x45, 0xf8, 0x8b, 0xfe, 0x72, 0x48, 0xcc, 0x08, 0x99,
	0x7a, 0xa0, 0xe3, 0x94, 0x44, 0x12, 0x5a, 0xd1, 0x03, 0x3d, 0x02, 0xc0, 0xd3, 0xbd, 0x01, 0x30,
	0xf0, 0xec, 0x25, 0x00, 0x7c, 0x1d, 0x4a, 0xe2, 0xd5, 0x33, 0x6e, 0x34, 0xe4, 0x73, 0x12, 0xf1,
	0x36, 0xba, 0x69, 0xfd, 0x04, 0x27, 0x0d, 0xbb, 0xcc, 0xd4, 0xa1, 0x7f, 0xf2, 0x89, 0x49, 0x09,
	0x69, 0xc2, 0x1f, 0xff, 0xe7, 0x28, 0x5c, 0xca, 0xb4, 0xe2, 0x97, 0x3e, 0x9e, 0xc5, 0xf1, 0x8e,
	0x8f, 0x67, 0xb9, 0x6e, 0x28, 0x8d, 0x72, 0xe3, 0xfd, 0x02, 0x51, 0x66, 0x94, 0x9b, 0x48, 0x8f,
	0x72, 0xb1, 0xcf, 0x89, 0x51, 0x4e, 0xb9, 0x08, 0x13, 0x47, 0xba, 0xdd, 0x21, 0xbc, 0x11, 0xd7,
	0x47, 0x54, 0xfe, 0xa8, 0xac, 0x41, 0x95, 0x5b, 0x68, 0xcf, 0x68, 0xa3, 0x9f, 0x60, 0x13, 0x96,
	0x16, 0xaf, 0xa5, 0x94, 0xa5, 0x3c, 0x76, 0x7d, 0x44, 0xe5, 0x96, 0x7d, 0x6a, 0xb4, 0x19, 0x49,
	0x51, 0x60, 0x8c, 0xea, 0x6f, 0xb1, 0x69, 0xcb, 0xeb, 0x23, 0x2a, 0x7b, 0x60, 0xc3, 0x16, 0x2f,
	0x88, 0xed, 0x06, 0x1b, 0x4e, 0xcb, 0x6d, 0xfc, 0x08, 0xe6, 0x7a, 0x98, 0x9a, 0x75, 0x82, 0xef,
	0x66, 0xc2, 0xe7, 0x8d, 0x3e, 0x1d, 0x2d, 0x13, 0x48, 0x3d, 0xd1, 0xb7, 0x9e, 0x92, 0xe0, 0x39,
	0x09, 0xf4, 0xaf, 0xbe, 0x11, 0x1b, 0xaf, 0x62, 0xcf, 0x91, 0x73, 0xe4, 0x31, 0x23, 0x5d, 0x97,
	0x6b, 0xd9, 0xba, 0xc8, 0x89, 0x72, 0x2a, 0xd2, 0xfc, 0xda, 0x2b, 0xd2, 0x3c, 0x4d, 0x45, 0x9a,
	0x3d, 0x2b, 0xb2, 0x01, 0x97, 0x9e, 0x92, 0xe0, 0x85, 0xa7, 0x1f, 0x76, 0xc8, 0x8e, 0xbe, 0xc7,
	0x82, 0x41, 0x18, 0xea, 0x1f, 0xc0, 0x34, 0x8e, 0xbb, 0x18, 0xb1, 0x79, 0x55, 0xce, 0x89, 0xaa,
	0xa0, 0xa7, 0x31, 0xc5, 0xbe, 0x5a, 0xa4, 0x22, 0x78, 0x37, 0x3e, 0x83, 0xb9, 0x1e, 0xaa, 0x58,
	0x21, 0xbf, 0x9d, 0x8e, 0xd0, 0x92, 0xe3, 0xf4, 0x48, 0x16, 0x87, 0x68, 0x1f, 0xea, 0x59, 0x19,
	0x61, 0xf2, 0x3b, 0x30, 0xe3, 0x22, 0x43, 0x0b, 0xf4, 0x3d, 0xf9, 0xa5, 0x68, 0xc5, 0x95, 0xe5,
	0x53, 0x4d, 0x33, 0x3a, 0xb0, 0x69, 0x1a, 0x3f, 0x87, 0xfb, 0xc2, 0x73, 0x33, 0x65, 0x15, 0xfa,
	0x5e, 0xc6, 0xea, 0x8d, 0x7e, 0x35, 0xca, 0x58, 0xbe, 0x0d, 0x57, 0x79, 0x87, 0x45, 0x1c, 0xcf,
	0x3a, 0x28, 0x65, 0x1d, 0xe7, 0xf8, 0x94, 0xe6, 0xc7, 0x65, 0x6e, 0xdb, 0x0d, 0xc4, 0x18, 0x32,
	0x2a, 0xde, 0x66, 0x60, 0xb7, 0x66, 0xc3, 0xa7, 0x01, 0xd7, 0xfb, 0x65, 0xc7, 0x6a, 0xf4, 0x83,
	0x74, 0x13, 0xdd, 0x89, 0x2b, 0xd4, 0x2f, 0x6d, 0xdc, 0x4e, 0xff, 0x6e, 0x0c, 0xce, 0xa3, 0x64,
	0xf3, 0xb8, 0xdd, 0x0e, 0x45, 0xff, 0x68, 0xf0, 0xfc, 0xbf, 0x39, 0x78, 0x2a, 0x0f, 0xe1, 0x82,
	0x4f, 0x0c, 0xd7, 0x31, 0xb5, 0x94, 0xa5, 0xf8, 0x7e, 0x3a, 0x85, 0x33, 0x9f, 0x49, 0xf6, 0x6a,
	0xfc, 0xc6, 0xa8, 0x68, 0xc6, 0xa5, 0xe6, 0xf1, 0x97, 0xd8, 0x8c, 0xd9, 0xc6, 0x1a, 0xcb, 0x69,
	0xac, 0x54, 0x9b, 0x8c, 0x67, 0xda, 0xe4, 0x1e, 0xd4, 0xa4, 0x0e, 0xcf, 0x47, 0x4c, 0xbe, 0x1a,
	0x5b, 0x8d, 0x7a, 0xfc, 0x6b, 0x1c, 0x38, 0xef, 0x26, 0x24, 0xdf, 0x52, 0x8d, 0x38, 0x62, 0x71,
	0x36, 0x8e, 0x0d, 0x6f, 0xe8, 0xaa, 0xa3, 0x5c, 0x80, 0xc9, 0x96, 0xcd, 0xa2, 0x87, 0x58, 0xa2,
	0x9d, 0x60, 0x4f, 0x4b, 0x11, 0x79, 0x37, 0x5c, 0xa1, 0x65, 0x4f, 0x4f, 0x1a, 0xff, 0x66, 0x14,
	0xe6, 0x7b, 0xf4, 0x87, 0xd3, 0x0e, 0x03, 0x89, 0xce, 0x3e, 0x7a, 0xd2, 0xce, 0x3e, 0x96, 0xea,
	0xec, 0x0c, 0x31, 0xf8, 0xc7, 0xed, 0xb6, 0x46, 0xc9, 0x21, 0x9a, 0x9b, 0x0a, 0xb0, 0x72, 0x2d,
	0xd5, 0xa1, 0x53, 0xdd, 0x94, 0x21, 0x06, 0x5f, 0x22, 0x31, 0x3d, 0xba, 0x7f, 0x2c, 0xeb, 0x99,
	0xc8, 0xd5, 0x93, 0xf2, 0x13, 0xa6, 0x87, 0xa5, 0x0b, 0x49, 0x4f, 0x2a, 0x50, 0x92, 0xd8, 0x8d,
	0x3d, 0x58, 0xe8, 0x6b, 0x3f, 0xe6, 0x6a, 0xcb, 0x99, 0xf0, 0x7a, 0x77, 0x60, 0x34, 0xca, 0x1b,
	0xdd, 0x22, 0x51, 0xcb, 0xd9, 0xe3, 0x63, 0xe0, 0xa9, 0x47, 0xb7, 0x1e, 0xaa, 0x06, 0x8d, 0x6e,
	0x3d, 0x92, 0xc5, 0x51, 0xf3, 0xd7, 0x0b, 0x50, 0xcf, 0x0a, 0x7d, 0x5d, 0xae, 0x34, 0x68, 0xd5,
	0xe0, 0xe7, 0xe0, 0x4a, 0xaf, 0xc2, 0x0d, 0x1c, 0x06, 0x7b, 0x25, 0x94, 0x9a, 0xe8, 0x85, 0xd4,
	0x97, 0x84, 0x14, 0xff, 0x24, 0xe6, 0xb4, 0x0d, 0x45, 0x24, 0xe7, 0xca, 0x53, 0xc8, 0x0a, 0xbd,
	0x94, 0x6e, 0xae, 0xbb, 0xbd, 0xcb, 0x9c, 0x48, 0x2c, 0x35, 0xda, 0x18, 0x5c, 0xeb, 0x25, 0xfa,
	0x75, 0x35, 0xdd, 0x15, 0x21, 0x8f, 0x2f, 0x74, 0xf8, 0x36, 0x13, 0x64, 0xe2, 0x0b, 0x9d, 0xfb,
	0x70, 0xce, 0xa3, 0xae, 0xd9, 0x31, 0x08, 0xd5, 0x2c, 0xb3, 0x1b, 0x47, 0xd3, 0x71, 0x75, 0x26,
	0x64, 0x6c, 0x98, 0xdd, 0x30, 0xa4, 0xfa, 0xfb, 0xba, 0xe9, 0xbe, 0xd5, 0x3c, 0x27, 0x14, 0xe5,
	0xbb, 0x4d, 0xaa, 0x9c, 0xbe, 0xed, 0x08, 0xc9, 0x1c, 0xb4, 0x35, 0x99, 0x87, 0xb6, 0xc2, 0xa2,
	0xe1, 0xb8, 0x35, 0x25, 0x36, 0xa5, 0x33, 0x24, 0xca, 0x46, 0x2d, 0xbe, 0x01, 0xdb, 0xe0, 0xcc,
	0x68, 0x6b, 0xb9, 0x6f, 0x84, 0x4c, 0x2c, 0x04, 0x32, 0xf9, 0x68, 0x59, 0x64, 0x04, 0x64, 0x26,
	0xb3, 0x47, 0x11, 0x48, 0x05, 0x74, 0x26, 0xd7, 0xb0, 0xe0, 0x46, 0xff, 0xc6, 0x61, 0x5e, 0xb0,
	0x92, 0x71, 0xdd, 0x7b, 0x83, 0xdd, 0x20, 0xe3, 0xc0, 0x75, 0xb8, 0xb8, 0x1c, 0xbe, 0x82, 0x5b,
	0xa6, 0x44, 0x8f, 0x96, 0x66, 0x1a, 0x6f, 0xe0, 0x72, 0x3e, 0x67, 0xd0, 0x8a, 0x45, 0x7e, 0xaa,
	0xd8, 0xf7, 0x5a, 0x70, 0x29, 0x23, 0x72, 0x5a, 0x9f, 0x9b, 0x83, 0xe2, 0x01, 0x39, 0x96, 0x41,
	0x63, 0xf4, 0xcc, 0xe6, 0x82, 0x3d, 0xf2, 0x19, 0x38, 0x17, 0xec, 0x91, 0x4e, 0xb2, 0xdb, 0x2e,
	0x5c, 0x4d, 0x09, 0xbd, 0xb1, 0x82, 0xfd, 0x0d, 0x33, 0xec, 0xf7, 0x72, 0xc1, 0x0a, 0xc9, 0x82,
	0x31, 0x37, 0xd0, 0x6d, 0xdb, 0x7d, 0xab, 0xe1, 0x06, 0x29, 0x7c, 0x5f, 0xc9, 0xcb, 0x5e, 0x41,
	0xf2, 0x4a, 0xc7, 0xc3, 0x37, 0x96, 0x0c, 0xf4, 0xf6, 0xcb, 0x63, 0x10, 0xe8, 0xed, 0x97, 0x36,
	0x6e, 0x0d, 0x1b, 0xe6, 0x7b, 0x08, 0x7e, 0x15, 0x6d, 0xb2, 0x07, 0x0b, 0x7d, 0x73, 0x1b, 0x38,
	0x76, 0xf6, 0x4d, 0x2d, 0xb5, 0xcf, 0x5f, 0x28, 0x40, 0x25, 0x92, 0xc5, 0x35, 0xec, 0x7e, 0x2d,
	0xf2, 0x3e, 0xf2, 0xe4, 0xc8, 0x75, 0x5e, 0xd4, 0x30, 0xd2, 0x81, 0x2b, 0x7c, 0x53, 0x07, 0xfc,
	0x8f, 0x72, 0x99, 0x27, 0xc0, 0x2e, 0x2c, 0x40, 0xfd, 0x01, 0x39, 0xc6, 0x4e, 0x5e, 0x83, 0xb1,
	0x03, 0x72, 0x8c, 0xb1, 0xaa, 0xac, 0xb2, 0xbf, 0x8d, 0x45, 0x38, 0x1f, 0xa9, 0x51, 0x89, 0x3e,
	0x8c, 0x8f, 0x34, 0x9a, 0x52, 0x27, 0x91, 0xd2, 0xf0, 0xcf, 0x6f, 0x53, 0x6d, 0x7e, 0x2d, 0xc7,
	0x3c, 0x52, 0x1a, 0x79, 0x22, 0x7a, 0x21, 0x25, 0x70, 0xda, 0x36, 0x7e, 0x87, 0x57, 0x92, 0xcf,
	0xfb, 0x2f, 0xe5, 0xe4, 0x8f, 0x73, 0x7f, 0xac, 0xfd, 0x1b, 0xa8, 0xe7, 0x66, 0xca, 0x81, 0x47,
	0xba, 0xa9, 0xaf, 0xf7, 0xac, 0x4b, 0xa6, 0x89, 0x97, 0xa5, 0xd0, 0xc5, 0x77, 0xc3, 0x84, 0x86,
	0x15, 0xa5, 0x2b, 0x0c, 0x55, 0xba, 0xcb, 0xf9, 0x4a, 0x86, 0x8e, 0x72, 0x89, 0x54, 0xf9, 0x51,
	0x2e, 0x14, 0xf9, 0xaa, 0xa3, 0x5c, 0x32, 0x9f, 0xe1, 0xa3, 0x5c, 0x32, 0x9d, 0x64, 0xe2, 0x0f,
	0x25, 0x13, 0x27, 0x5f, 0x1f, 0xf4, 0xf3, 0x5d, 0xd9, 0xa6, 0x99, 0x17, 0x04, 0x43, 0xd9, 0xb4,
	0xc7, 0x4b, 0x02, 0xd9, 0xa6, 0xc9, 0x17, 0x05, 0x5f, 0x9d, 0x4d, 0xb3, 0x2f, 0x24, 0x86, 0xb3,
	0x69, 0x32, 0x9d, 0x64, 0xd3, 0xab, 0xa1, 0xf2, 0x25, 0xff, 0xb8, 0x9d, 0x19, 0x75, 0xb5, 0x30,
	0x1c, 0xe7, 0x71, 0x39, 0x62, 0x4d, 0xd9, 0xef, 0x56, 0x3a, 0xf3, 0xbc, 0x94, 0xb1, 0x0d, 0x7f,
	0x0c, 0x57, 0x72, 0xc5, 0xbe, 0x0a, 0x3b, 0x1a, 0x70, 0xad, 0x4f, 0x5e, 0x1c, 0xca, 0xa6, 0x6d,
	0x79, 0x7b, 0x40, 0x75, 0x32, 0xf6, 0xfc, 0x24, 0x65, 0xcf, 0xe1, 0xfd, 0x34, 0x6d, 0xeb, 0x8c,
	0xaf, 0x0e, 0x6d, 0xeb, 0x1e, 0xfe, 0x9a, 0xb6, 0xf5, 0x57, 0xe9, 0xb3, 0x69, 0x5b, 0x67, 0xfd,
	0x76, 0x78, 0x5b, 0xf7, 0xf4, 0xdd, 0x25, 0x38, 0x97, 0x10, 0x1c, 0x38, 0xb0, 0xd6, 0xe2, 0x71,
	0x42, 0x0c, 0x86, 0x3f, 0x0c, 0x83, 0x83, 0x50, 0xf1, 0x86, 0x5a, 0x71, 0x6b, 0xbd, 0x27, 0x07,
	0xee, 0x2b, 0x3d, 0x4a, 0x17, 0x07, 0xef, 0x9f, 0x0b, 0x41, 0x58, 0x8e, 0x2e, 0xde, 0x53, 0x53,
	0xed, 0x77, 0xb3, 0x87, 0x4a, 0x39, 0x61, 0xdc, 0x7c, 0x56, 0xca, 0xb3, 0x84, 0xd4, 0x57, 0xd1,
	0x7a, 0x7a, 0xca, 0x15, 0x13, 0x59, 0x71, 0xa0, 0x97, 0x6e, 0xbc, 0x5b, 0xfd, 0xeb, 0x92, 0x69,
	0xbb, 0x3b, 0x50, 0x5c, 0x5d, 0x5e, 0xde, 0x76, 0x2d, 0x27, 0x50, 0xca, 0x50, 0xe0, 0x6d, 0x55,
	0x56, 0x0b, 0x5d, 0xf6, 0x14, 0x36, 0x51, 0xe1, 0xb8, 0xf1, 0x57, 0x0a, 0xb2, 0x27, 0x2d, 0x79,
	0xd6, 0xea, 0xf2, 0xf2, 0x8a, 0xdb, 0xd6, 0x2d, 0x67, 0x5b, 0xa7, 0x7a, 0xdb, 0x5f, 0xf3, 0x94,
	0x3a, 0x4c, 0x3d, 0xe3, 0x68, 0x47, 0x34, 0x78, 0xf8, 0xc8, 0x54, 0x79, 0xa1, 0x2a, 0x8f, 0x3d,
	0xe9, 0x08, 0x8f, 0xca, 0x6a, 0x41, 0x67, 0x4f, 0xbb, 0x02, 0x16, 0x15, 0x76, 0x95, 0x05, 0x28,
	0x3c, 0x15, 0xeb, 0x31, 0x4a, 0x5c, 0x93, 0xb0, 0x84, 0x6a, 0xe1, 0x29, 0x93, 0xe7, 0x0b, 0x5e,
	0x65, 0xb5, 0xe0, 0x34, 0x7e, 0xbf, 0x20, 0x9b, 0x68, 0xc9, 0xb3, 0x54, 0x72, 0x18, 0x4a, 0x3f,
	0xef, 0xd8, 0x6b, 0x9e, 0xb2, 0x03, 0xe7, 0x88, 0x61, 0x68, 0x26, 0x96, 0x55, 0xf3, 0xb0, 0xb0,
	0xc2, 0x95, 0xee, 0xe5, 0xd9, 0x2a, 0xaf, 0x6a, 0xea, 0x0c, 0x31, 0x0c, 0x99, 0xa4, 0xbc, 0x0f,
	0xd3, 0x4c, 0xab, 0xc7, 0xf2, 0x11, 0x78, 0x27, 0xaf, 0xbc, 0x45, 0x62, 0x18, 0x91, 0x6d, 0x0f,
	0xc2, 0x4a, 0x1f, 0x34, 0x9e, 0xa4, 0x8c, 0xc9, 0x1a, 0x26, 0x59, 0xec, 0x05, 0x28, 0xbc, 0x14,
	0xc5, 0xcc, 0x35, 0xc4, 0xcb, 0xc6, 0x7f, 0x29, 0xc0, 0xcd, 0x6c, 0xd5, 0x57, 0x9a, 0x4b, 0x4d,
	0x6b, 0xcf, 0xd1, 0x83, 0x0e, 0x25, 0x4f, 0x89, 0xf3, 0x95, 0x19, 0xa0, 0x0a, 0xa3, 0xa6, 0x2e,
	0xda, 0x74, 0xd4, 0xd4, 0x93, 0xf5, 0x63, 0x4f, 0xfb, 0x61, 0xa3, 0xe2, 0xf7, 0x9c, 0xe1, 0x7e,
	0xb9, 0x09, 0x7e, 0xec, 0xc8, 0x01, 0xdf, 0x25, 0x87, 0xdf, 0xff, 0x1e, 0x3b, 0x46, 0xb8, 0x86,
	0x59, 0x54, 0xa7, 0xf0, 0x79, 0xd5, 0x69, 0x3c, 0x81, 0x5b, 0x39, 0x16, 0xca, 0xd6, 0xae, 0x0c,
	0x05, 0x1a, 0xfa, 0x2c, 0x65, 0x4f, 0x7e, 0xe8, 0x68, 0x7e, 0xe3, 0xbf, 0x17, 0xe0, 0x4e, 0x7f,
	0x0b, 0xbd, 0x26, 0xd4, 0x6a, 0x1d, 0x7f, 0x65, 0x46, 0xc2, 0x46, 0x1c, 0xed, 0xd3, 0x88, 0xbc,
	0xf8, 0x63, 0x89, 0xe2, 0x0b, 0xb3, 0xf9, 0xdc, 0x88, 0x13, 0xa1, 0x11, 0xfb, 0xd8, 0xea, 0x57,
	0x0b, 0x72, 0x48, 0xe2, 0xf5, 0x54, 0x9b, 0x4b, 0xab, 0x0e, 0x6e, 0x4b, 0xec, 0xd3, 0x2f, 0x67,
	0x61, 0xa2, 0xed, 0x9a, 0x9a, 0x23, 0x4c, 0x36, 0xde, 0x76, 0xcd, 0x2d, 0x96, 0x2d, 0x09, 0x8b,
	0x84, 0x8b, 0xb2, 0x9e, 0xcd, 0x6c, 0x12, 0x90, 0x6e, 0x20, 0xca, 0x36, 0x8d, 0x94, 0x1d, 0xd2,
	0x0d, 0x12, 0xa5, 0x9a, 0x48, 0x96, 0xea, 0x7b, 0xf2, 0x30, 0x27, 0x5a, 0x50, 0x2a, 0xd5, 0x75,
	0x28, 0x19, 0x96, 0xb7, 0x8f, 0xdf, 0xa4, 0x77, 0x03, 0xd1, 0x84, 0xc0, 0x49, 0x4c, 0x75, 0xe3,
	0x27, 0xb9, 0x95, 0x12, 0x3b, 0x3d, 0x4f, 0x51, 0x29, 0x33, 0xac, 0x94, 0x99, 0xce, 0x7b, 0x3c,
	0x93, 0xf7, 0x77, 0xf2, 0xcb, 0x1e, 0x66, 0x9e, 0x34, 0x4a, 0x21, 0x65, 0x94, 0xc6, 0x1f, 0xe6,
	0x04, 0x25, 0xb5, 0xb9, 0xb4, 0xac, 0xee, 0x0c, 0x2e, 0x7d, 0x26, 0x54, 0x1e, 0x86, 0xc5, 0x3e,
	0xc4, 0x3e, 0xe7, 0x89, 0xd2, 0x8e, 0x9a, 0x1e, 0x3e, 0x1f, 0x0a, 0x0f, 0x19, 0x35, 0x0f, 0x15,
	0x05, 0xc6, 0x0f, 0x2d, 0xe7, 0x48, 0x44, 0x47, 0xfc, 0x9f, 0xae, 0xea, 0x54, 0xba, 0xaa, 0x72,
	0xe7, 0x2c, 0xf6, 0xec, 0x9c, 0xd3, 0xc9, 0xa6, 0xfd, 0x7e, 0x4e, 0xf8, 0x4a, 0x56, 0x70, 0x80,
	0x85, 0x1e, 0x85, 0x6b, 0x18, 0xb1, 0x81, 0x9a, 0x24, 0xe8, 0x78, 0xdb, 0xd4, 0x3a, 0xd2, 0x03,
	0xf2, 0x8c, 0x1c, 0x87, 0x18, 0x81, 0x1f, 0x00, 0x85, 0xe3, 0xfa, 0x52, 0xc6, 0xaa, 0x22, 0x24,
	0x3c, 0x23, 0xc7, 0x1b, 0x4e, 0x8b, 0x7f, 0x24, 0x6f, 0xed, 0x39, 0xd1, 0xe6, 0xdc, 0x02, 0xd6,
	0x07, 0x18, 0x8d, 0x6f, 0xcb, 0x6d, 0xec, 0xe5, 0xb7, 0xeb, 0xd0, 0x0a, 0x94, 0x3b, 0xb8, 0xf7,
	0x1a, 0x77, 0x20, 0x87, 0x42, 0xa3, 0x28, 0x54, 0x11, 0x64, 0x91, 0xd1, 0xff, 0x2e, 0x84, 0x4b,
	0x1a, 0x52, 0x4e, 0xe9, 0x2a, 0x3e, 0x92, 0xd6, 0x17, 0x38, 0x52, 0xa8, 0x27, 0xd6, 0x17, 0xc4,
	0xd0, 0x9d, 0x5c, 0x63, 0x78, 0x01, 0x55, 0x62, 0x98, 0xbe, 0xce, 0xf3, 0x77, 0x5a, 0xae, 0x08,
	0x30, 0x77, 0x7b, 0x84, 0xa9, 0xb4, 0x95, 0xd6, 0x47, 0xd4, 0x32, 0x2a, 0x08, 0x2b, 0xbd, 0x01,
	0x65, 0x2a, 0xab, 0xe3, 0x1b, 0x1d, 0x6f, 0xf7, 0x51, 0xa7, 0xca, 0xca, 0x80, 0x46, 0xaa, 0x9e,
	0x4c, 0xa3, 0x5b, 0xe3, 0x96, 0x8b, 0xdf, 0x29, 0xc8, 0x88, 0x4e, 0x6a, 0xe2, 0x65, 0x42, 0x03,
	0xe5, 0x31, 0x94, 0xc4, 0x17, 0x2c, 0x52, 0xe5, 0xa5, 0x7d, 0x24, 0x7c, 0xea, 0x89, 0x15, 0x87,
	0x4e, 0xf4, 0x1f, 0x3f, 0x1a, 0x27, 0x34, 0xd0, 0x2c, 0x53, 0x58, 0x7d, 0x92, 0x3d, 0x6e, 0xe0,
	0xc1, 0x4d, 0xbb, 0xae, 0x79, 0x8c, 0x65, 0x9f, 0x56, 0xf1, 0x3f, 0x7e, 0x15, 0x41, 0xba, 0x81,
	0x16, 0xa6, 0xe0, 0x43, 0x0f, 0x30, 0xda, 0x32, 0xa6, 0x4a, 0xce, 0xb9, 0xe4, 0x36, 0x62, 0xfc,
	0xc6, 0x1b, 0xa8, 0xc5, 0x5c, 0x15, 0x2b, 0x99, 0x58, 0xe0, 0x29, 0x24, 0x17, 0x78, 0x10, 0x97,
	0x88, 0x8e, 0xeb, 0xa4, 0x82, 0x28, 0x46, 0x1f, 0x11, 0xd7, 0xcd, 0xc6, 0xaf, 0x15, 0xe0, 0xc6,
	0x00, 0xef, 0x5f, 0xed, 0x9e, 0xce, 0x39, 0x1e, 0xc3, 0x94, 0x68, 0x4b, 0xe1, 0x15, 0x73, 0x79,
	0xcd, 0xc8, 0x2b, 0xb3, 0x3e, 0xa2, 0x4e, 0xf2, 0xb6, 0x7b, 0x32, 0x01, 0x63, 0xcf, 0xc8, 0x71,
	0x83, 0x42, 0x63, 0x90, 0xcf, 0x9e, 0xb6, 0x60, 0x52, 0x94, 0x19, 0x95, 0xa3, 0x4c, 0xe3, 0xb7,
	0x0b, 0xd9, 0x50, 0xa0, 0x26, 0x47, 0xf9, 0xb3, 0xc5, 0xfa, 0xb3, 0x43, 0x91, 0x0f, 0x72, 0xba,
	0x72, 0xba, 0x88, 0x38, 0x72, 0x17, 0x42, 0xe0, 0xf1, 0xa7, 0x32, 0x86, 0x4c, 0xd4, 0x89, 0xa3,
	0x8e, 0xb3, 0x8d, 0xcb, 0xc9, 0x6a, 0x61, 0xf6, 0x13, 0x61, 0xf6, 0x7f, 0x50, 0x08, 0x67, 0x40,
	0xcd, 0xe3, 0xb6, 0xc8, 0x7f, 0x5d, 0xf7, 0xf7, 0x9f, 0x12, 0x87, 0x50, 0x3d, 0x20, 0xca, 0xc7,
	0x50, 0xdc, 0xd7, 0xfd, 0x7d, 0xa9, 0x09, 0xb3, 0xb3, 0x2a, 0xcf, 0x62, 0x49, 0xb0, 0x15, 0x23,
	0xe1, 0xec, 0xc4, 0x2d, 0x34, 0xa8, 0x4d, 0x9c, 0xf0, 0x48, 0xb9, 0x03, 0x72, 0xbc, 0x49, 0x1c,
	0x3c, 0x4b, 0x4d, 0x0f, 0x74, 0x51, 0x46, 0xfc, 0xcf, 0x8c, 0xcc, 0x7e, 0x51, 0x9a, 0x9b, 0x7f,
	0x8a, 0x3d, 0x33, 0xf1, 0x79, 0x00, 0xd3, 0xda, 0x23, 0x7e, 0x80, 0xcc, 0x49, 0x64, 0x4e, 0x73,
	0xca, 0x26, 0x71, 0x1a, 0x1f, 0x87, 0xb1, 0x3f, 0xaa, 0x91, 0xef, 0x25, 0xaa, 0x74, 0x11, 0x26,
	0xb9, 0xb4, 0x68, 0x05, 0xf1, 0xd4, 0xf8, 0x1f, 0x11, 0x36, 0x4a, 0xda, 0x42, 0xb4, 0xc1, 0xff,
	0x83, 0x96, 0x88, 0x6b, 0x32, 0x29, 0xd7, 0x24, 0x65, 0xa1, 0xa9, 0xb4, 0x85, 0xf2, 0xa6, 0x03,
	0x6b, 0x1b, 0xdb, 0xcd, 0xb4, 0xa7, 0x4a, 0x3d, 0xa0, 0x90, 0xe8, 0x01, 0x43, 0x38, 0x5d, 0x0d,
	0xc6, 0xda, 0xfe, 0x5e, 0xb8, 0x88, 0xdd, 0xf6, 0xf7, 0x94, 0x6f, 0xc0, 0x34, 0x33, 0x09, 0x8f,
	0x06, 0x13, 0x68, 0xc0, 0x19, 0x11, 0x0d, 0x92, 0x46, 0xc3, 0x28, 0xf0, 0x09, 0xb0, 0xb1, 0x54,
	0xf3, 0x8d, 0x7d, 0xd2, 0xe6, 0x3b, 0x02, 0xab, 0x8b, 0x97, 0x85, 0xb8, 0x5c, 0xce, 0x26, 0x0a,
	0xa8, 0xd3, 0xbe, 0xb5, 0xc7, 0xff, 0x36, 0x3e, 0xcc, 0x99, 0x0e, 0xe4, 0xd5, 0x2e, 0xd9, 0x0f,
	0xff, 0x53, 0xce, 0x04, 0x20, 0x9d, 0x4a, 0x38, 0x42, 0x54, 0xfb, 0x42, 0xba, 0xf6, 0xa3, 0xa9,
	0xda, 0x8f, 0xc5, 0xb5, 0x4f, 0xe2, 0xf5, 0xaf, 0xcb, 0x16, 0xff, 0x1a, 0xa2, 0x91, 0x09, 0x6b,
	0x84, 0x6b, 0x24, 0x8b, 0x50, 0xd4, 0x3d, 0x4b, 0x8e, 0xca, 0x97, 0x72, 0x1c, 0x99, 0x07, 0x65,
	0x9d, 0xff, 0x51, 0x54, 0xa8, 0x45, 0x93, 0x58, 0xad, 0xdd, 0xb1, 0xb5, 0x96, 0x37, 0x10, 0x4c,
	0x24, 0x67, 0xd7, 0xeb, 0x23, 0x6a, 0x25, 0x9c, 0xe2, 0xf2, 0x79, 0xeb, 0xa7, 0x4c, 0x27, 0x83,
	0x27, 0xac, 0x72, 0x7b, 0xc4, 0x61, 0x3a, 0x39, 0xa2, 0x78, 0xaf, 0x9f, 0xce, 0xcc, 0xc4, 0x8e,
	0x6b, 0x36, 0x7d, 0xbd, 0x69, 0xed, 0xf1, 0x99, 0x9e, 0x0e, 0xb3, 0xb1, 0xe6, 0x23, 0x6c, 0x35,
	0xa6, 0x9c, 0x6f, 0x02, 0xf9, 0x60, 0x58, 0xe5, 0xe1, 0x8c, 0x6f, 0x7d, 0x44, 0xad, 0x85, 0xfa,
	0xa3, 0x59, 0xe0, 0x53, 0x28, 0xb1, 0xe1, 0x93, 0xf0, 0x29, 0x8a, 0x58, 0x87, 0xb8, 0xd5, 0x5b,
	0x75, 0x3c, 0x9d, 0x11, 0x40, 0x28, 0x9c, 0xdc, 0x08, 0x45, 0x02, 0x13, 0x62, 0xeb, 0x0e, 0x52,
	0x24, 0x90, 0xb3, 0x50, 0x14, 0xe2, 0xe8, 0x97, 0x30, 0xc3, 0x14, 0x19, 0x34, 0x88, 0x94, 0x4d,
	0x0d, 0x6a, 0xa1, 0x04, 0x12, 0x67, 0x76, 0xa4, 0xbe, 0xbe, 0x4c, 0x83, 0x50, 0xe5, 0x73, 0xa8,
	0xa0, 0x9b, 0xee, 0x89, 0xd0, 0x89, 0xb0, 0x3f, 0xe7, 0x15, 0x61, 0xfe, 0xd8, 0xc1, 0xe0, 0xe3,
	0xbe, 0x1c, 0x78, 0x9f, 0x42, 0x09, 0xd5, 0xf1, 0x16, 0xc1, 0x99, 0x42, 0x4e, 0x55, 0xf3, 0x82,
	0x2f, 0xab, 0xea, 0x7e, 0x1c, 0x8a, 0x9f, 0x71, 0x9b, 0x09, 0xbf, 0xc1, 0x57, 0xe0, 0xa5, 0xc5,
	0x77, 0xfa, 0x56, 0x53, 0x76, 0x99, 0xf5, 0x11, 0x75, 0x9a, 0x86, 0xee, 0xa2, 0xec, 0x40, 0x95,
	0x26, 0x5c, 0x05, 0xf7, 0x99, 0x95, 0x16, 0xbf, 0x31, 0x9c, 0xbe, 0xa8, 0x80, 0x65, 0x2a, 0x79,
	0x88, 0xf2, 0x12, 0xaa, 0x3e, 0xc3, 0x43, 0x9a, 0x47, 0xad, 0x23, 0x44, 0x59, 0xe5, 0x41, 0xa5,
	0x4c, 0xe1, 0x27, 0xdc, 0x8d, 0x14, 0x92, 0x18, 0xa2, 0x5c, 0x01, 0xe0, 0x2a, 0x19, 0x4c, 0xc5,
	0xed, 0x6b, 0x3d, 0xd6, 0x23, 0x53, 0x10, 0x9a, 0x55, 0xd7, 0x8f, 0xf0, 0xf4, 0xa7, 0x70, 0x2e,
	0x59, 0x30, 0x8d, 0x74, 0xf1, 0x5b, 0xd6, 0xd2, 0xe2, 0xbb, 0x43, 0x97, 0x6d, 0xb5, 0xbb, 0x3e,
	0xa2, 0x56, 0xe5, 0xd2, 0xad, 0x76, 0x59, 0x7f, 0x6e, 0x59, 0x9e, 0xaf, 0xc9, 0x4d, 0x33, 0x33,
	0xa8, 0x3f, 0xe7, 0x44, 0x66, 0xe6, 0x87, 0x4c, 0x91, 0x1a, 0x35, 0x91, 0x0e, 0xb3, 0x09, 0xcd,
	0xa2, 0x9d, 0x6a, 0x83, 0xfa, 0x73, 0x7e, 0x00, 0x67, 0xfd, 0x39, 0xd6, 0xcf, 0x69, 0x4f, 0xaa,
	0x50, 0x96, 0x03, 0x65, 0xe3, 0xbf, 0x4e, 0x45, 0x2b, 0xd5, 0x7c, 0x08, 0x39, 0xdd, 0x92, 0x6d,
	0xb3, 0x67, 0xdc, 0xbc, 0xd7, 0x77, 0x12, 0xd6, 0x37, 0x70, 0x7e, 0xd6, 0x33, 0x70, 0x3e, 0x18,
	0x34, 0xb3, 0x1b, 0x14, 0x39, 0xd7, 0x93, 0x61, 0x6d, 0x7c, 0x98, 0x09, 0x5e, 0x7e, 0x5c, 0x5b,
	0x4f, 0xc6, 0xb5, 0x89, 0x61, 0x34, 0xe5, 0x07, 0x36, 0x35, 0x1b, 0xd8, 0x26, 0x07, 0x9a, 0x70,
	0x40, 0x64, 0xdb, 0x4a, 0x47, 0xb6, 0x1e, 0xa1, 0xb2, 0x07, 0x86, 0xcc, 0x84, 0xb6, 0xcd, 0x64,
	0x44, 0xe2, 0x71, 0xf2, 0x7e, 0xff, 0xf2, 0xf5, 0x0e, 0x49, 0x6a, 0x26, 0x78, 0x4c, 0x0f, 0x54,
	0x38, 0x28, 0x7a, 0xac, 0x26, 0xa2, 0x07, 0x0c, 0x18, 0x66, 0xa4, 0xd9, 0x6d, 0x32, 0x7c, 0x7c,
	0x96, 0x17, 0x3e, 0x06, 0x05, 0xcc, 0x9c, 0xb9, 0x61, 0x4e, 0xfc, 0xf8, 0x2c, 0x27, 0x7e, 0x94,
	0x07, 0xba, 0xf5, 0x30, 0x01, 0xe4, 0xc9, 0x4c, 0xb8, 0x97, 0x43, 0x24, 0x6a, 0x3c, 0x83, 0xd9,
	0x34, 0x2e, 0xe2, 0xa7, 0x71, 0xa7, 0xde, 0xf7, 0xcc, 0xe5, 0x20, 0xa3, 0xcc, 0x6b, 0x9e, 0x17,
	0xe1, 0xf6, 0x0c, 0x29, 0x54, 0x30, 0x6d, 0x1f, 0x67, 0x5e, 0xb9, 0x5c, 0xc9, 0x55, 0x97, 0x79,
	0xd3, 0xf2, 0x6d, 0x98, 0xc1, 0x7d, 0x9d, 0x4b, 0xae, 0x1d, 0x82, 0xb6, 0x7b, 0x50, 0xc3, 0x1d,
	0xa8, 0x9a, 0xee, 0xda, 0xc9, 0xef, 0x0d, 0xab, 0xa6, 0x10, 0x8d, 0xbf, 0xa7, 0x4d, 0x25, 0x1e,
	0xf4, 0x3d, 0x6d, 0x4a, 0x3c, 0xae, 0xd8, 0x5f, 0x1a, 0x83, 0x72, 0xc8, 0xc4, 0x37, 0x75, 0x27,
	0x8e, 0x7f, 0x79, 0xc5, 0x1e, 0xcd, 0x2b, 0xb6, 0x32, 0x07, 0x45, 0x71, 0xd6, 0xf9, 0x43, 0x0c,
	0x66, 0x93, 0x6a, 0xf4, 0xcc, 0xa6, 0xbf, 0xfc, 0x70, 0xba, 0x87, 0x18, 0x91, 0xa6, 0xd4, 0xf0,
	0x91, 0x71, 0x36, 0x89, 0xb3, 0x17, 0xec, 0x3f, 0xc4, 0x08, 0x33, 0xa5, 0x86, 0x8f, 0x92, 0xbe,
	0x45, 0xb1, 0xb1, 0x3d, 0x7a, 0x8e, 0xf5, 0x2d, 0x62, 0xbf, 0x8f, 0xf4, 0x2d, 0xc6, 0xfa, 0x16,
	0xb1, 0x0f, 0x47, 0xfa, 0x16, 0x25, 0x7d, 0x8f, 0xc2, 0x13, 0x5f, 0xc3, 0xe7, 0x58, 0xdf, 0x23,
	0xec, 0x58, 0x91, 0xbe, 0x47, 0xb1, 0xbe, 0x47, 0xd8, 0x49, 0x22, 0x7d, 0x8f, 0x94, 0x87, 0x70,
	0x01, 0xd7, 0x9c, 0x32, 0xe6, 0x29, 0xa3, 0x72, 0x85, 0x31, 0x57, 0xd2, 0x2d, 0x3b, 0x1b, 0x37,
	0x55, 0xec, 0x66, 0x8b, 0x19, 0x37, 0xbb, 0x98, 0x6d, 0x5b, 0x7c, 0xe7, 0x19, 0x7b, 0x18, 0xc5,
	0x3b, 0x0a, 0xba, 0xc7, 0x86, 0x7c, 0xba, 0xc9, 0x0d, 0x28, 0xe1, 0x71, 0x07, 0x46, 0xf2, 0x80,
	0x13, 0x08, 0x89, 0x1b, 0xa6, 0xf2, 0x0e, 0xcc, 0x44, 0x22, 0xa9, 0xcf, 0x81, 0xab, 0x21, 0xa3,
	0xd7, 0x17, 0xc1, 0x7f, 0xb1, 0x08, 0xe5, 0x30, 0x53, 0xf4, 0xa6, 0xef, 0xe7, 0x7f, 0x4c, 0x99,
	0xbc, 0x60, 0x20, 0x59, 0xc6, 0xe4, 0xf7, 0x94, 0x7c, 0xef, 0xee, 0x68, 0x6a, 0xef, 0xee, 0x58,
	0xb8, 0x77, 0x17, 0xcf, 0xd7, 0x0a, 0x4b, 0xcb, 0x8f, 0x00, 0xe2, 0xfb, 0x7a, 0x2b, 0x21, 0x95,
	0x9f, 0x03, 0x74, 0x0d, 0x4a, 0xed, 0x63, 0x2d, 0xe8, 0x8a, 0xa3, 0x41, 0xf8, 0xce, 0xcf, 0xe9,
	0xf6, 0xf1, 0x4e, 0x97, 0x9f, 0x0d, 0xb2, 0x08, 0x17, 0x05, 0x3f, 0xda, 0xd3, 0xa9, 0xf9, 0xfb,
	0x56, 0x2b, 0x3c, 0x51, 0x58, 0x41, 0x51, 0x55, 0x6c, 0xef, 0x6c, 0x32, 0x8e, 0xf2, 0x21, 0x5c,
	0x12, 0x69, 0x88, 0x13, 0xd0, 0x63, 0x39, 0x11, 0xdf, 0x0e, 0x3a, 0x8b, 0x89, 0x70, 0xe7, 0x76,
	0x9c, 0xea, 0x16, 0x54, 0x8d, 0x7d, 0x5c, 0x0b, 0x0f, 0x0b, 0xc3, 0x8f, 0x23, 0x2b, 0x23, 0x35,
	0x2c, 0xcf, 0x77, 0xe0, 0x4a, 0x2c, 0xc5, 0x3f, 0xdb, 0x76, 0x4c, 0xcb, 0x20, 0xe2, 0x93, 0x01,
	0x7e, 0x48, 0xd9, 0xa5, 0x30, 0x09, 0x2b, 0xd7, 0x06, 0xe7, 0xe3, 0xd6, 0xd4, 0x4f, 0xe0, 0x72,
	0x2a, 0xb5, 0x54, 0x36, 0xbe, 0x9b, 0xf4, 0x82, 0x9c, 0x36, 0x2e, 0xdd, 0xb7, 0x60, 0x2e, 0x4e,
	0x99, 0xa9, 0x16, 0xff, 0x3a, 0xe3, 0x62, 0x98, 0x34, 0x55, 0xb3, 0x06, 0x54, 0xe2, 0xb4, 0xb6,
	0xd5, 0x0a, 0x3f, 0xd5, 0x08, 0xc5, 0x37, 0xad, 0x96, 0x72, 0x07, 0x66, 0x62, 0x19, 0x3c, 0xa7,
	0x53, 0x7c, 0xa4, 0x51, 0x09, 0xa5, 0xf0, 0xa0, 0xce, 0xa4, 0xae, 0x43, 0xcb, 0x14, 0x07, 0x20,
	0x47, 0xba, 0x5e, 0x5a, 0x66, 0xd2, 0x92, 0xac, 0x96, 0xe2, 0x20, 0xe4, 0xb2, 0x5c, 0x35, 0x3c,
	0x9c, 0x95, 0x98, 0x16, 0xd5, 0x7c, 0x4f, 0x77, 0xc4, 0x59, 0xc8, 0xd3, 0x48, 0x69, 0x7a, 0xba,
	0xc3, 0x0a, 0xc4, 0x42, 0x9d, 0x86, 0x47, 0xb8, 0x61, 0x42, 0x3c, 0x87, 0x65, 0x5c, 0xad, 0x30,
	0xf2, 0xf6, 0x41, 0xe0, 0x2f, 0x33, 0xa2, 0x72, 0x1f, 0xce, 0xc5, 0x72, 0xa6, 0xe5, 0x1b, 0x3a,
	0x35, 0xf1, 0x38, 0x96, 0x71, 0x75, 0x26, 0x94, 0x5c, 0xe1, 0x64, 0xe5, 0x1d, 0x21, 0x6b, 0xec,
	0xe2, 0xd1, 0x90, 0x94, 0xe8, 0xe6, 0xb1, 0x38, 0x28, 0xb9, 0xca, 0x18, 0xcb, 0xbb, 0x5b, 0x6e,
	0xa0, 0x32, 0x6a, 0x24, 0x1a, 0x3a, 0x12, 0x9e, 0x22, 0x79, 0x3e, 0x16, 0x7d, 0x8e, 0x1e, 0x84,
	0x07, 0x49, 0x2e, 0x40, 0x19, 0x45, 0x59, 0x1c, 0x21, 0x94, 0x8a, 0x43, 0x5a, 0xf0, 0xb3, 0x91,
	0x25, 0xd7, 0x5e, 0xa5, 0x14, 0x8f, 0xc1, 0x63, 0x12, 0x4c, 0x53, 0xab, 0x63, 0xdb, 0xe2, 0x14,
	0x65, 0xfc, 0xd8, 0x64, 0xa7, 0x8b, 0x27, 0xe1, 0x31, 0xa7, 0x45, 0x19, 0xbe, 0x3b, 0x99, 0xb4,
	0xf1, 0xa0, 0x1b, 0x2e, 0xcd, 0xcf, 0x6a, 0x99, 0x65, 0x6c, 0x16, 0x52, 0x9a, 0xa4, 0xbd, 0x46,
	0x09, 0x49, 0xa4, 0xf2, 0xf4, 0x3d, 0x92, 0x4a, 0x55, 0x8f, 0x53, 0x6d, 0xeb, 0x7b, 0x44, 0x4a,
	0xd5, 0x58, 0xc3, 0x0b, 0x4a, 0xb0, 0x77, 0x4b, 0xc3, 0xd4, 0x07, 0xe9, 0x61, 0xea, 0x62, 0x36,
	0x18, 0x24, 0xbf, 0xc9, 0xff, 0x26, 0x54, 0x23, 0x46, 0xf8, 0x4d, 0x61, 0x26, 0x46, 0x89, 0x91,
	0x32, 0x19, 0xa1, 0x1a, 0xbf, 0x50, 0x80, 0x5a, 0x5c, 0x86, 0xd3, 0x42, 0xfc, 0x25, 0x29, 0xbb,
	0xc4, 0x37, 0xfa, 0xf5, 0x9c, 0xa2, 0xf3, 0xd4, 0x51, 0x41, 0xc4, 0xa7, 0x76, 0xcf, 0x61, 0x36,
	0x5d, 0x8e, 0x81, 0xe7, 0x3b, 0xa4, 0x13, 0x48, 0xc1, 0xfd, 0x53, 0xb8, 0x10, 0x72, 0x93, 0x7b,
	0x99, 0xce, 0x1a, 0x70, 0x1b, 0xaf, 0xa0, 0x9e, 0xab, 0x79, 0xd0, 0xe5, 0x0c, 0xb9, 0x89, 0xe2,
	0x36, 0xdc, 0xc4, 0xcb, 0x62, 0x12, 0x12, 0x67, 0xf8, 0x7c, 0xff, 0x55, 0xec, 0x59, 0xd2, 0x21,
	0x25, 0x67, 0xae, 0xfb, 0x8b, 0xd8, 0xaa, 0xc9, 0xa3, 0x4a, 0xfa, 0x9d, 0x58, 0x90, 0x4d, 0x11,
	0xd7, 0x7a, 0x06, 0x2a, 0xb2, 0x5f, 0xe0, 0x1a, 0xe4, 0x6c, 0x22, 0xc1, 0x69, 0x5d, 0xf2, 0x7e,
	0xe2, 0xab, 0xda, 0x5e, 0x5d, 0x88, 0x7f, 0xe6, 0xfd, 0x41, 0xea, 0xd8, 0x92, 0xde, 0x5e, 0x1b,
	0x7e, 0xd3, 0xfd, 0x5e, 0xf2, 0xe4, 0x92, 0x4b, 0xf9, 0x09, 0xa2, 0xc3, 0x4b, 0x9a, 0x70, 0x31,
	0xa7, 0x52, 0x03, 0x6f, 0x1e, 0xc9, 0x49, 0x93, 0x83, 0x5f, 0x68, 0x1e, 0x7e, 0xa1, 0x79, 0xf8,
	0x85, 0x26, 0xf0, 0x0b, 0xed, 0x85, 0x5f, 0x68, 0x6f, 0xfc, 0xf2, 0x4b, 0x20, 0xf0, 0x0b, 0x15,
	0xf8, 0xe5, 0x36, 0x8c, 0xb7, 0x49, 0xa0, 0x0b, 0x4f, 0x0a, 0x3f, 0x55, 0x79, 0xb1, 0x8b, 0xf7,
	0x63, 0x90, 0x40, 0x57, 0x91, 0x9d, 0xf5, 0xbc, 0xd1, 0x5c, 0xcf, 0xa3, 0x03, 0x60, 0x4e, 0xcf,
	0x4f, 0x94, 0x22, 0x98, 0x43, 0x23, 0x98, 0x33, 0x21, 0xc1, 0x1c, 0xda, 0x03, 0xe6, 0x4c, 0x0e,
	0x0f, 0x73, 0xa6, 0x4e, 0x03, 0x73, 0x8a, 0x43, 0xc0, 0x1c, 0xda, 0x95, 0xee, 0x50, 0x08, 0x61,
	0x8e, 0x9a, 0x86, 0x39, 0x34, 0x17, 0xe6, 0x80, 0x04, 0x73, 0xd4, 0x3e, 0x30, 0x87, 0xe6, 0x54,
	0xa8, 0x24, 0xc1, 0x1c, 0xb5, 0x27, 0xcc, 0xa1, 0x79, 0xd5, 0x2a, 0x4b, 0x30, 0x47, 0xcd, 0xd4,
	0x2c, 0xb7, 0xcc, 0xa4, 0xab, 0xf9, 0xc4, 0x26, 0x46, 0x20, 0xe0, 0x4c, 0xba, 0xcc, 0xa4, 0xdb,
	0x44, 0x76, 0x0a, 0x8e, 0x54, 0xd3, 0x70, 0xe4, 0x36, 0x4c, 0x58, 0x9e, 0xe6, 0xeb, 0x62, 0x55,
	0x2d, 0x0c, 0x01, 0x1b, 0xdb, 0xe1, 0x25, 0x51, 0xe3, 0x96, 0xd7, 0xd4, 0x85, 0x98, 0xa9, 0x8b,
	0xf5, 0xb1, 0x5c, 0xb1, 0x15, 0x1d, 0x2f, 0x70, 0xc0, 0x2b, 0x20, 0xce, 0x89, 0x0b, 0x1c, 0xd8,
	0x03, 0xa3, 0x9a, 0x48, 0x15, 0xd7, 0x3a, 0xe0, 0x83, 0x52, 0x83, 0xb1, 0x23, 0x1a, 0xde, 0xe7,
	0xc0, 0xfe, 0x32, 0x1f, 0xd4, 0x5b, 0x02, 0x8c, 0x8c, 0xea, 0x2d, 0xe5, 0x1b, 0x50, 0xb4, 0x3c,
	0x0d, 0x6f, 0x40, 0x43, 0xf0, 0x11, 0x7f, 0xba, 0xb5, 0xb1, 0xbd, 0xcd, 0xa8, 0x86, 0x6b, 0xab,
	0x53, 0x96, 0x87, 0xff, 0x99, 0x3e, 0xd3, 0xa2, 0x02, 0x82, 0xb0, 0xbf, 0x8a, 0x02, 0xe3, 0xd4,
	0xb5, 0x89, 0xc0, 0x19, 0xf8, 0x5f, 0x99, 0x83, 0x69, 0x4a, 0x8e, 0x34, 0xde, 0x9b, 0xeb, 0xe1,
	0x51, 0x98, 0x47, 0xcb, 0xac, 0x23, 0x27, 0xa0, 0x19, 0x9a, 0x08, 0x8f, 0x78, 0x93, 0xa0, 0x19,
	0x9e, 0xce, 0x96, 0x0f, 0xcd, 0xe6, 0x4e, 0x00, 0xcd, 0xae, 0xe4, 0x42, 0xb3, 0xef, 0xc0, 0x15,
	0x14, 0x75, 0x3a, 0xb6, 0x9d, 0xe3, 0x9b, 0xfc, 0xac, 0x37, 0x84, 0x45, 0x5b, 0x1d, 0xdb, 0x4e,
	0xfb, 0x66, 0x1a, 0xad, 0xcd, 0xf7, 0x44, 0x6b, 0x34, 0x44, 0x6b, 0xd7, 0x62, 0xb4, 0xa6, 0x0a,
	0xb4, 0x76, 0x0b, 0xaa, 0x11, 0xa2, 0xe3, 0xd8, 0x90, 0x5f, 0xf5, 0x50, 0x16, 0x90, 0x8e, 0x23,
	0xc3, 0xf7, 0x00, 0xe1, 0x17, 0x02, 0x33, 0xfc, 0x54, 0x88, 0xeb, 0xe3, 0x87, 0xbf, 0xd5, 0x18,
	0xab, 0x49, 0xda, 0xf8, 0xb9, 0x10, 0x2a, 0x7d, 0x17, 0x94, 0x48, 0x3c, 0xc6, 0x71, 0xfc, 0xd2,
	0x87, 0x19, 0x21, 0x9d, 0xc1, 0x70, 0xf4, 0x64, 0x18, 0x8e, 0xf6, 0xc2, 0x70, 0x34, 0x83, 0xe1,
	0x68, 0x3e, 0x86, 0xa3, 0x59, 0x0c, 0x47, 0xbf, 0x0c, 0x0c, 0x47, 0x07, 0x61, 0x38, 0x9a, 0xc2,
	0x70, 0x34, 0x83, 0xe1, 0xe8, 0x49, 0x31, 0x1c, 0xcd, 0xc5, 0x70, 0x7f, 0x46, 0xa0, 0x0d, 0x9a,
	0xc6, 0x70, 0x5f, 0xd3, 0xa0, 0x13, 0x41, 0x3d, 0x7a, 0x1a, 0xa8, 0x47, 0x07, 0x42, 0x3d, 0xfa,
	0xa5, 0x40, 0xbd, 0x3f, 0x19, 0x3b, 0xa0, 0x04, 0xf5, 0xbe, 0x2e, 0x13, 0xbd, 0x88, 0xdb, 0xe8,
	0x84, 0x88, 0x90, 0xf6, 0x47, 0x84, 0x34, 0x83, 0x08, 0xe9, 0x57, 0x8a, 0x08, 0xe9, 0x89, 0x10,
	0x21, 0x3d, 0x29, 0x22, 0xa4, 0x3d, 0x10, 0x21, 0x3d, 0x05, 0x22, 0xa4, 0xbd, 0x10, 0xe1, 0x3e,
	0xcc, 0xa8, 0xfa, 0xdb, 0x04, 0x1e, 0x9c, 0x87, 0x69, 0xaa, 0xbf, 0x4d, 0xa1, 0xc1, 0x22, 0x27,
	0x6d, 0x98, 0xca, 0x6d, 0xa8, 0x08, 0x76, 0x0a, 0x09, 0x96, 0x39, 0xb9, 0x17, 0x0e, 0xfc, 0xd9,
	0x34, 0x00, 0xcf, 0xea, 0x24, 0x28, 0xf0, 0xbb, 0xf9, 0xde, 0x26, 0x2d, 0xc3, 0xa6, 0x8a, 0x9f,
	0xc4, 0x80, 0x37, 0x40, 0x94, 0x4a, 0x20, 0xbc, 0x31, 0x71, 0xd4, 0x35, 0xd2, 0xc2, 0xe3, 0xac,
	0xd3, 0xa8, 0x6a, 0xfc, 0xe4, 0xa8, 0x6a, 0xe2, 0x0c, 0xa8, 0x6a, 0xf2, 0xf4, 0xa8, 0x6a, 0xea,
	0x2c, 0xa8, 0xaa, 0xd8, 0x1f, 0x55, 0x65, 0x17, 0xd5, 0xa6, 0x4f, 0xbe, 0xa8, 0x06, 0x67, 0x58,
	0x54, 0x2b, 0x9d, 0x7e, 0x51, 0xad, 0xdc, 0x77, 0x51, 0x2d, 0xb7, 0xcc, 0xf9, 0x68, 0x73, 0x27,
	0x6b, 0x97, 0xcc, 0x92, 0x5c, 0x75, 0xa8, 0x25, 0xb9, 0x99, 0xa1, 0x96, 0xe4, 0x6a, 0xd9, 0x25,
	0xb9, 0xf8, 0xe4, 0xd9, 0x73, 0xf2, 0x8d, 0x4b, 0x57, 0x60, 0x5a, 0xf7, 0x0d, 0xd1, 0x32, 0x7c,
	0xd1, 0xac, 0xc8, 0x08, 0xd8, 0x2a, 0xef, 0xc0, 0x39, 0x64, 0x32, 0x38, 0x62, 0x39, 0x2d, 0xde,
	0x16, 0xb3, 0xfc, 0xd3, 0x7c, 0xc6, 0x68, 0x92, 0xf6, 0x86, 0xd3, 0x0a, 0x4f, 0x5f, 0xe1, 0xe0,
	0x99, 0x41, 0x3d, 0x44, 0xa6, 0xe3, 0x02, 0x3c, 0x33, 0x8c, 0xa7, 0x3c, 0x84, 0x0b, 0x32, 0xae,
	0x0b, 0xb1, 0xa0, 0x8f, 0x68, 0x75, 0x5c, 0x55, 0x8c, 0x08, 0xdc, 0x09, 0x38, 0xe8, 0x2b, 0x0f,
	0x60, 0xf6, 0x10, 0xaf, 0x35, 0xd3, 0x8c, 0xd6, 0x5e, 0x9c, 0x80, 0x9f, 0x72, 0x7c, 0x8e, 0xb3,
	0x96, 0x5b, 0x7b, 0x91, 0xfc, 0x3d, 0xa8, 0x79, 0x07, 0xb8, 0xe7, 0x2a, 0x16, 0xbe, 0xc4, 0xcb,
	0xea, 0x1d, 0x04, 0x9b, 0xc4, 0x89, 0x24, 0xef, 0xc3, 0xb9, 0x10, 0xd9, 0xc5, 0xa2, 0x75, 0x8e,
	0x4a, 0x29, 0x87, 0x77, 0xb2, 0x6c, 0x90, 0x91, 0xe5, 0x58, 0x77, 0x26, 0x48, 0xc9, 0x8a, 0x12,
	0x70, 0x9c, 0x47, 0x28, 0x75, 0xa9, 0x2f, 0xc0, 0x2e, 0x2b, 0x01, 0xa2, 0xbc, 0x55, 0xa4, 0xb2,
	0x86, 0x65, 0x92, 0x08, 0xf1, 0x84, 0xe0, 0x15, 0x8e, 0x9f, 0xbd, 0x83, 0x80, 0x01, 0x3c, 0x2e,
	0xd7, 0x78, 0x02, 0x35, 0x1e, 0x97, 0xa4, 0xe1, 0xed, 0x41, 0x7a, 0x78, 0x3b, 0x9f, 0x0e, 0x62,
	0x49, 0x78, 0xf7, 0x08, 0xca, 0x82, 0xcc, 0x87, 0x8b, 0x9b, 0xe9, 0xc0, 0xcb, 0xa1, 0x5d, 0x22,
	0xec, 0x36, 0xfe, 0x34, 0x54, 0xc3, 0x8c, 0x4f, 0x3b, 0xe8, 0x7d, 0x3b, 0xca, 0x27, 0x81, 0xe9,
	0x2e, 0x66, 0x4a, 0xcb, 0x53, 0x8a, 0xfc, 0x05, 0xb4, 0xd8, 0x80, 0x73, 0xc9, 0xfc, 0x07, 0xde,
	0xd6, 0x9b, 0x14, 0x97, 0x86, 0xa6, 0x3f, 0x01, 0xb3, 0x9c, 0x77, 0x2a, 0x24, 0x77, 0xb6, 0x81,
	0xa3, 0xf1, 0x12, 0x2e, 0xe6, 0x64, 0xce, 0x5f, 0x4f, 0xa6, 0x9a, 0x71, 0x3e, 0xad, 0xb2, 0x07,
	0x86, 0xfb, 0x21, 0x5c, 0x4a, 0xf2, 0xcf, 0x80, 0xe0, 0xba, 0xa1, 0x7f, 0x9d, 0x1c, 0xbf, 0x9d,
	0xd1, 0x30, 0xcf, 0xc2, 0x56, 0x49, 0x62, 0xb7, 0x7e, 0xaf, 0x80, 0xd3, 0xf2, 0xb1, 0x49, 0x2a,
	0x50, 0x8a, 0x7d, 0xc9, 0x6f, 0xfc, 0xc7, 0x42, 0xe8, 0x3d, 0x67, 0x42, 0x6d, 0xf7, 0x12, 0xa8,
	0x2d, 0xbf, 0x97, 0x71, 0xcc, 0xf6, 0x20, 0x85, 0xd9, 0x7a, 0xf9, 0x78, 0x88, 0xd8, 0xde, 0x4d,
	0x22, 0xb6, 0x0b, 0x79, 0xe2, 0x11, 0x5e, 0x7b, 0x01, 0xe7, 0x33, 0x95, 0x19, 0xf8, 0x7e, 0x3b,
	0x93, 0x22, 0x83, 0xd5, 0x8c, 0x2c, 0x56, 0x33, 0xb2, 0x58, 0xcd, 0x90, 0xb0, 0x9a, 0x91, 0x8f,
	0xd5, 0xfa, 0xbc, 0x73, 0xfc, 0xcd, 0x22, 0x62, 0xb5, 0xf0, 0x8d, 0xe3, 0x77, 0xf3, 0x17, 0x81,
	0x93, 0x2e, 0x73, 0xfa, 0xf7, 0x8d, 0x1c, 0xa4, 0xa5, 0xdf, 0x36, 0x96, 0x38, 0xed, 0x8f, 0xde,
	0x35, 0xfe, 0xff, 0xfd, 0xae, 0x31, 0x86, 0x3f, 0xb5, 0x9e, 0xf0, 0xe7, 0xdc, 0x30, 0xf0, 0x47,
	0xe9, 0x05, 0x7f, 0x78, 0x21, 0x10, 0xfe, 0x70, 0x88, 0x34, 0x8d, 0x94, 0xfe, 0xf0, 0xe7, 0xfc,
	0x49, 0xe1, 0xcf, 0x85, 0x5e, 0xf0, 0xe7, 0x1b, 0xa0, 0x88, 0x05, 0x2d, 0x97, 0xa6, 0xd1, 0x52,
	0x4d, 0xc7, 0x75, 0x2d, 0x97, 0x46, 0xd2, 0x0f, 0xe1, 0x82, 0xfc, 0x5e, 0x33, 0x8d, 0x98, 0xb8,
	0x9f, 0xe3, 0x12, 0x56, 0x7f, 0x24, 0x54, 0xcf, 0x47, 0x42, 0x39, 0xf8, 0xe6, 0x72, 0x6f, 0x7c,
	0x63, 0x9c, 0x04, 0xdf, 0x18, 0xf9, 0xf8, 0xc6, 0x48, 0xe1, 0x1b, 0x23, 0x0f, 0xdf, 0x18, 0x29,
	0x7c, 0x63, 0x9c, 0x1d, 0xdf, 0x18, 0xfd, 0xf1, 0x8d, 0x91, 0xc0, 0x37, 0x46, 0x0a, 0xdf, 0x18,
	0x27, 0xc3, 0x37, 0xf9, 0xef, 0x1b, 0x77, 0x70, 0x24, 0xcd, 0xbc, 0x6d, 0x3c, 0x5b, 0xb0, 0x15,
	0xc0, 0xc5, 0x38, 0x39, 0x70, 0xe9, 0xfd, 0x9e, 0xf1, 0x29, 0x0e, 0x64, 0x99, 0xb7, 0x8c, 0x27,
	0xb6, 0x7c, 0xe3, 0x15, 0x22, 0xa0, 0xdc, 0xd7, 0x95, 0x7d, 0x4f, 0xa3, 0xcd, 0x4b, 0x24, 0x19,
	0xf2, 0x65, 0xe8, 0x8c, 0x12, 0x18, 0x3a, 0xa3, 0x15, 0x9f, 0x85, 0x6d, 0x73, 0x22, 0x94, 0x63,
	0xf4, 0x43, 0x39, 0x46, 0x0a, 0xe5, 0x18, 0x5f, 0x21, 0xca, 0x31, 0x4e, 0x80, 0x72, 0x8c, 0x93,
	0xa1, 0x1c, 0x23, 0x17, 0xe5, 0x18, 0x27, 0x46, 0x39, 0x3d, 0xdf, 0x51, 0x7e, 0x06, 0x73, 0xaf,
	0xdb, 0x6e, 0x60, 0xb9, 0x0e, 0xbf, 0xa2, 0x86, 0x38, 0xe6, 0x90, 0x47, 0x26, 0xf6, 0x48, 0x16,
	0x37, 0xc4, 0x65, 0xb8, 0xd4, 0x43, 0x86, 0xb9, 0xa6, 0xcc, 0x1a, 0xda, 0x35, 0xf3, 0x12, 0x49,
	0x95, 0xf9, 0xcd, 0x51, 0x28, 0x0b, 0x11, 0x7e, 0x43, 0xe4, 0x4d, 0xa8, 0x04, 0x6e, 0xa0, 0xdb,
	0xda, 0x11, 0xa7, 0x8a, 0x0f, 0xd3, 0xca, 0x48, 0x14, 0x92, 0x6c, 0x64, 0x6c, 0x5b, 0x0c, 0x32,
	0x44, 0x52, 0x1c, 0x3c, 0x95, 0xdb, 0xd6, 0xde, 0x86, 0x13, 0x4a, 0xdd, 0x81, 0x19, 0x26, 0xe5,
	0x76, 0x82, 0x48, 0x8c, 0x63, 0xaa, 0x4a, 0xdb, 0xda, 0x7b, 0xd1, 0x09, 0x42, 0xb9, 0xeb, 0x50,
	0x62, 0x72, 0x7e, 0xc7, 0x30, 0x88, 0x1f, 0xdd, 0xd2, 0xda, 0xb6, 0xf6, 0x9a, 0x9c, 0xc2, 0xc6,
	0x40, 0x26, 0xd0, 0xd2, 0x2d, 0x9b, 0x98, 0xe2, 0x25, 0xe8, 0x74, 0xdb, 0xda, 0x5b, 0x43, 0x42,
	0x98, 0x5e, 0xdf, 0x75, 0x69, 0x40, 0x4c, 0x01, 0xa8, 0x58, 0x8a, 0x25, 0x4e, 0x09, 0x05, 0x02,
	0xab, 0x4d, 0xdc, 0x4e, 0x08, 0x9e, 0x98, 0xc0, 0x0e, 0xa7, 0x28, 0x97, 0xa1, 0xc8, 0x04, 0x0c,
	0xd7, 0x36, 0xc5, 0xaa, 0xd3, 0x54, 0xdb, 0xda, 0x5b, 0x76, 0x6d, 0xb3, 0xf1, 0x9f, 0x0b, 0x50,
	0x95, 0x6d, 0xb8, 0xea, 0xa1, 0x3a, 0xdd, 0xc0, 0x41, 0x9b, 0x95, 0x97, 0x7f, 0x9f, 0x0c, 0x6d,
	0xdd, 0x10, 0x2f, 0xe2, 0x94, 0x77, 0x41, 0x71, 0x6d, 0x53, 0xdb, 0x77, 0xdb, 0x78, 0x8b, 0x84,
	0xeb, 0x07, 0x9a, 0xc5, 0xf7, 0x87, 0x4f, 0xab, 0x33, 0xae, 0x6d, 0xae, 0x23, 0x63, 0xdd, 0xf5,
	0x83, 0x0d, 0x4f, 0xb9, 0x8d, 0xb6, 0xa4, 0x3a, 0xcb, 0x81, 0x7f, 0xbc, 0x13, 0x1b, 0x89, 0x53,
	0xf1, 0x4b, 0x9d, 0x9b, 0x50, 0x11, 0x46, 0xd4, 0xf8, 0xfd, 0xec, 0xe2, 0x44, 0xe0, 0xa3, 0xb8,
	0xf1, 0xf0, 0x8a, 0x01, 0xf9, 0x45, 0x31, 0x7f, 0x88, 0xaf, 0x74, 0x9f, 0x94, 0xae, 0x74, 0x6f,
	0x74, 0x61, 0x46, 0xd4, 0x6b, 0xc9, 0x08, 0xac, 0x23, 0x32, 0x4c, 0xc5, 0xee, 0x62, 0x8b, 0x8a,
	0xb2, 0x72, 0x9d, 0xbc, 0xe1, 0xe3, 0x2a, 0xf0, 0x82, 0x5c, 0x81, 0xe9, 0x8e, 0x4f, 0xf6, 0xb4,
	0x23, 0x5b, 0x0f, 0x1b, 0xbd, 0xc8, 0x08, 0xaf, 0x6d, 0xdd, 0x69, 0xfc, 0xe2, 0x28, 0x9c, 0xcf,
	0x73, 0x4b, 0xe5, 0xfb, 0xc3, 0x84, 0x98, 0x27, 0xd5, 0x9f, 0xfd, 0xe1, 0x75, 0x49, 0x4e, 0x0e,
	0x39, 0xb7, 0xa1, 0x1a, 0x1a, 0x89, 0x38, 0xfa, 0xae, 0x98, 0x4f, 0x14, 0xd5, 0xd0, 0x74, 0xab,
	0x48, 0x54, 0xbe, 0x11, 0xc6, 0x8f, 0x4c, 0xb8, 0x91, 0xbb, 0x42, 0x78, 0x7e, 0xfd, 0x3d, 0x18,
	0x25, 0x5e, 0x7d, 0x3c, 0x3d, 0x6c, 0x26, 0x9d, 0x42, 0x1d, 0x25, 0x9e, 0xf2, 0x11, 0x4c, 0xeb,
	0x68, 0x4b, 0x8d, 0x78, 0xf5, 0x89, 0xf4, 0x76, 0xdc, 0x94, 0xb5, 0xd5, 0xa2, 0x2e, 0xfe, 0xe1,
	0xbd, 0x40, 0xc4, 0x0f, 0x58, 0x77, 0x5f, 0xb3, 0x9c, 0x61, 0xef, 0x05, 0xca, 0xa4, 0x88, 0xe3,
	0xc8, 0x79, 0x50, 0xb2, 0xec, 0x46, 0x13, 0x2e, 0x26, 0xa8, 0x43, 0xae, 0xcf, 0xe7, 0xa4, 0x91,
	0x02, 0xc8, 0x6b, 0x98, 0xcd, 0x11, 0x38, 0x73, 0x53, 0x36, 0x9a, 0x70, 0x89, 0xe9, 0x5d, 0xb6,
	0x5d, 0xe3, 0xa0, 0x79, 0x1c, 0x5d, 0xb5, 0x36, 0xe8, 0x9c, 0xbb, 0xbc, 0x34, 0xb1, 0x5d, 0x2e,
	0xc2, 0xf9, 0x3c, 0x81, 0xc6, 0x1b, 0xa8, 0xa7, 0xe8, 0x43, 0x1e, 0x45, 0x97, 0x9b, 0x2a, 0xb9,
	0x65, 0x2b, 0x57, 0xe4, 0xec, 0xf6, 0xd1, 0x60, 0x9e, 0x69, 0xde, 0x70, 0x7e, 0x4c, 0x8c, 0x60,
	0x2d, 0x20, 0xdb, 0x78, 0x33, 0xe8, 0x90, 0x67, 0x54, 0xf5, 0x4e, 0x19, 0xdb, 0xea, 0x67, 0x05,
	0x98, 0xeb, 0x2d, 0xa7, 0x7c, 0x0f, 0x66, 0x7c, 0xb7, 0x43, 0x0d, 0xa2, 0x11, 0xc7, 0xe4, 0x87,
	0xe0, 0x14, 0xc4, 0x68, 0x7c, 0xb0, 0xff, 0x60, 0x55, 0xd0, 0x62, 0xf4, 0x52, 0xe5, 0xd2, 0x21,
	0x43, 0x59, 0x87, 0xf3, 0x26, 0xf1, 0x03, 0xcb, 0xd1, 0x45, 0x77, 0x35, 0xe5, 0x93, 0x74, 0x7a,
	0x28, 0x99, 0x95, 0x92, 0x44, 0x9a, 0xae, 0xc0, 0xb4, 0x28, 0x89, 0xe5, 0x85, 0xb1, 0x86, 0x13,
	0x78, 0x74, 0x95, 0xb3, 0xb1, 0xbc, 0x70, 0xab, 0xb0, 0x44, 0xdd, 0xf0, 0x1a, 0x06, 0x5c, 0xcb,
	0xad, 0xeb, 0x90, 0x87, 0x64, 0xf5, 0x49, 0x2b, 0x39, 0xc3, 0xcf, 0xc3, 0x95, 0x3e, 0x82, 0x5f,
	0x46, 0x97, 0xb9, 0xb8, 0x66, 0xbb, 0x6f, 0xf9, 0x07, 0x2d, 0xc3, 0xbf, 0x7f, 0xcb, 0x49, 0x93,
	0x04, 0x08, 0xb3, 0x39, 0x12, 0xa7, 0x39, 0x05, 0x78, 0xd6, 0xa3, 0x56, 0x5b, 0xa7, 0xc7, 0xe2,
	0x6d, 0xc6, 0x91, 0x6e, 0x8b, 0x53, 0x1c, 0x8a, 0xea, 0x39, 0xc1, 0xc2, 0xf7, 0x18, 0xaf, 0x19,
	0x03, 0xaf, 0xf0, 0x95, 0xe5, 0xc3, 0x53, 0xd5, 0x65, 0x49, 0x65, 0x31, 0x3c, 0x05, 0x3e, 0xad,
	0x76, 0x1c, 0xd5, 0xce, 0x46, 0x4c, 0x49, 0xf1, 0x5d, 0x98, 0x49, 0xa5, 0x09, 0xcf, 0x59, 0x4f,
	0x4a, 0x87, 0x1f, 0x78, 0x4f, 0x46, 0xe7, 0x8f, 0x44, 0xdf, 0x71, 0x4f, 0xf1, 0x43, 0x26, 0xd8,
	0xff, 0xc6, 0x4f, 0x0b, 0xa0, 0x24, 0x0c, 0xc4, 0xfb, 0xc7, 0x1d, 0x98, 0xd9, 0xd7, 0xa9, 0xf9,
	0x56, 0xa7, 0x44, 0x3b, 0xa2, 0xad, 0x70, 0xf9, 0x6b, 0x5c, 0xad, 0x84, 0xe4, 0xd7, 0xb4, 0xb5,
	0x61, 0x2a, 0xef, 0x42, 0xb1, 0x65, 0xbb, 0x6f, 0xa5, 0x03, 0x1b, 0x6a, 0x0f, 0x7c, 0xe2, 0xfb,
	0x96, 0xeb, 0x60, 0xcb, 0x3c, 0x23, 0xc7, 0xea, 0x54, 0x8b, 0xff, 0x51, 0xbe, 0x0d, 0x55, 0x14,
	0x36, 0x2d, 0x4a, 0x8c, 0x08, 0x50, 0xc5, 0x87, 0x92, 0xb2, 0x04, 0x2b, 0x21, 0x4f, 0xad, 0xb4,
	0xe4, 0x47, 0xe5, 0x5b, 0x80, 0x04, 0xcd, 0x72, 0xfc, 0x40, 0x77, 0x0c, 0x8e, 0x20, 0xaa, 0x8b,
	0x17, 0x12, 0xd9, 0x6d, 0x08, 0xa6, 0x5a, 0x6e, 0x49, 0x4f, 0x6c, 0x84, 0xca, 0xd6, 0x71, 0xd0,
	0x08, 0x95, 0x4d, 0x11, 0x47, 0x97, 0xdf, 0x1a, 0x05, 0x65, 0x43, 0x08, 0x6e, 0xbb, 0x34, 0x10,
	0x4e, 0x32, 0x0f, 0xe0, 0xb9, 0x54, 0x7c, 0x3d, 0x21, 0x00, 0xc8, 0x34, 0xa3, 0xf0, 0x83, 0xdb,
	0xdf, 0x87, 0x12, 0xb2, 0x13, 0xb7, 0x5d, 0x54, 0x59, 0x8e, 0xad, 0x07, 0x1b, 0x2d, 0xe1, 0x73,
	0xa8, 0x41, 0xe8, 0x7b, 0x2c, 0xf4, 0xf9, 0x1e, 0x11, 0x57, 0x96, 0x57, 0xe5, 0xe1, 0x7e, 0xc3,
	0x09, 0x30, 0x73, 0xc6, 0xe5, 0xf9, 0xe0, 0x5f, 0x36, 0x90, 0x63, 0xb2, 0xb6, 0x6b, 0x86, 0x66,
	0xba, 0x9c, 0x49, 0xb5, 0xe2, 0xd9, 0xdd, 0xe7, 0xae, 0x49, 0xd4, 0x22, 0x93, 0x65, 0xff, 0xf0,
	0x06, 0x74, 0x96, 0x2e, 0xe8, 0x6a, 0x9e, 0xde, 0xf1, 0x05, 0x58, 0x2d, 0xaa, 0x65, 0x46, 0xdd,
	0xe9, 0x6e, 0x23, 0x2d, 0x92, 0xc2, 0xd6, 0x30, 0x02, 0x6a, 0x8b, 0xe3, 0x26, 0x50, 0x8a, 0x19,
	0x6d, 0x39, 0xa0, 0x76, 0xe3, 0xf7, 0x26, 0xe1, 0x5c, 0xda, 0x42, 0xf8, 0x32, 0xd8, 0x72, 0xb4,
	0x3d, 0xd7, 0x35, 0x35, 0xd7, 0x08, 0x48, 0xe0, 0x0b, 0xaf, 0x2a, 0x5b, 0xce, 0x53, 0xd7, 0x35,
	0x5f, 0x20, 0x4d, 0x69, 0x40, 0xc5, 0x72, 0xb4, 0x5d, 0x3d, 0x12, 0xe2, 0x28, 0xad, 0x64, 0x39,
	0x4f, 0xf4, 0x50, 0x66, 0x1e, 0xc0, 0x72, 0xb4, 0x8e, 0x63, 0x19, 0xba, 0x1f, 0x84, 0x67, 0xed,
	0x5b, 0xce, 0x2b, 0x4e, 0x50, 0x6e, 0x40, 0x99, 0xa9, 0xa0, 0xae, 0x6e, 0xa2, 0xc0, 0x78, 0xa4,
	0x21, 0x24, 0x09, 0x91, 0x76, 0xc7, 0x0e, 0xb8, 0x8e, 0x89, 0x50, 0xe4, 0x79, 0x48, 0x62, 0xc0,
	0x1a, 0x0f, 0xd3, 0xea, 0xf8, 0x21, 0xfa, 0x9c, 0xb2, 0x1c, 0x34, 0x83, 0x48, 0xdd, 0x71, 0x4c,
	0x42, 0xa5, 0xd3, 0xb4, 0x4b, 0xac, 0x04, 0x82, 0x24, 0x44, 0x5a, 0x54, 0xdf, 0x6b, 0x13, 0x27,
	0xf0, 0x05, 0x34, 0x2f, 0x59, 0xce, 0x5a, 0x48, 0x62, 0x90, 0xd5, 0x72, 0x34, 0xf7, 0x48, 0x28,
	0xe1, 0x07, 0x6b, 0x83, 0xe5, 0xbc, 0x10, 0x14, 0x36, 0x3a, 0x58, 0x8e, 0xf6, 0x63, 0x7d, 0x77,
	0x97, 0x50, 0xb1, 0x34, 0x59, 0xb4, 0x9c, 0x1f, 0xe2, 0xb3, 0x32, 0x87, 0x4c, 0xda, 0xc5, 0xdd,
	0x5a, 0xa5, 0xb0, 0x7c, 0x6a, 0x77, 0x95, 0x52, 0xe5, 0x2a, 0xda, 0xa7, 0x65, 0xf8, 0xc8, 0x2c,
	0x87, 0x29, 0xd7, 0x0c, 0x9f, 0x71, 0xe7, 0x01, 0xd8, 0xbc, 0x46, 0x98, 0xb7, 0xc2, 0x97, 0xe5,
	0xdc, 0x4e, 0x20, 0x8c, 0x7b, 0x1d, 0x4a, 0x8c, 0x1d, 0x5a, 0xb7, 0x2a, 0xae, 0x83, 0xee, 0x04,
	0xa1, 0x79, 0x6f, 0x42, 0x85, 0x09, 0xc4, 0xf6, 0x15, 0x4b, 0x8b, 0x6e, 0x27, 0x88, 0x0d, 0x2c,
	0x84, 0x62, 0x0b, 0xd7, 0x22, 0xa1, 0xd8, 0xc4, 0xd7, 0x78, 0x56, 0x61, 0x41, 0xf9, 0x3b, 0x58,
	0x56, 0x14, 0x51, 0xd2, 0x2b, 0xc0, 0x1e, 0x44, 0x1b, 0x28, 0xe2, 0x32, 0xd4, 0x4e, 0xc0, 0x1b,
	0xe1, 0x36, 0x54, 0x19, 0xd3, 0x70, 0x6d, 0xdb, 0xf2, 0xa3, 0x7b, 0x64, 0x2b, 0x2a, 0xcb, 0x77,
	0x39, 0x22, 0xe2, 0xfd, 0xd6, 0x1d, 0xd6, 0x2b, 0x5b, 0x84, 0x52, 0x62, 0x8a, 0xfd, 0x81, 0x2c,
	0xdf, 0x15, 0x41, 0x0a, 0x0d, 0xe2, 0x5b, 0xce, 0x9e, 0x4d, 0xc4, 0x77, 0x0a, 0x2c, 0xe3, 0x26,
	0x12, 0x42, 0x0d, 0x58, 0x15, 0xcf, 0x26, 0xe1, 0x57, 0x0a, 0x61, 0x4d, 0x3c, 0x9b, 0x84, 0xb5,
	0x25, 0x5d, 0x36, 0xe7, 0xb3, 0x8e, 0xc2, 0x3d, 0x83, 0x2c, 0xdd, 0x6a, 0x48, 0x63, 0x0e, 0xc5,
	0x84, 0x6c, 0x36, 0xf5, 0x10, 0x5b, 0x07, 0xdd, 0x4e, 0xb0, 0xc9, 0x26, 0x34, 0xbf, 0x5d, 0x80,
	0xf3, 0x72, 0x87, 0x89, 0x86, 0xaa, 0xeb, 0x22, 0x6a, 0x38, 0x9d, 0x36, 0x73, 0x82, 0x82, 0xb8,
	0x4a, 0xdd, 0xa5, 0xc1, 0x16, 0x52, 0x94, 0x0f, 0xa3, 0xf5, 0x07, 0x1e, 0x81, 0xaf, 0x26, 0xfa,
	0x7a, 0x2a, 0x46, 0x45, 0xab, 0x10, 0x0f, 0x93, 0xb3, 0x88, 0x2b, 0xbd, 0x13, 0x45, 0x6b, 0x11,
	0xaf, 0xe0, 0x52, 0x5e, 0x09, 0x07, 0x4e, 0xe2, 0xf3, 0x12, 0x49, 0x63, 0xf4, 0x47, 0x30, 0x9b,
	0x94, 0xe0, 0x43, 0xd0, 0xa0, 0x7a, 0x37, 0x5e, 0xc2, 0xc5, 0x9c, 0x74, 0x83, 0x96, 0xe2, 0x72,
	0x92, 0x44, 0x71, 0xfd, 0x7e, 0x17, 0x66, 0x9b, 0x6e, 0x2b, 0x60, 0xe3, 0xdb, 0xf6, 0xfe, 0xd1,
	0xb6, 0xe5, 0x11, 0xbc, 0x6c, 0xfd, 0x22, 0x28, 0xcd, 0x17, 0x6b, 0x3b, 0x6f, 0x96, 0xd4, 0x55,
	0x6d, 0x7b, 0xfd, 0xb5, 0xa6, 0x7e, 0xba, 0xf2, 0x7c, 0xa9, 0x36, 0x92, 0xa1, 0xef, 0x20, 0xbd,
	0xa0, 0xd4, 0xe1, 0x7c, 0x82, 0xbe, 0xb1, 0xf5, 0x54, 0x5d, 0x6d, 0x36, 0x6b, 0xa3, 0xca, 0x25,
	0x98, 0x4d, 0x70, 0x56, 0x39, 0x63, 0xec, 0xfe, 0x9f, 0x97, 0xbf, 0xec, 0x0e, 0x4f, 0xdb, 0x50,
	0x6e, 0xc3, 0xa5, 0x65, 0xf5, 0xb3, 0xed, 0x9d, 0x17, 0x4b, 0xdb, 0x1b, 0xda, 0xfa, 0x52, 0x73,
	0x7d, 0xe7, 0xb3, 0xed, 0x55, 0x6d, 0xeb, 0xc5, 0xd6, 0x6a, 0x6d, 0x64, 0xae, 0xf8, 0xf9, 0x17,
	0x0b, 0xe3, 0x8e, 0xeb, 0x30, 0xdf, 0xbb, 0x98, 0x23, 0xf6, 0x7c, 0xe5, 0x71, 0xad, 0x30, 0x37,
	0xf5, 0xf9, 0x17, 0x0b, 0x63, 0xcf, 0x57, 0x1e, 0xf7, 0xd0, 0xd5, 0x5c, 0x5f, 0x7a, 0x58, 0x1b,
	0xe5, 0xba, 0xd8, 0x7f, 0xe5, 0x1d, 0xb8, 0x9c, 0x2f, 0xb6, 0xb8, 0xf8, 0x61, 0x6d, 0x6c, 0x0e,
	0x3e, 0xff, 0x62, 0x61, 0x92, 0x3f, 0xf5, 0x11, 0x7d, 0xfc, 0x51, 0x6d, 0x3c, 0x16, 0x7d, 0xfc,
	0x51, 0x6f, 0xd1, 0x47, 0x9f, 0x7c, 0x58, 0x9b, 0x88, 0x44, 0x1f, 0x7d, 0xd2, 0x47, 0xeb, 0xe3,
	0x87, 0x8b, 0xb5, 0xc9, 0x48, 0xf4, 0xf1, 0xc3, 0x45, 0xe5, 0x21, 0xcc, 0xf7, 0x14, 0xd5, 0x58,
	0x79, 0xa7, 0xe6, 0xaa, 0x9f, 0x7f, 0xb1, 0x00, 0x31, 0x65, 0x40, 0x92, 0xc7, 0x1f, 0xd5, 0x8a,
	0xc9, 0x24, 0x8f, 0x3f, 0x52, 0xde, 0x83, 0x2b, 0x39, 0x49, 0xd6, 0x9f, 0x2f, 0x2d, 0xa3, 0x89,
	0xa7, 0xe7, 0xca, 0x9f, 0x7f, 0xb1, 0x50, 0x0c, 0x9f, 0x95, 0xf7, 0xe1, 0x6a, 0x2f, 0x71, 0x34,
	0x36, 0xcc, 0x55, 0x3e, 0xff, 0x62, 0x61, 0x3a, 0x22, 0x28, 0x8f, 0xe0, 0x5a, 0x9f, 0x04, 0xac,
	0x1a, 0xa5, 0xb9, 0x99, 0xcf, 0xbf, 0x58, 0x28, 0x49, 0xa4, 0x41, 0x89, 0x1e, 0x7f, 0x54, 0x2b,
	0xa7, 0x12, 0x3d, 0xfe, 0x68, 0x40, 0x22, 0xd6, 0x14, 0x95, 0x64, 0x22, 0xd6, 0x1e, 0xfd, 0x13,
	0xb1, 0x46, 0xa9, 0x26, 0x13, 0xb1, 0x96, 0xc9, 0xb7, 0x19, 0xd3, 0x88, 0xed, 0x32, 0xc3, 0x6d,
	0x16, 0x3e, 0xf7, 0x15, 0x7f, 0xfc, 0x51, 0xad, 0x26, 0x8b, 0xf7, 0x6c, 0x11, 0x64, 0xb3, 0x4a,
	0x9c, 0x93, 0xc4, 0x59, 0x0d, 0xfa, 0x88, 0xb3, 0xe2, 0x2b, 0x92, 0xf8, 0xe3, 0x87, 0x8b, 0xf7,
	0xff, 0xd5, 0x98, 0xf4, 0x5d, 0x36, 0x76, 0xc3, 0xab, 0x50, 0x5f, 0x6a, 0x7e, 0xf6, 0x9c, 0x25,
	0x5f, 0x5d, 0x5e, 0xd6, 0xb6, 0x5f, 0x6c, 0x6c, 0xed, 0x68, 0xcf, 0x5f, 0x6d, 0x6a, 0x6b, 0xdb,
	0xb5, 0x91, 0x24, 0x77, 0xa5, 0xb9, 0xa4, 0x35, 0x37, 0x9e, 0x6a, 0x4f, 0x57, 0xb7, 0x18, 0xb7,
	0xa0, 0x5c, 0x87, 0x2b, 0x59, 0xee, 0xeb, 0x55, 0x75, 0x63, 0xed, 0x33, 0x26, 0x80, 0x21, 0x21,
	0x14, 0x50, 0x9b, 0x4b, 0xda, 0xea, 0x16, 0x96, 0xb5, 0x36, 0x96, 0x66, 0xac, 0xac, 0x72, 0xc6,
	0xb8, 0x72, 0x05, 0x2e, 0xc9, 0x8c, 0x65, 0x75, 0x27, 0x62, 0x4e, 0x28, 0x97, 0xe1, 0x42, 0xf3,
	0xb3, 0xe7, 0xcf, 0xc3, 0xaa, 0xb2, 0x82, 0xac, 0xaa, 0x4b, 0x3b, 0xab, 0xb5, 0x49, 0x0c, 0x3e,
	0x32, 0x8b, 0x97, 0xa2, 0x36, 0x95, 0xce, 0x49, 0x94, 0xbf, 0x56, 0x54, 0xe6, 0xe0, 0x62, 0x9a,
	0x21, 0x12, 0x4d, 0xcb, 0xbc, 0xe6, 0xea, 0xce, 0xab, 0x6d, 0x6d, 0x5b, 0xdd, 0x78, 0xad, 0x3d,
	0x5b, 0xfd, 0xac, 0x06, 0x2c, 0x30, 0x26, 0x79, 0xcb, 0xab, 0xea, 0x4e, 0xad, 0xa4, 0xcc, 0xc3,
	0xe5, 0xfc, 0x34, 0xda, 0xea, 0xa7, 0xb5, 0x8a, 0x6c, 0xc9, 0xb5, 0x8d, 0xed, 0x66, 0xa2, 0x30,
	0x55, 0xd9, 0x92, 0x09, 0xae, 0x28, 0xd1, 0xcc, 0xfd, 0x7b, 0x00, 0xf1, 0xb9, 0x7b, 0x4a, 0x15,
	0x60, 0x69, 0x65, 0x45, 0x7b, 0xb5, 0xbd, 0xc2, 0x6a, 0x3f, 0xa2, 0x00, 0x4c, 0xae, 0xac, 0x6e,
	0xae, 0xee, 0xac, 0xd6, 0x0a, 0xf7, 0x37, 0xa1, 0x2c, 0x83, 0x67, 0xa5, 0x02, 0xd3, 0xcd, 0xed,
	0xd5, 0xd5, 0x15, 0xed, 0xe1, 0x07, 0xcf, 0x6b, 0x23, 0x2c, 0x69, 0xf8, 0xf8, 0xc1, 0xf3, 0x5a,
	0x41, 0x29, 0x43, 0x51, 0x3c, 0x3f, 0xad, 0x8d, 0x2a, 0x33, 0x50, 0xe2, 0x4f, 0xea, 0x6a, 0xf3,
	0xf5, 0x4a, 0x6d, 0xec, 0xfe, 0x23, 0x98, 0x49, 0x81, 0x6a, 0x26, 0xb3, 0xbe, 0xb4, 0xb9, 0xa6,
	0xad, 0xbc, 0xda, 0xde, 0x5c, 0xfd, 0xb4, 0x36, 0xc2, 0x08, 0x6b, 0xaf, 0x36, 0x37, 0x43, 0x42,
	0x61, 0xf1, 0x77, 0xef, 0x42, 0x31, 0x1c, 0x8b, 0x14, 0x1d, 0xce, 0x3d, 0x25, 0xc1, 0x36, 0x75,
	0xf7, 0xa8, 0xde, 0x0e, 0x97, 0x2b, 0x6f, 0x27, 0x6e, 0xae, 0x4b, 0x32, 0xe3, 0xc1, 0x6e, 0xee,
	0x66, 0x62, 0x2f, 0x6a, 0x42, 0x26, 0x1a, 0x9f, 0x1b, 0x23, 0xca, 0xcf, 0xc3, 0x0c, 0xee, 0xb4,
	0x5a, 0xdf, 0x8d, 0x32, 0x90, 0x52, 0xa6, 0x58, 0x92, 0xfa, 0x5b, 0x7d, 0x84, 0x52, 0xfa, 0xf9,
	0x6d, 0x2c, 0x1d, 0x4a, 0x36, 0xad, 0xd6, 0x13, 0xb3, 0x25, 0xeb, 0x4f, 0xb1, 0xf2, 0xf5, 0x67,
	0x84, 0x64, 0xfd, 0x6f, 0xe0, 0x9c, 0x34, 0x34, 0xf3, 0x55, 0x08, 0x45, 0x02, 0x19, 0x19, 0x26,
	0x53, 0xbe, 0x90, 0xcb, 0x4f, 0x2a, 0xfe, 0x11, 0x54, 0x25, 0xde, 0x53, 0x12, 0x28, 0x8d, 0xdc,
	0x54, 0x89, 0x99, 0xa3, 0x6c, 0xf5, 0xb4, 0x8c, 0xac, 0x7c, 0x0d, 0xa6, 0x36, 0xdd, 0x3d, 0x7e,
	0xad, 0x7f, 0x9c, 0x42, 0x90, 0x24, 0x75, 0x57, 0x73, 0x98, 0xb2, 0x9e, 0x27, 0x50, 0x79, 0xd9,
	0xb1, 0x88, 0x6f, 0xb0, 0xe7, 0xa6, 0x63, 0x2a, 0xd2, 0x34, 0x10, 0x5f, 0x47, 0x0b, 0x5d, 0x73,
	0x97, 0x32, 0x74, 0x81, 0xb2, 0x46, 0x94, 0x25, 0x28, 0x0b, 0x1d, 0xcd, 0x40, 0xa7, 0xc1, 0x69,
	0x54, 0xfc, 0x00, 0x4a, 0x91, 0x0a, 0xd7, 0x3b, 0x8d, 0x86, 0x35, 0x28, 0xed, 0x18, 0xde, 0xf2,
	0x2e, 0x3f, 0xf7, 0x5e, 0x91, 0xef, 0x4f, 0x67, 0x64, 0xc9, 0x24, 0x73, 0x19, 0x56, 0xd2, 0xb0,
	0x5c, 0x0f, 0xef, 0xf0, 0xa7, 0xd7, 0xa3, 0x0a, 0x3d, 0xfc, 0xed, 0xa7, 0x72, 0x3d, 0x25, 0x9c,
	0x7e, 0xcb, 0x2b, 0x7b, 0x54, 0x42, 0x40, 0xd6, 0xb9, 0x01, 0x45, 0xe4, 0x31, 0x5f, 0xba, 0x9a,
	0x92, 0x4f, 0x7a, 0xd1, 0x7c, 0x1e, 0x37, 0x5d, 0x4d, 0xdb, 0xcf, 0x35, 0x17, 0xbf, 0xf9, 0x3f,
	0xb7, 0x9a, 0x9c, 0x95, 0xa7, 0x27, 0xc7, 0x5c, 0x27, 0xd2, 0xa3, 0x0a, 0x3d, 0x39, 0xe6, 0xca,
	0x5c, 0xf4, 0x9f, 0x36, 0x57, 0xee, 0x55, 0xff, 0xc2, 0x5c, 0xe2, 0x5a, 0xf8, 0x84, 0xb9, 0x32,
	0xd7, 0xef, 0x27, 0xcc, 0x95, 0xbd, 0x79, 0x9e, 0x57, 0x13, 0xaf, 0x56, 0xcd, 0x9a, 0x2b, 0x75,
	0xc7, 0xba, 0x5c, 0xcd, 0xf4, 0x75, 0xe4, 0x92, 0x9e, 0xac, 0xb9, 0x4e, 0xa6, 0xe7, 0xe7, 0xc5,
	0xe5, 0xee, 0xf1, 0xfd, 0xbb, 0x72, 0x50, 0xec, 0x79, 0x73, 0xb6, 0x1c, 0x14, 0x7b, 0xdf, 0xfb,
	0xdb, 0x18, 0x51, 0xb6, 0xa0, 0x2c, 0xdf, 0x89, 0xdb, 0xaf, 0xa0, 0x37, 0xfa, 0x5f, 0xa3, 0x9b,
	0xd4, 0xd7, 0x3c, 0xb9, 0xbe, 0x66, 0x9e, 0x3e, 0x1d, 0x6a, 0xe9, 0x4b, 0x57, 0x95, 0x5b, 0x03,
	0xaf, 0x98, 0x65, 0xea, 0x6f, 0x0f, 0xbe, 0xb6, 0x95, 0x67, 0xe1, 0xc1, 0x85, 0xdc, 0x8b, 0x07,
	0x95, 0x77, 0x86, 0xbb, 0x27, 0x95, 0x65, 0x76, 0x7f, 0xc8, 0x4b, 0x0c, 0xa3, 0x4a, 0xa5, 0xef,
	0x21, 0x93, 0x2b, 0xd5, 0xfb, 0x42, 0x42, 0xb9, 0x52, 0x7d, 0x6e, 0xef, 0x6b, 0x8c, 0x28, 0x3e,
	0x5c, 0xcc, 0xbf, 0xea, 0x4c, 0xb9, 0x3f, 0xe4, 0x9d, 0x78, 0x2c, 0xbb, 0x77, 0x87, 0xbd, 0x38,
	0x2d, 0x1e, 0xc1, 0x93, 0xd7, 0x50, 0x29, 0x37, 0x07, 0x5d, 0x7f, 0x96, 0x1e, 0xc1, 0x7b, 0x5e,
	0x4c, 0xc6, 0x5b, 0x2a, 0xf7, 0x9a, 0x2b, 0xe5, 0x9d, 0xe1, 0x2e, 0xf7, 0x4a, 0xb5, 0xd4, 0xa0,
	0x0b, 0xb7, 0x1a, 0x23, 0xca, 0xa7, 0xd2, 0x65, 0x59, 0x2a, 0xd1, 0x4d, 0xe5, 0x46, 0xff, 0x2b,
	0xa5, 0x58, 0x0e, 0x8d, 0x01, 0x37, 0x35, 0x65, 0x6d, 0x25, 0x82, 0xc4, 0xcd, 0x41, 0x97, 0x28,
	0xf5, 0xb2, 0x55, 0xe6, 0x7a, 0xa3, 0x94, 0x7e, 0x11, 0x6b, 0x6f, 0x0e, 0xba, 0x50, 0xa8, 0x97,
	0xfe, 0xbc, 0x98, 0xfb, 0xe3, 0xe8, 0xa4, 0x29, 0xf9, 0x1a, 0x1a, 0xe5, 0xee, 0x30, 0x97, 0xee,
	0xb0, 0x7c, 0xee, 0x0d, 0x75, 0x9d, 0x4d, 0x7e, 0x5e, 0xa2, 0x3e, 0x77, 0x87, 0xb9, 0x74, 0xa6,
	0x5f, 0x5e, 0x79, 0xf5, 0xda, 0x03, 0x25, 0x7b, 0x6b, 0x88, 0x72, 0x67, 0x88, 0xfb, 0x51, 0x58,
	0x4e, 0x77, 0x87, 0xb9, 0x7b, 0x24, 0x1c, 0x08, 0x67, 0xa2, 0x39, 0xe2, 0x86, 0x73, 0xe4, 0x1e,
	0x10, 0x65, 0xbe, 0xf7, 0xa9, 0x5c, 0x4c, 0xf9, 0xb5, 0x3e, 0xa7, 0x6c, 0x71, 0x9d, 0x9b, 0x50,
	0x0a, 0x0f, 0x46, 0x4a, 0x8d, 0x85, 0xd9, 0xa3, 0xb3, 0xe4, 0xb1, 0x30, 0xe7, 0xf8, 0xa5, 0xc6,
	0x88, 0xf2, 0x22, 0x3e, 0x82, 0x44, 0xb4, 0xee, 0xd5, 0xbc, 0x73, 0x3a, 0xf2, 0x14, 0xe6, 0x1c,
	0xfb, 0x91, 0x54, 0x28, 0x5c, 0xfe, 0x8c, 0x0a, 0x7f, 0x14, 0x2b, 0x14, 0x3e, 0xd1, 0x18, 0x70,
	0x38, 0x47, 0x76, 0xbe, 0x93, 0x7f, 0x3c, 0x07, 0x47, 0x2a, 0xd2, 0x61, 0x0d, 0xca, 0xf5, 0x7e,
	0xa7, 0x5f, 0xa4, 0x90, 0x4a, 0xfe, 0xc1, 0x10, 0x92, 0x05, 0x68, 0x4f, 0x93, 0xd2, 0xbe, 0x16,
	0xa0, 0xbd, 0x4c, 0x4a, 0x7b, 0x9a, 0xf4, 0x84, 0x0a, 0x7f, 0x14, 0x2b, 0xec, 0x61, 0x52, 0x3a,
	0x84, 0x49, 0x69, 0x7f, 0x93, 0xd2, 0x7c, 0x93, 0xd2, 0x41, 0x26, 0xa5, 0x39, 0x26, 0xdd, 0x08,
	0xbf, 0xc2, 0x11, 0x06, 0x9d, 0xcb, 0x7e, 0xb9, 0x12, 0xe9, 0xbb, 0xd2, 0xeb, 0xab, 0x96, 0x94,
	0x2a, 0x61, 0xca, 0x33, 0xa8, 0x7a, 0x15, 0xaa, 0x12, 0x46, 0x5c, 0xe8, 0xfb, 0x0d, 0x4a, 0x0a,
	0x0e, 0xf5, 0xf8, 0x0a, 0x05, 0x3b, 0xf8, 0x74, 0xf4, 0x01, 0x82, 0x32, 0xdf, 0xfb, 0x0b, 0x8e,
	0x54, 0xb8, 0xc8, 0xfb, 0xcc, 0x21, 0xaa, 0xaf, 0xd1, 0xc3, 0x74, 0x46, 0x9f, 0xfa, 0x1a, 0xf9,
	0xa6, 0x33, 0x7a, 0x98, 0xee, 0x44, 0xaa, 0x5e, 0x85, 0xaa, 0x72, 0x4d, 0x67, 0x0c, 0x34, 0x9d,
	0xd1, 0xcf, 0x74, 0x46, 0x9e, 0xe9, 0x8c, 0xfe, 0xa6, 0xcb, 0xeb, 0xc8, 0x7f, 0x3c, 0xda, 0x3d,
	0x26, 0xb6, 0x70, 0x1d, 0xca, 0x08, 0xae, 0xf7, 0xfe, 0xc8, 0xb9, 0x1b, 0xfd, 0xb7, 0x26, 0x86,
	0x26, 0xa8, 0x26, 0xf7, 0x2f, 0x29, 0xd7, 0xfb, 0x6d, 0x7c, 0x4a, 0xcf, 0x93, 0x72, 0x37, 0x39,
	0x61, 0xdf, 0xae, 0xa5, 0xb7, 0xff, 0xc8, 0x80, 0xa6, 0xc7, 0x7e, 0x23, 0x19, 0xd0, 0xf4, 0xda,
	0x25, 0xc4, 0xfb, 0xb6, 0xf4, 0xc2, 0x5b, 0x2e, 0x70, 0xee, 0x9b, 0x73, 0xb9, 0xc0, 0xf9, 0xbb,
	0x36, 0x10, 0x7e, 0xcd, 0xc8, 0x6f, 0x5b, 0x98, 0xde, 0x85, 0xbe, 0x2f, 0x62, 0x52, 0x16, 0xee,
	0xf1, 0xb2, 0xa9, 0x31, 0xa2, 0x1c, 0xf0, 0x9d, 0x50, 0x6b, 0x01, 0xe1, 0x6b, 0x3d, 0x7c, 0x2f,
	0x8a, 0x2f, 0x63, 0x8a, 0xbe, 0xdb, 0x8b, 0x64, 0x4c, 0xd1, 0x7f, 0xe7, 0x4c, 0x63, 0x64, 0xb1,
	0x02, 0x25, 0x69, 0x89, 0xe7, 0xc9, 0xc5, 0xff, 0xf0, 0xd3, 0x6b, 0x85, 0x3f, 0xf8, 0xe9, 0xb5,
	0xc2, 0x7f, 0xfb, 0xe9, 0xb5, 0xc2, 0x1f, 0x2b, 0xee, 0xeb, 0x36, 0x9e, 0x2f, 0xb2, 0x3b, 0x89,
	0x3f, 0x8f, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x17, 0xb5, 0x59, 0xa9, 0xc8, 0xb1, 0x00,
	0x00,
}
