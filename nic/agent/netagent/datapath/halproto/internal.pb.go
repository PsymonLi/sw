// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/internal.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProgramAddressReq struct {
	// Handle. E.g.: 'iris', 'p4plus'.
	Handle string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
	// Program name to resolve
	ProgName string `protobuf:"bytes,2,opt,name=prog_name,json=progName" json:"prog_name,omitempty"`
	// If resolve_label is false, returns the base address of the program.
	// Otherwise returns the PC offset (14 bits) of the program.
	ResolveLabel bool `protobuf:"varint,3,opt,name=resolve_label,json=resolveLabel" json:"resolve_label,omitempty"`
	// Label name to resolve
	Label string `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
}

func (m *ProgramAddressReq) Reset()                    { *m = ProgramAddressReq{} }
func (m *ProgramAddressReq) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressReq) ProtoMessage()               {}
func (*ProgramAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *ProgramAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

func (m *ProgramAddressReq) GetProgName() string {
	if m != nil {
		return m.ProgName
	}
	return ""
}

func (m *ProgramAddressReq) GetResolveLabel() bool {
	if m != nil {
		return m.ResolveLabel
	}
	return false
}

func (m *ProgramAddressReq) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ProgramAddressResp struct {
	Addr int64 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *ProgramAddressResp) Reset()                    { *m = ProgramAddressResp{} }
func (m *ProgramAddressResp) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResp) ProtoMessage()               {}
func (*ProgramAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *ProgramAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

type GetProgramAddressRequestMsg struct {
	Reqs []*ProgramAddressReq `protobuf:"bytes,1,rep,name=reqs" json:"reqs,omitempty"`
}

func (m *GetProgramAddressRequestMsg) Reset()                    { *m = GetProgramAddressRequestMsg{} }
func (m *GetProgramAddressRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GetProgramAddressRequestMsg) ProtoMessage()               {}
func (*GetProgramAddressRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *GetProgramAddressRequestMsg) GetReqs() []*ProgramAddressReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type ProgramAddressResponseMsg struct {
	Resps []*ProgramAddressResp `protobuf:"bytes,1,rep,name=resps" json:"resps,omitempty"`
}

func (m *ProgramAddressResponseMsg) Reset()                    { *m = ProgramAddressResponseMsg{} }
func (m *ProgramAddressResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ProgramAddressResponseMsg) ProtoMessage()               {}
func (*ProgramAddressResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *ProgramAddressResponseMsg) GetResps() []*ProgramAddressResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

type HbmAddressReq struct {
	// handle that specifies region in config (json) file
	Handle string `protobuf:"bytes,1,opt,name=handle" json:"handle,omitempty"`
}

func (m *HbmAddressReq) Reset()                    { *m = HbmAddressReq{} }
func (m *HbmAddressReq) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressReq) ProtoMessage()               {}
func (*HbmAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *HbmAddressReq) GetHandle() string {
	if m != nil {
		return m.Handle
	}
	return ""
}

type HbmAddressResp struct {
	Addr int64  `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Size uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *HbmAddressResp) Reset()                    { *m = HbmAddressResp{} }
func (m *HbmAddressResp) String() string            { return proto.CompactTextString(m) }
func (*HbmAddressResp) ProtoMessage()               {}
func (*HbmAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *HbmAddressResp) GetAddr() int64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *HbmAddressResp) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type AllocHbmAddressRequestMsg struct {
	Reqs []*HbmAddressReq `protobuf:"bytes,1,rep,name=reqs" json:"reqs,omitempty"`
}

func (m *AllocHbmAddressRequestMsg) Reset()                    { *m = AllocHbmAddressRequestMsg{} }
func (m *AllocHbmAddressRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*AllocHbmAddressRequestMsg) ProtoMessage()               {}
func (*AllocHbmAddressRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *AllocHbmAddressRequestMsg) GetReqs() []*HbmAddressReq {
	if m != nil {
		return m.Reqs
	}
	return nil
}

type AllocHbmAddressResponseMsg struct {
	Resps []*HbmAddressResp `protobuf:"bytes,1,rep,name=resps" json:"resps,omitempty"`
}

func (m *AllocHbmAddressResponseMsg) Reset()                    { *m = AllocHbmAddressResponseMsg{} }
func (m *AllocHbmAddressResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*AllocHbmAddressResponseMsg) ProtoMessage()               {}
func (*AllocHbmAddressResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *AllocHbmAddressResponseMsg) GetResps() []*HbmAddressResp {
	if m != nil {
		return m.Resps
	}
	return nil
}

func init() {
	proto.RegisterType((*ProgramAddressReq)(nil), "internal.ProgramAddressReq")
	proto.RegisterType((*ProgramAddressResp)(nil), "internal.ProgramAddressResp")
	proto.RegisterType((*GetProgramAddressRequestMsg)(nil), "internal.GetProgramAddressRequestMsg")
	proto.RegisterType((*ProgramAddressResponseMsg)(nil), "internal.ProgramAddressResponseMsg")
	proto.RegisterType((*HbmAddressReq)(nil), "internal.HbmAddressReq")
	proto.RegisterType((*HbmAddressResp)(nil), "internal.HbmAddressResp")
	proto.RegisterType((*AllocHbmAddressRequestMsg)(nil), "internal.AllocHbmAddressRequestMsg")
	proto.RegisterType((*AllocHbmAddressResponseMsg)(nil), "internal.AllocHbmAddressResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Internal service

type InternalClient interface {
	// Program resolution related APIs
	GetProgramAddress(ctx context.Context, in *GetProgramAddressRequestMsg, opts ...grpc.CallOption) (*ProgramAddressResponseMsg, error)
	// Program resolution related APIs
	AllocHbmAddress(ctx context.Context, in *AllocHbmAddressRequestMsg, opts ...grpc.CallOption) (*AllocHbmAddressResponseMsg, error)
}

type internalClient struct {
	cc *grpc.ClientConn
}

func NewInternalClient(cc *grpc.ClientConn) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) GetProgramAddress(ctx context.Context, in *GetProgramAddressRequestMsg, opts ...grpc.CallOption) (*ProgramAddressResponseMsg, error) {
	out := new(ProgramAddressResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/GetProgramAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) AllocHbmAddress(ctx context.Context, in *AllocHbmAddressRequestMsg, opts ...grpc.CallOption) (*AllocHbmAddressResponseMsg, error) {
	out := new(AllocHbmAddressResponseMsg)
	err := grpc.Invoke(ctx, "/internal.Internal/AllocHbmAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Internal service

type InternalServer interface {
	// Program resolution related APIs
	GetProgramAddress(context.Context, *GetProgramAddressRequestMsg) (*ProgramAddressResponseMsg, error)
	// Program resolution related APIs
	AllocHbmAddress(context.Context, *AllocHbmAddressRequestMsg) (*AllocHbmAddressResponseMsg, error)
}

func RegisterInternalServer(s *grpc.Server, srv InternalServer) {
	s.RegisterService(&_Internal_serviceDesc, srv)
}

func _Internal_GetProgramAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramAddressRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetProgramAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/GetProgramAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetProgramAddress(ctx, req.(*GetProgramAddressRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_AllocHbmAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocHbmAddressRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).AllocHbmAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.Internal/AllocHbmAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).AllocHbmAddress(ctx, req.(*AllocHbmAddressRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Internal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProgramAddress",
			Handler:    _Internal_GetProgramAddress_Handler,
		},
		{
			MethodName: "AllocHbmAddress",
			Handler:    _Internal_AllocHbmAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/internal.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/internal.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4b, 0x4f, 0xc2, 0x40,
	0x18, 0xb4, 0xf2, 0x48, 0xf9, 0x14, 0x0d, 0x1b, 0xa3, 0xe5, 0x71, 0x20, 0x8b, 0xc6, 0x26, 0x26,
	0x34, 0xc1, 0x8b, 0x57, 0xbc, 0x88, 0x09, 0xa2, 0xe9, 0xd1, 0x83, 0x64, 0xa1, 0x5f, 0x80, 0x64,
	0xe9, 0x96, 0xdd, 0xea, 0xc1, 0xab, 0xbf, 0xcf, 0xff, 0x64, 0xba, 0x2d, 0x8f, 0x52, 0x20, 0x9e,
	0xba, 0x3b, 0x3b, 0xdf, 0xec, 0xcc, 0x6c, 0x0a, 0x0d, 0x7f, 0x36, 0x76, 0x02, 0x29, 0x42, 0xe1,
	0x4c, 0x19, 0x77, 0x66, 0x7e, 0x88, 0xd2, 0x67, 0xbc, 0xad, 0x21, 0x62, 0x2e, 0xf7, 0xf4, 0xc7,
	0x80, 0xca, 0x9b, 0x14, 0x13, 0xc9, 0xe6, 0x5d, 0xcf, 0x93, 0xa8, 0x94, 0x8b, 0x0b, 0x72, 0x09,
	0xc5, 0x29, 0xf3, 0x3d, 0x8e, 0x96, 0xd1, 0x34, 0xec, 0x92, 0x9b, 0xec, 0x48, 0x1d, 0x4a, 0x81,
	0x14, 0x93, 0xa1, 0xcf, 0xe6, 0x68, 0x1d, 0xeb, 0x23, 0x33, 0x02, 0x06, 0x6c, 0x8e, 0xa4, 0x05,
	0x65, 0x89, 0x4a, 0xf0, 0x2f, 0x1c, 0x72, 0x36, 0x42, 0x6e, 0xe5, 0x9a, 0x86, 0x6d, 0xba, 0xa7,
	0x09, 0xd8, 0x8f, 0x30, 0x72, 0x01, 0x85, 0xf8, 0x30, 0xaf, 0xa7, 0xe3, 0x0d, 0xb5, 0x81, 0x6c,
	0x9b, 0x50, 0x01, 0x21, 0x90, 0x67, 0x9e, 0x27, 0xb5, 0x87, 0x9c, 0xab, 0xd7, 0x74, 0x00, 0xf5,
	0x27, 0x0c, 0x33, 0x8e, 0x3f, 0x51, 0x85, 0x2f, 0x6a, 0x42, 0x1c, 0xc8, 0x4b, 0x5c, 0x28, 0xcb,
	0x68, 0xe6, 0xec, 0x93, 0x4e, 0xbd, 0xbd, 0xca, 0x9d, 0x99, 0x70, 0x35, 0x91, 0xbe, 0x42, 0x35,
	0x7b, 0xb3, 0xf0, 0x15, 0x46, 0x6a, 0x1d, 0x28, 0x48, 0x54, 0xc1, 0x52, 0xae, 0xb1, 0x5f, 0x4e,
	0x05, 0x6e, 0x4c, 0xa5, 0xb7, 0x50, 0xee, 0x8d, 0xfe, 0xd1, 0x25, 0x7d, 0x80, 0xb3, 0x4d, 0xe2,
	0xee, 0xbc, 0x11, 0xa6, 0x66, 0xdf, 0x71, 0xd9, 0x65, 0x57, 0xaf, 0x69, 0x0f, 0xaa, 0x5d, 0xce,
	0xc5, 0x38, 0x75, 0xcf, 0xb2, 0x81, 0xbb, 0x54, 0x03, 0x57, 0x6b, 0xcb, 0x29, 0x76, 0x92, 0xbe,
	0x0f, 0xb5, 0x8c, 0xd2, 0x3a, 0x7e, 0x3b, 0x1d, 0xdf, 0xda, 0xad, 0xb5, 0x8a, 0xde, 0xf9, 0x35,
	0xc0, 0x7c, 0x4e, 0x28, 0x84, 0x41, 0x25, 0xf3, 0x50, 0xe4, 0x66, 0x2d, 0x71, 0xe0, 0x15, 0x6b,
	0xad, 0x43, 0x45, 0x27, 0xee, 0xe8, 0x11, 0xf9, 0x80, 0xf3, 0x2d, 0xf7, 0x64, 0x63, 0x72, 0x6f,
	0x45, 0xb5, 0xeb, 0x03, 0xa4, 0x0d, 0xfd, 0x47, 0x78, 0x37, 0xa7, 0x8c, 0xeb, 0x3f, 0x66, 0x54,
	0xd4, 0x9f, 0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xff, 0xc2, 0xaa, 0x58, 0x03, 0x00,
	0x00,
}
