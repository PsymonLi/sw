// Code generated by MockGen. DO NOT EDIT.
// Source: ipsec.pb.go

package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisKey_KeyInfo is a mock of isKey_KeyInfo interface
type MockisKey_KeyInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisKey_KeyInfoMockRecorder
}

// MockisKey_KeyInfoMockRecorder is the mock recorder for MockisKey_KeyInfo
type MockisKey_KeyInfoMockRecorder struct {
	mock *MockisKey_KeyInfo
}

// NewMockisKey_KeyInfo creates a new mock instance
func NewMockisKey_KeyInfo(ctrl *gomock.Controller) *MockisKey_KeyInfo {
	mock := &MockisKey_KeyInfo{ctrl: ctrl}
	mock.recorder = &MockisKey_KeyInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisKey_KeyInfo) EXPECT() *MockisKey_KeyInfoMockRecorder {
	return _m.recorder
}

// isKey_KeyInfo mocks base method
func (_m *MockisKey_KeyInfo) isKey_KeyInfo() {
	_m.ctrl.Call(_m, "isKey_KeyInfo")
}

// isKey_KeyInfo indicates an expected call of isKey_KeyInfo
func (_mr *MockisKey_KeyInfoMockRecorder) isKey_KeyInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isKey_KeyInfo", reflect.TypeOf((*MockisKey_KeyInfo)(nil).isKey_KeyInfo))
}

// MarshalTo mocks base method
func (_m *MockisKey_KeyInfo) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisKey_KeyInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisKey_KeyInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisKey_KeyInfo) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisKey_KeyInfoMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisKey_KeyInfo)(nil).Size))
}

// MockisIpsecSAAction_SaHandle is a mock of isIpsecSAAction_SaHandle interface
type MockisIpsecSAAction_SaHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisIpsecSAAction_SaHandleMockRecorder
}

// MockisIpsecSAAction_SaHandleMockRecorder is the mock recorder for MockisIpsecSAAction_SaHandle
type MockisIpsecSAAction_SaHandleMockRecorder struct {
	mock *MockisIpsecSAAction_SaHandle
}

// NewMockisIpsecSAAction_SaHandle creates a new mock instance
func NewMockisIpsecSAAction_SaHandle(ctrl *gomock.Controller) *MockisIpsecSAAction_SaHandle {
	mock := &MockisIpsecSAAction_SaHandle{ctrl: ctrl}
	mock.recorder = &MockisIpsecSAAction_SaHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisIpsecSAAction_SaHandle) EXPECT() *MockisIpsecSAAction_SaHandleMockRecorder {
	return _m.recorder
}

// isIpsecSAAction_SaHandle mocks base method
func (_m *MockisIpsecSAAction_SaHandle) isIpsecSAAction_SaHandle() {
	_m.ctrl.Call(_m, "isIpsecSAAction_SaHandle")
}

// isIpsecSAAction_SaHandle indicates an expected call of isIpsecSAAction_SaHandle
func (_mr *MockisIpsecSAAction_SaHandleMockRecorder) isIpsecSAAction_SaHandle() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isIpsecSAAction_SaHandle", reflect.TypeOf((*MockisIpsecSAAction_SaHandle)(nil).isIpsecSAAction_SaHandle))
}

// MarshalTo mocks base method
func (_m *MockisIpsecSAAction_SaHandle) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisIpsecSAAction_SaHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisIpsecSAAction_SaHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisIpsecSAAction_SaHandle) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisIpsecSAAction_SaHandleMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisIpsecSAAction_SaHandle)(nil).Size))
}

// MockIpsecClient is a mock of IpsecClient interface
type MockIpsecClient struct {
	ctrl     *gomock.Controller
	recorder *MockIpsecClientMockRecorder
}

// MockIpsecClientMockRecorder is the mock recorder for MockIpsecClient
type MockIpsecClientMockRecorder struct {
	mock *MockIpsecClient
}

// NewMockIpsecClient creates a new mock instance
func NewMockIpsecClient(ctrl *gomock.Controller) *MockIpsecClient {
	mock := &MockIpsecClient{ctrl: ctrl}
	mock.recorder = &MockIpsecClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIpsecClient) EXPECT() *MockIpsecClientMockRecorder {
	return _m.recorder
}

// IpsecRuleCreate mocks base method
func (_m *MockIpsecClient) IpsecRuleCreate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecRuleCreate", _s...)
	ret0, _ := ret[0].(*IpsecRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecRuleCreate indicates an expected call of IpsecRuleCreate
func (_mr *MockIpsecClientMockRecorder) IpsecRuleCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecRuleCreate", reflect.TypeOf((*MockIpsecClient)(nil).IpsecRuleCreate), _s...)
}

// IpsecRuleUpdate mocks base method
func (_m *MockIpsecClient) IpsecRuleUpdate(ctx context.Context, in *IpsecRuleRequestMsg, opts ...grpc.CallOption) (*IpsecRuleResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecRuleUpdate", _s...)
	ret0, _ := ret[0].(*IpsecRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecRuleUpdate indicates an expected call of IpsecRuleUpdate
func (_mr *MockIpsecClientMockRecorder) IpsecRuleUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecRuleUpdate", reflect.TypeOf((*MockIpsecClient)(nil).IpsecRuleUpdate), _s...)
}

// IpsecRuleDelete mocks base method
func (_m *MockIpsecClient) IpsecRuleDelete(ctx context.Context, in *IpsecRuleDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecRuleDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecRuleDelete", _s...)
	ret0, _ := ret[0].(*IpsecRuleDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecRuleDelete indicates an expected call of IpsecRuleDelete
func (_mr *MockIpsecClientMockRecorder) IpsecRuleDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecRuleDelete", reflect.TypeOf((*MockIpsecClient)(nil).IpsecRuleDelete), _s...)
}

// IpsecRuleGet mocks base method
func (_m *MockIpsecClient) IpsecRuleGet(ctx context.Context, in *IpsecRuleGetRequestMsg, opts ...grpc.CallOption) (*IpsecRuleGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecRuleGet", _s...)
	ret0, _ := ret[0].(*IpsecRuleGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecRuleGet indicates an expected call of IpsecRuleGet
func (_mr *MockIpsecClientMockRecorder) IpsecRuleGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecRuleGet", reflect.TypeOf((*MockIpsecClient)(nil).IpsecRuleGet), _s...)
}

// IpsecSAEncryptCreate mocks base method
func (_m *MockIpsecClient) IpsecSAEncryptCreate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecSAEncryptCreate", _s...)
	ret0, _ := ret[0].(*IpsecSAEncryptResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSAEncryptCreate indicates an expected call of IpsecSAEncryptCreate
func (_mr *MockIpsecClientMockRecorder) IpsecSAEncryptCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSAEncryptCreate", reflect.TypeOf((*MockIpsecClient)(nil).IpsecSAEncryptCreate), _s...)
}

// IpsecSAEncryptUpdate mocks base method
func (_m *MockIpsecClient) IpsecSAEncryptUpdate(ctx context.Context, in *IpsecSAEncryptRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecSAEncryptUpdate", _s...)
	ret0, _ := ret[0].(*IpsecSAEncryptResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSAEncryptUpdate indicates an expected call of IpsecSAEncryptUpdate
func (_mr *MockIpsecClientMockRecorder) IpsecSAEncryptUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSAEncryptUpdate", reflect.TypeOf((*MockIpsecClient)(nil).IpsecSAEncryptUpdate), _s...)
}

// IpsecSAEncryptDelete mocks base method
func (_m *MockIpsecClient) IpsecSAEncryptDelete(ctx context.Context, in *IpsecSAEncryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecSAEncryptDelete", _s...)
	ret0, _ := ret[0].(*IpsecSAEncryptDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSAEncryptDelete indicates an expected call of IpsecSAEncryptDelete
func (_mr *MockIpsecClientMockRecorder) IpsecSAEncryptDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSAEncryptDelete", reflect.TypeOf((*MockIpsecClient)(nil).IpsecSAEncryptDelete), _s...)
}

// IpsecSAEncryptGet mocks base method
func (_m *MockIpsecClient) IpsecSAEncryptGet(ctx context.Context, in *IpsecSAEncryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSAEncryptGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecSAEncryptGet", _s...)
	ret0, _ := ret[0].(*IpsecSAEncryptGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSAEncryptGet indicates an expected call of IpsecSAEncryptGet
func (_mr *MockIpsecClientMockRecorder) IpsecSAEncryptGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSAEncryptGet", reflect.TypeOf((*MockIpsecClient)(nil).IpsecSAEncryptGet), _s...)
}

// IpsecSADecryptCreate mocks base method
func (_m *MockIpsecClient) IpsecSADecryptCreate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecSADecryptCreate", _s...)
	ret0, _ := ret[0].(*IpsecSADecryptResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSADecryptCreate indicates an expected call of IpsecSADecryptCreate
func (_mr *MockIpsecClientMockRecorder) IpsecSADecryptCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSADecryptCreate", reflect.TypeOf((*MockIpsecClient)(nil).IpsecSADecryptCreate), _s...)
}

// IpsecSADecryptUpdate mocks base method
func (_m *MockIpsecClient) IpsecSADecryptUpdate(ctx context.Context, in *IpsecSADecryptRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecSADecryptUpdate", _s...)
	ret0, _ := ret[0].(*IpsecSADecryptResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSADecryptUpdate indicates an expected call of IpsecSADecryptUpdate
func (_mr *MockIpsecClientMockRecorder) IpsecSADecryptUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSADecryptUpdate", reflect.TypeOf((*MockIpsecClient)(nil).IpsecSADecryptUpdate), _s...)
}

// IpsecSADecryptDelete mocks base method
func (_m *MockIpsecClient) IpsecSADecryptDelete(ctx context.Context, in *IpsecSADecryptDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecSADecryptDelete", _s...)
	ret0, _ := ret[0].(*IpsecSADecryptDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSADecryptDelete indicates an expected call of IpsecSADecryptDelete
func (_mr *MockIpsecClientMockRecorder) IpsecSADecryptDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSADecryptDelete", reflect.TypeOf((*MockIpsecClient)(nil).IpsecSADecryptDelete), _s...)
}

// IpsecSADecryptGet mocks base method
func (_m *MockIpsecClient) IpsecSADecryptGet(ctx context.Context, in *IpsecSADecryptGetRequestMsg, opts ...grpc.CallOption) (*IpsecSADecryptGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "IpsecSADecryptGet", _s...)
	ret0, _ := ret[0].(*IpsecSADecryptGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSADecryptGet indicates an expected call of IpsecSADecryptGet
func (_mr *MockIpsecClientMockRecorder) IpsecSADecryptGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSADecryptGet", reflect.TypeOf((*MockIpsecClient)(nil).IpsecSADecryptGet), _s...)
}

// MockIpsecServer is a mock of IpsecServer interface
type MockIpsecServer struct {
	ctrl     *gomock.Controller
	recorder *MockIpsecServerMockRecorder
}

// MockIpsecServerMockRecorder is the mock recorder for MockIpsecServer
type MockIpsecServerMockRecorder struct {
	mock *MockIpsecServer
}

// NewMockIpsecServer creates a new mock instance
func NewMockIpsecServer(ctrl *gomock.Controller) *MockIpsecServer {
	mock := &MockIpsecServer{ctrl: ctrl}
	mock.recorder = &MockIpsecServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIpsecServer) EXPECT() *MockIpsecServerMockRecorder {
	return _m.recorder
}

// IpsecRuleCreate mocks base method
func (_m *MockIpsecServer) IpsecRuleCreate(_param0 context.Context, _param1 *IpsecRuleRequestMsg) (*IpsecRuleResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecRuleCreate", _param0, _param1)
	ret0, _ := ret[0].(*IpsecRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecRuleCreate indicates an expected call of IpsecRuleCreate
func (_mr *MockIpsecServerMockRecorder) IpsecRuleCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecRuleCreate", reflect.TypeOf((*MockIpsecServer)(nil).IpsecRuleCreate), arg0, arg1)
}

// IpsecRuleUpdate mocks base method
func (_m *MockIpsecServer) IpsecRuleUpdate(_param0 context.Context, _param1 *IpsecRuleRequestMsg) (*IpsecRuleResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecRuleUpdate", _param0, _param1)
	ret0, _ := ret[0].(*IpsecRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecRuleUpdate indicates an expected call of IpsecRuleUpdate
func (_mr *MockIpsecServerMockRecorder) IpsecRuleUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecRuleUpdate", reflect.TypeOf((*MockIpsecServer)(nil).IpsecRuleUpdate), arg0, arg1)
}

// IpsecRuleDelete mocks base method
func (_m *MockIpsecServer) IpsecRuleDelete(_param0 context.Context, _param1 *IpsecRuleDeleteRequestMsg) (*IpsecRuleDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecRuleDelete", _param0, _param1)
	ret0, _ := ret[0].(*IpsecRuleDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecRuleDelete indicates an expected call of IpsecRuleDelete
func (_mr *MockIpsecServerMockRecorder) IpsecRuleDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecRuleDelete", reflect.TypeOf((*MockIpsecServer)(nil).IpsecRuleDelete), arg0, arg1)
}

// IpsecRuleGet mocks base method
func (_m *MockIpsecServer) IpsecRuleGet(_param0 context.Context, _param1 *IpsecRuleGetRequestMsg) (*IpsecRuleGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecRuleGet", _param0, _param1)
	ret0, _ := ret[0].(*IpsecRuleGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecRuleGet indicates an expected call of IpsecRuleGet
func (_mr *MockIpsecServerMockRecorder) IpsecRuleGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecRuleGet", reflect.TypeOf((*MockIpsecServer)(nil).IpsecRuleGet), arg0, arg1)
}

// IpsecSAEncryptCreate mocks base method
func (_m *MockIpsecServer) IpsecSAEncryptCreate(_param0 context.Context, _param1 *IpsecSAEncryptRequestMsg) (*IpsecSAEncryptResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecSAEncryptCreate", _param0, _param1)
	ret0, _ := ret[0].(*IpsecSAEncryptResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSAEncryptCreate indicates an expected call of IpsecSAEncryptCreate
func (_mr *MockIpsecServerMockRecorder) IpsecSAEncryptCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSAEncryptCreate", reflect.TypeOf((*MockIpsecServer)(nil).IpsecSAEncryptCreate), arg0, arg1)
}

// IpsecSAEncryptUpdate mocks base method
func (_m *MockIpsecServer) IpsecSAEncryptUpdate(_param0 context.Context, _param1 *IpsecSAEncryptRequestMsg) (*IpsecSAEncryptResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecSAEncryptUpdate", _param0, _param1)
	ret0, _ := ret[0].(*IpsecSAEncryptResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSAEncryptUpdate indicates an expected call of IpsecSAEncryptUpdate
func (_mr *MockIpsecServerMockRecorder) IpsecSAEncryptUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSAEncryptUpdate", reflect.TypeOf((*MockIpsecServer)(nil).IpsecSAEncryptUpdate), arg0, arg1)
}

// IpsecSAEncryptDelete mocks base method
func (_m *MockIpsecServer) IpsecSAEncryptDelete(_param0 context.Context, _param1 *IpsecSAEncryptDeleteRequestMsg) (*IpsecSAEncryptDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecSAEncryptDelete", _param0, _param1)
	ret0, _ := ret[0].(*IpsecSAEncryptDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSAEncryptDelete indicates an expected call of IpsecSAEncryptDelete
func (_mr *MockIpsecServerMockRecorder) IpsecSAEncryptDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSAEncryptDelete", reflect.TypeOf((*MockIpsecServer)(nil).IpsecSAEncryptDelete), arg0, arg1)
}

// IpsecSAEncryptGet mocks base method
func (_m *MockIpsecServer) IpsecSAEncryptGet(_param0 context.Context, _param1 *IpsecSAEncryptGetRequestMsg) (*IpsecSAEncryptGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecSAEncryptGet", _param0, _param1)
	ret0, _ := ret[0].(*IpsecSAEncryptGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSAEncryptGet indicates an expected call of IpsecSAEncryptGet
func (_mr *MockIpsecServerMockRecorder) IpsecSAEncryptGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSAEncryptGet", reflect.TypeOf((*MockIpsecServer)(nil).IpsecSAEncryptGet), arg0, arg1)
}

// IpsecSADecryptCreate mocks base method
func (_m *MockIpsecServer) IpsecSADecryptCreate(_param0 context.Context, _param1 *IpsecSADecryptRequestMsg) (*IpsecSADecryptResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecSADecryptCreate", _param0, _param1)
	ret0, _ := ret[0].(*IpsecSADecryptResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSADecryptCreate indicates an expected call of IpsecSADecryptCreate
func (_mr *MockIpsecServerMockRecorder) IpsecSADecryptCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSADecryptCreate", reflect.TypeOf((*MockIpsecServer)(nil).IpsecSADecryptCreate), arg0, arg1)
}

// IpsecSADecryptUpdate mocks base method
func (_m *MockIpsecServer) IpsecSADecryptUpdate(_param0 context.Context, _param1 *IpsecSADecryptRequestMsg) (*IpsecSADecryptResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecSADecryptUpdate", _param0, _param1)
	ret0, _ := ret[0].(*IpsecSADecryptResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSADecryptUpdate indicates an expected call of IpsecSADecryptUpdate
func (_mr *MockIpsecServerMockRecorder) IpsecSADecryptUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSADecryptUpdate", reflect.TypeOf((*MockIpsecServer)(nil).IpsecSADecryptUpdate), arg0, arg1)
}

// IpsecSADecryptDelete mocks base method
func (_m *MockIpsecServer) IpsecSADecryptDelete(_param0 context.Context, _param1 *IpsecSADecryptDeleteRequestMsg) (*IpsecSADecryptDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecSADecryptDelete", _param0, _param1)
	ret0, _ := ret[0].(*IpsecSADecryptDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSADecryptDelete indicates an expected call of IpsecSADecryptDelete
func (_mr *MockIpsecServerMockRecorder) IpsecSADecryptDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSADecryptDelete", reflect.TypeOf((*MockIpsecServer)(nil).IpsecSADecryptDelete), arg0, arg1)
}

// IpsecSADecryptGet mocks base method
func (_m *MockIpsecServer) IpsecSADecryptGet(_param0 context.Context, _param1 *IpsecSADecryptGetRequestMsg) (*IpsecSADecryptGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "IpsecSADecryptGet", _param0, _param1)
	ret0, _ := ret[0].(*IpsecSADecryptGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecSADecryptGet indicates an expected call of IpsecSADecryptGet
func (_mr *MockIpsecServerMockRecorder) IpsecSADecryptGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IpsecSADecryptGet", reflect.TypeOf((*MockIpsecServer)(nil).IpsecSADecryptGet), arg0, arg1)
}
