// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ncsi.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/pensando/sw/nic/delphi/proto/delphi"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Vlan Filters
type VlanFilterRequest struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VlanId  uint32 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	Channel uint32 `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *VlanFilterRequest) Reset()                    { *m = VlanFilterRequest{} }
func (m *VlanFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*VlanFilterRequest) ProtoMessage()               {}
func (*VlanFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{0} }

func (m *VlanFilterRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VlanFilterRequest) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

func (m *VlanFilterRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type VlanFilterRequestMsg struct {
	Request []*VlanFilterRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *VlanFilterRequestMsg) Reset()                    { *m = VlanFilterRequestMsg{} }
func (m *VlanFilterRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*VlanFilterRequestMsg) ProtoMessage()               {}
func (*VlanFilterRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{1} }

func (m *VlanFilterRequestMsg) GetRequest() []*VlanFilterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type VlanFilterStatus struct {
}

func (m *VlanFilterStatus) Reset()                    { *m = VlanFilterStatus{} }
func (m *VlanFilterStatus) String() string            { return proto.CompactTextString(m) }
func (*VlanFilterStatus) ProtoMessage()               {}
func (*VlanFilterStatus) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{2} }

type VlanFilterResponse struct {
	ApiStatus ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *VlanFilterStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *VlanFilterResponse) Reset()                    { *m = VlanFilterResponse{} }
func (m *VlanFilterResponse) String() string            { return proto.CompactTextString(m) }
func (*VlanFilterResponse) ProtoMessage()               {}
func (*VlanFilterResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{3} }

func (m *VlanFilterResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VlanFilterResponse) GetStatus() *VlanFilterStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type VlanFilterResponseMsg struct {
	Response []*VlanFilterResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *VlanFilterResponseMsg) Reset()                    { *m = VlanFilterResponseMsg{} }
func (m *VlanFilterResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*VlanFilterResponseMsg) ProtoMessage()               {}
func (*VlanFilterResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{4} }

func (m *VlanFilterResponseMsg) GetResponse() []*VlanFilterResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type VlanFilterGetRequest struct {
	VlanId  uint32 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	Channel uint32 `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *VlanFilterGetRequest) Reset()                    { *m = VlanFilterGetRequest{} }
func (m *VlanFilterGetRequest) String() string            { return proto.CompactTextString(m) }
func (*VlanFilterGetRequest) ProtoMessage()               {}
func (*VlanFilterGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{5} }

func (m *VlanFilterGetRequest) GetVlanId() uint32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

func (m *VlanFilterGetRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type VlanFilterGetRequestMsg struct {
	Request []*VlanFilterGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *VlanFilterGetRequestMsg) Reset()                    { *m = VlanFilterGetRequestMsg{} }
func (m *VlanFilterGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*VlanFilterGetRequestMsg) ProtoMessage()               {}
func (*VlanFilterGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{6} }

func (m *VlanFilterGetRequestMsg) GetRequest() []*VlanFilterGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type VlanFilterGetResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Request   *VlanFilterRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *VlanFilterGetResponse) Reset()                    { *m = VlanFilterGetResponse{} }
func (m *VlanFilterGetResponse) String() string            { return proto.CompactTextString(m) }
func (*VlanFilterGetResponse) ProtoMessage()               {}
func (*VlanFilterGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{7} }

func (m *VlanFilterGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VlanFilterGetResponse) GetRequest() *VlanFilterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type VlanFilterGetResponseMsg struct {
	Response []*VlanFilterGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *VlanFilterGetResponseMsg) Reset()                    { *m = VlanFilterGetResponseMsg{} }
func (m *VlanFilterGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*VlanFilterGetResponseMsg) ProtoMessage()               {}
func (*VlanFilterGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{8} }

func (m *VlanFilterGetResponseMsg) GetResponse() []*VlanFilterGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Mac Filters
type MacFilterRequest struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MacAddr uint64 `protobuf:"varint,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	Channel uint32 `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *MacFilterRequest) Reset()                    { *m = MacFilterRequest{} }
func (m *MacFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*MacFilterRequest) ProtoMessage()               {}
func (*MacFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{9} }

func (m *MacFilterRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MacFilterRequest) GetMacAddr() uint64 {
	if m != nil {
		return m.MacAddr
	}
	return 0
}

func (m *MacFilterRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type MacFilterRequestMsg struct {
	Request []*MacFilterRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MacFilterRequestMsg) Reset()                    { *m = MacFilterRequestMsg{} }
func (m *MacFilterRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MacFilterRequestMsg) ProtoMessage()               {}
func (*MacFilterRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{10} }

func (m *MacFilterRequestMsg) GetRequest() []*MacFilterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MacFilterStatus struct {
}

func (m *MacFilterStatus) Reset()                    { *m = MacFilterStatus{} }
func (m *MacFilterStatus) String() string            { return proto.CompactTextString(m) }
func (*MacFilterStatus) ProtoMessage()               {}
func (*MacFilterStatus) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{11} }

type MacFilterResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *MacFilterStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *MacFilterResponse) Reset()                    { *m = MacFilterResponse{} }
func (m *MacFilterResponse) String() string            { return proto.CompactTextString(m) }
func (*MacFilterResponse) ProtoMessage()               {}
func (*MacFilterResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{12} }

func (m *MacFilterResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MacFilterResponse) GetStatus() *MacFilterStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type MacFilterResponseMsg struct {
	Response []*MacFilterResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MacFilterResponseMsg) Reset()                    { *m = MacFilterResponseMsg{} }
func (m *MacFilterResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MacFilterResponseMsg) ProtoMessage()               {}
func (*MacFilterResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{13} }

func (m *MacFilterResponseMsg) GetResponse() []*MacFilterResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MacFilterGetRequest struct {
	MacAddr uint64 `protobuf:"varint,1,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	Channel uint32 `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *MacFilterGetRequest) Reset()                    { *m = MacFilterGetRequest{} }
func (m *MacFilterGetRequest) String() string            { return proto.CompactTextString(m) }
func (*MacFilterGetRequest) ProtoMessage()               {}
func (*MacFilterGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{14} }

func (m *MacFilterGetRequest) GetMacAddr() uint64 {
	if m != nil {
		return m.MacAddr
	}
	return 0
}

func (m *MacFilterGetRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type MacFilterGetRequestMsg struct {
	Request []*MacFilterGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MacFilterGetRequestMsg) Reset()                    { *m = MacFilterGetRequestMsg{} }
func (m *MacFilterGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MacFilterGetRequestMsg) ProtoMessage()               {}
func (*MacFilterGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{15} }

func (m *MacFilterGetRequestMsg) GetRequest() []*MacFilterGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MacFilterGetResponse struct {
	ApiStatus ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Request   *MacFilterRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *MacFilterGetResponse) Reset()                    { *m = MacFilterGetResponse{} }
func (m *MacFilterGetResponse) String() string            { return proto.CompactTextString(m) }
func (*MacFilterGetResponse) ProtoMessage()               {}
func (*MacFilterGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{16} }

func (m *MacFilterGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MacFilterGetResponse) GetRequest() *MacFilterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MacFilterGetResponseMsg struct {
	Response []*MacFilterGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MacFilterGetResponseMsg) Reset()                    { *m = MacFilterGetResponseMsg{} }
func (m *MacFilterGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MacFilterGetResponseMsg) ProtoMessage()               {}
func (*MacFilterGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{17} }

func (m *MacFilterGetResponseMsg) GetResponse() []*MacFilterGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Bcast Filters
type BcastFilterRequest struct {
	Id               uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnableArp        bool   `protobuf:"varint,2,opt,name=enable_arp,json=enableArp,proto3" json:"enable_arp,omitempty"`
	EnableDhcpClient bool   `protobuf:"varint,3,opt,name=enable_dhcp_client,json=enableDhcpClient,proto3" json:"enable_dhcp_client,omitempty"`
	EnableDhcpServer bool   `protobuf:"varint,4,opt,name=enable_dhcp_server,json=enableDhcpServer,proto3" json:"enable_dhcp_server,omitempty"`
	EnableNetbios    bool   `protobuf:"varint,5,opt,name=enable_netbios,json=enableNetbios,proto3" json:"enable_netbios,omitempty"`
	Channel          uint32 `protobuf:"varint,6,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *BcastFilterRequest) Reset()                    { *m = BcastFilterRequest{} }
func (m *BcastFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterRequest) ProtoMessage()               {}
func (*BcastFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{18} }

func (m *BcastFilterRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BcastFilterRequest) GetEnableArp() bool {
	if m != nil {
		return m.EnableArp
	}
	return false
}

func (m *BcastFilterRequest) GetEnableDhcpClient() bool {
	if m != nil {
		return m.EnableDhcpClient
	}
	return false
}

func (m *BcastFilterRequest) GetEnableDhcpServer() bool {
	if m != nil {
		return m.EnableDhcpServer
	}
	return false
}

func (m *BcastFilterRequest) GetEnableNetbios() bool {
	if m != nil {
		return m.EnableNetbios
	}
	return false
}

func (m *BcastFilterRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type BcastFilterRequestMsg struct {
	Request []*BcastFilterRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BcastFilterRequestMsg) Reset()                    { *m = BcastFilterRequestMsg{} }
func (m *BcastFilterRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterRequestMsg) ProtoMessage()               {}
func (*BcastFilterRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{19} }

func (m *BcastFilterRequestMsg) GetRequest() []*BcastFilterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type BcastFilterDeleteRequest struct {
}

func (m *BcastFilterDeleteRequest) Reset()                    { *m = BcastFilterDeleteRequest{} }
func (m *BcastFilterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterDeleteRequest) ProtoMessage()               {}
func (*BcastFilterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{20} }

type BcastFilterDeleteRequestMsg struct {
	Request []*BcastFilterDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BcastFilterDeleteRequestMsg) Reset()                    { *m = BcastFilterDeleteRequestMsg{} }
func (m *BcastFilterDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterDeleteRequestMsg) ProtoMessage()               {}
func (*BcastFilterDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{21} }

func (m *BcastFilterDeleteRequestMsg) GetRequest() []*BcastFilterDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type BcastFilterStatus struct {
}

func (m *BcastFilterStatus) Reset()                    { *m = BcastFilterStatus{} }
func (m *BcastFilterStatus) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterStatus) ProtoMessage()               {}
func (*BcastFilterStatus) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{22} }

type BcastFilterResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *BcastFilterStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *BcastFilterResponse) Reset()                    { *m = BcastFilterResponse{} }
func (m *BcastFilterResponse) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterResponse) ProtoMessage()               {}
func (*BcastFilterResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{23} }

func (m *BcastFilterResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BcastFilterResponse) GetStatus() *BcastFilterStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type BcastFilterResponseMsg struct {
	Response []*BcastFilterResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BcastFilterResponseMsg) Reset()                    { *m = BcastFilterResponseMsg{} }
func (m *BcastFilterResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterResponseMsg) ProtoMessage()               {}
func (*BcastFilterResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{24} }

func (m *BcastFilterResponseMsg) GetResponse() []*BcastFilterResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type BcastFilterDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *BcastFilterDeleteResponse) Reset()                    { *m = BcastFilterDeleteResponse{} }
func (m *BcastFilterDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterDeleteResponse) ProtoMessage()               {}
func (*BcastFilterDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{25} }

func (m *BcastFilterDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type BcastFilterDeleteResponseMsg struct {
	Response []*BcastFilterDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BcastFilterDeleteResponseMsg) Reset()         { *m = BcastFilterDeleteResponseMsg{} }
func (m *BcastFilterDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BcastFilterDeleteResponseMsg) ProtoMessage()    {}
func (*BcastFilterDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorNcsi, []int{26}
}

func (m *BcastFilterDeleteResponseMsg) GetResponse() []*BcastFilterDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type BcastFilterGetRequest struct {
	Channel uint32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *BcastFilterGetRequest) Reset()                    { *m = BcastFilterGetRequest{} }
func (m *BcastFilterGetRequest) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterGetRequest) ProtoMessage()               {}
func (*BcastFilterGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{27} }

func (m *BcastFilterGetRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type BcastFilterGetRequestMsg struct {
	Request []*BcastFilterGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *BcastFilterGetRequestMsg) Reset()                    { *m = BcastFilterGetRequestMsg{} }
func (m *BcastFilterGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterGetRequestMsg) ProtoMessage()               {}
func (*BcastFilterGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{28} }

func (m *BcastFilterGetRequestMsg) GetRequest() []*BcastFilterGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type BcastFilterGetResponse struct {
	ApiStatus ApiStatus           `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Request   *BcastFilterRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *BcastFilterGetResponse) Reset()                    { *m = BcastFilterGetResponse{} }
func (m *BcastFilterGetResponse) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterGetResponse) ProtoMessage()               {}
func (*BcastFilterGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{29} }

func (m *BcastFilterGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *BcastFilterGetResponse) GetRequest() *BcastFilterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type BcastFilterGetResponseMsg struct {
	Response []*BcastFilterGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *BcastFilterGetResponseMsg) Reset()                    { *m = BcastFilterGetResponseMsg{} }
func (m *BcastFilterGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*BcastFilterGetResponseMsg) ProtoMessage()               {}
func (*BcastFilterGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{30} }

func (m *BcastFilterGetResponseMsg) GetResponse() []*BcastFilterGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Mcast Filters
type McastFilterRequest struct {
	Id                  uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EnableIpv6NeighAdv  bool   `protobuf:"varint,2,opt,name=enable_ipv6_neigh_adv,json=enableIpv6NeighAdv,proto3" json:"enable_ipv6_neigh_adv,omitempty"`
	EnableIpv6RouterAdv bool   `protobuf:"varint,3,opt,name=enable_ipv6_router_adv,json=enableIpv6RouterAdv,proto3" json:"enable_ipv6_router_adv,omitempty"`
	EnableDhcpv6Relay   bool   `protobuf:"varint,4,opt,name=enable_dhcpv6_relay,json=enableDhcpv6Relay,proto3" json:"enable_dhcpv6_relay,omitempty"`
	EnableDhcpv6Mcast   bool   `protobuf:"varint,5,opt,name=enable_dhcpv6_mcast,json=enableDhcpv6Mcast,proto3" json:"enable_dhcpv6_mcast,omitempty"`
	EnableIpv6Mld       bool   `protobuf:"varint,6,opt,name=enable_ipv6_mld,json=enableIpv6Mld,proto3" json:"enable_ipv6_mld,omitempty"`
	EnableIpv6NeighSol  bool   `protobuf:"varint,7,opt,name=enable_ipv6_neigh_sol,json=enableIpv6NeighSol,proto3" json:"enable_ipv6_neigh_sol,omitempty"`
	Channel             uint32 `protobuf:"varint,8,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *McastFilterRequest) Reset()                    { *m = McastFilterRequest{} }
func (m *McastFilterRequest) String() string            { return proto.CompactTextString(m) }
func (*McastFilterRequest) ProtoMessage()               {}
func (*McastFilterRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{31} }

func (m *McastFilterRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *McastFilterRequest) GetEnableIpv6NeighAdv() bool {
	if m != nil {
		return m.EnableIpv6NeighAdv
	}
	return false
}

func (m *McastFilterRequest) GetEnableIpv6RouterAdv() bool {
	if m != nil {
		return m.EnableIpv6RouterAdv
	}
	return false
}

func (m *McastFilterRequest) GetEnableDhcpv6Relay() bool {
	if m != nil {
		return m.EnableDhcpv6Relay
	}
	return false
}

func (m *McastFilterRequest) GetEnableDhcpv6Mcast() bool {
	if m != nil {
		return m.EnableDhcpv6Mcast
	}
	return false
}

func (m *McastFilterRequest) GetEnableIpv6Mld() bool {
	if m != nil {
		return m.EnableIpv6Mld
	}
	return false
}

func (m *McastFilterRequest) GetEnableIpv6NeighSol() bool {
	if m != nil {
		return m.EnableIpv6NeighSol
	}
	return false
}

func (m *McastFilterRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type McastFilterRequestMsg struct {
	Request []*McastFilterRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *McastFilterRequestMsg) Reset()                    { *m = McastFilterRequestMsg{} }
func (m *McastFilterRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*McastFilterRequestMsg) ProtoMessage()               {}
func (*McastFilterRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{32} }

func (m *McastFilterRequestMsg) GetRequest() []*McastFilterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type McastFilterStatus struct {
}

func (m *McastFilterStatus) Reset()                    { *m = McastFilterStatus{} }
func (m *McastFilterStatus) String() string            { return proto.CompactTextString(m) }
func (*McastFilterStatus) ProtoMessage()               {}
func (*McastFilterStatus) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{33} }

type McastFilterResponse struct {
	ApiStatus ApiStatus          `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *McastFilterStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *McastFilterResponse) Reset()                    { *m = McastFilterResponse{} }
func (m *McastFilterResponse) String() string            { return proto.CompactTextString(m) }
func (*McastFilterResponse) ProtoMessage()               {}
func (*McastFilterResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{34} }

func (m *McastFilterResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *McastFilterResponse) GetStatus() *McastFilterStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type McastFilterResponseMsg struct {
	Response []*McastFilterResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *McastFilterResponseMsg) Reset()                    { *m = McastFilterResponseMsg{} }
func (m *McastFilterResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*McastFilterResponseMsg) ProtoMessage()               {}
func (*McastFilterResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{35} }

func (m *McastFilterResponseMsg) GetResponse() []*McastFilterResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type McastFilterDeleteRequest struct {
}

func (m *McastFilterDeleteRequest) Reset()                    { *m = McastFilterDeleteRequest{} }
func (m *McastFilterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*McastFilterDeleteRequest) ProtoMessage()               {}
func (*McastFilterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{36} }

type McastFilterDeleteRequestMsg struct {
	Request []*McastFilterDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *McastFilterDeleteRequestMsg) Reset()                    { *m = McastFilterDeleteRequestMsg{} }
func (m *McastFilterDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*McastFilterDeleteRequestMsg) ProtoMessage()               {}
func (*McastFilterDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{37} }

func (m *McastFilterDeleteRequestMsg) GetRequest() []*McastFilterDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type McastFilterDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *McastFilterDeleteResponse) Reset()                    { *m = McastFilterDeleteResponse{} }
func (m *McastFilterDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*McastFilterDeleteResponse) ProtoMessage()               {}
func (*McastFilterDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{38} }

func (m *McastFilterDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type McastFilterDeleteResponseMsg struct {
	Response []*McastFilterDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *McastFilterDeleteResponseMsg) Reset()         { *m = McastFilterDeleteResponseMsg{} }
func (m *McastFilterDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*McastFilterDeleteResponseMsg) ProtoMessage()    {}
func (*McastFilterDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorNcsi, []int{39}
}

func (m *McastFilterDeleteResponseMsg) GetResponse() []*McastFilterDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type McastFilterGetRequest struct {
	Channel uint32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *McastFilterGetRequest) Reset()                    { *m = McastFilterGetRequest{} }
func (m *McastFilterGetRequest) String() string            { return proto.CompactTextString(m) }
func (*McastFilterGetRequest) ProtoMessage()               {}
func (*McastFilterGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{40} }

func (m *McastFilterGetRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type McastFilterGetRequestMsg struct {
	Request []*McastFilterGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *McastFilterGetRequestMsg) Reset()                    { *m = McastFilterGetRequestMsg{} }
func (m *McastFilterGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*McastFilterGetRequestMsg) ProtoMessage()               {}
func (*McastFilterGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{41} }

func (m *McastFilterGetRequestMsg) GetRequest() []*McastFilterGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type McastFilterGetResponse struct {
	ApiStatus ApiStatus           `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Request   *McastFilterRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *McastFilterGetResponse) Reset()                    { *m = McastFilterGetResponse{} }
func (m *McastFilterGetResponse) String() string            { return proto.CompactTextString(m) }
func (*McastFilterGetResponse) ProtoMessage()               {}
func (*McastFilterGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{42} }

func (m *McastFilterGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *McastFilterGetResponse) GetRequest() *McastFilterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type McastFilterGetResponseMsg struct {
	Response []*McastFilterGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *McastFilterGetResponseMsg) Reset()                    { *m = McastFilterGetResponseMsg{} }
func (m *McastFilterGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*McastFilterGetResponseMsg) ProtoMessage()               {}
func (*McastFilterGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{43} }

func (m *McastFilterGetResponseMsg) GetResponse() []*McastFilterGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Vlan Mode
type VlanModeRequest struct {
	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Mode   uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *VlanModeRequest) Reset()                    { *m = VlanModeRequest{} }
func (m *VlanModeRequest) String() string            { return proto.CompactTextString(m) }
func (*VlanModeRequest) ProtoMessage()               {}
func (*VlanModeRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{44} }

func (m *VlanModeRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *VlanModeRequest) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type VlanModeRequestMsg struct {
	Request []*VlanModeRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *VlanModeRequestMsg) Reset()                    { *m = VlanModeRequestMsg{} }
func (m *VlanModeRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*VlanModeRequestMsg) ProtoMessage()               {}
func (*VlanModeRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{45} }

func (m *VlanModeRequestMsg) GetRequest() []*VlanModeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type VlanModeStatus struct {
}

func (m *VlanModeStatus) Reset()                    { *m = VlanModeStatus{} }
func (m *VlanModeStatus) String() string            { return proto.CompactTextString(m) }
func (*VlanModeStatus) ProtoMessage()               {}
func (*VlanModeStatus) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{46} }

type VlanModeResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *VlanModeStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *VlanModeResponse) Reset()                    { *m = VlanModeResponse{} }
func (m *VlanModeResponse) String() string            { return proto.CompactTextString(m) }
func (*VlanModeResponse) ProtoMessage()               {}
func (*VlanModeResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{47} }

func (m *VlanModeResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VlanModeResponse) GetStatus() *VlanModeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type VlanModeResponseMsg struct {
	Response []*VlanModeResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *VlanModeResponseMsg) Reset()                    { *m = VlanModeResponseMsg{} }
func (m *VlanModeResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*VlanModeResponseMsg) ProtoMessage()               {}
func (*VlanModeResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{48} }

func (m *VlanModeResponseMsg) GetResponse() []*VlanModeResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type VlanModeGetRequest struct {
}

func (m *VlanModeGetRequest) Reset()                    { *m = VlanModeGetRequest{} }
func (m *VlanModeGetRequest) String() string            { return proto.CompactTextString(m) }
func (*VlanModeGetRequest) ProtoMessage()               {}
func (*VlanModeGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{49} }

type VlanModeGetRequestMsg struct {
	Request []*VlanModeGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *VlanModeGetRequestMsg) Reset()                    { *m = VlanModeGetRequestMsg{} }
func (m *VlanModeGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*VlanModeGetRequestMsg) ProtoMessage()               {}
func (*VlanModeGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{50} }

func (m *VlanModeGetRequestMsg) GetRequest() []*VlanModeGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type VlanModeGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Request   *VlanModeRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *VlanModeGetResponse) Reset()                    { *m = VlanModeGetResponse{} }
func (m *VlanModeGetResponse) String() string            { return proto.CompactTextString(m) }
func (*VlanModeGetResponse) ProtoMessage()               {}
func (*VlanModeGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{51} }

func (m *VlanModeGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *VlanModeGetResponse) GetRequest() *VlanModeRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type VlanModeGetResponseMsg struct {
	Response []*VlanModeGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *VlanModeGetResponseMsg) Reset()                    { *m = VlanModeGetResponseMsg{} }
func (m *VlanModeGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*VlanModeGetResponseMsg) ProtoMessage()               {}
func (*VlanModeGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{52} }

func (m *VlanModeGetResponseMsg) GetResponse() []*VlanModeGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Channel Tx/Rx/Reset
type ChannelRequest struct {
	TxEnable bool   `protobuf:"varint,1,opt,name=tx_enable,json=txEnable,proto3" json:"tx_enable,omitempty"`
	RxEnable bool   `protobuf:"varint,2,opt,name=rx_enable,json=rxEnable,proto3" json:"rx_enable,omitempty"`
	Reset_   bool   `protobuf:"varint,3,opt,name=reset,proto3" json:"reset,omitempty"`
	Channel  uint32 `protobuf:"varint,4,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *ChannelRequest) Reset()                    { *m = ChannelRequest{} }
func (m *ChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*ChannelRequest) ProtoMessage()               {}
func (*ChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{53} }

func (m *ChannelRequest) GetTxEnable() bool {
	if m != nil {
		return m.TxEnable
	}
	return false
}

func (m *ChannelRequest) GetRxEnable() bool {
	if m != nil {
		return m.RxEnable
	}
	return false
}

func (m *ChannelRequest) GetReset_() bool {
	if m != nil {
		return m.Reset_
	}
	return false
}

func (m *ChannelRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type ChannelRequestMsg struct {
	Request []*ChannelRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ChannelRequestMsg) Reset()                    { *m = ChannelRequestMsg{} }
func (m *ChannelRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ChannelRequestMsg) ProtoMessage()               {}
func (*ChannelRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{54} }

func (m *ChannelRequestMsg) GetRequest() []*ChannelRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type ChannelStatus struct {
}

func (m *ChannelStatus) Reset()                    { *m = ChannelStatus{} }
func (m *ChannelStatus) String() string            { return proto.CompactTextString(m) }
func (*ChannelStatus) ProtoMessage()               {}
func (*ChannelStatus) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{55} }

type ChannelResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *ChannelStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *ChannelResponse) Reset()                    { *m = ChannelResponse{} }
func (m *ChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*ChannelResponse) ProtoMessage()               {}
func (*ChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{56} }

func (m *ChannelResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ChannelResponse) GetStatus() *ChannelStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ChannelResponseMsg struct {
	Response []*ChannelResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ChannelResponseMsg) Reset()                    { *m = ChannelResponseMsg{} }
func (m *ChannelResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ChannelResponseMsg) ProtoMessage()               {}
func (*ChannelResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{57} }

func (m *ChannelResponseMsg) GetResponse() []*ChannelResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type ChannelGetRequest struct {
	Channel uint32 `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *ChannelGetRequest) Reset()                    { *m = ChannelGetRequest{} }
func (m *ChannelGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ChannelGetRequest) ProtoMessage()               {}
func (*ChannelGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{58} }

func (m *ChannelGetRequest) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type ChannelGetRequestMsg struct {
	Request []*ChannelGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *ChannelGetRequestMsg) Reset()                    { *m = ChannelGetRequestMsg{} }
func (m *ChannelGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*ChannelGetRequestMsg) ProtoMessage()               {}
func (*ChannelGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{59} }

func (m *ChannelGetRequestMsg) GetRequest() []*ChannelGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type ChannelGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Request   *ChannelRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *ChannelGetResponse) Reset()                    { *m = ChannelGetResponse{} }
func (m *ChannelGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ChannelGetResponse) ProtoMessage()               {}
func (*ChannelGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{60} }

func (m *ChannelGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ChannelGetResponse) GetRequest() *ChannelRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type ChannelGetResponseMsg struct {
	Response []*ChannelGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ChannelGetResponseMsg) Reset()                    { *m = ChannelGetResponseMsg{} }
func (m *ChannelGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ChannelGetResponseMsg) ProtoMessage()               {}
func (*ChannelGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNcsi, []int{61} }

func (m *ChannelGetResponseMsg) GetResponse() []*ChannelGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*VlanFilterRequest)(nil), "ncsi.VlanFilterRequest")
	proto.RegisterType((*VlanFilterRequestMsg)(nil), "ncsi.VlanFilterRequestMsg")
	proto.RegisterType((*VlanFilterStatus)(nil), "ncsi.VlanFilterStatus")
	proto.RegisterType((*VlanFilterResponse)(nil), "ncsi.VlanFilterResponse")
	proto.RegisterType((*VlanFilterResponseMsg)(nil), "ncsi.VlanFilterResponseMsg")
	proto.RegisterType((*VlanFilterGetRequest)(nil), "ncsi.VlanFilterGetRequest")
	proto.RegisterType((*VlanFilterGetRequestMsg)(nil), "ncsi.VlanFilterGetRequestMsg")
	proto.RegisterType((*VlanFilterGetResponse)(nil), "ncsi.VlanFilterGetResponse")
	proto.RegisterType((*VlanFilterGetResponseMsg)(nil), "ncsi.VlanFilterGetResponseMsg")
	proto.RegisterType((*MacFilterRequest)(nil), "ncsi.MacFilterRequest")
	proto.RegisterType((*MacFilterRequestMsg)(nil), "ncsi.MacFilterRequestMsg")
	proto.RegisterType((*MacFilterStatus)(nil), "ncsi.MacFilterStatus")
	proto.RegisterType((*MacFilterResponse)(nil), "ncsi.MacFilterResponse")
	proto.RegisterType((*MacFilterResponseMsg)(nil), "ncsi.MacFilterResponseMsg")
	proto.RegisterType((*MacFilterGetRequest)(nil), "ncsi.MacFilterGetRequest")
	proto.RegisterType((*MacFilterGetRequestMsg)(nil), "ncsi.MacFilterGetRequestMsg")
	proto.RegisterType((*MacFilterGetResponse)(nil), "ncsi.MacFilterGetResponse")
	proto.RegisterType((*MacFilterGetResponseMsg)(nil), "ncsi.MacFilterGetResponseMsg")
	proto.RegisterType((*BcastFilterRequest)(nil), "ncsi.BcastFilterRequest")
	proto.RegisterType((*BcastFilterRequestMsg)(nil), "ncsi.BcastFilterRequestMsg")
	proto.RegisterType((*BcastFilterDeleteRequest)(nil), "ncsi.BcastFilterDeleteRequest")
	proto.RegisterType((*BcastFilterDeleteRequestMsg)(nil), "ncsi.BcastFilterDeleteRequestMsg")
	proto.RegisterType((*BcastFilterStatus)(nil), "ncsi.BcastFilterStatus")
	proto.RegisterType((*BcastFilterResponse)(nil), "ncsi.BcastFilterResponse")
	proto.RegisterType((*BcastFilterResponseMsg)(nil), "ncsi.BcastFilterResponseMsg")
	proto.RegisterType((*BcastFilterDeleteResponse)(nil), "ncsi.BcastFilterDeleteResponse")
	proto.RegisterType((*BcastFilterDeleteResponseMsg)(nil), "ncsi.BcastFilterDeleteResponseMsg")
	proto.RegisterType((*BcastFilterGetRequest)(nil), "ncsi.BcastFilterGetRequest")
	proto.RegisterType((*BcastFilterGetRequestMsg)(nil), "ncsi.BcastFilterGetRequestMsg")
	proto.RegisterType((*BcastFilterGetResponse)(nil), "ncsi.BcastFilterGetResponse")
	proto.RegisterType((*BcastFilterGetResponseMsg)(nil), "ncsi.BcastFilterGetResponseMsg")
	proto.RegisterType((*McastFilterRequest)(nil), "ncsi.McastFilterRequest")
	proto.RegisterType((*McastFilterRequestMsg)(nil), "ncsi.McastFilterRequestMsg")
	proto.RegisterType((*McastFilterStatus)(nil), "ncsi.McastFilterStatus")
	proto.RegisterType((*McastFilterResponse)(nil), "ncsi.McastFilterResponse")
	proto.RegisterType((*McastFilterResponseMsg)(nil), "ncsi.McastFilterResponseMsg")
	proto.RegisterType((*McastFilterDeleteRequest)(nil), "ncsi.McastFilterDeleteRequest")
	proto.RegisterType((*McastFilterDeleteRequestMsg)(nil), "ncsi.McastFilterDeleteRequestMsg")
	proto.RegisterType((*McastFilterDeleteResponse)(nil), "ncsi.McastFilterDeleteResponse")
	proto.RegisterType((*McastFilterDeleteResponseMsg)(nil), "ncsi.McastFilterDeleteResponseMsg")
	proto.RegisterType((*McastFilterGetRequest)(nil), "ncsi.McastFilterGetRequest")
	proto.RegisterType((*McastFilterGetRequestMsg)(nil), "ncsi.McastFilterGetRequestMsg")
	proto.RegisterType((*McastFilterGetResponse)(nil), "ncsi.McastFilterGetResponse")
	proto.RegisterType((*McastFilterGetResponseMsg)(nil), "ncsi.McastFilterGetResponseMsg")
	proto.RegisterType((*VlanModeRequest)(nil), "ncsi.VlanModeRequest")
	proto.RegisterType((*VlanModeRequestMsg)(nil), "ncsi.VlanModeRequestMsg")
	proto.RegisterType((*VlanModeStatus)(nil), "ncsi.VlanModeStatus")
	proto.RegisterType((*VlanModeResponse)(nil), "ncsi.VlanModeResponse")
	proto.RegisterType((*VlanModeResponseMsg)(nil), "ncsi.VlanModeResponseMsg")
	proto.RegisterType((*VlanModeGetRequest)(nil), "ncsi.VlanModeGetRequest")
	proto.RegisterType((*VlanModeGetRequestMsg)(nil), "ncsi.VlanModeGetRequestMsg")
	proto.RegisterType((*VlanModeGetResponse)(nil), "ncsi.VlanModeGetResponse")
	proto.RegisterType((*VlanModeGetResponseMsg)(nil), "ncsi.VlanModeGetResponseMsg")
	proto.RegisterType((*ChannelRequest)(nil), "ncsi.ChannelRequest")
	proto.RegisterType((*ChannelRequestMsg)(nil), "ncsi.ChannelRequestMsg")
	proto.RegisterType((*ChannelStatus)(nil), "ncsi.ChannelStatus")
	proto.RegisterType((*ChannelResponse)(nil), "ncsi.ChannelResponse")
	proto.RegisterType((*ChannelResponseMsg)(nil), "ncsi.ChannelResponseMsg")
	proto.RegisterType((*ChannelGetRequest)(nil), "ncsi.ChannelGetRequest")
	proto.RegisterType((*ChannelGetRequestMsg)(nil), "ncsi.ChannelGetRequestMsg")
	proto.RegisterType((*ChannelGetResponse)(nil), "ncsi.ChannelGetResponse")
	proto.RegisterType((*ChannelGetResponseMsg)(nil), "ncsi.ChannelGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ncsi service

type NcsiClient interface {
	// Vlan Filters
	VlanFilterCreate(ctx context.Context, in *VlanFilterRequestMsg, opts ...grpc.CallOption) (*VlanFilterResponseMsg, error)
	VlanFilterDelete(ctx context.Context, in *VlanFilterRequestMsg, opts ...grpc.CallOption) (*VlanFilterResponseMsg, error)
	VlanFilterGet(ctx context.Context, in *VlanFilterGetRequestMsg, opts ...grpc.CallOption) (*VlanFilterGetResponseMsg, error)
	// Mac Filters
	MacFilterCreate(ctx context.Context, in *MacFilterRequestMsg, opts ...grpc.CallOption) (*MacFilterResponseMsg, error)
	MacFilterDelete(ctx context.Context, in *MacFilterRequestMsg, opts ...grpc.CallOption) (*MacFilterResponseMsg, error)
	MacFilterGet(ctx context.Context, in *MacFilterGetRequestMsg, opts ...grpc.CallOption) (*MacFilterGetResponseMsg, error)
	// Bcast Filters
	BcastFilterCreate(ctx context.Context, in *BcastFilterRequestMsg, opts ...grpc.CallOption) (*BcastFilterResponseMsg, error)
	BcastFilterUpdate(ctx context.Context, in *BcastFilterRequestMsg, opts ...grpc.CallOption) (*BcastFilterResponseMsg, error)
	BcastFilterDelete(ctx context.Context, in *BcastFilterDeleteRequestMsg, opts ...grpc.CallOption) (*BcastFilterDeleteResponseMsg, error)
	BcastFilterGet(ctx context.Context, in *BcastFilterGetRequestMsg, opts ...grpc.CallOption) (*BcastFilterGetResponseMsg, error)
	// Mcast Filters
	McastFilterCreate(ctx context.Context, in *McastFilterRequestMsg, opts ...grpc.CallOption) (*McastFilterResponseMsg, error)
	McastFilterUpdate(ctx context.Context, in *McastFilterRequestMsg, opts ...grpc.CallOption) (*McastFilterResponseMsg, error)
	McastFilterDelete(ctx context.Context, in *McastFilterDeleteRequestMsg, opts ...grpc.CallOption) (*McastFilterDeleteResponseMsg, error)
	McastFilterGet(ctx context.Context, in *McastFilterGetRequestMsg, opts ...grpc.CallOption) (*McastFilterGetResponseMsg, error)
	// Vlan Mode
	VlanModeCreate(ctx context.Context, in *VlanModeRequestMsg, opts ...grpc.CallOption) (*VlanModeResponseMsg, error)
	VlanModeUpdate(ctx context.Context, in *VlanModeRequestMsg, opts ...grpc.CallOption) (*VlanModeResponseMsg, error)
	VlanModeDelete(ctx context.Context, in *VlanModeRequestMsg, opts ...grpc.CallOption) (*VlanModeResponseMsg, error)
	VlanModeGet(ctx context.Context, in *VlanModeGetRequestMsg, opts ...grpc.CallOption) (*VlanModeGetResponseMsg, error)
	// Channel Rx/Tx/Reset
	ChannelCreate(ctx context.Context, in *ChannelRequestMsg, opts ...grpc.CallOption) (*ChannelResponseMsg, error)
	ChannelUpdate(ctx context.Context, in *ChannelRequestMsg, opts ...grpc.CallOption) (*ChannelResponseMsg, error)
	ChannelDelete(ctx context.Context, in *ChannelRequestMsg, opts ...grpc.CallOption) (*ChannelResponseMsg, error)
	ChannelGet(ctx context.Context, in *ChannelGetRequestMsg, opts ...grpc.CallOption) (*ChannelGetResponseMsg, error)
}

type ncsiClient struct {
	cc *grpc.ClientConn
}

func NewNcsiClient(cc *grpc.ClientConn) NcsiClient {
	return &ncsiClient{cc}
}

func (c *ncsiClient) VlanFilterCreate(ctx context.Context, in *VlanFilterRequestMsg, opts ...grpc.CallOption) (*VlanFilterResponseMsg, error) {
	out := new(VlanFilterResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/VlanFilterCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) VlanFilterDelete(ctx context.Context, in *VlanFilterRequestMsg, opts ...grpc.CallOption) (*VlanFilterResponseMsg, error) {
	out := new(VlanFilterResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/VlanFilterDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) VlanFilterGet(ctx context.Context, in *VlanFilterGetRequestMsg, opts ...grpc.CallOption) (*VlanFilterGetResponseMsg, error) {
	out := new(VlanFilterGetResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/VlanFilterGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) MacFilterCreate(ctx context.Context, in *MacFilterRequestMsg, opts ...grpc.CallOption) (*MacFilterResponseMsg, error) {
	out := new(MacFilterResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/MacFilterCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) MacFilterDelete(ctx context.Context, in *MacFilterRequestMsg, opts ...grpc.CallOption) (*MacFilterResponseMsg, error) {
	out := new(MacFilterResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/MacFilterDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) MacFilterGet(ctx context.Context, in *MacFilterGetRequestMsg, opts ...grpc.CallOption) (*MacFilterGetResponseMsg, error) {
	out := new(MacFilterGetResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/MacFilterGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) BcastFilterCreate(ctx context.Context, in *BcastFilterRequestMsg, opts ...grpc.CallOption) (*BcastFilterResponseMsg, error) {
	out := new(BcastFilterResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/BcastFilterCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) BcastFilterUpdate(ctx context.Context, in *BcastFilterRequestMsg, opts ...grpc.CallOption) (*BcastFilterResponseMsg, error) {
	out := new(BcastFilterResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/BcastFilterUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) BcastFilterDelete(ctx context.Context, in *BcastFilterDeleteRequestMsg, opts ...grpc.CallOption) (*BcastFilterDeleteResponseMsg, error) {
	out := new(BcastFilterDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/BcastFilterDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) BcastFilterGet(ctx context.Context, in *BcastFilterGetRequestMsg, opts ...grpc.CallOption) (*BcastFilterGetResponseMsg, error) {
	out := new(BcastFilterGetResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/BcastFilterGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) McastFilterCreate(ctx context.Context, in *McastFilterRequestMsg, opts ...grpc.CallOption) (*McastFilterResponseMsg, error) {
	out := new(McastFilterResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/McastFilterCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) McastFilterUpdate(ctx context.Context, in *McastFilterRequestMsg, opts ...grpc.CallOption) (*McastFilterResponseMsg, error) {
	out := new(McastFilterResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/McastFilterUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) McastFilterDelete(ctx context.Context, in *McastFilterDeleteRequestMsg, opts ...grpc.CallOption) (*McastFilterDeleteResponseMsg, error) {
	out := new(McastFilterDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/McastFilterDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) McastFilterGet(ctx context.Context, in *McastFilterGetRequestMsg, opts ...grpc.CallOption) (*McastFilterGetResponseMsg, error) {
	out := new(McastFilterGetResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/McastFilterGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) VlanModeCreate(ctx context.Context, in *VlanModeRequestMsg, opts ...grpc.CallOption) (*VlanModeResponseMsg, error) {
	out := new(VlanModeResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/VlanModeCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) VlanModeUpdate(ctx context.Context, in *VlanModeRequestMsg, opts ...grpc.CallOption) (*VlanModeResponseMsg, error) {
	out := new(VlanModeResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/VlanModeUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) VlanModeDelete(ctx context.Context, in *VlanModeRequestMsg, opts ...grpc.CallOption) (*VlanModeResponseMsg, error) {
	out := new(VlanModeResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/VlanModeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) VlanModeGet(ctx context.Context, in *VlanModeGetRequestMsg, opts ...grpc.CallOption) (*VlanModeGetResponseMsg, error) {
	out := new(VlanModeGetResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/VlanModeGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) ChannelCreate(ctx context.Context, in *ChannelRequestMsg, opts ...grpc.CallOption) (*ChannelResponseMsg, error) {
	out := new(ChannelResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/ChannelCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) ChannelUpdate(ctx context.Context, in *ChannelRequestMsg, opts ...grpc.CallOption) (*ChannelResponseMsg, error) {
	out := new(ChannelResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/ChannelUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) ChannelDelete(ctx context.Context, in *ChannelRequestMsg, opts ...grpc.CallOption) (*ChannelResponseMsg, error) {
	out := new(ChannelResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/ChannelDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ncsiClient) ChannelGet(ctx context.Context, in *ChannelGetRequestMsg, opts ...grpc.CallOption) (*ChannelGetResponseMsg, error) {
	out := new(ChannelGetResponseMsg)
	err := grpc.Invoke(ctx, "/ncsi.Ncsi/ChannelGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ncsi service

type NcsiServer interface {
	// Vlan Filters
	VlanFilterCreate(context.Context, *VlanFilterRequestMsg) (*VlanFilterResponseMsg, error)
	VlanFilterDelete(context.Context, *VlanFilterRequestMsg) (*VlanFilterResponseMsg, error)
	VlanFilterGet(context.Context, *VlanFilterGetRequestMsg) (*VlanFilterGetResponseMsg, error)
	// Mac Filters
	MacFilterCreate(context.Context, *MacFilterRequestMsg) (*MacFilterResponseMsg, error)
	MacFilterDelete(context.Context, *MacFilterRequestMsg) (*MacFilterResponseMsg, error)
	MacFilterGet(context.Context, *MacFilterGetRequestMsg) (*MacFilterGetResponseMsg, error)
	// Bcast Filters
	BcastFilterCreate(context.Context, *BcastFilterRequestMsg) (*BcastFilterResponseMsg, error)
	BcastFilterUpdate(context.Context, *BcastFilterRequestMsg) (*BcastFilterResponseMsg, error)
	BcastFilterDelete(context.Context, *BcastFilterDeleteRequestMsg) (*BcastFilterDeleteResponseMsg, error)
	BcastFilterGet(context.Context, *BcastFilterGetRequestMsg) (*BcastFilterGetResponseMsg, error)
	// Mcast Filters
	McastFilterCreate(context.Context, *McastFilterRequestMsg) (*McastFilterResponseMsg, error)
	McastFilterUpdate(context.Context, *McastFilterRequestMsg) (*McastFilterResponseMsg, error)
	McastFilterDelete(context.Context, *McastFilterDeleteRequestMsg) (*McastFilterDeleteResponseMsg, error)
	McastFilterGet(context.Context, *McastFilterGetRequestMsg) (*McastFilterGetResponseMsg, error)
	// Vlan Mode
	VlanModeCreate(context.Context, *VlanModeRequestMsg) (*VlanModeResponseMsg, error)
	VlanModeUpdate(context.Context, *VlanModeRequestMsg) (*VlanModeResponseMsg, error)
	VlanModeDelete(context.Context, *VlanModeRequestMsg) (*VlanModeResponseMsg, error)
	VlanModeGet(context.Context, *VlanModeGetRequestMsg) (*VlanModeGetResponseMsg, error)
	// Channel Rx/Tx/Reset
	ChannelCreate(context.Context, *ChannelRequestMsg) (*ChannelResponseMsg, error)
	ChannelUpdate(context.Context, *ChannelRequestMsg) (*ChannelResponseMsg, error)
	ChannelDelete(context.Context, *ChannelRequestMsg) (*ChannelResponseMsg, error)
	ChannelGet(context.Context, *ChannelGetRequestMsg) (*ChannelGetResponseMsg, error)
}

func RegisterNcsiServer(s *grpc.Server, srv NcsiServer) {
	s.RegisterService(&_Ncsi_serviceDesc, srv)
}

func _Ncsi_VlanFilterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanFilterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).VlanFilterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/VlanFilterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).VlanFilterCreate(ctx, req.(*VlanFilterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_VlanFilterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanFilterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).VlanFilterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/VlanFilterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).VlanFilterDelete(ctx, req.(*VlanFilterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_VlanFilterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanFilterGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).VlanFilterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/VlanFilterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).VlanFilterGet(ctx, req.(*VlanFilterGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_MacFilterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacFilterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).MacFilterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/MacFilterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).MacFilterCreate(ctx, req.(*MacFilterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_MacFilterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacFilterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).MacFilterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/MacFilterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).MacFilterDelete(ctx, req.(*MacFilterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_MacFilterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacFilterGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).MacFilterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/MacFilterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).MacFilterGet(ctx, req.(*MacFilterGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_BcastFilterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BcastFilterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).BcastFilterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/BcastFilterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).BcastFilterCreate(ctx, req.(*BcastFilterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_BcastFilterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BcastFilterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).BcastFilterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/BcastFilterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).BcastFilterUpdate(ctx, req.(*BcastFilterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_BcastFilterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BcastFilterDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).BcastFilterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/BcastFilterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).BcastFilterDelete(ctx, req.(*BcastFilterDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_BcastFilterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BcastFilterGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).BcastFilterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/BcastFilterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).BcastFilterGet(ctx, req.(*BcastFilterGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_McastFilterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McastFilterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).McastFilterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/McastFilterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).McastFilterCreate(ctx, req.(*McastFilterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_McastFilterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McastFilterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).McastFilterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/McastFilterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).McastFilterUpdate(ctx, req.(*McastFilterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_McastFilterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McastFilterDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).McastFilterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/McastFilterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).McastFilterDelete(ctx, req.(*McastFilterDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_McastFilterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(McastFilterGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).McastFilterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/McastFilterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).McastFilterGet(ctx, req.(*McastFilterGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_VlanModeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanModeRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).VlanModeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/VlanModeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).VlanModeCreate(ctx, req.(*VlanModeRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_VlanModeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanModeRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).VlanModeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/VlanModeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).VlanModeUpdate(ctx, req.(*VlanModeRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_VlanModeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanModeRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).VlanModeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/VlanModeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).VlanModeDelete(ctx, req.(*VlanModeRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_VlanModeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanModeGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).VlanModeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/VlanModeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).VlanModeGet(ctx, req.(*VlanModeGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_ChannelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).ChannelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/ChannelCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).ChannelCreate(ctx, req.(*ChannelRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_ChannelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).ChannelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/ChannelUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).ChannelUpdate(ctx, req.(*ChannelRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_ChannelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).ChannelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/ChannelDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).ChannelDelete(ctx, req.(*ChannelRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ncsi_ChannelGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcsiServer).ChannelGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncsi.Ncsi/ChannelGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcsiServer).ChannelGet(ctx, req.(*ChannelGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ncsi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncsi.Ncsi",
	HandlerType: (*NcsiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VlanFilterCreate",
			Handler:    _Ncsi_VlanFilterCreate_Handler,
		},
		{
			MethodName: "VlanFilterDelete",
			Handler:    _Ncsi_VlanFilterDelete_Handler,
		},
		{
			MethodName: "VlanFilterGet",
			Handler:    _Ncsi_VlanFilterGet_Handler,
		},
		{
			MethodName: "MacFilterCreate",
			Handler:    _Ncsi_MacFilterCreate_Handler,
		},
		{
			MethodName: "MacFilterDelete",
			Handler:    _Ncsi_MacFilterDelete_Handler,
		},
		{
			MethodName: "MacFilterGet",
			Handler:    _Ncsi_MacFilterGet_Handler,
		},
		{
			MethodName: "BcastFilterCreate",
			Handler:    _Ncsi_BcastFilterCreate_Handler,
		},
		{
			MethodName: "BcastFilterUpdate",
			Handler:    _Ncsi_BcastFilterUpdate_Handler,
		},
		{
			MethodName: "BcastFilterDelete",
			Handler:    _Ncsi_BcastFilterDelete_Handler,
		},
		{
			MethodName: "BcastFilterGet",
			Handler:    _Ncsi_BcastFilterGet_Handler,
		},
		{
			MethodName: "McastFilterCreate",
			Handler:    _Ncsi_McastFilterCreate_Handler,
		},
		{
			MethodName: "McastFilterUpdate",
			Handler:    _Ncsi_McastFilterUpdate_Handler,
		},
		{
			MethodName: "McastFilterDelete",
			Handler:    _Ncsi_McastFilterDelete_Handler,
		},
		{
			MethodName: "McastFilterGet",
			Handler:    _Ncsi_McastFilterGet_Handler,
		},
		{
			MethodName: "VlanModeCreate",
			Handler:    _Ncsi_VlanModeCreate_Handler,
		},
		{
			MethodName: "VlanModeUpdate",
			Handler:    _Ncsi_VlanModeUpdate_Handler,
		},
		{
			MethodName: "VlanModeDelete",
			Handler:    _Ncsi_VlanModeDelete_Handler,
		},
		{
			MethodName: "VlanModeGet",
			Handler:    _Ncsi_VlanModeGet_Handler,
		},
		{
			MethodName: "ChannelCreate",
			Handler:    _Ncsi_ChannelCreate_Handler,
		},
		{
			MethodName: "ChannelUpdate",
			Handler:    _Ncsi_ChannelUpdate_Handler,
		},
		{
			MethodName: "ChannelDelete",
			Handler:    _Ncsi_ChannelDelete_Handler,
		},
		{
			MethodName: "ChannelGet",
			Handler:    _Ncsi_ChannelGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ncsi.proto",
}

func (m *VlanFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Id))
	}
	if m.VlanId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.VlanId))
	}
	if m.Channel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *VlanFilterRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanFilterRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VlanFilterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanFilterStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VlanFilterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanFilterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Status.Size()))
		n1, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *VlanFilterResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanFilterResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VlanFilterGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanFilterGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VlanId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.VlanId))
	}
	if m.Channel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *VlanFilterGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanFilterGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VlanFilterGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanFilterGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Request.Size()))
		n2, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *VlanFilterGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanFilterGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MacFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Id))
	}
	if m.MacAddr != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.MacAddr))
	}
	if m.Channel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *MacFilterRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacFilterRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MacFilterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacFilterStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MacFilterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacFilterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Status.Size()))
		n3, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *MacFilterResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacFilterResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MacFilterGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacFilterGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MacAddr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.MacAddr))
	}
	if m.Channel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *MacFilterGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacFilterGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MacFilterGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacFilterGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Request.Size()))
		n4, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *MacFilterGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacFilterGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BcastFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Id))
	}
	if m.EnableArp {
		dAtA[i] = 0x10
		i++
		if m.EnableArp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableDhcpClient {
		dAtA[i] = 0x18
		i++
		if m.EnableDhcpClient {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableDhcpServer {
		dAtA[i] = 0x20
		i++
		if m.EnableDhcpServer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableNetbios {
		dAtA[i] = 0x28
		i++
		if m.EnableNetbios {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Channel != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *BcastFilterRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BcastFilterDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BcastFilterDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BcastFilterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BcastFilterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Status.Size()))
		n5, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *BcastFilterResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BcastFilterDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *BcastFilterDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BcastFilterGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *BcastFilterGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BcastFilterGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Request.Size()))
		n6, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *BcastFilterGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BcastFilterGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *McastFilterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Id))
	}
	if m.EnableIpv6NeighAdv {
		dAtA[i] = 0x10
		i++
		if m.EnableIpv6NeighAdv {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableIpv6RouterAdv {
		dAtA[i] = 0x18
		i++
		if m.EnableIpv6RouterAdv {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableDhcpv6Relay {
		dAtA[i] = 0x20
		i++
		if m.EnableDhcpv6Relay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableDhcpv6Mcast {
		dAtA[i] = 0x28
		i++
		if m.EnableDhcpv6Mcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableIpv6Mld {
		dAtA[i] = 0x30
		i++
		if m.EnableIpv6Mld {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EnableIpv6NeighSol {
		dAtA[i] = 0x38
		i++
		if m.EnableIpv6NeighSol {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Channel != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *McastFilterRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *McastFilterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *McastFilterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Status.Size()))
		n7, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *McastFilterResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *McastFilterDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *McastFilterDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *McastFilterDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *McastFilterDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *McastFilterGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *McastFilterGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *McastFilterGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Request.Size()))
		n8, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *McastFilterGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McastFilterGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VlanModeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanModeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enable {
		dAtA[i] = 0x8
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Mode))
	}
	return i, nil
}

func (m *VlanModeRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanModeRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VlanModeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanModeStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VlanModeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanModeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Status.Size()))
		n9, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *VlanModeResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanModeResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VlanModeGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanModeGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VlanModeGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanModeGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VlanModeGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanModeGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Request.Size()))
		n10, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *VlanModeGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VlanModeGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TxEnable {
		dAtA[i] = 0x8
		i++
		if m.TxEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RxEnable {
		dAtA[i] = 0x10
		i++
		if m.RxEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reset_ {
		dAtA[i] = 0x18
		i++
		if m.Reset_ {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Channel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *ChannelRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChannelStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *ChannelResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChannelGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *ChannelGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChannelGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNcsi(dAtA, i, uint64(m.Request.Size()))
		n12, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *ChannelGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNcsi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintNcsi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VlanFilterRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNcsi(uint64(m.Id))
	}
	if m.VlanId != 0 {
		n += 1 + sovNcsi(uint64(m.VlanId))
	}
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *VlanFilterRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *VlanFilterStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VlanFilterResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *VlanFilterResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *VlanFilterGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.VlanId != 0 {
		n += 1 + sovNcsi(uint64(m.VlanId))
	}
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *VlanFilterGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *VlanFilterGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *VlanFilterGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *MacFilterRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNcsi(uint64(m.Id))
	}
	if m.MacAddr != 0 {
		n += 1 + sovNcsi(uint64(m.MacAddr))
	}
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *MacFilterRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *MacFilterStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MacFilterResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *MacFilterResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *MacFilterGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.MacAddr != 0 {
		n += 1 + sovNcsi(uint64(m.MacAddr))
	}
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *MacFilterGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *MacFilterGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *MacFilterGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *BcastFilterRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNcsi(uint64(m.Id))
	}
	if m.EnableArp {
		n += 2
	}
	if m.EnableDhcpClient {
		n += 2
	}
	if m.EnableDhcpServer {
		n += 2
	}
	if m.EnableNetbios {
		n += 2
	}
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *BcastFilterRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *BcastFilterDeleteRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BcastFilterDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *BcastFilterStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BcastFilterResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *BcastFilterResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *BcastFilterDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	return n
}

func (m *BcastFilterDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *BcastFilterGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *BcastFilterGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *BcastFilterGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *BcastFilterGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *McastFilterRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNcsi(uint64(m.Id))
	}
	if m.EnableIpv6NeighAdv {
		n += 2
	}
	if m.EnableIpv6RouterAdv {
		n += 2
	}
	if m.EnableDhcpv6Relay {
		n += 2
	}
	if m.EnableDhcpv6Mcast {
		n += 2
	}
	if m.EnableIpv6Mld {
		n += 2
	}
	if m.EnableIpv6NeighSol {
		n += 2
	}
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *McastFilterRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *McastFilterStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *McastFilterResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *McastFilterResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *McastFilterDeleteRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *McastFilterDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *McastFilterDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	return n
}

func (m *McastFilterDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *McastFilterGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *McastFilterGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *McastFilterGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *McastFilterGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *VlanModeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	if m.Mode != 0 {
		n += 1 + sovNcsi(uint64(m.Mode))
	}
	return n
}

func (m *VlanModeRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *VlanModeStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VlanModeResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *VlanModeResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *VlanModeGetRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VlanModeGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *VlanModeGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *VlanModeGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *ChannelRequest) Size() (n int) {
	var l int
	_ = l
	if m.TxEnable {
		n += 2
	}
	if m.RxEnable {
		n += 2
	}
	if m.Reset_ {
		n += 2
	}
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *ChannelRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *ChannelStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ChannelResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *ChannelResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *ChannelGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovNcsi(uint64(m.Channel))
	}
	return n
}

func (m *ChannelGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func (m *ChannelGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNcsi(uint64(m.ApiStatus))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovNcsi(uint64(l))
	}
	return n
}

func (m *ChannelGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNcsi(uint64(l))
		}
	}
	return n
}

func sovNcsi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNcsi(x uint64) (n int) {
	return sovNcsi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VlanFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			m.VlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanFilterRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanFilterRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanFilterRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VlanFilterRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanFilterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanFilterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanFilterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanFilterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanFilterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanFilterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &VlanFilterStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanFilterResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanFilterResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanFilterResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VlanFilterResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanFilterGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanFilterGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanFilterGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			m.VlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanFilterGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanFilterGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanFilterGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VlanFilterGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanFilterGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanFilterGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanFilterGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &VlanFilterRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanFilterGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanFilterGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanFilterGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VlanFilterGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddr", wireType)
			}
			m.MacAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacFilterRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacFilterRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacFilterRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MacFilterRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacFilterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacFilterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacFilterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacFilterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacFilterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacFilterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MacFilterStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacFilterResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacFilterResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacFilterResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MacFilterResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacFilterGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacFilterGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacFilterGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddr", wireType)
			}
			m.MacAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacFilterGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacFilterGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacFilterGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MacFilterGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacFilterGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacFilterGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacFilterGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &MacFilterRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacFilterGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacFilterGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacFilterGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MacFilterGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableArp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableArp = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDhcpClient", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableDhcpClient = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDhcpServer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableDhcpServer = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableNetbios", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableNetbios = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &BcastFilterRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &BcastFilterDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &BcastFilterStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &BcastFilterResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &BcastFilterDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &BcastFilterGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &BcastFilterRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BcastFilterGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BcastFilterGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BcastFilterGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &BcastFilterGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpv6NeighAdv", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableIpv6NeighAdv = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpv6RouterAdv", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableIpv6RouterAdv = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDhcpv6Relay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableDhcpv6Relay = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDhcpv6Mcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableDhcpv6Mcast = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpv6Mld", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableIpv6Mld = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableIpv6NeighSol", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableIpv6NeighSol = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &McastFilterRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &McastFilterStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &McastFilterResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &McastFilterDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &McastFilterDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &McastFilterGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &McastFilterRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McastFilterGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McastFilterGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McastFilterGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &McastFilterGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanModeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanModeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanModeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanModeRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanModeRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanModeRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VlanModeRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanModeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanModeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanModeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanModeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanModeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanModeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &VlanModeStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanModeResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanModeResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanModeResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VlanModeResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanModeGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanModeGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanModeGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanModeGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanModeGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanModeGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &VlanModeGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanModeGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanModeGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanModeGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &VlanModeRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VlanModeGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VlanModeGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VlanModeGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &VlanModeGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxEnable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RxEnable = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reset_ = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ChannelRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ChannelStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ChannelResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &ChannelGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &ChannelRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNcsi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ChannelGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNcsi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNcsi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNcsi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNcsi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNcsi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNcsi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNcsi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNcsi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNcsi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNcsi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ncsi.proto", fileDescriptorNcsi) }

var fileDescriptorNcsi = []byte{
	// 1529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xef, 0x6e, 0x13, 0xc7,
	0x16, 0x67, 0x43, 0x48, 0x9c, 0x13, 0xf2, 0xc7, 0xe3, 0xd8, 0x5e, 0xdb, 0x21, 0x70, 0x2d, 0xdd,
	0x2b, 0xa4, 0x0b, 0x06, 0xc2, 0x25, 0x17, 0xb5, 0xea, 0x87, 0x10, 0x20, 0x0a, 0x68, 0xa0, 0x38,
	0x02, 0xa4, 0x16, 0xc9, 0x5a, 0x76, 0x47, 0xc9, 0x4a, 0x1b, 0x7b, 0xbb, 0xbb, 0x58, 0xd0, 0x07,
	0xa8, 0xaa, 0x0a, 0x55, 0x55, 0xd5, 0x87, 0xea, 0x97, 0x4a, 0x7d, 0x82, 0x8a, 0xf2, 0x08, 0x7d,
	0x82, 0x6a, 0x76, 0xc6, 0xde, 0xf9, 0xb7, 0x6b, 0x92, 0x18, 0xfa, 0x29, 0xde, 0x9d, 0x33, 0x67,
	0xcf, 0xef, 0x77, 0xce, 0xfc, 0x66, 0xe6, 0x04, 0xa0, 0xef, 0xc6, 0x7e, 0x27, 0x8c, 0x06, 0xc9,
	0x00, 0xcd, 0xd2, 0xdf, 0xcd, 0xc5, 0xe4, 0x4d, 0x48, 0x62, 0xf6, 0xaa, 0x79, 0xde, 0x23, 0x41,
	0x78, 0xc8, 0x0d, 0xda, 0xcf, 0xa0, 0xfc, 0x2c, 0x70, 0xfa, 0xf7, 0xfd, 0x20, 0x21, 0x51, 0x97,
	0x7c, 0xf3, 0x8a, 0xc4, 0x09, 0x5a, 0x86, 0x19, 0xdf, 0xb3, 0xad, 0x4b, 0xd6, 0xe5, 0xa5, 0xee,
	0x8c, 0xef, 0xa1, 0x3a, 0xcc, 0x0f, 0x03, 0xa7, 0xdf, 0xf3, 0x3d, 0x7b, 0x26, 0x7d, 0x39, 0x47,
	0x1f, 0xf7, 0x3c, 0x64, 0xc3, 0xbc, 0x7b, 0xe8, 0xf4, 0xfb, 0x24, 0xb0, 0xcf, 0xa6, 0x03, 0xa3,
	0xc7, 0xf6, 0x1e, 0xac, 0x69, 0x7e, 0x71, 0x7c, 0x80, 0x6e, 0xc0, 0x7c, 0xc4, 0x9e, 0x6c, 0xeb,
	0xd2, 0xd9, 0xcb, 0x8b, 0x9b, 0xf5, 0x4e, 0x1a, 0xae, 0x66, 0xdc, 0x1d, 0xd9, 0xb5, 0x11, 0xac,
	0x66, 0xa3, 0xfb, 0x89, 0x93, 0xbc, 0x8a, 0xdb, 0x6f, 0x2d, 0x40, 0xe2, 0x94, 0x38, 0x1c, 0xf4,
	0x63, 0x82, 0xee, 0x03, 0x38, 0xa1, 0xdf, 0x8b, 0x53, 0xa3, 0x14, 0xc0, 0xf2, 0xe6, 0x6a, 0x87,
	0xa1, 0xdf, 0x0e, 0x7d, 0x36, 0xf9, 0x4e, 0xf5, 0xaf, 0x3f, 0x2e, 0x96, 0x87, 0xa4, 0xef, 0xbb,
	0xe4, 0xb3, 0xcc, 0xbc, 0xbb, 0xe0, 0x8c, 0x2c, 0x50, 0x07, 0xe6, 0xb8, 0x0f, 0x8a, 0x77, 0x71,
	0xb3, 0xa6, 0x06, 0xc9, 0xec, 0xba, 0xdc, 0xaa, 0x8d, 0xa1, 0xaa, 0x47, 0x43, 0xe1, 0xfe, 0x0f,
	0x4a, 0x11, 0x7f, 0xe4, 0x78, 0x6d, 0x1d, 0x2f, 0x1b, 0xef, 0x8e, 0x2d, 0x65, 0xf2, 0x76, 0x49,
	0x32, 0xca, 0x8b, 0x90, 0x07, 0x2b, 0x2f, 0x0f, 0x33, 0x72, 0x1e, 0x1e, 0x43, 0xdd, 0xe4, 0x8a,
	0xc5, 0xa6, 0xa4, 0xa2, 0xa9, 0x86, 0x96, 0xd9, 0x67, 0xd9, 0xf8, 0xd9, 0x12, 0xb1, 0xa6, 0x16,
	0x53, 0x26, 0x5f, 0x28, 0x11, 0xc6, 0xfe, 0xe4, 0x12, 0xd9, 0x07, 0xdb, 0x18, 0x13, 0x85, 0xf9,
	0x7f, 0x2d, 0x05, 0x2d, 0x23, 0x4e, 0x2d, 0x0b, 0xcf, 0x61, 0x15, 0x3b, 0x6e, 0xf1, 0xca, 0x68,
	0x40, 0xe9, 0xc8, 0x71, 0x7b, 0x8e, 0xe7, 0x45, 0x69, 0xb0, 0xb3, 0xdd, 0xf9, 0x23, 0xc7, 0xdd,
	0xf6, 0xbc, 0xa8, 0x60, 0x6d, 0xec, 0x42, 0x45, 0x75, 0x4c, 0x03, 0xbd, 0xae, 0xe6, 0x83, 0x57,
	0x9d, 0x6a, 0x9b, 0xc1, 0x2e, 0xc3, 0xca, 0x78, 0x90, 0x2f, 0x8c, 0x1f, 0x2c, 0x28, 0x0b, 0x13,
	0xa6, 0x9c, 0x9a, 0xab, 0xca, 0xba, 0xa8, 0x2a, 0x11, 0x2a, 0xcb, 0xe2, 0x21, 0xac, 0x69, 0xb1,
	0x50, 0xa4, 0x37, 0xb5, 0x94, 0xd4, 0x35, 0xa8, 0x5a, 0x3a, 0x1e, 0x08, 0xac, 0x09, 0x6b, 0x42,
	0xcc, 0x80, 0x95, 0x9b, 0x01, 0x65, 0x55, 0x60, 0xa8, 0x19, 0x7c, 0xb1, 0xd0, 0x94, 0x24, 0x34,
	0x94, 0xc8, 0x4c, 0x6b, 0xe2, 0x27, 0x4b, 0x00, 0xfa, 0x31, 0x96, 0xc4, 0x75, 0x75, 0x49, 0x4c,
	0x2c, 0x8d, 0x27, 0x50, 0x37, 0x45, 0x44, 0x21, 0x6e, 0x69, 0xec, 0x37, 0x4d, 0x18, 0xb5, 0x04,
	0xbc, 0xb3, 0x00, 0xdd, 0x71, 0x9d, 0x38, 0x29, 0x5e, 0x12, 0x17, 0x00, 0x48, 0xdf, 0x79, 0x19,
	0x90, 0x9e, 0x13, 0x85, 0x69, 0xb8, 0xa5, 0xee, 0x02, 0x7b, 0xb3, 0x1d, 0x85, 0xe8, 0x0a, 0x20,
	0x3e, 0xec, 0x1d, 0xba, 0x61, 0xcf, 0x0d, 0x7c, 0xd2, 0x4f, 0xd2, 0x15, 0x52, 0xea, 0xae, 0xb2,
	0x91, 0xbb, 0x87, 0x6e, 0xb8, 0x93, 0xbe, 0x57, 0xad, 0x63, 0x12, 0x0d, 0x49, 0x64, 0xcf, 0xaa,
	0xd6, 0xfb, 0xe9, 0x7b, 0xf4, 0x6f, 0x58, 0xe6, 0xd6, 0x7d, 0x92, 0xbc, 0xf4, 0x07, 0xb1, 0x7d,
	0x2e, 0xb5, 0x5c, 0x62, 0x6f, 0x1f, 0xb1, 0x97, 0x62, 0x5d, 0xcc, 0xc9, 0x75, 0xf1, 0x10, 0xaa,
	0x3a, 0x42, 0xca, 0xd9, 0xa6, 0x5a, 0x16, 0x5c, 0xc6, 0x75, 0xeb, 0x2c, 0x05, 0x4d, 0xb0, 0x85,
	0xe1, 0xbb, 0x24, 0x20, 0x09, 0xe1, 0x46, 0xed, 0xe7, 0xd0, 0xca, 0x1b, 0xa3, 0x9f, 0xbb, 0xad,
	0x7e, 0x6e, 0x43, 0xfb, 0x9c, 0x34, 0x27, 0xfb, 0x68, 0x05, 0xca, 0x82, 0x11, 0x17, 0x85, 0x1f,
	0x2d, 0xa8, 0x48, 0x91, 0x4e, 0xb9, 0x3c, 0xaf, 0x29, 0xb2, 0x50, 0xd7, 0xa2, 0x55, 0x84, 0xe1,
	0x31, 0xd4, 0x0c, 0xf1, 0x50, 0xe4, 0xb7, 0xb4, 0xe2, 0x6c, 0x18, 0x98, 0xd6, 0x6a, 0xd3, 0x85,
	0x86, 0x81, 0x9b, 0xe9, 0xc2, 0x6c, 0x7f, 0x0d, 0xeb, 0xb9, 0x1f, 0xa1, 0xb1, 0x7f, 0xae, 0xc5,
	0x7e, 0x31, 0x37, 0x6d, 0x1a, 0x82, 0x1b, 0x52, 0xe9, 0x09, 0x02, 0x27, 0x54, 0xab, 0x25, 0x57,
	0xeb, 0x13, 0xa9, 0xc0, 0x64, 0x1d, 0xbb, 0xa5, 0x56, 0x50, 0x4b, 0x0b, 0xc5, 0xa4, 0x64, 0xbf,
	0x58, 0x52, 0x66, 0x3e, 0x86, 0x96, 0x6d, 0xaa, 0x5a, 0xf6, 0x01, 0x4b, 0xe9, 0xa9, 0x94, 0x5e,
	0x45, 0xcf, 0x6e, 0x6b, 0xb4, 0xaf, 0x9b, 0xb1, 0x6a, 0x9c, 0xff, 0x39, 0x03, 0x08, 0x4f, 0x56,
	0xb4, 0x1b, 0x50, 0xe5, 0xb2, 0xe2, 0x87, 0xc3, 0xad, 0x5e, 0x9f, 0xf8, 0x07, 0x87, 0x3d, 0xc7,
	0x1b, 0x72, 0x71, 0xe3, 0x0a, 0xb5, 0x17, 0x0e, 0xb7, 0x1e, 0xd1, 0xa1, 0x6d, 0x6f, 0x88, 0x6e,
	0x42, 0x4d, 0x9c, 0x12, 0x0d, 0x5e, 0x25, 0x24, 0x4a, 0xe7, 0x30, 0xa5, 0xab, 0x64, 0x73, 0xba,
	0xe9, 0x18, 0x9d, 0xd4, 0x81, 0x8a, 0x20, 0x76, 0x74, 0x1a, 0x09, 0x9c, 0x37, 0x5c, 0xed, 0xca,
	0x99, 0xda, 0x0d, 0xb7, 0xba, 0x74, 0x40, 0xb7, 0x3f, 0xa2, 0x58, 0xb8, 0xe6, 0x49, 0xf6, 0x29,
	0x48, 0xf4, 0x1f, 0x58, 0x11, 0x83, 0x3a, 0x0a, 0xbc, 0x54, 0xff, 0xc6, 0xfa, 0x48, 0xa3, 0xc1,
	0x41, 0x0e, 0xde, 0x78, 0x10, 0xd8, 0xf3, 0x46, 0xbc, 0xfb, 0x83, 0x40, 0x2c, 0xd2, 0x92, 0x26,
	0xa9, 0xf8, 0x58, 0x92, 0x8a, 0x0b, 0xea, 0xa0, 0x02, 0x65, 0x6c, 0x54, 0x37, 0xfc, 0xe9, 0xd5,
	0x0d, 0x17, 0xa9, 0x1b, 0x3e, 0xa6, 0xba, 0xe1, 0x42, 0x75, 0x6b, 0x82, 0x8d, 0x0b, 0x76, 0x12,
	0x7c, 0x82, 0x9d, 0x04, 0x4f, 0xdc, 0x49, 0x5c, 0x68, 0xe0, 0x4f, 0x21, 0xa9, 0xf8, 0x44, 0x92,
	0x8a, 0x3f, 0x4c, 0x52, 0xf1, 0xf1, 0x25, 0x15, 0x1f, 0x57, 0x52, 0xf1, 0x64, 0x49, 0xc5, 0xff,
	0x8c, 0xa4, 0xe2, 0x62, 0x49, 0xc5, 0xc7, 0x97, 0x54, 0x3c, 0x49, 0x52, 0xbf, 0x80, 0x15, 0x7a,
	0xaf, 0xc2, 0x03, 0x6f, 0x54, 0x51, 0xa8, 0x06, 0x73, 0x4c, 0x31, 0x52, 0x84, 0xa5, 0x2e, 0x7f,
	0x42, 0x08, 0x66, 0x8f, 0x06, 0x1e, 0xe1, 0x67, 0xf3, 0xf4, 0x77, 0xfb, 0x1e, 0xbb, 0xd6, 0x0b,
	0xd3, 0x69, 0x38, 0xd7, 0x54, 0xe6, 0xab, 0xd9, 0x0d, 0x4e, 0x30, 0xcd, 0xc0, 0xad, 0xc2, 0xf2,
	0x68, 0x8c, 0x17, 0xda, 0xf7, 0x16, 0xeb, 0x22, 0x30, 0xf3, 0x29, 0xf3, 0x7f, 0x45, 0x51, 0x88,
	0x35, 0x39, 0x3c, 0x45, 0x1e, 0xf6, 0xa0, 0xa2, 0x46, 0xc2, 0xf4, 0x50, 0xe5, 0xbc, 0xa6, 0xa2,
	0xd4, 0xd8, 0x5e, 0xcb, 0xe8, 0xca, 0x4a, 0x8f, 0x4a, 0xae, 0xfe, 0xb6, 0x48, 0x72, 0x75, 0xeb,
	0x8c, 0x4a, 0xaa, 0xae, 0xd2, 0xf8, 0xd4, 0xd5, 0x55, 0xa9, 0xdd, 0x49, 0xb9, 0x7d, 0x0c, 0x35,
	0x43, 0x3c, 0x85, 0xea, 0x6a, 0xb0, 0x17, 0x48, 0xfc, 0x16, 0x96, 0x77, 0xd8, 0xf2, 0x1f, 0x55,
	0x6c, 0x0b, 0x16, 0x92, 0xd7, 0x3d, 0xa9, 0x68, 0x4b, 0xc9, 0xeb, 0x7b, 0xac, 0x6c, 0x5b, 0xb0,
	0x10, 0x8d, 0x07, 0xd9, 0x09, 0xa0, 0x14, 0x8d, 0x06, 0xd7, 0xe0, 0x5c, 0x44, 0x62, 0x32, 0xba,
	0xd0, 0xb0, 0x07, 0x51, 0x6f, 0x66, 0x65, 0xbd, 0xd9, 0x81, 0xb2, 0xfc, 0x6d, 0x8a, 0xa3, 0xa3,
	0xa6, 0x89, 0xd7, 0x93, 0x6c, 0x99, 0x31, 0xb2, 0x02, 0x4b, 0x7c, 0x88, 0x17, 0xfb, 0x77, 0x16,
	0xac, 0x8c, 0x8d, 0xa7, 0x9c, 0xaf, 0xff, 0x2a, 0xb5, 0x5e, 0x91, 0x62, 0x53, 0x4a, 0x7d, 0x17,
	0x90, 0x12, 0x07, 0xeb, 0x01, 0xaa, 0x79, 0xaa, 0x2a, 0x00, 0xb5, 0x1c, 0x5d, 0x1d, 0xf3, 0xf4,
	0x41, 0x32, 0xbe, 0x07, 0x6b, 0x9a, 0x79, 0x51, 0xf7, 0x51, 0x33, 0xce, 0xc8, 0x7d, 0x6b, 0x8d,
	0x31, 0x7c, 0x8c, 0xf2, 0xef, 0xa8, 0xe5, 0x3f, 0x21, 0xd7, 0x18, 0xaa, 0x7a, 0x34, 0x85, 0x9d,
	0x46, 0xdd, 0x3c, 0xe3, 0x75, 0xf3, 0xb7, 0x25, 0x98, 0x7d, 0xe4, 0xc6, 0x3e, 0xc2, 0x62, 0x93,
	0x75, 0x27, 0x22, 0x4e, 0x42, 0x50, 0x33, 0xa7, 0xef, 0x86, 0xe3, 0x83, 0x66, 0x2b, 0xaf, 0x8d,
	0x89, 0xe3, 0x83, 0xf6, 0x19, 0xd9, 0x1d, 0xdb, 0xa0, 0x4f, 0xe3, 0xee, 0x4b, 0x58, 0x92, 0xba,
	0x75, 0xe8, 0x42, 0x7e, 0xab, 0x92, 0xba, 0xdb, 0x28, 0xe8, 0xf0, 0x31, 0x8f, 0x0f, 0x84, 0xd6,
	0x19, 0x87, 0xdb, 0x30, 0xf7, 0x54, 0xa8, 0xbf, 0x66, 0x4e, 0x7b, 0x4a, 0xf7, 0xc5, 0xb1, 0x9e,
	0xd8, 0x17, 0x86, 0xf3, 0x62, 0x1b, 0x06, 0xad, 0xe7, 0xb6, 0x9f, 0xa8, 0xaf, 0x0b, 0xf9, 0x8d,
	0x9b, 0x11, 0x71, 0x62, 0x3b, 0x80, 0x03, 0x6d, 0xe5, 0x5d, 0xb8, 0xa8, 0xcb, 0xf5, 0xdc, 0xeb,
	0xb6, 0xc9, 0xe3, 0xd3, 0xd0, 0x3b, 0xb5, 0xc7, 0x17, 0x92, 0x47, 0x4e, 0xe0, 0xbf, 0x8a, 0x1b,
	0x1e, 0xd4, 0x6f, 0x7b, 0xc2, 0xe5, 0x9a, 0x79, 0xdf, 0x87, 0x65, 0xf9, 0x1e, 0x88, 0x36, 0x0a,
	0x6e, 0xc2, 0xd4, 0xef, 0xc5, 0xa2, 0xdb, 0xe3, 0x98, 0x04, 0x9c, 0x47, 0x2b, 0x2e, 0x22, 0x01,
	0x17, 0xd0, 0x8a, 0xf3, 0x68, 0x3d, 0x99, 0xc7, 0x17, 0x92, 0x47, 0x99, 0x56, 0x3c, 0x99, 0x56,
	0x3c, 0x91, 0x56, 0x6c, 0xa4, 0x15, 0x4f, 0xa0, 0x15, 0x17, 0xd0, 0xba, 0x9b, 0x1d, 0xdb, 0x38,
	0xa7, 0xb6, 0xf1, 0x30, 0x40, 0xdd, 0x35, 0xcc, 0x87, 0x23, 0xcd, 0x11, 0xa7, 0xf2, 0xf4, 0x8e,
	0x38, 0x83, 0x27, 0x74, 0xf4, 0x00, 0x16, 0x85, 0x53, 0x08, 0x6a, 0xe5, 0x1d, 0xbc, 0x84, 0xcc,
	0x9a, 0x4f, 0x39, 0xed, 0x33, 0xe8, 0xee, 0x78, 0xbf, 0xe7, 0x2c, 0xd5, 0x4d, 0x7b, 0x06, 0xf5,
	0x64, 0x1b, 0xf7, 0x55, 0xd5, 0x0b, 0xa7, 0xe8, 0x94, 0x5e, 0x38, 0x3f, 0x27, 0xf2, 0xb2, 0x0b,
	0x90, 0x6d, 0x53, 0xa3, 0x8d, 0xc2, 0xb4, 0x83, 0x8f, 0x36, 0x0a, 0xe3, 0x1e, 0xd8, 0x3e, 0x73,
	0xa7, 0xf6, 0xeb, 0xfb, 0x0d, 0xeb, 0xf7, 0xf7, 0x1b, 0xd6, 0xbb, 0xf7, 0x1b, 0xd6, 0x57, 0xa5,
	0x43, 0x27, 0x48, 0xff, 0xcd, 0xf9, 0x72, 0x2e, 0xfd, 0x73, 0xf3, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x5c, 0x54, 0x3f, 0xdb, 0x1c, 0x1d, 0x00, 0x00,
}
