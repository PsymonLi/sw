// Code generated by MockGen. DO NOT EDIT.
// Source: internal.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisIpsecCbKeyHandle_KeyOrHandle is a mock of isIpsecCbKeyHandle_KeyOrHandle interface
type MockisIpsecCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisIpsecCbKeyHandle_KeyOrHandle
type MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisIpsecCbKeyHandle_KeyOrHandle
}

// NewMockisIpsecCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisIpsecCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisIpsecCbKeyHandle_KeyOrHandle {
	mock := &MockisIpsecCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisIpsecCbKeyHandle_KeyOrHandle) EXPECT() *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isIpsecCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisIpsecCbKeyHandle_KeyOrHandle) isIpsecCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isIpsecCbKeyHandle_KeyOrHandle")
}

// isIpsecCbKeyHandle_KeyOrHandle indicates an expected call of isIpsecCbKeyHandle_KeyOrHandle
func (mr *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder) isIpsecCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIpsecCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisIpsecCbKeyHandle_KeyOrHandle)(nil).isIpsecCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisIpsecCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisIpsecCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisIpsecCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisIpsecCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisIpsecCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisTcpCbKeyHandle_KeyOrHandle is a mock of isTcpCbKeyHandle_KeyOrHandle interface
type MockisTcpCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisTcpCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisTcpCbKeyHandle_KeyOrHandle
type MockisTcpCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisTcpCbKeyHandle_KeyOrHandle
}

// NewMockisTcpCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisTcpCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisTcpCbKeyHandle_KeyOrHandle {
	mock := &MockisTcpCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisTcpCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTcpCbKeyHandle_KeyOrHandle) EXPECT() *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isTcpCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisTcpCbKeyHandle_KeyOrHandle) isTcpCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isTcpCbKeyHandle_KeyOrHandle")
}

// isTcpCbKeyHandle_KeyOrHandle indicates an expected call of isTcpCbKeyHandle_KeyOrHandle
func (mr *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder) isTcpCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTcpCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisTcpCbKeyHandle_KeyOrHandle)(nil).isTcpCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisTcpCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTcpCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTcpCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTcpCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisTlsCbKeyHandle_KeyOrHandle is a mock of isTlsCbKeyHandle_KeyOrHandle interface
type MockisTlsCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisTlsCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisTlsCbKeyHandle_KeyOrHandle
type MockisTlsCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisTlsCbKeyHandle_KeyOrHandle
}

// NewMockisTlsCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisTlsCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisTlsCbKeyHandle_KeyOrHandle {
	mock := &MockisTlsCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisTlsCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTlsCbKeyHandle_KeyOrHandle) EXPECT() *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isTlsCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisTlsCbKeyHandle_KeyOrHandle) isTlsCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isTlsCbKeyHandle_KeyOrHandle")
}

// isTlsCbKeyHandle_KeyOrHandle indicates an expected call of isTlsCbKeyHandle_KeyOrHandle
func (mr *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder) isTlsCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTlsCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisTlsCbKeyHandle_KeyOrHandle)(nil).isTlsCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisTlsCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTlsCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTlsCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTlsCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisWRingKeyHandle_KeyOrHandle is a mock of isWRingKeyHandle_KeyOrHandle interface
type MockisWRingKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisWRingKeyHandle_KeyOrHandleMockRecorder
}

// MockisWRingKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisWRingKeyHandle_KeyOrHandle
type MockisWRingKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisWRingKeyHandle_KeyOrHandle
}

// NewMockisWRingKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisWRingKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisWRingKeyHandle_KeyOrHandle {
	mock := &MockisWRingKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisWRingKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisWRingKeyHandle_KeyOrHandle) EXPECT() *MockisWRingKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isWRingKeyHandle_KeyOrHandle mocks base method
func (m *MockisWRingKeyHandle_KeyOrHandle) isWRingKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isWRingKeyHandle_KeyOrHandle")
}

// isWRingKeyHandle_KeyOrHandle indicates an expected call of isWRingKeyHandle_KeyOrHandle
func (mr *MockisWRingKeyHandle_KeyOrHandleMockRecorder) isWRingKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isWRingKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisWRingKeyHandle_KeyOrHandle)(nil).isWRingKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisWRingKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisWRingKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisWRingKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisWRingKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisWRingKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisWRingKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisWRingGetEntriesResponse_WRingSlotInfo is a mock of isWRingGetEntriesResponse_WRingSlotInfo interface
type MockisWRingGetEntriesResponse_WRingSlotInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisWRingGetEntriesResponse_WRingSlotInfoMockRecorder
}

// MockisWRingGetEntriesResponse_WRingSlotInfoMockRecorder is the mock recorder for MockisWRingGetEntriesResponse_WRingSlotInfo
type MockisWRingGetEntriesResponse_WRingSlotInfoMockRecorder struct {
	mock *MockisWRingGetEntriesResponse_WRingSlotInfo
}

// NewMockisWRingGetEntriesResponse_WRingSlotInfo creates a new mock instance
func NewMockisWRingGetEntriesResponse_WRingSlotInfo(ctrl *gomock.Controller) *MockisWRingGetEntriesResponse_WRingSlotInfo {
	mock := &MockisWRingGetEntriesResponse_WRingSlotInfo{ctrl: ctrl}
	mock.recorder = &MockisWRingGetEntriesResponse_WRingSlotInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisWRingGetEntriesResponse_WRingSlotInfo) EXPECT() *MockisWRingGetEntriesResponse_WRingSlotInfoMockRecorder {
	return m.recorder
}

// isWRingGetEntriesResponse_WRingSlotInfo mocks base method
func (m *MockisWRingGetEntriesResponse_WRingSlotInfo) isWRingGetEntriesResponse_WRingSlotInfo() {
	m.ctrl.Call(m, "isWRingGetEntriesResponse_WRingSlotInfo")
}

// isWRingGetEntriesResponse_WRingSlotInfo indicates an expected call of isWRingGetEntriesResponse_WRingSlotInfo
func (mr *MockisWRingGetEntriesResponse_WRingSlotInfoMockRecorder) isWRingGetEntriesResponse_WRingSlotInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isWRingGetEntriesResponse_WRingSlotInfo", reflect.TypeOf((*MockisWRingGetEntriesResponse_WRingSlotInfo)(nil).isWRingGetEntriesResponse_WRingSlotInfo))
}

// MarshalTo mocks base method
func (m *MockisWRingGetEntriesResponse_WRingSlotInfo) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisWRingGetEntriesResponse_WRingSlotInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisWRingGetEntriesResponse_WRingSlotInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisWRingGetEntriesResponse_WRingSlotInfo) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisWRingGetEntriesResponse_WRingSlotInfoMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisWRingGetEntriesResponse_WRingSlotInfo)(nil).Size))
}

// MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg is a mock of isBarcoGetReqDescrEntryResponse_ReqDescrMsg interface
type MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg struct {
	ctrl     *gomock.Controller
	recorder *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsgMockRecorder
}

// MockisBarcoGetReqDescrEntryResponse_ReqDescrMsgMockRecorder is the mock recorder for MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg
type MockisBarcoGetReqDescrEntryResponse_ReqDescrMsgMockRecorder struct {
	mock *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg
}

// NewMockisBarcoGetReqDescrEntryResponse_ReqDescrMsg creates a new mock instance
func NewMockisBarcoGetReqDescrEntryResponse_ReqDescrMsg(ctrl *gomock.Controller) *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg {
	mock := &MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg{ctrl: ctrl}
	mock.recorder = &MockisBarcoGetReqDescrEntryResponse_ReqDescrMsgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg) EXPECT() *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsgMockRecorder {
	return m.recorder
}

// isBarcoGetReqDescrEntryResponse_ReqDescrMsg mocks base method
func (m *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg) isBarcoGetReqDescrEntryResponse_ReqDescrMsg() {
	m.ctrl.Call(m, "isBarcoGetReqDescrEntryResponse_ReqDescrMsg")
}

// isBarcoGetReqDescrEntryResponse_ReqDescrMsg indicates an expected call of isBarcoGetReqDescrEntryResponse_ReqDescrMsg
func (mr *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsgMockRecorder) isBarcoGetReqDescrEntryResponse_ReqDescrMsg() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isBarcoGetReqDescrEntryResponse_ReqDescrMsg", reflect.TypeOf((*MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg)(nil).isBarcoGetReqDescrEntryResponse_ReqDescrMsg))
}

// MarshalTo mocks base method
func (m *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsgMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisBarcoGetReqDescrEntryResponse_ReqDescrMsgMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisBarcoGetReqDescrEntryResponse_ReqDescrMsg)(nil).Size))
}

// MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo is a mock of isCryptoAsymApiRespSetupPrivateKey_KeyInfo interface
type MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder
}

// MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder is the mock recorder for MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo
type MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder struct {
	mock *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo
}

// NewMockisCryptoAsymApiRespSetupPrivateKey_KeyInfo creates a new mock instance
func NewMockisCryptoAsymApiRespSetupPrivateKey_KeyInfo(ctrl *gomock.Controller) *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo {
	mock := &MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo{ctrl: ctrl}
	mock.recorder = &MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo) EXPECT() *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder {
	return m.recorder
}

// isCryptoAsymApiRespSetupPrivateKey_KeyInfo mocks base method
func (m *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo() {
	m.ctrl.Call(m, "isCryptoAsymApiRespSetupPrivateKey_KeyInfo")
}

// isCryptoAsymApiRespSetupPrivateKey_KeyInfo indicates an expected call of isCryptoAsymApiRespSetupPrivateKey_KeyInfo
func (mr *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder) isCryptoAsymApiRespSetupPrivateKey_KeyInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCryptoAsymApiRespSetupPrivateKey_KeyInfo", reflect.TypeOf((*MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo)(nil).isCryptoAsymApiRespSetupPrivateKey_KeyInfo))
}

// MarshalTo mocks base method
func (m *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo)(nil).Size))
}

// MockisCryptoAsymApiReqSetupPrivateKeyEx_Key is a mock of isCryptoAsymApiReqSetupPrivateKeyEx_Key interface
type MockisCryptoAsymApiReqSetupPrivateKeyEx_Key struct {
	ctrl     *gomock.Controller
	recorder *MockisCryptoAsymApiReqSetupPrivateKeyEx_KeyMockRecorder
}

// MockisCryptoAsymApiReqSetupPrivateKeyEx_KeyMockRecorder is the mock recorder for MockisCryptoAsymApiReqSetupPrivateKeyEx_Key
type MockisCryptoAsymApiReqSetupPrivateKeyEx_KeyMockRecorder struct {
	mock *MockisCryptoAsymApiReqSetupPrivateKeyEx_Key
}

// NewMockisCryptoAsymApiReqSetupPrivateKeyEx_Key creates a new mock instance
func NewMockisCryptoAsymApiReqSetupPrivateKeyEx_Key(ctrl *gomock.Controller) *MockisCryptoAsymApiReqSetupPrivateKeyEx_Key {
	mock := &MockisCryptoAsymApiReqSetupPrivateKeyEx_Key{ctrl: ctrl}
	mock.recorder = &MockisCryptoAsymApiReqSetupPrivateKeyEx_KeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCryptoAsymApiReqSetupPrivateKeyEx_Key) EXPECT() *MockisCryptoAsymApiReqSetupPrivateKeyEx_KeyMockRecorder {
	return m.recorder
}

// isCryptoAsymApiReqSetupPrivateKeyEx_Key mocks base method
func (m *MockisCryptoAsymApiReqSetupPrivateKeyEx_Key) isCryptoAsymApiReqSetupPrivateKeyEx_Key() {
	m.ctrl.Call(m, "isCryptoAsymApiReqSetupPrivateKeyEx_Key")
}

// isCryptoAsymApiReqSetupPrivateKeyEx_Key indicates an expected call of isCryptoAsymApiReqSetupPrivateKeyEx_Key
func (mr *MockisCryptoAsymApiReqSetupPrivateKeyEx_KeyMockRecorder) isCryptoAsymApiReqSetupPrivateKeyEx_Key() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCryptoAsymApiReqSetupPrivateKeyEx_Key", reflect.TypeOf((*MockisCryptoAsymApiReqSetupPrivateKeyEx_Key)(nil).isCryptoAsymApiReqSetupPrivateKeyEx_Key))
}

// MarshalTo mocks base method
func (m *MockisCryptoAsymApiReqSetupPrivateKeyEx_Key) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCryptoAsymApiReqSetupPrivateKeyEx_KeyMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCryptoAsymApiReqSetupPrivateKeyEx_Key)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCryptoAsymApiReqSetupPrivateKeyEx_Key) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCryptoAsymApiReqSetupPrivateKeyEx_KeyMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCryptoAsymApiReqSetupPrivateKeyEx_Key)(nil).Size))
}

// MockisCryptoApiRequest_CryptoApiReq is a mock of isCryptoApiRequest_CryptoApiReq interface
type MockisCryptoApiRequest_CryptoApiReq struct {
	ctrl     *gomock.Controller
	recorder *MockisCryptoApiRequest_CryptoApiReqMockRecorder
}

// MockisCryptoApiRequest_CryptoApiReqMockRecorder is the mock recorder for MockisCryptoApiRequest_CryptoApiReq
type MockisCryptoApiRequest_CryptoApiReqMockRecorder struct {
	mock *MockisCryptoApiRequest_CryptoApiReq
}

// NewMockisCryptoApiRequest_CryptoApiReq creates a new mock instance
func NewMockisCryptoApiRequest_CryptoApiReq(ctrl *gomock.Controller) *MockisCryptoApiRequest_CryptoApiReq {
	mock := &MockisCryptoApiRequest_CryptoApiReq{ctrl: ctrl}
	mock.recorder = &MockisCryptoApiRequest_CryptoApiReqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCryptoApiRequest_CryptoApiReq) EXPECT() *MockisCryptoApiRequest_CryptoApiReqMockRecorder {
	return m.recorder
}

// isCryptoApiRequest_CryptoApiReq mocks base method
func (m *MockisCryptoApiRequest_CryptoApiReq) isCryptoApiRequest_CryptoApiReq() {
	m.ctrl.Call(m, "isCryptoApiRequest_CryptoApiReq")
}

// isCryptoApiRequest_CryptoApiReq indicates an expected call of isCryptoApiRequest_CryptoApiReq
func (mr *MockisCryptoApiRequest_CryptoApiReqMockRecorder) isCryptoApiRequest_CryptoApiReq() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCryptoApiRequest_CryptoApiReq", reflect.TypeOf((*MockisCryptoApiRequest_CryptoApiReq)(nil).isCryptoApiRequest_CryptoApiReq))
}

// MarshalTo mocks base method
func (m *MockisCryptoApiRequest_CryptoApiReq) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCryptoApiRequest_CryptoApiReqMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCryptoApiRequest_CryptoApiReq)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCryptoApiRequest_CryptoApiReq) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCryptoApiRequest_CryptoApiReqMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCryptoApiRequest_CryptoApiReq)(nil).Size))
}

// MockisCryptoApiResponse_CryptoApiResp is a mock of isCryptoApiResponse_CryptoApiResp interface
type MockisCryptoApiResponse_CryptoApiResp struct {
	ctrl     *gomock.Controller
	recorder *MockisCryptoApiResponse_CryptoApiRespMockRecorder
}

// MockisCryptoApiResponse_CryptoApiRespMockRecorder is the mock recorder for MockisCryptoApiResponse_CryptoApiResp
type MockisCryptoApiResponse_CryptoApiRespMockRecorder struct {
	mock *MockisCryptoApiResponse_CryptoApiResp
}

// NewMockisCryptoApiResponse_CryptoApiResp creates a new mock instance
func NewMockisCryptoApiResponse_CryptoApiResp(ctrl *gomock.Controller) *MockisCryptoApiResponse_CryptoApiResp {
	mock := &MockisCryptoApiResponse_CryptoApiResp{ctrl: ctrl}
	mock.recorder = &MockisCryptoApiResponse_CryptoApiRespMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCryptoApiResponse_CryptoApiResp) EXPECT() *MockisCryptoApiResponse_CryptoApiRespMockRecorder {
	return m.recorder
}

// isCryptoApiResponse_CryptoApiResp mocks base method
func (m *MockisCryptoApiResponse_CryptoApiResp) isCryptoApiResponse_CryptoApiResp() {
	m.ctrl.Call(m, "isCryptoApiResponse_CryptoApiResp")
}

// isCryptoApiResponse_CryptoApiResp indicates an expected call of isCryptoApiResponse_CryptoApiResp
func (mr *MockisCryptoApiResponse_CryptoApiRespMockRecorder) isCryptoApiResponse_CryptoApiResp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCryptoApiResponse_CryptoApiResp", reflect.TypeOf((*MockisCryptoApiResponse_CryptoApiResp)(nil).isCryptoApiResponse_CryptoApiResp))
}

// MarshalTo mocks base method
func (m *MockisCryptoApiResponse_CryptoApiResp) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCryptoApiResponse_CryptoApiRespMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCryptoApiResponse_CryptoApiResp)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCryptoApiResponse_CryptoApiResp) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCryptoApiResponse_CryptoApiRespMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCryptoApiResponse_CryptoApiResp)(nil).Size))
}

// MockisProxycCbKeyHandle_KeyOrHandle is a mock of isProxycCbKeyHandle_KeyOrHandle interface
type MockisProxycCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisProxycCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisProxycCbKeyHandle_KeyOrHandle
type MockisProxycCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisProxycCbKeyHandle_KeyOrHandle
}

// NewMockisProxycCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisProxycCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisProxycCbKeyHandle_KeyOrHandle {
	mock := &MockisProxycCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisProxycCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisProxycCbKeyHandle_KeyOrHandle) EXPECT() *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isProxycCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisProxycCbKeyHandle_KeyOrHandle) isProxycCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isProxycCbKeyHandle_KeyOrHandle")
}

// isProxycCbKeyHandle_KeyOrHandle indicates an expected call of isProxycCbKeyHandle_KeyOrHandle
func (mr *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder) isProxycCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isProxycCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisProxycCbKeyHandle_KeyOrHandle)(nil).isProxycCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisProxycCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisProxycCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisProxycCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisProxycCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisProxycCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisProxyrCbKeyHandle_KeyOrHandle is a mock of isProxyrCbKeyHandle_KeyOrHandle interface
type MockisProxyrCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisProxyrCbKeyHandle_KeyOrHandle
type MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisProxyrCbKeyHandle_KeyOrHandle
}

// NewMockisProxyrCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisProxyrCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisProxyrCbKeyHandle_KeyOrHandle {
	mock := &MockisProxyrCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisProxyrCbKeyHandle_KeyOrHandle) EXPECT() *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isProxyrCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisProxyrCbKeyHandle_KeyOrHandle) isProxyrCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isProxyrCbKeyHandle_KeyOrHandle")
}

// isProxyrCbKeyHandle_KeyOrHandle indicates an expected call of isProxyrCbKeyHandle_KeyOrHandle
func (mr *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder) isProxyrCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isProxyrCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisProxyrCbKeyHandle_KeyOrHandle)(nil).isProxyrCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisProxyrCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisProxyrCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisProxyrCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisProxyrCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisProxyrCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisRawrCbKeyHandle_KeyOrHandle is a mock of isRawrCbKeyHandle_KeyOrHandle interface
type MockisRawrCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisRawrCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisRawrCbKeyHandle_KeyOrHandle
type MockisRawrCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisRawrCbKeyHandle_KeyOrHandle
}

// NewMockisRawrCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisRawrCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisRawrCbKeyHandle_KeyOrHandle {
	mock := &MockisRawrCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisRawrCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRawrCbKeyHandle_KeyOrHandle) EXPECT() *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isRawrCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisRawrCbKeyHandle_KeyOrHandle) isRawrCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isRawrCbKeyHandle_KeyOrHandle")
}

// isRawrCbKeyHandle_KeyOrHandle indicates an expected call of isRawrCbKeyHandle_KeyOrHandle
func (mr *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder) isRawrCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRawrCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisRawrCbKeyHandle_KeyOrHandle)(nil).isRawrCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisRawrCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRawrCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisRawrCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRawrCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockisRawcCbKeyHandle_KeyOrHandle is a mock of isRawcCbKeyHandle_KeyOrHandle interface
type MockisRawcCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisRawcCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisRawcCbKeyHandle_KeyOrHandle
type MockisRawcCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisRawcCbKeyHandle_KeyOrHandle
}

// NewMockisRawcCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisRawcCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisRawcCbKeyHandle_KeyOrHandle {
	mock := &MockisRawcCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisRawcCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRawcCbKeyHandle_KeyOrHandle) EXPECT() *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isRawcCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisRawcCbKeyHandle_KeyOrHandle) isRawcCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isRawcCbKeyHandle_KeyOrHandle")
}

// isRawcCbKeyHandle_KeyOrHandle indicates an expected call of isRawcCbKeyHandle_KeyOrHandle
func (mr *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder) isRawcCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRawcCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisRawcCbKeyHandle_KeyOrHandle)(nil).isRawcCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisRawcCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRawcCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisRawcCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRawcCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockInternalClient is a mock of InternalClient interface
type MockInternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockInternalClientMockRecorder
}

// MockInternalClientMockRecorder is the mock recorder for MockInternalClient
type MockInternalClientMockRecorder struct {
	mock *MockInternalClient
}

// NewMockInternalClient creates a new mock instance
func NewMockInternalClient(ctrl *gomock.Controller) *MockInternalClient {
	mock := &MockInternalClient{ctrl: ctrl}
	mock.recorder = &MockInternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInternalClient) EXPECT() *MockInternalClientMockRecorder {
	return m.recorder
}

// GetProgramAddress mocks base method
func (m *MockInternalClient) GetProgramAddress(ctx context.Context, in *GetProgramAddressRequestMsg, opts ...grpc.CallOption) (*ProgramAddressResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProgramAddress", varargs...)
	ret0, _ := ret[0].(*ProgramAddressResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgramAddress indicates an expected call of GetProgramAddress
func (mr *MockInternalClientMockRecorder) GetProgramAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgramAddress", reflect.TypeOf((*MockInternalClient)(nil).GetProgramAddress), varargs...)
}

// AllocHbmAddress mocks base method
func (m *MockInternalClient) AllocHbmAddress(ctx context.Context, in *AllocHbmAddressRequestMsg, opts ...grpc.CallOption) (*AllocHbmAddressResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocHbmAddress", varargs...)
	ret0, _ := ret[0].(*AllocHbmAddressResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocHbmAddress indicates an expected call of AllocHbmAddress
func (mr *MockInternalClientMockRecorder) AllocHbmAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocHbmAddress", reflect.TypeOf((*MockInternalClient)(nil).AllocHbmAddress), varargs...)
}

// ConfigureLifBdf mocks base method
func (m *MockInternalClient) ConfigureLifBdf(ctx context.Context, in *ConfigureLifBdfRequestMsg, opts ...grpc.CallOption) (*ConfigureLifBdfResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigureLifBdf", varargs...)
	ret0, _ := ret[0].(*ConfigureLifBdfResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureLifBdf indicates an expected call of ConfigureLifBdf
func (mr *MockInternalClientMockRecorder) ConfigureLifBdf(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLifBdf", reflect.TypeOf((*MockInternalClient)(nil).ConfigureLifBdf), varargs...)
}

// SoftwarePhvInject mocks base method
func (m *MockInternalClient) SoftwarePhvInject(ctx context.Context, in *SoftwarePhvInjectMsg, opts ...grpc.CallOption) (*SoftwarePhvResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SoftwarePhvInject", varargs...)
	ret0, _ := ret[0].(*SoftwarePhvResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwarePhvInject indicates an expected call of SoftwarePhvInject
func (mr *MockInternalClientMockRecorder) SoftwarePhvInject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwarePhvInject", reflect.TypeOf((*MockInternalClient)(nil).SoftwarePhvInject), varargs...)
}

// SoftwarePhvGet mocks base method
func (m *MockInternalClient) SoftwarePhvGet(ctx context.Context, in *SoftwarePhvGetRequestMsg, opts ...grpc.CallOption) (*SoftwarePhvGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SoftwarePhvGet", varargs...)
	ret0, _ := ret[0].(*SoftwarePhvGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwarePhvGet indicates an expected call of SoftwarePhvGet
func (mr *MockInternalClientMockRecorder) SoftwarePhvGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwarePhvGet", reflect.TypeOf((*MockInternalClient)(nil).SoftwarePhvGet), varargs...)
}

// LogFlow mocks base method
func (m *MockInternalClient) LogFlow(ctx context.Context, in *LogFlowRequestMsg, opts ...grpc.CallOption) (*LogFlowResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogFlow", varargs...)
	ret0, _ := ret[0].(*LogFlowResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogFlow indicates an expected call of LogFlow
func (mr *MockInternalClientMockRecorder) LogFlow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFlow", reflect.TypeOf((*MockInternalClient)(nil).LogFlow), varargs...)
}

// QuiesceMsgSnd mocks base method
func (m *MockInternalClient) QuiesceMsgSnd(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuiesceMsgSnd", varargs...)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceMsgSnd indicates an expected call of QuiesceMsgSnd
func (mr *MockInternalClientMockRecorder) QuiesceMsgSnd(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceMsgSnd", reflect.TypeOf((*MockInternalClient)(nil).QuiesceMsgSnd), varargs...)
}

// QuiesceStart mocks base method
func (m *MockInternalClient) QuiesceStart(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuiesceStart", varargs...)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceStart indicates an expected call of QuiesceStart
func (mr *MockInternalClientMockRecorder) QuiesceStart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceStart", reflect.TypeOf((*MockInternalClient)(nil).QuiesceStart), varargs...)
}

// QuiesceStop mocks base method
func (m *MockInternalClient) QuiesceStop(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuiesceStop", varargs...)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceStop indicates an expected call of QuiesceStop
func (mr *MockInternalClientMockRecorder) QuiesceStop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceStop", reflect.TypeOf((*MockInternalClient)(nil).QuiesceStop), varargs...)
}

// IpsecCbCreate mocks base method
func (m *MockInternalClient) IpsecCbCreate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpsecCbCreate", varargs...)
	ret0, _ := ret[0].(*IpsecCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbCreate indicates an expected call of IpsecCbCreate
func (mr *MockInternalClientMockRecorder) IpsecCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbCreate", reflect.TypeOf((*MockInternalClient)(nil).IpsecCbCreate), varargs...)
}

// IpsecCbUpdate mocks base method
func (m *MockInternalClient) IpsecCbUpdate(ctx context.Context, in *IpsecCbRequestMsg, opts ...grpc.CallOption) (*IpsecCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpsecCbUpdate", varargs...)
	ret0, _ := ret[0].(*IpsecCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbUpdate indicates an expected call of IpsecCbUpdate
func (mr *MockInternalClientMockRecorder) IpsecCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbUpdate", reflect.TypeOf((*MockInternalClient)(nil).IpsecCbUpdate), varargs...)
}

// IpsecCbDelete mocks base method
func (m *MockInternalClient) IpsecCbDelete(ctx context.Context, in *IpsecCbDeleteRequestMsg, opts ...grpc.CallOption) (*IpsecCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpsecCbDelete", varargs...)
	ret0, _ := ret[0].(*IpsecCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbDelete indicates an expected call of IpsecCbDelete
func (mr *MockInternalClientMockRecorder) IpsecCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbDelete", reflect.TypeOf((*MockInternalClient)(nil).IpsecCbDelete), varargs...)
}

// IpsecCbGet mocks base method
func (m *MockInternalClient) IpsecCbGet(ctx context.Context, in *IpsecCbGetRequestMsg, opts ...grpc.CallOption) (*IpsecCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IpsecCbGet", varargs...)
	ret0, _ := ret[0].(*IpsecCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbGet indicates an expected call of IpsecCbGet
func (mr *MockInternalClientMockRecorder) IpsecCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbGet", reflect.TypeOf((*MockInternalClient)(nil).IpsecCbGet), varargs...)
}

// TcpCbCreate mocks base method
func (m *MockInternalClient) TcpCbCreate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TcpCbCreate", varargs...)
	ret0, _ := ret[0].(*TcpCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbCreate indicates an expected call of TcpCbCreate
func (mr *MockInternalClientMockRecorder) TcpCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbCreate", reflect.TypeOf((*MockInternalClient)(nil).TcpCbCreate), varargs...)
}

// TcpCbUpdate mocks base method
func (m *MockInternalClient) TcpCbUpdate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TcpCbUpdate", varargs...)
	ret0, _ := ret[0].(*TcpCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbUpdate indicates an expected call of TcpCbUpdate
func (mr *MockInternalClientMockRecorder) TcpCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbUpdate", reflect.TypeOf((*MockInternalClient)(nil).TcpCbUpdate), varargs...)
}

// TcpCbDelete mocks base method
func (m *MockInternalClient) TcpCbDelete(ctx context.Context, in *TcpCbDeleteRequestMsg, opts ...grpc.CallOption) (*TcpCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TcpCbDelete", varargs...)
	ret0, _ := ret[0].(*TcpCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbDelete indicates an expected call of TcpCbDelete
func (mr *MockInternalClientMockRecorder) TcpCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbDelete", reflect.TypeOf((*MockInternalClient)(nil).TcpCbDelete), varargs...)
}

// TcpCbGet mocks base method
func (m *MockInternalClient) TcpCbGet(ctx context.Context, in *TcpCbGetRequestMsg, opts ...grpc.CallOption) (*TcpCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TcpCbGet", varargs...)
	ret0, _ := ret[0].(*TcpCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbGet indicates an expected call of TcpCbGet
func (mr *MockInternalClientMockRecorder) TcpCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbGet", reflect.TypeOf((*MockInternalClient)(nil).TcpCbGet), varargs...)
}

// TlsCbCreate mocks base method
func (m *MockInternalClient) TlsCbCreate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TlsCbCreate", varargs...)
	ret0, _ := ret[0].(*TlsCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbCreate indicates an expected call of TlsCbCreate
func (mr *MockInternalClientMockRecorder) TlsCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbCreate", reflect.TypeOf((*MockInternalClient)(nil).TlsCbCreate), varargs...)
}

// TlsCbUpdate mocks base method
func (m *MockInternalClient) TlsCbUpdate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TlsCbUpdate", varargs...)
	ret0, _ := ret[0].(*TlsCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbUpdate indicates an expected call of TlsCbUpdate
func (mr *MockInternalClientMockRecorder) TlsCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbUpdate", reflect.TypeOf((*MockInternalClient)(nil).TlsCbUpdate), varargs...)
}

// TlsCbDelete mocks base method
func (m *MockInternalClient) TlsCbDelete(ctx context.Context, in *TlsCbDeleteRequestMsg, opts ...grpc.CallOption) (*TlsCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TlsCbDelete", varargs...)
	ret0, _ := ret[0].(*TlsCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbDelete indicates an expected call of TlsCbDelete
func (mr *MockInternalClientMockRecorder) TlsCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbDelete", reflect.TypeOf((*MockInternalClient)(nil).TlsCbDelete), varargs...)
}

// TlsCbGet mocks base method
func (m *MockInternalClient) TlsCbGet(ctx context.Context, in *TlsCbGetRequestMsg, opts ...grpc.CallOption) (*TlsCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TlsCbGet", varargs...)
	ret0, _ := ret[0].(*TlsCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbGet indicates an expected call of TlsCbGet
func (mr *MockInternalClientMockRecorder) TlsCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbGet", reflect.TypeOf((*MockInternalClient)(nil).TlsCbGet), varargs...)
}

// WRingCreate mocks base method
func (m *MockInternalClient) WRingCreate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WRingCreate", varargs...)
	ret0, _ := ret[0].(*WRingResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingCreate indicates an expected call of WRingCreate
func (mr *MockInternalClientMockRecorder) WRingCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingCreate", reflect.TypeOf((*MockInternalClient)(nil).WRingCreate), varargs...)
}

// WRingUpdate mocks base method
func (m *MockInternalClient) WRingUpdate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WRingUpdate", varargs...)
	ret0, _ := ret[0].(*WRingResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingUpdate indicates an expected call of WRingUpdate
func (mr *MockInternalClientMockRecorder) WRingUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingUpdate", reflect.TypeOf((*MockInternalClient)(nil).WRingUpdate), varargs...)
}

// WRingGetEntries mocks base method
func (m *MockInternalClient) WRingGetEntries(ctx context.Context, in *WRingGetEntriesRequestMsg, opts ...grpc.CallOption) (*WRingGetEntriesResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WRingGetEntries", varargs...)
	ret0, _ := ret[0].(*WRingGetEntriesResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingGetEntries indicates an expected call of WRingGetEntries
func (mr *MockInternalClientMockRecorder) WRingGetEntries(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingGetEntries", reflect.TypeOf((*MockInternalClient)(nil).WRingGetEntries), varargs...)
}

// WRingGetMeta mocks base method
func (m *MockInternalClient) WRingGetMeta(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingGetMetaResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WRingGetMeta", varargs...)
	ret0, _ := ret[0].(*WRingGetMetaResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingGetMeta indicates an expected call of WRingGetMeta
func (mr *MockInternalClientMockRecorder) WRingGetMeta(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingGetMeta", reflect.TypeOf((*MockInternalClient)(nil).WRingGetMeta), varargs...)
}

// WRingSetMeta mocks base method
func (m *MockInternalClient) WRingSetMeta(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingSetMetaResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WRingSetMeta", varargs...)
	ret0, _ := ret[0].(*WRingSetMetaResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingSetMeta indicates an expected call of WRingSetMeta
func (mr *MockInternalClientMockRecorder) WRingSetMeta(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingSetMeta", reflect.TypeOf((*MockInternalClient)(nil).WRingSetMeta), varargs...)
}

// GetOpaqueTagAddr mocks base method
func (m *MockInternalClient) GetOpaqueTagAddr(ctx context.Context, in *GetOpaqueTagAddrRequestMsg, opts ...grpc.CallOption) (*GetOpaqueTagAddrResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpaqueTagAddr", varargs...)
	ret0, _ := ret[0].(*GetOpaqueTagAddrResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpaqueTagAddr indicates an expected call of GetOpaqueTagAddr
func (mr *MockInternalClientMockRecorder) GetOpaqueTagAddr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpaqueTagAddr", reflect.TypeOf((*MockInternalClient)(nil).GetOpaqueTagAddr), varargs...)
}

// BarcoGetReqDescrEntry mocks base method
func (m *MockInternalClient) BarcoGetReqDescrEntry(ctx context.Context, in *BarcoGetReqDescrEntryRequestMsg, opts ...grpc.CallOption) (*BarcoGetReqDescrEntryResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BarcoGetReqDescrEntry", varargs...)
	ret0, _ := ret[0].(*BarcoGetReqDescrEntryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BarcoGetReqDescrEntry indicates an expected call of BarcoGetReqDescrEntry
func (mr *MockInternalClientMockRecorder) BarcoGetReqDescrEntry(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BarcoGetReqDescrEntry", reflect.TypeOf((*MockInternalClient)(nil).BarcoGetReqDescrEntry), varargs...)
}

// BarcoGetRingMeta mocks base method
func (m *MockInternalClient) BarcoGetRingMeta(ctx context.Context, in *BarcoGetRingMetaRequestMsg, opts ...grpc.CallOption) (*BarcoGetRingMetaResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BarcoGetRingMeta", varargs...)
	ret0, _ := ret[0].(*BarcoGetRingMetaResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BarcoGetRingMeta indicates an expected call of BarcoGetRingMeta
func (mr *MockInternalClientMockRecorder) BarcoGetRingMeta(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BarcoGetRingMeta", reflect.TypeOf((*MockInternalClient)(nil).BarcoGetRingMeta), varargs...)
}

// BarcoGetRingMetaConfig mocks base method
func (m *MockInternalClient) BarcoGetRingMetaConfig(ctx context.Context, in *BarcoGetRingMetaConfigRequestMsg, opts ...grpc.CallOption) (*BarcoGetRingMetaConfigResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BarcoGetRingMetaConfig", varargs...)
	ret0, _ := ret[0].(*BarcoGetRingMetaConfigResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BarcoGetRingMetaConfig indicates an expected call of BarcoGetRingMetaConfig
func (mr *MockInternalClientMockRecorder) BarcoGetRingMetaConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BarcoGetRingMetaConfig", reflect.TypeOf((*MockInternalClient)(nil).BarcoGetRingMetaConfig), varargs...)
}

// CryptoKeyCreate mocks base method
func (m *MockInternalClient) CryptoKeyCreate(ctx context.Context, in *CryptoKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoKeyCreate", varargs...)
	ret0, _ := ret[0].(*CryptoKeyCreateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyCreate indicates an expected call of CryptoKeyCreate
func (mr *MockInternalClientMockRecorder) CryptoKeyCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyCreate", reflect.TypeOf((*MockInternalClient)(nil).CryptoKeyCreate), varargs...)
}

// CryptoKeyCreateWithId mocks base method
func (m *MockInternalClient) CryptoKeyCreateWithId(ctx context.Context, in *CryptoKeyCreateWithIdRequestMsg, opts ...grpc.CallOption) (*CryptoKeyCreateWithIdResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoKeyCreateWithId", varargs...)
	ret0, _ := ret[0].(*CryptoKeyCreateWithIdResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyCreateWithId indicates an expected call of CryptoKeyCreateWithId
func (mr *MockInternalClientMockRecorder) CryptoKeyCreateWithId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyCreateWithId", reflect.TypeOf((*MockInternalClient)(nil).CryptoKeyCreateWithId), varargs...)
}

// CryptoKeyRead mocks base method
func (m *MockInternalClient) CryptoKeyRead(ctx context.Context, in *CryptoKeyReadRequestMsg, opts ...grpc.CallOption) (*CryptoKeyReadResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoKeyRead", varargs...)
	ret0, _ := ret[0].(*CryptoKeyReadResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyRead indicates an expected call of CryptoKeyRead
func (mr *MockInternalClientMockRecorder) CryptoKeyRead(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyRead", reflect.TypeOf((*MockInternalClient)(nil).CryptoKeyRead), varargs...)
}

// CryptoKeyUpdate mocks base method
func (m *MockInternalClient) CryptoKeyUpdate(ctx context.Context, in *CryptoKeyUpdateRequestMsg, opts ...grpc.CallOption) (*CryptoKeyUpdateResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoKeyUpdate", varargs...)
	ret0, _ := ret[0].(*CryptoKeyUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyUpdate indicates an expected call of CryptoKeyUpdate
func (mr *MockInternalClientMockRecorder) CryptoKeyUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyUpdate", reflect.TypeOf((*MockInternalClient)(nil).CryptoKeyUpdate), varargs...)
}

// CryptoKeyDelete mocks base method
func (m *MockInternalClient) CryptoKeyDelete(ctx context.Context, in *CryptoKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoKeyDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoKeyDelete", varargs...)
	ret0, _ := ret[0].(*CryptoKeyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyDelete indicates an expected call of CryptoKeyDelete
func (mr *MockInternalClientMockRecorder) CryptoKeyDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyDelete", reflect.TypeOf((*MockInternalClient)(nil).CryptoKeyDelete), varargs...)
}

// CryptoAsymKeyCreate mocks base method
func (m *MockInternalClient) CryptoAsymKeyCreate(ctx context.Context, in *CryptoAsymKeyCreateRequestMsg, opts ...grpc.CallOption) (*CryptoAsymKeyCreateResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoAsymKeyCreate", varargs...)
	ret0, _ := ret[0].(*CryptoAsymKeyCreateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoAsymKeyCreate indicates an expected call of CryptoAsymKeyCreate
func (mr *MockInternalClientMockRecorder) CryptoAsymKeyCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoAsymKeyCreate", reflect.TypeOf((*MockInternalClient)(nil).CryptoAsymKeyCreate), varargs...)
}

// CryptoAsymKeyDelete mocks base method
func (m *MockInternalClient) CryptoAsymKeyDelete(ctx context.Context, in *CryptoAsymKeyDeleteRequestMsg, opts ...grpc.CallOption) (*CryptoAsymKeyDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoAsymKeyDelete", varargs...)
	ret0, _ := ret[0].(*CryptoAsymKeyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoAsymKeyDelete indicates an expected call of CryptoAsymKeyDelete
func (mr *MockInternalClientMockRecorder) CryptoAsymKeyDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoAsymKeyDelete", reflect.TypeOf((*MockInternalClient)(nil).CryptoAsymKeyDelete), varargs...)
}

// CryptoAsymKeyWrite mocks base method
func (m *MockInternalClient) CryptoAsymKeyWrite(ctx context.Context, in *CryptoAsymKeyWriteRequestMsg, opts ...grpc.CallOption) (*CryptoAsymKeyWriteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoAsymKeyWrite", varargs...)
	ret0, _ := ret[0].(*CryptoAsymKeyWriteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoAsymKeyWrite indicates an expected call of CryptoAsymKeyWrite
func (mr *MockInternalClientMockRecorder) CryptoAsymKeyWrite(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoAsymKeyWrite", reflect.TypeOf((*MockInternalClient)(nil).CryptoAsymKeyWrite), varargs...)
}

// CryptoApiInvoke mocks base method
func (m *MockInternalClient) CryptoApiInvoke(ctx context.Context, in *CryptoApiRequestMsg, opts ...grpc.CallOption) (*CryptoApiResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoApiInvoke", varargs...)
	ret0, _ := ret[0].(*CryptoApiResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoApiInvoke indicates an expected call of CryptoApiInvoke
func (mr *MockInternalClientMockRecorder) CryptoApiInvoke(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoApiInvoke", reflect.TypeOf((*MockInternalClient)(nil).CryptoApiInvoke), varargs...)
}

// DescrAolGet mocks base method
func (m *MockInternalClient) DescrAolGet(ctx context.Context, in *DescrAolRequestMsg, opts ...grpc.CallOption) (*DescrAolResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescrAolGet", varargs...)
	ret0, _ := ret[0].(*DescrAolResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescrAolGet indicates an expected call of DescrAolGet
func (mr *MockInternalClientMockRecorder) DescrAolGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescrAolGet", reflect.TypeOf((*MockInternalClient)(nil).DescrAolGet), varargs...)
}

// ProxycCbCreate mocks base method
func (m *MockInternalClient) ProxycCbCreate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxycCbCreate", varargs...)
	ret0, _ := ret[0].(*ProxycCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbCreate indicates an expected call of ProxycCbCreate
func (mr *MockInternalClientMockRecorder) ProxycCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbCreate", reflect.TypeOf((*MockInternalClient)(nil).ProxycCbCreate), varargs...)
}

// ProxycCbUpdate mocks base method
func (m *MockInternalClient) ProxycCbUpdate(ctx context.Context, in *ProxycCbRequestMsg, opts ...grpc.CallOption) (*ProxycCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxycCbUpdate", varargs...)
	ret0, _ := ret[0].(*ProxycCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbUpdate indicates an expected call of ProxycCbUpdate
func (mr *MockInternalClientMockRecorder) ProxycCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbUpdate", reflect.TypeOf((*MockInternalClient)(nil).ProxycCbUpdate), varargs...)
}

// ProxycCbDelete mocks base method
func (m *MockInternalClient) ProxycCbDelete(ctx context.Context, in *ProxycCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxycCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxycCbDelete", varargs...)
	ret0, _ := ret[0].(*ProxycCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbDelete indicates an expected call of ProxycCbDelete
func (mr *MockInternalClientMockRecorder) ProxycCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbDelete", reflect.TypeOf((*MockInternalClient)(nil).ProxycCbDelete), varargs...)
}

// ProxycCbGet mocks base method
func (m *MockInternalClient) ProxycCbGet(ctx context.Context, in *ProxycCbGetRequestMsg, opts ...grpc.CallOption) (*ProxycCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxycCbGet", varargs...)
	ret0, _ := ret[0].(*ProxycCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbGet indicates an expected call of ProxycCbGet
func (mr *MockInternalClientMockRecorder) ProxycCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbGet", reflect.TypeOf((*MockInternalClient)(nil).ProxycCbGet), varargs...)
}

// ProxyrCbCreate mocks base method
func (m *MockInternalClient) ProxyrCbCreate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyrCbCreate", varargs...)
	ret0, _ := ret[0].(*ProxyrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbCreate indicates an expected call of ProxyrCbCreate
func (mr *MockInternalClientMockRecorder) ProxyrCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbCreate", reflect.TypeOf((*MockInternalClient)(nil).ProxyrCbCreate), varargs...)
}

// ProxyrCbUpdate mocks base method
func (m *MockInternalClient) ProxyrCbUpdate(ctx context.Context, in *ProxyrCbRequestMsg, opts ...grpc.CallOption) (*ProxyrCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyrCbUpdate", varargs...)
	ret0, _ := ret[0].(*ProxyrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbUpdate indicates an expected call of ProxyrCbUpdate
func (mr *MockInternalClientMockRecorder) ProxyrCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbUpdate", reflect.TypeOf((*MockInternalClient)(nil).ProxyrCbUpdate), varargs...)
}

// ProxyrCbDelete mocks base method
func (m *MockInternalClient) ProxyrCbDelete(ctx context.Context, in *ProxyrCbDeleteRequestMsg, opts ...grpc.CallOption) (*ProxyrCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyrCbDelete", varargs...)
	ret0, _ := ret[0].(*ProxyrCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbDelete indicates an expected call of ProxyrCbDelete
func (mr *MockInternalClientMockRecorder) ProxyrCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbDelete", reflect.TypeOf((*MockInternalClient)(nil).ProxyrCbDelete), varargs...)
}

// ProxyrCbGet mocks base method
func (m *MockInternalClient) ProxyrCbGet(ctx context.Context, in *ProxyrCbGetRequestMsg, opts ...grpc.CallOption) (*ProxyrCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProxyrCbGet", varargs...)
	ret0, _ := ret[0].(*ProxyrCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbGet indicates an expected call of ProxyrCbGet
func (mr *MockInternalClientMockRecorder) ProxyrCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbGet", reflect.TypeOf((*MockInternalClient)(nil).ProxyrCbGet), varargs...)
}

// RawrCbCreate mocks base method
func (m *MockInternalClient) RawrCbCreate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawrCbCreate", varargs...)
	ret0, _ := ret[0].(*RawrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbCreate indicates an expected call of RawrCbCreate
func (mr *MockInternalClientMockRecorder) RawrCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbCreate", reflect.TypeOf((*MockInternalClient)(nil).RawrCbCreate), varargs...)
}

// RawrCbUpdate mocks base method
func (m *MockInternalClient) RawrCbUpdate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawrCbUpdate", varargs...)
	ret0, _ := ret[0].(*RawrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbUpdate indicates an expected call of RawrCbUpdate
func (mr *MockInternalClientMockRecorder) RawrCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbUpdate", reflect.TypeOf((*MockInternalClient)(nil).RawrCbUpdate), varargs...)
}

// RawrCbDelete mocks base method
func (m *MockInternalClient) RawrCbDelete(ctx context.Context, in *RawrCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawrCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawrCbDelete", varargs...)
	ret0, _ := ret[0].(*RawrCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbDelete indicates an expected call of RawrCbDelete
func (mr *MockInternalClientMockRecorder) RawrCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbDelete", reflect.TypeOf((*MockInternalClient)(nil).RawrCbDelete), varargs...)
}

// RawrCbGet mocks base method
func (m *MockInternalClient) RawrCbGet(ctx context.Context, in *RawrCbGetRequestMsg, opts ...grpc.CallOption) (*RawrCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawrCbGet", varargs...)
	ret0, _ := ret[0].(*RawrCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbGet indicates an expected call of RawrCbGet
func (mr *MockInternalClientMockRecorder) RawrCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbGet", reflect.TypeOf((*MockInternalClient)(nil).RawrCbGet), varargs...)
}

// RawcCbCreate mocks base method
func (m *MockInternalClient) RawcCbCreate(ctx context.Context, in *RawcCbRequestMsg, opts ...grpc.CallOption) (*RawcCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawcCbCreate", varargs...)
	ret0, _ := ret[0].(*RawcCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbCreate indicates an expected call of RawcCbCreate
func (mr *MockInternalClientMockRecorder) RawcCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbCreate", reflect.TypeOf((*MockInternalClient)(nil).RawcCbCreate), varargs...)
}

// RawcCbUpdate mocks base method
func (m *MockInternalClient) RawcCbUpdate(ctx context.Context, in *RawcCbRequestMsg, opts ...grpc.CallOption) (*RawcCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawcCbUpdate", varargs...)
	ret0, _ := ret[0].(*RawcCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbUpdate indicates an expected call of RawcCbUpdate
func (mr *MockInternalClientMockRecorder) RawcCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbUpdate", reflect.TypeOf((*MockInternalClient)(nil).RawcCbUpdate), varargs...)
}

// RawcCbDelete mocks base method
func (m *MockInternalClient) RawcCbDelete(ctx context.Context, in *RawcCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawcCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawcCbDelete", varargs...)
	ret0, _ := ret[0].(*RawcCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbDelete indicates an expected call of RawcCbDelete
func (mr *MockInternalClientMockRecorder) RawcCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbDelete", reflect.TypeOf((*MockInternalClient)(nil).RawcCbDelete), varargs...)
}

// RawcCbGet mocks base method
func (m *MockInternalClient) RawcCbGet(ctx context.Context, in *RawcCbGetRequestMsg, opts ...grpc.CallOption) (*RawcCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawcCbGet", varargs...)
	ret0, _ := ret[0].(*RawcCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbGet indicates an expected call of RawcCbGet
func (mr *MockInternalClientMockRecorder) RawcCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbGet", reflect.TypeOf((*MockInternalClient)(nil).RawcCbGet), varargs...)
}

// TestSendFinReq mocks base method
func (m *MockInternalClient) TestSendFinReq(ctx context.Context, in *TestSendFinRequestMsg, opts ...grpc.CallOption) (*TestSendFinResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestSendFinReq", varargs...)
	ret0, _ := ret[0].(*TestSendFinResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestSendFinReq indicates an expected call of TestSendFinReq
func (mr *MockInternalClientMockRecorder) TestSendFinReq(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestSendFinReq", reflect.TypeOf((*MockInternalClient)(nil).TestSendFinReq), varargs...)
}

// TestClockSyncReq mocks base method
func (m *MockInternalClient) TestClockSyncReq(ctx context.Context, in *TestClockSyncRequestMsg, opts ...grpc.CallOption) (*TestClockSyncResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestClockSyncReq", varargs...)
	ret0, _ := ret[0].(*TestClockSyncResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestClockSyncReq indicates an expected call of TestClockSyncReq
func (mr *MockInternalClientMockRecorder) TestClockSyncReq(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestClockSyncReq", reflect.TypeOf((*MockInternalClient)(nil).TestClockSyncReq), varargs...)
}

// FlowHashGet mocks base method
func (m *MockInternalClient) FlowHashGet(ctx context.Context, in *FlowHashGetRequestMsg, opts ...grpc.CallOption) (*FlowHashGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlowHashGet", varargs...)
	ret0, _ := ret[0].(*FlowHashGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowHashGet indicates an expected call of FlowHashGet
func (mr *MockInternalClientMockRecorder) FlowHashGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowHashGet", reflect.TypeOf((*MockInternalClient)(nil).FlowHashGet), varargs...)
}

// MockInternalServer is a mock of InternalServer interface
type MockInternalServer struct {
	ctrl     *gomock.Controller
	recorder *MockInternalServerMockRecorder
}

// MockInternalServerMockRecorder is the mock recorder for MockInternalServer
type MockInternalServerMockRecorder struct {
	mock *MockInternalServer
}

// NewMockInternalServer creates a new mock instance
func NewMockInternalServer(ctrl *gomock.Controller) *MockInternalServer {
	mock := &MockInternalServer{ctrl: ctrl}
	mock.recorder = &MockInternalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInternalServer) EXPECT() *MockInternalServerMockRecorder {
	return m.recorder
}

// GetProgramAddress mocks base method
func (m *MockInternalServer) GetProgramAddress(arg0 context.Context, arg1 *GetProgramAddressRequestMsg) (*ProgramAddressResponseMsg, error) {
	ret := m.ctrl.Call(m, "GetProgramAddress", arg0, arg1)
	ret0, _ := ret[0].(*ProgramAddressResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgramAddress indicates an expected call of GetProgramAddress
func (mr *MockInternalServerMockRecorder) GetProgramAddress(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgramAddress", reflect.TypeOf((*MockInternalServer)(nil).GetProgramAddress), arg0, arg1)
}

// AllocHbmAddress mocks base method
func (m *MockInternalServer) AllocHbmAddress(arg0 context.Context, arg1 *AllocHbmAddressRequestMsg) (*AllocHbmAddressResponseMsg, error) {
	ret := m.ctrl.Call(m, "AllocHbmAddress", arg0, arg1)
	ret0, _ := ret[0].(*AllocHbmAddressResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocHbmAddress indicates an expected call of AllocHbmAddress
func (mr *MockInternalServerMockRecorder) AllocHbmAddress(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocHbmAddress", reflect.TypeOf((*MockInternalServer)(nil).AllocHbmAddress), arg0, arg1)
}

// ConfigureLifBdf mocks base method
func (m *MockInternalServer) ConfigureLifBdf(arg0 context.Context, arg1 *ConfigureLifBdfRequestMsg) (*ConfigureLifBdfResponseMsg, error) {
	ret := m.ctrl.Call(m, "ConfigureLifBdf", arg0, arg1)
	ret0, _ := ret[0].(*ConfigureLifBdfResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureLifBdf indicates an expected call of ConfigureLifBdf
func (mr *MockInternalServerMockRecorder) ConfigureLifBdf(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLifBdf", reflect.TypeOf((*MockInternalServer)(nil).ConfigureLifBdf), arg0, arg1)
}

// SoftwarePhvInject mocks base method
func (m *MockInternalServer) SoftwarePhvInject(arg0 context.Context, arg1 *SoftwarePhvInjectMsg) (*SoftwarePhvResponseMsg, error) {
	ret := m.ctrl.Call(m, "SoftwarePhvInject", arg0, arg1)
	ret0, _ := ret[0].(*SoftwarePhvResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwarePhvInject indicates an expected call of SoftwarePhvInject
func (mr *MockInternalServerMockRecorder) SoftwarePhvInject(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwarePhvInject", reflect.TypeOf((*MockInternalServer)(nil).SoftwarePhvInject), arg0, arg1)
}

// SoftwarePhvGet mocks base method
func (m *MockInternalServer) SoftwarePhvGet(arg0 context.Context, arg1 *SoftwarePhvGetRequestMsg) (*SoftwarePhvGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "SoftwarePhvGet", arg0, arg1)
	ret0, _ := ret[0].(*SoftwarePhvGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwarePhvGet indicates an expected call of SoftwarePhvGet
func (mr *MockInternalServerMockRecorder) SoftwarePhvGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwarePhvGet", reflect.TypeOf((*MockInternalServer)(nil).SoftwarePhvGet), arg0, arg1)
}

// LogFlow mocks base method
func (m *MockInternalServer) LogFlow(arg0 context.Context, arg1 *LogFlowRequestMsg) (*LogFlowResponseMsg, error) {
	ret := m.ctrl.Call(m, "LogFlow", arg0, arg1)
	ret0, _ := ret[0].(*LogFlowResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogFlow indicates an expected call of LogFlow
func (mr *MockInternalServerMockRecorder) LogFlow(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFlow", reflect.TypeOf((*MockInternalServer)(nil).LogFlow), arg0, arg1)
}

// QuiesceMsgSnd mocks base method
func (m *MockInternalServer) QuiesceMsgSnd(arg0 context.Context, arg1 *EmptyRequest) (*EmptyResponse, error) {
	ret := m.ctrl.Call(m, "QuiesceMsgSnd", arg0, arg1)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceMsgSnd indicates an expected call of QuiesceMsgSnd
func (mr *MockInternalServerMockRecorder) QuiesceMsgSnd(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceMsgSnd", reflect.TypeOf((*MockInternalServer)(nil).QuiesceMsgSnd), arg0, arg1)
}

// QuiesceStart mocks base method
func (m *MockInternalServer) QuiesceStart(arg0 context.Context, arg1 *EmptyRequest) (*EmptyResponse, error) {
	ret := m.ctrl.Call(m, "QuiesceStart", arg0, arg1)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceStart indicates an expected call of QuiesceStart
func (mr *MockInternalServerMockRecorder) QuiesceStart(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceStart", reflect.TypeOf((*MockInternalServer)(nil).QuiesceStart), arg0, arg1)
}

// QuiesceStop mocks base method
func (m *MockInternalServer) QuiesceStop(arg0 context.Context, arg1 *EmptyRequest) (*EmptyResponse, error) {
	ret := m.ctrl.Call(m, "QuiesceStop", arg0, arg1)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceStop indicates an expected call of QuiesceStop
func (mr *MockInternalServerMockRecorder) QuiesceStop(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceStop", reflect.TypeOf((*MockInternalServer)(nil).QuiesceStop), arg0, arg1)
}

// IpsecCbCreate mocks base method
func (m *MockInternalServer) IpsecCbCreate(arg0 context.Context, arg1 *IpsecCbRequestMsg) (*IpsecCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "IpsecCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*IpsecCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbCreate indicates an expected call of IpsecCbCreate
func (mr *MockInternalServerMockRecorder) IpsecCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbCreate", reflect.TypeOf((*MockInternalServer)(nil).IpsecCbCreate), arg0, arg1)
}

// IpsecCbUpdate mocks base method
func (m *MockInternalServer) IpsecCbUpdate(arg0 context.Context, arg1 *IpsecCbRequestMsg) (*IpsecCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "IpsecCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*IpsecCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbUpdate indicates an expected call of IpsecCbUpdate
func (mr *MockInternalServerMockRecorder) IpsecCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbUpdate", reflect.TypeOf((*MockInternalServer)(nil).IpsecCbUpdate), arg0, arg1)
}

// IpsecCbDelete mocks base method
func (m *MockInternalServer) IpsecCbDelete(arg0 context.Context, arg1 *IpsecCbDeleteRequestMsg) (*IpsecCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "IpsecCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*IpsecCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbDelete indicates an expected call of IpsecCbDelete
func (mr *MockInternalServerMockRecorder) IpsecCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbDelete", reflect.TypeOf((*MockInternalServer)(nil).IpsecCbDelete), arg0, arg1)
}

// IpsecCbGet mocks base method
func (m *MockInternalServer) IpsecCbGet(arg0 context.Context, arg1 *IpsecCbGetRequestMsg) (*IpsecCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "IpsecCbGet", arg0, arg1)
	ret0, _ := ret[0].(*IpsecCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IpsecCbGet indicates an expected call of IpsecCbGet
func (mr *MockInternalServerMockRecorder) IpsecCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IpsecCbGet", reflect.TypeOf((*MockInternalServer)(nil).IpsecCbGet), arg0, arg1)
}

// TcpCbCreate mocks base method
func (m *MockInternalServer) TcpCbCreate(arg0 context.Context, arg1 *TcpCbRequestMsg) (*TcpCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "TcpCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*TcpCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbCreate indicates an expected call of TcpCbCreate
func (mr *MockInternalServerMockRecorder) TcpCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbCreate", reflect.TypeOf((*MockInternalServer)(nil).TcpCbCreate), arg0, arg1)
}

// TcpCbUpdate mocks base method
func (m *MockInternalServer) TcpCbUpdate(arg0 context.Context, arg1 *TcpCbRequestMsg) (*TcpCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "TcpCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*TcpCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbUpdate indicates an expected call of TcpCbUpdate
func (mr *MockInternalServerMockRecorder) TcpCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbUpdate", reflect.TypeOf((*MockInternalServer)(nil).TcpCbUpdate), arg0, arg1)
}

// TcpCbDelete mocks base method
func (m *MockInternalServer) TcpCbDelete(arg0 context.Context, arg1 *TcpCbDeleteRequestMsg) (*TcpCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "TcpCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*TcpCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbDelete indicates an expected call of TcpCbDelete
func (mr *MockInternalServerMockRecorder) TcpCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbDelete", reflect.TypeOf((*MockInternalServer)(nil).TcpCbDelete), arg0, arg1)
}

// TcpCbGet mocks base method
func (m *MockInternalServer) TcpCbGet(arg0 context.Context, arg1 *TcpCbGetRequestMsg) (*TcpCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "TcpCbGet", arg0, arg1)
	ret0, _ := ret[0].(*TcpCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbGet indicates an expected call of TcpCbGet
func (mr *MockInternalServerMockRecorder) TcpCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbGet", reflect.TypeOf((*MockInternalServer)(nil).TcpCbGet), arg0, arg1)
}

// TlsCbCreate mocks base method
func (m *MockInternalServer) TlsCbCreate(arg0 context.Context, arg1 *TlsCbRequestMsg) (*TlsCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "TlsCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*TlsCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbCreate indicates an expected call of TlsCbCreate
func (mr *MockInternalServerMockRecorder) TlsCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbCreate", reflect.TypeOf((*MockInternalServer)(nil).TlsCbCreate), arg0, arg1)
}

// TlsCbUpdate mocks base method
func (m *MockInternalServer) TlsCbUpdate(arg0 context.Context, arg1 *TlsCbRequestMsg) (*TlsCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "TlsCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*TlsCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbUpdate indicates an expected call of TlsCbUpdate
func (mr *MockInternalServerMockRecorder) TlsCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbUpdate", reflect.TypeOf((*MockInternalServer)(nil).TlsCbUpdate), arg0, arg1)
}

// TlsCbDelete mocks base method
func (m *MockInternalServer) TlsCbDelete(arg0 context.Context, arg1 *TlsCbDeleteRequestMsg) (*TlsCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "TlsCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*TlsCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbDelete indicates an expected call of TlsCbDelete
func (mr *MockInternalServerMockRecorder) TlsCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbDelete", reflect.TypeOf((*MockInternalServer)(nil).TlsCbDelete), arg0, arg1)
}

// TlsCbGet mocks base method
func (m *MockInternalServer) TlsCbGet(arg0 context.Context, arg1 *TlsCbGetRequestMsg) (*TlsCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "TlsCbGet", arg0, arg1)
	ret0, _ := ret[0].(*TlsCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbGet indicates an expected call of TlsCbGet
func (mr *MockInternalServerMockRecorder) TlsCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbGet", reflect.TypeOf((*MockInternalServer)(nil).TlsCbGet), arg0, arg1)
}

// WRingCreate mocks base method
func (m *MockInternalServer) WRingCreate(arg0 context.Context, arg1 *WRingRequestMsg) (*WRingResponseMsg, error) {
	ret := m.ctrl.Call(m, "WRingCreate", arg0, arg1)
	ret0, _ := ret[0].(*WRingResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingCreate indicates an expected call of WRingCreate
func (mr *MockInternalServerMockRecorder) WRingCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingCreate", reflect.TypeOf((*MockInternalServer)(nil).WRingCreate), arg0, arg1)
}

// WRingUpdate mocks base method
func (m *MockInternalServer) WRingUpdate(arg0 context.Context, arg1 *WRingRequestMsg) (*WRingResponseMsg, error) {
	ret := m.ctrl.Call(m, "WRingUpdate", arg0, arg1)
	ret0, _ := ret[0].(*WRingResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingUpdate indicates an expected call of WRingUpdate
func (mr *MockInternalServerMockRecorder) WRingUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingUpdate", reflect.TypeOf((*MockInternalServer)(nil).WRingUpdate), arg0, arg1)
}

// WRingGetEntries mocks base method
func (m *MockInternalServer) WRingGetEntries(arg0 context.Context, arg1 *WRingGetEntriesRequestMsg) (*WRingGetEntriesResponseMsg, error) {
	ret := m.ctrl.Call(m, "WRingGetEntries", arg0, arg1)
	ret0, _ := ret[0].(*WRingGetEntriesResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingGetEntries indicates an expected call of WRingGetEntries
func (mr *MockInternalServerMockRecorder) WRingGetEntries(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingGetEntries", reflect.TypeOf((*MockInternalServer)(nil).WRingGetEntries), arg0, arg1)
}

// WRingGetMeta mocks base method
func (m *MockInternalServer) WRingGetMeta(arg0 context.Context, arg1 *WRingRequestMsg) (*WRingGetMetaResponseMsg, error) {
	ret := m.ctrl.Call(m, "WRingGetMeta", arg0, arg1)
	ret0, _ := ret[0].(*WRingGetMetaResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingGetMeta indicates an expected call of WRingGetMeta
func (mr *MockInternalServerMockRecorder) WRingGetMeta(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingGetMeta", reflect.TypeOf((*MockInternalServer)(nil).WRingGetMeta), arg0, arg1)
}

// WRingSetMeta mocks base method
func (m *MockInternalServer) WRingSetMeta(arg0 context.Context, arg1 *WRingRequestMsg) (*WRingSetMetaResponseMsg, error) {
	ret := m.ctrl.Call(m, "WRingSetMeta", arg0, arg1)
	ret0, _ := ret[0].(*WRingSetMetaResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WRingSetMeta indicates an expected call of WRingSetMeta
func (mr *MockInternalServerMockRecorder) WRingSetMeta(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WRingSetMeta", reflect.TypeOf((*MockInternalServer)(nil).WRingSetMeta), arg0, arg1)
}

// GetOpaqueTagAddr mocks base method
func (m *MockInternalServer) GetOpaqueTagAddr(arg0 context.Context, arg1 *GetOpaqueTagAddrRequestMsg) (*GetOpaqueTagAddrResponseMsg, error) {
	ret := m.ctrl.Call(m, "GetOpaqueTagAddr", arg0, arg1)
	ret0, _ := ret[0].(*GetOpaqueTagAddrResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpaqueTagAddr indicates an expected call of GetOpaqueTagAddr
func (mr *MockInternalServerMockRecorder) GetOpaqueTagAddr(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpaqueTagAddr", reflect.TypeOf((*MockInternalServer)(nil).GetOpaqueTagAddr), arg0, arg1)
}

// BarcoGetReqDescrEntry mocks base method
func (m *MockInternalServer) BarcoGetReqDescrEntry(arg0 context.Context, arg1 *BarcoGetReqDescrEntryRequestMsg) (*BarcoGetReqDescrEntryResponseMsg, error) {
	ret := m.ctrl.Call(m, "BarcoGetReqDescrEntry", arg0, arg1)
	ret0, _ := ret[0].(*BarcoGetReqDescrEntryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BarcoGetReqDescrEntry indicates an expected call of BarcoGetReqDescrEntry
func (mr *MockInternalServerMockRecorder) BarcoGetReqDescrEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BarcoGetReqDescrEntry", reflect.TypeOf((*MockInternalServer)(nil).BarcoGetReqDescrEntry), arg0, arg1)
}

// BarcoGetRingMeta mocks base method
func (m *MockInternalServer) BarcoGetRingMeta(arg0 context.Context, arg1 *BarcoGetRingMetaRequestMsg) (*BarcoGetRingMetaResponseMsg, error) {
	ret := m.ctrl.Call(m, "BarcoGetRingMeta", arg0, arg1)
	ret0, _ := ret[0].(*BarcoGetRingMetaResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BarcoGetRingMeta indicates an expected call of BarcoGetRingMeta
func (mr *MockInternalServerMockRecorder) BarcoGetRingMeta(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BarcoGetRingMeta", reflect.TypeOf((*MockInternalServer)(nil).BarcoGetRingMeta), arg0, arg1)
}

// BarcoGetRingMetaConfig mocks base method
func (m *MockInternalServer) BarcoGetRingMetaConfig(arg0 context.Context, arg1 *BarcoGetRingMetaConfigRequestMsg) (*BarcoGetRingMetaConfigResponseMsg, error) {
	ret := m.ctrl.Call(m, "BarcoGetRingMetaConfig", arg0, arg1)
	ret0, _ := ret[0].(*BarcoGetRingMetaConfigResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BarcoGetRingMetaConfig indicates an expected call of BarcoGetRingMetaConfig
func (mr *MockInternalServerMockRecorder) BarcoGetRingMetaConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BarcoGetRingMetaConfig", reflect.TypeOf((*MockInternalServer)(nil).BarcoGetRingMetaConfig), arg0, arg1)
}

// CryptoKeyCreate mocks base method
func (m *MockInternalServer) CryptoKeyCreate(arg0 context.Context, arg1 *CryptoKeyCreateRequestMsg) (*CryptoKeyCreateResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoKeyCreate", arg0, arg1)
	ret0, _ := ret[0].(*CryptoKeyCreateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyCreate indicates an expected call of CryptoKeyCreate
func (mr *MockInternalServerMockRecorder) CryptoKeyCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyCreate", reflect.TypeOf((*MockInternalServer)(nil).CryptoKeyCreate), arg0, arg1)
}

// CryptoKeyCreateWithId mocks base method
func (m *MockInternalServer) CryptoKeyCreateWithId(arg0 context.Context, arg1 *CryptoKeyCreateWithIdRequestMsg) (*CryptoKeyCreateWithIdResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoKeyCreateWithId", arg0, arg1)
	ret0, _ := ret[0].(*CryptoKeyCreateWithIdResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyCreateWithId indicates an expected call of CryptoKeyCreateWithId
func (mr *MockInternalServerMockRecorder) CryptoKeyCreateWithId(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyCreateWithId", reflect.TypeOf((*MockInternalServer)(nil).CryptoKeyCreateWithId), arg0, arg1)
}

// CryptoKeyRead mocks base method
func (m *MockInternalServer) CryptoKeyRead(arg0 context.Context, arg1 *CryptoKeyReadRequestMsg) (*CryptoKeyReadResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoKeyRead", arg0, arg1)
	ret0, _ := ret[0].(*CryptoKeyReadResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyRead indicates an expected call of CryptoKeyRead
func (mr *MockInternalServerMockRecorder) CryptoKeyRead(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyRead", reflect.TypeOf((*MockInternalServer)(nil).CryptoKeyRead), arg0, arg1)
}

// CryptoKeyUpdate mocks base method
func (m *MockInternalServer) CryptoKeyUpdate(arg0 context.Context, arg1 *CryptoKeyUpdateRequestMsg) (*CryptoKeyUpdateResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoKeyUpdate", arg0, arg1)
	ret0, _ := ret[0].(*CryptoKeyUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyUpdate indicates an expected call of CryptoKeyUpdate
func (mr *MockInternalServerMockRecorder) CryptoKeyUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyUpdate", reflect.TypeOf((*MockInternalServer)(nil).CryptoKeyUpdate), arg0, arg1)
}

// CryptoKeyDelete mocks base method
func (m *MockInternalServer) CryptoKeyDelete(arg0 context.Context, arg1 *CryptoKeyDeleteRequestMsg) (*CryptoKeyDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoKeyDelete", arg0, arg1)
	ret0, _ := ret[0].(*CryptoKeyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoKeyDelete indicates an expected call of CryptoKeyDelete
func (mr *MockInternalServerMockRecorder) CryptoKeyDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoKeyDelete", reflect.TypeOf((*MockInternalServer)(nil).CryptoKeyDelete), arg0, arg1)
}

// CryptoAsymKeyCreate mocks base method
func (m *MockInternalServer) CryptoAsymKeyCreate(arg0 context.Context, arg1 *CryptoAsymKeyCreateRequestMsg) (*CryptoAsymKeyCreateResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoAsymKeyCreate", arg0, arg1)
	ret0, _ := ret[0].(*CryptoAsymKeyCreateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoAsymKeyCreate indicates an expected call of CryptoAsymKeyCreate
func (mr *MockInternalServerMockRecorder) CryptoAsymKeyCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoAsymKeyCreate", reflect.TypeOf((*MockInternalServer)(nil).CryptoAsymKeyCreate), arg0, arg1)
}

// CryptoAsymKeyDelete mocks base method
func (m *MockInternalServer) CryptoAsymKeyDelete(arg0 context.Context, arg1 *CryptoAsymKeyDeleteRequestMsg) (*CryptoAsymKeyDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoAsymKeyDelete", arg0, arg1)
	ret0, _ := ret[0].(*CryptoAsymKeyDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoAsymKeyDelete indicates an expected call of CryptoAsymKeyDelete
func (mr *MockInternalServerMockRecorder) CryptoAsymKeyDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoAsymKeyDelete", reflect.TypeOf((*MockInternalServer)(nil).CryptoAsymKeyDelete), arg0, arg1)
}

// CryptoAsymKeyWrite mocks base method
func (m *MockInternalServer) CryptoAsymKeyWrite(arg0 context.Context, arg1 *CryptoAsymKeyWriteRequestMsg) (*CryptoAsymKeyWriteResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoAsymKeyWrite", arg0, arg1)
	ret0, _ := ret[0].(*CryptoAsymKeyWriteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoAsymKeyWrite indicates an expected call of CryptoAsymKeyWrite
func (mr *MockInternalServerMockRecorder) CryptoAsymKeyWrite(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoAsymKeyWrite", reflect.TypeOf((*MockInternalServer)(nil).CryptoAsymKeyWrite), arg0, arg1)
}

// CryptoApiInvoke mocks base method
func (m *MockInternalServer) CryptoApiInvoke(arg0 context.Context, arg1 *CryptoApiRequestMsg) (*CryptoApiResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoApiInvoke", arg0, arg1)
	ret0, _ := ret[0].(*CryptoApiResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoApiInvoke indicates an expected call of CryptoApiInvoke
func (mr *MockInternalServerMockRecorder) CryptoApiInvoke(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoApiInvoke", reflect.TypeOf((*MockInternalServer)(nil).CryptoApiInvoke), arg0, arg1)
}

// DescrAolGet mocks base method
func (m *MockInternalServer) DescrAolGet(arg0 context.Context, arg1 *DescrAolRequestMsg) (*DescrAolResponseMsg, error) {
	ret := m.ctrl.Call(m, "DescrAolGet", arg0, arg1)
	ret0, _ := ret[0].(*DescrAolResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescrAolGet indicates an expected call of DescrAolGet
func (mr *MockInternalServerMockRecorder) DescrAolGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescrAolGet", reflect.TypeOf((*MockInternalServer)(nil).DescrAolGet), arg0, arg1)
}

// ProxycCbCreate mocks base method
func (m *MockInternalServer) ProxycCbCreate(arg0 context.Context, arg1 *ProxycCbRequestMsg) (*ProxycCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxycCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*ProxycCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbCreate indicates an expected call of ProxycCbCreate
func (mr *MockInternalServerMockRecorder) ProxycCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbCreate", reflect.TypeOf((*MockInternalServer)(nil).ProxycCbCreate), arg0, arg1)
}

// ProxycCbUpdate mocks base method
func (m *MockInternalServer) ProxycCbUpdate(arg0 context.Context, arg1 *ProxycCbRequestMsg) (*ProxycCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxycCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*ProxycCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbUpdate indicates an expected call of ProxycCbUpdate
func (mr *MockInternalServerMockRecorder) ProxycCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbUpdate", reflect.TypeOf((*MockInternalServer)(nil).ProxycCbUpdate), arg0, arg1)
}

// ProxycCbDelete mocks base method
func (m *MockInternalServer) ProxycCbDelete(arg0 context.Context, arg1 *ProxycCbDeleteRequestMsg) (*ProxycCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxycCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*ProxycCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbDelete indicates an expected call of ProxycCbDelete
func (mr *MockInternalServerMockRecorder) ProxycCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbDelete", reflect.TypeOf((*MockInternalServer)(nil).ProxycCbDelete), arg0, arg1)
}

// ProxycCbGet mocks base method
func (m *MockInternalServer) ProxycCbGet(arg0 context.Context, arg1 *ProxycCbGetRequestMsg) (*ProxycCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxycCbGet", arg0, arg1)
	ret0, _ := ret[0].(*ProxycCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxycCbGet indicates an expected call of ProxycCbGet
func (mr *MockInternalServerMockRecorder) ProxycCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxycCbGet", reflect.TypeOf((*MockInternalServer)(nil).ProxycCbGet), arg0, arg1)
}

// ProxyrCbCreate mocks base method
func (m *MockInternalServer) ProxyrCbCreate(arg0 context.Context, arg1 *ProxyrCbRequestMsg) (*ProxyrCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyrCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*ProxyrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbCreate indicates an expected call of ProxyrCbCreate
func (mr *MockInternalServerMockRecorder) ProxyrCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbCreate", reflect.TypeOf((*MockInternalServer)(nil).ProxyrCbCreate), arg0, arg1)
}

// ProxyrCbUpdate mocks base method
func (m *MockInternalServer) ProxyrCbUpdate(arg0 context.Context, arg1 *ProxyrCbRequestMsg) (*ProxyrCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyrCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*ProxyrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbUpdate indicates an expected call of ProxyrCbUpdate
func (mr *MockInternalServerMockRecorder) ProxyrCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbUpdate", reflect.TypeOf((*MockInternalServer)(nil).ProxyrCbUpdate), arg0, arg1)
}

// ProxyrCbDelete mocks base method
func (m *MockInternalServer) ProxyrCbDelete(arg0 context.Context, arg1 *ProxyrCbDeleteRequestMsg) (*ProxyrCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyrCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*ProxyrCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbDelete indicates an expected call of ProxyrCbDelete
func (mr *MockInternalServerMockRecorder) ProxyrCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbDelete", reflect.TypeOf((*MockInternalServer)(nil).ProxyrCbDelete), arg0, arg1)
}

// ProxyrCbGet mocks base method
func (m *MockInternalServer) ProxyrCbGet(arg0 context.Context, arg1 *ProxyrCbGetRequestMsg) (*ProxyrCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "ProxyrCbGet", arg0, arg1)
	ret0, _ := ret[0].(*ProxyrCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyrCbGet indicates an expected call of ProxyrCbGet
func (mr *MockInternalServerMockRecorder) ProxyrCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyrCbGet", reflect.TypeOf((*MockInternalServer)(nil).ProxyrCbGet), arg0, arg1)
}

// RawrCbCreate mocks base method
func (m *MockInternalServer) RawrCbCreate(arg0 context.Context, arg1 *RawrCbRequestMsg) (*RawrCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawrCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*RawrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbCreate indicates an expected call of RawrCbCreate
func (mr *MockInternalServerMockRecorder) RawrCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbCreate", reflect.TypeOf((*MockInternalServer)(nil).RawrCbCreate), arg0, arg1)
}

// RawrCbUpdate mocks base method
func (m *MockInternalServer) RawrCbUpdate(arg0 context.Context, arg1 *RawrCbRequestMsg) (*RawrCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawrCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*RawrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbUpdate indicates an expected call of RawrCbUpdate
func (mr *MockInternalServerMockRecorder) RawrCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbUpdate", reflect.TypeOf((*MockInternalServer)(nil).RawrCbUpdate), arg0, arg1)
}

// RawrCbDelete mocks base method
func (m *MockInternalServer) RawrCbDelete(arg0 context.Context, arg1 *RawrCbDeleteRequestMsg) (*RawrCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawrCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*RawrCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbDelete indicates an expected call of RawrCbDelete
func (mr *MockInternalServerMockRecorder) RawrCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbDelete", reflect.TypeOf((*MockInternalServer)(nil).RawrCbDelete), arg0, arg1)
}

// RawrCbGet mocks base method
func (m *MockInternalServer) RawrCbGet(arg0 context.Context, arg1 *RawrCbGetRequestMsg) (*RawrCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawrCbGet", arg0, arg1)
	ret0, _ := ret[0].(*RawrCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbGet indicates an expected call of RawrCbGet
func (mr *MockInternalServerMockRecorder) RawrCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbGet", reflect.TypeOf((*MockInternalServer)(nil).RawrCbGet), arg0, arg1)
}

// RawcCbCreate mocks base method
func (m *MockInternalServer) RawcCbCreate(arg0 context.Context, arg1 *RawcCbRequestMsg) (*RawcCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawcCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*RawcCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbCreate indicates an expected call of RawcCbCreate
func (mr *MockInternalServerMockRecorder) RawcCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbCreate", reflect.TypeOf((*MockInternalServer)(nil).RawcCbCreate), arg0, arg1)
}

// RawcCbUpdate mocks base method
func (m *MockInternalServer) RawcCbUpdate(arg0 context.Context, arg1 *RawcCbRequestMsg) (*RawcCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawcCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*RawcCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbUpdate indicates an expected call of RawcCbUpdate
func (mr *MockInternalServerMockRecorder) RawcCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbUpdate", reflect.TypeOf((*MockInternalServer)(nil).RawcCbUpdate), arg0, arg1)
}

// RawcCbDelete mocks base method
func (m *MockInternalServer) RawcCbDelete(arg0 context.Context, arg1 *RawcCbDeleteRequestMsg) (*RawcCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawcCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*RawcCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbDelete indicates an expected call of RawcCbDelete
func (mr *MockInternalServerMockRecorder) RawcCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbDelete", reflect.TypeOf((*MockInternalServer)(nil).RawcCbDelete), arg0, arg1)
}

// RawcCbGet mocks base method
func (m *MockInternalServer) RawcCbGet(arg0 context.Context, arg1 *RawcCbGetRequestMsg) (*RawcCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawcCbGet", arg0, arg1)
	ret0, _ := ret[0].(*RawcCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbGet indicates an expected call of RawcCbGet
func (mr *MockInternalServerMockRecorder) RawcCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbGet", reflect.TypeOf((*MockInternalServer)(nil).RawcCbGet), arg0, arg1)
}

// TestSendFinReq mocks base method
func (m *MockInternalServer) TestSendFinReq(arg0 context.Context, arg1 *TestSendFinRequestMsg) (*TestSendFinResponseMsg, error) {
	ret := m.ctrl.Call(m, "TestSendFinReq", arg0, arg1)
	ret0, _ := ret[0].(*TestSendFinResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestSendFinReq indicates an expected call of TestSendFinReq
func (mr *MockInternalServerMockRecorder) TestSendFinReq(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestSendFinReq", reflect.TypeOf((*MockInternalServer)(nil).TestSendFinReq), arg0, arg1)
}

// TestClockSyncReq mocks base method
func (m *MockInternalServer) TestClockSyncReq(arg0 context.Context, arg1 *TestClockSyncRequestMsg) (*TestClockSyncResponseMsg, error) {
	ret := m.ctrl.Call(m, "TestClockSyncReq", arg0, arg1)
	ret0, _ := ret[0].(*TestClockSyncResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestClockSyncReq indicates an expected call of TestClockSyncReq
func (mr *MockInternalServerMockRecorder) TestClockSyncReq(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestClockSyncReq", reflect.TypeOf((*MockInternalServer)(nil).TestClockSyncReq), arg0, arg1)
}

// FlowHashGet mocks base method
func (m *MockInternalServer) FlowHashGet(arg0 context.Context, arg1 *FlowHashGetRequestMsg) (*FlowHashGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "FlowHashGet", arg0, arg1)
	ret0, _ := ret[0].(*FlowHashGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowHashGet indicates an expected call of FlowHashGet
func (mr *MockInternalServerMockRecorder) FlowHashGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowHashGet", reflect.TypeOf((*MockInternalServer)(nil).FlowHashGet), arg0, arg1)
}

// MockSoftwarePhvClient is a mock of SoftwarePhvClient interface
type MockSoftwarePhvClient struct {
	ctrl     *gomock.Controller
	recorder *MockSoftwarePhvClientMockRecorder
}

// MockSoftwarePhvClientMockRecorder is the mock recorder for MockSoftwarePhvClient
type MockSoftwarePhvClientMockRecorder struct {
	mock *MockSoftwarePhvClient
}

// NewMockSoftwarePhvClient creates a new mock instance
func NewMockSoftwarePhvClient(ctrl *gomock.Controller) *MockSoftwarePhvClient {
	mock := &MockSoftwarePhvClient{ctrl: ctrl}
	mock.recorder = &MockSoftwarePhvClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSoftwarePhvClient) EXPECT() *MockSoftwarePhvClientMockRecorder {
	return m.recorder
}

// MockSoftwarePhvServer is a mock of SoftwarePhvServer interface
type MockSoftwarePhvServer struct {
	ctrl     *gomock.Controller
	recorder *MockSoftwarePhvServerMockRecorder
}

// MockSoftwarePhvServerMockRecorder is the mock recorder for MockSoftwarePhvServer
type MockSoftwarePhvServerMockRecorder struct {
	mock *MockSoftwarePhvServer
}

// NewMockSoftwarePhvServer creates a new mock instance
func NewMockSoftwarePhvServer(ctrl *gomock.Controller) *MockSoftwarePhvServer {
	mock := &MockSoftwarePhvServer{ctrl: ctrl}
	mock.recorder = &MockSoftwarePhvServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSoftwarePhvServer) EXPECT() *MockSoftwarePhvServerMockRecorder {
	return m.recorder
}
