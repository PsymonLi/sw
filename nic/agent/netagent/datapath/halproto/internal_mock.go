// Code generated by MockGen. DO NOT EDIT.
// Source: internal.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockInternalClient is a mock of InternalClient interface
type MockInternalClient struct {
	ctrl     *gomock.Controller
	recorder *MockInternalClientMockRecorder
}

// MockInternalClientMockRecorder is the mock recorder for MockInternalClient
type MockInternalClientMockRecorder struct {
	mock *MockInternalClient
}

// NewMockInternalClient creates a new mock instance
func NewMockInternalClient(ctrl *gomock.Controller) *MockInternalClient {
	mock := &MockInternalClient{ctrl: ctrl}
	mock.recorder = &MockInternalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInternalClient) EXPECT() *MockInternalClientMockRecorder {
	return m.recorder
}

// GetProgramAddress mocks base method
func (m *MockInternalClient) GetProgramAddress(ctx context.Context, in *GetProgramAddressRequestMsg, opts ...grpc.CallOption) (*ProgramAddressResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProgramAddress", varargs...)
	ret0, _ := ret[0].(*ProgramAddressResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgramAddress indicates an expected call of GetProgramAddress
func (mr *MockInternalClientMockRecorder) GetProgramAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgramAddress", reflect.TypeOf((*MockInternalClient)(nil).GetProgramAddress), varargs...)
}

// AllocHbmAddress mocks base method
func (m *MockInternalClient) AllocHbmAddress(ctx context.Context, in *AllocHbmAddressRequestMsg, opts ...grpc.CallOption) (*AllocHbmAddressResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllocHbmAddress", varargs...)
	ret0, _ := ret[0].(*AllocHbmAddressResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocHbmAddress indicates an expected call of AllocHbmAddress
func (mr *MockInternalClientMockRecorder) AllocHbmAddress(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocHbmAddress", reflect.TypeOf((*MockInternalClient)(nil).AllocHbmAddress), varargs...)
}

// ConfigureLifBdf mocks base method
func (m *MockInternalClient) ConfigureLifBdf(ctx context.Context, in *ConfigureLifBdfRequestMsg, opts ...grpc.CallOption) (*ConfigureLifBdfResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfigureLifBdf", varargs...)
	ret0, _ := ret[0].(*ConfigureLifBdfResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureLifBdf indicates an expected call of ConfigureLifBdf
func (mr *MockInternalClientMockRecorder) ConfigureLifBdf(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLifBdf", reflect.TypeOf((*MockInternalClient)(nil).ConfigureLifBdf), varargs...)
}

// SoftwarePhvInject mocks base method
func (m *MockInternalClient) SoftwarePhvInject(ctx context.Context, in *SoftwarePhvInjectMsg, opts ...grpc.CallOption) (*SoftwarePhvResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SoftwarePhvInject", varargs...)
	ret0, _ := ret[0].(*SoftwarePhvResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwarePhvInject indicates an expected call of SoftwarePhvInject
func (mr *MockInternalClientMockRecorder) SoftwarePhvInject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwarePhvInject", reflect.TypeOf((*MockInternalClient)(nil).SoftwarePhvInject), varargs...)
}

// SoftwarePhvGet mocks base method
func (m *MockInternalClient) SoftwarePhvGet(ctx context.Context, in *SoftwarePhvGetRequestMsg, opts ...grpc.CallOption) (*SoftwarePhvGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SoftwarePhvGet", varargs...)
	ret0, _ := ret[0].(*SoftwarePhvGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwarePhvGet indicates an expected call of SoftwarePhvGet
func (mr *MockInternalClientMockRecorder) SoftwarePhvGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwarePhvGet", reflect.TypeOf((*MockInternalClient)(nil).SoftwarePhvGet), varargs...)
}

// LogFlow mocks base method
func (m *MockInternalClient) LogFlow(ctx context.Context, in *LogFlowRequestMsg, opts ...grpc.CallOption) (*LogFlowResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LogFlow", varargs...)
	ret0, _ := ret[0].(*LogFlowResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogFlow indicates an expected call of LogFlow
func (mr *MockInternalClientMockRecorder) LogFlow(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFlow", reflect.TypeOf((*MockInternalClient)(nil).LogFlow), varargs...)
}

// QuiesceMsgSnd mocks base method
func (m *MockInternalClient) QuiesceMsgSnd(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuiesceMsgSnd", varargs...)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceMsgSnd indicates an expected call of QuiesceMsgSnd
func (mr *MockInternalClientMockRecorder) QuiesceMsgSnd(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceMsgSnd", reflect.TypeOf((*MockInternalClient)(nil).QuiesceMsgSnd), varargs...)
}

// QuiesceStart mocks base method
func (m *MockInternalClient) QuiesceStart(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuiesceStart", varargs...)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceStart indicates an expected call of QuiesceStart
func (mr *MockInternalClientMockRecorder) QuiesceStart(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceStart", reflect.TypeOf((*MockInternalClient)(nil).QuiesceStart), varargs...)
}

// QuiesceStop mocks base method
func (m *MockInternalClient) QuiesceStop(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuiesceStop", varargs...)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceStop indicates an expected call of QuiesceStop
func (mr *MockInternalClientMockRecorder) QuiesceStop(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceStop", reflect.TypeOf((*MockInternalClient)(nil).QuiesceStop), varargs...)
}

// MockInternalServer is a mock of InternalServer interface
type MockInternalServer struct {
	ctrl     *gomock.Controller
	recorder *MockInternalServerMockRecorder
}

// MockInternalServerMockRecorder is the mock recorder for MockInternalServer
type MockInternalServerMockRecorder struct {
	mock *MockInternalServer
}

// NewMockInternalServer creates a new mock instance
func NewMockInternalServer(ctrl *gomock.Controller) *MockInternalServer {
	mock := &MockInternalServer{ctrl: ctrl}
	mock.recorder = &MockInternalServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInternalServer) EXPECT() *MockInternalServerMockRecorder {
	return m.recorder
}

// GetProgramAddress mocks base method
func (m *MockInternalServer) GetProgramAddress(arg0 context.Context, arg1 *GetProgramAddressRequestMsg) (*ProgramAddressResponseMsg, error) {
	ret := m.ctrl.Call(m, "GetProgramAddress", arg0, arg1)
	ret0, _ := ret[0].(*ProgramAddressResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgramAddress indicates an expected call of GetProgramAddress
func (mr *MockInternalServerMockRecorder) GetProgramAddress(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgramAddress", reflect.TypeOf((*MockInternalServer)(nil).GetProgramAddress), arg0, arg1)
}

// AllocHbmAddress mocks base method
func (m *MockInternalServer) AllocHbmAddress(arg0 context.Context, arg1 *AllocHbmAddressRequestMsg) (*AllocHbmAddressResponseMsg, error) {
	ret := m.ctrl.Call(m, "AllocHbmAddress", arg0, arg1)
	ret0, _ := ret[0].(*AllocHbmAddressResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocHbmAddress indicates an expected call of AllocHbmAddress
func (mr *MockInternalServerMockRecorder) AllocHbmAddress(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocHbmAddress", reflect.TypeOf((*MockInternalServer)(nil).AllocHbmAddress), arg0, arg1)
}

// ConfigureLifBdf mocks base method
func (m *MockInternalServer) ConfigureLifBdf(arg0 context.Context, arg1 *ConfigureLifBdfRequestMsg) (*ConfigureLifBdfResponseMsg, error) {
	ret := m.ctrl.Call(m, "ConfigureLifBdf", arg0, arg1)
	ret0, _ := ret[0].(*ConfigureLifBdfResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureLifBdf indicates an expected call of ConfigureLifBdf
func (mr *MockInternalServerMockRecorder) ConfigureLifBdf(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLifBdf", reflect.TypeOf((*MockInternalServer)(nil).ConfigureLifBdf), arg0, arg1)
}

// SoftwarePhvInject mocks base method
func (m *MockInternalServer) SoftwarePhvInject(arg0 context.Context, arg1 *SoftwarePhvInjectMsg) (*SoftwarePhvResponseMsg, error) {
	ret := m.ctrl.Call(m, "SoftwarePhvInject", arg0, arg1)
	ret0, _ := ret[0].(*SoftwarePhvResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwarePhvInject indicates an expected call of SoftwarePhvInject
func (mr *MockInternalServerMockRecorder) SoftwarePhvInject(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwarePhvInject", reflect.TypeOf((*MockInternalServer)(nil).SoftwarePhvInject), arg0, arg1)
}

// SoftwarePhvGet mocks base method
func (m *MockInternalServer) SoftwarePhvGet(arg0 context.Context, arg1 *SoftwarePhvGetRequestMsg) (*SoftwarePhvGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "SoftwarePhvGet", arg0, arg1)
	ret0, _ := ret[0].(*SoftwarePhvGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftwarePhvGet indicates an expected call of SoftwarePhvGet
func (mr *MockInternalServerMockRecorder) SoftwarePhvGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftwarePhvGet", reflect.TypeOf((*MockInternalServer)(nil).SoftwarePhvGet), arg0, arg1)
}

// LogFlow mocks base method
func (m *MockInternalServer) LogFlow(arg0 context.Context, arg1 *LogFlowRequestMsg) (*LogFlowResponseMsg, error) {
	ret := m.ctrl.Call(m, "LogFlow", arg0, arg1)
	ret0, _ := ret[0].(*LogFlowResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogFlow indicates an expected call of LogFlow
func (mr *MockInternalServerMockRecorder) LogFlow(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFlow", reflect.TypeOf((*MockInternalServer)(nil).LogFlow), arg0, arg1)
}

// QuiesceMsgSnd mocks base method
func (m *MockInternalServer) QuiesceMsgSnd(arg0 context.Context, arg1 *EmptyRequest) (*EmptyResponse, error) {
	ret := m.ctrl.Call(m, "QuiesceMsgSnd", arg0, arg1)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceMsgSnd indicates an expected call of QuiesceMsgSnd
func (mr *MockInternalServerMockRecorder) QuiesceMsgSnd(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceMsgSnd", reflect.TypeOf((*MockInternalServer)(nil).QuiesceMsgSnd), arg0, arg1)
}

// QuiesceStart mocks base method
func (m *MockInternalServer) QuiesceStart(arg0 context.Context, arg1 *EmptyRequest) (*EmptyResponse, error) {
	ret := m.ctrl.Call(m, "QuiesceStart", arg0, arg1)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceStart indicates an expected call of QuiesceStart
func (mr *MockInternalServerMockRecorder) QuiesceStart(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceStart", reflect.TypeOf((*MockInternalServer)(nil).QuiesceStart), arg0, arg1)
}

// QuiesceStop mocks base method
func (m *MockInternalServer) QuiesceStop(arg0 context.Context, arg1 *EmptyRequest) (*EmptyResponse, error) {
	ret := m.ctrl.Call(m, "QuiesceStop", arg0, arg1)
	ret0, _ := ret[0].(*EmptyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuiesceStop indicates an expected call of QuiesceStop
func (mr *MockInternalServerMockRecorder) QuiesceStop(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuiesceStop", reflect.TypeOf((*MockInternalServer)(nil).QuiesceStop), arg0, arg1)
}

// MockSoftwarePhvClient is a mock of SoftwarePhvClient interface
type MockSoftwarePhvClient struct {
	ctrl     *gomock.Controller
	recorder *MockSoftwarePhvClientMockRecorder
}

// MockSoftwarePhvClientMockRecorder is the mock recorder for MockSoftwarePhvClient
type MockSoftwarePhvClientMockRecorder struct {
	mock *MockSoftwarePhvClient
}

// NewMockSoftwarePhvClient creates a new mock instance
func NewMockSoftwarePhvClient(ctrl *gomock.Controller) *MockSoftwarePhvClient {
	mock := &MockSoftwarePhvClient{ctrl: ctrl}
	mock.recorder = &MockSoftwarePhvClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSoftwarePhvClient) EXPECT() *MockSoftwarePhvClientMockRecorder {
	return m.recorder
}

// MockSoftwarePhvServer is a mock of SoftwarePhvServer interface
type MockSoftwarePhvServer struct {
	ctrl     *gomock.Controller
	recorder *MockSoftwarePhvServerMockRecorder
}

// MockSoftwarePhvServerMockRecorder is the mock recorder for MockSoftwarePhvServer
type MockSoftwarePhvServerMockRecorder struct {
	mock *MockSoftwarePhvServer
}

// NewMockSoftwarePhvServer creates a new mock instance
func NewMockSoftwarePhvServer(ctrl *gomock.Controller) *MockSoftwarePhvServer {
	mock := &MockSoftwarePhvServer{ctrl: ctrl}
	mock.recorder = &MockSoftwarePhvServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSoftwarePhvServer) EXPECT() *MockSoftwarePhvServerMockRecorder {
	return m.recorder
}
