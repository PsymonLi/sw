// Code generated by MockGen. DO NOT EDIT.
// Source: port.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockPortClient is a mock of PortClient interface
type MockPortClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortClientMockRecorder
}

// MockPortClientMockRecorder is the mock recorder for MockPortClient
type MockPortClientMockRecorder struct {
	mock *MockPortClient
}

// NewMockPortClient creates a new mock instance
func NewMockPortClient(ctrl *gomock.Controller) *MockPortClient {
	mock := &MockPortClient{ctrl: ctrl}
	mock.recorder = &MockPortClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortClient) EXPECT() *MockPortClientMockRecorder {
	return m.recorder
}

// PortCreate mocks base method
func (m *MockPortClient) PortCreate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortCreate", varargs...)
	ret0, _ := ret[0].(*PortResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortCreate indicates an expected call of PortCreate
func (mr *MockPortClientMockRecorder) PortCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortCreate", reflect.TypeOf((*MockPortClient)(nil).PortCreate), varargs...)
}

// PortUpdate mocks base method
func (m *MockPortClient) PortUpdate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortUpdate", varargs...)
	ret0, _ := ret[0].(*PortResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortUpdate indicates an expected call of PortUpdate
func (mr *MockPortClientMockRecorder) PortUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortUpdate", reflect.TypeOf((*MockPortClient)(nil).PortUpdate), varargs...)
}

// PortDelete mocks base method
func (m *MockPortClient) PortDelete(ctx context.Context, in *PortDeleteRequestMsg, opts ...grpc.CallOption) (*PortDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortDelete", varargs...)
	ret0, _ := ret[0].(*PortDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortDelete indicates an expected call of PortDelete
func (mr *MockPortClientMockRecorder) PortDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortDelete", reflect.TypeOf((*MockPortClient)(nil).PortDelete), varargs...)
}

// PortGet mocks base method
func (m *MockPortClient) PortGet(ctx context.Context, in *PortGetRequestMsg, opts ...grpc.CallOption) (*PortGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortGet", varargs...)
	ret0, _ := ret[0].(*PortGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortGet indicates an expected call of PortGet
func (mr *MockPortClientMockRecorder) PortGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGet", reflect.TypeOf((*MockPortClient)(nil).PortGet), varargs...)
}

// PortInfoGet mocks base method
func (m *MockPortClient) PortInfoGet(ctx context.Context, in *PortInfoGetRequestMsg, opts ...grpc.CallOption) (*PortInfoGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortInfoGet", varargs...)
	ret0, _ := ret[0].(*PortInfoGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortInfoGet indicates an expected call of PortInfoGet
func (mr *MockPortClientMockRecorder) PortInfoGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortInfoGet", reflect.TypeOf((*MockPortClient)(nil).PortInfoGet), varargs...)
}

// StartAacsServer mocks base method
func (m *MockPortClient) StartAacsServer(ctx context.Context, in *AacsRequestMsg, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAacsServer", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAacsServer indicates an expected call of StartAacsServer
func (mr *MockPortClientMockRecorder) StartAacsServer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAacsServer", reflect.TypeOf((*MockPortClient)(nil).StartAacsServer), varargs...)
}

// StopAacsServer mocks base method
func (m *MockPortClient) StopAacsServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopAacsServer", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAacsServer indicates an expected call of StopAacsServer
func (mr *MockPortClientMockRecorder) StopAacsServer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAacsServer", reflect.TypeOf((*MockPortClient)(nil).StopAacsServer), varargs...)
}

// MockPortServer is a mock of PortServer interface
type MockPortServer struct {
	ctrl     *gomock.Controller
	recorder *MockPortServerMockRecorder
}

// MockPortServerMockRecorder is the mock recorder for MockPortServer
type MockPortServerMockRecorder struct {
	mock *MockPortServer
}

// NewMockPortServer creates a new mock instance
func NewMockPortServer(ctrl *gomock.Controller) *MockPortServer {
	mock := &MockPortServer{ctrl: ctrl}
	mock.recorder = &MockPortServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortServer) EXPECT() *MockPortServerMockRecorder {
	return m.recorder
}

// PortCreate mocks base method
func (m *MockPortServer) PortCreate(arg0 context.Context, arg1 *PortRequestMsg) (*PortResponseMsg, error) {
	ret := m.ctrl.Call(m, "PortCreate", arg0, arg1)
	ret0, _ := ret[0].(*PortResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortCreate indicates an expected call of PortCreate
func (mr *MockPortServerMockRecorder) PortCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortCreate", reflect.TypeOf((*MockPortServer)(nil).PortCreate), arg0, arg1)
}

// PortUpdate mocks base method
func (m *MockPortServer) PortUpdate(arg0 context.Context, arg1 *PortRequestMsg) (*PortResponseMsg, error) {
	ret := m.ctrl.Call(m, "PortUpdate", arg0, arg1)
	ret0, _ := ret[0].(*PortResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortUpdate indicates an expected call of PortUpdate
func (mr *MockPortServerMockRecorder) PortUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortUpdate", reflect.TypeOf((*MockPortServer)(nil).PortUpdate), arg0, arg1)
}

// PortDelete mocks base method
func (m *MockPortServer) PortDelete(arg0 context.Context, arg1 *PortDeleteRequestMsg) (*PortDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "PortDelete", arg0, arg1)
	ret0, _ := ret[0].(*PortDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortDelete indicates an expected call of PortDelete
func (mr *MockPortServerMockRecorder) PortDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortDelete", reflect.TypeOf((*MockPortServer)(nil).PortDelete), arg0, arg1)
}

// PortGet mocks base method
func (m *MockPortServer) PortGet(arg0 context.Context, arg1 *PortGetRequestMsg) (*PortGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "PortGet", arg0, arg1)
	ret0, _ := ret[0].(*PortGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortGet indicates an expected call of PortGet
func (mr *MockPortServerMockRecorder) PortGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGet", reflect.TypeOf((*MockPortServer)(nil).PortGet), arg0, arg1)
}

// PortInfoGet mocks base method
func (m *MockPortServer) PortInfoGet(arg0 context.Context, arg1 *PortInfoGetRequestMsg) (*PortInfoGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "PortInfoGet", arg0, arg1)
	ret0, _ := ret[0].(*PortInfoGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortInfoGet indicates an expected call of PortInfoGet
func (mr *MockPortServerMockRecorder) PortInfoGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortInfoGet", reflect.TypeOf((*MockPortServer)(nil).PortInfoGet), arg0, arg1)
}

// StartAacsServer mocks base method
func (m *MockPortServer) StartAacsServer(arg0 context.Context, arg1 *AacsRequestMsg) (*Empty, error) {
	ret := m.ctrl.Call(m, "StartAacsServer", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartAacsServer indicates an expected call of StartAacsServer
func (mr *MockPortServerMockRecorder) StartAacsServer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAacsServer", reflect.TypeOf((*MockPortServer)(nil).StartAacsServer), arg0, arg1)
}

// StopAacsServer mocks base method
func (m *MockPortServer) StopAacsServer(arg0 context.Context, arg1 *Empty) (*Empty, error) {
	ret := m.ctrl.Call(m, "StopAacsServer", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopAacsServer indicates an expected call of StopAacsServer
func (mr *MockPortServerMockRecorder) StopAacsServer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAacsServer", reflect.TypeOf((*MockPortServer)(nil).StopAacsServer), arg0, arg1)
}
