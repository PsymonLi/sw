// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fwlog.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FWEvent struct {
	Action    int32  `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	IpVer     int32  `protobuf:"varint,2,opt,name=ipVer,proto3" json:"ipVer,omitempty"`
	SipV4     uint32 `protobuf:"varint,3,opt,name=sipV4,proto3" json:"sipV4,omitempty"`
	DipV4     uint32 `protobuf:"varint,4,opt,name=dipV4,proto3" json:"dipV4,omitempty"`
	Sport     uint32 `protobuf:"varint,5,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport     uint32 `protobuf:"varint,6,opt,name=dport,proto3" json:"dport,omitempty"`
	IpProt    uint32 `protobuf:"varint,7,opt,name=ipProt,proto3" json:"ipProt,omitempty"`
	Direction uint32 `protobuf:"varint,8,opt,name=direction,proto3" json:"direction,omitempty"`
	Sipv61    uint64 `protobuf:"varint,9,opt,name=sipv61,proto3" json:"sipv61,omitempty"`
	Sipv62    uint64 `protobuf:"varint,10,opt,name=sipv62,proto3" json:"sipv62,omitempty"`
	Dipv61    uint64 `protobuf:"varint,11,opt,name=dipv61,proto3" json:"dipv61,omitempty"`
	Dipv62    uint64 `protobuf:"varint,12,opt,name=dipv62,proto3" json:"dipv62,omitempty"`
}

func (m *FWEvent) Reset()                    { *m = FWEvent{} }
func (m *FWEvent) String() string            { return proto.CompactTextString(m) }
func (*FWEvent) ProtoMessage()               {}
func (*FWEvent) Descriptor() ([]byte, []int) { return fileDescriptorFwlog, []int{0} }

func (m *FWEvent) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *FWEvent) GetIpVer() int32 {
	if m != nil {
		return m.IpVer
	}
	return 0
}

func (m *FWEvent) GetSipV4() uint32 {
	if m != nil {
		return m.SipV4
	}
	return 0
}

func (m *FWEvent) GetDipV4() uint32 {
	if m != nil {
		return m.DipV4
	}
	return 0
}

func (m *FWEvent) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *FWEvent) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *FWEvent) GetIpProt() uint32 {
	if m != nil {
		return m.IpProt
	}
	return 0
}

func (m *FWEvent) GetDirection() uint32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *FWEvent) GetSipv61() uint64 {
	if m != nil {
		return m.Sipv61
	}
	return 0
}

func (m *FWEvent) GetSipv62() uint64 {
	if m != nil {
		return m.Sipv62
	}
	return 0
}

func (m *FWEvent) GetDipv61() uint64 {
	if m != nil {
		return m.Dipv61
	}
	return 0
}

func (m *FWEvent) GetDipv62() uint64 {
	if m != nil {
		return m.Dipv62
	}
	return 0
}

func init() {
	proto.RegisterType((*FWEvent)(nil), "fwlog.FWEvent")
}
func (m *FWEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FWEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.Action))
	}
	if m.IpVer != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.IpVer))
	}
	if m.SipV4 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.SipV4))
	}
	if m.DipV4 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.DipV4))
	}
	if m.Sport != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.Sport))
	}
	if m.Dport != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.Dport))
	}
	if m.IpProt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.IpProt))
	}
	if m.Direction != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.Direction))
	}
	if m.Sipv61 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.Sipv61))
	}
	if m.Sipv62 != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.Sipv62))
	}
	if m.Dipv61 != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.Dipv61))
	}
	if m.Dipv62 != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintFwlog(dAtA, i, uint64(m.Dipv62))
	}
	return i, nil
}

func encodeVarintFwlog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FWEvent) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovFwlog(uint64(m.Action))
	}
	if m.IpVer != 0 {
		n += 1 + sovFwlog(uint64(m.IpVer))
	}
	if m.SipV4 != 0 {
		n += 1 + sovFwlog(uint64(m.SipV4))
	}
	if m.DipV4 != 0 {
		n += 1 + sovFwlog(uint64(m.DipV4))
	}
	if m.Sport != 0 {
		n += 1 + sovFwlog(uint64(m.Sport))
	}
	if m.Dport != 0 {
		n += 1 + sovFwlog(uint64(m.Dport))
	}
	if m.IpProt != 0 {
		n += 1 + sovFwlog(uint64(m.IpProt))
	}
	if m.Direction != 0 {
		n += 1 + sovFwlog(uint64(m.Direction))
	}
	if m.Sipv61 != 0 {
		n += 1 + sovFwlog(uint64(m.Sipv61))
	}
	if m.Sipv62 != 0 {
		n += 1 + sovFwlog(uint64(m.Sipv62))
	}
	if m.Dipv61 != 0 {
		n += 1 + sovFwlog(uint64(m.Dipv61))
	}
	if m.Dipv62 != 0 {
		n += 1 + sovFwlog(uint64(m.Dipv62))
	}
	return n
}

func sovFwlog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFwlog(x uint64) (n int) {
	return sovFwlog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FWEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFwlog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FWEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FWEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpVer", wireType)
			}
			m.IpVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpVer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SipV4", wireType)
			}
			m.SipV4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SipV4 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DipV4", wireType)
			}
			m.DipV4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DipV4 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sport", wireType)
			}
			m.Sport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dport", wireType)
			}
			m.Dport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpProt", wireType)
			}
			m.IpProt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpProt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sipv61", wireType)
			}
			m.Sipv61 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sipv61 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sipv62", wireType)
			}
			m.Sipv62 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sipv62 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dipv61", wireType)
			}
			m.Dipv61 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dipv61 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dipv62", wireType)
			}
			m.Dipv62 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dipv62 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFwlog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFwlog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFwlog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFwlog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFwlog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFwlog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFwlog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFwlog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFwlog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFwlog   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fwlog.proto", fileDescriptorFwlog) }

var fileDescriptorFwlog = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2b, 0xcf, 0xc9,
	0x4f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x96, 0x32, 0x71, 0xb1,
	0xbb, 0x85, 0xbb, 0x96, 0xa5, 0xe6, 0x95, 0x08, 0x89, 0x71, 0xb1, 0x25, 0x26, 0x97, 0x64, 0xe6,
	0xe7, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x41, 0x79, 0x42, 0x22, 0x5c, 0xac, 0x99, 0x05,
	0x61, 0xa9, 0x45, 0x12, 0x4c, 0x60, 0x61, 0x08, 0x07, 0x24, 0x5a, 0x9c, 0x59, 0x10, 0x66, 0x22,
	0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1b, 0x04, 0xe1, 0x80, 0x44, 0x53, 0xc0, 0xa2, 0x2c, 0x10, 0xd1,
	0x14, 0x98, 0x68, 0x71, 0x41, 0x7e, 0x51, 0x89, 0x04, 0x2b, 0x54, 0x2d, 0x88, 0x03, 0x56, 0x0b,
	0x16, 0x65, 0x83, 0xaa, 0x05, 0x8b, 0x8a, 0x71, 0xb1, 0x65, 0x16, 0x04, 0x14, 0xe5, 0x97, 0x48,
	0xb0, 0x83, 0x85, 0xa1, 0x3c, 0x21, 0x19, 0x2e, 0xce, 0x94, 0xcc, 0xa2, 0x54, 0x88, 0x03, 0x39,
	0xc0, 0x52, 0x08, 0x01, 0x90, 0xae, 0xe2, 0xcc, 0x82, 0x32, 0x33, 0x43, 0x09, 0x4e, 0x05, 0x46,
	0x0d, 0x96, 0x20, 0x28, 0x0f, 0x2e, 0x6e, 0x24, 0xc1, 0x85, 0x24, 0x6e, 0x04, 0x12, 0x4f, 0x81,
	0xa8, 0xe7, 0x86, 0x88, 0xa7, 0xc0, 0xd5, 0xa7, 0x40, 0xd4, 0xf3, 0x20, 0x89, 0x1b, 0x39, 0x09,
	0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb,
	0x31, 0x24, 0xb1, 0x81, 0xc3, 0xd1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x44, 0xcf, 0x89, 0x34,
	0x56, 0x01, 0x00, 0x00,
}
