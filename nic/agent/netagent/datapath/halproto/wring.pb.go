// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nic/proto/hal/wring.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ObjectMeta from nic/proto/types.proto

// Ignoring public import of EncapInfo from nic/proto/types.proto

// Ignoring public import of IPAddress from nic/proto/types.proto

// Ignoring public import of IPPrefix from nic/proto/types.proto

// Ignoring public import of L4PortRange from nic/proto/types.proto

// Ignoring public import of Empty from nic/proto/types.proto

// Ignoring public import of IPProtocol from nic/proto/types.proto

// Ignoring public import of ICMPMsgType from nic/proto/types.proto

// Ignoring public import of ApiStatus from nic/proto/types.proto

// Ignoring public import of L2SegmentType from nic/proto/types.proto

// Ignoring public import of encapType from nic/proto/types.proto

// Ignoring public import of IPAddressFamily from nic/proto/types.proto

// Ignoring public import of WRingType from nic/proto/types.proto

// Ignoring public import of ProxyType from nic/proto/types.proto

// Ignoring public import of CryptoKeyType from nic/proto/types.proto

// WRingKeyHandle is used to operate either by its key or handle
type WRingKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*WRingKeyHandle_WringId
	//	*WRingKeyHandle_WringHandle
	KeyOrHandle isWRingKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *WRingKeyHandle) Reset()                    { *m = WRingKeyHandle{} }
func (m *WRingKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*WRingKeyHandle) ProtoMessage()               {}
func (*WRingKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{0} }

type isWRingKeyHandle_KeyOrHandle interface {
	isWRingKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WRingKeyHandle_WringId struct {
	WringId uint32 `protobuf:"varint,1,opt,name=wring_id,json=wringId,proto3,oneof"`
}
type WRingKeyHandle_WringHandle struct {
	WringHandle uint64 `protobuf:"fixed64,2,opt,name=wring_handle,json=wringHandle,proto3,oneof"`
}

func (*WRingKeyHandle_WringId) isWRingKeyHandle_KeyOrHandle()     {}
func (*WRingKeyHandle_WringHandle) isWRingKeyHandle_KeyOrHandle() {}

func (m *WRingKeyHandle) GetKeyOrHandle() isWRingKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingKeyHandle) GetWringId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*WRingKeyHandle_WringId); ok {
		return x.WringId
	}
	return 0
}

func (m *WRingKeyHandle) GetWringHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*WRingKeyHandle_WringHandle); ok {
		return x.WringHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WRingKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WRingKeyHandle_OneofMarshaler, _WRingKeyHandle_OneofUnmarshaler, _WRingKeyHandle_OneofSizer, []interface{}{
		(*WRingKeyHandle_WringId)(nil),
		(*WRingKeyHandle_WringHandle)(nil),
	}
}

func _WRingKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WRingKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *WRingKeyHandle_WringId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.WringId))
	case *WRingKeyHandle_WringHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.WringHandle))
	case nil:
	default:
		return fmt.Errorf("WRingKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _WRingKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WRingKeyHandle)
	switch tag {
	case 1: // key_or_handle.wring_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &WRingKeyHandle_WringId{uint32(x)}
		return true, err
	case 2: // key_or_handle.wring_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &WRingKeyHandle_WringHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _WRingKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WRingKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *WRingKeyHandle_WringId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.WringId))
	case *WRingKeyHandle_WringHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WRingSpec captures all the WRing level configuration
type WRingSpec struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        WRingType       `protobuf:"varint,3,opt,name=type,proto3,enum=types.WRingType" json:"type,omitempty"`
}

func (m *WRingSpec) Reset()                    { *m = WRingSpec{} }
func (m *WRingSpec) String() string            { return proto.CompactTextString(m) }
func (*WRingSpec) ProtoMessage()               {}
func (*WRingSpec) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{1} }

func (m *WRingSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *WRingSpec) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingSpec) GetType() WRingType {
	if m != nil {
		return m.Type
	}
	return WRingType_WRING_TYPE_NONE
}

// WRingRequestMsg is batched add or modify wring request
type WRingRequestMsg struct {
	Request []*WRingSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingRequestMsg) Reset()                    { *m = WRingRequestMsg{} }
func (m *WRingRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingRequestMsg) ProtoMessage()               {}
func (*WRingRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{2} }

func (m *WRingRequestMsg) GetRequest() []*WRingSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingStatus is the operational status of a given wring
type WRingStatus struct {
	WringHandle uint64 `protobuf:"fixed64,1,opt,name=wring_handle,json=wringHandle,proto3" json:"wring_handle,omitempty"`
}

func (m *WRingStatus) Reset()                    { *m = WRingStatus{} }
func (m *WRingStatus) String() string            { return proto.CompactTextString(m) }
func (*WRingStatus) ProtoMessage()               {}
func (*WRingStatus) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{3} }

func (m *WRingStatus) GetWringHandle() uint64 {
	if m != nil {
		return m.WringHandle
	}
	return 0
}

// WRingResponse is response to WRingSpec
type WRingResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	WringStatus *WRingStatus `protobuf:"bytes,2,opt,name=wring_status,json=wringStatus" json:"wring_status,omitempty"`
}

func (m *WRingResponse) Reset()                    { *m = WRingResponse{} }
func (m *WRingResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingResponse) ProtoMessage()               {}
func (*WRingResponse) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{4} }

func (m *WRingResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingResponse) GetWringStatus() *WRingStatus {
	if m != nil {
		return m.WringStatus
	}
	return nil
}

// WRingResponseMsg is batched response to WRingRequestMsg
type WRingResponseMsg struct {
	Response []*WRingResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingResponseMsg) Reset()                    { *m = WRingResponseMsg{} }
func (m *WRingResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingResponseMsg) ProtoMessage()               {}
func (*WRingResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{5} }

func (m *WRingResponseMsg) GetResponse() []*WRingResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingDeleteRequest is used to delete a wring
type WRingDeleteRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *WRingDeleteRequest) Reset()                    { *m = WRingDeleteRequest{} }
func (m *WRingDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteRequest) ProtoMessage()               {}
func (*WRingDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{6} }

func (m *WRingDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *WRingDeleteRequest) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// WRingDeleteRequestMsg is used to delete a batch of wrings
type WRingDeleteRequestMsg struct {
	Request []*WRingDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingDeleteRequestMsg) Reset()                    { *m = WRingDeleteRequestMsg{} }
func (m *WRingDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteRequestMsg) ProtoMessage()               {}
func (*WRingDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{7} }

func (m *WRingDeleteRequestMsg) GetRequest() []*WRingDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingDeleteResponseMsg is batched response to WRingDeleteRequestMsg
type WRingDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *WRingDeleteResponseMsg) Reset()                    { *m = WRingDeleteResponseMsg{} }
func (m *WRingDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingDeleteResponseMsg) ProtoMessage()               {}
func (*WRingDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{8} }

func (m *WRingDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// WRingGetRequest is used to get information about a wring
type WRingGetEntriesRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *WRingKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	Type        WRingType       `protobuf:"varint,3,opt,name=type,proto3,enum=types.WRingType" json:"type,omitempty"`
	Index       uint32          `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *WRingGetEntriesRequest) Reset()                    { *m = WRingGetEntriesRequest{} }
func (m *WRingGetEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesRequest) ProtoMessage()               {}
func (*WRingGetEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{9} }

func (m *WRingGetEntriesRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *WRingGetEntriesRequest) GetKeyOrHandle() *WRingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *WRingGetEntriesRequest) GetType() WRingType {
	if m != nil {
		return m.Type
	}
	return WRingType_WRING_TYPE_NONE
}

func (m *WRingGetEntriesRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// WRingGetEntriesRequestMsg is batched GET requests for wrings
type WRingGetEntriesRequestMsg struct {
	Request []*WRingGetEntriesRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *WRingGetEntriesRequestMsg) Reset()                    { *m = WRingGetEntriesRequestMsg{} }
func (m *WRingGetEntriesRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesRequestMsg) ProtoMessage()               {}
func (*WRingGetEntriesRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{10} }

func (m *WRingGetEntriesRequestMsg) GetRequest() []*WRingGetEntriesRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// WRingStats is the statistics object for each wring
type WRingStats struct {
}

func (m *WRingStats) Reset()                    { *m = WRingStats{} }
func (m *WRingStats) String() string            { return proto.CompactTextString(m) }
func (*WRingStats) ProtoMessage()               {}
func (*WRingStats) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{11} }

type WRingBarcoGCMDescMsg struct {
	IlistAddr    uint64 `protobuf:"fixed64,1,opt,name=ilist_addr,json=ilistAddr,proto3" json:"ilist_addr,omitempty"`
	OlistAddr    uint64 `protobuf:"fixed64,2,opt,name=olist_addr,json=olistAddr,proto3" json:"olist_addr,omitempty"`
	Command      uint32 `protobuf:"varint,3,opt,name=command,proto3" json:"command,omitempty"`
	KeyDescIndex uint32 `protobuf:"varint,4,opt,name=key_desc_index,json=keyDescIndex,proto3" json:"key_desc_index,omitempty"`
	IvAddr       uint64 `protobuf:"fixed64,5,opt,name=iv_addr,json=ivAddr,proto3" json:"iv_addr,omitempty"`
	StatusAddr   uint64 `protobuf:"fixed64,6,opt,name=status_addr,json=statusAddr,proto3" json:"status_addr,omitempty"`
	DoorbellAddr uint64 `protobuf:"fixed64,7,opt,name=doorbell_addr,json=doorbellAddr,proto3" json:"doorbell_addr,omitempty"`
	DoorbellData uint64 `protobuf:"fixed64,8,opt,name=doorbell_data,json=doorbellData,proto3" json:"doorbell_data,omitempty"`
	Salt         uint32 `protobuf:"varint,9,opt,name=salt,proto3" json:"salt,omitempty"`
	ExplicitIv   uint64 `protobuf:"fixed64,10,opt,name=explicit_iv,json=explicitIv,proto3" json:"explicit_iv,omitempty"`
	HeaderSize   uint32 `protobuf:"varint,11,opt,name=header_size,json=headerSize,proto3" json:"header_size,omitempty"`
	BarcoStatus  uint32 `protobuf:"varint,12,opt,name=barco_status,json=barcoStatus,proto3" json:"barco_status,omitempty"`
}

func (m *WRingBarcoGCMDescMsg) Reset()                    { *m = WRingBarcoGCMDescMsg{} }
func (m *WRingBarcoGCMDescMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingBarcoGCMDescMsg) ProtoMessage()               {}
func (*WRingBarcoGCMDescMsg) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{12} }

func (m *WRingBarcoGCMDescMsg) GetIlistAddr() uint64 {
	if m != nil {
		return m.IlistAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetOlistAddr() uint64 {
	if m != nil {
		return m.OlistAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetKeyDescIndex() uint32 {
	if m != nil {
		return m.KeyDescIndex
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetIvAddr() uint64 {
	if m != nil {
		return m.IvAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetStatusAddr() uint64 {
	if m != nil {
		return m.StatusAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetDoorbellAddr() uint64 {
	if m != nil {
		return m.DoorbellAddr
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetDoorbellData() uint64 {
	if m != nil {
		return m.DoorbellData
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetHeaderSize() uint32 {
	if m != nil {
		return m.HeaderSize
	}
	return 0
}

func (m *WRingBarcoGCMDescMsg) GetBarcoStatus() uint32 {
	if m != nil {
		return m.BarcoStatus
	}
	return 0
}

// WRingGetResponse captures all the information about a wring
// only if api_status indicates success, other fields are valid
type WRingGetEntriesResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Index     uint32       `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Status    *WRingStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Stats     *WRingStats  `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	// Types that are valid to be assigned to WRingSlotInfo:
	//	*WRingGetEntriesResponse_Value
	//	*WRingGetEntriesResponse_BarcoGcmDesc
	//	*WRingGetEntriesResponse_Raw
	WRingSlotInfo isWRingGetEntriesResponse_WRingSlotInfo `protobuf_oneof:"WRingSlotInfo"`
}

func (m *WRingGetEntriesResponse) Reset()                    { *m = WRingGetEntriesResponse{} }
func (m *WRingGetEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesResponse) ProtoMessage()               {}
func (*WRingGetEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{13} }

type isWRingGetEntriesResponse_WRingSlotInfo interface {
	isWRingGetEntriesResponse_WRingSlotInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WRingGetEntriesResponse_Value struct {
	Value uint64 `protobuf:"fixed64,6,opt,name=value,proto3,oneof"`
}
type WRingGetEntriesResponse_BarcoGcmDesc struct {
	BarcoGcmDesc *WRingBarcoGCMDescMsg `protobuf:"bytes,7,opt,name=barco_gcm_desc,json=barcoGcmDesc,oneof"`
}
type WRingGetEntriesResponse_Raw struct {
	Raw []byte `protobuf:"bytes,8,opt,name=raw,proto3,oneof"`
}

func (*WRingGetEntriesResponse_Value) isWRingGetEntriesResponse_WRingSlotInfo()        {}
func (*WRingGetEntriesResponse_BarcoGcmDesc) isWRingGetEntriesResponse_WRingSlotInfo() {}
func (*WRingGetEntriesResponse_Raw) isWRingGetEntriesResponse_WRingSlotInfo()          {}

func (m *WRingGetEntriesResponse) GetWRingSlotInfo() isWRingGetEntriesResponse_WRingSlotInfo {
	if m != nil {
		return m.WRingSlotInfo
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingGetEntriesResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WRingGetEntriesResponse) GetStatus() *WRingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetStats() *WRingStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetValue() uint64 {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_Value); ok {
		return x.Value
	}
	return 0
}

func (m *WRingGetEntriesResponse) GetBarcoGcmDesc() *WRingBarcoGCMDescMsg {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_BarcoGcmDesc); ok {
		return x.BarcoGcmDesc
	}
	return nil
}

func (m *WRingGetEntriesResponse) GetRaw() []byte {
	if x, ok := m.GetWRingSlotInfo().(*WRingGetEntriesResponse_Raw); ok {
		return x.Raw
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*WRingGetEntriesResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _WRingGetEntriesResponse_OneofMarshaler, _WRingGetEntriesResponse_OneofUnmarshaler, _WRingGetEntriesResponse_OneofSizer, []interface{}{
		(*WRingGetEntriesResponse_Value)(nil),
		(*WRingGetEntriesResponse_BarcoGcmDesc)(nil),
		(*WRingGetEntriesResponse_Raw)(nil),
	}
}

func _WRingGetEntriesResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*WRingGetEntriesResponse)
	// WRingSlotInfo
	switch x := m.WRingSlotInfo.(type) {
	case *WRingGetEntriesResponse_Value:
		_ = b.EncodeVarint(6<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.Value))
	case *WRingGetEntriesResponse_BarcoGcmDesc:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BarcoGcmDesc); err != nil {
			return err
		}
	case *WRingGetEntriesResponse_Raw:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Raw)
	case nil:
	default:
		return fmt.Errorf("WRingGetEntriesResponse.WRingSlotInfo has unexpected type %T", x)
	}
	return nil
}

func _WRingGetEntriesResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*WRingGetEntriesResponse)
	switch tag {
	case 6: // WRingSlotInfo.value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.WRingSlotInfo = &WRingGetEntriesResponse_Value{x}
		return true, err
	case 7: // WRingSlotInfo.barco_gcm_desc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WRingBarcoGCMDescMsg)
		err := b.DecodeMessage(msg)
		m.WRingSlotInfo = &WRingGetEntriesResponse_BarcoGcmDesc{msg}
		return true, err
	case 8: // WRingSlotInfo.raw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.WRingSlotInfo = &WRingGetEntriesResponse_Raw{x}
		return true, err
	default:
		return false, nil
	}
}

func _WRingGetEntriesResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*WRingGetEntriesResponse)
	// WRingSlotInfo
	switch x := m.WRingSlotInfo.(type) {
	case *WRingGetEntriesResponse_Value:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *WRingGetEntriesResponse_BarcoGcmDesc:
		s := proto.Size(x.BarcoGcmDesc)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *WRingGetEntriesResponse_Raw:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Raw)))
		n += len(x.Raw)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WRingGetEntriesResponseMsg is batched response to WRingGetEntriesRequestMsg
type WRingGetEntriesResponseMsg struct {
	Response []*WRingGetEntriesResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingGetEntriesResponseMsg) Reset()                    { *m = WRingGetEntriesResponseMsg{} }
func (m *WRingGetEntriesResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetEntriesResponseMsg) ProtoMessage()               {}
func (*WRingGetEntriesResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{14} }

func (m *WRingGetEntriesResponseMsg) GetResponse() []*WRingGetEntriesResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// WRingGetMetaResponseMsg captures all the information about a wring metadata
// only if api_status indicates success, other fields are valid
type WRingGetMetaResponse struct {
	ApiStatus ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *WRingSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Pi        uint32     `protobuf:"varint,3,opt,name=pi,proto3" json:"pi,omitempty"`
	Ci        uint32     `protobuf:"varint,4,opt,name=ci,proto3" json:"ci,omitempty"`
}

func (m *WRingGetMetaResponse) Reset()                    { *m = WRingGetMetaResponse{} }
func (m *WRingGetMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*WRingGetMetaResponse) ProtoMessage()               {}
func (*WRingGetMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{15} }

func (m *WRingGetMetaResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *WRingGetMetaResponse) GetSpec() *WRingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *WRingGetMetaResponse) GetPi() uint32 {
	if m != nil {
		return m.Pi
	}
	return 0
}

func (m *WRingGetMetaResponse) GetCi() uint32 {
	if m != nil {
		return m.Ci
	}
	return 0
}

// WRingGetMetaResponse is batched response to WRingGetMetaResponseMsg
type WRingGetMetaResponseMsg struct {
	Response []*WRingGetMetaResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *WRingGetMetaResponseMsg) Reset()                    { *m = WRingGetMetaResponseMsg{} }
func (m *WRingGetMetaResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*WRingGetMetaResponseMsg) ProtoMessage()               {}
func (*WRingGetMetaResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorWring, []int{16} }

func (m *WRingGetMetaResponseMsg) GetResponse() []*WRingGetMetaResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*WRingKeyHandle)(nil), "wring.WRingKeyHandle")
	proto.RegisterType((*WRingSpec)(nil), "wring.WRingSpec")
	proto.RegisterType((*WRingRequestMsg)(nil), "wring.WRingRequestMsg")
	proto.RegisterType((*WRingStatus)(nil), "wring.WRingStatus")
	proto.RegisterType((*WRingResponse)(nil), "wring.WRingResponse")
	proto.RegisterType((*WRingResponseMsg)(nil), "wring.WRingResponseMsg")
	proto.RegisterType((*WRingDeleteRequest)(nil), "wring.WRingDeleteRequest")
	proto.RegisterType((*WRingDeleteRequestMsg)(nil), "wring.WRingDeleteRequestMsg")
	proto.RegisterType((*WRingDeleteResponseMsg)(nil), "wring.WRingDeleteResponseMsg")
	proto.RegisterType((*WRingGetEntriesRequest)(nil), "wring.WRingGetEntriesRequest")
	proto.RegisterType((*WRingGetEntriesRequestMsg)(nil), "wring.WRingGetEntriesRequestMsg")
	proto.RegisterType((*WRingStats)(nil), "wring.WRingStats")
	proto.RegisterType((*WRingBarcoGCMDescMsg)(nil), "wring.WRingBarcoGCMDescMsg")
	proto.RegisterType((*WRingGetEntriesResponse)(nil), "wring.WRingGetEntriesResponse")
	proto.RegisterType((*WRingGetEntriesResponseMsg)(nil), "wring.WRingGetEntriesResponseMsg")
	proto.RegisterType((*WRingGetMetaResponse)(nil), "wring.WRingGetMetaResponse")
	proto.RegisterType((*WRingGetMetaResponseMsg)(nil), "wring.WRingGetMetaResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WRing service

type WRingClient interface {
	WRingCreate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error)
	WRingUpdate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error)
	WRingDelete(ctx context.Context, in *WRingDeleteRequestMsg, opts ...grpc.CallOption) (*WRingDeleteResponseMsg, error)
	WRingGetEntries(ctx context.Context, in *WRingGetEntriesRequestMsg, opts ...grpc.CallOption) (*WRingGetEntriesResponseMsg, error)
	WRingGetMeta(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingGetMetaResponseMsg, error)
}

type wRingClient struct {
	cc *grpc.ClientConn
}

func NewWRingClient(cc *grpc.ClientConn) WRingClient {
	return &wRingClient{cc}
}

func (c *wRingClient) WRingCreate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error) {
	out := new(WRingResponseMsg)
	err := grpc.Invoke(ctx, "/wring.WRing/WRingCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wRingClient) WRingUpdate(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingResponseMsg, error) {
	out := new(WRingResponseMsg)
	err := grpc.Invoke(ctx, "/wring.WRing/WRingUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wRingClient) WRingDelete(ctx context.Context, in *WRingDeleteRequestMsg, opts ...grpc.CallOption) (*WRingDeleteResponseMsg, error) {
	out := new(WRingDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/wring.WRing/WRingDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wRingClient) WRingGetEntries(ctx context.Context, in *WRingGetEntriesRequestMsg, opts ...grpc.CallOption) (*WRingGetEntriesResponseMsg, error) {
	out := new(WRingGetEntriesResponseMsg)
	err := grpc.Invoke(ctx, "/wring.WRing/WRingGetEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wRingClient) WRingGetMeta(ctx context.Context, in *WRingRequestMsg, opts ...grpc.CallOption) (*WRingGetMetaResponseMsg, error) {
	out := new(WRingGetMetaResponseMsg)
	err := grpc.Invoke(ctx, "/wring.WRing/WRingGetMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WRing service

type WRingServer interface {
	WRingCreate(context.Context, *WRingRequestMsg) (*WRingResponseMsg, error)
	WRingUpdate(context.Context, *WRingRequestMsg) (*WRingResponseMsg, error)
	WRingDelete(context.Context, *WRingDeleteRequestMsg) (*WRingDeleteResponseMsg, error)
	WRingGetEntries(context.Context, *WRingGetEntriesRequestMsg) (*WRingGetEntriesResponseMsg, error)
	WRingGetMeta(context.Context, *WRingRequestMsg) (*WRingGetMetaResponseMsg, error)
}

func RegisterWRingServer(s *grpc.Server, srv WRingServer) {
	s.RegisterService(&_WRing_serviceDesc, srv)
}

func _WRing_WRingCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WRingServer).WRingCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wring.WRing/WRingCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WRingServer).WRingCreate(ctx, req.(*WRingRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WRing_WRingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WRingServer).WRingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wring.WRing/WRingUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WRingServer).WRingUpdate(ctx, req.(*WRingRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WRing_WRingDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WRingServer).WRingDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wring.WRing/WRingDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WRingServer).WRingDelete(ctx, req.(*WRingDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WRing_WRingGetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingGetEntriesRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WRingServer).WRingGetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wring.WRing/WRingGetEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WRingServer).WRingGetEntries(ctx, req.(*WRingGetEntriesRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WRing_WRingGetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WRingRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WRingServer).WRingGetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wring.WRing/WRingGetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WRingServer).WRingGetMeta(ctx, req.(*WRingRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _WRing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wring.WRing",
	HandlerType: (*WRingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WRingCreate",
			Handler:    _WRing_WRingCreate_Handler,
		},
		{
			MethodName: "WRingUpdate",
			Handler:    _WRing_WRingUpdate_Handler,
		},
		{
			MethodName: "WRingDelete",
			Handler:    _WRing_WRingDelete_Handler,
		},
		{
			MethodName: "WRingGetEntries",
			Handler:    _WRing_WRingGetEntries_Handler,
		},
		{
			MethodName: "WRingGetMeta",
			Handler:    _WRing_WRingGetMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/wring.proto",
}

func (m *WRingKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *WRingKeyHandle_WringId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintWring(dAtA, i, uint64(m.WringId))
	return i, nil
}
func (m *WRingKeyHandle_WringHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Wring(dAtA, i, uint64(m.WringHandle))
	return i, nil
}
func (m *WRingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n3, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *WRingRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WringHandle != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Wring(dAtA, i, uint64(m.WringHandle))
	}
	return i, nil
}

func (m *WRingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.ApiStatus))
	}
	if m.WringStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.WringStatus.Size()))
		n4, err := m.WringStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *WRingResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Meta.Size()))
		n5, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n6, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *WRingDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA8 := make([]byte, len(m.ApiStatus)*10)
		var j7 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintWring(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *WRingGetEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Meta.Size()))
		n9, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n10, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Type))
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *WRingGetEntriesRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetEntriesRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WRingBarcoGCMDescMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingBarcoGCMDescMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IlistAddr != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Wring(dAtA, i, uint64(m.IlistAddr))
	}
	if m.OlistAddr != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Wring(dAtA, i, uint64(m.OlistAddr))
	}
	if m.Command != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Command))
	}
	if m.KeyDescIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.KeyDescIndex))
	}
	if m.IvAddr != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64Wring(dAtA, i, uint64(m.IvAddr))
	}
	if m.StatusAddr != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64Wring(dAtA, i, uint64(m.StatusAddr))
	}
	if m.DoorbellAddr != 0 {
		dAtA[i] = 0x39
		i++
		i = encodeFixed64Wring(dAtA, i, uint64(m.DoorbellAddr))
	}
	if m.DoorbellData != 0 {
		dAtA[i] = 0x41
		i++
		i = encodeFixed64Wring(dAtA, i, uint64(m.DoorbellData))
	}
	if m.Salt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		dAtA[i] = 0x51
		i++
		i = encodeFixed64Wring(dAtA, i, uint64(m.ExplicitIv))
	}
	if m.HeaderSize != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.HeaderSize))
	}
	if m.BarcoStatus != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.BarcoStatus))
	}
	return i, nil
}

func (m *WRingGetEntriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetEntriesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Spec.Size()))
		n11, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Index))
	}
	if m.Status != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Status.Size()))
		n12, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Stats != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Stats.Size()))
		n13, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.WRingSlotInfo != nil {
		nn14, err := m.WRingSlotInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn14
	}
	return i, nil
}

func (m *WRingGetEntriesResponse_Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x31
	i++
	i = encodeFixed64Wring(dAtA, i, uint64(m.Value))
	return i, nil
}
func (m *WRingGetEntriesResponse_BarcoGcmDesc) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BarcoGcmDesc != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.BarcoGcmDesc.Size()))
		n15, err := m.BarcoGcmDesc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *WRingGetEntriesResponse_Raw) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Raw != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintWring(dAtA, i, uint64(len(m.Raw)))
		i += copy(dAtA[i:], m.Raw)
	}
	return i, nil
}
func (m *WRingGetEntriesResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetEntriesResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WRingGetMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Spec.Size()))
		n16, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.Pi != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Pi))
	}
	if m.Ci != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWring(dAtA, i, uint64(m.Ci))
	}
	return i, nil
}

func (m *WRingGetMetaResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WRingGetMetaResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWring(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Wring(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Wring(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintWring(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WRingKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *WRingKeyHandle_WringId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovWring(uint64(m.WringId))
	return n
}
func (m *WRingKeyHandle_WringHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *WRingSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovWring(uint64(m.Type))
	}
	return n
}

func (m *WRingRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovWring(uint64(l))
		}
	}
	return n
}

func (m *WRingStatus) Size() (n int) {
	var l int
	_ = l
	if m.WringHandle != 0 {
		n += 9
	}
	return n
}

func (m *WRingResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovWring(uint64(m.ApiStatus))
	}
	if m.WringStatus != nil {
		l = m.WringStatus.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	return n
}

func (m *WRingResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovWring(uint64(l))
		}
	}
	return n
}

func (m *WRingDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	return n
}

func (m *WRingDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovWring(uint64(l))
		}
	}
	return n
}

func (m *WRingDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovWring(uint64(e))
		}
		n += 1 + sovWring(uint64(l)) + l
	}
	return n
}

func (m *WRingGetEntriesRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovWring(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovWring(uint64(m.Index))
	}
	return n
}

func (m *WRingGetEntriesRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovWring(uint64(l))
		}
	}
	return n
}

func (m *WRingStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WRingBarcoGCMDescMsg) Size() (n int) {
	var l int
	_ = l
	if m.IlistAddr != 0 {
		n += 9
	}
	if m.OlistAddr != 0 {
		n += 9
	}
	if m.Command != 0 {
		n += 1 + sovWring(uint64(m.Command))
	}
	if m.KeyDescIndex != 0 {
		n += 1 + sovWring(uint64(m.KeyDescIndex))
	}
	if m.IvAddr != 0 {
		n += 9
	}
	if m.StatusAddr != 0 {
		n += 9
	}
	if m.DoorbellAddr != 0 {
		n += 9
	}
	if m.DoorbellData != 0 {
		n += 9
	}
	if m.Salt != 0 {
		n += 1 + sovWring(uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		n += 9
	}
	if m.HeaderSize != 0 {
		n += 1 + sovWring(uint64(m.HeaderSize))
	}
	if m.BarcoStatus != 0 {
		n += 1 + sovWring(uint64(m.BarcoStatus))
	}
	return n
}

func (m *WRingGetEntriesResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovWring(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovWring(uint64(m.Index))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	if m.WRingSlotInfo != nil {
		n += m.WRingSlotInfo.Size()
	}
	return n
}

func (m *WRingGetEntriesResponse_Value) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *WRingGetEntriesResponse_BarcoGcmDesc) Size() (n int) {
	var l int
	_ = l
	if m.BarcoGcmDesc != nil {
		l = m.BarcoGcmDesc.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	return n
}
func (m *WRingGetEntriesResponse_Raw) Size() (n int) {
	var l int
	_ = l
	if m.Raw != nil {
		l = len(m.Raw)
		n += 1 + l + sovWring(uint64(l))
	}
	return n
}
func (m *WRingGetEntriesResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovWring(uint64(l))
		}
	}
	return n
}

func (m *WRingGetMetaResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovWring(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovWring(uint64(l))
	}
	if m.Pi != 0 {
		n += 1 + sovWring(uint64(m.Pi))
	}
	if m.Ci != 0 {
		n += 1 + sovWring(uint64(m.Ci))
	}
	return n
}

func (m *WRingGetMetaResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovWring(uint64(l))
		}
	}
	return n
}

func sovWring(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWring(x uint64) (n int) {
	return sovWring(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WRingKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WringId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &WRingKeyHandle_WringId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WringHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &WRingKeyHandle_WringHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &WRingKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (WRingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &WRingSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WringHandle", wireType)
			}
			m.WringHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.WringHandle = uint64(dAtA[iNdEx-8])
			m.WringHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.WringHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.WringHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.WringHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.WringHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.WringHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.WringHandle |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WringStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WringStatus == nil {
				m.WringStatus = &WRingStatus{}
			}
			if err := m.WringStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &WRingResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &WRingKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &WRingDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWring
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthWring
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWring
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &WRingKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (WRingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetEntriesRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetEntriesRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetEntriesRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &WRingGetEntriesRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingBarcoGCMDescMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingBarcoGCMDescMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingBarcoGCMDescMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IlistAddr", wireType)
			}
			m.IlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.IlistAddr = uint64(dAtA[iNdEx-8])
			m.IlistAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.IlistAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.IlistAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.IlistAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.IlistAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.IlistAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.IlistAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OlistAddr", wireType)
			}
			m.OlistAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.OlistAddr = uint64(dAtA[iNdEx-8])
			m.OlistAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.OlistAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.OlistAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.OlistAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.OlistAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.OlistAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.OlistAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyDescIndex", wireType)
			}
			m.KeyDescIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyDescIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IvAddr", wireType)
			}
			m.IvAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.IvAddr = uint64(dAtA[iNdEx-8])
			m.IvAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.IvAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.IvAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.IvAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.IvAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.IvAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.IvAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusAddr", wireType)
			}
			m.StatusAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.StatusAddr = uint64(dAtA[iNdEx-8])
			m.StatusAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.StatusAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.StatusAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.StatusAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.StatusAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.StatusAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.StatusAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellAddr", wireType)
			}
			m.DoorbellAddr = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.DoorbellAddr = uint64(dAtA[iNdEx-8])
			m.DoorbellAddr |= uint64(dAtA[iNdEx-7]) << 8
			m.DoorbellAddr |= uint64(dAtA[iNdEx-6]) << 16
			m.DoorbellAddr |= uint64(dAtA[iNdEx-5]) << 24
			m.DoorbellAddr |= uint64(dAtA[iNdEx-4]) << 32
			m.DoorbellAddr |= uint64(dAtA[iNdEx-3]) << 40
			m.DoorbellAddr |= uint64(dAtA[iNdEx-2]) << 48
			m.DoorbellAddr |= uint64(dAtA[iNdEx-1]) << 56
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellData", wireType)
			}
			m.DoorbellData = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.DoorbellData = uint64(dAtA[iNdEx-8])
			m.DoorbellData |= uint64(dAtA[iNdEx-7]) << 8
			m.DoorbellData |= uint64(dAtA[iNdEx-6]) << 16
			m.DoorbellData |= uint64(dAtA[iNdEx-5]) << 24
			m.DoorbellData |= uint64(dAtA[iNdEx-4]) << 32
			m.DoorbellData |= uint64(dAtA[iNdEx-3]) << 40
			m.DoorbellData |= uint64(dAtA[iNdEx-2]) << 48
			m.DoorbellData |= uint64(dAtA[iNdEx-1]) << 56
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitIv", wireType)
			}
			m.ExplicitIv = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.ExplicitIv = uint64(dAtA[iNdEx-8])
			m.ExplicitIv |= uint64(dAtA[iNdEx-7]) << 8
			m.ExplicitIv |= uint64(dAtA[iNdEx-6]) << 16
			m.ExplicitIv |= uint64(dAtA[iNdEx-5]) << 24
			m.ExplicitIv |= uint64(dAtA[iNdEx-4]) << 32
			m.ExplicitIv |= uint64(dAtA[iNdEx-3]) << 40
			m.ExplicitIv |= uint64(dAtA[iNdEx-2]) << 48
			m.ExplicitIv |= uint64(dAtA[iNdEx-1]) << 56
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderSize", wireType)
			}
			m.HeaderSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcoStatus", wireType)
			}
			m.BarcoStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcoStatus |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetEntriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetEntriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetEntriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &WRingSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &WRingStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &WRingStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.WRingSlotInfo = &WRingGetEntriesResponse_Value{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcoGcmDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WRingBarcoGCMDescMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.WRingSlotInfo = &WRingGetEntriesResponse_BarcoGcmDesc{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.WRingSlotInfo = &WRingGetEntriesResponse_Raw{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetEntriesResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetEntriesResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetEntriesResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &WRingGetEntriesResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &WRingSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pi", wireType)
			}
			m.Pi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ci", wireType)
			}
			m.Ci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ci |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WRingGetMetaResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WRingGetMetaResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WRingGetMetaResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWring
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &WRingGetMetaResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWring(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWring
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWring
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWring
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWring(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWring = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWring   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nic/proto/hal/wring.proto", fileDescriptorWring) }

var fileDescriptorWring = []byte{
	// 959 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xf6, 0xfa, 0x37, 0x39, 0x6b, 0xbb, 0x61, 0x94, 0x9f, 0x4d, 0x42, 0x8c, 0xbb, 0x0d, 0x22,
	0xea, 0x45, 0x52, 0xb9, 0x42, 0x08, 0x24, 0x24, 0x9a, 0x04, 0xc5, 0x16, 0x8d, 0x8a, 0xb6, 0x45,
	0x54, 0xdc, 0x58, 0x93, 0xdd, 0xc1, 0x19, 0xb2, 0xf6, 0x2e, 0x3b, 0x13, 0xa7, 0xee, 0x3b, 0x70,
	0x81, 0xb8, 0xe1, 0x49, 0x78, 0x06, 0x2e, 0x79, 0x01, 0x24, 0x14, 0x9e, 0x03, 0x09, 0xcd, 0x99,
	0x71, 0x76, 0xbd, 0x8e, 0x03, 0xaa, 0xd4, 0xde, 0xed, 0x39, 0xe7, 0x9b, 0xef, 0xfc, 0xce, 0x99,
	0x85, 0xcd, 0x11, 0xf7, 0x0f, 0xe2, 0x24, 0x92, 0xd1, 0xc1, 0x39, 0x0d, 0x0f, 0xae, 0x12, 0x3e,
	0x1a, 0xec, 0xa3, 0x4c, 0x2a, 0x28, 0x6c, 0xad, 0xa5, 0x08, 0x39, 0x89, 0x99, 0xd0, 0x56, 0xd7,
	0x87, 0xe6, 0xb7, 0x1e, 0x1f, 0x0d, 0xbe, 0x62, 0x93, 0x2e, 0x1d, 0x05, 0x21, 0x23, 0xdb, 0xb0,
	0x84, 0x27, 0xfa, 0x3c, 0x70, 0xac, 0xb6, 0xb5, 0xd7, 0xe8, 0x16, 0xbc, 0x1a, 0x6a, 0x7a, 0x01,
	0x79, 0x00, 0x75, 0x6d, 0x3c, 0x47, 0xb0, 0x53, 0x6c, 0x5b, 0x7b, 0xd5, 0x6e, 0xc1, 0xb3, 0x51,
	0xab, 0x19, 0x0e, 0xef, 0x41, 0xe3, 0x82, 0x4d, 0xfa, 0x51, 0x62, 0x50, 0xee, 0x2f, 0x16, 0x2c,
	0xa3, 0x97, 0xe7, 0x31, 0xf3, 0xc9, 0x87, 0x50, 0x1e, 0x32, 0x49, 0x91, 0xdc, 0xee, 0xbc, 0xb7,
	0xaf, 0xc3, 0x79, 0x76, 0xf6, 0x03, 0xf3, 0xe5, 0x29, 0x93, 0xd4, 0x43, 0x33, 0xf9, 0x34, 0xc7,
	0x82, 0xbe, 0xec, 0xce, 0xda, 0xbe, 0x4e, 0x6e, 0x36, 0x6a, 0xcf, 0xbe, 0x60, 0x93, 0x67, 0x89,
	0x49, 0x61, 0x17, 0xca, 0x8a, 0xd4, 0x29, 0xb5, 0xad, 0xbd, 0x66, 0x67, 0xc5, 0x78, 0xc0, 0x13,
	0x2f, 0x26, 0x31, 0xf3, 0xd0, 0xea, 0x7e, 0x0e, 0xf7, 0x50, 0xe5, 0xb1, 0x1f, 0x2f, 0x99, 0x90,
	0xa7, 0x62, 0x40, 0x1e, 0x42, 0x2d, 0xd1, 0x92, 0x63, 0xb5, 0x4b, 0x7b, 0x76, 0x67, 0x25, 0xeb,
	0x4d, 0x45, 0xef, 0x4d, 0x01, 0xee, 0x23, 0xb0, 0xb5, 0x56, 0x52, 0x79, 0x29, 0xc8, 0xfd, 0x5c,
	0x65, 0x54, 0x76, 0xd5, 0x99, 0xba, 0xb8, 0x57, 0xd0, 0x30, 0x0e, 0x45, 0x1c, 0x8d, 0x04, 0x23,
	0x07, 0x00, 0x34, 0xe6, 0x7d, 0x81, 0x0c, 0x78, 0x22, 0x8d, 0xf6, 0x49, 0xcc, 0x35, 0xb3, 0xb7,
	0x4c, 0xa7, 0x9f, 0xe4, 0xe3, 0xa9, 0x13, 0x73, 0x44, 0x97, 0x84, 0xcc, 0x04, 0xa9, 0x0f, 0x69,
	0xc7, 0x5a, 0x70, 0x8f, 0x61, 0x65, 0xc6, 0xb1, 0x4a, 0xf5, 0x11, 0x2c, 0x25, 0x46, 0x34, 0xb9,
	0xae, 0x66, 0x69, 0xa6, 0x50, 0xef, 0x06, 0xe5, 0x8e, 0x81, 0xa0, 0xe9, 0x98, 0x85, 0x4c, 0x32,
	0x53, 0xb5, 0xb7, 0xdf, 0x4d, 0xf7, 0x29, 0xac, 0xcd, 0xfb, 0x55, 0x29, 0x3c, 0xce, 0x77, 0x6b,
	0x33, 0xcb, 0x36, 0x03, 0x4f, 0xdb, 0xd6, 0x83, 0xf5, 0x19, 0x73, 0x5a, 0x91, 0x7c, 0x37, 0x4a,
	0xff, 0xd1, 0x0d, 0xf7, 0x37, 0xcb, 0x70, 0x9d, 0x30, 0xf9, 0xe5, 0x48, 0x26, 0x9c, 0x89, 0x77,
	0x56, 0x95, 0xff, 0x37, 0xe3, 0x64, 0x15, 0x2a, 0x7c, 0x14, 0xb0, 0x57, 0x4e, 0x59, 0xdd, 0x64,
	0x4f, 0x0b, 0xee, 0x0b, 0xd8, 0xbc, 0x3d, 0x6e, 0x55, 0x86, 0x4f, 0xf2, 0x55, 0xdd, 0xc9, 0x46,
	0x33, 0x77, 0x24, 0xad, 0x6c, 0x1d, 0xe0, 0x66, 0x02, 0x85, 0xfb, 0x73, 0x09, 0x56, 0x51, 0x3c,
	0xa4, 0x89, 0x1f, 0x9d, 0x1c, 0x9d, 0x1e, 0x33, 0xe1, 0x2b, 0xfe, 0x1d, 0x00, 0x1e, 0x72, 0x21,
	0xfb, 0x34, 0x08, 0x12, 0x73, 0x4d, 0x96, 0x51, 0xf3, 0x24, 0x08, 0x12, 0x65, 0x8e, 0x52, 0x73,
	0x51, 0x9b, 0xa3, 0x1b, 0xb3, 0x03, 0x35, 0x3f, 0x1a, 0x0e, 0xe9, 0x28, 0xc0, 0xcc, 0x1b, 0xde,
	0x54, 0x24, 0xbb, 0xd0, 0x54, 0xb5, 0x0c, 0x98, 0xf0, 0xfb, 0xd9, 0x9c, 0xeb, 0x17, 0x6c, 0xa2,
	0x7c, 0xf7, 0x94, 0x8e, 0x6c, 0x40, 0x8d, 0x8f, 0x35, 0x77, 0x05, 0xb9, 0xab, 0x7c, 0x8c, 0xc4,
	0x1f, 0x80, 0xad, 0x3b, 0xaf, 0x8d, 0x55, 0x34, 0x82, 0x56, 0x21, 0xe0, 0x01, 0x34, 0x82, 0x28,
	0x4a, 0xce, 0x58, 0x18, 0x6a, 0x48, 0x0d, 0x21, 0xf5, 0xa9, 0x72, 0x0e, 0x14, 0x50, 0x49, 0x9d,
	0xa5, 0x59, 0xd0, 0x31, 0x95, 0x94, 0x10, 0x28, 0x0b, 0x1a, 0x4a, 0x67, 0x19, 0xe3, 0xc3, 0x6f,
	0xe5, 0x9e, 0xbd, 0x8a, 0x43, 0xee, 0x73, 0xd9, 0xe7, 0x63, 0x07, 0xb4, 0xfb, 0xa9, 0xaa, 0x37,
	0x56, 0x80, 0x73, 0x46, 0x03, 0x96, 0xf4, 0x05, 0x7f, 0xcd, 0x1c, 0x1b, 0xcf, 0x82, 0x56, 0x3d,
	0xe7, 0xaf, 0x99, 0x5a, 0x40, 0x67, 0xaa, 0xd4, 0xd3, 0x01, 0xae, 0x23, 0xc2, 0x46, 0x9d, 0x19,
	0xd8, 0x3f, 0x8b, 0xb0, 0x31, 0xd7, 0xc5, 0x37, 0xdd, 0x45, 0xbb, 0x50, 0x16, 0x31, 0xf3, 0xcd,
	0xc8, 0xce, 0x2f, 0x4a, 0xb4, 0xa6, 0x03, 0x58, 0xca, 0x0c, 0x20, 0x79, 0x08, 0x55, 0xe3, 0xa8,
	0xbc, 0x70, 0x83, 0x19, 0x04, 0xf9, 0x08, 0x2a, 0xea, 0x4b, 0x60, 0xbf, 0xd4, 0x5d, 0xca, 0x41,
	0x85, 0xa7, 0xed, 0x64, 0x1d, 0x2a, 0x63, 0x1a, 0x5e, 0x32, 0xdd, 0xbb, 0x6e, 0xc1, 0xd3, 0x22,
	0x39, 0x82, 0xa6, 0x2e, 0xcc, 0xc0, 0x1f, 0xe2, 0x78, 0x60, 0xe7, 0xec, 0xce, 0x76, 0x96, 0x29,
	0x37, 0xa5, 0xdd, 0x82, 0xa7, 0xab, 0x79, 0xe2, 0x0f, 0x95, 0x8a, 0x10, 0x28, 0x25, 0xf4, 0x0a,
	0xdb, 0x59, 0xef, 0x16, 0x3c, 0x25, 0xa8, 0x77, 0x4e, 0x47, 0x11, 0x46, 0xb2, 0x37, 0xfa, 0x3e,
	0x72, 0x5f, 0xc2, 0xd6, 0x82, 0xf2, 0xaa, 0xc1, 0xff, 0x6c, 0x6e, 0xe3, 0xb6, 0x16, 0xdd, 0xac,
	0xb9, 0xdd, 0xfb, 0x93, 0x65, 0x6e, 0xd3, 0x09, 0xd3, 0xfb, 0xe3, 0x2d, 0xb7, 0xad, 0x09, 0xc5,
	0x98, 0x9b, 0x9e, 0x15, 0x63, 0xae, 0x64, 0x9f, 0x9b, 0x0b, 0x55, 0xf4, 0xb9, 0xeb, 0xa5, 0x83,
	0x94, 0x0d, 0x47, 0xef, 0x8f, 0x7c, 0x9a, 0xdb, 0xb9, 0x34, 0xb3, 0x27, 0xd2, 0x1c, 0x3b, 0xff,
	0x14, 0xa1, 0x82, 0x10, 0xf2, 0x85, 0x79, 0x5a, 0x8f, 0x12, 0x46, 0x25, 0x23, 0xeb, 0xb3, 0x0f,
	0xd3, 0x74, 0x53, 0x6d, 0x6d, 0xdc, 0xf6, 0x60, 0x9d, 0x8a, 0x81, 0x5b, 0xb8, 0x61, 0xf8, 0x26,
	0x0e, 0xde, 0x90, 0xe1, 0xa9, 0x61, 0xd0, 0xef, 0x04, 0x79, 0x7f, 0xe1, 0xd3, 0xa2, 0x78, 0x76,
	0x6e, 0xb3, 0x66, 0xd9, 0x5e, 0x9a, 0x7f, 0x8d, 0xb4, 0xc9, 0xa4, 0x7d, 0xe7, 0x5a, 0x55, 0xac,
	0xf7, 0xef, 0x1e, 0x0f, 0xcd, 0xdc, 0x85, 0x7a, 0xb6, 0xae, 0x0b, 0x53, 0x6d, 0xdd, 0xd1, 0x04,
	0x64, 0x3a, 0xdc, 0xfa, 0xfd, 0xba, 0x65, 0xfd, 0x71, 0xdd, 0xb2, 0xfe, 0xba, 0x6e, 0x59, 0xbf,
	0xfe, 0xdd, 0x2a, 0x7c, 0xb7, 0x74, 0x4e, 0x43, 0xfc, 0x4d, 0xfc, 0xba, 0x70, 0x56, 0xc5, 0x8f,
	0xc7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xc2, 0xf1, 0xa8, 0x6a, 0x0a, 0x00, 0x00,
}
