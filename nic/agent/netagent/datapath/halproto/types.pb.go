// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

/*
	Package halproto is a generated protocol buffer package.

	It is generated from these files:
		types.proto
		acl.proto
		barco_rings.proto
		cpucb.proto
		crypto_apis.proto
		crypto_keys.proto
		debug.proto
		descriptor_aol.proto
		endpoint.proto
		event.proto
		interface.proto
		internal.proto
		ipseccb.proto
		kh.proto
		l2segment.proto
		l4lb.proto
		multicast.proto
		nic.proto
		nw.proto
		nwsec.proto
		nwsec_1.proto
		port.proto
		proxy.proto
		proxyccb.proto
		proxyrcb.proto
		qos.proto
		quiesce.proto
		rawccb.proto
		rawrcb.proto
		rdma.proto
		session.proto
		system.proto
		tcp_proxy_cb.proto
		telemetry.proto
		tls_proxy_cb.proto
		vrf.proto
		wring.proto

	It has these top-level messages:
		ObjectMeta
		EncapInfo
		IPAddress
		IPRange
		IPPrefix
		L4PortRange
		Empty
		AclHandle
		AclKeyHandle
		EthSelector
		UDPSelector
		TCPSelector
		ICMPSelector
		IPSelector
		AclInternalSelector
		AclInternalActionInfo
		AclSelector
		AclActionInfo
		AclSpec
		AclRequestMsg
		AclStatus
		AclResponse
		AclResponseMsg
		AclDeleteRequest
		AclDeleteRequestMsg
		AclDeleteResponse
		AclDeleteResponseMsg
		AclGetRequest
		AclGetRequestMsg
		AclStats
		AclGetResponse
		AclGetResponseMsg
		GetOpaqueTagAddrRequest
		GetOpaqueTagAddrRequestMsg
		GetOpaqueTagAddrResponse
		GetOpaqueTagAddrResponseMsg
		BarcoGetReqDescrEntryRequest
		BarcoGetReqDescrEntryRequestMsg
		BarcoSymmReqDescrMsg
		BarcoASymReqDescrMsg
		BarcoGetReqDescrEntryResponse
		BarcoGetReqDescrEntryResponseMsg
		BarcoGetRingMetaRequest
		BarcoGetRingMetaRequestMsg
		BarcoGetRingMetaResponse
		BarcoGetRingMetaResponseMsg
		CpuCbKeyHandle
		CpuCbSpec
		CpuCbRequestMsg
		CpuCbStatus
		CpuCbResponse
		CpuCbResponseMsg
		CpuCbDeleteRequest
		CpuCbDeleteRequestMsg
		CpuCbDeleteResponseMsg
		CpuCbGetRequest
		CpuCbGetRequestMsg
		CpuCbStats
		CpuCbGetResponse
		CpuCbGetResponseMsg
		ECCPoint
		CryptoAsymApiECCDomainParamsFp
		CryptoAsymApiReqECCPointMulFp
		CryptoAsymApiRespECCPointMulFp
		CryptoAsymApiReqECDSASignatureGenFp
		CryptoAsymApiRespECDSASignatureGenFp
		CryptoAsymApiReqECDSASignatureVerifyFp
		CryptoAsymApiReqRSAEncrypt
		CryptoAsymApiRespRSAEncrypt
		CryptoAsymApiReqRSADecrypt
		CryptoAsymApiRespRSADecrypt
		CryptoAsymApiReqRSACRTDecrypt
		CryptoAsymApiRespRSACRTDecrypt
		CryptoAsymApiReqRSASignatureGen
		CryptoAsymApiRespRSASignatureGen
		CryptoAsymApiReqRSASignatureVerify
		CryptoSymmApiReqHashGenerate
		CryptoSymmApiRespHashGenerate
		CryptoSymmApiReqHashVerify
		CryptoApiRequest
		CryptoApiResponse
		CryptoApiRequestMsg
		CryptoApiResponseMsg
		CryptoKeyCreateRequest
		CryptoKeyCreateRequestMsg
		CryptoKeyCreateResponse
		CryptoKeyCreateResponseMsg
		CryptoKeySpec
		CryptoKeyReadRequest
		CryptoKeyReadRequestMsg
		CryptoKeyReadResponse
		CryptoKeyReadResponseMsg
		CryptoKeyUpdateRequest
		CryptoKeyUpdateRequestMsg
		CryptoKeyUpdateResponse
		CryptoKeyUpdateResponseMsg
		CryptoKeyDeleteRequest
		CryptoKeyDeleteRequestMsg
		CryptoKeyDeleteResponse
		CryptoKeyDeleteResponseMsg
		DebugKeyHandle
		DebugSpec
		DebugRequestMsg
		RegisterData
		DebugResponse
		DebugResponseMsg
		MemTrackSpec
		MemTrackGetRequest
		MemTrackGetRequestMsg
		MemTrackStatus
		MemTrackStats
		MemTrackGetResponse
		MemTrackGetResponseMsg
		SlabSpec
		SlabStatus
		SlabStats
		SlabGetRequest
		SlabGetRequestMsg
		SlabGetResponse
		SlabGetResponseMsg
		DescrAolRequest
		DescrAolRequestMsg
		DescrAolSpec
		DescrAolResponseMsg
		EndpointAttributes
		EndpointSpec
		EndpointRequestMsg
		EndpointStatus
		EndpointResponse
		EndpointResponseMsg
		EndpointUpdateRequest
		EndpointUpdateRequestMsg
		EndpointUpdateResponseMsg
		EndpointFilter
		EndpointDeleteRequest
		EndpointDeleteRequestMsg
		EndpointDeleteResponse
		EndpointDeleteResponseMsg
		EndpointGetRequest
		EndpointGetRequestMsg
		EndpointGetByInterfaceRequestMsg
		EndpointGetAllRequestMsg
		EndpointStats
		EndpointGetResponse
		EndpointGetResponseMsg
		EventRequest
		EndpointEvent
		PortEvent
		EventResponse
		LifQStateMapEntry
		PktFilter
		LifSpec
		LifRequestMsg
		LifStatus
		LifQState
		LifRdmaData
		LifResponse
		LifResponseMsg
		QStateGetReq
		GetQStateRequestMsg
		QStateGetResp
		GetQStateResponseMsg
		P4ProgLabel
		QStateSetReq
		SetQStateRequestMsg
		QStateSetResp
		SetQStateResponseMsg
		LifDeleteRequest
		LifDeleteRequestMsg
		LifDeleteResponse
		LifDeleteResponseMsg
		LifTxStats
		LifRxStats
		LifStats
		LifGetRequest
		LifGetRequestMsg
		LifGetResponse
		LifGetResponseMsg
		LifRssSpec
		EnicInfo
		EnicClassicInfo
		IfEnicInfo
		IfUplinkInfo
		IfUplinkPCInfo
		IfTunnelVxlanInfo
		IfTunnelGREInfo
		IfTunnelInfo
		IfCPUInfo
		InterfaceSpec
		InterfaceRequestMsg
		InterfaceStatus
		InterfaceResponse
		InterfaceResponseMsg
		InterfaceDeleteRequest
		InterfaceDeleteRequestMsg
		InterfaceDeleteResponse
		InterfaceDeleteResponseMsg
		InterfaceStats
		InterfaceGetRequest
		InterfaceGetRequestMsg
		InterfaceGetResponse
		InterfaceGetResponseMsg
		InterfaceL2SegmentSpec
		InterfaceL2SegmentRequestMsg
		InterfaceL2SegmentResponse
		InterfaceL2SegmentResponseMsg
		ProgramAddressReq
		ProgramAddressResp
		GetProgramAddressRequestMsg
		ProgramAddressResponseMsg
		HbmAddressReq
		HbmAddressResp
		AllocHbmAddressRequestMsg
		AllocHbmAddressResponseMsg
		LifBdfReq
		LifBdfResp
		ConfigureLifBdfRequestMsg
		ConfigureLifBdfResponseMsg
		IpsecCbKeyHandle
		IpsecCbSpec
		IpsecCbRequestMsg
		IpsecCbStatus
		IpsecCbResponse
		IpsecCbResponseMsg
		IpsecCbDeleteRequest
		IpsecCbDeleteRequestMsg
		IpsecCbDeleteResponseMsg
		IpsecCbGetRequest
		IpsecCbGetRequestMsg
		IpsecCbStats
		IpsecCbGetResponse
		IpsecCbGetResponseMsg
		SecurityProfileKeyHandle
		VrfKeyHandle
		NetworkKeyHandle
		L2SegmentKeyHandle
		SecurityRuleKeyHandle
		SecurityGroupPolicyId
		SecurityGroupPolicyKeyHandle
		SecurityGroupKeyHandle
		PortKeyHandle
		LifKeyHandle
		InterfaceKeyHandle
		EndpointL2Key
		EndpointL3Key
		EndpointKey
		EndpointKeyHandle
		MulticastEntryKeyIP
		MulticastEntryKeyMac
		MulticastEntryKey
		MulticastEntryKeyHandle
		L2SegmentSpec
		L2SegmentRequestMsg
		L2SegmentStatus
		L2SegmentResponse
		L2SegmentResponseMsg
		L2SegmentDeleteRequest
		L2SegmentDeleteRequestMsg
		L2SegmentDeleteResponse
		L2SegmentDeleteResponseMsg
		L2SegmentGetRequest
		L2SegmentGetRequestMsg
		L2SegmentStats
		L2SegmentGetResponse
		L2SegmentGetResponseMsg
		LBMethod
		HealthCheck
		L4LbServiceKey
		L4LbServiceKeyHandle
		L4LbServiceSpec
		L4LbServiceRequestMsg
		L4LbServiceStatus
		L4LbServiceResponse
		L4LbServiceResponseMsg
		L4LbServiceDeleteRequest
		L4LbServiceDeleteRequestMsg
		L4LbServiceDeleteResponseMsg
		L4LbServiceStats
		L4LbBackendKey
		L4LbBackendKeyHandle
		L4LbBackendSpec
		L4LbBackendRequestMsg
		L4LbBackendStatus
		L4LbBackendResponse
		L4LbBackendResponseMsg
		L4LbBackendDeleteRequest
		L4LbBackendDeleteRequestMsg
		L4LbBackendDeleteResponseMsg
		L4LbBackendStats
		L4LbBackendGetRequest
		L4LbBackendGetRequestMsg
		L4LbBackendGetResponse
		L4LbBackendGetResponseMsg
		L4LbServiceGetRequest
		L4LbServiceGetRequestMsg
		L4LbServiceGetResponse
		L4LbServiceGetResponseMsg
		MulticastEntrySpec
		MulticastEntryRequestMsg
		MulticastEntryStatus
		MulticastEntryResponse
		MulticastEntryResponseMsg
		MulticastEntryDeleteRequest
		MulticastEntryDeleteRequestMsg
		MulticastEntryDeleteResponse
		MulticastEntryDeleteResponseMsg
		MulticastEntryGetRequest
		MulticastEntryGetRequestMsg
		MulticastEntryGetResponse
		MulticastEntryGetResponseMsg
		Device
		NetworkSpec
		NetworkRequestMsg
		NetworkStatus
		NetworkResponse
		NetworkResponseMsg
		NetworkDeleteRequest
		NetworkDeleteResponse
		NetworkDeleteRequestMsg
		NetworkDeleteResponseMsg
		NetworkStats
		NetworkGetRequest
		NetworkGetRequestMsg
		NetworkGetResponse
		NetworkGetResponseMsg
		SecurityProfileSpec
		SecurityProfileRequestMsg
		SecurityProfileStatus
		SecurityProfileResponse
		SecurityProfileResponseMsg
		SecurityProfileDeleteRequest
		SecurityProfileDeleteRequestMsg
		SecurityProfileDeleteResponse
		SecurityProfileDeleteResponseMsg
		SecurityProfileGetRequest
		SecurityProfileGetRequestMsg
		SecurityProfileStats
		SecurityProfileGetResponse
		SecurityProfileGetResponseMsg
		Service
		FirewallRuleSpec
		SGPolicy
		SecurityGroupPolicySpec
		SecurityGroupPolicyRequestMsg
		SecurityGroupPolicyStatus
		SecurityGroupPolicyResponse
		SecurityGroupPolicyResponseMsg
		SecurityGroupPolicyDeleteRequest
		SecurityGroupPolicyDeleteRequestMsg
		SecurityGroupPolicyDeleteResponse
		SecurityGroupPolicyDeleteResponseMsg
		SecurityGroupPolicyGetRequest
		SecurityGroupPolicyGetRequestMsg
		SecurityGroupPolicyStats
		SecurityGroupPolicyGetResponse
		SecurityGroupPolicyGetResponseMsg
		SecurityGroupSpec
		SecurityGroupRequestMsg
		SecurityGroupStatus
		SecurityGroupResponse
		SecurityGroupResponseMsg
		SecurityGroupDeleteRequest
		SecurityGroupDeleteRequestMsg
		SecurityGroupDeleteResponseMsg
		SecurityGroupGetRequest
		SecurityGroupGetRequestMsg
		SecurityGroupStats
		SecurityGroupGetResponse
		SecurityGroupGetResponseMsg
		ICMPMsg
		DoSService
		DoSSessionLimits
		DoSPolicer
		DoSFloodLimits
		DoSProtectionSpec
		IngressDoSPolicy
		EgressDoSPolicy
		DoSPolicySpec
		DoSPolicyRequestMsg
		DoSPolicyStatus
		DoSPolicyResponse
		DoSPolicyResponseMsg
		DoSPolicyDeleteRequest
		DoSPolicyDeleteRequestMsg
		DoSPolicyDeleteResponse
		DoSPolicyDeleteResponseMsg
		DoSPolicyGetRequest
		DoSPolicyGetRequestMsg
		DoSPolicyStats
		DoSPolicyGetResponse
		DoSPolicyGetResponseMsg
		IPSubnet
		AddressRange
		AddressSpec
		AddressStatus
		Address
		AddressGroupSpec
		AddressGroupStatus
		AddressGroup
		IPAddressSpec
		App
		ApplicationSpec
		ApplicationStatus
		Application
		AppGroupSpec
		AppGroupStatus
		AppGroup
		SecurityRuleAction
		SecurityRuleSpec
		SecurityRuleStatus
		SecurityRule
		SecurityRuleRequestMsg
		SecurityRuleResponse
		SecurityRuleResponseMsg
		SecurityRuleDeleteRequest
		SecurityRuleDeleteRequestMsg
		SecurityRuleDeleteResponse
		SecurityRuleDeleteResponseMsg
		SecurityRuleGet
		SecurityRuleGetMsg
		SecurityRuleGetResponse
		SecurityRuleGetResponseMsg
		PortSpec
		PortRequestMsg
		PortResponse
		PortResponseMsg
		PortDeleteRequest
		PortDeleteRequestMsg
		PortDeleteResponse
		PortDeleteResponseMsg
		PortStats
		PortGetRequest
		PortGetRequestMsg
		PortGetResponse
		PortGetResponseMsg
		ProxyKeyHandle
		ProxySpec
		ProxyRequestMsg
		ProxyStatus
		ProxyResponse
		ProxyResponseMsg
		ProxyDisableRequest
		ProxyDisableRequestMsg
		ProxyDisableResponseMsg
		ProxyGetRequest
		ProxyGetRequestMsg
		ProxyStats
		ProxyGetResponse
		ProxyGetResponseMsg
		IpsecFlowConfig
		ProxyFlowConfigRequest
		ProxyFlowConfigRequestMsg
		ProxyGetFlowInfoRequest
		ProxyGetFlowInfoRequestMsg
		ProxyGetFlowInfoResponse
		ProxyGetFlowInfoResponseMsg
		ProxyGlobalCfgRequest
		ProxyGlobalCfgRequestMsg
		ProxyGlobalCfgResponseMsg
		ProxycCbKeyHandle
		ProxycCbSpec
		ProxycCbRequestMsg
		ProxycCbStatus
		ProxycCbResponse
		ProxycCbResponseMsg
		ProxycCbDeleteRequest
		ProxycCbDeleteRequestMsg
		ProxycCbDeleteResponseMsg
		ProxycCbGetRequest
		ProxycCbGetRequestMsg
		ProxycCbStats
		ProxycCbGetResponse
		ProxycCbGetResponseMsg
		ProxyrCbKeyHandle
		ProxyrCbSpec
		ProxyrCbRequestMsg
		ProxyrCbStatus
		ProxyrCbResponse
		ProxyrCbResponseMsg
		ProxyrCbDeleteRequest
		ProxyrCbDeleteRequestMsg
		ProxyrCbDeleteResponseMsg
		ProxyrCbGetRequest
		ProxyrCbGetRequestMsg
		ProxyrCbStats
		ProxyrCbGetResponse
		ProxyrCbGetResponseMsg
		PolicerSpec
		PolicerStats
		QosClassKeyHandle
		QosBuffer
		QosPFC
		QosSched
		QosUplinkClassMap
		QosMarking
		QosClassSpec
		QosClassRequestMsg
		QosClassStatus
		QosClassResponse
		QosClassResponseMsg
		QosClassDeleteRequest
		QosClassDeleteRequestMsg
		QosClassDeleteResponseMsg
		QosClassStats
		QosClassGetRequest
		QosClassGetRequestMsg
		QosClassGetResponse
		QosClassGetResponseMsg
		CoppKeyHandle
		CoppSpec
		CoppRequestMsg
		CoppStatus
		CoppResponse
		CoppResponseMsg
		CoppGetRequest
		CoppGetRequestMsg
		CoppGetResponse
		CoppGetResponseMsg
		RawcCbKeyHandle
		RawcCbSpec
		RawcCbRequestMsg
		RawcCbStatus
		RawcCbResponse
		RawcCbResponseMsg
		RawcCbDeleteRequest
		RawcCbDeleteRequestMsg
		RawcCbDeleteResponseMsg
		RawcCbGetRequest
		RawcCbGetRequestMsg
		RawcCbStats
		RawcCbGetResponse
		RawcCbGetResponseMsg
		RawrCbKeyHandle
		RawrCbSpec
		RawrCbRequestMsg
		RawrCbStatus
		RawrCbResponse
		RawrCbResponseMsg
		RawrCbDeleteRequest
		RawrCbDeleteRequestMsg
		RawrCbDeleteResponseMsg
		RawrCbGetRequest
		RawrCbGetRequestMsg
		RawrCbStats
		RawrCbGetResponse
		RawrCbGetResponseMsg
		RdmaQpSpec
		RdmaQpRequestMsg
		RdmaQpResponse
		RdmaQpResponseMsg
		RdmaQpUpdateSpec
		RdmaQpUpdateRequestMsg
		RdmaQpUpdateResponse
		RdmaQpUpdateResponseMsg
		RdmaAhSpec
		RdmaAhRequestMsg
		RdmaAhResponse
		RdmaAhResponseMsg
		RdmaCqSpec
		RdmaCqRequestMsg
		RdmaCqResponse
		RdmaCqResponseMsg
		RdmaEqSpec
		RdmaEqRequestMsg
		RdmaEqResponse
		RdmaEqResponseMsg
		RdmaMemRegSpec
		RdmaMemRegRequestMsg
		RdmaMemRegResponse
		RdmaMemRegResponseMsg
		FlowKeyL2
		FlowKeyTcpUdpInfo
		FlowKeyICMPInfo
		FlowKeyESPInfo
		FlowKeyV4
		FlowKeyV6
		FlowKey
		FlowInfo
		ConnTrackInfo
		FlowData
		FlowSpec
		SessionSpec
		SessionRequestMsg
		FlowStatus
		TFTPALGInfo
		RPCALGInfo
		SIPALGInfo
		SessionStatus
		SessionResponse
		SessionResponseMsg
		SessionDeleteRequest
		SessionDeleteRequestMsg
		SessionDeleteResponseMsg
		SessionGetRequest
		SessionGetRequestMsg
		FlowStats
		SessionStats
		SessionGetResponse
		SessionGetResponseMsg
		DropStatsEntry
		TableStatsEntry
		TableStats
		Status
		SystemResponse
		Stats
		DropStats
		TcpCbKeyHandle
		TcpCbSpec
		TcpCbRequestMsg
		TcpCbStatus
		TcpCbResponse
		TcpCbResponseMsg
		TcpCbDeleteRequest
		TcpCbDeleteRequestMsg
		TcpCbDeleteResponseMsg
		TcpCbGetRequest
		TcpCbGetRequestMsg
		TcpCbStats
		TcpCbGetResponse
		TcpCbGetResponseMsg
		L4Port
		MacAddress
		CollectorSpec
		CollectorStatus
		Collector
		CollectorConfigMsg
		CollectorResponseMsg
		ExportControlId
		ExportControlSpec
		ExportControlStatus
		ExportControl
		ExportControlConfigMsg
		ExportControlResponseMsg
		MonitorAction
		FlowMonitorRuleSpec
		FlowMonitorRuleStatus
		FlowMonitorRule
		FlowMonitorRuleConfigMsg
		FlowMonitorRuleResponseMsg
		RSpanSpec
		ERSpanSpec
		MirrorSessionId
		MirrorSessionSpec
		MirrorSessionStatus
		MirrorSession
		MirrorSessionConfigMsg
		MirrorSessionDeleteMsg
		MirrorSessionResponseMsg
		TlsCbKeyHandle
		TlsCbSpec
		TlsCbRequestMsg
		TlsCbStatus
		TlsCbResponse
		TlsCbResponseMsg
		TlsCbDeleteRequest
		TlsCbDeleteRequestMsg
		TlsCbDeleteResponseMsg
		TlsCbGetRequest
		TlsCbGetRequestMsg
		TlsCbStats
		TlsCbGetResponse
		TlsCbGetResponseMsg
		VrfSpec
		VrfRequestMsg
		VrfStatus
		VrfResponse
		VrfResponseMsg
		VrfDeleteRequest
		VrfDeleteResponse
		VrfDeleteRequestMsg
		VrfDeleteResponseMsg
		VrfGetRequest
		VrfGetRequestMsg
		VrfStats
		VrfGetResponse
		VrfGetResponseMsg
		WRingKeyHandle
		WRingSpec
		WRingRequestMsg
		WRingStatus
		WRingResponse
		WRingResponseMsg
		WRingDeleteRequest
		WRingDeleteRequestMsg
		WRingDeleteResponseMsg
		WRingGetEntriesRequest
		WRingGetEntriesRequestMsg
		WRingStats
		WRingBarcoGCMDescMsg
		WRingGetEntriesResponse
		WRingGetEntriesResponseMsg
		WRingGetMetaResponse
		WRingGetMetaResponseMsg
		WRingSetMetaResponse
		WRingSetMetaResponseMsg
*/
package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gogoproto "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// goproto_enum_prefix from public import gogo.proto
var E_GoprotoEnumPrefix = gogoproto.E_GoprotoEnumPrefix

// goproto_enum_stringer from public import gogo.proto
var E_GoprotoEnumStringer = gogoproto.E_GoprotoEnumStringer

// enum_stringer from public import gogo.proto
var E_EnumStringer = gogoproto.E_EnumStringer

// enum_customname from public import gogo.proto
var E_EnumCustomname = gogoproto.E_EnumCustomname

// enumdecl from public import gogo.proto
var E_Enumdecl = gogoproto.E_Enumdecl

// enumvalue_customname from public import gogo.proto
var E_EnumvalueCustomname = gogoproto.E_EnumvalueCustomname

// goproto_getters_all from public import gogo.proto
var E_GoprotoGettersAll = gogoproto.E_GoprotoGettersAll

// goproto_enum_prefix_all from public import gogo.proto
var E_GoprotoEnumPrefixAll = gogoproto.E_GoprotoEnumPrefixAll

// goproto_stringer_all from public import gogo.proto
var E_GoprotoStringerAll = gogoproto.E_GoprotoStringerAll

// verbose_equal_all from public import gogo.proto
var E_VerboseEqualAll = gogoproto.E_VerboseEqualAll

// face_all from public import gogo.proto
var E_FaceAll = gogoproto.E_FaceAll

// gostring_all from public import gogo.proto
var E_GostringAll = gogoproto.E_GostringAll

// populate_all from public import gogo.proto
var E_PopulateAll = gogoproto.E_PopulateAll

// stringer_all from public import gogo.proto
var E_StringerAll = gogoproto.E_StringerAll

// onlyone_all from public import gogo.proto
var E_OnlyoneAll = gogoproto.E_OnlyoneAll

// equal_all from public import gogo.proto
var E_EqualAll = gogoproto.E_EqualAll

// description_all from public import gogo.proto
var E_DescriptionAll = gogoproto.E_DescriptionAll

// testgen_all from public import gogo.proto
var E_TestgenAll = gogoproto.E_TestgenAll

// benchgen_all from public import gogo.proto
var E_BenchgenAll = gogoproto.E_BenchgenAll

// marshaler_all from public import gogo.proto
var E_MarshalerAll = gogoproto.E_MarshalerAll

// unmarshaler_all from public import gogo.proto
var E_UnmarshalerAll = gogoproto.E_UnmarshalerAll

// stable_marshaler_all from public import gogo.proto
var E_StableMarshalerAll = gogoproto.E_StableMarshalerAll

// sizer_all from public import gogo.proto
var E_SizerAll = gogoproto.E_SizerAll

// goproto_enum_stringer_all from public import gogo.proto
var E_GoprotoEnumStringerAll = gogoproto.E_GoprotoEnumStringerAll

// enum_stringer_all from public import gogo.proto
var E_EnumStringerAll = gogoproto.E_EnumStringerAll

// unsafe_marshaler_all from public import gogo.proto
var E_UnsafeMarshalerAll = gogoproto.E_UnsafeMarshalerAll

// unsafe_unmarshaler_all from public import gogo.proto
var E_UnsafeUnmarshalerAll = gogoproto.E_UnsafeUnmarshalerAll

// goproto_extensions_map_all from public import gogo.proto
var E_GoprotoExtensionsMapAll = gogoproto.E_GoprotoExtensionsMapAll

// goproto_unrecognized_all from public import gogo.proto
var E_GoprotoUnrecognizedAll = gogoproto.E_GoprotoUnrecognizedAll

// gogoproto_import from public import gogo.proto
var E_GogoprotoImport = gogoproto.E_GogoprotoImport

// protosizer_all from public import gogo.proto
var E_ProtosizerAll = gogoproto.E_ProtosizerAll

// compare_all from public import gogo.proto
var E_CompareAll = gogoproto.E_CompareAll

// typedecl_all from public import gogo.proto
var E_TypedeclAll = gogoproto.E_TypedeclAll

// enumdecl_all from public import gogo.proto
var E_EnumdeclAll = gogoproto.E_EnumdeclAll

// goproto_registration from public import gogo.proto
var E_GoprotoRegistration = gogoproto.E_GoprotoRegistration

// goproto_getters from public import gogo.proto
var E_GoprotoGetters = gogoproto.E_GoprotoGetters

// goproto_stringer from public import gogo.proto
var E_GoprotoStringer = gogoproto.E_GoprotoStringer

// verbose_equal from public import gogo.proto
var E_VerboseEqual = gogoproto.E_VerboseEqual

// face from public import gogo.proto
var E_Face = gogoproto.E_Face

// gostring from public import gogo.proto
var E_Gostring = gogoproto.E_Gostring

// populate from public import gogo.proto
var E_Populate = gogoproto.E_Populate

// stringer from public import gogo.proto
var E_Stringer = gogoproto.E_Stringer

// onlyone from public import gogo.proto
var E_Onlyone = gogoproto.E_Onlyone

// equal from public import gogo.proto
var E_Equal = gogoproto.E_Equal

// description from public import gogo.proto
var E_Description = gogoproto.E_Description

// testgen from public import gogo.proto
var E_Testgen = gogoproto.E_Testgen

// benchgen from public import gogo.proto
var E_Benchgen = gogoproto.E_Benchgen

// marshaler from public import gogo.proto
var E_Marshaler = gogoproto.E_Marshaler

// unmarshaler from public import gogo.proto
var E_Unmarshaler = gogoproto.E_Unmarshaler

// stable_marshaler from public import gogo.proto
var E_StableMarshaler = gogoproto.E_StableMarshaler

// sizer from public import gogo.proto
var E_Sizer = gogoproto.E_Sizer

// unsafe_marshaler from public import gogo.proto
var E_UnsafeMarshaler = gogoproto.E_UnsafeMarshaler

// unsafe_unmarshaler from public import gogo.proto
var E_UnsafeUnmarshaler = gogoproto.E_UnsafeUnmarshaler

// goproto_extensions_map from public import gogo.proto
var E_GoprotoExtensionsMap = gogoproto.E_GoprotoExtensionsMap

// goproto_unrecognized from public import gogo.proto
var E_GoprotoUnrecognized = gogoproto.E_GoprotoUnrecognized

// protosizer from public import gogo.proto
var E_Protosizer = gogoproto.E_Protosizer

// compare from public import gogo.proto
var E_Compare = gogoproto.E_Compare

// typedecl from public import gogo.proto
var E_Typedecl = gogoproto.E_Typedecl

// nullable from public import gogo.proto
var E_Nullable = gogoproto.E_Nullable

// embed from public import gogo.proto
var E_Embed = gogoproto.E_Embed

// customtype from public import gogo.proto
var E_Customtype = gogoproto.E_Customtype

// customname from public import gogo.proto
var E_Customname = gogoproto.E_Customname

// jsontag from public import gogo.proto
var E_Jsontag = gogoproto.E_Jsontag

// moretags from public import gogo.proto
var E_Moretags = gogoproto.E_Moretags

// casttype from public import gogo.proto
var E_Casttype = gogoproto.E_Casttype

// castkey from public import gogo.proto
var E_Castkey = gogoproto.E_Castkey

// castvalue from public import gogo.proto
var E_Castvalue = gogoproto.E_Castvalue

// stdtime from public import gogo.proto
var E_Stdtime = gogoproto.E_Stdtime

// stdduration from public import gogo.proto
var E_Stdduration = gogoproto.E_Stdduration

// IP protocol numbers
type IPProtocol int32

const (
	IPProtocol_IPPROTO_NONE   IPProtocol = 0
	IPProtocol_IPPROTO_ICMP   IPProtocol = 1
	IPProtocol_IPPROTO_IPV4   IPProtocol = 4
	IPProtocol_IPPROTO_TCP    IPProtocol = 6
	IPProtocol_IPPROTO_UDP    IPProtocol = 17
	IPProtocol_IPPROTO_GRE    IPProtocol = 47
	IPProtocol_IPPROTO_ESP    IPProtocol = 50
	IPProtocol_IPPROTO_AH     IPProtocol = 51
	IPProtocol_IPPROTO_ICMPV6 IPProtocol = 58
)

var IPProtocol_name = map[int32]string{
	0:  "IPPROTO_NONE",
	1:  "IPPROTO_ICMP",
	4:  "IPPROTO_IPV4",
	6:  "IPPROTO_TCP",
	17: "IPPROTO_UDP",
	47: "IPPROTO_GRE",
	50: "IPPROTO_ESP",
	51: "IPPROTO_AH",
	58: "IPPROTO_ICMPV6",
}
var IPProtocol_value = map[string]int32{
	"IPPROTO_NONE":   0,
	"IPPROTO_ICMP":   1,
	"IPPROTO_IPV4":   4,
	"IPPROTO_TCP":    6,
	"IPPROTO_UDP":    17,
	"IPPROTO_GRE":    47,
	"IPPROTO_ESP":    50,
	"IPPROTO_AH":     51,
	"IPPROTO_ICMPV6": 58,
}

func (x IPProtocol) String() string {
	return proto.EnumName(IPProtocol_name, int32(x))
}
func (IPProtocol) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

// ICMP message types
// TBD - add more here !!
type ICMPMsgType int32

const (
	ICMPMsgType_ICMP_MSG_TYPE_NONE ICMPMsgType = 0
	ICMPMsgType_ICMP_MSG_TYPE_ECHO ICMPMsgType = 1
)

var ICMPMsgType_name = map[int32]string{
	0: "ICMP_MSG_TYPE_NONE",
	1: "ICMP_MSG_TYPE_ECHO",
}
var ICMPMsgType_value = map[string]int32{
	"ICMP_MSG_TYPE_NONE": 0,
	"ICMP_MSG_TYPE_ECHO": 1,
}

func (x ICMPMsgType) String() string {
	return proto.EnumName(ICMPMsgType_name, int32(x))
}
func (ICMPMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

// API return codes (more descriptive than protobuf enums)
type ApiStatus int32

const (
	ApiStatus_API_STATUS_OK                           ApiStatus = 0
	ApiStatus_API_STATUS_ERR                          ApiStatus = 1
	ApiStatus_API_STATUS_INVALID_ARG                  ApiStatus = 2
	ApiStatus_API_STATUS_EXISTS_ALREADY               ApiStatus = 3
	ApiStatus_API_STATUS_OUT_OF_MEM                   ApiStatus = 4
	ApiStatus_API_STATUS_NOT_FOUND                    ApiStatus = 5
	ApiStatus_API_STATUS_OUT_OF_RESOURCE              ApiStatus = 6
	ApiStatus_API_STATUS_ENCAP_INVALID                ApiStatus = 7
	ApiStatus_API_STATUS_VRF_ID_INVALID               ApiStatus = 8
	ApiStatus_API_STATUS_VRF_NOT_FOUND                ApiStatus = 9
	ApiStatus_API_STATUS_L2_SEGMENT_ID_INVALID        ApiStatus = 10
	ApiStatus_API_STATUS_L2_SEGMENT_NOT_FOUND         ApiStatus = 11
	ApiStatus_API_STATUS_INTERFACE_ID_INVALID         ApiStatus = 12
	ApiStatus_API_STATUS_INTERFACE_NOT_FOUND          ApiStatus = 13
	ApiStatus_API_STATUS_IF_TYPE_INVALID              ApiStatus = 14
	ApiStatus_API_STATUS_IF_INFO_INVALID              ApiStatus = 15
	ApiStatus_API_STATUS_IF_L2SEGMENT_INVALID         ApiStatus = 16
	ApiStatus_API_STATUS_IF_ENIC_INFO_INVALID         ApiStatus = 17
	ApiStatus_API_STATUS_IF_ENIC_TYPE_INVALID         ApiStatus = 18
	ApiStatus_API_STATUS_IF_LIF_INFO_NOT_INVALID      ApiStatus = 19
	ApiStatus_API_STATUS_IF_LIFQ_INFO_NOT_INVALID     ApiStatus = 20
	ApiStatus_API_STATUS_ENDPOINT_NOT_FOUND           ApiStatus = 21
	ApiStatus_API_STATUS_FLOW_KEY_INVALID             ApiStatus = 22
	ApiStatus_API_STATUS_FLOW_INFO_INVALID            ApiStatus = 23
	ApiStatus_API_STATUS_FLOW_NOT_FOUND               ApiStatus = 24
	ApiStatus_API_STATUS_SESSION_NOT_FOUND            ApiStatus = 25
	ApiStatus_API_STATUS_HANDLE_INVALID               ApiStatus = 26
	ApiStatus_API_STATUS_HW_PROG_ERR                  ApiStatus = 27
	ApiStatus_API_STATUS_LIF_ID_INVALID               ApiStatus = 28
	ApiStatus_API_STATUS_LIF_NOT_FOUND                ApiStatus = 29
	ApiStatus_API_STATUS_NWSEC_PROFILE_ID_INVALID     ApiStatus = 30
	ApiStatus_API_STATUS_NWSEC_PROFILE_NOT_FOUND      ApiStatus = 31
	ApiStatus_API_STATUS_TLS_CB_ID_INVALID            ApiStatus = 32
	ApiStatus_API_STATUS_TLS_CB_NOT_FOUND             ApiStatus = 33
	ApiStatus_API_STATUS_TCP_CB_ID_INVALID            ApiStatus = 34
	ApiStatus_API_STATUS_TCP_CB_NOT_FOUND             ApiStatus = 35
	ApiStatus_API_STATUS_NETWORK_NOT_FOUND            ApiStatus = 36
	ApiStatus_API_STATUS_ACL_ID_INVALID               ApiStatus = 37
	ApiStatus_API_STATUS_ACL_NOT_FOUND                ApiStatus = 38
	ApiStatus_API_STATUS_WRING_ID_INVALID             ApiStatus = 39
	ApiStatus_API_STATUS_WRING_NOT_FOUND              ApiStatus = 40
	ApiStatus_API_STATUS_WRING_TYPE_INVALID           ApiStatus = 41
	ApiStatus_API_STATUS_PROXY_TYPE_INVALID           ApiStatus = 42
	ApiStatus_API_STATUS_IPSEC_CB_ID_INVALID          ApiStatus = 43
	ApiStatus_API_STATUS_IPSEC_CB_NOT_FOUND           ApiStatus = 44
	ApiStatus_API_STATUS_L4LB_KEY_INVALID             ApiStatus = 45
	ApiStatus_API_STATUS_CPU_CB_ID_INVALID            ApiStatus = 46
	ApiStatus_API_STATUS_CPU_CB_NOT_FOUND             ApiStatus = 47
	ApiStatus_API_STATUS_PROXY_NOT_ENABLED            ApiStatus = 48
	ApiStatus_API_STATUS_PROXY_FLOW_NOT_FOUND         ApiStatus = 49
	ApiStatus_API_STATUS_CFG_DB_ERR                   ApiStatus = 50
	ApiStatus_API_STATUS_SECURITY_GROUP_ID_INVALID    ApiStatus = 51
	ApiStatus_API_STATUS_SECURITY_POLICY_ID_INVALID   ApiStatus = 52
	ApiStatus_API_STATUS_ENDPOINT_UPD_KEY_HDL_INVALID ApiStatus = 53
	ApiStatus_API_STATUS_DOS_POLICY_ID_INVALID        ApiStatus = 54
	ApiStatus_API_STATUS_DOS_POLICY_NOT_FOUND         ApiStatus = 55
	ApiStatus_API_STATUS_RAWR_CB_ID_INVALID           ApiStatus = 56
	ApiStatus_API_STATUS_RAWR_CB_NOT_FOUND            ApiStatus = 57
	ApiStatus_API_STATUS_OBJECT_IN_USE                ApiStatus = 58
	ApiStatus_API_STATUS_RAWC_CB_ID_INVALID           ApiStatus = 59
	ApiStatus_API_STATUS_RAWC_CB_NOT_FOUND            ApiStatus = 60
	ApiStatus_API_STATUS_PORT_ID_INVALID              ApiStatus = 61
	ApiStatus_API_STATUS_PORT_TYPE_INVALID            ApiStatus = 62
	ApiStatus_API_STATUS_PORT_SPEED_INVALID           ApiStatus = 63
	ApiStatus_API_STATUS_PORT_NUM_LANES_INVALID       ApiStatus = 64
	ApiStatus_API_STATUS_PORT_NOT_FOUND               ApiStatus = 65
	ApiStatus_API_STATUS_MC_ENTRY_ID_INVALID          ApiStatus = 66
	ApiStatus_API_STATUS_MC_ENTRY_NOT_FOUND           ApiStatus = 67
	ApiStatus_API_STATUS_PROXYR_CB_ID_INVALID         ApiStatus = 68
	ApiStatus_API_STATUS_PROXYR_CB_NOT_FOUND          ApiStatus = 69
	ApiStatus_API_STATUS_PROXYC_CB_ID_INVALID         ApiStatus = 70
	ApiStatus_API_STATUS_PROXYC_CB_NOT_FOUND          ApiStatus = 71
	ApiStatus_API_STATUS_QOS_CLASS_NOT_FOUND          ApiStatus = 72
	ApiStatus_API_STATUS_HW_READ_ERROR                ApiStatus = 73
	ApiStatus_API_STATUS_HW_WRITE_ERROR               ApiStatus = 74
)

var ApiStatus_name = map[int32]string{
	0:  "API_STATUS_OK",
	1:  "API_STATUS_ERR",
	2:  "API_STATUS_INVALID_ARG",
	3:  "API_STATUS_EXISTS_ALREADY",
	4:  "API_STATUS_OUT_OF_MEM",
	5:  "API_STATUS_NOT_FOUND",
	6:  "API_STATUS_OUT_OF_RESOURCE",
	7:  "API_STATUS_ENCAP_INVALID",
	8:  "API_STATUS_VRF_ID_INVALID",
	9:  "API_STATUS_VRF_NOT_FOUND",
	10: "API_STATUS_L2_SEGMENT_ID_INVALID",
	11: "API_STATUS_L2_SEGMENT_NOT_FOUND",
	12: "API_STATUS_INTERFACE_ID_INVALID",
	13: "API_STATUS_INTERFACE_NOT_FOUND",
	14: "API_STATUS_IF_TYPE_INVALID",
	15: "API_STATUS_IF_INFO_INVALID",
	16: "API_STATUS_IF_L2SEGMENT_INVALID",
	17: "API_STATUS_IF_ENIC_INFO_INVALID",
	18: "API_STATUS_IF_ENIC_TYPE_INVALID",
	19: "API_STATUS_IF_LIF_INFO_NOT_INVALID",
	20: "API_STATUS_IF_LIFQ_INFO_NOT_INVALID",
	21: "API_STATUS_ENDPOINT_NOT_FOUND",
	22: "API_STATUS_FLOW_KEY_INVALID",
	23: "API_STATUS_FLOW_INFO_INVALID",
	24: "API_STATUS_FLOW_NOT_FOUND",
	25: "API_STATUS_SESSION_NOT_FOUND",
	26: "API_STATUS_HANDLE_INVALID",
	27: "API_STATUS_HW_PROG_ERR",
	28: "API_STATUS_LIF_ID_INVALID",
	29: "API_STATUS_LIF_NOT_FOUND",
	30: "API_STATUS_NWSEC_PROFILE_ID_INVALID",
	31: "API_STATUS_NWSEC_PROFILE_NOT_FOUND",
	32: "API_STATUS_TLS_CB_ID_INVALID",
	33: "API_STATUS_TLS_CB_NOT_FOUND",
	34: "API_STATUS_TCP_CB_ID_INVALID",
	35: "API_STATUS_TCP_CB_NOT_FOUND",
	36: "API_STATUS_NETWORK_NOT_FOUND",
	37: "API_STATUS_ACL_ID_INVALID",
	38: "API_STATUS_ACL_NOT_FOUND",
	39: "API_STATUS_WRING_ID_INVALID",
	40: "API_STATUS_WRING_NOT_FOUND",
	41: "API_STATUS_WRING_TYPE_INVALID",
	42: "API_STATUS_PROXY_TYPE_INVALID",
	43: "API_STATUS_IPSEC_CB_ID_INVALID",
	44: "API_STATUS_IPSEC_CB_NOT_FOUND",
	45: "API_STATUS_L4LB_KEY_INVALID",
	46: "API_STATUS_CPU_CB_ID_INVALID",
	47: "API_STATUS_CPU_CB_NOT_FOUND",
	48: "API_STATUS_PROXY_NOT_ENABLED",
	49: "API_STATUS_PROXY_FLOW_NOT_FOUND",
	50: "API_STATUS_CFG_DB_ERR",
	51: "API_STATUS_SECURITY_GROUP_ID_INVALID",
	52: "API_STATUS_SECURITY_POLICY_ID_INVALID",
	53: "API_STATUS_ENDPOINT_UPD_KEY_HDL_INVALID",
	54: "API_STATUS_DOS_POLICY_ID_INVALID",
	55: "API_STATUS_DOS_POLICY_NOT_FOUND",
	56: "API_STATUS_RAWR_CB_ID_INVALID",
	57: "API_STATUS_RAWR_CB_NOT_FOUND",
	58: "API_STATUS_OBJECT_IN_USE",
	59: "API_STATUS_RAWC_CB_ID_INVALID",
	60: "API_STATUS_RAWC_CB_NOT_FOUND",
	61: "API_STATUS_PORT_ID_INVALID",
	62: "API_STATUS_PORT_TYPE_INVALID",
	63: "API_STATUS_PORT_SPEED_INVALID",
	64: "API_STATUS_PORT_NUM_LANES_INVALID",
	65: "API_STATUS_PORT_NOT_FOUND",
	66: "API_STATUS_MC_ENTRY_ID_INVALID",
	67: "API_STATUS_MC_ENTRY_NOT_FOUND",
	68: "API_STATUS_PROXYR_CB_ID_INVALID",
	69: "API_STATUS_PROXYR_CB_NOT_FOUND",
	70: "API_STATUS_PROXYC_CB_ID_INVALID",
	71: "API_STATUS_PROXYC_CB_NOT_FOUND",
	72: "API_STATUS_QOS_CLASS_NOT_FOUND",
	73: "API_STATUS_HW_READ_ERROR",
	74: "API_STATUS_HW_WRITE_ERROR",
}
var ApiStatus_value = map[string]int32{
	"API_STATUS_OK":                           0,
	"API_STATUS_ERR":                          1,
	"API_STATUS_INVALID_ARG":                  2,
	"API_STATUS_EXISTS_ALREADY":               3,
	"API_STATUS_OUT_OF_MEM":                   4,
	"API_STATUS_NOT_FOUND":                    5,
	"API_STATUS_OUT_OF_RESOURCE":              6,
	"API_STATUS_ENCAP_INVALID":                7,
	"API_STATUS_VRF_ID_INVALID":               8,
	"API_STATUS_VRF_NOT_FOUND":                9,
	"API_STATUS_L2_SEGMENT_ID_INVALID":        10,
	"API_STATUS_L2_SEGMENT_NOT_FOUND":         11,
	"API_STATUS_INTERFACE_ID_INVALID":         12,
	"API_STATUS_INTERFACE_NOT_FOUND":          13,
	"API_STATUS_IF_TYPE_INVALID":              14,
	"API_STATUS_IF_INFO_INVALID":              15,
	"API_STATUS_IF_L2SEGMENT_INVALID":         16,
	"API_STATUS_IF_ENIC_INFO_INVALID":         17,
	"API_STATUS_IF_ENIC_TYPE_INVALID":         18,
	"API_STATUS_IF_LIF_INFO_NOT_INVALID":      19,
	"API_STATUS_IF_LIFQ_INFO_NOT_INVALID":     20,
	"API_STATUS_ENDPOINT_NOT_FOUND":           21,
	"API_STATUS_FLOW_KEY_INVALID":             22,
	"API_STATUS_FLOW_INFO_INVALID":            23,
	"API_STATUS_FLOW_NOT_FOUND":               24,
	"API_STATUS_SESSION_NOT_FOUND":            25,
	"API_STATUS_HANDLE_INVALID":               26,
	"API_STATUS_HW_PROG_ERR":                  27,
	"API_STATUS_LIF_ID_INVALID":               28,
	"API_STATUS_LIF_NOT_FOUND":                29,
	"API_STATUS_NWSEC_PROFILE_ID_INVALID":     30,
	"API_STATUS_NWSEC_PROFILE_NOT_FOUND":      31,
	"API_STATUS_TLS_CB_ID_INVALID":            32,
	"API_STATUS_TLS_CB_NOT_FOUND":             33,
	"API_STATUS_TCP_CB_ID_INVALID":            34,
	"API_STATUS_TCP_CB_NOT_FOUND":             35,
	"API_STATUS_NETWORK_NOT_FOUND":            36,
	"API_STATUS_ACL_ID_INVALID":               37,
	"API_STATUS_ACL_NOT_FOUND":                38,
	"API_STATUS_WRING_ID_INVALID":             39,
	"API_STATUS_WRING_NOT_FOUND":              40,
	"API_STATUS_WRING_TYPE_INVALID":           41,
	"API_STATUS_PROXY_TYPE_INVALID":           42,
	"API_STATUS_IPSEC_CB_ID_INVALID":          43,
	"API_STATUS_IPSEC_CB_NOT_FOUND":           44,
	"API_STATUS_L4LB_KEY_INVALID":             45,
	"API_STATUS_CPU_CB_ID_INVALID":            46,
	"API_STATUS_CPU_CB_NOT_FOUND":             47,
	"API_STATUS_PROXY_NOT_ENABLED":            48,
	"API_STATUS_PROXY_FLOW_NOT_FOUND":         49,
	"API_STATUS_CFG_DB_ERR":                   50,
	"API_STATUS_SECURITY_GROUP_ID_INVALID":    51,
	"API_STATUS_SECURITY_POLICY_ID_INVALID":   52,
	"API_STATUS_ENDPOINT_UPD_KEY_HDL_INVALID": 53,
	"API_STATUS_DOS_POLICY_ID_INVALID":        54,
	"API_STATUS_DOS_POLICY_NOT_FOUND":         55,
	"API_STATUS_RAWR_CB_ID_INVALID":           56,
	"API_STATUS_RAWR_CB_NOT_FOUND":            57,
	"API_STATUS_OBJECT_IN_USE":                58,
	"API_STATUS_RAWC_CB_ID_INVALID":           59,
	"API_STATUS_RAWC_CB_NOT_FOUND":            60,
	"API_STATUS_PORT_ID_INVALID":              61,
	"API_STATUS_PORT_TYPE_INVALID":            62,
	"API_STATUS_PORT_SPEED_INVALID":           63,
	"API_STATUS_PORT_NUM_LANES_INVALID":       64,
	"API_STATUS_PORT_NOT_FOUND":               65,
	"API_STATUS_MC_ENTRY_ID_INVALID":          66,
	"API_STATUS_MC_ENTRY_NOT_FOUND":           67,
	"API_STATUS_PROXYR_CB_ID_INVALID":         68,
	"API_STATUS_PROXYR_CB_NOT_FOUND":          69,
	"API_STATUS_PROXYC_CB_ID_INVALID":         70,
	"API_STATUS_PROXYC_CB_NOT_FOUND":          71,
	"API_STATUS_QOS_CLASS_NOT_FOUND":          72,
	"API_STATUS_HW_READ_ERROR":                73,
	"API_STATUS_HW_WRITE_ERROR":               74,
}

func (x ApiStatus) String() string {
	return proto.EnumName(ApiStatus_name, int32(x))
}
func (ApiStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

// Types of Vrfs
type VrfType int32

const (
	VrfType_VRF_TYPE_NONE     VrfType = 0
	VrfType_VRF_TYPE_INFRA    VrfType = 1
	VrfType_VRF_TYPE_CUSTOMER VrfType = 2
)

var VrfType_name = map[int32]string{
	0: "VRF_TYPE_NONE",
	1: "VRF_TYPE_INFRA",
	2: "VRF_TYPE_CUSTOMER",
}
var VrfType_value = map[string]int32{
	"VRF_TYPE_NONE":     0,
	"VRF_TYPE_INFRA":    1,
	"VRF_TYPE_CUSTOMER": 2,
}

func (x VrfType) String() string {
	return proto.EnumName(VrfType_name, int32(x))
}
func (VrfType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

// Types of L2 segments
// TODO: L2segment should not have tenant, mgmt and infra. They are ideally be for vrf
type L2SegmentType int32

const (
	L2SegmentType_L2_SEGMENT_TYPE_NONE   L2SegmentType = 0
	L2SegmentType_L2_SEGMENT_TYPE_TENANT L2SegmentType = 1
	L2SegmentType_L2_SEGMENT_TYPE_MGMT   L2SegmentType = 2
	L2SegmentType_L2_SEGMENT_TYPE_INFRA  L2SegmentType = 3
	L2SegmentType_L2_SEGMENT_PRIMARY     L2SegmentType = 4
	L2SegmentType_L2_SEGMENT_ISOLATED    L2SegmentType = 5
)

var L2SegmentType_name = map[int32]string{
	0: "L2_SEGMENT_TYPE_NONE",
	1: "L2_SEGMENT_TYPE_TENANT",
	2: "L2_SEGMENT_TYPE_MGMT",
	3: "L2_SEGMENT_TYPE_INFRA",
	4: "L2_SEGMENT_PRIMARY",
	5: "L2_SEGMENT_ISOLATED",
}
var L2SegmentType_value = map[string]int32{
	"L2_SEGMENT_TYPE_NONE":   0,
	"L2_SEGMENT_TYPE_TENANT": 1,
	"L2_SEGMENT_TYPE_MGMT":   2,
	"L2_SEGMENT_TYPE_INFRA":  3,
	"L2_SEGMENT_PRIMARY":     4,
	"L2_SEGMENT_ISOLATED":    5,
}

func (x L2SegmentType) String() string {
	return proto.EnumName(L2SegmentType_name, int32(x))
}
func (L2SegmentType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

// Supported wire encaps for the L2 segments
type EncapType int32

const (
	EncapType_ENCAP_TYPE_NONE     EncapType = 0
	EncapType_ENCAP_TYPE_DOT1Q    EncapType = 1
	EncapType_ENCAP_TYPE_VXLAN    EncapType = 2
	EncapType_ENCAP_TYPE_IP_IN_IP EncapType = 3
	EncapType_ENCAP_TYPE_GRE      EncapType = 4
	EncapType_ENCAP_TYPE_IPSEC    EncapType = 5
)

var EncapType_name = map[int32]string{
	0: "ENCAP_TYPE_NONE",
	1: "ENCAP_TYPE_DOT1Q",
	2: "ENCAP_TYPE_VXLAN",
	3: "ENCAP_TYPE_IP_IN_IP",
	4: "ENCAP_TYPE_GRE",
	5: "ENCAP_TYPE_IPSEC",
}
var EncapType_value = map[string]int32{
	"ENCAP_TYPE_NONE":     0,
	"ENCAP_TYPE_DOT1Q":    1,
	"ENCAP_TYPE_VXLAN":    2,
	"ENCAP_TYPE_IP_IN_IP": 3,
	"ENCAP_TYPE_GRE":      4,
	"ENCAP_TYPE_IPSEC":    5,
}

func (x EncapType) String() string {
	return proto.EnumName(EncapType_name, int32(x))
}
func (EncapType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

// IP address families
type IPAddressFamily int32

const (
	IPAddressFamily_IP_AF_NONE  IPAddressFamily = 0
	IPAddressFamily_IP_AF_INET  IPAddressFamily = 1
	IPAddressFamily_IP_AF_INET6 IPAddressFamily = 2
)

var IPAddressFamily_name = map[int32]string{
	0: "IP_AF_NONE",
	1: "IP_AF_INET",
	2: "IP_AF_INET6",
}
var IPAddressFamily_value = map[string]int32{
	"IP_AF_NONE":  0,
	"IP_AF_INET":  1,
	"IP_AF_INET6": 2,
}

func (x IPAddressFamily) String() string {
	return proto.EnumName(IPAddressFamily_name, int32(x))
}
func (IPAddressFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

// Types of Work Ring
type WRingType int32

const (
	WRingType_WRING_TYPE_NONE             WRingType = 0
	WRingType_WRING_TYPE_SERQ             WRingType = 1
	WRingType_WRING_TYPE_NMDR_TX          WRingType = 2
	WRingType_WRING_TYPE_NMDR_RX          WRingType = 3
	WRingType_WRING_TYPE_NMPR_SMALL_TX    WRingType = 4
	WRingType_WRING_TYPE_NMPR_SMALL_RX    WRingType = 5
	WRingType_WRING_TYPE_NMPR_BIG_TX      WRingType = 6
	WRingType_WRING_TYPE_NMPR_BIG_RX      WRingType = 7
	WRingType_WRING_TYPE_BSQ              WRingType = 8
	WRingType_WRING_TYPE_BRQ              WRingType = 9
	WRingType_WRING_TYPE_SESQ             WRingType = 10
	WRingType_WRING_TYPE_IPSECCBQ         WRingType = 11
	WRingType_WRING_TYPE_ARQRX            WRingType = 12
	WRingType_WRING_TYPE_ASQ              WRingType = 13
	WRingType_WRING_TYPE_ASESQ            WRingType = 14
	WRingType_WRING_TYPE_RAWRCB           WRingType = 15
	WRingType_WRING_TYPE_IPSECCBQ_BARCO   WRingType = 16
	WRingType_WRING_TYPE_APP_REDIR_RAWC   WRingType = 17
	WRingType_WRING_TYPE_APP_REDIR_PROXYR WRingType = 18
	WRingType_WRING_TYPE_APP_REDIR_PROXYC WRingType = 19
	WRingType_WRING_TYPE_NMDR_RX_GC       WRingType = 20
	WRingType_WRING_TYPE_NMDR_TX_GC       WRingType = 21
	WRingType_WRING_TYPE_ARQTX            WRingType = 22
)

var WRingType_name = map[int32]string{
	0:  "WRING_TYPE_NONE",
	1:  "WRING_TYPE_SERQ",
	2:  "WRING_TYPE_NMDR_TX",
	3:  "WRING_TYPE_NMDR_RX",
	4:  "WRING_TYPE_NMPR_SMALL_TX",
	5:  "WRING_TYPE_NMPR_SMALL_RX",
	6:  "WRING_TYPE_NMPR_BIG_TX",
	7:  "WRING_TYPE_NMPR_BIG_RX",
	8:  "WRING_TYPE_BSQ",
	9:  "WRING_TYPE_BRQ",
	10: "WRING_TYPE_SESQ",
	11: "WRING_TYPE_IPSECCBQ",
	12: "WRING_TYPE_ARQRX",
	13: "WRING_TYPE_ASQ",
	14: "WRING_TYPE_ASESQ",
	15: "WRING_TYPE_RAWRCB",
	16: "WRING_TYPE_IPSECCBQ_BARCO",
	17: "WRING_TYPE_APP_REDIR_RAWC",
	18: "WRING_TYPE_APP_REDIR_PROXYR",
	19: "WRING_TYPE_APP_REDIR_PROXYC",
	20: "WRING_TYPE_NMDR_RX_GC",
	21: "WRING_TYPE_NMDR_TX_GC",
	22: "WRING_TYPE_ARQTX",
}
var WRingType_value = map[string]int32{
	"WRING_TYPE_NONE":             0,
	"WRING_TYPE_SERQ":             1,
	"WRING_TYPE_NMDR_TX":          2,
	"WRING_TYPE_NMDR_RX":          3,
	"WRING_TYPE_NMPR_SMALL_TX":    4,
	"WRING_TYPE_NMPR_SMALL_RX":    5,
	"WRING_TYPE_NMPR_BIG_TX":      6,
	"WRING_TYPE_NMPR_BIG_RX":      7,
	"WRING_TYPE_BSQ":              8,
	"WRING_TYPE_BRQ":              9,
	"WRING_TYPE_SESQ":             10,
	"WRING_TYPE_IPSECCBQ":         11,
	"WRING_TYPE_ARQRX":            12,
	"WRING_TYPE_ASQ":              13,
	"WRING_TYPE_ASESQ":            14,
	"WRING_TYPE_RAWRCB":           15,
	"WRING_TYPE_IPSECCBQ_BARCO":   16,
	"WRING_TYPE_APP_REDIR_RAWC":   17,
	"WRING_TYPE_APP_REDIR_PROXYR": 18,
	"WRING_TYPE_APP_REDIR_PROXYC": 19,
	"WRING_TYPE_NMDR_RX_GC":       20,
	"WRING_TYPE_NMDR_TX_GC":       21,
	"WRING_TYPE_ARQTX":            22,
}

func (x WRingType) String() string {
	return proto.EnumName(WRingType_name, int32(x))
}
func (WRingType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

// Types of Proxy Service
type ProxyType int32

const (
	ProxyType_PROXY_TYPE_NONE                ProxyType = 0
	ProxyType_PROXY_TYPE_TCP                 ProxyType = 1
	ProxyType_PROXY_TYPE_TLS                 ProxyType = 2
	ProxyType_PROXY_TYPE_IPSEC               ProxyType = 3
	ProxyType_PROXY_TYPE_GC                  ProxyType = 4
	ProxyType_PROXY_TYPE_CPU                 ProxyType = 5
	ProxyType_PROXY_TYPE_IPFIX               ProxyType = 6
	ProxyType_PROXY_TYPE_APP_REDIR           ProxyType = 7
	ProxyType_PROXY_TYPE_P4PT                ProxyType = 8
	ProxyType_PROXY_TYPE_APP_REDIR_PROXY_TCP ProxyType = 9
)

var ProxyType_name = map[int32]string{
	0: "PROXY_TYPE_NONE",
	1: "PROXY_TYPE_TCP",
	2: "PROXY_TYPE_TLS",
	3: "PROXY_TYPE_IPSEC",
	4: "PROXY_TYPE_GC",
	5: "PROXY_TYPE_CPU",
	6: "PROXY_TYPE_IPFIX",
	7: "PROXY_TYPE_APP_REDIR",
	8: "PROXY_TYPE_P4PT",
	9: "PROXY_TYPE_APP_REDIR_PROXY_TCP",
}
var ProxyType_value = map[string]int32{
	"PROXY_TYPE_NONE":                0,
	"PROXY_TYPE_TCP":                 1,
	"PROXY_TYPE_TLS":                 2,
	"PROXY_TYPE_IPSEC":               3,
	"PROXY_TYPE_GC":                  4,
	"PROXY_TYPE_CPU":                 5,
	"PROXY_TYPE_IPFIX":               6,
	"PROXY_TYPE_APP_REDIR":           7,
	"PROXY_TYPE_P4PT":                8,
	"PROXY_TYPE_APP_REDIR_PROXY_TCP": 9,
}

func (x ProxyType) String() string {
	return proto.EnumName(ProxyType_name, int32(x))
}
func (ProxyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

// Types of Cryptographic keys
type CryptoKeyType int32

const (
	CryptoKeyType_CRYPTO_KEY_TYPE_AES128   CryptoKeyType = 0
	CryptoKeyType_CRYPTO_KEY_TYPE_AES192   CryptoKeyType = 1
	CryptoKeyType_CRYPTO_KEY_TYPE_AES256   CryptoKeyType = 2
	CryptoKeyType_CRYPTO_KEY_TYPE_DES      CryptoKeyType = 3
	CryptoKeyType_CRYPTO_KEY_TYPE_CHACHA20 CryptoKeyType = 4
	CryptoKeyType_CRYPTO_KEY_TYPE_POLY1305 CryptoKeyType = 5
	CryptoKeyType_CRYPTO_KEY_TYPE_HMAC     CryptoKeyType = 6
)

var CryptoKeyType_name = map[int32]string{
	0: "CRYPTO_KEY_TYPE_AES128",
	1: "CRYPTO_KEY_TYPE_AES192",
	2: "CRYPTO_KEY_TYPE_AES256",
	3: "CRYPTO_KEY_TYPE_DES",
	4: "CRYPTO_KEY_TYPE_CHACHA20",
	5: "CRYPTO_KEY_TYPE_POLY1305",
	6: "CRYPTO_KEY_TYPE_HMAC",
}
var CryptoKeyType_value = map[string]int32{
	"CRYPTO_KEY_TYPE_AES128":   0,
	"CRYPTO_KEY_TYPE_AES192":   1,
	"CRYPTO_KEY_TYPE_AES256":   2,
	"CRYPTO_KEY_TYPE_DES":      3,
	"CRYPTO_KEY_TYPE_CHACHA20": 4,
	"CRYPTO_KEY_TYPE_POLY1305": 5,
	"CRYPTO_KEY_TYPE_HMAC":     6,
}

func (x CryptoKeyType) String() string {
	return proto.EnumName(CryptoKeyType_name, int32(x))
}
func (CryptoKeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

// Types of Barco Rings
type BarcoRings int32

const (
	BarcoRings_BARCO_RING_ASYM BarcoRings = 0
	BarcoRings_BARCO_RING_GCM0 BarcoRings = 1
	BarcoRings_BARCO_RING_GCM1 BarcoRings = 2
	BarcoRings_BARCO_RING_XTS0 BarcoRings = 3
	BarcoRings_BARCO_RING_XTS1 BarcoRings = 4
	BarcoRings_BARCO_RING_MPP0 BarcoRings = 5
	BarcoRings_BARCO_RING_MPP1 BarcoRings = 6
	BarcoRings_BARCO_RING_MPP2 BarcoRings = 7
	BarcoRings_BARCO_RING_MPP3 BarcoRings = 8
	BarcoRings_BARCO_RING_MPP4 BarcoRings = 9
	BarcoRings_BARCO_RING_MPP5 BarcoRings = 10
	BarcoRings_BARCO_RING_MPP6 BarcoRings = 11
	BarcoRings_BARCO_RING_MPP7 BarcoRings = 12
)

var BarcoRings_name = map[int32]string{
	0:  "BARCO_RING_ASYM",
	1:  "BARCO_RING_GCM0",
	2:  "BARCO_RING_GCM1",
	3:  "BARCO_RING_XTS0",
	4:  "BARCO_RING_XTS1",
	5:  "BARCO_RING_MPP0",
	6:  "BARCO_RING_MPP1",
	7:  "BARCO_RING_MPP2",
	8:  "BARCO_RING_MPP3",
	9:  "BARCO_RING_MPP4",
	10: "BARCO_RING_MPP5",
	11: "BARCO_RING_MPP6",
	12: "BARCO_RING_MPP7",
}
var BarcoRings_value = map[string]int32{
	"BARCO_RING_ASYM": 0,
	"BARCO_RING_GCM0": 1,
	"BARCO_RING_GCM1": 2,
	"BARCO_RING_XTS0": 3,
	"BARCO_RING_XTS1": 4,
	"BARCO_RING_MPP0": 5,
	"BARCO_RING_MPP1": 6,
	"BARCO_RING_MPP2": 7,
	"BARCO_RING_MPP3": 8,
	"BARCO_RING_MPP4": 9,
	"BARCO_RING_MPP5": 10,
	"BARCO_RING_MPP6": 11,
	"BARCO_RING_MPP7": 12,
}

func (x BarcoRings) String() string {
	return proto.EnumName(BarcoRings_name, int32(x))
}
func (BarcoRings) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

type AppRedirType int32

const (
	AppRedirType_APP_REDIR_TYPE_NONE     AppRedirType = 0
	AppRedirType_APP_REDIR_TYPE_REDIRECT AppRedirType = 1
	AppRedirType_APP_REDIR_TYPE_SPAN     AppRedirType = 2
)

var AppRedirType_name = map[int32]string{
	0: "APP_REDIR_TYPE_NONE",
	1: "APP_REDIR_TYPE_REDIRECT",
	2: "APP_REDIR_TYPE_SPAN",
}
var AppRedirType_value = map[string]int32{
	"APP_REDIR_TYPE_NONE":     0,
	"APP_REDIR_TYPE_REDIRECT": 1,
	"APP_REDIR_TYPE_SPAN":     2,
}

func (x AppRedirType) String() string {
	return proto.EnumName(AppRedirType_name, int32(x))
}
func (AppRedirType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

// Types of CPU CB/QIDs
type CpucbId int32

const (
	CpucbId_CPUCB_ID_FLOWMISS      CpucbId = 0
	CpucbId_CPUCB_ID_TCP_CLOSE     CpucbId = 1
	CpucbId_CPUCB_ID_RELIABLE_COPY CpucbId = 2
	CpucbId_CPUCB_ID_NACL_REDIRECT CpucbId = 3
	CpucbId_CPUCB_ID_QUIESCE       CpucbId = 4
	CpucbId_CPUCB_ID_NACL_LOG      CpucbId = 5
)

var CpucbId_name = map[int32]string{
	0: "CPUCB_ID_FLOWMISS",
	1: "CPUCB_ID_TCP_CLOSE",
	2: "CPUCB_ID_RELIABLE_COPY",
	3: "CPUCB_ID_NACL_REDIRECT",
	4: "CPUCB_ID_QUIESCE",
	5: "CPUCB_ID_NACL_LOG",
}
var CpucbId_value = map[string]int32{
	"CPUCB_ID_FLOWMISS":      0,
	"CPUCB_ID_TCP_CLOSE":     1,
	"CPUCB_ID_RELIABLE_COPY": 2,
	"CPUCB_ID_NACL_REDIRECT": 3,
	"CPUCB_ID_QUIESCE":       4,
	"CPUCB_ID_NACL_LOG":      5,
}

func (x CpucbId) String() string {
	return proto.EnumName(CpucbId_name, int32(x))
}
func (CpucbId) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

// common meta object that is part of all other top level objects
// TODO: should we add last updated timestamp, revision etc. here ?
type ObjectMeta struct {
	VrfId uint64 `protobuf:"fixed64,1,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *ObjectMeta) GetVrfId() uint64 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

// EncapInfo captures wire encap information
type EncapInfo struct {
	EncapType  EncapType `protobuf:"varint,1,opt,name=encap_type,json=encapType,proto3,enum=types.EncapType" json:"encap_type,omitempty"`
	EncapValue uint32    `protobuf:"varint,2,opt,name=encap_value,json=encapValue,proto3" json:"encap_value,omitempty"`
}

func (m *EncapInfo) Reset()                    { *m = EncapInfo{} }
func (m *EncapInfo) String() string            { return proto.CompactTextString(m) }
func (*EncapInfo) ProtoMessage()               {}
func (*EncapInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *EncapInfo) GetEncapType() EncapType {
	if m != nil {
		return m.EncapType
	}
	return EncapType_ENCAP_TYPE_NONE
}

func (m *EncapInfo) GetEncapValue() uint32 {
	if m != nil {
		return m.EncapValue
	}
	return 0
}

// IP address object
type IPAddress struct {
	IpAf IPAddressFamily `protobuf:"varint,1,opt,name=ip_af,json=ipAf,proto3,enum=types.IPAddressFamily" json:"ip_af,omitempty"`
	// Types that are valid to be assigned to V4OrV6:
	//	*IPAddress_V4Addr
	//	*IPAddress_V6Addr
	V4OrV6 isIPAddress_V4OrV6 `protobuf_oneof:"v4_or_v6"`
}

func (m *IPAddress) Reset()                    { *m = IPAddress{} }
func (m *IPAddress) String() string            { return proto.CompactTextString(m) }
func (*IPAddress) ProtoMessage()               {}
func (*IPAddress) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

type isIPAddress_V4OrV6 interface {
	isIPAddress_V4OrV6()
	MarshalTo([]byte) (int, error)
	Size() int
}

type IPAddress_V4Addr struct {
	V4Addr uint32 `protobuf:"fixed32,2,opt,name=v4_addr,json=v4Addr,proto3,oneof"`
}
type IPAddress_V6Addr struct {
	V6Addr []byte `protobuf:"bytes,3,opt,name=v6_addr,json=v6Addr,proto3,oneof"`
}

func (*IPAddress_V4Addr) isIPAddress_V4OrV6() {}
func (*IPAddress_V6Addr) isIPAddress_V4OrV6() {}

func (m *IPAddress) GetV4OrV6() isIPAddress_V4OrV6 {
	if m != nil {
		return m.V4OrV6
	}
	return nil
}

func (m *IPAddress) GetIpAf() IPAddressFamily {
	if m != nil {
		return m.IpAf
	}
	return IPAddressFamily_IP_AF_NONE
}

func (m *IPAddress) GetV4Addr() uint32 {
	if x, ok := m.GetV4OrV6().(*IPAddress_V4Addr); ok {
		return x.V4Addr
	}
	return 0
}

func (m *IPAddress) GetV6Addr() []byte {
	if x, ok := m.GetV4OrV6().(*IPAddress_V6Addr); ok {
		return x.V6Addr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*IPAddress) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _IPAddress_OneofMarshaler, _IPAddress_OneofUnmarshaler, _IPAddress_OneofSizer, []interface{}{
		(*IPAddress_V4Addr)(nil),
		(*IPAddress_V6Addr)(nil),
	}
}

func _IPAddress_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*IPAddress)
	// v4_or_v6
	switch x := m.V4OrV6.(type) {
	case *IPAddress_V4Addr:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.V4Addr))
	case *IPAddress_V6Addr:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.V6Addr)
	case nil:
	default:
		return fmt.Errorf("IPAddress.V4OrV6 has unexpected type %T", x)
	}
	return nil
}

func _IPAddress_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*IPAddress)
	switch tag {
	case 2: // v4_or_v6.v4_addr
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.V4OrV6 = &IPAddress_V4Addr{uint32(x)}
		return true, err
	case 3: // v4_or_v6.v6_addr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.V4OrV6 = &IPAddress_V6Addr{x}
		return true, err
	default:
		return false, nil
	}
}

func _IPAddress_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*IPAddress)
	// v4_or_v6
	switch x := m.V4OrV6.(type) {
	case *IPAddress_V4Addr:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *IPAddress_V6Addr:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.V6Addr)))
		n += len(x.V6Addr)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// IP Range
type IPRange struct {
	LowIpaddr  *IPAddress `protobuf:"bytes,1,opt,name=low_ipaddr,json=lowIpaddr" json:"low_ipaddr,omitempty"`
	HighIpaddr *IPAddress `protobuf:"bytes,2,opt,name=high_ipaddr,json=highIpaddr" json:"high_ipaddr,omitempty"`
}

func (m *IPRange) Reset()                    { *m = IPRange{} }
func (m *IPRange) String() string            { return proto.CompactTextString(m) }
func (*IPRange) ProtoMessage()               {}
func (*IPRange) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *IPRange) GetLowIpaddr() *IPAddress {
	if m != nil {
		return m.LowIpaddr
	}
	return nil
}

func (m *IPRange) GetHighIpaddr() *IPAddress {
	if m != nil {
		return m.HighIpaddr
	}
	return nil
}

// IP Prefix object
type IPPrefix struct {
	Address   *IPAddress `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PrefixLen uint32     `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty" venice:range:0-128`
}

func (m *IPPrefix) Reset()                    { *m = IPPrefix{} }
func (m *IPPrefix) String() string            { return proto.CompactTextString(m) }
func (*IPPrefix) ProtoMessage()               {}
func (*IPPrefix) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *IPPrefix) GetAddress() *IPAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *IPPrefix) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

// PortRange object has low and high end of the port ranges
type L4PortRange struct {
	PortLow  uint32 `protobuf:"varint,1,opt,name=port_low,json=portLow,proto3" json:"port_low,omitempty"`
	PortHigh uint32 `protobuf:"varint,2,opt,name=port_high,json=portHigh,proto3" json:"port_high,omitempty"`
}

func (m *L4PortRange) Reset()                    { *m = L4PortRange{} }
func (m *L4PortRange) String() string            { return proto.CompactTextString(m) }
func (*L4PortRange) ProtoMessage()               {}
func (*L4PortRange) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *L4PortRange) GetPortLow() uint32 {
	if m != nil {
		return m.PortLow
	}
	return 0
}

func (m *L4PortRange) GetPortHigh() uint32 {
	if m != nil {
		return m.PortHigh
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func init() {
	proto.RegisterType((*ObjectMeta)(nil), "types.ObjectMeta")
	proto.RegisterType((*EncapInfo)(nil), "types.EncapInfo")
	proto.RegisterType((*IPAddress)(nil), "types.IPAddress")
	proto.RegisterType((*IPRange)(nil), "types.IPRange")
	proto.RegisterType((*IPPrefix)(nil), "types.IPPrefix")
	proto.RegisterType((*L4PortRange)(nil), "types.L4PortRange")
	proto.RegisterType((*Empty)(nil), "types.Empty")
	proto.RegisterEnum("types.IPProtocol", IPProtocol_name, IPProtocol_value)
	proto.RegisterEnum("types.ICMPMsgType", ICMPMsgType_name, ICMPMsgType_value)
	proto.RegisterEnum("types.ApiStatus", ApiStatus_name, ApiStatus_value)
	proto.RegisterEnum("types.VrfType", VrfType_name, VrfType_value)
	proto.RegisterEnum("types.L2SegmentType", L2SegmentType_name, L2SegmentType_value)
	proto.RegisterEnum("types.EncapType", EncapType_name, EncapType_value)
	proto.RegisterEnum("types.IPAddressFamily", IPAddressFamily_name, IPAddressFamily_value)
	proto.RegisterEnum("types.WRingType", WRingType_name, WRingType_value)
	proto.RegisterEnum("types.ProxyType", ProxyType_name, ProxyType_value)
	proto.RegisterEnum("types.CryptoKeyType", CryptoKeyType_name, CryptoKeyType_value)
	proto.RegisterEnum("types.BarcoRings", BarcoRings_name, BarcoRings_value)
	proto.RegisterEnum("types.AppRedirType", AppRedirType_name, AppRedirType_value)
	proto.RegisterEnum("types.CpucbId", CpucbId_name, CpucbId_value)
}
func (m *ObjectMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VrfId != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Types(dAtA, i, uint64(m.VrfId))
	}
	return i, nil
}

func (m *EncapInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncapInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EncapType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EncapType))
	}
	if m.EncapValue != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.EncapValue))
	}
	return i, nil
}

func (m *IPAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPAddress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IpAf != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.IpAf))
	}
	if m.V4OrV6 != nil {
		nn1, err := m.V4OrV6.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *IPAddress_V4Addr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Types(dAtA, i, uint32(m.V4Addr))
	return i, nil
}
func (m *IPAddress_V6Addr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.V6Addr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.V6Addr)))
		i += copy(dAtA[i:], m.V6Addr)
	}
	return i, nil
}
func (m *IPRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LowIpaddr != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.LowIpaddr.Size()))
		n2, err := m.LowIpaddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.HighIpaddr != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.HighIpaddr.Size()))
		n3, err := m.HighIpaddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *IPPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IPPrefix) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Address.Size()))
		n4, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PrefixLen != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PrefixLen))
	}
	return i, nil
}

func (m *L4PortRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L4PortRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PortLow != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PortLow))
	}
	if m.PortHigh != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.PortHigh))
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Types(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Types(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ObjectMeta) Size() (n int) {
	var l int
	_ = l
	if m.VrfId != 0 {
		n += 9
	}
	return n
}

func (m *EncapInfo) Size() (n int) {
	var l int
	_ = l
	if m.EncapType != 0 {
		n += 1 + sovTypes(uint64(m.EncapType))
	}
	if m.EncapValue != 0 {
		n += 1 + sovTypes(uint64(m.EncapValue))
	}
	return n
}

func (m *IPAddress) Size() (n int) {
	var l int
	_ = l
	if m.IpAf != 0 {
		n += 1 + sovTypes(uint64(m.IpAf))
	}
	if m.V4OrV6 != nil {
		n += m.V4OrV6.Size()
	}
	return n
}

func (m *IPAddress_V4Addr) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *IPAddress_V6Addr) Size() (n int) {
	var l int
	_ = l
	if m.V6Addr != nil {
		l = len(m.V6Addr)
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *IPRange) Size() (n int) {
	var l int
	_ = l
	if m.LowIpaddr != nil {
		l = m.LowIpaddr.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HighIpaddr != nil {
		l = m.HighIpaddr.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IPPrefix) Size() (n int) {
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PrefixLen != 0 {
		n += 1 + sovTypes(uint64(m.PrefixLen))
	}
	return n
}

func (m *L4PortRange) Size() (n int) {
	var l int
	_ = l
	if m.PortLow != 0 {
		n += 1 + sovTypes(uint64(m.PortLow))
	}
	if m.PortHigh != 0 {
		n += 1 + sovTypes(uint64(m.PortHigh))
	}
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObjectMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.VrfId = uint64(dAtA[iNdEx-8])
			m.VrfId |= uint64(dAtA[iNdEx-7]) << 8
			m.VrfId |= uint64(dAtA[iNdEx-6]) << 16
			m.VrfId |= uint64(dAtA[iNdEx-5]) << 24
			m.VrfId |= uint64(dAtA[iNdEx-4]) << 32
			m.VrfId |= uint64(dAtA[iNdEx-3]) << 40
			m.VrfId |= uint64(dAtA[iNdEx-2]) << 48
			m.VrfId |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncapInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncapInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncapInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncapType", wireType)
			}
			m.EncapType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncapType |= (EncapType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncapValue", wireType)
			}
			m.EncapValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncapValue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAf", wireType)
			}
			m.IpAf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpAf |= (IPAddressFamily(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field V4Addr", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.V4OrV6 = &IPAddress_V4Addr{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V6Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.V4OrV6 = &IPAddress_V6Addr{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowIpaddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LowIpaddr == nil {
				m.LowIpaddr = &IPAddress{}
			}
			if err := m.LowIpaddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighIpaddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HighIpaddr == nil {
				m.HighIpaddr = &IPAddress{}
			}
			if err := m.HighIpaddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IPPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IPPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IPPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &IPAddress{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrefixLen", wireType)
			}
			m.PrefixLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrefixLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L4PortRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L4PortRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L4PortRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortLow", wireType)
			}
			m.PortLow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortLow |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortHigh", wireType)
			}
			m.PortHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortHigh |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 2026 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x58, 0xdf, 0x52, 0x1b, 0xc9,
	0xf5, 0xf6, 0x08, 0x84, 0x50, 0x0b, 0x70, 0xd3, 0x60, 0x8c, 0xb1, 0x8d, 0xb1, 0x6c, 0xaf, 0xbd,
	0xf2, 0x6f, 0x6d, 0x90, 0x31, 0xeb, 0xf5, 0x2f, 0x9b, 0x64, 0x34, 0x6a, 0x49, 0xb3, 0x9e, 0x3f,
	0xad, 0x9e, 0x11, 0x48, 0xa9, 0xda, 0xea, 0x92, 0x41, 0x60, 0xa5, 0x30, 0x52, 0x09, 0x19, 0x2f,
	0x79, 0x89, 0xdc, 0xe6, 0x66, 0x5f, 0x20, 0x79, 0x91, 0x5c, 0xa6, 0xf6, 0x01, 0x52, 0x29, 0xe7,
	0x3e, 0x17, 0xa9, 0x3c, 0x40, 0xaa, 0x67, 0xd0, 0x4c, 0xcf, 0x19, 0x91, 0x3b, 0xcd, 0xf7, 0x7d,
	0xfd, 0x9d, 0xee, 0xd3, 0xa7, 0x7b, 0xce, 0x08, 0x15, 0xc6, 0x97, 0xc3, 0xde, 0xf9, 0x8b, 0xe1,
	0x68, 0x30, 0x1e, 0x90, 0x6c, 0xf0, 0xb0, 0x81, 0x4e, 0x06, 0x27, 0x83, 0x10, 0x2a, 0x3e, 0x42,
	0xc8, 0x7d, 0xff, 0xfb, 0xde, 0xe1, 0xd8, 0xee, 0x8d, 0xbb, 0xe4, 0x16, 0x9a, 0xbb, 0x18, 0x1d,
	0x8b, 0xfe, 0xd1, 0xba, 0xb6, 0xa5, 0x3d, 0x9b, 0xe3, 0xd9, 0x8b, 0xd1, 0xb1, 0x79, 0x54, 0xfc,
	0x11, 0xe5, 0xe9, 0xd9, 0x61, 0x77, 0x68, 0x9e, 0x1d, 0x0f, 0xc8, 0x4b, 0x84, 0x7a, 0xf2, 0x41,
	0x48, 0xb3, 0x40, 0xb7, 0x54, 0xc6, 0x2f, 0xc2, 0x30, 0x01, 0xe1, 0x5f, 0x0e, 0x7b, 0x3c, 0x1f,
	0xfd, 0x24, 0x0f, 0x50, 0x21, 0x1c, 0x70, 0xd1, 0x3d, 0xfd, 0xd4, 0x5b, 0xcf, 0x6c, 0x69, 0xcf,
	0x16, 0x79, 0xe8, 0xb1, 0x2f, 0x91, 0xe2, 0x1f, 0x50, 0xde, 0x64, 0xfa, 0xd1, 0xd1, 0xa8, 0x77,
	0x7e, 0x4e, 0x9e, 0xa3, 0x6c, 0x7f, 0x28, 0xba, 0xc7, 0x57, 0xce, 0x6b, 0x57, 0xce, 0x91, 0xa0,
	0xd6, 0xfd, 0xd8, 0x3f, 0xbd, 0xe4, 0xb3, 0xfd, 0xa1, 0x7e, 0x4c, 0xee, 0xa0, 0xdc, 0xc5, 0xae,
	0xe8, 0x1e, 0x1d, 0x8d, 0x02, 0xdb, 0x5c, 0xe3, 0x06, 0x9f, 0xbb, 0xd8, 0x95, 0xca, 0x80, 0xda,
	0x0b, 0xa9, 0x99, 0x2d, 0xed, 0xd9, 0x42, 0x40, 0xed, 0x49, 0xaa, 0x82, 0xd0, 0xfc, 0xc5, 0xae,
	0x18, 0x8c, 0xc4, 0xc5, 0x5e, 0xf1, 0x23, 0xca, 0x99, 0x8c, 0x77, 0xcf, 0x4e, 0x7a, 0x72, 0x61,
	0xa7, 0x83, 0xcf, 0xa2, 0x3f, 0x0c, 0x06, 0xc9, 0xf0, 0x85, 0x68, 0x61, 0x51, 0x78, 0x9e, 0x3f,
	0x1d, 0x7c, 0x36, 0x03, 0x09, 0xd9, 0x41, 0x85, 0x0f, 0xfd, 0x93, 0x0f, 0x93, 0x11, 0x99, 0x6b,
	0x46, 0x20, 0x29, 0x0a, 0x87, 0x14, 0x3f, 0xa2, 0x79, 0x93, 0xb1, 0x51, 0xef, 0xb8, 0xff, 0x13,
	0x29, 0xa1, 0x5c, 0x37, 0x94, 0x5c, 0x1b, 0x6c, 0x22, 0x20, 0xaf, 0x11, 0x1a, 0x06, 0xa3, 0xc4,
	0x69, 0xef, 0x2c, 0x4c, 0x61, 0x65, 0xed, 0xdf, 0x7f, 0x7f, 0x40, 0x2e, 0x7a, 0x67, 0xfd, 0xc3,
	0xde, 0xdb, 0x91, 0x5c, 0xc1, 0xdb, 0xed, 0x6f, 0x76, 0xca, 0x6f, 0x78, 0x3e, 0x54, 0x5a, 0xbd,
	0xb3, 0x22, 0x45, 0x05, 0x6b, 0x97, 0x0d, 0x46, 0xe3, 0x70, 0x85, 0x77, 0xd0, 0xfc, 0x70, 0x30,
	0x1a, 0x8b, 0xd3, 0xc1, 0xe7, 0x20, 0xe4, 0x22, 0xcf, 0xc9, 0x67, 0x6b, 0xf0, 0x99, 0xdc, 0x45,
	0xf9, 0x80, 0x92, 0x73, 0xbd, 0xda, 0xa2, 0x40, 0xdb, 0xe8, 0x9f, 0x7c, 0x28, 0xe6, 0x50, 0x96,
	0x7e, 0x1c, 0x8e, 0x2f, 0x4b, 0x7f, 0xd6, 0x10, 0x92, 0xf3, 0x1f, 0x8c, 0x07, 0x87, 0x83, 0x53,
	0x82, 0xd1, 0x82, 0xc9, 0x18, 0x77, 0x7d, 0x57, 0x38, 0xae, 0x43, 0xf1, 0x0d, 0x15, 0x31, 0x0d,
	0x9b, 0x61, 0x2d, 0x81, 0xb0, 0xfd, 0x5d, 0x3c, 0x4b, 0x6e, 0xa2, 0xc2, 0x04, 0xf1, 0x0d, 0x86,
	0xe7, 0x54, 0xa0, 0x55, 0x65, 0x78, 0x59, 0x05, 0xea, 0x9c, 0xe2, 0x97, 0x2a, 0x40, 0x3d, 0x86,
	0xcb, 0x64, 0x29, 0x98, 0x47, 0x00, 0xe8, 0x0d, 0xfc, 0x8a, 0x10, 0xb4, 0xa4, 0xc6, 0xdd, 0xdf,
	0xc3, 0x6f, 0x4b, 0xdf, 0xa3, 0x82, 0xfc, 0x6d, 0x9f, 0x9f, 0x04, 0x65, 0xb8, 0x86, 0x88, 0x7c,
	0x14, 0xb6, 0x57, 0x17, 0x7e, 0x87, 0xd1, 0xc9, 0x94, 0x53, 0x38, 0x35, 0x1a, 0x2e, 0xd6, 0x4a,
	0xff, 0x59, 0x41, 0x79, 0x7d, 0xd8, 0xf7, 0xc6, 0xdd, 0xf1, 0xa7, 0x73, 0xb2, 0x8c, 0x16, 0x75,
	0x66, 0x0a, 0xcf, 0xd7, 0xfd, 0x96, 0x27, 0xdc, 0x77, 0xf8, 0x86, 0x8c, 0xa9, 0x40, 0x94, 0x73,
	0xac, 0x91, 0x0d, 0xb4, 0xa6, 0x60, 0xa6, 0xb3, 0xaf, 0x5b, 0x66, 0x55, 0xe8, 0xbc, 0x8e, 0x33,
	0xe4, 0x3e, 0xba, 0xa3, 0xea, 0xdb, 0xa6, 0xe7, 0x7b, 0x42, 0xb7, 0x38, 0xd5, 0xab, 0x1d, 0x3c,
	0x43, 0xee, 0xa0, 0x5b, 0x6a, 0x84, 0x96, 0x2f, 0xdc, 0x9a, 0xb0, 0xa9, 0x8d, 0x67, 0xc9, 0x3a,
	0x5a, 0x55, 0x28, 0xc7, 0xf5, 0x45, 0xcd, 0x6d, 0x39, 0x55, 0x9c, 0x25, 0x9b, 0x68, 0x23, 0x3d,
	0x88, 0x53, 0xcf, 0x6d, 0x71, 0x83, 0xe2, 0x39, 0x72, 0x0f, 0xad, 0xab, 0x31, 0x1d, 0x43, 0x67,
	0x93, 0x59, 0xe1, 0x1c, 0x98, 0xd1, 0x3e, 0xaf, 0x09, 0xb3, 0x1a, 0xd1, 0xf3, 0x60, 0xb0, 0xa4,
	0xe3, 0xd0, 0x79, 0xf2, 0x18, 0x6d, 0x29, 0xac, 0x55, 0x16, 0x1e, 0xad, 0xdb, 0xd4, 0xf1, 0x55,
	0x0f, 0x44, 0x1e, 0xa1, 0x07, 0xd3, 0x55, 0xb1, 0x55, 0x01, 0x88, 0x4c, 0xc7, 0xa7, 0xbc, 0xa6,
	0x1b, 0x54, 0x75, 0x5a, 0x20, 0x45, 0xb4, 0x39, 0x55, 0x14, 0x1b, 0x2d, 0x82, 0x74, 0x98, 0xb5,
	0x70, 0x43, 0x27, 0x1e, 0x4b, 0x69, 0xde, 0x74, 0x6a, 0x6e, 0xc4, 0xdf, 0x84, 0x13, 0xa9, 0x09,
	0xab, 0x1c, 0xad, 0xea, 0x4a, 0x84, 0xd3, 0x22, 0xea, 0x98, 0x46, 0xd2, 0x69, 0xf9, 0x1a, 0x51,
	0x62, 0x3a, 0x84, 0x7c, 0x85, 0x8a, 0x20, 0xdc, 0x64, 0x4a, 0x72, 0x51, 0x13, 0xdd, 0x0a, 0x79,
	0x8a, 0x1e, 0xa5, 0x74, 0xcd, 0xb4, 0x70, 0x95, 0x3c, 0x44, 0xf7, 0x13, 0xdb, 0x5d, 0x65, 0xae,
	0x99, 0xc8, 0xf5, 0x2d, 0xf2, 0x00, 0xdd, 0x55, 0x24, 0x35, 0xcb, 0x3d, 0x10, 0xef, 0x68, 0x27,
	0xf2, 0x58, 0x23, 0x5b, 0xe8, 0x1e, 0x14, 0x24, 0xd6, 0x76, 0x1b, 0x94, 0x4d, 0xa0, 0x88, 0x23,
	0xac, 0x03, 0x03, 0x8f, 0x7a, 0x9e, 0xe9, 0x3a, 0x8a, 0xe2, 0x0e, 0x30, 0x68, 0xe8, 0x4e, 0xd5,
	0x8a, 0xd3, 0xb2, 0x01, 0x0e, 0x51, 0xe3, 0x40, 0x30, 0xee, 0xd6, 0x83, 0x03, 0x76, 0x17, 0x0c,
	0x0d, 0xf2, 0x15, 0x17, 0xc9, 0x3d, 0x50, 0xb2, 0x92, 0x8e, 0xe3, 0xde, 0x07, 0x79, 0x74, 0x0e,
	0x3c, 0x6a, 0x48, 0xef, 0x9a, 0x69, 0x25, 0x6a, 0x6d, 0x13, 0x6c, 0x4c, 0x52, 0x18, 0x1b, 0x3e,
	0x00, 0x4b, 0xf5, 0x2d, 0x4f, 0x18, 0x15, 0xd5, 0x69, 0x0b, 0xa4, 0xfb, 0x4a, 0x11, 0x5b, 0x3c,
	0x84, 0x16, 0x06, 0x03, 0x16, 0x45, 0x68, 0x11, 0x2a, 0x62, 0x8b, 0x47, 0xc0, 0xc2, 0xa1, 0xfe,
	0x81, 0xcb, 0xdf, 0x29, 0x8a, 0xc7, 0x20, 0x6b, 0xba, 0x61, 0xa9, 0x11, 0x9e, 0x80, 0xac, 0x49,
	0x3a, 0x1e, 0xfc, 0x15, 0x88, 0x7f, 0xc0, 0x4d, 0xa7, 0xae, 0x0e, 0x7f, 0x0a, 0x4e, 0x55, 0x28,
	0x88, 0x0d, 0x9e, 0x81, 0xaa, 0x0c, 0xf9, 0xc4, 0x49, 0xf8, 0x1a, 0x48, 0x18, 0x77, 0xdb, 0x9d,
	0xa4, 0xa4, 0x04, 0xcf, 0x3f, 0x93, 0x7b, 0x92, 0x4c, 0xd5, 0x73, 0x60, 0x13, 0x69, 0xe2, 0xc9,
	0xfc, 0x1f, 0x58, 0x8d, 0xb5, 0x6b, 0x55, 0x12, 0xf5, 0xff, 0x0d, 0xc8, 0xa6, 0xc1, 0x5a, 0x20,
	0xca, 0x0b, 0x60, 0x71, 0xa5, 0x88, 0x63, 0xbc, 0x04, 0x16, 0xe1, 0x6a, 0x24, 0x4f, 0x1d, 0xbd,
	0x62, 0xd1, 0x2a, 0xde, 0x06, 0xd7, 0x43, 0xa8, 0x00, 0x07, 0x69, 0x07, 0xbc, 0x11, 0x8c, 0x5a,
	0x5d, 0x54, 0x2b, 0xc1, 0x31, 0x28, 0x93, 0x67, 0xe8, 0x71, 0xe2, 0x8c, 0x19, 0x2d, 0x6e, 0xfa,
	0x1d, 0x51, 0xe7, 0x6e, 0x8b, 0xa9, 0x93, 0x7d, 0x45, 0xbe, 0x46, 0x4f, 0xa6, 0x29, 0x99, 0x6b,
	0x99, 0x46, 0x47, 0x95, 0xee, 0x92, 0xe7, 0xe8, 0xe9, 0xb4, 0xdb, 0xa3, 0xc5, 0xaa, 0x41, 0x8a,
	0x1a, 0x55, 0x2b, 0x12, 0xbf, 0x06, 0xd7, 0x7f, 0xd5, 0xf5, 0xa6, 0x58, 0xee, 0x81, 0x75, 0x2a,
	0xaa, 0x78, 0x9d, 0xdf, 0x82, 0x5d, 0xe3, 0xfa, 0x01, 0x07, 0x29, 0x7f, 0x03, 0x32, 0x3a, 0x91,
	0xc4, 0x26, 0xdf, 0x81, 0x1a, 0x76, 0x2b, 0x3f, 0x50, 0x43, 0xde, 0x8c, 0xa2, 0xe5, 0x51, 0xfc,
	0x36, 0x1d, 0x02, 0xd6, 0xce, 0xff, 0xa7, 0x43, 0x80, 0xd2, 0xf9, 0x15, 0xa8, 0x73, 0xe6, 0xf2,
	0xc4, 0xbb, 0xee, 0x7b, 0xb8, 0xed, 0x92, 0x4f, 0xd4, 0xf0, 0xaf, 0x61, 0x99, 0x4b, 0x85, 0xc7,
	0x28, 0x8d, 0x4d, 0x7e, 0x43, 0x9e, 0xa0, 0x87, 0x50, 0xe2, 0xb4, 0x6c, 0x61, 0xe9, 0x0e, 0x8d,
	0x1a, 0x0a, 0xfc, 0x5b, 0x70, 0xa2, 0x43, 0x59, 0x34, 0x55, 0x1d, 0x1c, 0x16, 0xdb, 0x10, 0xd4,
	0xf1, 0x79, 0x62, 0x6f, 0x2a, 0x60, 0x32, 0x91, 0x26, 0xb6, 0x31, 0xa6, 0x95, 0x29, 0xdc, 0x9b,
	0x2a, 0x88, 0x15, 0x8b, 0x62, 0x23, 0x3a, 0xcd, 0x08, 0xee, 0x40, 0x6d, 0x9a, 0x11, 0xd8, 0x83,
	0x3a, 0xd0, 0x34, 0x5d, 0x4f, 0x18, 0x96, 0xee, 0xa9, 0x4d, 0x51, 0x03, 0x94, 0x42, 0xe3, 0x40,
	0xc8, 0x16, 0x4b, 0x1e, 0x1c, 0x97, 0x63, 0x13, 0xbe, 0x7c, 0x0e, 0xe4, 0x85, 0xe4, 0xd3, 0x2b,
	0xfa, 0x87, 0x52, 0x1d, 0xe5, 0xf6, 0x47, 0xc7, 0x41, 0xc7, 0xb8, 0x8c, 0x16, 0x65, 0xd3, 0xa3,
	0x36, 0x8b, 0x04, 0x2d, 0x45, 0x90, 0xe9, 0xd4, 0xb8, 0x8e, 0x35, 0x72, 0x0b, 0x2d, 0x47, 0x98,
	0xd1, 0xf2, 0x7c, 0xd7, 0xa6, 0x1c, 0x67, 0x4a, 0x7f, 0xd1, 0xd0, 0xa2, 0x55, 0xf6, 0x7a, 0x27,
	0x1f, 0x7b, 0x67, 0xe3, 0xc0, 0x6f, 0x1d, 0xad, 0x2a, 0x0d, 0x90, 0x6a, 0xbb, 0x81, 0xd6, 0x20,
	0xe3, 0x53, 0x47, 0x77, 0x7c, 0xac, 0x4d, 0x1b, 0x65, 0xd7, 0x6d, 0x1f, 0x67, 0xe4, 0xfd, 0x00,
	0x99, 0x70, 0x4e, 0x33, 0xb2, 0xa9, 0x55, 0x28, 0xc6, 0x4d, 0x5b, 0xe7, 0x1d, 0x3c, 0x4b, 0x6e,
	0xa3, 0x15, 0xb5, 0x53, 0xf3, 0x5c, 0x4b, 0xf7, 0x69, 0x15, 0x67, 0x4b, 0x7f, 0xd4, 0x90, 0xf2,
	0xc9, 0xb6, 0x82, 0x6e, 0x86, 0xbd, 0xa2, 0x3a, 0xc9, 0x55, 0x84, 0x15, 0xb0, 0xea, 0xfa, 0x3b,
	0x4d, 0xac, 0x01, 0x74, 0xbf, 0x6d, 0xe9, 0x0e, 0xce, 0xc8, 0x38, 0x0a, 0x6a, 0xca, 0xa6, 0x53,
	0x98, 0x0c, 0xcf, 0xc8, 0x04, 0x2a, 0x84, 0xec, 0xee, 0x67, 0x81, 0x45, 0x70, 0x6b, 0xe3, 0x6c,
	0xa9, 0x82, 0x6e, 0x82, 0x8f, 0xbe, 0xb0, 0xeb, 0x17, 0x7a, 0x6d, 0x32, 0xa3, 0xe8, 0xd9, 0x74,
	0xa8, 0x4c, 0x55, 0xf0, 0x99, 0x30, 0x79, 0xde, 0xc3, 0x99, 0xd2, 0x2f, 0xb3, 0x28, 0x7f, 0xc0,
	0xfb, 0x67, 0x27, 0x93, 0x55, 0x29, 0x2f, 0x9f, 0x2b, 0x8f, 0x24, 0xe8, 0x51, 0x2e, 0x17, 0xb5,
	0x86, 0x88, 0xaa, 0xb4, 0xab, 0x5c, 0xf8, 0x6d, 0x9c, 0x99, 0x86, 0xf3, 0x36, 0x9e, 0x91, 0x15,
	0x97, 0xc0, 0x19, 0x17, 0x9e, 0xad, 0x5b, 0x96, 0x1c, 0x35, 0x7b, 0x3d, 0xcb, 0xdb, 0x38, 0x2b,
	0xf7, 0x1e, 0xb2, 0x15, 0xb3, 0x2e, 0x47, 0xce, 0x5d, 0xc7, 0xf1, 0x36, 0xce, 0xc9, 0x4c, 0x2a,
	0x5c, 0xc5, 0x6b, 0xe2, 0x79, 0x88, 0xf1, 0x26, 0xce, 0xa7, 0x16, 0xe8, 0x35, 0x31, 0x92, 0xfb,
	0xa3, 0xbe, 0x87, 0x65, 0xca, 0x8d, 0x4a, 0x13, 0x17, 0xe4, 0x5e, 0x28, 0x84, 0xce, 0x9b, 0xbc,
	0x8d, 0x17, 0x80, 0xaf, 0xee, 0x35, 0xf1, 0x22, 0x54, 0x06, 0xc6, 0x4b, 0xf2, 0x30, 0x28, 0xa8,
	0xbc, 0xa8, 0x8d, 0x0a, 0xbe, 0x29, 0x0f, 0xdd, 0x94, 0x78, 0xa2, 0xa2, 0x73, 0xc3, 0xc5, 0x18,
	0xd0, 0x3a, 0x63, 0x82, 0xd3, 0xaa, 0xc9, 0x83, 0x5b, 0x18, 0x2f, 0xcb, 0x17, 0xee, 0x54, 0x3a,
	0xbc, 0x6b, 0x30, 0xf9, 0xdf, 0x02, 0x03, 0xaf, 0xc8, 0xa3, 0x92, 0xde, 0x38, 0x51, 0x37, 0xf0,
	0xea, 0x34, 0xca, 0x0f, 0xa8, 0x5b, 0xe9, 0x64, 0xf8, 0x6d, 0xbc, 0x56, 0xfa, 0x97, 0x86, 0xf2,
	0x6c, 0x34, 0xf8, 0xe9, 0x72, 0x52, 0x54, 0x4a, 0xbb, 0x12, 0x5f, 0x13, 0x0a, 0x28, 0xbf, 0x72,
	0x35, 0x88, 0x59, 0x1e, 0xce, 0xc8, 0x00, 0x6a, 0xaf, 0x13, 0x54, 0xfe, 0x8c, 0xbc, 0x77, 0x14,
	0xb4, 0x6e, 0xe0, 0x59, 0x30, 0xd8, 0x60, 0x2d, 0x9c, 0x4d, 0x0d, 0xae, 0x99, 0xb2, 0x64, 0xd6,
	0xd1, 0xaa, 0x82, 0x46, 0xa9, 0xc0, 0x39, 0x30, 0x53, 0xb6, 0xcb, 0x7c, 0x3c, 0x2f, 0xef, 0xd3,
	0x69, 0xf2, 0x49, 0x0b, 0x66, 0x30, 0x9c, 0x2f, 0xfd, 0xa2, 0xa1, 0x45, 0x63, 0x74, 0x39, 0x1c,
	0x0f, 0xde, 0xf5, 0xc2, 0x45, 0x6f, 0xa0, 0x35, 0x83, 0x77, 0x98, 0xef, 0x06, 0x8d, 0x41, 0x38,
	0x94, 0x7a, 0x3b, 0xe5, 0x37, 0xe1, 0x5d, 0x36, 0x8d, 0xfb, 0xae, 0x1c, 0x7e, 0x1e, 0x4f, 0xe1,
	0xca, 0xaf, 0xf7, 0xc2, 0x2b, 0x03, 0x72, 0x55, 0xea, 0x85, 0x87, 0x0b, 0x12, 0x46, 0x43, 0x37,
	0x1a, 0x7a, 0x79, 0x3b, 0x3c, 0x5c, 0x90, 0x65, 0xae, 0xd5, 0xd9, 0x79, 0xb5, 0xfd, 0x1a, 0x67,
	0x65, 0x36, 0x20, 0xdb, 0xb0, 0x75, 0x03, 0xcf, 0x95, 0x7e, 0xce, 0x20, 0x54, 0xe9, 0x8e, 0x0e,
	0x07, 0xf2, 0x7a, 0x38, 0x97, 0xc9, 0x09, 0x8a, 0x51, 0x04, 0xfb, 0xad, 0x7b, 0x1d, 0x3b, 0xbc,
	0x1b, 0x14, 0xb0, 0x6e, 0xd8, 0xdb, 0x58, 0x4b, 0x83, 0x3b, 0x38, 0x03, 0xc0, 0xb6, 0xef, 0x6d,
	0xe3, 0x99, 0x34, 0xb8, 0x83, 0x67, 0x01, 0x68, 0x33, 0xb6, 0x8d, 0xb3, 0x69, 0x70, 0x07, 0xcf,
	0xa5, 0xc1, 0x72, 0xb8, 0x89, 0x49, 0xf0, 0x15, 0x9e, 0x4f, 0x83, 0xbb, 0xe1, 0xb9, 0x4f, 0x82,
	0xaf, 0x31, 0x4a, 0x83, 0x7b, 0xb8, 0x90, 0x06, 0xbf, 0xc5, 0x0b, 0xa5, 0x1f, 0xd1, 0x82, 0x3e,
	0x1c, 0xf2, 0xde, 0x51, 0x7f, 0x14, 0x6c, 0xf9, 0x6d, 0xb4, 0x12, 0x57, 0x87, 0x5a, 0xeb, 0x77,
	0xd1, 0x6d, 0x40, 0x04, 0x3f, 0xa9, 0x21, 0x6f, 0xe4, 0xf4, 0x28, 0x8f, 0xc9, 0x17, 0x44, 0xe9,
	0x67, 0x0d, 0xe5, 0x8c, 0xe1, 0xa7, 0xc3, 0xf7, 0xe6, 0x91, 0xbc, 0x33, 0x0c, 0xd6, 0x0a, 0xbb,
	0x01, 0xd9, 0x04, 0xdb, 0xa6, 0xe7, 0x85, 0x7f, 0xcc, 0x44, 0x70, 0xf0, 0xd5, 0x63, 0xb9, 0x1e,
	0xbd, 0x2a, 0xa2, 0x09, 0xce, 0xa9, 0x65, 0xca, 0x9e, 0x5a, 0x18, 0x2e, 0xeb, 0xe0, 0x4c, 0x82,
	0x73, 0xe4, 0x87, 0x4c, 0x34, 0x97, 0x19, 0x79, 0x5e, 0x22, 0xae, 0xd9, 0x32, 0xa9, 0x67, 0xc8,
	0x97, 0x8f, 0x1a, 0x3c, 0x18, 0x61, 0xb9, 0x75, 0x9c, 0xad, 0x6c, 0xfc, 0xf5, 0xcb, 0xa6, 0xf6,
	0xb7, 0x2f, 0x9b, 0xda, 0x3f, 0xbe, 0x6c, 0x6a, 0x7f, 0xfa, 0xe7, 0xe6, 0x8d, 0xdf, 0xcd, 0x7f,
	0xe8, 0x9e, 0x06, 0xff, 0x99, 0xb2, 0x1b, 0xef, 0xe7, 0x82, 0x1f, 0xaf, 0xfe, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x3d, 0x2f, 0x66, 0xe6, 0x5e, 0x15, 0x00, 0x00,
}
