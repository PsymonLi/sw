// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nic/proto/hal/tenant.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ObjectMeta from nic/proto/types.proto

// Ignoring public import of EncapInfo from nic/proto/types.proto

// Ignoring public import of IPAddress from nic/proto/types.proto

// Ignoring public import of IPPrefix from nic/proto/types.proto

// Ignoring public import of L4PortRange from nic/proto/types.proto

// Ignoring public import of Empty from nic/proto/types.proto

// Ignoring public import of IPProtocol from nic/proto/types.proto

// Ignoring public import of ICMPMsgType from nic/proto/types.proto

// Ignoring public import of ApiStatus from nic/proto/types.proto

// Ignoring public import of L2SegmentType from nic/proto/types.proto

// Ignoring public import of encapType from nic/proto/types.proto

// Ignoring public import of IPAddressFamily from nic/proto/types.proto

// Ignoring public import of WRingType from nic/proto/types.proto

// Ignoring public import of ProxyType from nic/proto/types.proto

// Ignoring public import of CryptoKeyType from nic/proto/types.proto

// TenantKeyHandle is used to operate on a tenant either by its key or handle
type TenantKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TenantKeyHandle_TenantId
	//	*TenantKeyHandle_TenantHandle
	KeyOrHandle isTenantKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TenantKeyHandle) Reset()                    { *m = TenantKeyHandle{} }
func (m *TenantKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TenantKeyHandle) ProtoMessage()               {}
func (*TenantKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{0} }

type isTenantKeyHandle_KeyOrHandle interface {
	isTenantKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TenantKeyHandle_TenantId struct {
	TenantId uint32 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3,oneof"`
}
type TenantKeyHandle_TenantHandle struct {
	TenantHandle uint64 `protobuf:"fixed64,2,opt,name=tenant_handle,json=tenantHandle,proto3,oneof"`
}

func (*TenantKeyHandle_TenantId) isTenantKeyHandle_KeyOrHandle()     {}
func (*TenantKeyHandle_TenantHandle) isTenantKeyHandle_KeyOrHandle() {}

func (m *TenantKeyHandle) GetKeyOrHandle() isTenantKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TenantKeyHandle) GetTenantId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TenantKeyHandle_TenantId); ok {
		return x.TenantId
	}
	return 0
}

func (m *TenantKeyHandle) GetTenantHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TenantKeyHandle_TenantHandle); ok {
		return x.TenantHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TenantKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TenantKeyHandle_OneofMarshaler, _TenantKeyHandle_OneofUnmarshaler, _TenantKeyHandle_OneofSizer, []interface{}{
		(*TenantKeyHandle_TenantId)(nil),
		(*TenantKeyHandle_TenantHandle)(nil),
	}
}

func _TenantKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TenantKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TenantKeyHandle_TenantId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TenantId))
	case *TenantKeyHandle_TenantHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.TenantHandle))
	case nil:
	default:
		return fmt.Errorf("TenantKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TenantKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TenantKeyHandle)
	switch tag {
	case 1: // key_or_handle.tenant_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TenantKeyHandle_TenantId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tenant_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TenantKeyHandle_TenantHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TenantKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TenantKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TenantKeyHandle_TenantId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TenantId))
	case *TenantKeyHandle_TenantHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TenantSpec captures all the tenant level configuration
type TenantSpec struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is tenant's unique identifier
	KeyOrHandle           *TenantKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
	SecurityProfileHandle uint64           `protobuf:"fixed64,3,opt,name=security_profile_handle,json=securityProfileHandle,proto3" json:"security_profile_handle,omitempty"`
}

func (m *TenantSpec) Reset()                    { *m = TenantSpec{} }
func (m *TenantSpec) String() string            { return proto.CompactTextString(m) }
func (*TenantSpec) ProtoMessage()               {}
func (*TenantSpec) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{1} }

func (m *TenantSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TenantSpec) GetKeyOrHandle() *TenantKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TenantSpec) GetSecurityProfileHandle() uint64 {
	if m != nil {
		return m.SecurityProfileHandle
	}
	return 0
}

// TenantRequestMsg is batched add or modify tenant request
type TenantRequestMsg struct {
	Request []*TenantSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TenantRequestMsg) Reset()                    { *m = TenantRequestMsg{} }
func (m *TenantRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TenantRequestMsg) ProtoMessage()               {}
func (*TenantRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{2} }

func (m *TenantRequestMsg) GetRequest() []*TenantSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TenantStatus is the operational status of a given tenant
type TenantStatus struct {
	TenantHandle uint64 `protobuf:"fixed64,1,opt,name=tenant_handle,json=tenantHandle,proto3" json:"tenant_handle,omitempty"`
}

func (m *TenantStatus) Reset()                    { *m = TenantStatus{} }
func (m *TenantStatus) String() string            { return proto.CompactTextString(m) }
func (*TenantStatus) ProtoMessage()               {}
func (*TenantStatus) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{3} }

func (m *TenantStatus) GetTenantHandle() uint64 {
	if m != nil {
		return m.TenantHandle
	}
	return 0
}

// TenantResponse is response to TenantSpec
type TenantResponse struct {
	ApiStatus    ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	TenantStatus *TenantStatus `protobuf:"bytes,2,opt,name=tenant_status,json=tenantStatus" json:"tenant_status,omitempty"`
}

func (m *TenantResponse) Reset()                    { *m = TenantResponse{} }
func (m *TenantResponse) String() string            { return proto.CompactTextString(m) }
func (*TenantResponse) ProtoMessage()               {}
func (*TenantResponse) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{4} }

func (m *TenantResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TenantResponse) GetTenantStatus() *TenantStatus {
	if m != nil {
		return m.TenantStatus
	}
	return nil
}

// TenantResponseMsg is batched response to TenantRequestMsg
type TenantResponseMsg struct {
	Response []*TenantResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TenantResponseMsg) Reset()                    { *m = TenantResponseMsg{} }
func (m *TenantResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TenantResponseMsg) ProtoMessage()               {}
func (*TenantResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{5} }

func (m *TenantResponseMsg) GetResponse() []*TenantResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TenantDeleteRequest is used to delete a tenant
type TenantDeleteRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is tenant's unique identifier
	KeyOrHandle *TenantKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *TenantDeleteRequest) Reset()                    { *m = TenantDeleteRequest{} }
func (m *TenantDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TenantDeleteRequest) ProtoMessage()               {}
func (*TenantDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{6} }

func (m *TenantDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TenantDeleteRequest) GetKeyOrHandle() *TenantKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TenantDeleteRequestMsg is used to delete a batch of tenants
type TenantDeleteRequestMsg struct {
	Request []*TenantDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TenantDeleteRequestMsg) Reset()                    { *m = TenantDeleteRequestMsg{} }
func (m *TenantDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TenantDeleteRequestMsg) ProtoMessage()               {}
func (*TenantDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{7} }

func (m *TenantDeleteRequestMsg) GetRequest() []*TenantDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TenantDeleteResponseMsg is batched response to TenantDeleteRequestMsg
type TenantDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TenantDeleteResponseMsg) Reset()                    { *m = TenantDeleteResponseMsg{} }
func (m *TenantDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TenantDeleteResponseMsg) ProtoMessage()               {}
func (*TenantDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{8} }

func (m *TenantDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TenantGetRequest is used to get information about a tenant
type TenantGetRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is tenant's unique identifier
	KeyOrHandle *TenantKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *TenantGetRequest) Reset()                    { *m = TenantGetRequest{} }
func (m *TenantGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TenantGetRequest) ProtoMessage()               {}
func (*TenantGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{9} }

func (m *TenantGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TenantGetRequest) GetKeyOrHandle() *TenantKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TenantGetRequestMsg is batched GET requests for tenants
type TenantGetRequestMsg struct {
	Request []*TenantGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TenantGetRequestMsg) Reset()                    { *m = TenantGetRequestMsg{} }
func (m *TenantGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TenantGetRequestMsg) ProtoMessage()               {}
func (*TenantGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{10} }

func (m *TenantGetRequestMsg) GetRequest() []*TenantGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TenantStats is the statistics object for each tenant
type TenantStats struct {
	NumL2Segments     uint32 `protobuf:"varint,1,opt,name=num_l2_segments,json=numL2Segments,proto3" json:"num_l2_segments,omitempty"`
	NumSecurityGroups uint32 `protobuf:"varint,2,opt,name=num_security_groups,json=numSecurityGroups,proto3" json:"num_security_groups,omitempty"`
	NumL4LbServices   uint32 `protobuf:"varint,3,opt,name=num_l4lb_services,json=numL4lbServices,proto3" json:"num_l4lb_services,omitempty"`
	NumEndpoints      uint32 `protobuf:"varint,4,opt,name=num_endpoints,json=numEndpoints,proto3" json:"num_endpoints,omitempty"`
}

func (m *TenantStats) Reset()                    { *m = TenantStats{} }
func (m *TenantStats) String() string            { return proto.CompactTextString(m) }
func (*TenantStats) ProtoMessage()               {}
func (*TenantStats) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{11} }

func (m *TenantStats) GetNumL2Segments() uint32 {
	if m != nil {
		return m.NumL2Segments
	}
	return 0
}

func (m *TenantStats) GetNumSecurityGroups() uint32 {
	if m != nil {
		return m.NumSecurityGroups
	}
	return 0
}

func (m *TenantStats) GetNumL4LbServices() uint32 {
	if m != nil {
		return m.NumL4LbServices
	}
	return 0
}

func (m *TenantStats) GetNumEndpoints() uint32 {
	if m != nil {
		return m.NumEndpoints
	}
	return 0
}

// TenantGetResponse captures all the information about a tenant
// only if api_status indicates success, other fields are valid
type TenantGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TenantSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TenantStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TenantStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TenantGetResponse) Reset()                    { *m = TenantGetResponse{} }
func (m *TenantGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TenantGetResponse) ProtoMessage()               {}
func (*TenantGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{12} }

func (m *TenantGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TenantGetResponse) GetSpec() *TenantSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TenantGetResponse) GetStatus() *TenantStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TenantGetResponse) GetStats() *TenantStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TenantGetResponseMsg is batched response to TenantGetRequestMsg
type TenantGetResponseMsg struct {
	Response []*TenantGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TenantGetResponseMsg) Reset()                    { *m = TenantGetResponseMsg{} }
func (m *TenantGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TenantGetResponseMsg) ProtoMessage()               {}
func (*TenantGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorTenant, []int{13} }

func (m *TenantGetResponseMsg) GetResponse() []*TenantGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*TenantKeyHandle)(nil), "tenant.TenantKeyHandle")
	proto.RegisterType((*TenantSpec)(nil), "tenant.TenantSpec")
	proto.RegisterType((*TenantRequestMsg)(nil), "tenant.TenantRequestMsg")
	proto.RegisterType((*TenantStatus)(nil), "tenant.TenantStatus")
	proto.RegisterType((*TenantResponse)(nil), "tenant.TenantResponse")
	proto.RegisterType((*TenantResponseMsg)(nil), "tenant.TenantResponseMsg")
	proto.RegisterType((*TenantDeleteRequest)(nil), "tenant.TenantDeleteRequest")
	proto.RegisterType((*TenantDeleteRequestMsg)(nil), "tenant.TenantDeleteRequestMsg")
	proto.RegisterType((*TenantDeleteResponseMsg)(nil), "tenant.TenantDeleteResponseMsg")
	proto.RegisterType((*TenantGetRequest)(nil), "tenant.TenantGetRequest")
	proto.RegisterType((*TenantGetRequestMsg)(nil), "tenant.TenantGetRequestMsg")
	proto.RegisterType((*TenantStats)(nil), "tenant.TenantStats")
	proto.RegisterType((*TenantGetResponse)(nil), "tenant.TenantGetResponse")
	proto.RegisterType((*TenantGetResponseMsg)(nil), "tenant.TenantGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tenant service

type TenantClient interface {
	TenantCreate(ctx context.Context, in *TenantRequestMsg, opts ...grpc.CallOption) (*TenantResponseMsg, error)
	TenantUpdate(ctx context.Context, in *TenantRequestMsg, opts ...grpc.CallOption) (*TenantResponseMsg, error)
	TenantDelete(ctx context.Context, in *TenantDeleteRequestMsg, opts ...grpc.CallOption) (*TenantDeleteResponseMsg, error)
	TenantGet(ctx context.Context, in *TenantGetRequestMsg, opts ...grpc.CallOption) (*TenantGetResponseMsg, error)
}

type tenantClient struct {
	cc *grpc.ClientConn
}

func NewTenantClient(cc *grpc.ClientConn) TenantClient {
	return &tenantClient{cc}
}

func (c *tenantClient) TenantCreate(ctx context.Context, in *TenantRequestMsg, opts ...grpc.CallOption) (*TenantResponseMsg, error) {
	out := new(TenantResponseMsg)
	err := grpc.Invoke(ctx, "/tenant.Tenant/TenantCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) TenantUpdate(ctx context.Context, in *TenantRequestMsg, opts ...grpc.CallOption) (*TenantResponseMsg, error) {
	out := new(TenantResponseMsg)
	err := grpc.Invoke(ctx, "/tenant.Tenant/TenantUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) TenantDelete(ctx context.Context, in *TenantDeleteRequestMsg, opts ...grpc.CallOption) (*TenantDeleteResponseMsg, error) {
	out := new(TenantDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/tenant.Tenant/TenantDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) TenantGet(ctx context.Context, in *TenantGetRequestMsg, opts ...grpc.CallOption) (*TenantGetResponseMsg, error) {
	out := new(TenantGetResponseMsg)
	err := grpc.Invoke(ctx, "/tenant.Tenant/TenantGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tenant service

type TenantServer interface {
	TenantCreate(context.Context, *TenantRequestMsg) (*TenantResponseMsg, error)
	TenantUpdate(context.Context, *TenantRequestMsg) (*TenantResponseMsg, error)
	TenantDelete(context.Context, *TenantDeleteRequestMsg) (*TenantDeleteResponseMsg, error)
	TenantGet(context.Context, *TenantGetRequestMsg) (*TenantGetResponseMsg, error)
}

func RegisterTenantServer(s *grpc.Server, srv TenantServer) {
	s.RegisterService(&_Tenant_serviceDesc, srv)
}

func _Tenant_TenantCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).TenantCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenant.Tenant/TenantCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).TenantCreate(ctx, req.(*TenantRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_TenantUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).TenantUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenant.Tenant/TenantUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).TenantUpdate(ctx, req.(*TenantRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_TenantDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).TenantDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenant.Tenant/TenantDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).TenantDelete(ctx, req.(*TenantDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_TenantGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).TenantGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenant.Tenant/TenantGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).TenantGet(ctx, req.(*TenantGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tenant_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tenant.Tenant",
	HandlerType: (*TenantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantCreate",
			Handler:    _Tenant_TenantCreate_Handler,
		},
		{
			MethodName: "TenantUpdate",
			Handler:    _Tenant_TenantUpdate_Handler,
		},
		{
			MethodName: "TenantDelete",
			Handler:    _Tenant_TenantDelete_Handler,
		},
		{
			MethodName: "TenantGet",
			Handler:    _Tenant_TenantGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/tenant.proto",
}

func (m *TenantKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *TenantKeyHandle_TenantId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintTenant(dAtA, i, uint64(m.TenantId))
	return i, nil
}
func (m *TenantKeyHandle_TenantHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Tenant(dAtA, i, uint64(m.TenantHandle))
	return i, nil
}
func (m *TenantSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.Meta.Size()))
		n2, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n3, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.SecurityProfileHandle != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Tenant(dAtA, i, uint64(m.SecurityProfileHandle))
	}
	return i, nil
}

func (m *TenantRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTenant(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TenantStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TenantHandle != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Tenant(dAtA, i, uint64(m.TenantHandle))
	}
	return i, nil
}

func (m *TenantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.ApiStatus))
	}
	if m.TenantStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.TenantStatus.Size()))
		n4, err := m.TenantStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *TenantResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTenant(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TenantDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.Meta.Size()))
		n5, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n6, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *TenantDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTenant(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TenantDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA8 := make([]byte, len(m.ApiStatus)*10)
		var j7 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintTenant(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *TenantGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.Meta.Size()))
		n9, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n10, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *TenantGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTenant(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TenantStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumL2Segments != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.NumL2Segments))
	}
	if m.NumSecurityGroups != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.NumSecurityGroups))
	}
	if m.NumL4LbServices != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.NumL4LbServices))
	}
	if m.NumEndpoints != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.NumEndpoints))
	}
	return i, nil
}

func (m *TenantGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.Spec.Size()))
		n11, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.Status.Size()))
		n12, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTenant(dAtA, i, uint64(m.Stats.Size()))
		n13, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *TenantGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTenant(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Tenant(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Tenant(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTenant(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TenantKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *TenantKeyHandle_TenantId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTenant(uint64(m.TenantId))
	return n
}
func (m *TenantKeyHandle_TenantHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *TenantSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.SecurityProfileHandle != 0 {
		n += 9
	}
	return n
}

func (m *TenantRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovTenant(uint64(l))
		}
	}
	return n
}

func (m *TenantStatus) Size() (n int) {
	var l int
	_ = l
	if m.TenantHandle != 0 {
		n += 9
	}
	return n
}

func (m *TenantResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovTenant(uint64(m.ApiStatus))
	}
	if m.TenantStatus != nil {
		l = m.TenantStatus.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *TenantResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovTenant(uint64(l))
		}
	}
	return n
}

func (m *TenantDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *TenantDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovTenant(uint64(l))
		}
	}
	return n
}

func (m *TenantDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovTenant(uint64(e))
		}
		n += 1 + sovTenant(uint64(l)) + l
	}
	return n
}

func (m *TenantGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *TenantGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovTenant(uint64(l))
		}
	}
	return n
}

func (m *TenantStats) Size() (n int) {
	var l int
	_ = l
	if m.NumL2Segments != 0 {
		n += 1 + sovTenant(uint64(m.NumL2Segments))
	}
	if m.NumSecurityGroups != 0 {
		n += 1 + sovTenant(uint64(m.NumSecurityGroups))
	}
	if m.NumL4LbServices != 0 {
		n += 1 + sovTenant(uint64(m.NumL4LbServices))
	}
	if m.NumEndpoints != 0 {
		n += 1 + sovTenant(uint64(m.NumEndpoints))
	}
	return n
}

func (m *TenantGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovTenant(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *TenantGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovTenant(uint64(l))
		}
	}
	return n
}

func sovTenant(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTenant(x uint64) (n int) {
	return sovTenant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TenantKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &TenantKeyHandle_TenantId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &TenantKeyHandle_TenantHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TenantKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityProfileHandle", wireType)
			}
			m.SecurityProfileHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.SecurityProfileHandle = uint64(dAtA[iNdEx-8])
			m.SecurityProfileHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.SecurityProfileHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.SecurityProfileHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.SecurityProfileHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.SecurityProfileHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.SecurityProfileHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.SecurityProfileHandle |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TenantSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantHandle", wireType)
			}
			m.TenantHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.TenantHandle = uint64(dAtA[iNdEx-8])
			m.TenantHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.TenantHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.TenantHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.TenantHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.TenantHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.TenantHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.TenantHandle |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantStatus == nil {
				m.TenantStatus = &TenantStatus{}
			}
			if err := m.TenantStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TenantResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TenantKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TenantDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTenant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTenant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTenant
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTenant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TenantKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TenantGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumL2Segments", wireType)
			}
			m.NumL2Segments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumL2Segments |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSecurityGroups", wireType)
			}
			m.NumSecurityGroups = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSecurityGroups |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumL4LbServices", wireType)
			}
			m.NumL4LbServices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumL4LbServices |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEndpoints", wireType)
			}
			m.NumEndpoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEndpoints |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &TenantSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &TenantStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &TenantStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TenantGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTenant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTenant
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTenant
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTenant(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTenant = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTenant   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nic/proto/hal/tenant.proto", fileDescriptorTenant) }

var fileDescriptorTenant = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x8e, 0x9b, 0xde, 0xdc, 0xf6, 0x24, 0x69, 0x9b, 0xe9, 0x5f, 0x9a, 0xde, 0x9b, 0x56, 0x73,
	0xd5, 0xaa, 0x17, 0x55, 0x89, 0xe4, 0x16, 0x24, 0x58, 0x41, 0xa1, 0x6a, 0x0a, 0x8d, 0x5a, 0x1c,
	0xd8, 0xb0, 0x89, 0x9c, 0xe4, 0x90, 0x98, 0x3a, 0x8e, 0xf1, 0x8c, 0x2b, 0x45, 0xe2, 0x01, 0x90,
	0x78, 0x01, 0xde, 0x03, 0x89, 0x05, 0x7b, 0x24, 0x96, 0x3c, 0x01, 0x42, 0xe5, 0x0d, 0x78, 0x02,
	0xe4, 0x99, 0x71, 0x8c, 0xdd, 0xb4, 0x48, 0xb0, 0xe8, 0xce, 0x73, 0xbe, 0x6f, 0xbe, 0xf3, 0x3f,
	0x86, 0x92, 0x63, 0xb5, 0xab, 0xae, 0x37, 0xe0, 0x83, 0x6a, 0xcf, 0xb4, 0xab, 0x1c, 0x1d, 0xd3,
	0xe1, 0x15, 0x61, 0x20, 0x19, 0x79, 0x2a, 0x2d, 0x46, 0x1c, 0x3e, 0x74, 0x91, 0x49, 0x98, 0xf6,
	0x60, 0xf6, 0x89, 0x20, 0x3c, 0xc2, 0x61, 0xcd, 0x74, 0x3a, 0x36, 0x92, 0x7f, 0x61, 0x5a, 0xde,
	0x69, 0x5a, 0x9d, 0xa2, 0xb6, 0xae, 0x6d, 0xe5, 0x6b, 0x29, 0x63, 0x4a, 0x9a, 0x0e, 0x3b, 0x64,
	0x03, 0xf2, 0x0a, 0xee, 0x09, 0x7e, 0x71, 0x62, 0x5d, 0xdb, 0xca, 0xd4, 0x52, 0x46, 0x4e, 0x9a,
	0xa5, 0xca, 0xde, 0x2c, 0xe4, 0x4f, 0x71, 0xd8, 0x1c, 0x78, 0x8a, 0x46, 0x3f, 0x68, 0x00, 0xd2,
	0x55, 0xc3, 0xc5, 0x36, 0xd9, 0x80, 0xc9, 0x3e, 0x72, 0x53, 0x38, 0xc8, 0xea, 0x85, 0x8a, 0x0c,
	0xea, 0xb8, 0xf5, 0x02, 0xdb, 0xbc, 0x8e, 0xdc, 0x34, 0x04, 0x4c, 0xea, 0x09, 0x19, 0xe1, 0x2d,
	0xab, 0x2f, 0x57, 0x54, 0x92, 0x89, 0xe0, 0xf7, 0xe6, 0xbe, 0x7f, 0x59, 0xcb, 0x9d, 0xa1, 0x63,
	0xb5, 0xf1, 0x0e, 0x3d, 0xc5, 0x21, 0x35, 0xb2, 0xa7, 0x38, 0x3c, 0xf6, 0x54, 0x6e, 0xb7, 0x60,
	0x99, 0x61, 0xdb, 0xf7, 0x2c, 0x3e, 0x6c, 0xba, 0xde, 0xe0, 0xb9, 0x65, 0x63, 0x28, 0x9c, 0x0e,
	0xd2, 0x30, 0x16, 0x43, 0xf8, 0x44, 0xa2, 0xf2, 0x1e, 0xbd, 0x0b, 0x73, 0xd2, 0x93, 0x81, 0x2f,
	0x7d, 0x64, 0xbc, 0xce, 0xba, 0x64, 0x1b, 0xfe, 0xf6, 0xe4, 0xa9, 0xa8, 0xad, 0xa7, 0xb7, 0xb2,
	0x3a, 0x89, 0x07, 0x15, 0xa4, 0x69, 0x84, 0x14, 0xba, 0x03, 0x39, 0x65, 0xe6, 0x26, 0xf7, 0x19,
	0xf9, 0x2f, 0x59, 0x46, 0x4d, 0xf8, 0x8f, 0x15, 0x91, 0xbe, 0x82, 0x99, 0xd0, 0x2d, 0x73, 0x07,
	0x0e, 0x43, 0x52, 0x05, 0x30, 0x5d, 0xab, 0xc9, 0x84, 0x88, 0xb8, 0x33, 0xa3, 0xcf, 0xa9, 0xe2,
	0xdd, 0x73, 0x2d, 0x29, 0x6e, 0x4c, 0x9b, 0xe1, 0x27, 0xb9, 0x3d, 0xf2, 0xa3, 0xee, 0xc8, 0x02,
	0x2e, 0x24, 0x62, 0x95, 0xf7, 0x94, 0x77, 0x79, 0xa2, 0x07, 0x50, 0x88, 0x7b, 0x0f, 0xb2, 0xd6,
	0x61, 0xca, 0x53, 0x47, 0x95, 0xf6, 0x52, 0x5c, 0x2a, 0x24, 0x1b, 0x23, 0x1e, 0x7d, 0xa3, 0xc1,
	0xbc, 0x04, 0x1f, 0xa0, 0x8d, 0x1c, 0x55, 0x11, 0xaf, 0x67, 0x06, 0xe8, 0x31, 0x2c, 0x8d, 0x09,
	0x26, 0xc8, 0xed, 0x66, 0xb2, 0xa3, 0xab, 0x71, 0x17, 0xb1, 0x0b, 0x51, 0x6b, 0x1f, 0xc2, 0x72,
	0x1c, 0x8f, 0xaa, 0x95, 0x6c, 0x57, 0xfa, 0x17, 0xed, 0xa2, 0xaf, 0xb5, 0x70, 0xd2, 0x0e, 0x90,
	0x5f, 0x6f, 0x9d, 0x0e, 0xc3, 0xa6, 0x45, 0x91, 0xc8, 0x01, 0x48, 0x14, 0xa9, 0x18, 0xd7, 0x8f,
	0xd8, 0x51, 0x85, 0xde, 0x6b, 0x90, 0x8d, 0x06, 0x8d, 0x91, 0x4d, 0x98, 0x75, 0xfc, 0x7e, 0xd3,
	0xd6, 0x9b, 0x0c, 0xbb, 0x7d, 0x74, 0xb8, 0x1c, 0xe5, 0xbc, 0x91, 0x77, 0xfc, 0xfe, 0x91, 0xde,
	0x50, 0x46, 0x52, 0x81, 0xf9, 0x80, 0x37, 0x5a, 0xd9, 0xae, 0x37, 0xf0, 0x5d, 0x39, 0xc2, 0x79,
	0xa3, 0xe0, 0xf8, 0xfd, 0x86, 0x42, 0x0e, 0x04, 0x40, 0x6e, 0x40, 0x41, 0xe8, 0xee, 0xda, 0xad,
	0x26, 0x43, 0xef, 0xcc, 0x6a, 0x23, 0x13, 0x8b, 0x9d, 0x37, 0x02, 0x87, 0x47, 0xbb, 0x76, 0xab,
	0xa1, 0xcc, 0xc1, 0x02, 0x06, 0x5c, 0x74, 0x3a, 0xee, 0xc0, 0x0a, 0x22, 0x98, 0x14, 0xbc, 0x9c,
	0xe3, 0xf7, 0xf7, 0x43, 0x1b, 0xfd, 0xa8, 0x85, 0x3b, 0x20, 0xd2, 0xfa, 0xdd, 0x25, 0xdc, 0x84,
	0x49, 0xe6, 0x62, 0x5b, 0x35, 0x64, 0xdc, 0x3b, 0x21, 0x70, 0xb2, 0x0d, 0x19, 0x25, 0x9a, 0xbe,
	0x62, 0x4b, 0x15, 0x87, 0xfc, 0x0f, 0x7f, 0x05, 0x5f, 0x32, 0xf2, 0xac, 0x3e, 0x7f, 0x91, 0xcc,
	0x0c, 0xc9, 0xa0, 0x75, 0x58, 0xb8, 0x90, 0x86, 0x9c, 0xf8, 0xe4, 0x36, 0xaf, 0x8c, 0xe9, 0x66,
	0x72, 0xa1, 0xf5, 0x77, 0x13, 0x90, 0x91, 0x38, 0xd9, 0x0f, 0xdf, 0xb5, 0xfb, 0x1e, 0x9a, 0x1c,
	0x49, 0x31, 0xf9, 0x1a, 0x84, 0x83, 0x53, 0x5a, 0x19, 0xff, 0x4e, 0xd4, 0x59, 0x97, 0xa6, 0x22,
	0x99, 0xa7, 0x6e, 0xe7, 0x0f, 0x64, 0x1e, 0x87, 0x32, 0x72, 0x15, 0x49, 0xf9, 0x8a, 0x05, 0x0e,
	0xc4, 0xd6, 0xc6, 0xe3, 0x3f, 0x4b, 0xd6, 0x60, 0x7a, 0x54, 0x0a, 0xb2, 0x7a, 0xd9, 0xac, 0x07,
	0x62, 0xff, 0x5c, 0x5a, 0x3a, 0xa1, 0xb4, 0x57, 0xfa, 0x74, 0x5e, 0xd6, 0x3e, 0x9f, 0x97, 0xb5,
	0xaf, 0xe7, 0x65, 0xed, 0xed, 0xb7, 0x72, 0xea, 0xd9, 0x54, 0xcf, 0xb4, 0xc5, 0x7f, 0xf8, 0x24,
	0xd5, 0xca, 0x88, 0x8f, 0x9d, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x80, 0x49, 0x14, 0xb7, 0xcd,
	0x07, 0x00, 0x00,
}
