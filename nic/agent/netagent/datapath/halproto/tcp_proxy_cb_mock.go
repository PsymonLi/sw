// Code generated by MockGen. DO NOT EDIT.
// Source: tcp_proxy_cb.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisTcpCbKeyHandle_KeyOrHandle is a mock of isTcpCbKeyHandle_KeyOrHandle interface
type MockisTcpCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisTcpCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisTcpCbKeyHandle_KeyOrHandle
type MockisTcpCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisTcpCbKeyHandle_KeyOrHandle
}

// NewMockisTcpCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisTcpCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisTcpCbKeyHandle_KeyOrHandle {
	mock := &MockisTcpCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisTcpCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTcpCbKeyHandle_KeyOrHandle) EXPECT() *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isTcpCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisTcpCbKeyHandle_KeyOrHandle) isTcpCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isTcpCbKeyHandle_KeyOrHandle")
}

// isTcpCbKeyHandle_KeyOrHandle indicates an expected call of isTcpCbKeyHandle_KeyOrHandle
func (mr *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder) isTcpCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTcpCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisTcpCbKeyHandle_KeyOrHandle)(nil).isTcpCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisTcpCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTcpCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTcpCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTcpCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTcpCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockTcpCbClient is a mock of TcpCbClient interface
type MockTcpCbClient struct {
	ctrl     *gomock.Controller
	recorder *MockTcpCbClientMockRecorder
}

// MockTcpCbClientMockRecorder is the mock recorder for MockTcpCbClient
type MockTcpCbClientMockRecorder struct {
	mock *MockTcpCbClient
}

// NewMockTcpCbClient creates a new mock instance
func NewMockTcpCbClient(ctrl *gomock.Controller) *MockTcpCbClient {
	mock := &MockTcpCbClient{ctrl: ctrl}
	mock.recorder = &MockTcpCbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTcpCbClient) EXPECT() *MockTcpCbClientMockRecorder {
	return m.recorder
}

// TcpCbCreate mocks base method
func (m *MockTcpCbClient) TcpCbCreate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TcpCbCreate", varargs...)
	ret0, _ := ret[0].(*TcpCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbCreate indicates an expected call of TcpCbCreate
func (mr *MockTcpCbClientMockRecorder) TcpCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbCreate", reflect.TypeOf((*MockTcpCbClient)(nil).TcpCbCreate), varargs...)
}

// TcpCbUpdate mocks base method
func (m *MockTcpCbClient) TcpCbUpdate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TcpCbUpdate", varargs...)
	ret0, _ := ret[0].(*TcpCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbUpdate indicates an expected call of TcpCbUpdate
func (mr *MockTcpCbClientMockRecorder) TcpCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbUpdate", reflect.TypeOf((*MockTcpCbClient)(nil).TcpCbUpdate), varargs...)
}

// TcpCbDelete mocks base method
func (m *MockTcpCbClient) TcpCbDelete(ctx context.Context, in *TcpCbDeleteRequestMsg, opts ...grpc.CallOption) (*TcpCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TcpCbDelete", varargs...)
	ret0, _ := ret[0].(*TcpCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbDelete indicates an expected call of TcpCbDelete
func (mr *MockTcpCbClientMockRecorder) TcpCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbDelete", reflect.TypeOf((*MockTcpCbClient)(nil).TcpCbDelete), varargs...)
}

// TcpCbGet mocks base method
func (m *MockTcpCbClient) TcpCbGet(ctx context.Context, in *TcpCbGetRequestMsg, opts ...grpc.CallOption) (*TcpCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TcpCbGet", varargs...)
	ret0, _ := ret[0].(*TcpCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbGet indicates an expected call of TcpCbGet
func (mr *MockTcpCbClientMockRecorder) TcpCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbGet", reflect.TypeOf((*MockTcpCbClient)(nil).TcpCbGet), varargs...)
}

// MockTcpCbServer is a mock of TcpCbServer interface
type MockTcpCbServer struct {
	ctrl     *gomock.Controller
	recorder *MockTcpCbServerMockRecorder
}

// MockTcpCbServerMockRecorder is the mock recorder for MockTcpCbServer
type MockTcpCbServerMockRecorder struct {
	mock *MockTcpCbServer
}

// NewMockTcpCbServer creates a new mock instance
func NewMockTcpCbServer(ctrl *gomock.Controller) *MockTcpCbServer {
	mock := &MockTcpCbServer{ctrl: ctrl}
	mock.recorder = &MockTcpCbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTcpCbServer) EXPECT() *MockTcpCbServerMockRecorder {
	return m.recorder
}

// TcpCbCreate mocks base method
func (m *MockTcpCbServer) TcpCbCreate(arg0 context.Context, arg1 *TcpCbRequestMsg) (*TcpCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "TcpCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*TcpCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbCreate indicates an expected call of TcpCbCreate
func (mr *MockTcpCbServerMockRecorder) TcpCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbCreate", reflect.TypeOf((*MockTcpCbServer)(nil).TcpCbCreate), arg0, arg1)
}

// TcpCbUpdate mocks base method
func (m *MockTcpCbServer) TcpCbUpdate(arg0 context.Context, arg1 *TcpCbRequestMsg) (*TcpCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "TcpCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*TcpCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbUpdate indicates an expected call of TcpCbUpdate
func (mr *MockTcpCbServerMockRecorder) TcpCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbUpdate", reflect.TypeOf((*MockTcpCbServer)(nil).TcpCbUpdate), arg0, arg1)
}

// TcpCbDelete mocks base method
func (m *MockTcpCbServer) TcpCbDelete(arg0 context.Context, arg1 *TcpCbDeleteRequestMsg) (*TcpCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "TcpCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*TcpCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbDelete indicates an expected call of TcpCbDelete
func (mr *MockTcpCbServerMockRecorder) TcpCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbDelete", reflect.TypeOf((*MockTcpCbServer)(nil).TcpCbDelete), arg0, arg1)
}

// TcpCbGet mocks base method
func (m *MockTcpCbServer) TcpCbGet(arg0 context.Context, arg1 *TcpCbGetRequestMsg) (*TcpCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "TcpCbGet", arg0, arg1)
	ret0, _ := ret[0].(*TcpCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TcpCbGet indicates an expected call of TcpCbGet
func (mr *MockTcpCbServerMockRecorder) TcpCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TcpCbGet", reflect.TypeOf((*MockTcpCbServer)(nil).TcpCbGet), arg0, arg1)
}
