// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Severity int32

const (
	Severity_INFO     Severity = 0
	Severity_WARNING  Severity = 1
	Severity_CRITICAL Severity = 2
)

var Severity_name = map[int32]string{
	0: "INFO",
	1: "WARNING",
	2: "CRITICAL",
}
var Severity_value = map[string]int32{
	"INFO":     0,
	"WARNING":  1,
	"CRITICAL": 2,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}
func (Severity) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

type Event struct {
	// INFO, WARNING or CRITICAL
	Severity Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=events.Severity" json:"severity,omitempty"`
	// event type; this should be one of the event type from
	// service proto. e.g nw::EventTypes_Name(nw::NETWORK_CREATE_FAILED)
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// free form event message
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// name of component producing event e.g. nicmgr, fte, etc.
	Component string `protobuf:"bytes,4,opt,name=component,proto3" json:"component,omitempty"`
	// number of seconds since the epoch (std::time(0))
	Time uint64 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	// kind of the affected object
	ObjectKind string `protobuf:"bytes,6,opt,name=object_kind,json=objectKind,proto3" json:"object_kind,omitempty"`
	// protobuf message; key/id of the affected object. e.g. kh::NetworkKeyHandle
	ObjectKey *google_protobuf1.Any `protobuf:"bytes,7,opt,name=object_key,json=objectKey" json:"object_key,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

func (m *Event) GetSeverity() Severity {
	if m != nil {
		return m.Severity
	}
	return Severity_INFO
}

func (m *Event) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Event) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Event) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *Event) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Event) GetObjectKind() string {
	if m != nil {
		return m.ObjectKind
	}
	return ""
}

func (m *Event) GetObjectKey() *google_protobuf1.Any {
	if m != nil {
		return m.ObjectKey
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "events.Event")
	proto.RegisterEnum("events.Severity", Severity_name, Severity_value)
}
func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Severity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Severity))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Component) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Component)))
		i += copy(dAtA[i:], m.Component)
	}
	if m.Time != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Time))
	}
	if len(m.ObjectKind) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ObjectKind)))
		i += copy(dAtA[i:], m.ObjectKind)
	}
	if m.ObjectKey != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ObjectKey.Size()))
		n1, err := m.ObjectKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.Severity != 0 {
		n += 1 + sovEvents(uint64(m.Severity))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Component)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovEvents(uint64(m.Time))
	}
	l = len(m.ObjectKind)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ObjectKey != nil {
		l = m.ObjectKey.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= (Severity(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Component = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectKind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectKind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObjectKey == nil {
				m.ObjectKey = &google_protobuf1.Any{}
			}
			if err := m.ObjectKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("events.proto", fileDescriptorEvents) }

var fileDescriptorEvents = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0xbf, 0xed, 0x97, 0xb6, 0xe9, 0x24, 0x48, 0x58, 0x3c, 0xac, 0x22, 0x31, 0x78, 0x0a,
	0x22, 0x09, 0xb4, 0x4f, 0x10, 0x8b, 0x4a, 0x50, 0x22, 0xac, 0x82, 0x47, 0x69, 0xda, 0x31, 0x44,
	0xcd, 0x6e, 0x68, 0xd6, 0xc2, 0xbe, 0xa1, 0x47, 0x1f, 0x41, 0x72, 0xf5, 0x25, 0xc4, 0x4d, 0xa2,
	0xb7, 0x99, 0xdf, 0xfc, 0xe6, 0x0f, 0x7f, 0x70, 0x71, 0x87, 0x42, 0x35, 0x51, 0xbd, 0x95, 0x4a,
	0xd2, 0x49, 0xb7, 0x1d, 0x1e, 0x14, 0x52, 0x16, 0xaf, 0x18, 0x1b, 0x9a, 0xbf, 0x3d, 0xc5, 0x2b,
	0xa1, 0x3b, 0xe5, 0xe4, 0x8b, 0xc0, 0xf8, 0xe2, 0xc7, 0xa2, 0x67, 0x60, 0x37, 0xb8, 0xc3, 0x6d,
	0xa9, 0x34, 0x23, 0x01, 0x09, 0xf7, 0xe6, 0x5e, 0xd4, 0xa7, 0xdd, 0xf5, 0x9c, 0xff, 0x1a, 0x94,
	0x82, 0xa5, 0x74, 0x8d, 0x6c, 0x14, 0x90, 0x70, 0xc6, 0xcd, 0x4c, 0x19, 0x4c, 0x2b, 0x6c, 0x9a,
	0x55, 0x81, 0xec, 0xbf, 0xc1, 0xc3, 0x4a, 0x8f, 0x60, 0xb6, 0x96, 0x55, 0x2d, 0x05, 0x0a, 0xc5,
	0x2c, 0x73, 0xfb, 0x03, 0x26, 0xab, 0xac, 0x90, 0x8d, 0x03, 0x12, 0x5a, 0xdc, 0xcc, 0xf4, 0x18,
	0x1c, 0x99, 0x3f, 0xe3, 0x5a, 0x3d, 0xbe, 0x94, 0x62, 0xc3, 0x26, 0xe6, 0x07, 0x3a, 0x74, 0x5d,
	0x8a, 0x0d, 0x5d, 0x00, 0x0c, 0x02, 0x6a, 0x36, 0x0d, 0x48, 0xe8, 0xcc, 0xf7, 0xa3, 0xae, 0x68,
	0x34, 0x14, 0x8d, 0x12, 0xa1, 0xf9, 0xac, 0xff, 0x42, 0x7d, 0x1a, 0x83, 0x3d, 0x74, 0xa1, 0x36,
	0x58, 0x69, 0x76, 0x79, 0xeb, 0xfd, 0xa3, 0x0e, 0x4c, 0x1f, 0x12, 0x9e, 0xa5, 0xd9, 0x95, 0x47,
	0xa8, 0x0b, 0xf6, 0x92, 0xa7, 0xf7, 0xe9, 0x32, 0xb9, 0xf1, 0x46, 0xe7, 0xee, 0x7b, 0xeb, 0x93,
	0x8f, 0xd6, 0x27, 0x9f, 0xad, 0x4f, 0xf2, 0x89, 0xc9, 0x5d, 0x7c, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x14, 0x45, 0x79, 0x62, 0x66, 0x01, 0x00, 0x00,
}
