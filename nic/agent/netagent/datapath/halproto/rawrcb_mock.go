// Code generated by MockGen. DO NOT EDIT.
// Source: rawrcb.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisRawrCbKeyHandle_KeyOrHandle is a mock of isRawrCbKeyHandle_KeyOrHandle interface
type MockisRawrCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisRawrCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisRawrCbKeyHandle_KeyOrHandle
type MockisRawrCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisRawrCbKeyHandle_KeyOrHandle
}

// NewMockisRawrCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisRawrCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisRawrCbKeyHandle_KeyOrHandle {
	mock := &MockisRawrCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisRawrCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRawrCbKeyHandle_KeyOrHandle) EXPECT() *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isRawrCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisRawrCbKeyHandle_KeyOrHandle) isRawrCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isRawrCbKeyHandle_KeyOrHandle")
}

// isRawrCbKeyHandle_KeyOrHandle indicates an expected call of isRawrCbKeyHandle_KeyOrHandle
func (mr *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder) isRawrCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRawrCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisRawrCbKeyHandle_KeyOrHandle)(nil).isRawrCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisRawrCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRawrCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisRawrCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisRawrCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRawrCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockRawrCbClient is a mock of RawrCbClient interface
type MockRawrCbClient struct {
	ctrl     *gomock.Controller
	recorder *MockRawrCbClientMockRecorder
}

// MockRawrCbClientMockRecorder is the mock recorder for MockRawrCbClient
type MockRawrCbClientMockRecorder struct {
	mock *MockRawrCbClient
}

// NewMockRawrCbClient creates a new mock instance
func NewMockRawrCbClient(ctrl *gomock.Controller) *MockRawrCbClient {
	mock := &MockRawrCbClient{ctrl: ctrl}
	mock.recorder = &MockRawrCbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRawrCbClient) EXPECT() *MockRawrCbClientMockRecorder {
	return m.recorder
}

// RawrCbCreate mocks base method
func (m *MockRawrCbClient) RawrCbCreate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawrCbCreate", varargs...)
	ret0, _ := ret[0].(*RawrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbCreate indicates an expected call of RawrCbCreate
func (mr *MockRawrCbClientMockRecorder) RawrCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbCreate", reflect.TypeOf((*MockRawrCbClient)(nil).RawrCbCreate), varargs...)
}

// RawrCbUpdate mocks base method
func (m *MockRawrCbClient) RawrCbUpdate(ctx context.Context, in *RawrCbRequestMsg, opts ...grpc.CallOption) (*RawrCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawrCbUpdate", varargs...)
	ret0, _ := ret[0].(*RawrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbUpdate indicates an expected call of RawrCbUpdate
func (mr *MockRawrCbClientMockRecorder) RawrCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbUpdate", reflect.TypeOf((*MockRawrCbClient)(nil).RawrCbUpdate), varargs...)
}

// RawrCbDelete mocks base method
func (m *MockRawrCbClient) RawrCbDelete(ctx context.Context, in *RawrCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawrCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawrCbDelete", varargs...)
	ret0, _ := ret[0].(*RawrCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbDelete indicates an expected call of RawrCbDelete
func (mr *MockRawrCbClientMockRecorder) RawrCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbDelete", reflect.TypeOf((*MockRawrCbClient)(nil).RawrCbDelete), varargs...)
}

// RawrCbGet mocks base method
func (m *MockRawrCbClient) RawrCbGet(ctx context.Context, in *RawrCbGetRequestMsg, opts ...grpc.CallOption) (*RawrCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawrCbGet", varargs...)
	ret0, _ := ret[0].(*RawrCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbGet indicates an expected call of RawrCbGet
func (mr *MockRawrCbClientMockRecorder) RawrCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbGet", reflect.TypeOf((*MockRawrCbClient)(nil).RawrCbGet), varargs...)
}

// MockRawrCbServer is a mock of RawrCbServer interface
type MockRawrCbServer struct {
	ctrl     *gomock.Controller
	recorder *MockRawrCbServerMockRecorder
}

// MockRawrCbServerMockRecorder is the mock recorder for MockRawrCbServer
type MockRawrCbServerMockRecorder struct {
	mock *MockRawrCbServer
}

// NewMockRawrCbServer creates a new mock instance
func NewMockRawrCbServer(ctrl *gomock.Controller) *MockRawrCbServer {
	mock := &MockRawrCbServer{ctrl: ctrl}
	mock.recorder = &MockRawrCbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRawrCbServer) EXPECT() *MockRawrCbServerMockRecorder {
	return m.recorder
}

// RawrCbCreate mocks base method
func (m *MockRawrCbServer) RawrCbCreate(arg0 context.Context, arg1 *RawrCbRequestMsg) (*RawrCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawrCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*RawrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbCreate indicates an expected call of RawrCbCreate
func (mr *MockRawrCbServerMockRecorder) RawrCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbCreate", reflect.TypeOf((*MockRawrCbServer)(nil).RawrCbCreate), arg0, arg1)
}

// RawrCbUpdate mocks base method
func (m *MockRawrCbServer) RawrCbUpdate(arg0 context.Context, arg1 *RawrCbRequestMsg) (*RawrCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawrCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*RawrCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbUpdate indicates an expected call of RawrCbUpdate
func (mr *MockRawrCbServerMockRecorder) RawrCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbUpdate", reflect.TypeOf((*MockRawrCbServer)(nil).RawrCbUpdate), arg0, arg1)
}

// RawrCbDelete mocks base method
func (m *MockRawrCbServer) RawrCbDelete(arg0 context.Context, arg1 *RawrCbDeleteRequestMsg) (*RawrCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawrCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*RawrCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbDelete indicates an expected call of RawrCbDelete
func (mr *MockRawrCbServerMockRecorder) RawrCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbDelete", reflect.TypeOf((*MockRawrCbServer)(nil).RawrCbDelete), arg0, arg1)
}

// RawrCbGet mocks base method
func (m *MockRawrCbServer) RawrCbGet(arg0 context.Context, arg1 *RawrCbGetRequestMsg) (*RawrCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawrCbGet", arg0, arg1)
	ret0, _ := ret[0].(*RawrCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawrCbGet indicates an expected call of RawrCbGet
func (mr *MockRawrCbServerMockRecorder) RawrCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawrCbGet", reflect.TypeOf((*MockRawrCbServer)(nil).RawrCbGet), arg0, arg1)
}
