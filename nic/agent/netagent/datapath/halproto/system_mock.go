// Code generated by MockGen. DO NOT EDIT.
// Source: system.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockSystemClient is a mock of SystemClient interface
type MockSystemClient struct {
	ctrl     *gomock.Controller
	recorder *MockSystemClientMockRecorder
}

// MockSystemClientMockRecorder is the mock recorder for MockSystemClient
type MockSystemClientMockRecorder struct {
	mock *MockSystemClient
}

// NewMockSystemClient creates a new mock instance
func NewMockSystemClient(ctrl *gomock.Controller) *MockSystemClient {
	mock := &MockSystemClient{ctrl: ctrl}
	mock.recorder = &MockSystemClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemClient) EXPECT() *MockSystemClientMockRecorder {
	return m.recorder
}

// ApiStatsGet mocks base method
func (m *MockSystemClient) ApiStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ApiStatsResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApiStatsGet", varargs...)
	ret0, _ := ret[0].(*ApiStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApiStatsGet indicates an expected call of ApiStatsGet
func (mr *MockSystemClientMockRecorder) ApiStatsGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiStatsGet", reflect.TypeOf((*MockSystemClient)(nil).ApiStatsGet), varargs...)
}

// SystemGet mocks base method
func (m *MockSystemClient) SystemGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SystemResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SystemGet", varargs...)
	ret0, _ := ret[0].(*SystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemGet indicates an expected call of SystemGet
func (mr *MockSystemClientMockRecorder) SystemGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGet", reflect.TypeOf((*MockSystemClient)(nil).SystemGet), varargs...)
}

// MockSystemServer is a mock of SystemServer interface
type MockSystemServer struct {
	ctrl     *gomock.Controller
	recorder *MockSystemServerMockRecorder
}

// MockSystemServerMockRecorder is the mock recorder for MockSystemServer
type MockSystemServerMockRecorder struct {
	mock *MockSystemServer
}

// NewMockSystemServer creates a new mock instance
func NewMockSystemServer(ctrl *gomock.Controller) *MockSystemServer {
	mock := &MockSystemServer{ctrl: ctrl}
	mock.recorder = &MockSystemServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemServer) EXPECT() *MockSystemServerMockRecorder {
	return m.recorder
}

// ApiStatsGet mocks base method
func (m *MockSystemServer) ApiStatsGet(arg0 context.Context, arg1 *Empty) (*ApiStatsResponse, error) {
	ret := m.ctrl.Call(m, "ApiStatsGet", arg0, arg1)
	ret0, _ := ret[0].(*ApiStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApiStatsGet indicates an expected call of ApiStatsGet
func (mr *MockSystemServerMockRecorder) ApiStatsGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiStatsGet", reflect.TypeOf((*MockSystemServer)(nil).ApiStatsGet), arg0, arg1)
}

// SystemGet mocks base method
func (m *MockSystemServer) SystemGet(arg0 context.Context, arg1 *Empty) (*SystemResponse, error) {
	ret := m.ctrl.Call(m, "SystemGet", arg0, arg1)
	ret0, _ := ret[0].(*SystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SystemGet indicates an expected call of SystemGet
func (mr *MockSystemServerMockRecorder) SystemGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemGet", reflect.TypeOf((*MockSystemServer)(nil).SystemGet), arg0, arg1)
}
