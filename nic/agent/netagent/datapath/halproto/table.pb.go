// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: table.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Table Types
type TableKind int32

const (
	TableKind_TABLE_NONE  TableKind = 0
	TableKind_TABLE_INDEX TableKind = 1
	TableKind_TABLE_TCAM  TableKind = 2
	TableKind_TABLE_HASH  TableKind = 3
	TableKind_TABLE_FLOW  TableKind = 4
	TableKind_TABLE_MET   TableKind = 5
)

var TableKind_name = map[int32]string{
	0: "TABLE_NONE",
	1: "TABLE_INDEX",
	2: "TABLE_TCAM",
	3: "TABLE_HASH",
	4: "TABLE_FLOW",
	5: "TABLE_MET",
}
var TableKind_value = map[string]int32{
	"TABLE_NONE":  0,
	"TABLE_INDEX": 1,
	"TABLE_TCAM":  2,
	"TABLE_HASH":  3,
	"TABLE_FLOW":  4,
	"TABLE_MET":   5,
}

func (x TableKind) String() string {
	return proto.EnumName(TableKind_name, int32(x))
}
func (TableKind) EnumDescriptor() ([]byte, []int) { return fileDescriptorTable, []int{0} }

// Index Metadata
type TableIndexMetadata struct {
	Capacity          uint32 `protobuf:"fixed32,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Usage             uint32 `protobuf:"fixed32,2,opt,name=usage,proto3" json:"usage,omitempty"`
	NumInserts        uint32 `protobuf:"fixed32,3,opt,name=num_inserts,json=numInserts,proto3" json:"num_inserts,omitempty"`
	NumInsertFailures uint32 `protobuf:"fixed32,4,opt,name=num_insert_failures,json=numInsertFailures,proto3" json:"num_insert_failures,omitempty"`
	NumUpdates        uint32 `protobuf:"fixed32,5,opt,name=num_updates,json=numUpdates,proto3" json:"num_updates,omitempty"`
	NumUpdateFailures uint32 `protobuf:"fixed32,6,opt,name=num_update_failures,json=numUpdateFailures,proto3" json:"num_update_failures,omitempty"`
	NumDeletes        uint32 `protobuf:"fixed32,7,opt,name=num_deletes,json=numDeletes,proto3" json:"num_deletes,omitempty"`
	NumDeleteFailures uint32 `protobuf:"fixed32,8,opt,name=num_delete_failures,json=numDeleteFailures,proto3" json:"num_delete_failures,omitempty"`
}

func (m *TableIndexMetadata) Reset()                    { *m = TableIndexMetadata{} }
func (m *TableIndexMetadata) String() string            { return proto.CompactTextString(m) }
func (*TableIndexMetadata) ProtoMessage()               {}
func (*TableIndexMetadata) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{0} }

func (m *TableIndexMetadata) GetCapacity() uint32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *TableIndexMetadata) GetUsage() uint32 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *TableIndexMetadata) GetNumInserts() uint32 {
	if m != nil {
		return m.NumInserts
	}
	return 0
}

func (m *TableIndexMetadata) GetNumInsertFailures() uint32 {
	if m != nil {
		return m.NumInsertFailures
	}
	return 0
}

func (m *TableIndexMetadata) GetNumUpdates() uint32 {
	if m != nil {
		return m.NumUpdates
	}
	return 0
}

func (m *TableIndexMetadata) GetNumUpdateFailures() uint32 {
	if m != nil {
		return m.NumUpdateFailures
	}
	return 0
}

func (m *TableIndexMetadata) GetNumDeletes() uint32 {
	if m != nil {
		return m.NumDeletes
	}
	return 0
}

func (m *TableIndexMetadata) GetNumDeleteFailures() uint32 {
	if m != nil {
		return m.NumDeleteFailures
	}
	return 0
}

// Tcam Metadata
type TableTcamMetadata struct {
	Capacity          uint32 `protobuf:"fixed32,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Usage             uint32 `protobuf:"fixed32,2,opt,name=usage,proto3" json:"usage,omitempty"`
	NumInserts        uint32 `protobuf:"fixed32,3,opt,name=num_inserts,json=numInserts,proto3" json:"num_inserts,omitempty"`
	NumInsertFailures uint32 `protobuf:"fixed32,4,opt,name=num_insert_failures,json=numInsertFailures,proto3" json:"num_insert_failures,omitempty"`
	NumUpdates        uint32 `protobuf:"fixed32,5,opt,name=num_updates,json=numUpdates,proto3" json:"num_updates,omitempty"`
	NumUpdateFailures uint32 `protobuf:"fixed32,6,opt,name=num_update_failures,json=numUpdateFailures,proto3" json:"num_update_failures,omitempty"`
	NumDeletes        uint32 `protobuf:"fixed32,7,opt,name=num_deletes,json=numDeletes,proto3" json:"num_deletes,omitempty"`
	NumDeleteFailures uint32 `protobuf:"fixed32,8,opt,name=num_delete_failures,json=numDeleteFailures,proto3" json:"num_delete_failures,omitempty"`
}

func (m *TableTcamMetadata) Reset()                    { *m = TableTcamMetadata{} }
func (m *TableTcamMetadata) String() string            { return proto.CompactTextString(m) }
func (*TableTcamMetadata) ProtoMessage()               {}
func (*TableTcamMetadata) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{1} }

func (m *TableTcamMetadata) GetCapacity() uint32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *TableTcamMetadata) GetUsage() uint32 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *TableTcamMetadata) GetNumInserts() uint32 {
	if m != nil {
		return m.NumInserts
	}
	return 0
}

func (m *TableTcamMetadata) GetNumInsertFailures() uint32 {
	if m != nil {
		return m.NumInsertFailures
	}
	return 0
}

func (m *TableTcamMetadata) GetNumUpdates() uint32 {
	if m != nil {
		return m.NumUpdates
	}
	return 0
}

func (m *TableTcamMetadata) GetNumUpdateFailures() uint32 {
	if m != nil {
		return m.NumUpdateFailures
	}
	return 0
}

func (m *TableTcamMetadata) GetNumDeletes() uint32 {
	if m != nil {
		return m.NumDeletes
	}
	return 0
}

func (m *TableTcamMetadata) GetNumDeleteFailures() uint32 {
	if m != nil {
		return m.NumDeleteFailures
	}
	return 0
}

// Hash Metadata
type TableHashMetadata struct {
	HasOtcam          bool   `protobuf:"varint,1,opt,name=has_otcam,json=hasOtcam,proto3" json:"has_otcam,omitempty"`
	Capacity          uint32 `protobuf:"fixed32,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	OtcamCapacity     uint32 `protobuf:"fixed32,3,opt,name=otcam_capacity,json=otcamCapacity,proto3" json:"otcam_capacity,omitempty"`
	HashUsage         uint32 `protobuf:"fixed32,4,opt,name=hash_usage,json=hashUsage,proto3" json:"hash_usage,omitempty"`
	OtcamUsage        uint32 `protobuf:"fixed32,5,opt,name=otcam_usage,json=otcamUsage,proto3" json:"otcam_usage,omitempty"`
	NumInserts        uint32 `protobuf:"fixed32,6,opt,name=num_inserts,json=numInserts,proto3" json:"num_inserts,omitempty"`
	NumInsertFailures uint32 `protobuf:"fixed32,7,opt,name=num_insert_failures,json=numInsertFailures,proto3" json:"num_insert_failures,omitempty"`
	NumUpdates        uint32 `protobuf:"fixed32,8,opt,name=num_updates,json=numUpdates,proto3" json:"num_updates,omitempty"`
	NumUpdateFailures uint32 `protobuf:"fixed32,9,opt,name=num_update_failures,json=numUpdateFailures,proto3" json:"num_update_failures,omitempty"`
	NumDeletes        uint32 `protobuf:"fixed32,10,opt,name=num_deletes,json=numDeletes,proto3" json:"num_deletes,omitempty"`
	NumDeleteFailures uint32 `protobuf:"fixed32,11,opt,name=num_delete_failures,json=numDeleteFailures,proto3" json:"num_delete_failures,omitempty"`
}

func (m *TableHashMetadata) Reset()                    { *m = TableHashMetadata{} }
func (m *TableHashMetadata) String() string            { return proto.CompactTextString(m) }
func (*TableHashMetadata) ProtoMessage()               {}
func (*TableHashMetadata) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{2} }

func (m *TableHashMetadata) GetHasOtcam() bool {
	if m != nil {
		return m.HasOtcam
	}
	return false
}

func (m *TableHashMetadata) GetCapacity() uint32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *TableHashMetadata) GetOtcamCapacity() uint32 {
	if m != nil {
		return m.OtcamCapacity
	}
	return 0
}

func (m *TableHashMetadata) GetHashUsage() uint32 {
	if m != nil {
		return m.HashUsage
	}
	return 0
}

func (m *TableHashMetadata) GetOtcamUsage() uint32 {
	if m != nil {
		return m.OtcamUsage
	}
	return 0
}

func (m *TableHashMetadata) GetNumInserts() uint32 {
	if m != nil {
		return m.NumInserts
	}
	return 0
}

func (m *TableHashMetadata) GetNumInsertFailures() uint32 {
	if m != nil {
		return m.NumInsertFailures
	}
	return 0
}

func (m *TableHashMetadata) GetNumUpdates() uint32 {
	if m != nil {
		return m.NumUpdates
	}
	return 0
}

func (m *TableHashMetadata) GetNumUpdateFailures() uint32 {
	if m != nil {
		return m.NumUpdateFailures
	}
	return 0
}

func (m *TableHashMetadata) GetNumDeletes() uint32 {
	if m != nil {
		return m.NumDeletes
	}
	return 0
}

func (m *TableHashMetadata) GetNumDeleteFailures() uint32 {
	if m != nil {
		return m.NumDeleteFailures
	}
	return 0
}

// Flow Metadata
type TableFlowMetadata struct {
	Capacity          uint32 `protobuf:"fixed32,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	CollCapacity      uint32 `protobuf:"fixed32,2,opt,name=coll_capacity,json=collCapacity,proto3" json:"coll_capacity,omitempty"`
	HashUsage         uint32 `protobuf:"fixed32,3,opt,name=hash_usage,json=hashUsage,proto3" json:"hash_usage,omitempty"`
	CollUsage         uint32 `protobuf:"fixed32,4,opt,name=coll_usage,json=collUsage,proto3" json:"coll_usage,omitempty"`
	NumInserts        uint32 `protobuf:"fixed32,5,opt,name=num_inserts,json=numInserts,proto3" json:"num_inserts,omitempty"`
	NumInsertFailures uint32 `protobuf:"fixed32,6,opt,name=num_insert_failures,json=numInsertFailures,proto3" json:"num_insert_failures,omitempty"`
	NumUpdates        uint32 `protobuf:"fixed32,7,opt,name=num_updates,json=numUpdates,proto3" json:"num_updates,omitempty"`
	NumUpdateFailures uint32 `protobuf:"fixed32,8,opt,name=num_update_failures,json=numUpdateFailures,proto3" json:"num_update_failures,omitempty"`
	NumDeletes        uint32 `protobuf:"fixed32,9,opt,name=num_deletes,json=numDeletes,proto3" json:"num_deletes,omitempty"`
	NumDeleteFailures uint32 `protobuf:"fixed32,10,opt,name=num_delete_failures,json=numDeleteFailures,proto3" json:"num_delete_failures,omitempty"`
}

func (m *TableFlowMetadata) Reset()                    { *m = TableFlowMetadata{} }
func (m *TableFlowMetadata) String() string            { return proto.CompactTextString(m) }
func (*TableFlowMetadata) ProtoMessage()               {}
func (*TableFlowMetadata) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{3} }

func (m *TableFlowMetadata) GetCapacity() uint32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *TableFlowMetadata) GetCollCapacity() uint32 {
	if m != nil {
		return m.CollCapacity
	}
	return 0
}

func (m *TableFlowMetadata) GetHashUsage() uint32 {
	if m != nil {
		return m.HashUsage
	}
	return 0
}

func (m *TableFlowMetadata) GetCollUsage() uint32 {
	if m != nil {
		return m.CollUsage
	}
	return 0
}

func (m *TableFlowMetadata) GetNumInserts() uint32 {
	if m != nil {
		return m.NumInserts
	}
	return 0
}

func (m *TableFlowMetadata) GetNumInsertFailures() uint32 {
	if m != nil {
		return m.NumInsertFailures
	}
	return 0
}

func (m *TableFlowMetadata) GetNumUpdates() uint32 {
	if m != nil {
		return m.NumUpdates
	}
	return 0
}

func (m *TableFlowMetadata) GetNumUpdateFailures() uint32 {
	if m != nil {
		return m.NumUpdateFailures
	}
	return 0
}

func (m *TableFlowMetadata) GetNumDeletes() uint32 {
	if m != nil {
		return m.NumDeletes
	}
	return 0
}

func (m *TableFlowMetadata) GetNumDeleteFailures() uint32 {
	if m != nil {
		return m.NumDeleteFailures
	}
	return 0
}

// Met Metadata
type TableMetMetadata struct {
	Capacity          uint32 `protobuf:"fixed32,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Usage             uint32 `protobuf:"fixed32,2,opt,name=usage,proto3" json:"usage,omitempty"`
	NumInserts        uint32 `protobuf:"fixed32,3,opt,name=num_inserts,json=numInserts,proto3" json:"num_inserts,omitempty"`
	NumInsertFailures uint32 `protobuf:"fixed32,4,opt,name=num_insert_failures,json=numInsertFailures,proto3" json:"num_insert_failures,omitempty"`
	NumUpdates        uint32 `protobuf:"fixed32,5,opt,name=num_updates,json=numUpdates,proto3" json:"num_updates,omitempty"`
	NumUpdateFailures uint32 `protobuf:"fixed32,6,opt,name=num_update_failures,json=numUpdateFailures,proto3" json:"num_update_failures,omitempty"`
	NumDeletes        uint32 `protobuf:"fixed32,7,opt,name=num_deletes,json=numDeletes,proto3" json:"num_deletes,omitempty"`
	NumDeleteFailures uint32 `protobuf:"fixed32,8,opt,name=num_delete_failures,json=numDeleteFailures,proto3" json:"num_delete_failures,omitempty"`
}

func (m *TableMetMetadata) Reset()                    { *m = TableMetMetadata{} }
func (m *TableMetMetadata) String() string            { return proto.CompactTextString(m) }
func (*TableMetMetadata) ProtoMessage()               {}
func (*TableMetMetadata) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{4} }

func (m *TableMetMetadata) GetCapacity() uint32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *TableMetMetadata) GetUsage() uint32 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *TableMetMetadata) GetNumInserts() uint32 {
	if m != nil {
		return m.NumInserts
	}
	return 0
}

func (m *TableMetMetadata) GetNumInsertFailures() uint32 {
	if m != nil {
		return m.NumInsertFailures
	}
	return 0
}

func (m *TableMetMetadata) GetNumUpdates() uint32 {
	if m != nil {
		return m.NumUpdates
	}
	return 0
}

func (m *TableMetMetadata) GetNumUpdateFailures() uint32 {
	if m != nil {
		return m.NumUpdateFailures
	}
	return 0
}

func (m *TableMetMetadata) GetNumDeletes() uint32 {
	if m != nil {
		return m.NumDeletes
	}
	return 0
}

func (m *TableMetMetadata) GetNumDeleteFailures() uint32 {
	if m != nil {
		return m.NumDeleteFailures
	}
	return 0
}

// Table Metadata
type TableMetadata struct {
	TableName string    `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TableId   uint32    `protobuf:"fixed32,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Kind      TableKind `protobuf:"varint,3,opt,name=kind,proto3,enum=table.TableKind" json:"kind,omitempty"`
	// Types that are valid to be assigned to Metadata:
	//	*TableMetadata_IndexMeta
	//	*TableMetadata_TcamMeta
	//	*TableMetadata_HashMeta
	//	*TableMetadata_FlowMeta
	//	*TableMetadata_MetMeta
	Metadata isTableMetadata_Metadata `protobuf_oneof:"metadata"`
}

func (m *TableMetadata) Reset()                    { *m = TableMetadata{} }
func (m *TableMetadata) String() string            { return proto.CompactTextString(m) }
func (*TableMetadata) ProtoMessage()               {}
func (*TableMetadata) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{5} }

type isTableMetadata_Metadata interface {
	isTableMetadata_Metadata()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TableMetadata_IndexMeta struct {
	IndexMeta *TableIndexMetadata `protobuf:"bytes,4,opt,name=index_meta,json=indexMeta,oneof"`
}
type TableMetadata_TcamMeta struct {
	TcamMeta *TableTcamMetadata `protobuf:"bytes,5,opt,name=tcam_meta,json=tcamMeta,oneof"`
}
type TableMetadata_HashMeta struct {
	HashMeta *TableHashMetadata `protobuf:"bytes,6,opt,name=hash_meta,json=hashMeta,oneof"`
}
type TableMetadata_FlowMeta struct {
	FlowMeta *TableFlowMetadata `protobuf:"bytes,7,opt,name=flow_meta,json=flowMeta,oneof"`
}
type TableMetadata_MetMeta struct {
	MetMeta *TableMetMetadata `protobuf:"bytes,8,opt,name=met_meta,json=metMeta,oneof"`
}

func (*TableMetadata_IndexMeta) isTableMetadata_Metadata() {}
func (*TableMetadata_TcamMeta) isTableMetadata_Metadata()  {}
func (*TableMetadata_HashMeta) isTableMetadata_Metadata()  {}
func (*TableMetadata_FlowMeta) isTableMetadata_Metadata()  {}
func (*TableMetadata_MetMeta) isTableMetadata_Metadata()   {}

func (m *TableMetadata) GetMetadata() isTableMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TableMetadata) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *TableMetadata) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *TableMetadata) GetKind() TableKind {
	if m != nil {
		return m.Kind
	}
	return TableKind_TABLE_NONE
}

func (m *TableMetadata) GetIndexMeta() *TableIndexMetadata {
	if x, ok := m.GetMetadata().(*TableMetadata_IndexMeta); ok {
		return x.IndexMeta
	}
	return nil
}

func (m *TableMetadata) GetTcamMeta() *TableTcamMetadata {
	if x, ok := m.GetMetadata().(*TableMetadata_TcamMeta); ok {
		return x.TcamMeta
	}
	return nil
}

func (m *TableMetadata) GetHashMeta() *TableHashMetadata {
	if x, ok := m.GetMetadata().(*TableMetadata_HashMeta); ok {
		return x.HashMeta
	}
	return nil
}

func (m *TableMetadata) GetFlowMeta() *TableFlowMetadata {
	if x, ok := m.GetMetadata().(*TableMetadata_FlowMeta); ok {
		return x.FlowMeta
	}
	return nil
}

func (m *TableMetadata) GetMetMeta() *TableMetMetadata {
	if x, ok := m.GetMetadata().(*TableMetadata_MetMeta); ok {
		return x.MetMeta
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TableMetadata) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TableMetadata_OneofMarshaler, _TableMetadata_OneofUnmarshaler, _TableMetadata_OneofSizer, []interface{}{
		(*TableMetadata_IndexMeta)(nil),
		(*TableMetadata_TcamMeta)(nil),
		(*TableMetadata_HashMeta)(nil),
		(*TableMetadata_FlowMeta)(nil),
		(*TableMetadata_MetMeta)(nil),
	}
}

func _TableMetadata_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TableMetadata)
	// metadata
	switch x := m.Metadata.(type) {
	case *TableMetadata_IndexMeta:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IndexMeta); err != nil {
			return err
		}
	case *TableMetadata_TcamMeta:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcamMeta); err != nil {
			return err
		}
	case *TableMetadata_HashMeta:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashMeta); err != nil {
			return err
		}
	case *TableMetadata_FlowMeta:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FlowMeta); err != nil {
			return err
		}
	case *TableMetadata_MetMeta:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MetMeta); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TableMetadata.Metadata has unexpected type %T", x)
	}
	return nil
}

func _TableMetadata_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TableMetadata)
	switch tag {
	case 4: // metadata.index_meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableIndexMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &TableMetadata_IndexMeta{msg}
		return true, err
	case 5: // metadata.tcam_meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableTcamMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &TableMetadata_TcamMeta{msg}
		return true, err
	case 6: // metadata.hash_meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableHashMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &TableMetadata_HashMeta{msg}
		return true, err
	case 7: // metadata.flow_meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableFlowMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &TableMetadata_FlowMeta{msg}
		return true, err
	case 8: // metadata.met_meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableMetMetadata)
		err := b.DecodeMessage(msg)
		m.Metadata = &TableMetadata_MetMeta{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TableMetadata_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TableMetadata)
	// metadata
	switch x := m.Metadata.(type) {
	case *TableMetadata_IndexMeta:
		s := proto.Size(x.IndexMeta)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableMetadata_TcamMeta:
		s := proto.Size(x.TcamMeta)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableMetadata_HashMeta:
		s := proto.Size(x.HashMeta)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableMetadata_FlowMeta:
		s := proto.Size(x.FlowMeta)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableMetadata_MetMeta:
		s := proto.Size(x.MetMeta)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Table metadata response message
type TableMetadataResponseMsg struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	TableMeta []*TableMetadata `protobuf:"bytes,2,rep,name=table_meta,json=tableMeta" json:"table_meta,omitempty"`
}

func (m *TableMetadataResponseMsg) Reset()                    { *m = TableMetadataResponseMsg{} }
func (m *TableMetadataResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TableMetadataResponseMsg) ProtoMessage()               {}
func (*TableMetadataResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{6} }

func (m *TableMetadataResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TableMetadataResponseMsg) GetTableMeta() []*TableMetadata {
	if m != nil {
		return m.TableMeta
	}
	return nil
}

type TableIdName struct {
	// Types that are valid to be assigned to IdOrName:
	//	*TableIdName_TableName
	//	*TableIdName_TableId
	IdOrName isTableIdName_IdOrName `protobuf_oneof:"id_or_name"`
}

func (m *TableIdName) Reset()                    { *m = TableIdName{} }
func (m *TableIdName) String() string            { return proto.CompactTextString(m) }
func (*TableIdName) ProtoMessage()               {}
func (*TableIdName) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{7} }

type isTableIdName_IdOrName interface {
	isTableIdName_IdOrName()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TableIdName_TableName struct {
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3,oneof"`
}
type TableIdName_TableId struct {
	TableId uint32 `protobuf:"fixed32,2,opt,name=table_id,json=tableId,proto3,oneof"`
}

func (*TableIdName_TableName) isTableIdName_IdOrName() {}
func (*TableIdName_TableId) isTableIdName_IdOrName()   {}

func (m *TableIdName) GetIdOrName() isTableIdName_IdOrName {
	if m != nil {
		return m.IdOrName
	}
	return nil
}

func (m *TableIdName) GetTableName() string {
	if x, ok := m.GetIdOrName().(*TableIdName_TableName); ok {
		return x.TableName
	}
	return ""
}

func (m *TableIdName) GetTableId() uint32 {
	if x, ok := m.GetIdOrName().(*TableIdName_TableId); ok {
		return x.TableId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TableIdName) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TableIdName_OneofMarshaler, _TableIdName_OneofUnmarshaler, _TableIdName_OneofSizer, []interface{}{
		(*TableIdName_TableName)(nil),
		(*TableIdName_TableId)(nil),
	}
}

func _TableIdName_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TableIdName)
	// id_or_name
	switch x := m.IdOrName.(type) {
	case *TableIdName_TableName:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.TableName)
	case *TableIdName_TableId:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.TableId))
	case nil:
	default:
		return fmt.Errorf("TableIdName.IdOrName has unexpected type %T", x)
	}
	return nil
}

func _TableIdName_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TableIdName)
	switch tag {
	case 1: // id_or_name.table_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.IdOrName = &TableIdName_TableName{x}
		return true, err
	case 2: // id_or_name.table_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.IdOrName = &TableIdName_TableId{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TableIdName_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TableIdName)
	// id_or_name
	switch x := m.IdOrName.(type) {
	case *TableIdName_TableName:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TableName)))
		n += len(x.TableName)
	case *TableIdName_TableId:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TableSpec struct {
	Key *TableIdName `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *TableSpec) Reset()                    { *m = TableSpec{} }
func (m *TableSpec) String() string            { return proto.CompactTextString(m) }
func (*TableSpec) ProtoMessage()               {}
func (*TableSpec) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{8} }

func (m *TableSpec) GetKey() *TableIdName {
	if m != nil {
		return m.Key
	}
	return nil
}

type TableRequestMsg struct {
	Spec []*TableSpec `protobuf:"bytes,1,rep,name=spec" json:"spec,omitempty"`
}

func (m *TableRequestMsg) Reset()                    { *m = TableRequestMsg{} }
func (m *TableRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TableRequestMsg) ProtoMessage()               {}
func (*TableRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{9} }

func (m *TableRequestMsg) GetSpec() []*TableSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type TableIndexEntry struct {
	Index uint32 `protobuf:"fixed32,1,opt,name=index,proto3" json:"index,omitempty"`
	Entry string `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *TableIndexEntry) Reset()                    { *m = TableIndexEntry{} }
func (m *TableIndexEntry) String() string            { return proto.CompactTextString(m) }
func (*TableIndexEntry) ProtoMessage()               {}
func (*TableIndexEntry) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{10} }

func (m *TableIndexEntry) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TableIndexEntry) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

type TableIndexMsg struct {
	IndexEntry []*TableIndexEntry `protobuf:"bytes,1,rep,name=index_entry,json=indexEntry" json:"index_entry,omitempty"`
}

func (m *TableIndexMsg) Reset()                    { *m = TableIndexMsg{} }
func (m *TableIndexMsg) String() string            { return proto.CompactTextString(m) }
func (*TableIndexMsg) ProtoMessage()               {}
func (*TableIndexMsg) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{11} }

func (m *TableIndexMsg) GetIndexEntry() []*TableIndexEntry {
	if m != nil {
		return m.IndexEntry
	}
	return nil
}

type TableTcamEntry struct {
	Index uint32 `protobuf:"fixed32,1,opt,name=index,proto3" json:"index,omitempty"`
	Entry string `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *TableTcamEntry) Reset()                    { *m = TableTcamEntry{} }
func (m *TableTcamEntry) String() string            { return proto.CompactTextString(m) }
func (*TableTcamEntry) ProtoMessage()               {}
func (*TableTcamEntry) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{12} }

func (m *TableTcamEntry) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TableTcamEntry) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

type TableTcamMsg struct {
	TcamEntry []*TableTcamEntry `protobuf:"bytes,1,rep,name=tcam_entry,json=tcamEntry" json:"tcam_entry,omitempty"`
}

func (m *TableTcamMsg) Reset()                    { *m = TableTcamMsg{} }
func (m *TableTcamMsg) String() string            { return proto.CompactTextString(m) }
func (*TableTcamMsg) ProtoMessage()               {}
func (*TableTcamMsg) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{13} }

func (m *TableTcamMsg) GetTcamEntry() []*TableTcamEntry {
	if m != nil {
		return m.TcamEntry
	}
	return nil
}

type TableHashEntry struct {
	InOtcam bool   `protobuf:"varint,1,opt,name=in_otcam,json=inOtcam,proto3" json:"in_otcam,omitempty"`
	Index   uint32 `protobuf:"fixed32,2,opt,name=index,proto3" json:"index,omitempty"`
	Entry   string `protobuf:"bytes,3,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *TableHashEntry) Reset()                    { *m = TableHashEntry{} }
func (m *TableHashEntry) String() string            { return proto.CompactTextString(m) }
func (*TableHashEntry) ProtoMessage()               {}
func (*TableHashEntry) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{14} }

func (m *TableHashEntry) GetInOtcam() bool {
	if m != nil {
		return m.InOtcam
	}
	return false
}

func (m *TableHashEntry) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TableHashEntry) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

type TableHashMsg struct {
	HashEntry []*TableHashEntry `protobuf:"bytes,1,rep,name=hash_entry,json=hashEntry" json:"hash_entry,omitempty"`
}

func (m *TableHashMsg) Reset()                    { *m = TableHashMsg{} }
func (m *TableHashMsg) String() string            { return proto.CompactTextString(m) }
func (*TableHashMsg) ProtoMessage()               {}
func (*TableHashMsg) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{15} }

func (m *TableHashMsg) GetHashEntry() []*TableHashEntry {
	if m != nil {
		return m.HashEntry
	}
	return nil
}

type TableFlowEntry struct {
	InColl bool   `protobuf:"varint,1,opt,name=in_coll,json=inColl,proto3" json:"in_coll,omitempty"`
	Index  uint32 `protobuf:"fixed32,2,opt,name=index,proto3" json:"index,omitempty"`
	Entry  string `protobuf:"bytes,3,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *TableFlowEntry) Reset()                    { *m = TableFlowEntry{} }
func (m *TableFlowEntry) String() string            { return proto.CompactTextString(m) }
func (*TableFlowEntry) ProtoMessage()               {}
func (*TableFlowEntry) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{16} }

func (m *TableFlowEntry) GetInColl() bool {
	if m != nil {
		return m.InColl
	}
	return false
}

func (m *TableFlowEntry) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TableFlowEntry) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

type TableFlowMsg struct {
	FlowEntry []*TableFlowEntry `protobuf:"bytes,1,rep,name=flow_entry,json=flowEntry" json:"flow_entry,omitempty"`
}

func (m *TableFlowMsg) Reset()                    { *m = TableFlowMsg{} }
func (m *TableFlowMsg) String() string            { return proto.CompactTextString(m) }
func (*TableFlowMsg) ProtoMessage()               {}
func (*TableFlowMsg) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{17} }

func (m *TableFlowMsg) GetFlowEntry() []*TableFlowEntry {
	if m != nil {
		return m.FlowEntry
	}
	return nil
}

type TableMetEntry struct {
	Index uint32 `protobuf:"fixed32,1,opt,name=index,proto3" json:"index,omitempty"`
	Entry string `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *TableMetEntry) Reset()                    { *m = TableMetEntry{} }
func (m *TableMetEntry) String() string            { return proto.CompactTextString(m) }
func (*TableMetEntry) ProtoMessage()               {}
func (*TableMetEntry) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{18} }

func (m *TableMetEntry) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TableMetEntry) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

type TableMetMsg struct {
	MetEntry []*TableMetEntry `protobuf:"bytes,1,rep,name=met_entry,json=metEntry" json:"met_entry,omitempty"`
}

func (m *TableMetMsg) Reset()                    { *m = TableMetMsg{} }
func (m *TableMetMsg) String() string            { return proto.CompactTextString(m) }
func (*TableMetMsg) ProtoMessage()               {}
func (*TableMetMsg) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{19} }

func (m *TableMetMsg) GetMetEntry() []*TableMetEntry {
	if m != nil {
		return m.MetEntry
	}
	return nil
}

type TableResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	// Types that are valid to be assigned to TableEntry:
	//	*TableResponse_IndexTable
	//	*TableResponse_TcamTable
	//	*TableResponse_HashTable
	//	*TableResponse_FlowTable
	//	*TableResponse_MetTable
	TableEntry isTableResponse_TableEntry `protobuf_oneof:"TableEntry"`
}

func (m *TableResponse) Reset()                    { *m = TableResponse{} }
func (m *TableResponse) String() string            { return proto.CompactTextString(m) }
func (*TableResponse) ProtoMessage()               {}
func (*TableResponse) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{20} }

type isTableResponse_TableEntry interface {
	isTableResponse_TableEntry()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TableResponse_IndexTable struct {
	IndexTable *TableIndexMsg `protobuf:"bytes,2,opt,name=index_table,json=indexTable,oneof"`
}
type TableResponse_TcamTable struct {
	TcamTable *TableTcamMsg `protobuf:"bytes,3,opt,name=tcam_table,json=tcamTable,oneof"`
}
type TableResponse_HashTable struct {
	HashTable *TableHashMsg `protobuf:"bytes,4,opt,name=hash_table,json=hashTable,oneof"`
}
type TableResponse_FlowTable struct {
	FlowTable *TableFlowMsg `protobuf:"bytes,5,opt,name=flow_table,json=flowTable,oneof"`
}
type TableResponse_MetTable struct {
	MetTable *TableMetMsg `protobuf:"bytes,6,opt,name=met_table,json=metTable,oneof"`
}

func (*TableResponse_IndexTable) isTableResponse_TableEntry() {}
func (*TableResponse_TcamTable) isTableResponse_TableEntry()  {}
func (*TableResponse_HashTable) isTableResponse_TableEntry()  {}
func (*TableResponse_FlowTable) isTableResponse_TableEntry()  {}
func (*TableResponse_MetTable) isTableResponse_TableEntry()   {}

func (m *TableResponse) GetTableEntry() isTableResponse_TableEntry {
	if m != nil {
		return m.TableEntry
	}
	return nil
}

func (m *TableResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TableResponse) GetIndexTable() *TableIndexMsg {
	if x, ok := m.GetTableEntry().(*TableResponse_IndexTable); ok {
		return x.IndexTable
	}
	return nil
}

func (m *TableResponse) GetTcamTable() *TableTcamMsg {
	if x, ok := m.GetTableEntry().(*TableResponse_TcamTable); ok {
		return x.TcamTable
	}
	return nil
}

func (m *TableResponse) GetHashTable() *TableHashMsg {
	if x, ok := m.GetTableEntry().(*TableResponse_HashTable); ok {
		return x.HashTable
	}
	return nil
}

func (m *TableResponse) GetFlowTable() *TableFlowMsg {
	if x, ok := m.GetTableEntry().(*TableResponse_FlowTable); ok {
		return x.FlowTable
	}
	return nil
}

func (m *TableResponse) GetMetTable() *TableMetMsg {
	if x, ok := m.GetTableEntry().(*TableResponse_MetTable); ok {
		return x.MetTable
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TableResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TableResponse_OneofMarshaler, _TableResponse_OneofUnmarshaler, _TableResponse_OneofSizer, []interface{}{
		(*TableResponse_IndexTable)(nil),
		(*TableResponse_TcamTable)(nil),
		(*TableResponse_HashTable)(nil),
		(*TableResponse_FlowTable)(nil),
		(*TableResponse_MetTable)(nil),
	}
}

func _TableResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TableResponse)
	// TableEntry
	switch x := m.TableEntry.(type) {
	case *TableResponse_IndexTable:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IndexTable); err != nil {
			return err
		}
	case *TableResponse_TcamTable:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TcamTable); err != nil {
			return err
		}
	case *TableResponse_HashTable:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HashTable); err != nil {
			return err
		}
	case *TableResponse_FlowTable:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FlowTable); err != nil {
			return err
		}
	case *TableResponse_MetTable:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MetTable); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TableResponse.TableEntry has unexpected type %T", x)
	}
	return nil
}

func _TableResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TableResponse)
	switch tag {
	case 2: // TableEntry.index_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableIndexMsg)
		err := b.DecodeMessage(msg)
		m.TableEntry = &TableResponse_IndexTable{msg}
		return true, err
	case 3: // TableEntry.tcam_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableTcamMsg)
		err := b.DecodeMessage(msg)
		m.TableEntry = &TableResponse_TcamTable{msg}
		return true, err
	case 4: // TableEntry.hash_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableHashMsg)
		err := b.DecodeMessage(msg)
		m.TableEntry = &TableResponse_HashTable{msg}
		return true, err
	case 5: // TableEntry.flow_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableFlowMsg)
		err := b.DecodeMessage(msg)
		m.TableEntry = &TableResponse_FlowTable{msg}
		return true, err
	case 6: // TableEntry.met_table
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableMetMsg)
		err := b.DecodeMessage(msg)
		m.TableEntry = &TableResponse_MetTable{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TableResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TableResponse)
	// TableEntry
	switch x := m.TableEntry.(type) {
	case *TableResponse_IndexTable:
		s := proto.Size(x.IndexTable)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableResponse_TcamTable:
		s := proto.Size(x.TcamTable)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableResponse_HashTable:
		s := proto.Size(x.HashTable)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableResponse_FlowTable:
		s := proto.Size(x.FlowTable)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableResponse_MetTable:
		s := proto.Size(x.MetTable)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TableResponseMsg struct {
	Response []*TableResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TableResponseMsg) Reset()                    { *m = TableResponseMsg{} }
func (m *TableResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TableResponseMsg) ProtoMessage()               {}
func (*TableResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorTable, []int{21} }

func (m *TableResponseMsg) GetResponse() []*TableResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*TableIndexMetadata)(nil), "table.TableIndexMetadata")
	proto.RegisterType((*TableTcamMetadata)(nil), "table.TableTcamMetadata")
	proto.RegisterType((*TableHashMetadata)(nil), "table.TableHashMetadata")
	proto.RegisterType((*TableFlowMetadata)(nil), "table.TableFlowMetadata")
	proto.RegisterType((*TableMetMetadata)(nil), "table.TableMetMetadata")
	proto.RegisterType((*TableMetadata)(nil), "table.TableMetadata")
	proto.RegisterType((*TableMetadataResponseMsg)(nil), "table.TableMetadataResponseMsg")
	proto.RegisterType((*TableIdName)(nil), "table.TableIdName")
	proto.RegisterType((*TableSpec)(nil), "table.TableSpec")
	proto.RegisterType((*TableRequestMsg)(nil), "table.TableRequestMsg")
	proto.RegisterType((*TableIndexEntry)(nil), "table.TableIndexEntry")
	proto.RegisterType((*TableIndexMsg)(nil), "table.TableIndexMsg")
	proto.RegisterType((*TableTcamEntry)(nil), "table.TableTcamEntry")
	proto.RegisterType((*TableTcamMsg)(nil), "table.TableTcamMsg")
	proto.RegisterType((*TableHashEntry)(nil), "table.TableHashEntry")
	proto.RegisterType((*TableHashMsg)(nil), "table.TableHashMsg")
	proto.RegisterType((*TableFlowEntry)(nil), "table.TableFlowEntry")
	proto.RegisterType((*TableFlowMsg)(nil), "table.TableFlowMsg")
	proto.RegisterType((*TableMetEntry)(nil), "table.TableMetEntry")
	proto.RegisterType((*TableMetMsg)(nil), "table.TableMetMsg")
	proto.RegisterType((*TableResponse)(nil), "table.TableResponse")
	proto.RegisterType((*TableResponseMsg)(nil), "table.TableResponseMsg")
	proto.RegisterEnum("table.TableKind", TableKind_name, TableKind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Table service

type TableClient interface {
	TableMetadataGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TableMetadataResponseMsg, error)
	TableGet(ctx context.Context, in *TableRequestMsg, opts ...grpc.CallOption) (*TableResponseMsg, error)
}

type tableClient struct {
	cc *grpc.ClientConn
}

func NewTableClient(cc *grpc.ClientConn) TableClient {
	return &tableClient{cc}
}

func (c *tableClient) TableMetadataGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TableMetadataResponseMsg, error) {
	out := new(TableMetadataResponseMsg)
	err := grpc.Invoke(ctx, "/table.Table/TableMetadataGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableClient) TableGet(ctx context.Context, in *TableRequestMsg, opts ...grpc.CallOption) (*TableResponseMsg, error) {
	out := new(TableResponseMsg)
	err := grpc.Invoke(ctx, "/table.Table/TableGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Table service

type TableServer interface {
	TableMetadataGet(context.Context, *Empty) (*TableMetadataResponseMsg, error)
	TableGet(context.Context, *TableRequestMsg) (*TableResponseMsg, error)
}

func RegisterTableServer(s *grpc.Server, srv TableServer) {
	s.RegisterService(&_Table_serviceDesc, srv)
}

func _Table_TableMetadataGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).TableMetadataGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.Table/TableMetadataGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).TableMetadataGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Table_TableGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServer).TableGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/table.Table/TableGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServer).TableGet(ctx, req.(*TableRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Table_serviceDesc = grpc.ServiceDesc{
	ServiceName: "table.Table",
	HandlerType: (*TableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TableMetadataGet",
			Handler:    _Table_TableMetadataGet_Handler,
		},
		{
			MethodName: "TableGet",
			Handler:    _Table_TableGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "table.proto",
}

func (m *TableIndexMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableIndexMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Capacity != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Capacity))
		i += 4
	}
	if m.Usage != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Usage))
		i += 4
	}
	if m.NumInserts != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInserts))
		i += 4
	}
	if m.NumInsertFailures != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInsertFailures))
		i += 4
	}
	if m.NumUpdates != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdates))
		i += 4
	}
	if m.NumUpdateFailures != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdateFailures))
		i += 4
	}
	if m.NumDeletes != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeletes))
		i += 4
	}
	if m.NumDeleteFailures != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeleteFailures))
		i += 4
	}
	return i, nil
}

func (m *TableTcamMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableTcamMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Capacity != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Capacity))
		i += 4
	}
	if m.Usage != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Usage))
		i += 4
	}
	if m.NumInserts != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInserts))
		i += 4
	}
	if m.NumInsertFailures != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInsertFailures))
		i += 4
	}
	if m.NumUpdates != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdates))
		i += 4
	}
	if m.NumUpdateFailures != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdateFailures))
		i += 4
	}
	if m.NumDeletes != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeletes))
		i += 4
	}
	if m.NumDeleteFailures != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeleteFailures))
		i += 4
	}
	return i, nil
}

func (m *TableHashMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableHashMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasOtcam {
		dAtA[i] = 0x8
		i++
		if m.HasOtcam {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Capacity != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Capacity))
		i += 4
	}
	if m.OtcamCapacity != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.OtcamCapacity))
		i += 4
	}
	if m.HashUsage != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.HashUsage))
		i += 4
	}
	if m.OtcamUsage != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.OtcamUsage))
		i += 4
	}
	if m.NumInserts != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInserts))
		i += 4
	}
	if m.NumInsertFailures != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInsertFailures))
		i += 4
	}
	if m.NumUpdates != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdates))
		i += 4
	}
	if m.NumUpdateFailures != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdateFailures))
		i += 4
	}
	if m.NumDeletes != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeletes))
		i += 4
	}
	if m.NumDeleteFailures != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeleteFailures))
		i += 4
	}
	return i, nil
}

func (m *TableFlowMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableFlowMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Capacity != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Capacity))
		i += 4
	}
	if m.CollCapacity != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.CollCapacity))
		i += 4
	}
	if m.HashUsage != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.HashUsage))
		i += 4
	}
	if m.CollUsage != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.CollUsage))
		i += 4
	}
	if m.NumInserts != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInserts))
		i += 4
	}
	if m.NumInsertFailures != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInsertFailures))
		i += 4
	}
	if m.NumUpdates != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdates))
		i += 4
	}
	if m.NumUpdateFailures != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdateFailures))
		i += 4
	}
	if m.NumDeletes != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeletes))
		i += 4
	}
	if m.NumDeleteFailures != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeleteFailures))
		i += 4
	}
	return i, nil
}

func (m *TableMetMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableMetMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Capacity != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Capacity))
		i += 4
	}
	if m.Usage != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Usage))
		i += 4
	}
	if m.NumInserts != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInserts))
		i += 4
	}
	if m.NumInsertFailures != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumInsertFailures))
		i += 4
	}
	if m.NumUpdates != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdates))
		i += 4
	}
	if m.NumUpdateFailures != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumUpdateFailures))
		i += 4
	}
	if m.NumDeletes != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeletes))
		i += 4
	}
	if m.NumDeleteFailures != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NumDeleteFailures))
		i += 4
	}
	return i, nil
}

func (m *TableMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TableName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTable(dAtA, i, uint64(len(m.TableName)))
		i += copy(dAtA[i:], m.TableName)
	}
	if m.TableId != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TableId))
		i += 4
	}
	if m.Kind != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.Kind))
	}
	if m.Metadata != nil {
		nn1, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *TableMetadata_IndexMeta) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IndexMeta != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.IndexMeta.Size()))
		n2, err := m.IndexMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *TableMetadata_TcamMeta) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcamMeta != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.TcamMeta.Size()))
		n3, err := m.TcamMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *TableMetadata_HashMeta) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashMeta != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.HashMeta.Size()))
		n4, err := m.HashMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *TableMetadata_FlowMeta) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FlowMeta != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.FlowMeta.Size()))
		n5, err := m.FlowMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *TableMetadata_MetMeta) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MetMeta != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.MetMeta.Size()))
		n6, err := m.MetMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *TableMetadataResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableMetadataResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.TableMeta) > 0 {
		for _, msg := range m.TableMeta {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTable(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TableIdName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableIdName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdOrName != nil {
		nn7, err := m.IdOrName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *TableIdName_TableName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintTable(dAtA, i, uint64(len(m.TableName)))
	i += copy(dAtA[i:], m.TableName)
	return i, nil
}
func (m *TableIdName_TableId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x15
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TableId))
	i += 4
	return i, nil
}
func (m *TableSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.Key.Size()))
		n8, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *TableRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Spec) > 0 {
		for _, msg := range m.Spec {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTable(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TableIndexEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableIndexEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Index))
		i += 4
	}
	if len(m.Entry) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTable(dAtA, i, uint64(len(m.Entry)))
		i += copy(dAtA[i:], m.Entry)
	}
	return i, nil
}

func (m *TableIndexMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableIndexMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IndexEntry) > 0 {
		for _, msg := range m.IndexEntry {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTable(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TableTcamEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableTcamEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Index))
		i += 4
	}
	if len(m.Entry) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTable(dAtA, i, uint64(len(m.Entry)))
		i += copy(dAtA[i:], m.Entry)
	}
	return i, nil
}

func (m *TableTcamMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableTcamMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TcamEntry) > 0 {
		for _, msg := range m.TcamEntry {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTable(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TableHashEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableHashEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InOtcam {
		dAtA[i] = 0x8
		i++
		if m.InOtcam {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Index))
		i += 4
	}
	if len(m.Entry) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTable(dAtA, i, uint64(len(m.Entry)))
		i += copy(dAtA[i:], m.Entry)
	}
	return i, nil
}

func (m *TableHashMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableHashMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HashEntry) > 0 {
		for _, msg := range m.HashEntry {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTable(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TableFlowEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableFlowEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InColl {
		dAtA[i] = 0x8
		i++
		if m.InColl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Index != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Index))
		i += 4
	}
	if len(m.Entry) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTable(dAtA, i, uint64(len(m.Entry)))
		i += copy(dAtA[i:], m.Entry)
	}
	return i, nil
}

func (m *TableFlowMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableFlowMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FlowEntry) > 0 {
		for _, msg := range m.FlowEntry {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTable(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TableMetEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableMetEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Index))
		i += 4
	}
	if len(m.Entry) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTable(dAtA, i, uint64(len(m.Entry)))
		i += copy(dAtA[i:], m.Entry)
	}
	return i, nil
}

func (m *TableMetMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableMetMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MetEntry) > 0 {
		for _, msg := range m.MetEntry {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTable(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TableResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.ApiStatus))
	}
	if m.TableEntry != nil {
		nn9, err := m.TableEntry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *TableResponse_IndexTable) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IndexTable != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.IndexTable.Size()))
		n10, err := m.IndexTable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *TableResponse_TcamTable) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TcamTable != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.TcamTable.Size()))
		n11, err := m.TcamTable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *TableResponse_HashTable) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.HashTable != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.HashTable.Size()))
		n12, err := m.HashTable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *TableResponse_FlowTable) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FlowTable != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.FlowTable.Size()))
		n13, err := m.FlowTable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *TableResponse_MetTable) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MetTable != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTable(dAtA, i, uint64(m.MetTable.Size()))
		n14, err := m.MetTable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *TableResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTable(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTable(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TableIndexMetadata) Size() (n int) {
	var l int
	_ = l
	if m.Capacity != 0 {
		n += 5
	}
	if m.Usage != 0 {
		n += 5
	}
	if m.NumInserts != 0 {
		n += 5
	}
	if m.NumInsertFailures != 0 {
		n += 5
	}
	if m.NumUpdates != 0 {
		n += 5
	}
	if m.NumUpdateFailures != 0 {
		n += 5
	}
	if m.NumDeletes != 0 {
		n += 5
	}
	if m.NumDeleteFailures != 0 {
		n += 5
	}
	return n
}

func (m *TableTcamMetadata) Size() (n int) {
	var l int
	_ = l
	if m.Capacity != 0 {
		n += 5
	}
	if m.Usage != 0 {
		n += 5
	}
	if m.NumInserts != 0 {
		n += 5
	}
	if m.NumInsertFailures != 0 {
		n += 5
	}
	if m.NumUpdates != 0 {
		n += 5
	}
	if m.NumUpdateFailures != 0 {
		n += 5
	}
	if m.NumDeletes != 0 {
		n += 5
	}
	if m.NumDeleteFailures != 0 {
		n += 5
	}
	return n
}

func (m *TableHashMetadata) Size() (n int) {
	var l int
	_ = l
	if m.HasOtcam {
		n += 2
	}
	if m.Capacity != 0 {
		n += 5
	}
	if m.OtcamCapacity != 0 {
		n += 5
	}
	if m.HashUsage != 0 {
		n += 5
	}
	if m.OtcamUsage != 0 {
		n += 5
	}
	if m.NumInserts != 0 {
		n += 5
	}
	if m.NumInsertFailures != 0 {
		n += 5
	}
	if m.NumUpdates != 0 {
		n += 5
	}
	if m.NumUpdateFailures != 0 {
		n += 5
	}
	if m.NumDeletes != 0 {
		n += 5
	}
	if m.NumDeleteFailures != 0 {
		n += 5
	}
	return n
}

func (m *TableFlowMetadata) Size() (n int) {
	var l int
	_ = l
	if m.Capacity != 0 {
		n += 5
	}
	if m.CollCapacity != 0 {
		n += 5
	}
	if m.HashUsage != 0 {
		n += 5
	}
	if m.CollUsage != 0 {
		n += 5
	}
	if m.NumInserts != 0 {
		n += 5
	}
	if m.NumInsertFailures != 0 {
		n += 5
	}
	if m.NumUpdates != 0 {
		n += 5
	}
	if m.NumUpdateFailures != 0 {
		n += 5
	}
	if m.NumDeletes != 0 {
		n += 5
	}
	if m.NumDeleteFailures != 0 {
		n += 5
	}
	return n
}

func (m *TableMetMetadata) Size() (n int) {
	var l int
	_ = l
	if m.Capacity != 0 {
		n += 5
	}
	if m.Usage != 0 {
		n += 5
	}
	if m.NumInserts != 0 {
		n += 5
	}
	if m.NumInsertFailures != 0 {
		n += 5
	}
	if m.NumUpdates != 0 {
		n += 5
	}
	if m.NumUpdateFailures != 0 {
		n += 5
	}
	if m.NumDeletes != 0 {
		n += 5
	}
	if m.NumDeleteFailures != 0 {
		n += 5
	}
	return n
}

func (m *TableMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovTable(uint64(l))
	}
	if m.TableId != 0 {
		n += 5
	}
	if m.Kind != 0 {
		n += 1 + sovTable(uint64(m.Kind))
	}
	if m.Metadata != nil {
		n += m.Metadata.Size()
	}
	return n
}

func (m *TableMetadata_IndexMeta) Size() (n int) {
	var l int
	_ = l
	if m.IndexMeta != nil {
		l = m.IndexMeta.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableMetadata_TcamMeta) Size() (n int) {
	var l int
	_ = l
	if m.TcamMeta != nil {
		l = m.TcamMeta.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableMetadata_HashMeta) Size() (n int) {
	var l int
	_ = l
	if m.HashMeta != nil {
		l = m.HashMeta.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableMetadata_FlowMeta) Size() (n int) {
	var l int
	_ = l
	if m.FlowMeta != nil {
		l = m.FlowMeta.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableMetadata_MetMeta) Size() (n int) {
	var l int
	_ = l
	if m.MetMeta != nil {
		l = m.MetMeta.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableMetadataResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovTable(uint64(m.ApiStatus))
	}
	if len(m.TableMeta) > 0 {
		for _, e := range m.TableMeta {
			l = e.Size()
			n += 1 + l + sovTable(uint64(l))
		}
	}
	return n
}

func (m *TableIdName) Size() (n int) {
	var l int
	_ = l
	if m.IdOrName != nil {
		n += m.IdOrName.Size()
	}
	return n
}

func (m *TableIdName_TableName) Size() (n int) {
	var l int
	_ = l
	l = len(m.TableName)
	n += 1 + l + sovTable(uint64(l))
	return n
}
func (m *TableIdName_TableId) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *TableSpec) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}

func (m *TableRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Spec) > 0 {
		for _, e := range m.Spec {
			l = e.Size()
			n += 1 + l + sovTable(uint64(l))
		}
	}
	return n
}

func (m *TableIndexEntry) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 5
	}
	l = len(m.Entry)
	if l > 0 {
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}

func (m *TableIndexMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.IndexEntry) > 0 {
		for _, e := range m.IndexEntry {
			l = e.Size()
			n += 1 + l + sovTable(uint64(l))
		}
	}
	return n
}

func (m *TableTcamEntry) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 5
	}
	l = len(m.Entry)
	if l > 0 {
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}

func (m *TableTcamMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.TcamEntry) > 0 {
		for _, e := range m.TcamEntry {
			l = e.Size()
			n += 1 + l + sovTable(uint64(l))
		}
	}
	return n
}

func (m *TableHashEntry) Size() (n int) {
	var l int
	_ = l
	if m.InOtcam {
		n += 2
	}
	if m.Index != 0 {
		n += 5
	}
	l = len(m.Entry)
	if l > 0 {
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}

func (m *TableHashMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.HashEntry) > 0 {
		for _, e := range m.HashEntry {
			l = e.Size()
			n += 1 + l + sovTable(uint64(l))
		}
	}
	return n
}

func (m *TableFlowEntry) Size() (n int) {
	var l int
	_ = l
	if m.InColl {
		n += 2
	}
	if m.Index != 0 {
		n += 5
	}
	l = len(m.Entry)
	if l > 0 {
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}

func (m *TableFlowMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.FlowEntry) > 0 {
		for _, e := range m.FlowEntry {
			l = e.Size()
			n += 1 + l + sovTable(uint64(l))
		}
	}
	return n
}

func (m *TableMetEntry) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 5
	}
	l = len(m.Entry)
	if l > 0 {
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}

func (m *TableMetMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.MetEntry) > 0 {
		for _, e := range m.MetEntry {
			l = e.Size()
			n += 1 + l + sovTable(uint64(l))
		}
	}
	return n
}

func (m *TableResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovTable(uint64(m.ApiStatus))
	}
	if m.TableEntry != nil {
		n += m.TableEntry.Size()
	}
	return n
}

func (m *TableResponse_IndexTable) Size() (n int) {
	var l int
	_ = l
	if m.IndexTable != nil {
		l = m.IndexTable.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableResponse_TcamTable) Size() (n int) {
	var l int
	_ = l
	if m.TcamTable != nil {
		l = m.TcamTable.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableResponse_HashTable) Size() (n int) {
	var l int
	_ = l
	if m.HashTable != nil {
		l = m.HashTable.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableResponse_FlowTable) Size() (n int) {
	var l int
	_ = l
	if m.FlowTable != nil {
		l = m.FlowTable.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableResponse_MetTable) Size() (n int) {
	var l int
	_ = l
	if m.MetTable != nil {
		l = m.MetTable.Size()
		n += 1 + l + sovTable(uint64(l))
	}
	return n
}
func (m *TableResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovTable(uint64(l))
		}
	}
	return n
}

func sovTable(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTable(x uint64) (n int) {
	return sovTable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TableIndexMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableIndexMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableIndexMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Capacity = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInserts", wireType)
			}
			m.NumInserts = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInserts = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInsertFailures", wireType)
			}
			m.NumInsertFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInsertFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdates", wireType)
			}
			m.NumUpdates = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdates = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdateFailures", wireType)
			}
			m.NumUpdateFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdateFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeletes", wireType)
			}
			m.NumDeletes = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeletes = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleteFailures", wireType)
			}
			m.NumDeleteFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeleteFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableTcamMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableTcamMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableTcamMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Capacity = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInserts", wireType)
			}
			m.NumInserts = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInserts = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInsertFailures", wireType)
			}
			m.NumInsertFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInsertFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdates", wireType)
			}
			m.NumUpdates = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdates = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdateFailures", wireType)
			}
			m.NumUpdateFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdateFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeletes", wireType)
			}
			m.NumDeletes = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeletes = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleteFailures", wireType)
			}
			m.NumDeleteFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeleteFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableHashMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableHashMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableHashMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasOtcam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasOtcam = bool(v != 0)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Capacity = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtcamCapacity", wireType)
			}
			m.OtcamCapacity = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.OtcamCapacity = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashUsage", wireType)
			}
			m.HashUsage = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.HashUsage = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtcamUsage", wireType)
			}
			m.OtcamUsage = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.OtcamUsage = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInserts", wireType)
			}
			m.NumInserts = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInserts = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInsertFailures", wireType)
			}
			m.NumInsertFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInsertFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdates", wireType)
			}
			m.NumUpdates = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdates = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdateFailures", wireType)
			}
			m.NumUpdateFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdateFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeletes", wireType)
			}
			m.NumDeletes = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeletes = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleteFailures", wireType)
			}
			m.NumDeleteFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeleteFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableFlowMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableFlowMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableFlowMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Capacity = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollCapacity", wireType)
			}
			m.CollCapacity = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.CollCapacity = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashUsage", wireType)
			}
			m.HashUsage = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.HashUsage = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollUsage", wireType)
			}
			m.CollUsage = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.CollUsage = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInserts", wireType)
			}
			m.NumInserts = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInserts = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInsertFailures", wireType)
			}
			m.NumInsertFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInsertFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdates", wireType)
			}
			m.NumUpdates = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdates = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdateFailures", wireType)
			}
			m.NumUpdateFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdateFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeletes", wireType)
			}
			m.NumDeletes = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeletes = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleteFailures", wireType)
			}
			m.NumDeleteFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeleteFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableMetMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableMetMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableMetMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Capacity = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			m.Usage = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Usage = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInserts", wireType)
			}
			m.NumInserts = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInserts = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInsertFailures", wireType)
			}
			m.NumInsertFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumInsertFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdates", wireType)
			}
			m.NumUpdates = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdates = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUpdateFailures", wireType)
			}
			m.NumUpdateFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUpdateFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeletes", wireType)
			}
			m.NumDeletes = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeletes = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleteFailures", wireType)
			}
			m.NumDeleteFailures = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumDeleteFailures = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			m.TableId = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TableId = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (TableKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableIndexMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &TableMetadata_IndexMeta{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcamMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableTcamMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &TableMetadata_TcamMeta{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableHashMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &TableMetadata_HashMeta{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableFlowMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &TableMetadata_FlowMeta{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableMetMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &TableMetadata_MetMeta{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableMetadataResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableMetadataResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableMetadataResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableMeta = append(m.TableMeta, &TableMetadata{})
			if err := m.TableMeta[len(m.TableMeta)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableIdName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableIdName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableIdName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdOrName = &TableIdName_TableName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.IdOrName = &TableIdName_TableId{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &TableIdName{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = append(m.Spec, &TableSpec{})
			if err := m.Spec[len(m.Spec)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableIndexEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableIndexEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableIndexEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableIndexMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableIndexMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableIndexMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexEntry = append(m.IndexEntry, &TableIndexEntry{})
			if err := m.IndexEntry[len(m.IndexEntry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableTcamEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableTcamEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableTcamEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableTcamMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableTcamMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableTcamMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcamEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcamEntry = append(m.TcamEntry, &TableTcamEntry{})
			if err := m.TcamEntry[len(m.TcamEntry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableHashEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableHashEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableHashEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InOtcam", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InOtcam = bool(v != 0)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableHashMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableHashMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableHashMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashEntry = append(m.HashEntry, &TableHashEntry{})
			if err := m.HashEntry[len(m.HashEntry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableFlowEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableFlowEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableFlowEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InColl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InColl = bool(v != 0)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableFlowMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableFlowMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableFlowMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowEntry = append(m.FlowEntry, &TableFlowEntry{})
			if err := m.FlowEntry[len(m.FlowEntry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableMetEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableMetEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableMetEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableMetMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableMetMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableMetMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetEntry = append(m.MetEntry, &TableMetEntry{})
			if err := m.MetEntry[len(m.MetEntry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableIndexMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TableEntry = &TableResponse_IndexTable{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcamTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableTcamMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TableEntry = &TableResponse_TcamTable{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableHashMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TableEntry = &TableResponse_HashTable{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableFlowMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TableEntry = &TableResponse_FlowTable{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TableMetMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.TableEntry = &TableResponse_MetTable{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TableResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TableResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTable
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TableResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTable(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTable
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTable
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTable
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTable(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTable = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTable   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("table.proto", fileDescriptorTable) }

var fileDescriptorTable = []byte{
	// 1182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0xdd, 0x6e, 0x1b, 0x55,
	0x10, 0xf6, 0x4f, 0x6c, 0xef, 0x8e, 0x93, 0xd4, 0x3d, 0x6d, 0x13, 0x27, 0x55, 0x92, 0xca, 0x04,
	0xa9, 0xe2, 0x22, 0xa2, 0x69, 0xa5, 0x48, 0x85, 0x4a, 0xe4, 0xc7, 0xc1, 0x11, 0x4d, 0x22, 0x6d,
	0x12, 0x15, 0xb8, 0x59, 0x9d, 0xda, 0x27, 0xf1, 0x2a, 0xbb, 0xeb, 0xc5, 0xe7, 0x98, 0x92, 0x07,
	0xe0, 0x8a, 0x07, 0x80, 0x27, 0xe0, 0x15, 0x80, 0x37, 0xe0, 0x92, 0x27, 0x40, 0x28, 0x8f, 0x00,
	0x2f, 0x80, 0xce, 0xcc, 0xd9, 0x5d, 0xff, 0x4a, 0x1b, 0xc4, 0x65, 0xaf, 0x9a, 0x99, 0x33, 0xdf,
	0x9c, 0x6f, 0xe7, 0x9b, 0x99, 0xe3, 0x42, 0x55, 0xf1, 0xb7, 0xbe, 0xd8, 0x8a, 0xfa, 0x3d, 0xd5,
	0x63, 0x25, 0x34, 0x56, 0xab, 0xea, 0x26, 0x12, 0x92, 0x7c, 0x8d, 0xdf, 0x0a, 0xc0, 0xce, 0xb5,
	0xfb, 0x28, 0xec, 0x88, 0xef, 0x8e, 0x85, 0xe2, 0x1d, 0xae, 0x38, 0x5b, 0x05, 0xab, 0xcd, 0x23,
	0xde, 0xf6, 0xd4, 0x4d, 0x3d, 0xff, 0x24, 0xff, 0xb4, 0xe2, 0x24, 0x36, 0x7b, 0x08, 0xa5, 0x81,
	0xe4, 0x57, 0xa2, 0x5e, 0xc0, 0x03, 0x32, 0xd8, 0x06, 0x54, 0xc3, 0x41, 0xe0, 0x7a, 0xa1, 0x14,
	0x7d, 0x25, 0xeb, 0x45, 0x3c, 0x83, 0x70, 0x10, 0x1c, 0x91, 0x87, 0x6d, 0xc1, 0x83, 0x34, 0xc0,
	0xbd, 0xe4, 0x9e, 0x3f, 0xe8, 0x0b, 0x59, 0x9f, 0xc3, 0xc0, 0xfb, 0x49, 0xe0, 0xa1, 0x39, 0x88,
	0x13, 0x0e, 0xa2, 0x0e, 0x57, 0x42, 0xd6, 0x4b, 0x49, 0xc2, 0x0b, 0xf2, 0xc4, 0x09, 0x29, 0x20,
	0x4d, 0x58, 0x4e, 0x12, 0x52, 0xe0, 0x78, 0xc2, 0x8e, 0xf0, 0x85, 0x4e, 0x58, 0x49, 0x12, 0x1e,
	0x90, 0x27, 0x4e, 0x48, 0x01, 0x69, 0x42, 0x2b, 0x49, 0x48, 0x81, 0x71, 0xc2, 0xc6, 0xaf, 0x05,
	0xb8, 0x8f, 0xb5, 0x3b, 0x6f, 0xf3, 0xe0, 0x7d, 0xe9, 0xee, 0x52, 0xba, 0x9f, 0x8b, 0xa6, 0x74,
	0x2d, 0x2e, 0xbb, 0x49, 0xe9, 0x1e, 0x83, 0xdd, 0xe5, 0xd2, 0xed, 0xa9, 0x36, 0x0f, 0xb0, 0x76,
	0x96, 0x63, 0x75, 0xb9, 0x3c, 0xd5, 0xf6, 0x48, 0x5d, 0x0b, 0x63, 0x75, 0xfd, 0x10, 0x16, 0x11,
	0xe4, 0x26, 0x11, 0x54, 0xc4, 0x05, 0xf4, 0xee, 0xc7, 0x61, 0x6b, 0x00, 0x5d, 0x2e, 0xbb, 0x2e,
	0x69, 0x40, 0xe5, 0xd3, 0x37, 0x76, 0x2f, 0x62, 0x1d, 0x28, 0x0b, 0x9d, 0x9b, 0xb2, 0xa1, 0xeb,
	0x62, 0x9a, 0x50, 0xe5, 0xac, 0x42, 0x55, 0x32, 0x0a, 0x65, 0x65, 0x15, 0xca, 0xce, 0x28, 0x14,
	0x64, 0x15, 0xaa, 0x3a, 0x4b, 0xa8, 0xef, 0x63, 0xa1, 0x0e, 0xfd, 0xde, 0xbb, 0x4c, 0x3d, 0xfe,
	0x01, 0x2c, 0xb4, 0x7b, 0xbe, 0xef, 0x8e, 0x89, 0x35, 0xaf, 0x9d, 0x33, 0x94, 0x28, 0x8e, 0x2b,
	0xb1, 0x06, 0x80, 0x39, 0x46, 0x84, 0xd2, 0x9e, 0xa9, 0x3a, 0x94, 0xb2, 0xea, 0x50, 0xce, 0xa8,
	0x43, 0x25, 0xab, 0x0e, 0x56, 0x46, 0x1d, 0xec, 0xac, 0x3a, 0xc0, 0x2c, 0x1d, 0x7e, 0x29, 0x40,
	0x0d, 0x75, 0x38, 0x16, 0xea, 0xfd, 0xaa, 0xb9, 0xcb, 0xaa, 0xf9, 0xa9, 0x08, 0x0b, 0x71, 0xe5,
	0xa8, 0x6c, 0x6b, 0x00, 0xf8, 0x12, 0xba, 0x21, 0x0f, 0x04, 0x16, 0xce, 0x76, 0x6c, 0xf4, 0x9c,
	0xf0, 0x40, 0xb0, 0x15, 0xb0, 0xe8, 0xd8, 0xeb, 0x98, 0xe2, 0x55, 0xd0, 0x3e, 0xea, 0xb0, 0x4d,
	0x98, 0xbb, 0xf6, 0xc2, 0x0e, 0xd6, 0x6d, 0x71, 0xbb, 0xb6, 0x45, 0xaf, 0x2b, 0x66, 0xff, 0xc2,
	0x0b, 0x3b, 0x0e, 0x9e, 0xb2, 0x97, 0x00, 0x9e, 0x7e, 0x4d, 0xdd, 0x40, 0x28, 0x8e, 0xa5, 0xab,
	0x6e, 0xaf, 0x0c, 0xc7, 0x8e, 0xbc, 0xb5, 0xad, 0x9c, 0x63, 0x7b, 0xb1, 0x83, 0xed, 0x80, 0x8d,
	0x2b, 0x08, 0xa1, 0x25, 0x84, 0xd6, 0x87, 0xa1, 0xc3, 0x4f, 0x4d, 0x2b, 0xe7, 0x58, 0xca, 0xd8,
	0x1a, 0x88, 0x13, 0x85, 0xc0, 0xf2, 0x24, 0x70, 0x78, 0xd1, 0x6a, 0x60, 0xd7, 0xd8, 0x1a, 0x78,
	0xe9, 0xf7, 0xde, 0x11, 0xb0, 0x32, 0x09, 0x1c, 0x1e, 0x7c, 0x0d, 0xbc, 0x34, 0x36, 0x7b, 0x01,
	0x56, 0x20, 0x14, 0xe1, 0x2c, 0xc4, 0x2d, 0x0f, 0xe3, 0x86, 0x1a, 0xb5, 0x95, 0x73, 0x2a, 0x01,
	0x99, 0x7b, 0x80, 0x28, 0x74, 0x37, 0x7e, 0xcc, 0x43, 0x7d, 0x44, 0x1a, 0x47, 0xc8, 0xa8, 0x17,
	0x4a, 0x71, 0x2c, 0xaf, 0xd8, 0x21, 0x00, 0x8f, 0x3c, 0x57, 0x2a, 0xae, 0x06, 0x12, 0x55, 0xc2,
	0x8a, 0xe3, 0x6f, 0x97, 0xdd, 0xc8, 0x3b, 0x43, 0xff, 0xde, 0xa3, 0xbf, 0xff, 0xdc, 0xb8, 0xff,
	0xad, 0x08, 0xbd, 0xb6, 0x78, 0x99, 0x86, 0x3b, 0x36, 0x8f, 0x23, 0xd8, 0xf3, 0x58, 0x6d, 0x24,
	0x5a, 0x78, 0x52, 0x7c, 0x5a, 0xdd, 0x7e, 0x38, 0x46, 0x94, 0x2e, 0xa7, 0x1e, 0xd0, 0x66, 0xe3,
	0x2b, 0xa8, 0x92, 0x52, 0x1d, 0x6c, 0x89, 0x8d, 0xc9, 0x8e, 0xd1, 0xb2, 0xa5, 0x3d, 0xf3, 0x78,
	0xbc, 0x67, 0xf4, 0x27, 0x9b, 0xae, 0xd9, 0x9b, 0x07, 0xf0, 0x3a, 0x6e, 0xaf, 0x8f, 0xe8, 0xc6,
	0x33, 0xb0, 0x31, 0xf5, 0x59, 0x24, 0xda, 0x6c, 0x13, 0x8a, 0xd7, 0x82, 0x86, 0xb7, 0xba, 0xcd,
	0x46, 0x7a, 0x04, 0x6f, 0x76, 0xf4, 0x71, 0x63, 0x07, 0xee, 0xa1, 0xcf, 0x11, 0xdf, 0x0c, 0x84,
	0x54, 0xba, 0x3a, 0x9b, 0x30, 0x27, 0x23, 0xd1, 0xae, 0xe7, 0xf1, 0x7b, 0x46, 0x3a, 0x51, 0x27,
	0x76, 0xf0, 0xb4, 0xf1, 0xca, 0x00, 0xb1, 0xe1, 0x9a, 0xa1, 0xea, 0xe3, 0x5e, 0xc0, 0x6e, 0x33,
	0x0b, 0x83, 0x0c, 0xed, 0x15, 0xfa, 0x18, 0xc9, 0xdb, 0x0e, 0x19, 0x8d, 0x96, 0x99, 0x1c, 0xea,
	0x57, 0x79, 0xc5, 0x76, 0xa0, 0x4a, 0x9d, 0x4d, 0xc1, 0x74, 0xf9, 0xd2, 0x44, 0x6b, 0xe3, 0x4d,
	0x0e, 0x0d, 0x01, 0xfe, 0xdd, 0xf8, 0x14, 0x16, 0x93, 0xf6, 0xbd, 0x3b, 0x8f, 0x03, 0x98, 0x4f,
	0x9b, 0x5f, 0x5e, 0xb1, 0x17, 0x00, 0x38, 0x24, 0xc3, 0x2c, 0x1e, 0x8d, 0x4f, 0x09, 0x91, 0xc0,
	0x69, 0x22, 0x0e, 0x6f, 0x0c, 0x07, 0x3d, 0x09, 0xc4, 0x61, 0x05, 0x2c, 0x2f, 0x1c, 0xf9, 0xb9,
	0x51, 0xf1, 0x42, 0xfa, 0xb5, 0x91, 0xd0, 0x2b, 0x4c, 0xa5, 0x57, 0x9c, 0x46, 0x0f, 0x47, 0x8c,
	0xe8, 0xe1, 0x28, 0xce, 0xa4, 0x97, 0x30, 0xa0, 0x37, 0x8f, 0xe8, 0x5d, 0x18, 0x7a, 0x7a, 0xde,
	0x88, 0xde, 0x32, 0x54, 0xbc, 0xd0, 0xd5, 0xcf, 0x9e, 0x61, 0x57, 0xf6, 0xc2, 0xfd, 0x9e, 0xef,
	0xff, 0x27, 0x72, 0x38, 0xc6, 0x44, 0x0e, 0xc7, 0x7d, 0x26, 0xb9, 0xe4, 0x7e, 0x07, 0xf7, 0x02,
	0x91, 0xfb, 0x24, 0xdd, 0xa1, 0x77, 0x97, 0xef, 0x33, 0x33, 0x4c, 0x7a, 0x23, 0xc8, 0x2b, 0xf6,
	0x0c, 0x6c, 0xbd, 0x37, 0x86, 0x09, 0x8c, 0xcf, 0x23, 0xdd, 0xaf, 0x17, 0x05, 0x5d, 0xff, 0x4f,
	0xc1, 0xdc, 0x1f, 0x2f, 0x88, 0xff, 0x6d, 0x3b, 0x24, 0x1d, 0x8d, 0x04, 0x90, 0xf7, 0x18, 0x9d,
	0xb8, 0xf9, 0x5b, 0x39, 0xd3, 0xd1, 0xe8, 0x4d, 0x7a, 0x90, 0x70, 0x45, 0xc4, 0x3d, 0x98, 0xd8,
	0xd4, 0x08, 0xc3, 0x1e, 0x4c, 0x50, 0xd8, 0x1a, 0x84, 0x9a, 0x9b, 0x44, 0x99, 0x1e, 0xd2, 0x28,
	0x1d, 0x98, 0xa0, 0x50, 0x33, 0x42, 0x95, 0x26, 0x51, 0x46, 0x5c, 0x8d, 0xd2, 0x81, 0x84, 0x32,
	0x75, 0x26, 0x50, 0x79, 0x72, 0xc3, 0x90, 0x1c, 0x7a, 0xa5, 0x07, 0x42, 0xa1, 0x47, 0x6f, 0x2a,
	0xfc, 0xa3, 0x69, 0x5a, 0xa7, 0x36, 0x52, 0x74, 0x2d, 0xde, 0xc7, 0x60, 0xf5, 0x8d, 0x39, 0x4d,
	0xbb, 0x38, 0xd4, 0x49, 0xa2, 0x3e, 0xba, 0x36, 0xfb, 0x4e, 0x3f, 0x90, 0x6c, 0x11, 0xe0, 0x7c,
	0x77, 0xef, 0x75, 0xd3, 0x3d, 0x39, 0x3d, 0x69, 0xd6, 0x72, 0xec, 0x1e, 0x54, 0xc9, 0x3e, 0x3a,
	0x39, 0x68, 0x7e, 0x59, 0xcb, 0xa7, 0x01, 0xe7, 0xfb, 0xbb, 0xc7, 0xb5, 0x42, 0x6a, 0xb7, 0x76,
	0xcf, 0x5a, 0xb5, 0x62, 0x6a, 0x1f, 0xbe, 0x3e, 0x7d, 0x53, 0x9b, 0x63, 0x0b, 0x60, 0x93, 0x7d,
	0xdc, 0x3c, 0xaf, 0x95, 0xb6, 0x7f, 0xc8, 0x43, 0x89, 0xbe, 0x7e, 0x3f, 0xfd, 0xbd, 0x84, 0xdb,
	0xfd, 0x73, 0xa1, 0xd8, 0xbc, 0x69, 0x90, 0x66, 0x10, 0xa9, 0x9b, 0xd5, 0x8d, 0xa9, 0x8f, 0x40,
	0xfa, 0xad, 0x8d, 0x1c, 0x7b, 0x05, 0x16, 0x9e, 0x6a, 0xf0, 0xd2, 0xe8, 0x77, 0xc6, 0x9b, 0x78,
	0x75, 0x79, 0xda, 0xf7, 0x23, 0x7c, 0x6f, 0xe9, 0xf7, 0xdb, 0xf5, 0xfc, 0x1f, 0xb7, 0xeb, 0xf9,
	0xbf, 0x6e, 0xd7, 0xf3, 0x5f, 0x5b, 0x5d, 0xee, 0xe3, 0x7f, 0xba, 0xdf, 0x96, 0xf1, 0x9f, 0xe7,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x39, 0x82, 0x5a, 0x7a, 0x9e, 0x0f, 0x00, 0x00,
}
