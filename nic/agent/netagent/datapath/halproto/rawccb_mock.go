// Code generated by MockGen. DO NOT EDIT.
// Source: rawccb.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisRawcCbKeyHandle_KeyOrHandle is a mock of isRawcCbKeyHandle_KeyOrHandle interface
type MockisRawcCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisRawcCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisRawcCbKeyHandle_KeyOrHandle
type MockisRawcCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisRawcCbKeyHandle_KeyOrHandle
}

// NewMockisRawcCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisRawcCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisRawcCbKeyHandle_KeyOrHandle {
	mock := &MockisRawcCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisRawcCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRawcCbKeyHandle_KeyOrHandle) EXPECT() *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isRawcCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisRawcCbKeyHandle_KeyOrHandle) isRawcCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isRawcCbKeyHandle_KeyOrHandle")
}

// isRawcCbKeyHandle_KeyOrHandle indicates an expected call of isRawcCbKeyHandle_KeyOrHandle
func (mr *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder) isRawcCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRawcCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisRawcCbKeyHandle_KeyOrHandle)(nil).isRawcCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisRawcCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRawcCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisRawcCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisRawcCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRawcCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockRawcCbClient is a mock of RawcCbClient interface
type MockRawcCbClient struct {
	ctrl     *gomock.Controller
	recorder *MockRawcCbClientMockRecorder
}

// MockRawcCbClientMockRecorder is the mock recorder for MockRawcCbClient
type MockRawcCbClientMockRecorder struct {
	mock *MockRawcCbClient
}

// NewMockRawcCbClient creates a new mock instance
func NewMockRawcCbClient(ctrl *gomock.Controller) *MockRawcCbClient {
	mock := &MockRawcCbClient{ctrl: ctrl}
	mock.recorder = &MockRawcCbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRawcCbClient) EXPECT() *MockRawcCbClientMockRecorder {
	return m.recorder
}

// RawcCbCreate mocks base method
func (m *MockRawcCbClient) RawcCbCreate(ctx context.Context, in *RawcCbRequestMsg, opts ...grpc.CallOption) (*RawcCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawcCbCreate", varargs...)
	ret0, _ := ret[0].(*RawcCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbCreate indicates an expected call of RawcCbCreate
func (mr *MockRawcCbClientMockRecorder) RawcCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbCreate", reflect.TypeOf((*MockRawcCbClient)(nil).RawcCbCreate), varargs...)
}

// RawcCbUpdate mocks base method
func (m *MockRawcCbClient) RawcCbUpdate(ctx context.Context, in *RawcCbRequestMsg, opts ...grpc.CallOption) (*RawcCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawcCbUpdate", varargs...)
	ret0, _ := ret[0].(*RawcCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbUpdate indicates an expected call of RawcCbUpdate
func (mr *MockRawcCbClientMockRecorder) RawcCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbUpdate", reflect.TypeOf((*MockRawcCbClient)(nil).RawcCbUpdate), varargs...)
}

// RawcCbDelete mocks base method
func (m *MockRawcCbClient) RawcCbDelete(ctx context.Context, in *RawcCbDeleteRequestMsg, opts ...grpc.CallOption) (*RawcCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawcCbDelete", varargs...)
	ret0, _ := ret[0].(*RawcCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbDelete indicates an expected call of RawcCbDelete
func (mr *MockRawcCbClientMockRecorder) RawcCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbDelete", reflect.TypeOf((*MockRawcCbClient)(nil).RawcCbDelete), varargs...)
}

// RawcCbGet mocks base method
func (m *MockRawcCbClient) RawcCbGet(ctx context.Context, in *RawcCbGetRequestMsg, opts ...grpc.CallOption) (*RawcCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawcCbGet", varargs...)
	ret0, _ := ret[0].(*RawcCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbGet indicates an expected call of RawcCbGet
func (mr *MockRawcCbClientMockRecorder) RawcCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbGet", reflect.TypeOf((*MockRawcCbClient)(nil).RawcCbGet), varargs...)
}

// MockRawcCbServer is a mock of RawcCbServer interface
type MockRawcCbServer struct {
	ctrl     *gomock.Controller
	recorder *MockRawcCbServerMockRecorder
}

// MockRawcCbServerMockRecorder is the mock recorder for MockRawcCbServer
type MockRawcCbServerMockRecorder struct {
	mock *MockRawcCbServer
}

// NewMockRawcCbServer creates a new mock instance
func NewMockRawcCbServer(ctrl *gomock.Controller) *MockRawcCbServer {
	mock := &MockRawcCbServer{ctrl: ctrl}
	mock.recorder = &MockRawcCbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRawcCbServer) EXPECT() *MockRawcCbServerMockRecorder {
	return m.recorder
}

// RawcCbCreate mocks base method
func (m *MockRawcCbServer) RawcCbCreate(arg0 context.Context, arg1 *RawcCbRequestMsg) (*RawcCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawcCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*RawcCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbCreate indicates an expected call of RawcCbCreate
func (mr *MockRawcCbServerMockRecorder) RawcCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbCreate", reflect.TypeOf((*MockRawcCbServer)(nil).RawcCbCreate), arg0, arg1)
}

// RawcCbUpdate mocks base method
func (m *MockRawcCbServer) RawcCbUpdate(arg0 context.Context, arg1 *RawcCbRequestMsg) (*RawcCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawcCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*RawcCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbUpdate indicates an expected call of RawcCbUpdate
func (mr *MockRawcCbServerMockRecorder) RawcCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbUpdate", reflect.TypeOf((*MockRawcCbServer)(nil).RawcCbUpdate), arg0, arg1)
}

// RawcCbDelete mocks base method
func (m *MockRawcCbServer) RawcCbDelete(arg0 context.Context, arg1 *RawcCbDeleteRequestMsg) (*RawcCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawcCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*RawcCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbDelete indicates an expected call of RawcCbDelete
func (mr *MockRawcCbServerMockRecorder) RawcCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbDelete", reflect.TypeOf((*MockRawcCbServer)(nil).RawcCbDelete), arg0, arg1)
}

// RawcCbGet mocks base method
func (m *MockRawcCbServer) RawcCbGet(arg0 context.Context, arg1 *RawcCbGetRequestMsg) (*RawcCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "RawcCbGet", arg0, arg1)
	ret0, _ := ret[0].(*RawcCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawcCbGet indicates an expected call of RawcCbGet
func (mr *MockRawcCbServerMockRecorder) RawcCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawcCbGet", reflect.TypeOf((*MockRawcCbServer)(nil).RawcCbGet), arg0, arg1)
}
