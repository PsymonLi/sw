// Code generated by MockGen. DO NOT EDIT.
// Source: nw.pb.go

package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisNexthopSpec_IfOrEp is a mock of isNexthopSpec_IfOrEp interface
type MockisNexthopSpec_IfOrEp struct {
	ctrl     *gomock.Controller
	recorder *MockisNexthopSpec_IfOrEpMockRecorder
}

// MockisNexthopSpec_IfOrEpMockRecorder is the mock recorder for MockisNexthopSpec_IfOrEp
type MockisNexthopSpec_IfOrEpMockRecorder struct {
	mock *MockisNexthopSpec_IfOrEp
}

// NewMockisNexthopSpec_IfOrEp creates a new mock instance
func NewMockisNexthopSpec_IfOrEp(ctrl *gomock.Controller) *MockisNexthopSpec_IfOrEp {
	mock := &MockisNexthopSpec_IfOrEp{ctrl: ctrl}
	mock.recorder = &MockisNexthopSpec_IfOrEpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisNexthopSpec_IfOrEp) EXPECT() *MockisNexthopSpec_IfOrEpMockRecorder {
	return _m.recorder
}

// isNexthopSpec_IfOrEp mocks base method
func (_m *MockisNexthopSpec_IfOrEp) isNexthopSpec_IfOrEp() {
	_m.ctrl.Call(_m, "isNexthopSpec_IfOrEp")
}

// isNexthopSpec_IfOrEp indicates an expected call of isNexthopSpec_IfOrEp
func (_mr *MockisNexthopSpec_IfOrEpMockRecorder) isNexthopSpec_IfOrEp() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isNexthopSpec_IfOrEp", reflect.TypeOf((*MockisNexthopSpec_IfOrEp)(nil).isNexthopSpec_IfOrEp))
}

// MarshalTo mocks base method
func (_m *MockisNexthopSpec_IfOrEp) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisNexthopSpec_IfOrEpMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisNexthopSpec_IfOrEp)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisNexthopSpec_IfOrEp) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisNexthopSpec_IfOrEpMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisNexthopSpec_IfOrEp)(nil).Size))
}

// MockNetworkClient is a mock of NetworkClient interface
type MockNetworkClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkClientMockRecorder
}

// MockNetworkClientMockRecorder is the mock recorder for MockNetworkClient
type MockNetworkClientMockRecorder struct {
	mock *MockNetworkClient
}

// NewMockNetworkClient creates a new mock instance
func NewMockNetworkClient(ctrl *gomock.Controller) *MockNetworkClient {
	mock := &MockNetworkClient{ctrl: ctrl}
	mock.recorder = &MockNetworkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNetworkClient) EXPECT() *MockNetworkClientMockRecorder {
	return _m.recorder
}

// NetworkCreate mocks base method
func (_m *MockNetworkClient) NetworkCreate(ctx context.Context, in *NetworkRequestMsg, opts ...grpc.CallOption) (*NetworkResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NetworkCreate", _s...)
	ret0, _ := ret[0].(*NetworkResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkCreate indicates an expected call of NetworkCreate
func (_mr *MockNetworkClientMockRecorder) NetworkCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkCreate", reflect.TypeOf((*MockNetworkClient)(nil).NetworkCreate), _s...)
}

// NetworkUpdate mocks base method
func (_m *MockNetworkClient) NetworkUpdate(ctx context.Context, in *NetworkRequestMsg, opts ...grpc.CallOption) (*NetworkResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NetworkUpdate", _s...)
	ret0, _ := ret[0].(*NetworkResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkUpdate indicates an expected call of NetworkUpdate
func (_mr *MockNetworkClientMockRecorder) NetworkUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkUpdate", reflect.TypeOf((*MockNetworkClient)(nil).NetworkUpdate), _s...)
}

// NetworkDelete mocks base method
func (_m *MockNetworkClient) NetworkDelete(ctx context.Context, in *NetworkDeleteRequestMsg, opts ...grpc.CallOption) (*NetworkDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NetworkDelete", _s...)
	ret0, _ := ret[0].(*NetworkDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkDelete indicates an expected call of NetworkDelete
func (_mr *MockNetworkClientMockRecorder) NetworkDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkDelete", reflect.TypeOf((*MockNetworkClient)(nil).NetworkDelete), _s...)
}

// NetworkGet mocks base method
func (_m *MockNetworkClient) NetworkGet(ctx context.Context, in *NetworkGetRequestMsg, opts ...grpc.CallOption) (*NetworkGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NetworkGet", _s...)
	ret0, _ := ret[0].(*NetworkGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkGet indicates an expected call of NetworkGet
func (_mr *MockNetworkClientMockRecorder) NetworkGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkGet", reflect.TypeOf((*MockNetworkClient)(nil).NetworkGet), _s...)
}

// MockNetworkServer is a mock of NetworkServer interface
type MockNetworkServer struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServerMockRecorder
}

// MockNetworkServerMockRecorder is the mock recorder for MockNetworkServer
type MockNetworkServerMockRecorder struct {
	mock *MockNetworkServer
}

// NewMockNetworkServer creates a new mock instance
func NewMockNetworkServer(ctrl *gomock.Controller) *MockNetworkServer {
	mock := &MockNetworkServer{ctrl: ctrl}
	mock.recorder = &MockNetworkServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNetworkServer) EXPECT() *MockNetworkServerMockRecorder {
	return _m.recorder
}

// NetworkCreate mocks base method
func (_m *MockNetworkServer) NetworkCreate(_param0 context.Context, _param1 *NetworkRequestMsg) (*NetworkResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NetworkCreate", _param0, _param1)
	ret0, _ := ret[0].(*NetworkResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkCreate indicates an expected call of NetworkCreate
func (_mr *MockNetworkServerMockRecorder) NetworkCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkCreate", reflect.TypeOf((*MockNetworkServer)(nil).NetworkCreate), arg0, arg1)
}

// NetworkUpdate mocks base method
func (_m *MockNetworkServer) NetworkUpdate(_param0 context.Context, _param1 *NetworkRequestMsg) (*NetworkResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NetworkUpdate", _param0, _param1)
	ret0, _ := ret[0].(*NetworkResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkUpdate indicates an expected call of NetworkUpdate
func (_mr *MockNetworkServerMockRecorder) NetworkUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkUpdate", reflect.TypeOf((*MockNetworkServer)(nil).NetworkUpdate), arg0, arg1)
}

// NetworkDelete mocks base method
func (_m *MockNetworkServer) NetworkDelete(_param0 context.Context, _param1 *NetworkDeleteRequestMsg) (*NetworkDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NetworkDelete", _param0, _param1)
	ret0, _ := ret[0].(*NetworkDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkDelete indicates an expected call of NetworkDelete
func (_mr *MockNetworkServerMockRecorder) NetworkDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkDelete", reflect.TypeOf((*MockNetworkServer)(nil).NetworkDelete), arg0, arg1)
}

// NetworkGet mocks base method
func (_m *MockNetworkServer) NetworkGet(_param0 context.Context, _param1 *NetworkGetRequestMsg) (*NetworkGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "NetworkGet", _param0, _param1)
	ret0, _ := ret[0].(*NetworkGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkGet indicates an expected call of NetworkGet
func (_mr *MockNetworkServerMockRecorder) NetworkGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "NetworkGet", reflect.TypeOf((*MockNetworkServer)(nil).NetworkGet), arg0, arg1)
}
