// Code generated by MockGen. DO NOT EDIT.
// Source: interface.pb.go

package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisIfEnicInfo_EnicTypeInfo is a mock of isIfEnicInfo_EnicTypeInfo interface
type MockisIfEnicInfo_EnicTypeInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisIfEnicInfo_EnicTypeInfoMockRecorder
}

// MockisIfEnicInfo_EnicTypeInfoMockRecorder is the mock recorder for MockisIfEnicInfo_EnicTypeInfo
type MockisIfEnicInfo_EnicTypeInfoMockRecorder struct {
	mock *MockisIfEnicInfo_EnicTypeInfo
}

// NewMockisIfEnicInfo_EnicTypeInfo creates a new mock instance
func NewMockisIfEnicInfo_EnicTypeInfo(ctrl *gomock.Controller) *MockisIfEnicInfo_EnicTypeInfo {
	mock := &MockisIfEnicInfo_EnicTypeInfo{ctrl: ctrl}
	mock.recorder = &MockisIfEnicInfo_EnicTypeInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisIfEnicInfo_EnicTypeInfo) EXPECT() *MockisIfEnicInfo_EnicTypeInfoMockRecorder {
	return _m.recorder
}

// isIfEnicInfo_EnicTypeInfo mocks base method
func (_m *MockisIfEnicInfo_EnicTypeInfo) isIfEnicInfo_EnicTypeInfo() {
	_m.ctrl.Call(_m, "isIfEnicInfo_EnicTypeInfo")
}

// isIfEnicInfo_EnicTypeInfo indicates an expected call of isIfEnicInfo_EnicTypeInfo
func (_mr *MockisIfEnicInfo_EnicTypeInfoMockRecorder) isIfEnicInfo_EnicTypeInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isIfEnicInfo_EnicTypeInfo", reflect.TypeOf((*MockisIfEnicInfo_EnicTypeInfo)(nil).isIfEnicInfo_EnicTypeInfo))
}

// MarshalTo mocks base method
func (_m *MockisIfEnicInfo_EnicTypeInfo) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisIfEnicInfo_EnicTypeInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisIfEnicInfo_EnicTypeInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisIfEnicInfo_EnicTypeInfo) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisIfEnicInfo_EnicTypeInfoMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisIfEnicInfo_EnicTypeInfo)(nil).Size))
}

// MockisIfTunnelInfo_EncapInfo is a mock of isIfTunnelInfo_EncapInfo interface
type MockisIfTunnelInfo_EncapInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisIfTunnelInfo_EncapInfoMockRecorder
}

// MockisIfTunnelInfo_EncapInfoMockRecorder is the mock recorder for MockisIfTunnelInfo_EncapInfo
type MockisIfTunnelInfo_EncapInfoMockRecorder struct {
	mock *MockisIfTunnelInfo_EncapInfo
}

// NewMockisIfTunnelInfo_EncapInfo creates a new mock instance
func NewMockisIfTunnelInfo_EncapInfo(ctrl *gomock.Controller) *MockisIfTunnelInfo_EncapInfo {
	mock := &MockisIfTunnelInfo_EncapInfo{ctrl: ctrl}
	mock.recorder = &MockisIfTunnelInfo_EncapInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisIfTunnelInfo_EncapInfo) EXPECT() *MockisIfTunnelInfo_EncapInfoMockRecorder {
	return _m.recorder
}

// isIfTunnelInfo_EncapInfo mocks base method
func (_m *MockisIfTunnelInfo_EncapInfo) isIfTunnelInfo_EncapInfo() {
	_m.ctrl.Call(_m, "isIfTunnelInfo_EncapInfo")
}

// isIfTunnelInfo_EncapInfo indicates an expected call of isIfTunnelInfo_EncapInfo
func (_mr *MockisIfTunnelInfo_EncapInfoMockRecorder) isIfTunnelInfo_EncapInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isIfTunnelInfo_EncapInfo", reflect.TypeOf((*MockisIfTunnelInfo_EncapInfo)(nil).isIfTunnelInfo_EncapInfo))
}

// MarshalTo mocks base method
func (_m *MockisIfTunnelInfo_EncapInfo) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisIfTunnelInfo_EncapInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisIfTunnelInfo_EncapInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisIfTunnelInfo_EncapInfo) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisIfTunnelInfo_EncapInfoMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisIfTunnelInfo_EncapInfo)(nil).Size))
}

// MockisInterfaceSpec_IfInfo is a mock of isInterfaceSpec_IfInfo interface
type MockisInterfaceSpec_IfInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisInterfaceSpec_IfInfoMockRecorder
}

// MockisInterfaceSpec_IfInfoMockRecorder is the mock recorder for MockisInterfaceSpec_IfInfo
type MockisInterfaceSpec_IfInfoMockRecorder struct {
	mock *MockisInterfaceSpec_IfInfo
}

// NewMockisInterfaceSpec_IfInfo creates a new mock instance
func NewMockisInterfaceSpec_IfInfo(ctrl *gomock.Controller) *MockisInterfaceSpec_IfInfo {
	mock := &MockisInterfaceSpec_IfInfo{ctrl: ctrl}
	mock.recorder = &MockisInterfaceSpec_IfInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisInterfaceSpec_IfInfo) EXPECT() *MockisInterfaceSpec_IfInfoMockRecorder {
	return _m.recorder
}

// isInterfaceSpec_IfInfo mocks base method
func (_m *MockisInterfaceSpec_IfInfo) isInterfaceSpec_IfInfo() {
	_m.ctrl.Call(_m, "isInterfaceSpec_IfInfo")
}

// isInterfaceSpec_IfInfo indicates an expected call of isInterfaceSpec_IfInfo
func (_mr *MockisInterfaceSpec_IfInfoMockRecorder) isInterfaceSpec_IfInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isInterfaceSpec_IfInfo", reflect.TypeOf((*MockisInterfaceSpec_IfInfo)(nil).isInterfaceSpec_IfInfo))
}

// MarshalTo mocks base method
func (_m *MockisInterfaceSpec_IfInfo) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisInterfaceSpec_IfInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisInterfaceSpec_IfInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisInterfaceSpec_IfInfo) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisInterfaceSpec_IfInfoMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisInterfaceSpec_IfInfo)(nil).Size))
}

// MockisInterfaceStatus_IfResponseInfo is a mock of isInterfaceStatus_IfResponseInfo interface
type MockisInterfaceStatus_IfResponseInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisInterfaceStatus_IfResponseInfoMockRecorder
}

// MockisInterfaceStatus_IfResponseInfoMockRecorder is the mock recorder for MockisInterfaceStatus_IfResponseInfo
type MockisInterfaceStatus_IfResponseInfoMockRecorder struct {
	mock *MockisInterfaceStatus_IfResponseInfo
}

// NewMockisInterfaceStatus_IfResponseInfo creates a new mock instance
func NewMockisInterfaceStatus_IfResponseInfo(ctrl *gomock.Controller) *MockisInterfaceStatus_IfResponseInfo {
	mock := &MockisInterfaceStatus_IfResponseInfo{ctrl: ctrl}
	mock.recorder = &MockisInterfaceStatus_IfResponseInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisInterfaceStatus_IfResponseInfo) EXPECT() *MockisInterfaceStatus_IfResponseInfoMockRecorder {
	return _m.recorder
}

// isInterfaceStatus_IfResponseInfo mocks base method
func (_m *MockisInterfaceStatus_IfResponseInfo) isInterfaceStatus_IfResponseInfo() {
	_m.ctrl.Call(_m, "isInterfaceStatus_IfResponseInfo")
}

// isInterfaceStatus_IfResponseInfo indicates an expected call of isInterfaceStatus_IfResponseInfo
func (_mr *MockisInterfaceStatus_IfResponseInfoMockRecorder) isInterfaceStatus_IfResponseInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "isInterfaceStatus_IfResponseInfo", reflect.TypeOf((*MockisInterfaceStatus_IfResponseInfo)(nil).isInterfaceStatus_IfResponseInfo))
}

// MarshalTo mocks base method
func (_m *MockisInterfaceStatus_IfResponseInfo) MarshalTo(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "MarshalTo", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (_mr *MockisInterfaceStatus_IfResponseInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MarshalTo", reflect.TypeOf((*MockisInterfaceStatus_IfResponseInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (_m *MockisInterfaceStatus_IfResponseInfo) Size() int {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (_mr *MockisInterfaceStatus_IfResponseInfoMockRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Size", reflect.TypeOf((*MockisInterfaceStatus_IfResponseInfo)(nil).Size))
}

// MockInterfaceClient is a mock of InterfaceClient interface
type MockInterfaceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceClientMockRecorder
}

// MockInterfaceClientMockRecorder is the mock recorder for MockInterfaceClient
type MockInterfaceClientMockRecorder struct {
	mock *MockInterfaceClient
}

// NewMockInterfaceClient creates a new mock instance
func NewMockInterfaceClient(ctrl *gomock.Controller) *MockInterfaceClient {
	mock := &MockInterfaceClient{ctrl: ctrl}
	mock.recorder = &MockInterfaceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockInterfaceClient) EXPECT() *MockInterfaceClientMockRecorder {
	return _m.recorder
}

// LifCreate mocks base method
func (_m *MockInterfaceClient) LifCreate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LifCreate", _s...)
	ret0, _ := ret[0].(*LifResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifCreate indicates an expected call of LifCreate
func (_mr *MockInterfaceClientMockRecorder) LifCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifCreate", reflect.TypeOf((*MockInterfaceClient)(nil).LifCreate), _s...)
}

// LifUpdate mocks base method
func (_m *MockInterfaceClient) LifUpdate(ctx context.Context, in *LifRequestMsg, opts ...grpc.CallOption) (*LifResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LifUpdate", _s...)
	ret0, _ := ret[0].(*LifResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifUpdate indicates an expected call of LifUpdate
func (_mr *MockInterfaceClientMockRecorder) LifUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifUpdate", reflect.TypeOf((*MockInterfaceClient)(nil).LifUpdate), _s...)
}

// LifDelete mocks base method
func (_m *MockInterfaceClient) LifDelete(ctx context.Context, in *LifDeleteRequestMsg, opts ...grpc.CallOption) (*LifDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LifDelete", _s...)
	ret0, _ := ret[0].(*LifDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifDelete indicates an expected call of LifDelete
func (_mr *MockInterfaceClientMockRecorder) LifDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifDelete", reflect.TypeOf((*MockInterfaceClient)(nil).LifDelete), _s...)
}

// LifGet mocks base method
func (_m *MockInterfaceClient) LifGet(ctx context.Context, in *LifGetRequestMsg, opts ...grpc.CallOption) (*LifGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LifGet", _s...)
	ret0, _ := ret[0].(*LifGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifGet indicates an expected call of LifGet
func (_mr *MockInterfaceClientMockRecorder) LifGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifGet", reflect.TypeOf((*MockInterfaceClient)(nil).LifGet), _s...)
}

// LifGetQState mocks base method
func (_m *MockInterfaceClient) LifGetQState(ctx context.Context, in *GetQStateRequestMsg, opts ...grpc.CallOption) (*GetQStateResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LifGetQState", _s...)
	ret0, _ := ret[0].(*GetQStateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifGetQState indicates an expected call of LifGetQState
func (_mr *MockInterfaceClientMockRecorder) LifGetQState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifGetQState", reflect.TypeOf((*MockInterfaceClient)(nil).LifGetQState), _s...)
}

// LifSetQState mocks base method
func (_m *MockInterfaceClient) LifSetQState(ctx context.Context, in *SetQStateRequestMsg, opts ...grpc.CallOption) (*SetQStateResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "LifSetQState", _s...)
	ret0, _ := ret[0].(*SetQStateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifSetQState indicates an expected call of LifSetQState
func (_mr *MockInterfaceClientMockRecorder) LifSetQState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifSetQState", reflect.TypeOf((*MockInterfaceClient)(nil).LifSetQState), _s...)
}

// InterfaceCreate mocks base method
func (_m *MockInterfaceClient) InterfaceCreate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InterfaceCreate", _s...)
	ret0, _ := ret[0].(*InterfaceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceCreate indicates an expected call of InterfaceCreate
func (_mr *MockInterfaceClientMockRecorder) InterfaceCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InterfaceCreate", reflect.TypeOf((*MockInterfaceClient)(nil).InterfaceCreate), _s...)
}

// InterfaceUpdate mocks base method
func (_m *MockInterfaceClient) InterfaceUpdate(ctx context.Context, in *InterfaceRequestMsg, opts ...grpc.CallOption) (*InterfaceResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InterfaceUpdate", _s...)
	ret0, _ := ret[0].(*InterfaceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceUpdate indicates an expected call of InterfaceUpdate
func (_mr *MockInterfaceClientMockRecorder) InterfaceUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InterfaceUpdate", reflect.TypeOf((*MockInterfaceClient)(nil).InterfaceUpdate), _s...)
}

// InterfaceDelete mocks base method
func (_m *MockInterfaceClient) InterfaceDelete(ctx context.Context, in *InterfaceDeleteRequestMsg, opts ...grpc.CallOption) (*InterfaceDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InterfaceDelete", _s...)
	ret0, _ := ret[0].(*InterfaceDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceDelete indicates an expected call of InterfaceDelete
func (_mr *MockInterfaceClientMockRecorder) InterfaceDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InterfaceDelete", reflect.TypeOf((*MockInterfaceClient)(nil).InterfaceDelete), _s...)
}

// InterfaceGet mocks base method
func (_m *MockInterfaceClient) InterfaceGet(ctx context.Context, in *InterfaceGetRequestMsg, opts ...grpc.CallOption) (*InterfaceGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "InterfaceGet", _s...)
	ret0, _ := ret[0].(*InterfaceGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceGet indicates an expected call of InterfaceGet
func (_mr *MockInterfaceClientMockRecorder) InterfaceGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InterfaceGet", reflect.TypeOf((*MockInterfaceClient)(nil).InterfaceGet), _s...)
}

// AddL2SegmentOnUplink mocks base method
func (_m *MockInterfaceClient) AddL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddL2SegmentOnUplink", _s...)
	ret0, _ := ret[0].(*InterfaceL2SegmentResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddL2SegmentOnUplink indicates an expected call of AddL2SegmentOnUplink
func (_mr *MockInterfaceClientMockRecorder) AddL2SegmentOnUplink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddL2SegmentOnUplink", reflect.TypeOf((*MockInterfaceClient)(nil).AddL2SegmentOnUplink), _s...)
}

// DelL2SegmentOnUplink mocks base method
func (_m *MockInterfaceClient) DelL2SegmentOnUplink(ctx context.Context, in *InterfaceL2SegmentRequestMsg, opts ...grpc.CallOption) (*InterfaceL2SegmentResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DelL2SegmentOnUplink", _s...)
	ret0, _ := ret[0].(*InterfaceL2SegmentResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelL2SegmentOnUplink indicates an expected call of DelL2SegmentOnUplink
func (_mr *MockInterfaceClientMockRecorder) DelL2SegmentOnUplink(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DelL2SegmentOnUplink", reflect.TypeOf((*MockInterfaceClient)(nil).DelL2SegmentOnUplink), _s...)
}

// MockInterfaceServer is a mock of InterfaceServer interface
type MockInterfaceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceServerMockRecorder
}

// MockInterfaceServerMockRecorder is the mock recorder for MockInterfaceServer
type MockInterfaceServerMockRecorder struct {
	mock *MockInterfaceServer
}

// NewMockInterfaceServer creates a new mock instance
func NewMockInterfaceServer(ctrl *gomock.Controller) *MockInterfaceServer {
	mock := &MockInterfaceServer{ctrl: ctrl}
	mock.recorder = &MockInterfaceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockInterfaceServer) EXPECT() *MockInterfaceServerMockRecorder {
	return _m.recorder
}

// LifCreate mocks base method
func (_m *MockInterfaceServer) LifCreate(_param0 context.Context, _param1 *LifRequestMsg) (*LifResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "LifCreate", _param0, _param1)
	ret0, _ := ret[0].(*LifResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifCreate indicates an expected call of LifCreate
func (_mr *MockInterfaceServerMockRecorder) LifCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifCreate", reflect.TypeOf((*MockInterfaceServer)(nil).LifCreate), arg0, arg1)
}

// LifUpdate mocks base method
func (_m *MockInterfaceServer) LifUpdate(_param0 context.Context, _param1 *LifRequestMsg) (*LifResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "LifUpdate", _param0, _param1)
	ret0, _ := ret[0].(*LifResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifUpdate indicates an expected call of LifUpdate
func (_mr *MockInterfaceServerMockRecorder) LifUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifUpdate", reflect.TypeOf((*MockInterfaceServer)(nil).LifUpdate), arg0, arg1)
}

// LifDelete mocks base method
func (_m *MockInterfaceServer) LifDelete(_param0 context.Context, _param1 *LifDeleteRequestMsg) (*LifDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "LifDelete", _param0, _param1)
	ret0, _ := ret[0].(*LifDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifDelete indicates an expected call of LifDelete
func (_mr *MockInterfaceServerMockRecorder) LifDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifDelete", reflect.TypeOf((*MockInterfaceServer)(nil).LifDelete), arg0, arg1)
}

// LifGet mocks base method
func (_m *MockInterfaceServer) LifGet(_param0 context.Context, _param1 *LifGetRequestMsg) (*LifGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "LifGet", _param0, _param1)
	ret0, _ := ret[0].(*LifGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifGet indicates an expected call of LifGet
func (_mr *MockInterfaceServerMockRecorder) LifGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifGet", reflect.TypeOf((*MockInterfaceServer)(nil).LifGet), arg0, arg1)
}

// LifGetQState mocks base method
func (_m *MockInterfaceServer) LifGetQState(_param0 context.Context, _param1 *GetQStateRequestMsg) (*GetQStateResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "LifGetQState", _param0, _param1)
	ret0, _ := ret[0].(*GetQStateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifGetQState indicates an expected call of LifGetQState
func (_mr *MockInterfaceServerMockRecorder) LifGetQState(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifGetQState", reflect.TypeOf((*MockInterfaceServer)(nil).LifGetQState), arg0, arg1)
}

// LifSetQState mocks base method
func (_m *MockInterfaceServer) LifSetQState(_param0 context.Context, _param1 *SetQStateRequestMsg) (*SetQStateResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "LifSetQState", _param0, _param1)
	ret0, _ := ret[0].(*SetQStateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifSetQState indicates an expected call of LifSetQState
func (_mr *MockInterfaceServerMockRecorder) LifSetQState(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LifSetQState", reflect.TypeOf((*MockInterfaceServer)(nil).LifSetQState), arg0, arg1)
}

// InterfaceCreate mocks base method
func (_m *MockInterfaceServer) InterfaceCreate(_param0 context.Context, _param1 *InterfaceRequestMsg) (*InterfaceResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "InterfaceCreate", _param0, _param1)
	ret0, _ := ret[0].(*InterfaceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceCreate indicates an expected call of InterfaceCreate
func (_mr *MockInterfaceServerMockRecorder) InterfaceCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InterfaceCreate", reflect.TypeOf((*MockInterfaceServer)(nil).InterfaceCreate), arg0, arg1)
}

// InterfaceUpdate mocks base method
func (_m *MockInterfaceServer) InterfaceUpdate(_param0 context.Context, _param1 *InterfaceRequestMsg) (*InterfaceResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "InterfaceUpdate", _param0, _param1)
	ret0, _ := ret[0].(*InterfaceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceUpdate indicates an expected call of InterfaceUpdate
func (_mr *MockInterfaceServerMockRecorder) InterfaceUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InterfaceUpdate", reflect.TypeOf((*MockInterfaceServer)(nil).InterfaceUpdate), arg0, arg1)
}

// InterfaceDelete mocks base method
func (_m *MockInterfaceServer) InterfaceDelete(_param0 context.Context, _param1 *InterfaceDeleteRequestMsg) (*InterfaceDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "InterfaceDelete", _param0, _param1)
	ret0, _ := ret[0].(*InterfaceDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceDelete indicates an expected call of InterfaceDelete
func (_mr *MockInterfaceServerMockRecorder) InterfaceDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InterfaceDelete", reflect.TypeOf((*MockInterfaceServer)(nil).InterfaceDelete), arg0, arg1)
}

// InterfaceGet mocks base method
func (_m *MockInterfaceServer) InterfaceGet(_param0 context.Context, _param1 *InterfaceGetRequestMsg) (*InterfaceGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "InterfaceGet", _param0, _param1)
	ret0, _ := ret[0].(*InterfaceGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InterfaceGet indicates an expected call of InterfaceGet
func (_mr *MockInterfaceServerMockRecorder) InterfaceGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "InterfaceGet", reflect.TypeOf((*MockInterfaceServer)(nil).InterfaceGet), arg0, arg1)
}

// AddL2SegmentOnUplink mocks base method
func (_m *MockInterfaceServer) AddL2SegmentOnUplink(_param0 context.Context, _param1 *InterfaceL2SegmentRequestMsg) (*InterfaceL2SegmentResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "AddL2SegmentOnUplink", _param0, _param1)
	ret0, _ := ret[0].(*InterfaceL2SegmentResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddL2SegmentOnUplink indicates an expected call of AddL2SegmentOnUplink
func (_mr *MockInterfaceServerMockRecorder) AddL2SegmentOnUplink(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddL2SegmentOnUplink", reflect.TypeOf((*MockInterfaceServer)(nil).AddL2SegmentOnUplink), arg0, arg1)
}

// DelL2SegmentOnUplink mocks base method
func (_m *MockInterfaceServer) DelL2SegmentOnUplink(_param0 context.Context, _param1 *InterfaceL2SegmentRequestMsg) (*InterfaceL2SegmentResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "DelL2SegmentOnUplink", _param0, _param1)
	ret0, _ := ret[0].(*InterfaceL2SegmentResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelL2SegmentOnUplink indicates an expected call of DelL2SegmentOnUplink
func (_mr *MockInterfaceServerMockRecorder) DelL2SegmentOnUplink(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DelL2SegmentOnUplink", reflect.TypeOf((*MockInterfaceServer)(nil).DelL2SegmentOnUplink), arg0, arg1)
}
