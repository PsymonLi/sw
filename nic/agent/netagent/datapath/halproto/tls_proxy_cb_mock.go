// Code generated by MockGen. DO NOT EDIT.
// Source: tls_proxy_cb.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisTlsCbKeyHandle_KeyOrHandle is a mock of isTlsCbKeyHandle_KeyOrHandle interface
type MockisTlsCbKeyHandle_KeyOrHandle struct {
	ctrl     *gomock.Controller
	recorder *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder
}

// MockisTlsCbKeyHandle_KeyOrHandleMockRecorder is the mock recorder for MockisTlsCbKeyHandle_KeyOrHandle
type MockisTlsCbKeyHandle_KeyOrHandleMockRecorder struct {
	mock *MockisTlsCbKeyHandle_KeyOrHandle
}

// NewMockisTlsCbKeyHandle_KeyOrHandle creates a new mock instance
func NewMockisTlsCbKeyHandle_KeyOrHandle(ctrl *gomock.Controller) *MockisTlsCbKeyHandle_KeyOrHandle {
	mock := &MockisTlsCbKeyHandle_KeyOrHandle{ctrl: ctrl}
	mock.recorder = &MockisTlsCbKeyHandle_KeyOrHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisTlsCbKeyHandle_KeyOrHandle) EXPECT() *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder {
	return m.recorder
}

// isTlsCbKeyHandle_KeyOrHandle mocks base method
func (m *MockisTlsCbKeyHandle_KeyOrHandle) isTlsCbKeyHandle_KeyOrHandle() {
	m.ctrl.Call(m, "isTlsCbKeyHandle_KeyOrHandle")
}

// isTlsCbKeyHandle_KeyOrHandle indicates an expected call of isTlsCbKeyHandle_KeyOrHandle
func (mr *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder) isTlsCbKeyHandle_KeyOrHandle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isTlsCbKeyHandle_KeyOrHandle", reflect.TypeOf((*MockisTlsCbKeyHandle_KeyOrHandle)(nil).isTlsCbKeyHandle_KeyOrHandle))
}

// MarshalTo mocks base method
func (m *MockisTlsCbKeyHandle_KeyOrHandle) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisTlsCbKeyHandle_KeyOrHandle)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisTlsCbKeyHandle_KeyOrHandle) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisTlsCbKeyHandle_KeyOrHandleMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisTlsCbKeyHandle_KeyOrHandle)(nil).Size))
}

// MockTlsCbClient is a mock of TlsCbClient interface
type MockTlsCbClient struct {
	ctrl     *gomock.Controller
	recorder *MockTlsCbClientMockRecorder
}

// MockTlsCbClientMockRecorder is the mock recorder for MockTlsCbClient
type MockTlsCbClientMockRecorder struct {
	mock *MockTlsCbClient
}

// NewMockTlsCbClient creates a new mock instance
func NewMockTlsCbClient(ctrl *gomock.Controller) *MockTlsCbClient {
	mock := &MockTlsCbClient{ctrl: ctrl}
	mock.recorder = &MockTlsCbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTlsCbClient) EXPECT() *MockTlsCbClientMockRecorder {
	return m.recorder
}

// TlsCbCreate mocks base method
func (m *MockTlsCbClient) TlsCbCreate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TlsCbCreate", varargs...)
	ret0, _ := ret[0].(*TlsCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbCreate indicates an expected call of TlsCbCreate
func (mr *MockTlsCbClientMockRecorder) TlsCbCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbCreate", reflect.TypeOf((*MockTlsCbClient)(nil).TlsCbCreate), varargs...)
}

// TlsCbUpdate mocks base method
func (m *MockTlsCbClient) TlsCbUpdate(ctx context.Context, in *TlsCbRequestMsg, opts ...grpc.CallOption) (*TlsCbResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TlsCbUpdate", varargs...)
	ret0, _ := ret[0].(*TlsCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbUpdate indicates an expected call of TlsCbUpdate
func (mr *MockTlsCbClientMockRecorder) TlsCbUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbUpdate", reflect.TypeOf((*MockTlsCbClient)(nil).TlsCbUpdate), varargs...)
}

// TlsCbDelete mocks base method
func (m *MockTlsCbClient) TlsCbDelete(ctx context.Context, in *TlsCbDeleteRequestMsg, opts ...grpc.CallOption) (*TlsCbDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TlsCbDelete", varargs...)
	ret0, _ := ret[0].(*TlsCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbDelete indicates an expected call of TlsCbDelete
func (mr *MockTlsCbClientMockRecorder) TlsCbDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbDelete", reflect.TypeOf((*MockTlsCbClient)(nil).TlsCbDelete), varargs...)
}

// TlsCbGet mocks base method
func (m *MockTlsCbClient) TlsCbGet(ctx context.Context, in *TlsCbGetRequestMsg, opts ...grpc.CallOption) (*TlsCbGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TlsCbGet", varargs...)
	ret0, _ := ret[0].(*TlsCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbGet indicates an expected call of TlsCbGet
func (mr *MockTlsCbClientMockRecorder) TlsCbGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbGet", reflect.TypeOf((*MockTlsCbClient)(nil).TlsCbGet), varargs...)
}

// MockTlsCbServer is a mock of TlsCbServer interface
type MockTlsCbServer struct {
	ctrl     *gomock.Controller
	recorder *MockTlsCbServerMockRecorder
}

// MockTlsCbServerMockRecorder is the mock recorder for MockTlsCbServer
type MockTlsCbServerMockRecorder struct {
	mock *MockTlsCbServer
}

// NewMockTlsCbServer creates a new mock instance
func NewMockTlsCbServer(ctrl *gomock.Controller) *MockTlsCbServer {
	mock := &MockTlsCbServer{ctrl: ctrl}
	mock.recorder = &MockTlsCbServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTlsCbServer) EXPECT() *MockTlsCbServerMockRecorder {
	return m.recorder
}

// TlsCbCreate mocks base method
func (m *MockTlsCbServer) TlsCbCreate(arg0 context.Context, arg1 *TlsCbRequestMsg) (*TlsCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "TlsCbCreate", arg0, arg1)
	ret0, _ := ret[0].(*TlsCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbCreate indicates an expected call of TlsCbCreate
func (mr *MockTlsCbServerMockRecorder) TlsCbCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbCreate", reflect.TypeOf((*MockTlsCbServer)(nil).TlsCbCreate), arg0, arg1)
}

// TlsCbUpdate mocks base method
func (m *MockTlsCbServer) TlsCbUpdate(arg0 context.Context, arg1 *TlsCbRequestMsg) (*TlsCbResponseMsg, error) {
	ret := m.ctrl.Call(m, "TlsCbUpdate", arg0, arg1)
	ret0, _ := ret[0].(*TlsCbResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbUpdate indicates an expected call of TlsCbUpdate
func (mr *MockTlsCbServerMockRecorder) TlsCbUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbUpdate", reflect.TypeOf((*MockTlsCbServer)(nil).TlsCbUpdate), arg0, arg1)
}

// TlsCbDelete mocks base method
func (m *MockTlsCbServer) TlsCbDelete(arg0 context.Context, arg1 *TlsCbDeleteRequestMsg) (*TlsCbDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "TlsCbDelete", arg0, arg1)
	ret0, _ := ret[0].(*TlsCbDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbDelete indicates an expected call of TlsCbDelete
func (mr *MockTlsCbServerMockRecorder) TlsCbDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbDelete", reflect.TypeOf((*MockTlsCbServer)(nil).TlsCbDelete), arg0, arg1)
}

// TlsCbGet mocks base method
func (m *MockTlsCbServer) TlsCbGet(arg0 context.Context, arg1 *TlsCbGetRequestMsg) (*TlsCbGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "TlsCbGet", arg0, arg1)
	ret0, _ := ret[0].(*TlsCbGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsCbGet indicates an expected call of TlsCbGet
func (mr *MockTlsCbServerMockRecorder) TlsCbGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsCbGet", reflect.TypeOf((*MockTlsCbServer)(nil).TlsCbGet), arg0, arg1)
}
