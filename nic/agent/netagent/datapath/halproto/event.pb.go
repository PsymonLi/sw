// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// events that HAL generates and app(s) can listen to
type EventId int32

const (
	EventId_EVENT_ID_NONE     EventId = 0
	EventId_EVENT_ID_ENDPOINT EventId = 1
	EventId_EVENT_ID_PORT     EventId = 2
)

var EventId_name = map[int32]string{
	0: "EVENT_ID_NONE",
	1: "EVENT_ID_ENDPOINT",
	2: "EVENT_ID_PORT",
}
var EventId_value = map[string]int32{
	"EVENT_ID_NONE":     0,
	"EVENT_ID_ENDPOINT": 1,
	"EVENT_ID_PORT":     2,
}

func (x EventId) String() string {
	return proto.EnumName(EventId_name, int32(x))
}
func (EventId) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvent, []int{0} }

type EventOp int32

const (
	EventOp_EVENT_OP_NONE        EventOp = 0
	EventOp_EVENT_OP_SUBSCRIBE   EventOp = 1
	EventOp_EVENT_OP_UNSUBSCRIBE EventOp = 2
)

var EventOp_name = map[int32]string{
	0: "EVENT_OP_NONE",
	1: "EVENT_OP_SUBSCRIBE",
	2: "EVENT_OP_UNSUBSCRIBE",
}
var EventOp_value = map[string]int32{
	"EVENT_OP_NONE":        0,
	"EVENT_OP_SUBSCRIBE":   1,
	"EVENT_OP_UNSUBSCRIBE": 2,
}

func (x EventOp) String() string {
	return proto.EnumName(EventOp_name, int32(x))
}
func (EventOp) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvent, []int{1} }

// EventSpec captures the event of interest to the app
type EventRequest struct {
	EventId        EventId `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3,enum=event.EventId" json:"event_id,omitempty"`
	EventOperation EventOp `protobuf:"varint,2,opt,name=event_operation,json=eventOperation,proto3,enum=event.EventOp" json:"event_operation,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{0} }

func (m *EventRequest) GetEventId() EventId {
	if m != nil {
		return m.EventId
	}
	return EventId_EVENT_ID_NONE
}

func (m *EventRequest) GetEventOperation() EventOp {
	if m != nil {
		return m.EventOperation
	}
	return EventOp_EVENT_OP_NONE
}

type EndpointEvent struct {
	L2SegmentHandle uint64 `protobuf:"fixed64,1,opt,name=l2_segment_handle,json=l2SegmentHandle,proto3" json:"l2_segment_handle,omitempty"`
	MacAddress      uint64 `protobuf:"varint,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (m *EndpointEvent) Reset()                    { *m = EndpointEvent{} }
func (m *EndpointEvent) String() string            { return proto.CompactTextString(m) }
func (*EndpointEvent) ProtoMessage()               {}
func (*EndpointEvent) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{1} }

func (m *EndpointEvent) GetL2SegmentHandle() uint64 {
	if m != nil {
		return m.L2SegmentHandle
	}
	return 0
}

func (m *EndpointEvent) GetMacAddress() uint64 {
	if m != nil {
		return m.MacAddress
	}
	return 0
}

type EventResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	EventId   EventId   `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3,enum=event.EventId" json:"event_id,omitempty"`
	// Types that are valid to be assigned to EventInfo:
	//	*EventResponse_EpEvent
	EventInfo isEventResponse_EventInfo `protobuf_oneof:"event_info"`
}

func (m *EventResponse) Reset()                    { *m = EventResponse{} }
func (m *EventResponse) String() string            { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()               {}
func (*EventResponse) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{2} }

type isEventResponse_EventInfo interface {
	isEventResponse_EventInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EventResponse_EpEvent struct {
	EpEvent *EndpointEvent `protobuf:"bytes,3,opt,name=ep_event,json=epEvent,oneof"`
}

func (*EventResponse_EpEvent) isEventResponse_EventInfo() {}

func (m *EventResponse) GetEventInfo() isEventResponse_EventInfo {
	if m != nil {
		return m.EventInfo
	}
	return nil
}

func (m *EventResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *EventResponse) GetEventId() EventId {
	if m != nil {
		return m.EventId
	}
	return EventId_EVENT_ID_NONE
}

func (m *EventResponse) GetEpEvent() *EndpointEvent {
	if x, ok := m.GetEventInfo().(*EventResponse_EpEvent); ok {
		return x.EpEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EventResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EventResponse_OneofMarshaler, _EventResponse_OneofUnmarshaler, _EventResponse_OneofSizer, []interface{}{
		(*EventResponse_EpEvent)(nil),
	}
}

func _EventResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EventResponse)
	// event_info
	switch x := m.EventInfo.(type) {
	case *EventResponse_EpEvent:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EpEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EventResponse.EventInfo has unexpected type %T", x)
	}
	return nil
}

func _EventResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EventResponse)
	switch tag {
	case 3: // event_info.ep_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndpointEvent)
		err := b.DecodeMessage(msg)
		m.EventInfo = &EventResponse_EpEvent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EventResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EventResponse)
	// event_info
	switch x := m.EventInfo.(type) {
	case *EventResponse_EpEvent:
		s := proto.Size(x.EpEvent)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*EventRequest)(nil), "event.EventRequest")
	proto.RegisterType((*EndpointEvent)(nil), "event.EndpointEvent")
	proto.RegisterType((*EventResponse)(nil), "event.EventResponse")
	proto.RegisterEnum("event.EventId", EventId_name, EventId_value)
	proto.RegisterEnum("event.EventOp", EventOp_name, EventOp_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Event service

type EventClient interface {
	// TODO: rename this API - with bidir streaming, this name doesn't make sense
	EventListen(ctx context.Context, opts ...grpc.CallOption) (Event_EventListenClient, error)
}

type eventClient struct {
	cc *grpc.ClientConn
}

func NewEventClient(cc *grpc.ClientConn) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) EventListen(ctx context.Context, opts ...grpc.CallOption) (Event_EventListenClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Event_serviceDesc.Streams[0], c.cc, "/event.Event/EventListen", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventEventListenClient{stream}
	return x, nil
}

type Event_EventListenClient interface {
	Send(*EventRequest) error
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type eventEventListenClient struct {
	grpc.ClientStream
}

func (x *eventEventListenClient) Send(m *EventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventEventListenClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Event service

type EventServer interface {
	// TODO: rename this API - with bidir streaming, this name doesn't make sense
	EventListen(Event_EventListenServer) error
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_EventListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventServer).EventListen(&eventEventListenServer{stream})
}

type Event_EventListenServer interface {
	Send(*EventResponse) error
	Recv() (*EventRequest, error)
	grpc.ServerStream
}

type eventEventListenServer struct {
	grpc.ServerStream
}

func (x *eventEventListenServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventEventListenServer) Recv() (*EventRequest, error) {
	m := new(EventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.Event",
	HandlerType: (*EventServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventListen",
			Handler:       _Event_EventListen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "event.proto",
}

func (m *EventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventId))
	}
	if m.EventOperation != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventOperation))
	}
	return i, nil
}

func (m *EndpointEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L2SegmentHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.L2SegmentHandle))
		i += 8
	}
	if m.MacAddress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.MacAddress))
	}
	return i, nil
}

func (m *EventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.ApiStatus))
	}
	if m.EventId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EventId))
	}
	if m.EventInfo != nil {
		nn1, err := m.EventInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *EventResponse_EpEvent) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EpEvent != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.EpEvent.Size()))
		n2, err := m.EpEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventRequest) Size() (n int) {
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovEvent(uint64(m.EventId))
	}
	if m.EventOperation != 0 {
		n += 1 + sovEvent(uint64(m.EventOperation))
	}
	return n
}

func (m *EndpointEvent) Size() (n int) {
	var l int
	_ = l
	if m.L2SegmentHandle != 0 {
		n += 9
	}
	if m.MacAddress != 0 {
		n += 1 + sovEvent(uint64(m.MacAddress))
	}
	return n
}

func (m *EventResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovEvent(uint64(m.ApiStatus))
	}
	if m.EventId != 0 {
		n += 1 + sovEvent(uint64(m.EventId))
	}
	if m.EventInfo != nil {
		n += m.EventInfo.Size()
	}
	return n
}

func (m *EventResponse_EpEvent) Size() (n int) {
	var l int
	_ = l
	if m.EpEvent != nil {
		l = m.EpEvent.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (EventId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventOperation", wireType)
			}
			m.EventOperation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventOperation |= (EventOp(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentHandle", wireType)
			}
			m.L2SegmentHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.L2SegmentHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			m.MacAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacAddress |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (EventId(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndpointEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.EventInfo = &EventResponse_EpEvent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("event.proto", fileDescriptorEvent) }

var fileDescriptorEvent = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x1c, 0xc6, 0xe3, 0xc0, 0xd6, 0xf2, 0xcf, 0xda, 0xa5, 0xa6, 0xa0, 0xa8, 0x87, 0x30, 0xe5, 0x54,
	0x7a, 0x28, 0x10, 0x0e, 0xdc, 0x90, 0x16, 0x16, 0x58, 0x24, 0x94, 0x54, 0x4e, 0xc7, 0x01, 0x21,
	0x45, 0x66, 0x31, 0x2c, 0x52, 0xea, 0x98, 0xd8, 0x43, 0xe2, 0x4d, 0x78, 0x08, 0x1e, 0x84, 0x23,
	0x8f, 0x80, 0xca, 0x8b, 0xa0, 0xd9, 0x69, 0xd7, 0x0a, 0x89, 0x53, 0x3e, 0xff, 0xfc, 0xe5, 0xb3,
	0xfe, 0x9f, 0x0d, 0x0e, 0xfb, 0xca, 0xb8, 0x9a, 0x8b, 0xb6, 0x51, 0x0d, 0x3e, 0xd0, 0x8b, 0x89,
	0xa3, 0xbe, 0x09, 0x26, 0x0d, 0x0b, 0x5a, 0x38, 0x8a, 0x6f, 0x28, 0x61, 0x5f, 0xae, 0x99, 0x54,
	0xf8, 0x31, 0xf4, 0xb5, 0xab, 0xa8, 0x4a, 0x0f, 0x9d, 0xa0, 0xe9, 0x30, 0x1c, 0xce, 0x4d, 0x86,
	0xb6, 0x25, 0x25, 0xe9, 0x31, 0x23, 0xf0, 0x0b, 0x38, 0x36, 0xd6, 0x46, 0xb0, 0x96, 0xaa, 0xaa,
	0xe1, 0x9e, 0xfd, 0xef, 0x1f, 0x99, 0x20, 0x43, 0x66, 0x44, 0xe7, 0x0a, 0x3e, 0xc0, 0x20, 0xe6,
	0xa5, 0x68, 0x2a, 0xae, 0xb4, 0x05, 0xcf, 0x60, 0x54, 0x87, 0x85, 0x64, 0x9f, 0x57, 0x37, 0x71,
	0x57, 0x94, 0x97, 0x35, 0xd3, 0xa7, 0x1f, 0x92, 0xe3, 0x3a, 0xcc, 0x0d, 0x3f, 0xd7, 0x18, 0x3f,
	0x02, 0x67, 0x45, 0x2f, 0x0b, 0x5a, 0x96, 0x2d, 0x93, 0x52, 0x9f, 0x78, 0x97, 0xc0, 0x8a, 0x5e,
	0x9e, 0x1a, 0x12, 0xfc, 0x40, 0x30, 0xe8, 0x46, 0x92, 0xa2, 0xe1, 0x92, 0xe1, 0x27, 0x00, 0x54,
	0x54, 0x85, 0x54, 0x54, 0x5d, 0xcb, 0x6e, 0x2a, 0x77, 0x6e, 0x5a, 0x38, 0x15, 0x55, 0xae, 0x39,
	0xb9, 0x47, 0x37, 0x72, 0xaf, 0x04, 0xfb, 0xff, 0x25, 0x3c, 0x83, 0x3e, 0x13, 0x85, 0x5e, 0x79,
	0x77, 0x4e, 0xd0, 0xd4, 0x09, 0xc7, 0x1b, 0xeb, 0xee, 0x88, 0xe7, 0x16, 0xe9, 0x31, 0xa1, 0x65,
	0x74, 0x04, 0xd0, 0xa5, 0xf3, 0x4f, 0xcd, 0xec, 0x35, 0xf4, 0xba, 0x50, 0x3c, 0x82, 0x41, 0xfc,
	0x2e, 0x4e, 0x97, 0x45, 0x72, 0x56, 0xa4, 0x59, 0x1a, 0xbb, 0x16, 0x7e, 0x00, 0xa3, 0x2d, 0x8a,
	0xd3, 0xb3, 0x45, 0x96, 0xa4, 0x4b, 0x17, 0xed, 0x39, 0x17, 0x19, 0x59, 0xba, 0xf6, 0x2c, 0xed,
	0x72, 0x32, 0x71, 0xbb, 0x9b, 0x2d, 0x36, 0x39, 0x0f, 0x01, 0x6f, 0x51, 0x7e, 0x11, 0xe5, 0xaf,
	0x48, 0x12, 0xc5, 0x2e, 0xc2, 0x1e, 0x8c, 0xb7, 0xfc, 0x22, 0xbd, 0xdd, 0xb1, 0xc3, 0x37, 0x70,
	0x60, 0x2e, 0xe7, 0x25, 0x38, 0x5a, 0xbc, 0xad, 0xa4, 0x62, 0x1c, 0xdf, 0xdf, 0x6d, 0xa2, 0x7b,
	0x35, 0x93, 0xf1, 0x3e, 0x34, 0xbd, 0x07, 0xd6, 0x14, 0x3d, 0x45, 0xd1, 0xe4, 0xe7, 0xda, 0x47,
	0xbf, 0xd6, 0x3e, 0xfa, 0xbd, 0xf6, 0xd1, 0xf7, 0x3f, 0xbe, 0xf5, 0xbe, 0x7f, 0x45, 0x6b, 0xfd,
	0xfa, 0x3e, 0x1e, 0xea, 0xcf, 0xf3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xea, 0xd1, 0x38,
	0xa7, 0x02, 0x00, 0x00,
}
