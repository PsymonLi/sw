// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hal.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ------------------------------------------------------------------------------
// HalStatus captures various states it is goes through while the system is
// coming up or going down (e.g., during upgrade)
// ------------------------------------------------------------------------------
type HalState int32

const (
	HalState_HAL_STATE_NONE                    HalState = 0
	HalState_HAL_STATE_ASIC_INIT_DONE          HalState = 1
	HalState_HAL_STATE_MEM_INIT_DONE           HalState = 2
	HalState_HAL_STATE_PACKET_BUFFER_INIT_DONE HalState = 3
	HalState_HAL_STATE_DATA_PLANE_INIT_DONE    HalState = 4
	HalState_HAL_STATE_SCHEDULER_INIT_DONE     HalState = 5
	HalState_HAL_STATE_INIT_ERR                HalState = 6
	HalState_HAL_STATE_UP                      HalState = 7
)

var HalState_name = map[int32]string{
	0: "HAL_STATE_NONE",
	1: "HAL_STATE_ASIC_INIT_DONE",
	2: "HAL_STATE_MEM_INIT_DONE",
	3: "HAL_STATE_PACKET_BUFFER_INIT_DONE",
	4: "HAL_STATE_DATA_PLANE_INIT_DONE",
	5: "HAL_STATE_SCHEDULER_INIT_DONE",
	6: "HAL_STATE_INIT_ERR",
	7: "HAL_STATE_UP",
}
var HalState_value = map[string]int32{
	"HAL_STATE_NONE":                    0,
	"HAL_STATE_ASIC_INIT_DONE":          1,
	"HAL_STATE_MEM_INIT_DONE":           2,
	"HAL_STATE_PACKET_BUFFER_INIT_DONE": 3,
	"HAL_STATE_DATA_PLANE_INIT_DONE":    4,
	"HAL_STATE_SCHEDULER_INIT_DONE":     5,
	"HAL_STATE_INIT_ERR":                6,
	"HAL_STATE_UP":                      7,
}

func (x HalState) String() string {
	return proto.EnumName(HalState_name, int32(x))
}
func (HalState) EnumDescriptor() ([]byte, []int) { return fileDescriptorHal, []int{0} }

type HalStatus struct {
	Meta  *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	State HalState           `protobuf:"varint,2,opt,name=state,proto3,enum=hal.HalState" json:"state,omitempty"`
}

func (m *HalStatus) Reset()                    { *m = HalStatus{} }
func (m *HalStatus) String() string            { return proto.CompactTextString(m) }
func (*HalStatus) ProtoMessage()               {}
func (*HalStatus) Descriptor() ([]byte, []int) { return fileDescriptorHal, []int{0} }

func (m *HalStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *HalStatus) GetState() HalState {
	if m != nil {
		return m.State
	}
	return HalState_HAL_STATE_NONE
}

func init() {
	proto.RegisterType((*HalStatus)(nil), "hal.HalStatus")
	proto.RegisterEnum("hal.HalState", HalState_name, HalState_value)
}
func (m *HalStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HalStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHal(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHal(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func encodeVarintHal(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HalStatus) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovHal(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovHal(uint64(m.State))
	}
	return n
}

func sovHal(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHal(x uint64) (n int) {
	return sovHal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HalStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HalStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HalStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHal
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (HalState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHal   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("hal.proto", fileDescriptorHal) }

var fileDescriptorHal = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd0, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0xc6, 0x71, 0xa7, 0x37, 0xdb, 0x63, 0x2d, 0xe1, 0x2c, 0xb4, 0x78, 0x09, 0x6d, 0x44, 0x29,
	0x2e, 0xba, 0xa8, 0x3b, 0x77, 0xd3, 0x76, 0x4a, 0x82, 0x49, 0x1a, 0x72, 0x59, 0x0f, 0x13, 0x0d,
	0x44, 0x09, 0xb4, 0xd8, 0x71, 0xef, 0xd2, 0x37, 0xe8, 0x2b, 0xb9, 0xf4, 0x11, 0x24, 0x6f, 0xe0,
	0x1b, 0x48, 0xd2, 0xca, 0xc4, 0xed, 0xf7, 0xfb, 0x73, 0x06, 0x06, 0x3a, 0xa9, 0xc8, 0xc6, 0xeb,
	0xd7, 0x95, 0x5c, 0x61, 0x3d, 0x15, 0xd9, 0x59, 0xf7, 0x29, 0xc9, 0xd6, 0xe9, 0xf3, 0x6e, 0x32,
	0x62, 0xe8, 0x98, 0x22, 0x0b, 0xa4, 0x90, 0x6f, 0x1b, 0xbc, 0x81, 0x86, 0x93, 0x48, 0xd1, 0x27,
	0x03, 0x32, 0x3a, 0x9a, 0xe0, 0x78, 0x5f, 0x2e, 0xe3, 0x97, 0xe4, 0x51, 0x16, 0xe2, 0x97, 0x8e,
	0x57, 0xd0, 0xdc, 0x48, 0x21, 0x93, 0x7e, 0x6d, 0x40, 0x46, 0xbd, 0xc9, 0xf1, 0xb8, 0x78, 0x62,
	0x7f, 0x26, 0xf1, 0x77, 0x76, 0xdf, 0x7e, 0xdf, 0x1a, 0xe4, 0x63, 0x6b, 0x90, 0xdb, 0x1f, 0x02,
	0xed, 0x3f, 0x45, 0x84, 0x9e, 0x49, 0x6d, 0x1e, 0x84, 0x34, 0x64, 0xdc, 0x5d, 0xba, 0x4c, 0x3b,
	0xc0, 0x0b, 0xe8, 0xab, 0x8d, 0x06, 0xd6, 0x8c, 0x5b, 0xae, 0x15, 0xf2, 0x79, 0xa1, 0x04, 0xcf,
	0xe1, 0x54, 0xa9, 0xc3, 0x9c, 0x0a, 0xd6, 0xf0, 0x1a, 0x86, 0x0a, 0x3d, 0x3a, 0x7b, 0x60, 0x21,
	0x9f, 0x46, 0x8b, 0x05, 0xf3, 0x2b, 0x59, 0x1d, 0x0d, 0xd0, 0x55, 0x36, 0xa7, 0x21, 0xe5, 0x9e,
	0x4d, 0x5d, 0x56, 0x69, 0x1a, 0x38, 0x84, 0x4b, 0xd5, 0x04, 0x33, 0x93, 0xcd, 0x23, 0xfb, 0xdf,
	0x99, 0x26, 0x9e, 0x00, 0xaa, 0xa4, 0x04, 0xe6, 0xfb, 0x5a, 0x0b, 0x35, 0xe8, 0xaa, 0x3d, 0xf2,
	0xb4, 0xc3, 0x69, 0xf7, 0x33, 0xd7, 0xc9, 0x57, 0xae, 0x93, 0xef, 0x5c, 0x27, 0x71, 0xab, 0xfc,
	0xec, 0xbb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xa0, 0xb0, 0x21, 0x8c, 0x01, 0x00, 0x00,
}
