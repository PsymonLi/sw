// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nic/proto/hal/multicast.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ObjectMeta from nic/proto/types.proto

// Ignoring public import of EncapInfo from nic/proto/types.proto

// Ignoring public import of IPAddress from nic/proto/types.proto

// Ignoring public import of IPPrefix from nic/proto/types.proto

// Ignoring public import of L4PortRange from nic/proto/types.proto

// Ignoring public import of Empty from nic/proto/types.proto

// Ignoring public import of IPProtocol from nic/proto/types.proto

// Ignoring public import of ICMPMsgType from nic/proto/types.proto

// Ignoring public import of ApiStatus from nic/proto/types.proto

// Ignoring public import of L2SegmentType from nic/proto/types.proto

// Ignoring public import of encapType from nic/proto/types.proto

// Ignoring public import of IPAddressFamily from nic/proto/types.proto

// Ignoring public import of WRingType from nic/proto/types.proto

// Ignoring public import of ProxyType from nic/proto/types.proto

// Ignoring public import of CryptoKeyType from nic/proto/types.proto

type MulticastEntryKeyIP struct {
	L2SegmentHandle uint64     `protobuf:"fixed64,1,opt,name=l2_segment_handle,json=l2SegmentHandle,proto3" json:"l2_segment_handle,omitempty"`
	Src             *IPAddress `protobuf:"bytes,2,opt,name=src" json:"src,omitempty"`
	Grp             *IPAddress `protobuf:"bytes,3,opt,name=grp" json:"grp,omitempty"`
}

func (m *MulticastEntryKeyIP) Reset()                    { *m = MulticastEntryKeyIP{} }
func (m *MulticastEntryKeyIP) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryKeyIP) ProtoMessage()               {}
func (*MulticastEntryKeyIP) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{0} }

func (m *MulticastEntryKeyIP) GetL2SegmentHandle() uint64 {
	if m != nil {
		return m.L2SegmentHandle
	}
	return 0
}

func (m *MulticastEntryKeyIP) GetSrc() *IPAddress {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *MulticastEntryKeyIP) GetGrp() *IPAddress {
	if m != nil {
		return m.Grp
	}
	return nil
}

type MulticastEntryKeyMac struct {
	Grp uint64 `protobuf:"fixed64,1,opt,name=grp,proto3" json:"grp,omitempty"`
}

func (m *MulticastEntryKeyMac) Reset()                    { *m = MulticastEntryKeyMac{} }
func (m *MulticastEntryKeyMac) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryKeyMac) ProtoMessage()               {}
func (*MulticastEntryKeyMac) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{1} }

func (m *MulticastEntryKeyMac) GetGrp() uint64 {
	if m != nil {
		return m.Grp
	}
	return 0
}

type MulticastEntryKey struct {
	// Types that are valid to be assigned to IpOrMac:
	//	*MulticastEntryKey_Ip
	//	*MulticastEntryKey_Mac
	IpOrMac isMulticastEntryKey_IpOrMac `protobuf_oneof:"ip_or_mac"`
}

func (m *MulticastEntryKey) Reset()                    { *m = MulticastEntryKey{} }
func (m *MulticastEntryKey) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryKey) ProtoMessage()               {}
func (*MulticastEntryKey) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{2} }

type isMulticastEntryKey_IpOrMac interface {
	isMulticastEntryKey_IpOrMac()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MulticastEntryKey_Ip struct {
	Ip *MulticastEntryKeyIP `protobuf:"bytes,1,opt,name=ip,oneof"`
}
type MulticastEntryKey_Mac struct {
	Mac *MulticastEntryKeyMac `protobuf:"bytes,2,opt,name=mac,oneof"`
}

func (*MulticastEntryKey_Ip) isMulticastEntryKey_IpOrMac()  {}
func (*MulticastEntryKey_Mac) isMulticastEntryKey_IpOrMac() {}

func (m *MulticastEntryKey) GetIpOrMac() isMulticastEntryKey_IpOrMac {
	if m != nil {
		return m.IpOrMac
	}
	return nil
}

func (m *MulticastEntryKey) GetIp() *MulticastEntryKeyIP {
	if x, ok := m.GetIpOrMac().(*MulticastEntryKey_Ip); ok {
		return x.Ip
	}
	return nil
}

func (m *MulticastEntryKey) GetMac() *MulticastEntryKeyMac {
	if x, ok := m.GetIpOrMac().(*MulticastEntryKey_Mac); ok {
		return x.Mac
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MulticastEntryKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MulticastEntryKey_OneofMarshaler, _MulticastEntryKey_OneofUnmarshaler, _MulticastEntryKey_OneofSizer, []interface{}{
		(*MulticastEntryKey_Ip)(nil),
		(*MulticastEntryKey_Mac)(nil),
	}
}

func _MulticastEntryKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MulticastEntryKey)
	// ip_or_mac
	switch x := m.IpOrMac.(type) {
	case *MulticastEntryKey_Ip:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ip); err != nil {
			return err
		}
	case *MulticastEntryKey_Mac:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mac); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MulticastEntryKey.IpOrMac has unexpected type %T", x)
	}
	return nil
}

func _MulticastEntryKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MulticastEntryKey)
	switch tag {
	case 1: // ip_or_mac.ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MulticastEntryKeyIP)
		err := b.DecodeMessage(msg)
		m.IpOrMac = &MulticastEntryKey_Ip{msg}
		return true, err
	case 2: // ip_or_mac.mac
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MulticastEntryKeyMac)
		err := b.DecodeMessage(msg)
		m.IpOrMac = &MulticastEntryKey_Mac{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MulticastEntryKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MulticastEntryKey)
	// ip_or_mac
	switch x := m.IpOrMac.(type) {
	case *MulticastEntryKey_Ip:
		s := proto.Size(x.Ip)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MulticastEntryKey_Mac:
		s := proto.Size(x.Mac)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// MulticastEntryKeyHandle
type MulticastEntryKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*MulticastEntryKeyHandle_Key
	//	*MulticastEntryKeyHandle_MulticastHandle
	KeyOrHandle isMulticastEntryKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *MulticastEntryKeyHandle) Reset()                    { *m = MulticastEntryKeyHandle{} }
func (m *MulticastEntryKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryKeyHandle) ProtoMessage()               {}
func (*MulticastEntryKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{3} }

type isMulticastEntryKeyHandle_KeyOrHandle interface {
	isMulticastEntryKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MulticastEntryKeyHandle_Key struct {
	Key *MulticastEntryKey `protobuf:"bytes,1,opt,name=key,oneof"`
}
type MulticastEntryKeyHandle_MulticastHandle struct {
	MulticastHandle uint64 `protobuf:"fixed64,2,opt,name=multicast_handle,json=multicastHandle,proto3,oneof"`
}

func (*MulticastEntryKeyHandle_Key) isMulticastEntryKeyHandle_KeyOrHandle()             {}
func (*MulticastEntryKeyHandle_MulticastHandle) isMulticastEntryKeyHandle_KeyOrHandle() {}

func (m *MulticastEntryKeyHandle) GetKeyOrHandle() isMulticastEntryKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *MulticastEntryKeyHandle) GetKey() *MulticastEntryKey {
	if x, ok := m.GetKeyOrHandle().(*MulticastEntryKeyHandle_Key); ok {
		return x.Key
	}
	return nil
}

func (m *MulticastEntryKeyHandle) GetMulticastHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*MulticastEntryKeyHandle_MulticastHandle); ok {
		return x.MulticastHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MulticastEntryKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MulticastEntryKeyHandle_OneofMarshaler, _MulticastEntryKeyHandle_OneofUnmarshaler, _MulticastEntryKeyHandle_OneofSizer, []interface{}{
		(*MulticastEntryKeyHandle_Key)(nil),
		(*MulticastEntryKeyHandle_MulticastHandle)(nil),
	}
}

func _MulticastEntryKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MulticastEntryKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *MulticastEntryKeyHandle_Key:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Key); err != nil {
			return err
		}
	case *MulticastEntryKeyHandle_MulticastHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.MulticastHandle))
	case nil:
	default:
		return fmt.Errorf("MulticastEntryKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _MulticastEntryKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MulticastEntryKeyHandle)
	switch tag {
	case 1: // key_or_handle.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MulticastEntryKey)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &MulticastEntryKeyHandle_Key{msg}
		return true, err
	case 2: // key_or_handle.multicast_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &MulticastEntryKeyHandle_MulticastHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _MulticastEntryKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MulticastEntryKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *MulticastEntryKeyHandle_Key:
		s := proto.Size(x.Key)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MulticastEntryKeyHandle_MulticastHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MulticastEntrySpec struct {
	Meta       *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Key        *MulticastEntryKeyHandle `protobuf:"bytes,2,opt,name=key" json:"key,omitempty" venice:"key"`
	OifHandles []uint64                 `protobuf:"fixed64,3,rep,packed,name=oif_handles,json=oifHandles" json:"oif_handles,omitempty"`
}

func (m *MulticastEntrySpec) Reset()                    { *m = MulticastEntrySpec{} }
func (m *MulticastEntrySpec) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntrySpec) ProtoMessage()               {}
func (*MulticastEntrySpec) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{4} }

func (m *MulticastEntrySpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MulticastEntrySpec) GetKey() *MulticastEntryKeyHandle {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MulticastEntrySpec) GetOifHandles() []uint64 {
	if m != nil {
		return m.OifHandles
	}
	return nil
}

type MulticastEntryRequestMsg struct {
	Request []*MulticastEntrySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MulticastEntryRequestMsg) Reset()         { *m = MulticastEntryRequestMsg{} }
func (m *MulticastEntryRequestMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryRequestMsg) ProtoMessage()    {}
func (*MulticastEntryRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{5}
}

func (m *MulticastEntryRequestMsg) GetRequest() []*MulticastEntrySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type MulticastEntryStatus struct {
	MulticastHandle uint64 `protobuf:"fixed64,1,opt,name=multicast_handle,json=multicastHandle,proto3" json:"multicast_handle,omitempty"`
}

func (m *MulticastEntryStatus) Reset()                    { *m = MulticastEntryStatus{} }
func (m *MulticastEntryStatus) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryStatus) ProtoMessage()               {}
func (*MulticastEntryStatus) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{6} }

func (m *MulticastEntryStatus) GetMulticastHandle() uint64 {
	if m != nil {
		return m.MulticastHandle
	}
	return 0
}

type MulticastEntryResponse struct {
	ApiStatus   ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	EntryStatus *MulticastEntryStatus `protobuf:"bytes,2,opt,name=entry_status,json=entryStatus" json:"entry_status,omitempty"`
}

func (m *MulticastEntryResponse) Reset()                    { *m = MulticastEntryResponse{} }
func (m *MulticastEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryResponse) ProtoMessage()               {}
func (*MulticastEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{7} }

func (m *MulticastEntryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MulticastEntryResponse) GetEntryStatus() *MulticastEntryStatus {
	if m != nil {
		return m.EntryStatus
	}
	return nil
}

type MulticastEntryResponseMsg struct {
	Resp []*MulticastEntryResponse `protobuf:"bytes,1,rep,name=resp" json:"resp,omitempty"`
}

func (m *MulticastEntryResponseMsg) Reset()         { *m = MulticastEntryResponseMsg{} }
func (m *MulticastEntryResponseMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryResponseMsg) ProtoMessage()    {}
func (*MulticastEntryResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{8}
}

func (m *MulticastEntryResponseMsg) GetResp() []*MulticastEntryResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type MulticastEntryDeleteRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *MulticastEntryKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *MulticastEntryDeleteRequest) Reset()         { *m = MulticastEntryDeleteRequest{} }
func (m *MulticastEntryDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteRequest) ProtoMessage()    {}
func (*MulticastEntryDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{9}
}

func (m *MulticastEntryDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MulticastEntryDeleteRequest) GetKeyOrHandle() *MulticastEntryKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type MulticastEntryDeleteRequestMsg struct {
	Request []*MulticastEntryDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MulticastEntryDeleteRequestMsg) Reset()         { *m = MulticastEntryDeleteRequestMsg{} }
func (m *MulticastEntryDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteRequestMsg) ProtoMessage()    {}
func (*MulticastEntryDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{10}
}

func (m *MulticastEntryDeleteRequestMsg) GetRequest() []*MulticastEntryDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MulticastEntryDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *MulticastEntryDeleteResponseMsg) Reset()         { *m = MulticastEntryDeleteResponseMsg{} }
func (m *MulticastEntryDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteResponseMsg) ProtoMessage()    {}
func (*MulticastEntryDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{11}
}

func (m *MulticastEntryDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

type MulticastEntryGetRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *MulticastEntryKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *MulticastEntryGetRequest) Reset()         { *m = MulticastEntryGetRequest{} }
func (m *MulticastEntryGetRequest) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryGetRequest) ProtoMessage()    {}
func (*MulticastEntryGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{12}
}

func (m *MulticastEntryGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MulticastEntryGetRequest) GetKeyOrHandle() *MulticastEntryKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type MulticastEntryGetRequestMsg struct {
	Request []*MulticastEntryGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MulticastEntryGetRequestMsg) Reset()         { *m = MulticastEntryGetRequestMsg{} }
func (m *MulticastEntryGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryGetRequestMsg) ProtoMessage()    {}
func (*MulticastEntryGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{13}
}

func (m *MulticastEntryGetRequestMsg) GetRequest() []*MulticastEntryGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MulticastEntryGetResponse struct {
	ApiStatus  ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	OifHandles []uint64  `protobuf:"fixed64,2,rep,packed,name=oif_handles,json=oifHandles" json:"oif_handles,omitempty"`
}

func (m *MulticastEntryGetResponse) Reset()         { *m = MulticastEntryGetResponse{} }
func (m *MulticastEntryGetResponse) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryGetResponse) ProtoMessage()    {}
func (*MulticastEntryGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{14}
}

func (m *MulticastEntryGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MulticastEntryGetResponse) GetOifHandles() []uint64 {
	if m != nil {
		return m.OifHandles
	}
	return nil
}

type MulticastEntryGetResponseMsg struct {
	Resp []*MulticastEntryGetResponse `protobuf:"bytes,1,rep,name=resp" json:"resp,omitempty"`
}

func (m *MulticastEntryGetResponseMsg) Reset()         { *m = MulticastEntryGetResponseMsg{} }
func (m *MulticastEntryGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryGetResponseMsg) ProtoMessage()    {}
func (*MulticastEntryGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{15}
}

func (m *MulticastEntryGetResponseMsg) GetResp() []*MulticastEntryGetResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

func init() {
	proto.RegisterType((*MulticastEntryKeyIP)(nil), "multicast.MulticastEntryKeyIP")
	proto.RegisterType((*MulticastEntryKeyMac)(nil), "multicast.MulticastEntryKeyMac")
	proto.RegisterType((*MulticastEntryKey)(nil), "multicast.MulticastEntryKey")
	proto.RegisterType((*MulticastEntryKeyHandle)(nil), "multicast.MulticastEntryKeyHandle")
	proto.RegisterType((*MulticastEntrySpec)(nil), "multicast.MulticastEntrySpec")
	proto.RegisterType((*MulticastEntryRequestMsg)(nil), "multicast.MulticastEntryRequestMsg")
	proto.RegisterType((*MulticastEntryStatus)(nil), "multicast.MulticastEntryStatus")
	proto.RegisterType((*MulticastEntryResponse)(nil), "multicast.MulticastEntryResponse")
	proto.RegisterType((*MulticastEntryResponseMsg)(nil), "multicast.MulticastEntryResponseMsg")
	proto.RegisterType((*MulticastEntryDeleteRequest)(nil), "multicast.MulticastEntryDeleteRequest")
	proto.RegisterType((*MulticastEntryDeleteRequestMsg)(nil), "multicast.MulticastEntryDeleteRequestMsg")
	proto.RegisterType((*MulticastEntryDeleteResponseMsg)(nil), "multicast.MulticastEntryDeleteResponseMsg")
	proto.RegisterType((*MulticastEntryGetRequest)(nil), "multicast.MulticastEntryGetRequest")
	proto.RegisterType((*MulticastEntryGetRequestMsg)(nil), "multicast.MulticastEntryGetRequestMsg")
	proto.RegisterType((*MulticastEntryGetResponse)(nil), "multicast.MulticastEntryGetResponse")
	proto.RegisterType((*MulticastEntryGetResponseMsg)(nil), "multicast.MulticastEntryGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Multicast service

type MulticastClient interface {
	MulticastEntryCreate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error)
	MulticastEntryUpdate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error)
	MulticastEntryDelete(ctx context.Context, in *MulticastEntryDeleteRequestMsg, opts ...grpc.CallOption) (*MulticastEntryDeleteResponseMsg, error)
	MulticastEntryGet(ctx context.Context, in *MulticastEntryGetRequestMsg, opts ...grpc.CallOption) (*MulticastEntryGetResponseMsg, error)
}

type multicastClient struct {
	cc *grpc.ClientConn
}

func NewMulticastClient(cc *grpc.ClientConn) MulticastClient {
	return &multicastClient{cc}
}

func (c *multicastClient) MulticastEntryCreate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error) {
	out := new(MulticastEntryResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) MulticastEntryUpdate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error) {
	out := new(MulticastEntryResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) MulticastEntryDelete(ctx context.Context, in *MulticastEntryDeleteRequestMsg, opts ...grpc.CallOption) (*MulticastEntryDeleteResponseMsg, error) {
	out := new(MulticastEntryDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) MulticastEntryGet(ctx context.Context, in *MulticastEntryGetRequestMsg, opts ...grpc.CallOption) (*MulticastEntryGetResponseMsg, error) {
	out := new(MulticastEntryGetResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Multicast service

type MulticastServer interface {
	MulticastEntryCreate(context.Context, *MulticastEntryRequestMsg) (*MulticastEntryResponseMsg, error)
	MulticastEntryUpdate(context.Context, *MulticastEntryRequestMsg) (*MulticastEntryResponseMsg, error)
	MulticastEntryDelete(context.Context, *MulticastEntryDeleteRequestMsg) (*MulticastEntryDeleteResponseMsg, error)
	MulticastEntryGet(context.Context, *MulticastEntryGetRequestMsg) (*MulticastEntryGetResponseMsg, error)
}

func RegisterMulticastServer(s *grpc.Server, srv MulticastServer) {
	s.RegisterService(&_Multicast_serviceDesc, srv)
}

func _Multicast_MulticastEntryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryCreate(ctx, req.(*MulticastEntryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_MulticastEntryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryUpdate(ctx, req.(*MulticastEntryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_MulticastEntryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryDelete(ctx, req.(*MulticastEntryDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_MulticastEntryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryGet(ctx, req.(*MulticastEntryGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Multicast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "multicast.Multicast",
	HandlerType: (*MulticastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MulticastEntryCreate",
			Handler:    _Multicast_MulticastEntryCreate_Handler,
		},
		{
			MethodName: "MulticastEntryUpdate",
			Handler:    _Multicast_MulticastEntryUpdate_Handler,
		},
		{
			MethodName: "MulticastEntryDelete",
			Handler:    _Multicast_MulticastEntryDelete_Handler,
		},
		{
			MethodName: "MulticastEntryGet",
			Handler:    _Multicast_MulticastEntryGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/multicast.proto",
}

func (m *MulticastEntryKeyIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryKeyIP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.L2SegmentHandle != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Multicast(dAtA, i, uint64(m.L2SegmentHandle))
	}
	if m.Src != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Src.Size()))
		n1, err := m.Src.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Grp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Grp.Size()))
		n2, err := m.Grp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *MulticastEntryKeyMac) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryKeyMac) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Grp != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Multicast(dAtA, i, uint64(m.Grp))
	}
	return i, nil
}

func (m *MulticastEntryKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IpOrMac != nil {
		nn3, err := m.IpOrMac.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *MulticastEntryKey_Ip) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ip != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Ip.Size()))
		n4, err := m.Ip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *MulticastEntryKey_Mac) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Mac != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Mac.Size()))
		n5, err := m.Mac.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *MulticastEntryKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn6, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *MulticastEntryKeyHandle_Key) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Key.Size()))
		n7, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *MulticastEntryKeyHandle_MulticastHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64Multicast(dAtA, i, uint64(m.MulticastHandle))
	return i, nil
}
func (m *MulticastEntrySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntrySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Meta.Size()))
		n8, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Key.Size()))
		n9, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.OifHandles) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(len(m.OifHandles)*8))
		for _, num := range m.OifHandles {
			dAtA[i] = uint8(num)
			i++
			dAtA[i] = uint8(num >> 8)
			i++
			dAtA[i] = uint8(num >> 16)
			i++
			dAtA[i] = uint8(num >> 24)
			i++
			dAtA[i] = uint8(num >> 32)
			i++
			dAtA[i] = uint8(num >> 40)
			i++
			dAtA[i] = uint8(num >> 48)
			i++
			dAtA[i] = uint8(num >> 56)
			i++
		}
	}
	return i, nil
}

func (m *MulticastEntryRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MulticastHandle != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Multicast(dAtA, i, uint64(m.MulticastHandle))
	}
	return i, nil
}

func (m *MulticastEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.ApiStatus))
	}
	if m.EntryStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.EntryStatus.Size()))
		n10, err := m.EntryStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *MulticastEntryResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Resp) > 0 {
		for _, msg := range m.Resp {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Meta.Size()))
		n11, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n12, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *MulticastEntryDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA14 := make([]byte, len(m.ApiStatus)*10)
		var j13 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	return i, nil
}

func (m *MulticastEntryGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Meta.Size()))
		n15, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n16, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *MulticastEntryGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.OifHandles) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(len(m.OifHandles)*8))
		for _, num := range m.OifHandles {
			dAtA[i] = uint8(num)
			i++
			dAtA[i] = uint8(num >> 8)
			i++
			dAtA[i] = uint8(num >> 16)
			i++
			dAtA[i] = uint8(num >> 24)
			i++
			dAtA[i] = uint8(num >> 32)
			i++
			dAtA[i] = uint8(num >> 40)
			i++
			dAtA[i] = uint8(num >> 48)
			i++
			dAtA[i] = uint8(num >> 56)
			i++
		}
	}
	return i, nil
}

func (m *MulticastEntryGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Resp) > 0 {
		for _, msg := range m.Resp {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Multicast(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Multicast(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMulticast(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MulticastEntryKeyIP) Size() (n int) {
	var l int
	_ = l
	if m.L2SegmentHandle != 0 {
		n += 9
	}
	if m.Src != nil {
		l = m.Src.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if m.Grp != nil {
		l = m.Grp.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}

func (m *MulticastEntryKeyMac) Size() (n int) {
	var l int
	_ = l
	if m.Grp != 0 {
		n += 9
	}
	return n
}

func (m *MulticastEntryKey) Size() (n int) {
	var l int
	_ = l
	if m.IpOrMac != nil {
		n += m.IpOrMac.Size()
	}
	return n
}

func (m *MulticastEntryKey_Ip) Size() (n int) {
	var l int
	_ = l
	if m.Ip != nil {
		l = m.Ip.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}
func (m *MulticastEntryKey_Mac) Size() (n int) {
	var l int
	_ = l
	if m.Mac != nil {
		l = m.Mac.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}
func (m *MulticastEntryKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *MulticastEntryKeyHandle_Key) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}
func (m *MulticastEntryKeyHandle_MulticastHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *MulticastEntrySpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if len(m.OifHandles) > 0 {
		n += 1 + sovMulticast(uint64(len(m.OifHandles)*8)) + len(m.OifHandles)*8
	}
	return n
}

func (m *MulticastEntryRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryStatus) Size() (n int) {
	var l int
	_ = l
	if m.MulticastHandle != 0 {
		n += 9
	}
	return n
}

func (m *MulticastEntryResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMulticast(uint64(m.ApiStatus))
	}
	if m.EntryStatus != nil {
		l = m.EntryStatus.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}

func (m *MulticastEntryResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Resp) > 0 {
		for _, e := range m.Resp {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}

func (m *MulticastEntryDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovMulticast(uint64(e))
		}
		n += 1 + sovMulticast(uint64(l)) + l
	}
	return n
}

func (m *MulticastEntryGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}

func (m *MulticastEntryGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMulticast(uint64(m.ApiStatus))
	}
	if len(m.OifHandles) > 0 {
		n += 1 + sovMulticast(uint64(len(m.OifHandles)*8)) + len(m.OifHandles)*8
	}
	return n
}

func (m *MulticastEntryGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Resp) > 0 {
		for _, e := range m.Resp {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func sovMulticast(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMulticast(x uint64) (n int) {
	return sovMulticast(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MulticastEntryKeyIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryKeyIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryKeyIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2SegmentHandle", wireType)
			}
			m.L2SegmentHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.L2SegmentHandle = uint64(dAtA[iNdEx-8])
			m.L2SegmentHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.L2SegmentHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.L2SegmentHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.L2SegmentHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.L2SegmentHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.L2SegmentHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.L2SegmentHandle |= uint64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Src == nil {
				m.Src = &IPAddress{}
			}
			if err := m.Src.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grp == nil {
				m.Grp = &IPAddress{}
			}
			if err := m.Grp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryKeyMac) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryKeyMac: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryKeyMac: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grp", wireType)
			}
			m.Grp = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.Grp = uint64(dAtA[iNdEx-8])
			m.Grp |= uint64(dAtA[iNdEx-7]) << 8
			m.Grp |= uint64(dAtA[iNdEx-6]) << 16
			m.Grp |= uint64(dAtA[iNdEx-5]) << 24
			m.Grp |= uint64(dAtA[iNdEx-4]) << 32
			m.Grp |= uint64(dAtA[iNdEx-3]) << 40
			m.Grp |= uint64(dAtA[iNdEx-2]) << 48
			m.Grp |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MulticastEntryKeyIP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpOrMac = &MulticastEntryKey_Ip{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MulticastEntryKeyMac{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.IpOrMac = &MulticastEntryKey_Mac{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MulticastEntryKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.KeyOrHandle = &MulticastEntryKeyHandle_Key{v}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.KeyOrHandle = &MulticastEntryKeyHandle_MulticastHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntrySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntrySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntrySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &MulticastEntryKeyHandle{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				m.OifHandles = append(m.OifHandles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMulticast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMulticast
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					m.OifHandles = append(m.OifHandles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OifHandles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MulticastEntrySpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastHandle", wireType)
			}
			m.MulticastHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.MulticastHandle = uint64(dAtA[iNdEx-8])
			m.MulticastHandle |= uint64(dAtA[iNdEx-7]) << 8
			m.MulticastHandle |= uint64(dAtA[iNdEx-6]) << 16
			m.MulticastHandle |= uint64(dAtA[iNdEx-5]) << 24
			m.MulticastHandle |= uint64(dAtA[iNdEx-4]) << 32
			m.MulticastHandle |= uint64(dAtA[iNdEx-3]) << 40
			m.MulticastHandle |= uint64(dAtA[iNdEx-2]) << 48
			m.MulticastHandle |= uint64(dAtA[iNdEx-1]) << 56
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryStatus == nil {
				m.EntryStatus = &MulticastEntryStatus{}
			}
			if err := m.EntryStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resp = append(m.Resp, &MulticastEntryResponse{})
			if err := m.Resp[len(m.Resp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &MulticastEntryKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MulticastEntryDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMulticast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMulticast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMulticast
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMulticast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &MulticastEntryKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MulticastEntryGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				m.OifHandles = append(m.OifHandles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMulticast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMulticast
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					m.OifHandles = append(m.OifHandles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OifHandles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resp = append(m.Resp, &MulticastEntryGetResponse{})
			if err := m.Resp[len(m.Resp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMulticast(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMulticast
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMulticast
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMulticast(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMulticast = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMulticast   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nic/proto/hal/multicast.proto", fileDescriptorMulticast) }

var fileDescriptorMulticast = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xe3, 0x2a, 0xdf, 0x97, 0x9b, 0x42, 0xd3, 0xe1, 0x2f, 0x94, 0x36, 0x09, 0x6e, 0x29,
	0x69, 0x91, 0x9a, 0x2a, 0x15, 0x02, 0x21, 0x21, 0xd1, 0xf0, 0xd3, 0x54, 0x28, 0x6a, 0xe5, 0x08,
	0xa9, 0x42, 0x48, 0x91, 0xeb, 0xdc, 0xa6, 0x26, 0x3f, 0x36, 0x9e, 0x29, 0x92, 0x9f, 0x00, 0xb1,
	0x60, 0x8f, 0x84, 0xc4, 0x8a, 0x35, 0xcf, 0xc1, 0x92, 0x27, 0x40, 0xa8, 0xbc, 0x01, 0x4f, 0x80,
	0xc6, 0x63, 0xc7, 0xcd, 0xe4, 0x57, 0xc0, 0x82, 0x9d, 0x3d, 0x3e, 0xf7, 0x9e, 0x73, 0xcf, 0x9c,
	0x99, 0x04, 0x96, 0xba, 0x96, 0x59, 0x74, 0x5c, 0x9b, 0xd9, 0xc5, 0x63, 0xa3, 0x5d, 0xec, 0x9c,
	0xb4, 0x99, 0x65, 0x1a, 0x94, 0x6d, 0xf8, 0x6b, 0x24, 0xd9, 0x5b, 0x58, 0xb8, 0x14, 0x21, 0x99,
	0xe7, 0x20, 0x15, 0x08, 0xed, 0xad, 0x02, 0x17, 0xaa, 0x21, 0xe8, 0x71, 0x97, 0xb9, 0xde, 0x53,
	0xf4, 0x76, 0xf7, 0xc9, 0x3a, 0xcc, 0xb7, 0x4b, 0x75, 0x8a, 0xcd, 0x0e, 0x76, 0x59, 0xfd, 0xd8,
	0xe8, 0x36, 0xda, 0x98, 0x51, 0xf2, 0x4a, 0x21, 0xa1, 0xcf, 0xb5, 0x4b, 0x35, 0xb1, 0x5e, 0xf1,
	0x97, 0x89, 0x06, 0x2a, 0x75, 0xcd, 0x4c, 0x3c, 0xaf, 0x14, 0x52, 0xa5, 0xf4, 0x86, 0x68, 0xbf,
	0xbb, 0xbf, 0xdd, 0x68, 0xb8, 0x48, 0xa9, 0xce, 0x3f, 0x72, 0x4c, 0xd3, 0x75, 0x32, 0xea, 0x28,
	0x4c, 0xd3, 0x75, 0xb4, 0x02, 0x5c, 0x1c, 0x90, 0x52, 0x35, 0x4c, 0x92, 0x16, 0xb5, 0x82, 0xdd,
	0x47, 0xbe, 0x51, 0x60, 0x7e, 0x00, 0x4a, 0x36, 0x21, 0x6e, 0x09, 0x58, 0xaa, 0x94, 0xdd, 0x88,
	0xbc, 0x18, 0x32, 0x5f, 0x25, 0xa6, 0xc7, 0x2d, 0x87, 0x6c, 0x81, 0xda, 0x31, 0x42, 0xe5, 0xb9,
	0x71, 0x25, 0x55, 0xc3, 0xac, 0xc4, 0x74, 0x8e, 0x2e, 0xa7, 0x20, 0x69, 0x39, 0x75, 0xdb, 0xad,
	0x77, 0x0c, 0x93, 0xfb, 0x77, 0x65, 0x00, 0x1c, 0xf8, 0xb2, 0x09, 0x6a, 0x0b, 0xbd, 0x40, 0xd0,
	0xe2, 0xb8, 0xee, 0xbc, 0x75, 0x0b, 0x3d, 0x72, 0x0b, 0xd2, 0x3d, 0x54, 0x68, 0x3a, 0x17, 0x97,
	0xa8, 0xc4, 0xf4, 0xb9, 0xde, 0x17, 0xd1, 0xbe, 0x3c, 0x07, 0xe7, 0x5a, 0xe8, 0x71, 0x21, 0x02,
	0xa9, 0x7d, 0x52, 0x80, 0xf4, 0xb7, 0xae, 0x39, 0x68, 0x92, 0x1b, 0x30, 0xd3, 0x41, 0x66, 0x04,
	0x3a, 0xe6, 0x03, 0xef, 0xf7, 0x0e, 0x5f, 0xa2, 0xc9, 0xaa, 0xc8, 0x0c, 0xdd, 0xff, 0x4c, 0x9e,
	0x08, 0xb5, 0xc2, 0x0b, 0x6d, 0xac, 0x5a, 0xc1, 0x9f, 0xfe, 0xf9, 0x2d, 0x37, 0xfb, 0x1a, 0xbb,
	0x96, 0x89, 0xf7, 0xb4, 0x16, 0x7a, 0x9a, 0x98, 0x21, 0x07, 0x29, 0xdb, 0x3a, 0x0a, 0x34, 0xd1,
	0x8c, 0x9a, 0x57, 0x0b, 0x09, 0x1d, 0x6c, 0xeb, 0x48, 0x94, 0x51, 0xad, 0x06, 0x99, 0xfe, 0x96,
	0x3a, 0xbe, 0x3a, 0x41, 0xca, 0xaa, 0xb4, 0x49, 0xee, 0xc0, 0x7f, 0xae, 0x78, 0xcb, 0x28, 0x79,
	0xb5, 0x90, 0x2a, 0x2d, 0x8d, 0x14, 0xc2, 0x67, 0xd3, 0x43, 0xb4, 0xb6, 0x2d, 0x67, 0xa7, 0xc6,
	0x0c, 0x76, 0x42, 0xc9, 0xda, 0x10, 0x47, 0x83, 0x18, 0x4b, 0x7e, 0x6a, 0xef, 0x14, 0xb8, 0x2c,
	0x0b, 0xa3, 0x8e, 0xdd, 0xa5, 0x48, 0x8a, 0x00, 0x86, 0x63, 0xd5, 0xa9, 0xdf, 0xd3, 0xaf, 0x3f,
	0xdf, 0x0b, 0xf1, 0xb6, 0x63, 0x09, 0x2e, 0x3d, 0x69, 0x84, 0x8f, 0xa4, 0x0c, 0xb3, 0xc8, 0x3b,
	0x84, 0x25, 0x93, 0x12, 0x16, 0x74, 0x48, 0x61, 0xf4, 0xa2, 0xe9, 0x70, 0x75, 0xb8, 0x1c, 0x6e,
	0xd4, 0x6d, 0x98, 0x71, 0x91, 0x3a, 0x81, 0x4b, 0xd7, 0x47, 0x36, 0x0e, 0x6b, 0x74, 0x1f, 0xae,
	0x7d, 0x54, 0xe0, 0x5a, 0x3f, 0xe0, 0x11, 0xb6, 0x91, 0x61, 0xb0, 0x05, 0xd3, 0x66, 0xe5, 0x40,
	0x8a, 0xde, 0x1f, 0xa5, 0x26, 0xd5, 0x42, 0x6f, 0xcf, 0x0d, 0x36, 0xe1, 0x10, 0xb2, 0x63, 0xf4,
	0xf1, 0xc9, 0x1f, 0xc8, 0x11, 0x59, 0x1d, 0xc9, 0xda, 0x57, 0x1b, 0x65, 0x45, 0x87, 0xdc, 0x70,
	0x5c, 0x64, 0xaf, 0xbc, 0xe1, 0xea, 0x84, 0x0d, 0xd7, 0x3e, 0x28, 0x72, 0xaa, 0x77, 0x90, 0xfd,
	0x33, 0xae, 0xbe, 0x90, 0x77, 0x3d, 0x12, 0xc7, 0xa7, 0xbd, 0x2f, 0x5b, 0xba, 0x3c, 0x92, 0x32,
	0x2a, 0x8c, 0xfc, 0xec, 0xc8, 0x41, 0xf5, 0x41, 0xbf, 0x7b, 0x74, 0xa4, 0xfb, 0x23, 0x3e, 0x70,
	0x7f, 0x1c, 0xc0, 0xe2, 0x48, 0x3a, 0x3e, 0xcd, 0xdd, 0xbe, 0xa3, 0xb1, 0x32, 0x7e, 0x94, 0xb3,
	0xa7, 0xa3, 0xf4, 0x59, 0x85, 0x64, 0x0f, 0x43, 0x4c, 0xf9, 0x4a, 0x79, 0xe8, 0xa2, 0xc1, 0x90,
	0x2c, 0x8f, 0x39, 0x6c, 0xa1, 0xa5, 0x0b, 0x2b, 0x13, 0x4f, 0x64, 0x95, 0x36, 0xb5, 0xd8, 0x20,
	0xc9, 0x33, 0xa7, 0xf1, 0xd7, 0x49, 0x6c, 0x99, 0x44, 0x04, 0x9e, 0xac, 0x4d, 0x77, 0x72, 0x38,
	0xd5, 0xfa, 0x44, 0xe8, 0x59, 0xc2, 0x23, 0xf9, 0xe7, 0x79, 0x07, 0x19, 0x59, 0x9d, 0x22, 0x54,
	0x9c, 0xea, 0xe6, 0x34, 0x3b, 0xe6, 0xf3, 0x94, 0x17, 0xbe, 0x9c, 0x66, 0x95, 0xaf, 0xa7, 0x59,
	0xe5, 0xfb, 0x69, 0x56, 0x79, 0xff, 0x23, 0x1b, 0x7b, 0xfe, 0xff, 0xb1, 0xd1, 0xf6, 0xff, 0xd9,
	0xec, 0xc7, 0x0e, 0x13, 0xfe, 0xc3, 0xd6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xf1, 0x6e,
	0x83, 0x25, 0x09, 0x00, 0x00,
}
