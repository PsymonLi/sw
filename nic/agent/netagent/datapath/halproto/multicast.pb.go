// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nic/proto/hal/multicast.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MulticastEntryKeyIP struct {
	L2SegmentHandle uint64     `protobuf:"fixed64,1,opt,name=l2_segment_handle,json=l2SegmentHandle" json:"l2_segment_handle,omitempty"`
	Src             *IPAddress `protobuf:"bytes,2,opt,name=src" json:"src,omitempty"`
	Grp             *IPAddress `protobuf:"bytes,3,opt,name=grp" json:"grp,omitempty"`
}

func (m *MulticastEntryKeyIP) Reset()                    { *m = MulticastEntryKeyIP{} }
func (m *MulticastEntryKeyIP) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryKeyIP) ProtoMessage()               {}
func (*MulticastEntryKeyIP) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *MulticastEntryKeyIP) GetL2SegmentHandle() uint64 {
	if m != nil {
		return m.L2SegmentHandle
	}
	return 0
}

func (m *MulticastEntryKeyIP) GetSrc() *IPAddress {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *MulticastEntryKeyIP) GetGrp() *IPAddress {
	if m != nil {
		return m.Grp
	}
	return nil
}

type MulticastEntryKeyMac struct {
	Grp uint64 `protobuf:"fixed64,1,opt,name=grp" json:"grp,omitempty"`
}

func (m *MulticastEntryKeyMac) Reset()                    { *m = MulticastEntryKeyMac{} }
func (m *MulticastEntryKeyMac) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryKeyMac) ProtoMessage()               {}
func (*MulticastEntryKeyMac) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *MulticastEntryKeyMac) GetGrp() uint64 {
	if m != nil {
		return m.Grp
	}
	return 0
}

type MulticastEntryKey struct {
	// Types that are valid to be assigned to IpOrMac:
	//	*MulticastEntryKey_Ip
	//	*MulticastEntryKey_Mac
	IpOrMac isMulticastEntryKey_IpOrMac `protobuf_oneof:"ip_or_mac"`
}

func (m *MulticastEntryKey) Reset()                    { *m = MulticastEntryKey{} }
func (m *MulticastEntryKey) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryKey) ProtoMessage()               {}
func (*MulticastEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

type isMulticastEntryKey_IpOrMac interface {
	isMulticastEntryKey_IpOrMac()
}

type MulticastEntryKey_Ip struct {
	Ip *MulticastEntryKeyIP `protobuf:"bytes,1,opt,name=ip,oneof"`
}
type MulticastEntryKey_Mac struct {
	Mac *MulticastEntryKeyMac `protobuf:"bytes,2,opt,name=mac,oneof"`
}

func (*MulticastEntryKey_Ip) isMulticastEntryKey_IpOrMac()  {}
func (*MulticastEntryKey_Mac) isMulticastEntryKey_IpOrMac() {}

func (m *MulticastEntryKey) GetIpOrMac() isMulticastEntryKey_IpOrMac {
	if m != nil {
		return m.IpOrMac
	}
	return nil
}

func (m *MulticastEntryKey) GetIp() *MulticastEntryKeyIP {
	if x, ok := m.GetIpOrMac().(*MulticastEntryKey_Ip); ok {
		return x.Ip
	}
	return nil
}

func (m *MulticastEntryKey) GetMac() *MulticastEntryKeyMac {
	if x, ok := m.GetIpOrMac().(*MulticastEntryKey_Mac); ok {
		return x.Mac
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MulticastEntryKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MulticastEntryKey_OneofMarshaler, _MulticastEntryKey_OneofUnmarshaler, _MulticastEntryKey_OneofSizer, []interface{}{
		(*MulticastEntryKey_Ip)(nil),
		(*MulticastEntryKey_Mac)(nil),
	}
}

func _MulticastEntryKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MulticastEntryKey)
	// ip_or_mac
	switch x := m.IpOrMac.(type) {
	case *MulticastEntryKey_Ip:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ip); err != nil {
			return err
		}
	case *MulticastEntryKey_Mac:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mac); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MulticastEntryKey.IpOrMac has unexpected type %T", x)
	}
	return nil
}

func _MulticastEntryKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MulticastEntryKey)
	switch tag {
	case 1: // ip_or_mac.ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MulticastEntryKeyIP)
		err := b.DecodeMessage(msg)
		m.IpOrMac = &MulticastEntryKey_Ip{msg}
		return true, err
	case 2: // ip_or_mac.mac
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MulticastEntryKeyMac)
		err := b.DecodeMessage(msg)
		m.IpOrMac = &MulticastEntryKey_Mac{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MulticastEntryKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MulticastEntryKey)
	// ip_or_mac
	switch x := m.IpOrMac.(type) {
	case *MulticastEntryKey_Ip:
		s := proto.Size(x.Ip)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MulticastEntryKey_Mac:
		s := proto.Size(x.Mac)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// MulticastEntryKeyHandle
type MulticastEntryKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*MulticastEntryKeyHandle_Key
	//	*MulticastEntryKeyHandle_MulticastHandle
	KeyOrHandle isMulticastEntryKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *MulticastEntryKeyHandle) Reset()                    { *m = MulticastEntryKeyHandle{} }
func (m *MulticastEntryKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryKeyHandle) ProtoMessage()               {}
func (*MulticastEntryKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

type isMulticastEntryKeyHandle_KeyOrHandle interface {
	isMulticastEntryKeyHandle_KeyOrHandle()
}

type MulticastEntryKeyHandle_Key struct {
	Key *MulticastEntryKey `protobuf:"bytes,1,opt,name=key,oneof"`
}
type MulticastEntryKeyHandle_MulticastHandle struct {
	MulticastHandle uint64 `protobuf:"fixed64,2,opt,name=multicast_handle,json=multicastHandle,oneof"`
}

func (*MulticastEntryKeyHandle_Key) isMulticastEntryKeyHandle_KeyOrHandle()             {}
func (*MulticastEntryKeyHandle_MulticastHandle) isMulticastEntryKeyHandle_KeyOrHandle() {}

func (m *MulticastEntryKeyHandle) GetKeyOrHandle() isMulticastEntryKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *MulticastEntryKeyHandle) GetKey() *MulticastEntryKey {
	if x, ok := m.GetKeyOrHandle().(*MulticastEntryKeyHandle_Key); ok {
		return x.Key
	}
	return nil
}

func (m *MulticastEntryKeyHandle) GetMulticastHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*MulticastEntryKeyHandle_MulticastHandle); ok {
		return x.MulticastHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MulticastEntryKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MulticastEntryKeyHandle_OneofMarshaler, _MulticastEntryKeyHandle_OneofUnmarshaler, _MulticastEntryKeyHandle_OneofSizer, []interface{}{
		(*MulticastEntryKeyHandle_Key)(nil),
		(*MulticastEntryKeyHandle_MulticastHandle)(nil),
	}
}

func _MulticastEntryKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MulticastEntryKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *MulticastEntryKeyHandle_Key:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Key); err != nil {
			return err
		}
	case *MulticastEntryKeyHandle_MulticastHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.MulticastHandle))
	case nil:
	default:
		return fmt.Errorf("MulticastEntryKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _MulticastEntryKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MulticastEntryKeyHandle)
	switch tag {
	case 1: // key_or_handle.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MulticastEntryKey)
		err := b.DecodeMessage(msg)
		m.KeyOrHandle = &MulticastEntryKeyHandle_Key{msg}
		return true, err
	case 2: // key_or_handle.multicast_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &MulticastEntryKeyHandle_MulticastHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _MulticastEntryKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MulticastEntryKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *MulticastEntryKeyHandle_Key:
		s := proto.Size(x.Key)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MulticastEntryKeyHandle_MulticastHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MulticastEntrySpec struct {
	Meta       *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Key        *MulticastEntryKeyHandle `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	OifHandles []uint64                 `protobuf:"fixed64,3,rep,packed,name=oif_handles,json=oifHandles" json:"oif_handles,omitempty"`
}

func (m *MulticastEntrySpec) Reset()                    { *m = MulticastEntrySpec{} }
func (m *MulticastEntrySpec) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntrySpec) ProtoMessage()               {}
func (*MulticastEntrySpec) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *MulticastEntrySpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MulticastEntrySpec) GetKey() *MulticastEntryKeyHandle {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MulticastEntrySpec) GetOifHandles() []uint64 {
	if m != nil {
		return m.OifHandles
	}
	return nil
}

type MulticastEntryRequestMsg struct {
	Request []*MulticastEntrySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MulticastEntryRequestMsg) Reset()                    { *m = MulticastEntryRequestMsg{} }
func (m *MulticastEntryRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryRequestMsg) ProtoMessage()               {}
func (*MulticastEntryRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

func (m *MulticastEntryRequestMsg) GetRequest() []*MulticastEntrySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type MulticastEntryStatus struct {
	MulticastHandle uint64 `protobuf:"fixed64,1,opt,name=multicast_handle,json=multicastHandle" json:"multicast_handle,omitempty"`
}

func (m *MulticastEntryStatus) Reset()                    { *m = MulticastEntryStatus{} }
func (m *MulticastEntryStatus) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryStatus) ProtoMessage()               {}
func (*MulticastEntryStatus) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

func (m *MulticastEntryStatus) GetMulticastHandle() uint64 {
	if m != nil {
		return m.MulticastHandle
	}
	return 0
}

type MulticastEntryResponse struct {
	ApiStatus   ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	EntryStatus *MulticastEntryStatus `protobuf:"bytes,2,opt,name=entry_status,json=entryStatus" json:"entry_status,omitempty"`
}

func (m *MulticastEntryResponse) Reset()                    { *m = MulticastEntryResponse{} }
func (m *MulticastEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryResponse) ProtoMessage()               {}
func (*MulticastEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{7} }

func (m *MulticastEntryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MulticastEntryResponse) GetEntryStatus() *MulticastEntryStatus {
	if m != nil {
		return m.EntryStatus
	}
	return nil
}

type MulticastEntryResponseMsg struct {
	Resp []*MulticastEntryResponse `protobuf:"bytes,1,rep,name=resp" json:"resp,omitempty"`
}

func (m *MulticastEntryResponseMsg) Reset()                    { *m = MulticastEntryResponseMsg{} }
func (m *MulticastEntryResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryResponseMsg) ProtoMessage()               {}
func (*MulticastEntryResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{8} }

func (m *MulticastEntryResponseMsg) GetResp() []*MulticastEntryResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type MulticastEntryDeleteRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *MulticastEntryKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *MulticastEntryDeleteRequest) Reset()                    { *m = MulticastEntryDeleteRequest{} }
func (m *MulticastEntryDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteRequest) ProtoMessage()               {}
func (*MulticastEntryDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{9} }

func (m *MulticastEntryDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MulticastEntryDeleteRequest) GetKeyOrHandle() *MulticastEntryKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type MulticastEntryDeleteRequestMsg struct {
	Request []*MulticastEntryDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MulticastEntryDeleteRequestMsg) Reset()         { *m = MulticastEntryDeleteRequestMsg{} }
func (m *MulticastEntryDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteRequestMsg) ProtoMessage()    {}
func (*MulticastEntryDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{10}
}

func (m *MulticastEntryDeleteRequestMsg) GetRequest() []*MulticastEntryDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MulticastEntryDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *MulticastEntryDeleteResponseMsg) Reset()         { *m = MulticastEntryDeleteResponseMsg{} }
func (m *MulticastEntryDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteResponseMsg) ProtoMessage()    {}
func (*MulticastEntryDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{11}
}

func (m *MulticastEntryDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

type MulticastEntryGetRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *MulticastEntryKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *MulticastEntryGetRequest) Reset()                    { *m = MulticastEntryGetRequest{} }
func (m *MulticastEntryGetRequest) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryGetRequest) ProtoMessage()               {}
func (*MulticastEntryGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{12} }

func (m *MulticastEntryGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MulticastEntryGetRequest) GetKeyOrHandle() *MulticastEntryKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type MulticastEntryGetRequestMsg struct {
	Request []*MulticastEntryGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MulticastEntryGetRequestMsg) Reset()                    { *m = MulticastEntryGetRequestMsg{} }
func (m *MulticastEntryGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryGetRequestMsg) ProtoMessage()               {}
func (*MulticastEntryGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{13} }

func (m *MulticastEntryGetRequestMsg) GetRequest() []*MulticastEntryGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MulticastEntryGetResponse struct {
	ApiStatus  ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	OifHandles []uint64  `protobuf:"fixed64,2,rep,packed,name=oif_handles,json=oifHandles" json:"oif_handles,omitempty"`
}

func (m *MulticastEntryGetResponse) Reset()                    { *m = MulticastEntryGetResponse{} }
func (m *MulticastEntryGetResponse) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryGetResponse) ProtoMessage()               {}
func (*MulticastEntryGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{14} }

func (m *MulticastEntryGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MulticastEntryGetResponse) GetOifHandles() []uint64 {
	if m != nil {
		return m.OifHandles
	}
	return nil
}

type MulticastEntryGetResponseMsg struct {
	Resp []*MulticastEntryGetResponse `protobuf:"bytes,1,rep,name=resp" json:"resp,omitempty"`
}

func (m *MulticastEntryGetResponseMsg) Reset()                    { *m = MulticastEntryGetResponseMsg{} }
func (m *MulticastEntryGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryGetResponseMsg) ProtoMessage()               {}
func (*MulticastEntryGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{15} }

func (m *MulticastEntryGetResponseMsg) GetResp() []*MulticastEntryGetResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

func init() {
	proto.RegisterType((*MulticastEntryKeyIP)(nil), "multicast.MulticastEntryKeyIP")
	proto.RegisterType((*MulticastEntryKeyMac)(nil), "multicast.MulticastEntryKeyMac")
	proto.RegisterType((*MulticastEntryKey)(nil), "multicast.MulticastEntryKey")
	proto.RegisterType((*MulticastEntryKeyHandle)(nil), "multicast.MulticastEntryKeyHandle")
	proto.RegisterType((*MulticastEntrySpec)(nil), "multicast.MulticastEntrySpec")
	proto.RegisterType((*MulticastEntryRequestMsg)(nil), "multicast.MulticastEntryRequestMsg")
	proto.RegisterType((*MulticastEntryStatus)(nil), "multicast.MulticastEntryStatus")
	proto.RegisterType((*MulticastEntryResponse)(nil), "multicast.MulticastEntryResponse")
	proto.RegisterType((*MulticastEntryResponseMsg)(nil), "multicast.MulticastEntryResponseMsg")
	proto.RegisterType((*MulticastEntryDeleteRequest)(nil), "multicast.MulticastEntryDeleteRequest")
	proto.RegisterType((*MulticastEntryDeleteRequestMsg)(nil), "multicast.MulticastEntryDeleteRequestMsg")
	proto.RegisterType((*MulticastEntryDeleteResponseMsg)(nil), "multicast.MulticastEntryDeleteResponseMsg")
	proto.RegisterType((*MulticastEntryGetRequest)(nil), "multicast.MulticastEntryGetRequest")
	proto.RegisterType((*MulticastEntryGetRequestMsg)(nil), "multicast.MulticastEntryGetRequestMsg")
	proto.RegisterType((*MulticastEntryGetResponse)(nil), "multicast.MulticastEntryGetResponse")
	proto.RegisterType((*MulticastEntryGetResponseMsg)(nil), "multicast.MulticastEntryGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Multicast service

type MulticastClient interface {
	MulticastEntryCreate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error)
	MulticastEntryUpdate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error)
	MulticastEntryDelete(ctx context.Context, in *MulticastEntryDeleteRequestMsg, opts ...grpc.CallOption) (*MulticastEntryDeleteResponseMsg, error)
	MulticastEntryGet(ctx context.Context, in *MulticastEntryGetRequestMsg, opts ...grpc.CallOption) (*MulticastEntryGetResponseMsg, error)
}

type multicastClient struct {
	cc *grpc.ClientConn
}

func NewMulticastClient(cc *grpc.ClientConn) MulticastClient {
	return &multicastClient{cc}
}

func (c *multicastClient) MulticastEntryCreate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error) {
	out := new(MulticastEntryResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) MulticastEntryUpdate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error) {
	out := new(MulticastEntryResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) MulticastEntryDelete(ctx context.Context, in *MulticastEntryDeleteRequestMsg, opts ...grpc.CallOption) (*MulticastEntryDeleteResponseMsg, error) {
	out := new(MulticastEntryDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) MulticastEntryGet(ctx context.Context, in *MulticastEntryGetRequestMsg, opts ...grpc.CallOption) (*MulticastEntryGetResponseMsg, error) {
	out := new(MulticastEntryGetResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Multicast service

type MulticastServer interface {
	MulticastEntryCreate(context.Context, *MulticastEntryRequestMsg) (*MulticastEntryResponseMsg, error)
	MulticastEntryUpdate(context.Context, *MulticastEntryRequestMsg) (*MulticastEntryResponseMsg, error)
	MulticastEntryDelete(context.Context, *MulticastEntryDeleteRequestMsg) (*MulticastEntryDeleteResponseMsg, error)
	MulticastEntryGet(context.Context, *MulticastEntryGetRequestMsg) (*MulticastEntryGetResponseMsg, error)
}

func RegisterMulticastServer(s *grpc.Server, srv MulticastServer) {
	s.RegisterService(&_Multicast_serviceDesc, srv)
}

func _Multicast_MulticastEntryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryCreate(ctx, req.(*MulticastEntryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_MulticastEntryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryUpdate(ctx, req.(*MulticastEntryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_MulticastEntryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryDelete(ctx, req.(*MulticastEntryDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_MulticastEntryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryGet(ctx, req.(*MulticastEntryGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Multicast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "multicast.Multicast",
	HandlerType: (*MulticastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MulticastEntryCreate",
			Handler:    _Multicast_MulticastEntryCreate_Handler,
		},
		{
			MethodName: "MulticastEntryUpdate",
			Handler:    _Multicast_MulticastEntryUpdate_Handler,
		},
		{
			MethodName: "MulticastEntryDelete",
			Handler:    _Multicast_MulticastEntryDelete_Handler,
		},
		{
			MethodName: "MulticastEntryGet",
			Handler:    _Multicast_MulticastEntryGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic/proto/hal/multicast.proto",
}

func init() { proto.RegisterFile("nic/proto/hal/multicast.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0xe3, 0x2a, 0x90, 0x31, 0xd0, 0x76, 0xb9, 0x85, 0xd2, 0x4b, 0x70, 0x4b, 0x49, 0x8b,
	0xd4, 0x54, 0x29, 0x08, 0x5e, 0x90, 0x68, 0xb8, 0x34, 0x15, 0x8a, 0x5a, 0x39, 0x42, 0x42, 0x08,
	0x29, 0xda, 0x3a, 0xd3, 0xd4, 0xc4, 0x89, 0x8d, 0x77, 0xf3, 0xe0, 0x2f, 0x40, 0x48, 0xf0, 0xc2,
	0x87, 0xf0, 0x8d, 0x68, 0xbd, 0x76, 0xdc, 0x6c, 0xae, 0x20, 0x24, 0x9e, 0x12, 0xaf, 0xcf, 0xcc,
	0x39, 0x73, 0xf6, 0xec, 0x26, 0xb0, 0xd6, 0x73, 0xec, 0xb2, 0x1f, 0x78, 0xdc, 0x2b, 0x5f, 0x50,
	0xb7, 0xdc, 0xed, 0xbb, 0xdc, 0xb1, 0x29, 0xe3, 0x7b, 0xd1, 0x1a, 0xc9, 0x0f, 0x16, 0x56, 0x6e,
	0xa7, 0x48, 0x1e, 0xfa, 0xc8, 0x24, 0xc2, 0xfc, 0xa6, 0xc1, 0xcd, 0x7a, 0x02, 0x7a, 0xd3, 0xe3,
	0x41, 0xf8, 0x0e, 0xc3, 0xe3, 0x53, 0xb2, 0x0b, 0xcb, 0x6e, 0xa5, 0xc9, 0xb0, 0xdd, 0xc5, 0x1e,
	0x6f, 0x5e, 0xd0, 0x5e, 0xcb, 0xc5, 0x82, 0x56, 0xd4, 0x4a, 0x39, 0x6b, 0xd1, 0xad, 0x34, 0xe4,
	0x7a, 0x2d, 0x5a, 0x26, 0x26, 0xe8, 0x2c, 0xb0, 0x0b, 0xd9, 0xa2, 0x56, 0x32, 0x2a, 0x4b, 0x7b,
	0xb2, 0xfd, 0xf1, 0xe9, 0x61, 0xab, 0x15, 0x20, 0x63, 0x96, 0x78, 0x29, 0x30, 0xed, 0xc0, 0x2f,
	0xe8, 0x93, 0x30, 0xed, 0xc0, 0x37, 0x4b, 0x70, 0x6b, 0x44, 0x4a, 0x9d, 0xda, 0x64, 0x49, 0xd6,
	0x4a, 0xf6, 0x08, 0xf9, 0x55, 0x83, 0xe5, 0x11, 0x28, 0xd9, 0x87, 0xac, 0x23, 0x61, 0x46, 0x65,
	0x7d, 0x2f, 0xf5, 0x62, 0xcc, 0x7c, 0xb5, 0x8c, 0x95, 0x75, 0x7c, 0x72, 0x00, 0x7a, 0x97, 0x26,
	0xca, 0x37, 0xa6, 0x95, 0xd4, 0xa9, 0x5d, 0xcb, 0x58, 0x02, 0x5d, 0x35, 0x20, 0xef, 0xf8, 0x4d,
	0x2f, 0x68, 0x76, 0xa9, 0x2d, 0xfc, 0xbb, 0x3b, 0x02, 0x8e, 0x7d, 0xd9, 0x07, 0xbd, 0x83, 0x61,
	0x2c, 0x68, 0x75, 0x5a, 0x77, 0xd1, 0xba, 0x83, 0x21, 0x79, 0x0c, 0x4b, 0x03, 0x54, 0x62, 0xba,
	0x10, 0x97, 0xab, 0x65, 0xac, 0xc5, 0xc1, 0x1b, 0xd9, 0xbe, 0xba, 0x08, 0xd7, 0x3b, 0x18, 0x0a,
	0x21, 0x12, 0x69, 0xfe, 0xd4, 0x80, 0x0c, 0xb7, 0x6e, 0xf8, 0x68, 0x93, 0x87, 0xb0, 0xd0, 0x45,
	0x4e, 0x63, 0x1d, 0xcb, 0xb1, 0xf7, 0x27, 0x67, 0x9f, 0xd1, 0xe6, 0x75, 0xe4, 0xd4, 0x8a, 0x5e,
	0x93, 0x27, 0x52, 0xad, 0xf4, 0xc2, 0x9c, 0xaa, 0x36, 0xa2, 0x93, 0x8a, 0x37, 0xc0, 0xf0, 0x9c,
	0xf3, 0x58, 0x01, 0x2b, 0xe8, 0x45, 0xbd, 0x94, 0xb3, 0xc0, 0x73, 0xce, 0x25, 0x88, 0x99, 0x0d,
	0x28, 0x0c, 0x37, 0xb0, 0xf0, 0x4b, 0x1f, 0x19, 0xaf, 0xb3, 0x36, 0x79, 0x06, 0x57, 0x02, 0xf9,
	0x54, 0xd0, 0x8a, 0x7a, 0xc9, 0xa8, 0xac, 0x4d, 0xa4, 0x15, 0x93, 0x58, 0x09, 0xda, 0x3c, 0x54,
	0x93, 0xd2, 0xe0, 0x94, 0xf7, 0x19, 0xd9, 0x19, 0xe3, 0x5f, 0x1c, 0x5a, 0xc5, 0x3d, 0xf3, 0x87,
	0x06, 0x77, 0x54, 0x61, 0xcc, 0xf7, 0x7a, 0x0c, 0x49, 0x19, 0x80, 0xfa, 0x4e, 0x93, 0x45, 0x3d,
	0xa3, 0xfa, 0x1b, 0x83, 0xc8, 0x1e, 0xfa, 0x8e, 0xe4, 0xb2, 0xf2, 0x34, 0xf9, 0x4a, 0xaa, 0x70,
	0x0d, 0x45, 0x87, 0xa4, 0x64, 0x56, 0x9e, 0xe2, 0x0e, 0x06, 0xa6, 0x0f, 0xa6, 0x05, 0xf7, 0xc6,
	0xcb, 0x11, 0x46, 0x3d, 0x85, 0x85, 0x00, 0x99, 0x1f, 0xbb, 0xf4, 0x60, 0x62, 0xe3, 0xa4, 0xc6,
	0x8a, 0xe0, 0xe6, 0x77, 0x0d, 0xee, 0x0f, 0x03, 0x5e, 0xa3, 0x8b, 0x1c, 0xe3, 0x2d, 0x98, 0x37,
	0x19, 0x6f, 0x95, 0xa0, 0xfd, 0x41, 0x46, 0x8c, 0x0e, 0x86, 0x27, 0x41, 0x6c, 0xf9, 0x19, 0xac,
	0x4f, 0x51, 0x23, 0xe6, 0x7c, 0xa9, 0x06, 0x62, 0x7b, 0x22, 0xc7, 0x50, 0x6d, 0x9a, 0x0c, 0x0b,
	0x36, 0xc6, 0xe3, 0x52, 0x33, 0xd5, 0xed, 0xd5, 0x67, 0x6c, 0xaf, 0x38, 0xe3, 0x4a, 0x86, 0x8f,
	0x90, 0xff, 0x27, 0x0f, 0x3f, 0xa9, 0x3b, 0x9a, 0x4a, 0x11, 0xb3, 0xbd, 0x50, 0x0d, 0xdc, 0x9c,
	0x48, 0x90, 0x16, 0xa6, 0xee, 0x75, 0xd5, 0x10, 0x46, 0xa0, 0xbf, 0x3d, 0x16, 0xca, 0xdd, 0x90,
	0x1d, 0xb9, 0x1b, 0x3e, 0xc0, 0xea, 0x44, 0x3a, 0x31, 0xcd, 0xf3, 0xa1, 0xd8, 0x6f, 0x4d, 0x1f,
	0xe5, 0x72, 0xf2, 0x2b, 0xbf, 0x74, 0xc8, 0x0f, 0x30, 0xc4, 0x56, 0xaf, 0x8b, 0x57, 0x01, 0x52,
	0x8e, 0x64, 0x73, 0xca, 0x41, 0x4a, 0x2c, 0x5d, 0xd9, 0x9a, 0x79, 0xda, 0xea, 0xac, 0x6d, 0x66,
	0x46, 0x49, 0xde, 0xfb, 0xad, 0x7f, 0x4e, 0xe2, 0xa9, 0x24, 0x32, 0xde, 0x64, 0x67, 0xbe, 0x73,
	0x22, 0xa8, 0x76, 0x67, 0x42, 0x2f, 0x13, 0x9e, 0xab, 0x3f, 0xb4, 0x47, 0xc8, 0xc9, 0xf6, 0x1c,
	0xa1, 0x12, 0x54, 0x8f, 0xe6, 0xd9, 0xb1, 0x88, 0xa7, 0x0a, 0x1f, 0xaf, 0x5e, 0x50, 0x37, 0xfa,
	0x4f, 0x72, 0x96, 0x8b, 0x3e, 0x0e, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xd1, 0x48, 0x4d,
	0xdd, 0x08, 0x00, 0x00,
}
