// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multicast.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MulticastEntrySpec struct {
	Meta          *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle   *MulticastEntryKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
	OifKeyHandles []*InterfaceKeyHandle    `protobuf:"bytes,3,rep,name=oif_key_handles,json=oifKeyHandles" json:"oif_key_handles,omitempty" venice:ref, venice:constraints={intf.InterfaceSpec.type=interface_pb2.IF_TYPE_ENIC}`
}

func (m *MulticastEntrySpec) Reset()                    { *m = MulticastEntrySpec{} }
func (m *MulticastEntrySpec) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntrySpec) ProtoMessage()               {}
func (*MulticastEntrySpec) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{0} }

func (m *MulticastEntrySpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MulticastEntrySpec) GetKeyOrHandle() *MulticastEntryKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *MulticastEntrySpec) GetOifKeyHandles() []*InterfaceKeyHandle {
	if m != nil {
		return m.OifKeyHandles
	}
	return nil
}

type MulticastEntryRequestMsg struct {
	Request []*MulticastEntrySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MulticastEntryRequestMsg) Reset()         { *m = MulticastEntryRequestMsg{} }
func (m *MulticastEntryRequestMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryRequestMsg) ProtoMessage()    {}
func (*MulticastEntryRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{1}
}

func (m *MulticastEntryRequestMsg) GetRequest() []*MulticastEntrySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type MulticastEntryStatus struct {
	MulticastHandle uint64 `protobuf:"fixed64,1,opt,name=multicast_handle,json=multicastHandle,proto3" json:"multicast_handle,omitempty"`
}

func (m *MulticastEntryStatus) Reset()                    { *m = MulticastEntryStatus{} }
func (m *MulticastEntryStatus) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryStatus) ProtoMessage()               {}
func (*MulticastEntryStatus) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{2} }

func (m *MulticastEntryStatus) GetMulticastHandle() uint64 {
	if m != nil {
		return m.MulticastHandle
	}
	return 0
}

type MulticastEntryResponse struct {
	ApiStatus   ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	EntryStatus *MulticastEntryStatus `protobuf:"bytes,2,opt,name=entry_status,json=entryStatus" json:"entry_status,omitempty"`
}

func (m *MulticastEntryResponse) Reset()                    { *m = MulticastEntryResponse{} }
func (m *MulticastEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryResponse) ProtoMessage()               {}
func (*MulticastEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{3} }

func (m *MulticastEntryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MulticastEntryResponse) GetEntryStatus() *MulticastEntryStatus {
	if m != nil {
		return m.EntryStatus
	}
	return nil
}

type MulticastEntryResponseMsg struct {
	Response []*MulticastEntryResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MulticastEntryResponseMsg) Reset()         { *m = MulticastEntryResponseMsg{} }
func (m *MulticastEntryResponseMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryResponseMsg) ProtoMessage()    {}
func (*MulticastEntryResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{4}
}

func (m *MulticastEntryResponseMsg) GetResponse() []*MulticastEntryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MulticastEntryDeleteRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *MulticastEntryKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *MulticastEntryDeleteRequest) Reset()         { *m = MulticastEntryDeleteRequest{} }
func (m *MulticastEntryDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteRequest) ProtoMessage()    {}
func (*MulticastEntryDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{5}
}

func (m *MulticastEntryDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MulticastEntryDeleteRequest) GetKeyOrHandle() *MulticastEntryKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type MulticastEntryDeleteRequestMsg struct {
	Request []*MulticastEntryDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MulticastEntryDeleteRequestMsg) Reset()         { *m = MulticastEntryDeleteRequestMsg{} }
func (m *MulticastEntryDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteRequestMsg) ProtoMessage()    {}
func (*MulticastEntryDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{6}
}

func (m *MulticastEntryDeleteRequestMsg) GetRequest() []*MulticastEntryDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MulticastEntryDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *MulticastEntryDeleteResponse) Reset()         { *m = MulticastEntryDeleteResponse{} }
func (m *MulticastEntryDeleteResponse) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteResponse) ProtoMessage()    {}
func (*MulticastEntryDeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{7}
}

func (m *MulticastEntryDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type MulticastEntryDeleteResponseMsg struct {
	Response []*MulticastEntryDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MulticastEntryDeleteResponseMsg) Reset()         { *m = MulticastEntryDeleteResponseMsg{} }
func (m *MulticastEntryDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryDeleteResponseMsg) ProtoMessage()    {}
func (*MulticastEntryDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{8}
}

func (m *MulticastEntryDeleteResponseMsg) GetResponse() []*MulticastEntryDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MulticastEntryGetRequest struct {
	Meta        *ObjectMeta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *MulticastEntryKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *MulticastEntryGetRequest) Reset()         { *m = MulticastEntryGetRequest{} }
func (m *MulticastEntryGetRequest) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryGetRequest) ProtoMessage()    {}
func (*MulticastEntryGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{9}
}

func (m *MulticastEntryGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MulticastEntryGetRequest) GetKeyOrHandle() *MulticastEntryKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type MulticastEntryGetRequestMsg struct {
	Request []*MulticastEntryGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MulticastEntryGetRequestMsg) Reset()         { *m = MulticastEntryGetRequestMsg{} }
func (m *MulticastEntryGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryGetRequestMsg) ProtoMessage()    {}
func (*MulticastEntryGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{10}
}

func (m *MulticastEntryGetRequestMsg) GetRequest() []*MulticastEntryGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// MulticastEntryStats is the statistics object of multicast entry type
type MulticastEntryStats struct {
	NumOifs uint32 `protobuf:"varint,1,opt,name=num_oifs,json=numOifs,proto3" json:"num_oifs,omitempty"`
}

func (m *MulticastEntryStats) Reset()                    { *m = MulticastEntryStats{} }
func (m *MulticastEntryStats) String() string            { return proto.CompactTextString(m) }
func (*MulticastEntryStats) ProtoMessage()               {}
func (*MulticastEntryStats) Descriptor() ([]byte, []int) { return fileDescriptorMulticast, []int{11} }

func (m *MulticastEntryStats) GetNumOifs() uint32 {
	if m != nil {
		return m.NumOifs
	}
	return 0
}

type MulticastEntryGetResponse struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *MulticastEntrySpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *MulticastEntryStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *MulticastEntryStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *MulticastEntryGetResponse) Reset()         { *m = MulticastEntryGetResponse{} }
func (m *MulticastEntryGetResponse) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryGetResponse) ProtoMessage()    {}
func (*MulticastEntryGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{12}
}

func (m *MulticastEntryGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MulticastEntryGetResponse) GetSpec() *MulticastEntrySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MulticastEntryGetResponse) GetStatus() *MulticastEntryStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MulticastEntryGetResponse) GetStats() *MulticastEntryStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type MulticastEntryGetResponseMsg struct {
	Response []*MulticastEntryGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MulticastEntryGetResponseMsg) Reset()         { *m = MulticastEntryGetResponseMsg{} }
func (m *MulticastEntryGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*MulticastEntryGetResponseMsg) ProtoMessage()    {}
func (*MulticastEntryGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorMulticast, []int{13}
}

func (m *MulticastEntryGetResponseMsg) GetResponse() []*MulticastEntryGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*MulticastEntrySpec)(nil), "multicast.MulticastEntrySpec")
	proto.RegisterType((*MulticastEntryRequestMsg)(nil), "multicast.MulticastEntryRequestMsg")
	proto.RegisterType((*MulticastEntryStatus)(nil), "multicast.MulticastEntryStatus")
	proto.RegisterType((*MulticastEntryResponse)(nil), "multicast.MulticastEntryResponse")
	proto.RegisterType((*MulticastEntryResponseMsg)(nil), "multicast.MulticastEntryResponseMsg")
	proto.RegisterType((*MulticastEntryDeleteRequest)(nil), "multicast.MulticastEntryDeleteRequest")
	proto.RegisterType((*MulticastEntryDeleteRequestMsg)(nil), "multicast.MulticastEntryDeleteRequestMsg")
	proto.RegisterType((*MulticastEntryDeleteResponse)(nil), "multicast.MulticastEntryDeleteResponse")
	proto.RegisterType((*MulticastEntryDeleteResponseMsg)(nil), "multicast.MulticastEntryDeleteResponseMsg")
	proto.RegisterType((*MulticastEntryGetRequest)(nil), "multicast.MulticastEntryGetRequest")
	proto.RegisterType((*MulticastEntryGetRequestMsg)(nil), "multicast.MulticastEntryGetRequestMsg")
	proto.RegisterType((*MulticastEntryStats)(nil), "multicast.MulticastEntryStats")
	proto.RegisterType((*MulticastEntryGetResponse)(nil), "multicast.MulticastEntryGetResponse")
	proto.RegisterType((*MulticastEntryGetResponseMsg)(nil), "multicast.MulticastEntryGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Multicast service

type MulticastClient interface {
	MulticastEntryCreate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error)
	MulticastEntryUpdate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error)
	MulticastEntryDelete(ctx context.Context, in *MulticastEntryDeleteRequestMsg, opts ...grpc.CallOption) (*MulticastEntryDeleteResponseMsg, error)
	MulticastEntryGet(ctx context.Context, in *MulticastEntryGetRequestMsg, opts ...grpc.CallOption) (*MulticastEntryGetResponseMsg, error)
}

type multicastClient struct {
	cc *grpc.ClientConn
}

func NewMulticastClient(cc *grpc.ClientConn) MulticastClient {
	return &multicastClient{cc}
}

func (c *multicastClient) MulticastEntryCreate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error) {
	out := new(MulticastEntryResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) MulticastEntryUpdate(ctx context.Context, in *MulticastEntryRequestMsg, opts ...grpc.CallOption) (*MulticastEntryResponseMsg, error) {
	out := new(MulticastEntryResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) MulticastEntryDelete(ctx context.Context, in *MulticastEntryDeleteRequestMsg, opts ...grpc.CallOption) (*MulticastEntryDeleteResponseMsg, error) {
	out := new(MulticastEntryDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastClient) MulticastEntryGet(ctx context.Context, in *MulticastEntryGetRequestMsg, opts ...grpc.CallOption) (*MulticastEntryGetResponseMsg, error) {
	out := new(MulticastEntryGetResponseMsg)
	err := grpc.Invoke(ctx, "/multicast.Multicast/MulticastEntryGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Multicast service

type MulticastServer interface {
	MulticastEntryCreate(context.Context, *MulticastEntryRequestMsg) (*MulticastEntryResponseMsg, error)
	MulticastEntryUpdate(context.Context, *MulticastEntryRequestMsg) (*MulticastEntryResponseMsg, error)
	MulticastEntryDelete(context.Context, *MulticastEntryDeleteRequestMsg) (*MulticastEntryDeleteResponseMsg, error)
	MulticastEntryGet(context.Context, *MulticastEntryGetRequestMsg) (*MulticastEntryGetResponseMsg, error)
}

func RegisterMulticastServer(s *grpc.Server, srv MulticastServer) {
	s.RegisterService(&_Multicast_serviceDesc, srv)
}

func _Multicast_MulticastEntryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryCreate(ctx, req.(*MulticastEntryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_MulticastEntryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryUpdate(ctx, req.(*MulticastEntryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_MulticastEntryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryDelete(ctx, req.(*MulticastEntryDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multicast_MulticastEntryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastEntryGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastServer).MulticastEntryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multicast.Multicast/MulticastEntryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastServer).MulticastEntryGet(ctx, req.(*MulticastEntryGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Multicast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "multicast.Multicast",
	HandlerType: (*MulticastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MulticastEntryCreate",
			Handler:    _Multicast_MulticastEntryCreate_Handler,
		},
		{
			MethodName: "MulticastEntryUpdate",
			Handler:    _Multicast_MulticastEntryUpdate_Handler,
		},
		{
			MethodName: "MulticastEntryDelete",
			Handler:    _Multicast_MulticastEntryDelete_Handler,
		},
		{
			MethodName: "MulticastEntryGet",
			Handler:    _Multicast_MulticastEntryGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multicast.proto",
}

func (m *MulticastEntrySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntrySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.OifKeyHandles) > 0 {
		for _, msg := range m.OifKeyHandles {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MulticastHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MulticastHandle))
		i += 8
	}
	return i, nil
}

func (m *MulticastEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.ApiStatus))
	}
	if m.EntryStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.EntryStatus.Size()))
		n3, err := m.EntryStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *MulticastEntryResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Meta.Size()))
		n4, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n5, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *MulticastEntryDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *MulticastEntryDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Meta.Size()))
		n6, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n7, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *MulticastEntryGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MulticastEntryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumOifs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.NumOifs))
	}
	return i, nil
}

func (m *MulticastEntryGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Spec.Size()))
		n8, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Status.Size()))
		n9, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMulticast(dAtA, i, uint64(m.Stats.Size()))
		n10, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *MulticastEntryGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastEntryGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMulticast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMulticast(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MulticastEntrySpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if len(m.OifKeyHandles) > 0 {
		for _, e := range m.OifKeyHandles {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryStatus) Size() (n int) {
	var l int
	_ = l
	if m.MulticastHandle != 0 {
		n += 9
	}
	return n
}

func (m *MulticastEntryResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMulticast(uint64(m.ApiStatus))
	}
	if m.EntryStatus != nil {
		l = m.EntryStatus.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}

func (m *MulticastEntryResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}

func (m *MulticastEntryDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMulticast(uint64(m.ApiStatus))
	}
	return n
}

func (m *MulticastEntryDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}

func (m *MulticastEntryGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func (m *MulticastEntryStats) Size() (n int) {
	var l int
	_ = l
	if m.NumOifs != 0 {
		n += 1 + sovMulticast(uint64(m.NumOifs))
	}
	return n
}

func (m *MulticastEntryGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovMulticast(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovMulticast(uint64(l))
	}
	return n
}

func (m *MulticastEntryGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovMulticast(uint64(l))
		}
	}
	return n
}

func sovMulticast(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMulticast(x uint64) (n int) {
	return sovMulticast(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MulticastEntrySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntrySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntrySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &MulticastEntryKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OifKeyHandles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OifKeyHandles = append(m.OifKeyHandles, &InterfaceKeyHandle{})
			if err := m.OifKeyHandles[len(m.OifKeyHandles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MulticastEntrySpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MulticastHandle", wireType)
			}
			m.MulticastHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MulticastHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryStatus == nil {
				m.EntryStatus = &MulticastEntryStatus{}
			}
			if err := m.EntryStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MulticastEntryResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &MulticastEntryKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MulticastEntryDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MulticastEntryDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &MulticastEntryKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MulticastEntryGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOifs", wireType)
			}
			m.NumOifs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOifs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MulticastEntrySpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MulticastEntryStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &MulticastEntryStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MulticastEntryGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastEntryGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastEntryGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MulticastEntryGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMulticast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMulticast(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMulticast
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMulticast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMulticast
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMulticast
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMulticast(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMulticast = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMulticast   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("multicast.proto", fileDescriptorMulticast) }

var fileDescriptorMulticast = []byte{
	// 722 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0x66, 0x29, 0x3f, 0x28, 0xa7, 0xf0, 0x03, 0x46, 0x25, 0xa5, 0x68, 0x8b, 0x03, 0xf2, 0xc7,
	0x98, 0x46, 0xab, 0x09, 0x89, 0x09, 0x89, 0x14, 0x41, 0x89, 0xa9, 0xe8, 0xa2, 0x31, 0x12, 0x93,
	0x75, 0xbb, 0x9c, 0xa5, 0x6b, 0xdb, 0xdd, 0x75, 0x67, 0x6a, 0xd2, 0x18, 0x2f, 0x7d, 0x03, 0x13,
	0x7c, 0x00, 0x2f, 0xbc, 0xf2, 0x39, 0xbc, 0xf4, 0x09, 0x88, 0xc1, 0x37, 0xe0, 0x09, 0xcc, 0xce,
	0xec, 0x76, 0xed, 0x96, 0x96, 0x5e, 0x90, 0x70, 0xd5, 0x9d, 0x99, 0xef, 0x7c, 0xe7, 0xcf, 0x77,
	0xce, 0x49, 0x61, 0xa2, 0xde, 0xa8, 0x71, 0xcb, 0xd0, 0x19, 0xcf, 0xbb, 0x9e, 0xc3, 0x1d, 0x32,
	0xda, 0xba, 0xc8, 0xa4, 0x78, 0xd3, 0x45, 0x26, 0xef, 0x33, 0xc9, 0x6a, 0x45, 0x7e, 0xd1, 0xef,
	0x83, 0x40, 0x4a, 0x21, 0x68, 0xd3, 0xe6, 0x5e, 0x73, 0xd7, 0x45, 0x83, 0xdc, 0x80, 0xa1, 0x3a,
	0x72, 0x3d, 0xad, 0xcc, 0x29, 0xcb, 0xa9, 0xc2, 0x54, 0x5e, 0x1a, 0xef, 0x94, 0xdf, 0xa1, 0xc1,
	0x4b, 0xc8, 0x75, 0x55, 0x3c, 0x93, 0xe7, 0x30, 0x5e, 0xc5, 0xa6, 0xe6, 0x78, 0x5a, 0x45, 0xb7,
	0xf7, 0x6b, 0x98, 0x1e, 0x14, 0xf8, 0xd9, 0x7c, 0xb5, 0x92, 0x6f, 0x67, 0x7d, 0x82, 0xcd, 0xc7,
	0x02, 0x52, 0x9c, 0x3c, 0x39, 0xca, 0x8d, 0x7d, 0x40, 0xdb, 0x32, 0xf0, 0x3e, 0xad, 0x62, 0x93,
	0xaa, 0xa9, 0x2a, 0x36, 0x77, 0x3c, 0xf9, 0x4c, 0x0e, 0x15, 0x98, 0x70, 0x2c, 0x53, 0xf3, 0x79,
	0x25, 0x29, 0x4b, 0x27, 0xe6, 0x12, 0xcb, 0xa9, 0xc2, 0xb4, 0xcf, 0xba, 0x6d, 0x73, 0xf4, 0x4c,
	0xdd, 0xc0, 0x88, 0xf0, 0xd5, 0xc9, 0x51, 0x6e, 0x37, 0x20, 0xf4, 0xd0, 0xbc, 0x35, 0x17, 0x7c,
	0x1b, 0x8e, 0xcd, 0xb8, 0xa7, 0x5b, 0x36, 0x67, 0x6b, 0x1f, 0x2d, 0x9b, 0x9b, 0x91, 0xb1, 0x9f,
	0xa3, 0xc8, 0x69, 0xcd, 0x0a, 0xaf, 0x34, 0xb7, 0x5c, 0xc8, 0x6f, 0x6f, 0x69, 0x2f, 0x5e, 0x3f,
	0xdb, 0xd4, 0x36, 0x9f, 0x6e, 0x6f, 0x7c, 0x52, 0xc7, 0x1d, 0xcb, 0x6c, 0xb9, 0x61, 0x74, 0x17,
	0xd2, 0xed, 0x39, 0xa9, 0xf8, 0xbe, 0x81, 0x8c, 0x97, 0xd8, 0x01, 0x59, 0x85, 0x11, 0x4f, 0x9e,
	0xd2, 0x8a, 0x08, 0xf6, 0x5a, 0x3e, 0xd2, 0xa2, 0xb3, 0xbe, 0x6a, 0x88, 0xa6, 0xeb, 0x70, 0x39,
	0xf6, 0xcc, 0x75, 0xde, 0x60, 0x64, 0x05, 0x26, 0x5b, 0x04, 0x61, 0x71, 0x7d, 0x31, 0x86, 0xd5,
	0x48, 0x64, 0x19, 0x18, 0xfd, 0xa6, 0xc0, 0x74, 0x3c, 0x30, 0xe6, 0x3a, 0x36, 0x43, 0xb2, 0x05,
	0xa0, 0xbb, 0x96, 0xc6, 0x04, 0xa7, 0xb0, 0xff, 0xbf, 0x30, 0x19, 0x88, 0xb9, 0xee, 0x5a, 0xd2,
	0x57, 0xf1, 0xca, 0xc9, 0x51, 0x6e, 0x2a, 0x28, 0x5a, 0x04, 0x57, 0x47, 0xf5, 0x10, 0x41, 0x8a,
	0x30, 0x86, 0x3e, 0x71, 0xc8, 0x24, 0x65, 0xce, 0x75, 0xcf, 0x51, 0x32, 0xa4, 0x30, 0x3a, 0xd0,
	0x3d, 0x98, 0x39, 0x3d, 0x4a, 0xbf, 0x7e, 0x6b, 0x90, 0xf4, 0x82, 0x63, 0x50, 0xc0, 0xeb, 0x5d,
	0xc9, 0x43, 0x3b, 0xb5, 0x65, 0x42, 0x0f, 0x15, 0x98, 0x6d, 0x07, 0x3d, 0xc4, 0x1a, 0x72, 0x0c,
	0x14, 0xba, 0xb8, 0x76, 0xa6, 0x65, 0xc8, 0xf6, 0x08, 0xcc, 0x4f, 0xfd, 0x41, 0xbc, 0x75, 0x16,
	0xbb, 0x66, 0xde, 0x66, 0x1b, 0xf5, 0x90, 0x09, 0x57, 0x4f, 0xc7, 0x9d, 0x6f, 0x17, 0x50, 0x13,
	0x72, 0xbd, 0xfc, 0xf8, 0xc9, 0x6c, 0x74, 0xe8, 0xb8, 0x74, 0x66, 0x36, 0x1d, 0x6a, 0x7e, 0x51,
	0xe2, 0x93, 0xf6, 0x08, 0xf9, 0xc5, 0x4b, 0xf9, 0x26, 0xde, 0x63, 0x51, 0x54, 0xb2, 0x85, 0x63,
	0x3a, 0xce, 0x77, 0xcd, 0x3c, 0x32, 0x8c, 0x44, 0xbc, 0x0d, 0x97, 0x3a, 0x67, 0x88, 0x91, 0x19,
	0x48, 0xda, 0x8d, 0xba, 0xe6, 0x58, 0xa6, 0x54, 0x6e, 0x5c, 0x1d, 0xb1, 0x1b, 0xf5, 0x1d, 0xcb,
	0x64, 0xf4, 0xf3, 0x60, 0x7c, 0xa2, 0x04, 0xef, 0x39, 0x8f, 0xfe, 0x1d, 0x18, 0x62, 0x2e, 0x1a,
	0x41, 0xfd, 0xce, 0x58, 0x6b, 0x02, 0x4a, 0x56, 0x61, 0x38, 0x70, 0x9b, 0xe8, 0x6f, 0x4f, 0x04,
	0x70, 0x72, 0x0f, 0xfe, 0xf3, 0xbf, 0x58, 0x7a, 0x48, 0xd8, 0x65, 0x7b, 0xda, 0x31, 0x55, 0x82,
	0xe9, 0xdb, 0x78, 0xfb, 0xff, 0x53, 0x06, 0x39, 0x60, 0xf1, 0x9e, 0x5c, 0xe8, 0xad, 0x4c, 0xbc,
	0x21, 0x0b, 0x3f, 0x12, 0x30, 0xda, 0xc2, 0x11, 0x23, 0xbe, 0xb2, 0x37, 0x3c, 0xd4, 0x39, 0x92,
	0xf9, 0x1e, 0x1b, 0x2b, 0xec, 0x92, 0xcc, 0xc2, 0x99, 0x6b, 0xad, 0xc4, 0x0e, 0xe8, 0x40, 0xa7,
	0x93, 0x97, 0xee, 0xfe, 0xb9, 0x3b, 0x71, 0xe2, 0x4e, 0xe4, 0x48, 0x92, 0x95, 0xfe, 0x36, 0x90,
	0xef, 0xea, 0x66, 0x9f, 0xe3, 0x2d, 0x1d, 0x9a, 0x30, 0xd5, 0x51, 0x6f, 0xb2, 0xd8, 0xc7, 0x9c,
	0xf8, 0xae, 0x96, 0xfa, 0x51, 0x4d, 0xf8, 0x29, 0x66, 0x7e, 0x1e, 0x67, 0x95, 0x5f, 0xc7, 0x59,
	0xe5, 0xf7, 0x71, 0x56, 0xf9, 0xfa, 0x27, 0x3b, 0xb0, 0x97, 0xac, 0xe8, 0x35, 0xf1, 0x8f, 0xa7,
	0x3c, 0x2c, 0x7e, 0xee, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x94, 0xf7, 0xb9, 0x2d, 0x09,
	0x00, 0x00,
}
