// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tcp_proxy_cb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TcpCbKeyHandle is used to operate on a tcp_cb either by its key or handle
type TcpCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TcpCbKeyHandle_TcpcbId
	//	*TcpCbKeyHandle_TcpcbHandle
	KeyOrHandle isTcpCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TcpCbKeyHandle) Reset()                    { *m = TcpCbKeyHandle{} }
func (m *TcpCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TcpCbKeyHandle) ProtoMessage()               {}
func (*TcpCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{0} }

type isTcpCbKeyHandle_KeyOrHandle interface {
	isTcpCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TcpCbKeyHandle_TcpcbId struct {
	TcpcbId uint32 `protobuf:"varint,1,opt,name=tcpcb_id,json=tcpcbId,proto3,oneof"`
}
type TcpCbKeyHandle_TcpcbHandle struct {
	TcpcbHandle uint64 `protobuf:"fixed64,2,opt,name=tcpcb_handle,json=tcpcbHandle,proto3,oneof"`
}

func (*TcpCbKeyHandle_TcpcbId) isTcpCbKeyHandle_KeyOrHandle()     {}
func (*TcpCbKeyHandle_TcpcbHandle) isTcpCbKeyHandle_KeyOrHandle() {}

func (m *TcpCbKeyHandle) GetKeyOrHandle() isTcpCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbKeyHandle) GetTcpcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbId); ok {
		return x.TcpcbId
	}
	return 0
}

func (m *TcpCbKeyHandle) GetTcpcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbHandle); ok {
		return x.TcpcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TcpCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TcpCbKeyHandle_OneofMarshaler, _TcpCbKeyHandle_OneofUnmarshaler, _TcpCbKeyHandle_OneofSizer, []interface{}{
		(*TcpCbKeyHandle_TcpcbId)(nil),
		(*TcpCbKeyHandle_TcpcbHandle)(nil),
	}
}

func _TcpCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.TcpcbHandle))
	case nil:
	default:
		return fmt.Errorf("TcpCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TcpCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TcpCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tcpcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tcpcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TcpCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TcpCbSpec captures all the tcp_cb level configuration
type TcpCbSpec struct {
	KeyOrHandle        *TcpCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RcvNxt             uint32          `protobuf:"varint,2,opt,name=rcv_nxt,json=rcvNxt,proto3" json:"rcv_nxt,omitempty"`
	SndNxt             uint32          `protobuf:"varint,3,opt,name=snd_nxt,json=sndNxt,proto3" json:"snd_nxt,omitempty"`
	SndUna             uint32          `protobuf:"varint,4,opt,name=snd_una,json=sndUna,proto3" json:"snd_una,omitempty"`
	RcvTsval           uint32          `protobuf:"varint,5,opt,name=rcv_tsval,json=rcvTsval,proto3" json:"rcv_tsval,omitempty"`
	TsRecent           uint32          `protobuf:"varint,6,opt,name=ts_recent,json=tsRecent,proto3" json:"ts_recent,omitempty"`
	SerqBase           uint64          `protobuf:"fixed64,7,opt,name=serq_base,json=serqBase,proto3" json:"serq_base,omitempty"`
	DebugDol           uint32          `protobuf:"varint,8,opt,name=debug_dol,json=debugDol,proto3" json:"debug_dol,omitempty"`
	SesqBase           uint64          `protobuf:"fixed64,9,opt,name=sesq_base,json=sesqBase,proto3" json:"sesq_base,omitempty"`
	SesqPi             uint32          `protobuf:"varint,10,opt,name=sesq_pi,json=sesqPi,proto3" json:"sesq_pi,omitempty"`
	SesqCi             uint32          `protobuf:"varint,11,opt,name=sesq_ci,json=sesqCi,proto3" json:"sesq_ci,omitempty"`
	SndWnd             uint32          `protobuf:"varint,12,opt,name=snd_wnd,json=sndWnd,proto3" json:"snd_wnd,omitempty"`
	SndCwnd            uint32          `protobuf:"varint,13,opt,name=snd_cwnd,json=sndCwnd,proto3" json:"snd_cwnd,omitempty"`
	RcvMss             uint32          `protobuf:"varint,14,opt,name=rcv_mss,json=rcvMss,proto3" json:"rcv_mss,omitempty"`
	SourcePort         uint32          `protobuf:"varint,15,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestPort           uint32          `protobuf:"varint,16,opt,name=dest_port,json=destPort,proto3" json:"dest_port,omitempty"`
	HeaderTemplate     []byte          `protobuf:"bytes,17,opt,name=header_template,json=headerTemplate,proto3" json:"header_template,omitempty"`
	State              uint32          `protobuf:"varint,18,opt,name=state,proto3" json:"state,omitempty"`
	SourceLif          uint32          `protobuf:"varint,19,opt,name=source_lif,json=sourceLif,proto3" json:"source_lif,omitempty"`
	AsesqBase          uint64          `protobuf:"fixed64,20,opt,name=asesq_base,json=asesqBase,proto3" json:"asesq_base,omitempty"`
	AsesqPi            uint32          `protobuf:"varint,21,opt,name=asesq_pi,json=asesqPi,proto3" json:"asesq_pi,omitempty"`
	AsesqCi            uint32          `protobuf:"varint,22,opt,name=asesq_ci,json=asesqCi,proto3" json:"asesq_ci,omitempty"`
	DebugDolTx         uint32          `protobuf:"varint,23,opt,name=debug_dol_tx,json=debugDolTx,proto3" json:"debug_dol_tx,omitempty"`
	HeaderLen          uint32          `protobuf:"varint,24,opt,name=header_len,json=headerLen,proto3" json:"header_len,omitempty"`
	PendingAckSend     bool            `protobuf:"varint,25,opt,name=pending_ack_send,json=pendingAckSend,proto3" json:"pending_ack_send,omitempty"`
	L7ProxyType        AppRedirType    `protobuf:"varint,26,opt,name=l7_proxy_type,json=l7ProxyType,proto3,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	SesqRetxCi         uint32          `protobuf:"varint,27,opt,name=sesq_retx_ci,json=sesqRetxCi,proto3" json:"sesq_retx_ci,omitempty"`
	RetxSndUna         uint64          `protobuf:"varint,28,opt,name=retx_snd_una,json=retxSndUna,proto3" json:"retx_snd_una,omitempty"`
	RxTs               uint64          `protobuf:"varint,29,opt,name=rx_ts,json=rxTs,proto3" json:"rx_ts,omitempty"`
	Rto                uint64          `protobuf:"varint,30,opt,name=rto,proto3" json:"rto,omitempty"`
	SndCwndCnt         uint32          `protobuf:"varint,31,opt,name=snd_cwnd_cnt,json=sndCwndCnt,proto3" json:"snd_cwnd_cnt,omitempty"`
	DebugDolTblsetaddr uint32          `protobuf:"varint,32,opt,name=debug_dol_tblsetaddr,json=debugDolTblsetaddr,proto3" json:"debug_dol_tblsetaddr,omitempty"`
	SerqPi             uint32          `protobuf:"varint,33,opt,name=serq_pi,json=serqPi,proto3" json:"serq_pi,omitempty"`
	PredFlags          uint32          `protobuf:"varint,34,opt,name=pred_flags,json=predFlags,proto3" json:"pred_flags,omitempty"`
	OtherQid           uint32          `protobuf:"varint,35,opt,name=other_qid,json=otherQid,proto3" json:"other_qid,omitempty"`
}

func (m *TcpCbSpec) Reset()                    { *m = TcpCbSpec{} }
func (m *TcpCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpCbSpec) ProtoMessage()               {}
func (*TcpCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{1} }

func (m *TcpCbSpec) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbSpec) GetRcvNxt() uint32 {
	if m != nil {
		return m.RcvNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndNxt() uint32 {
	if m != nil {
		return m.SndNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndUna() uint32 {
	if m != nil {
		return m.SndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRcvTsval() uint32 {
	if m != nil {
		return m.RcvTsval
	}
	return 0
}

func (m *TcpCbSpec) GetTsRecent() uint32 {
	if m != nil {
		return m.TsRecent
	}
	return 0
}

func (m *TcpCbSpec) GetSerqBase() uint64 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TcpCbSpec) GetSesqBase() uint64 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetSesqPi() uint32 {
	if m != nil {
		return m.SesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetSesqCi() uint32 {
	if m != nil {
		return m.SesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetSndWnd() uint32 {
	if m != nil {
		return m.SndWnd
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwnd() uint32 {
	if m != nil {
		return m.SndCwnd
	}
	return 0
}

func (m *TcpCbSpec) GetRcvMss() uint32 {
	if m != nil {
		return m.RcvMss
	}
	return 0
}

func (m *TcpCbSpec) GetSourcePort() uint32 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *TcpCbSpec) GetDestPort() uint32 {
	if m != nil {
		return m.DestPort
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderTemplate() []byte {
	if m != nil {
		return m.HeaderTemplate
	}
	return nil
}

func (m *TcpCbSpec) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *TcpCbSpec) GetSourceLif() uint32 {
	if m != nil {
		return m.SourceLif
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqBase() uint64 {
	if m != nil {
		return m.AsesqBase
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqPi() uint32 {
	if m != nil {
		return m.AsesqPi
	}
	return 0
}

func (m *TcpCbSpec) GetAsesqCi() uint32 {
	if m != nil {
		return m.AsesqCi
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTx() uint32 {
	if m != nil {
		return m.DebugDolTx
	}
	return 0
}

func (m *TcpCbSpec) GetHeaderLen() uint32 {
	if m != nil {
		return m.HeaderLen
	}
	return 0
}

func (m *TcpCbSpec) GetPendingAckSend() bool {
	if m != nil {
		return m.PendingAckSend
	}
	return false
}

func (m *TcpCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TcpCbSpec) GetSesqRetxCi() uint32 {
	if m != nil {
		return m.SesqRetxCi
	}
	return 0
}

func (m *TcpCbSpec) GetRetxSndUna() uint64 {
	if m != nil {
		return m.RetxSndUna
	}
	return 0
}

func (m *TcpCbSpec) GetRxTs() uint64 {
	if m != nil {
		return m.RxTs
	}
	return 0
}

func (m *TcpCbSpec) GetRto() uint64 {
	if m != nil {
		return m.Rto
	}
	return 0
}

func (m *TcpCbSpec) GetSndCwndCnt() uint32 {
	if m != nil {
		return m.SndCwndCnt
	}
	return 0
}

func (m *TcpCbSpec) GetDebugDolTblsetaddr() uint32 {
	if m != nil {
		return m.DebugDolTblsetaddr
	}
	return 0
}

func (m *TcpCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TcpCbSpec) GetPredFlags() uint32 {
	if m != nil {
		return m.PredFlags
	}
	return 0
}

func (m *TcpCbSpec) GetOtherQid() uint32 {
	if m != nil {
		return m.OtherQid
	}
	return 0
}

// TcpCbRequestMsg is batched add or modify tcpcb request
type TcpCbRequestMsg struct {
	Request []*TcpCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbRequestMsg) Reset()                    { *m = TcpCbRequestMsg{} }
func (m *TcpCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbRequestMsg) ProtoMessage()               {}
func (*TcpCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{2} }

func (m *TcpCbRequestMsg) GetRequest() []*TcpCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStatus is the operational status of a given tcpcb
type TcpCbStatus struct {
	TcpcbHandle uint64 `protobuf:"fixed64,1,opt,name=tcpcb_handle,json=tcpcbHandle,proto3" json:"tcpcb_handle,omitempty"`
}

func (m *TcpCbStatus) Reset()                    { *m = TcpCbStatus{} }
func (m *TcpCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStatus) ProtoMessage()               {}
func (*TcpCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{3} }

func (m *TcpCbStatus) GetTcpcbHandle() uint64 {
	if m != nil {
		return m.TcpcbHandle
	}
	return 0
}

// TcpCbResponse is response to TcpCbSpec
type TcpCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	TcpcbStatus *TcpCbStatus `protobuf:"bytes,2,opt,name=tcpcb_status,json=tcpcbStatus" json:"tcpcb_status,omitempty"`
}

func (m *TcpCbResponse) Reset()                    { *m = TcpCbResponse{} }
func (m *TcpCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponse) ProtoMessage()               {}
func (*TcpCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{4} }

func (m *TcpCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbResponse) GetTcpcbStatus() *TcpCbStatus {
	if m != nil {
		return m.TcpcbStatus
	}
	return nil
}

// TcpCbResponseMsg is batched response to TcpCbRequestMsg
type TcpCbResponseMsg struct {
	Response []*TcpCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbResponseMsg) Reset()                    { *m = TcpCbResponseMsg{} }
func (m *TcpCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponseMsg) ProtoMessage()               {}
func (*TcpCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{5} }

func (m *TcpCbResponseMsg) GetResponse() []*TcpCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpCbDeleteRequest is used to delete a tcpcb
type TcpCbDeleteRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbDeleteRequest) Reset()                    { *m = TcpCbDeleteRequest{} }
func (m *TcpCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequest) ProtoMessage()               {}
func (*TcpCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{6} }

func (m *TcpCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TcpCbDeleteRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbDeleteRequestMsg is used to delete a batch of tcpcbs
type TcpCbDeleteRequestMsg struct {
	Request []*TcpCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbDeleteRequestMsg) Reset()                    { *m = TcpCbDeleteRequestMsg{} }
func (m *TcpCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequestMsg) ProtoMessage()               {}
func (*TcpCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{7} }

func (m *TcpCbDeleteRequestMsg) GetRequest() []*TcpCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbDeleteResponseMsg is batched response to TcpCbDeleteRequestMsg
type TcpCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TcpCbDeleteResponseMsg) Reset()                    { *m = TcpCbDeleteResponseMsg{} }
func (m *TcpCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteResponseMsg) ProtoMessage()               {}
func (*TcpCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{8} }

func (m *TcpCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TcpCbGetRequest is used to get information about a tcpcb
type TcpCbGetRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbGetRequest) Reset()                    { *m = TcpCbGetRequest{} }
func (m *TcpCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequest) ProtoMessage()               {}
func (*TcpCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{9} }

func (m *TcpCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TcpCbGetRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbGetRequestMsg is batched GET requests for tcpcbs
type TcpCbGetRequestMsg struct {
	Request []*TcpCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbGetRequestMsg) Reset()                    { *m = TcpCbGetRequestMsg{} }
func (m *TcpCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequestMsg) ProtoMessage()               {}
func (*TcpCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{10} }

func (m *TcpCbGetRequestMsg) GetRequest() []*TcpCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStats is the statistics object for each tcpcb
type TcpCbStats struct {
	BytesRcvd            uint64 `protobuf:"varint,1,opt,name=bytes_rcvd,json=bytesRcvd,proto3" json:"bytes_rcvd,omitempty"`
	PktsRcvd             uint64 `protobuf:"varint,2,opt,name=pkts_rcvd,json=pktsRcvd,proto3" json:"pkts_rcvd,omitempty"`
	PagesAlloced         uint64 `protobuf:"varint,3,opt,name=pages_alloced,json=pagesAlloced,proto3" json:"pages_alloced,omitempty"`
	DescAlloced          uint64 `protobuf:"varint,4,opt,name=desc_alloced,json=descAlloced,proto3" json:"desc_alloced,omitempty"`
	DebugNumPktToMem     uint64 `protobuf:"varint,5,opt,name=debug_num_pkt_to_mem,json=debugNumPktToMem,proto3" json:"debug_num_pkt_to_mem,omitempty"`
	DebugNumPhvToMem     uint64 `protobuf:"varint,6,opt,name=debug_num_phv_to_mem,json=debugNumPhvToMem,proto3" json:"debug_num_phv_to_mem,omitempty"`
	DebugAtomicDelta     uint32 `protobuf:"varint,8,opt,name=debug_atomic_delta,json=debugAtomicDelta,proto3" json:"debug_atomic_delta,omitempty"`
	DebugAtomic0Incr1247 uint32 `protobuf:"varint,9,opt,name=debug_atomic0_incr1247,json=debugAtomic0Incr1247,proto3" json:"debug_atomic0_incr1247,omitempty"`
	DebugAtomic1Incr247  uint32 `protobuf:"varint,10,opt,name=debug_atomic1_incr247,json=debugAtomic1Incr247,proto3" json:"debug_atomic1_incr247,omitempty"`
	DebugAtomic2Incr47   uint32 `protobuf:"varint,11,opt,name=debug_atomic2_incr47,json=debugAtomic2Incr47,proto3" json:"debug_atomic2_incr47,omitempty"`
	DebugAtomic3Incr47   uint32 `protobuf:"varint,12,opt,name=debug_atomic3_incr47,json=debugAtomic3Incr47,proto3" json:"debug_atomic3_incr47,omitempty"`
	DebugAtomic4Incr7    uint32 `protobuf:"varint,13,opt,name=debug_atomic4_incr7,json=debugAtomic4Incr7,proto3" json:"debug_atomic4_incr7,omitempty"`
	DebugAtomic5Incr7    uint32 `protobuf:"varint,14,opt,name=debug_atomic5_incr7,json=debugAtomic5Incr7,proto3" json:"debug_atomic5_incr7,omitempty"`
	DebugAtomic6Incr7    uint32 `protobuf:"varint,15,opt,name=debug_atomic6_incr7,json=debugAtomic6Incr7,proto3" json:"debug_atomic6_incr7,omitempty"`
	BytesAcked           uint64 `protobuf:"varint,16,opt,name=bytes_acked,json=bytesAcked,proto3" json:"bytes_acked,omitempty"`
	SlowPathCnt          uint64 `protobuf:"varint,17,opt,name=slow_path_cnt,json=slowPathCnt,proto3" json:"slow_path_cnt,omitempty"`
	SerqFullCnt          uint64 `protobuf:"varint,18,opt,name=serq_full_cnt,json=serqFullCnt,proto3" json:"serq_full_cnt,omitempty"`
	OooCnt               uint64 `protobuf:"varint,19,opt,name=ooo_cnt,json=oooCnt,proto3" json:"ooo_cnt,omitempty"`
	BytesSent            uint64 `protobuf:"varint,10001,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	PktsSent             uint64 `protobuf:"varint,10002,opt,name=pkts_sent,json=pktsSent,proto3" json:"pkts_sent,omitempty"`
	DebugNumPhvToPkt     uint64 `protobuf:"varint,10003,opt,name=debug_num_phv_to_pkt,json=debugNumPhvToPkt,proto3" json:"debug_num_phv_to_pkt,omitempty"`
	DebugNumMemToPkt     uint64 `protobuf:"varint,10004,opt,name=debug_num_mem_to_pkt,json=debugNumMemToPkt,proto3" json:"debug_num_mem_to_pkt,omitempty"`
}

func (m *TcpCbStats) Reset()                    { *m = TcpCbStats{} }
func (m *TcpCbStats) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStats) ProtoMessage()               {}
func (*TcpCbStats) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{11} }

func (m *TcpCbStats) GetBytesRcvd() uint64 {
	if m != nil {
		return m.BytesRcvd
	}
	return 0
}

func (m *TcpCbStats) GetPktsRcvd() uint64 {
	if m != nil {
		return m.PktsRcvd
	}
	return 0
}

func (m *TcpCbStats) GetPagesAlloced() uint64 {
	if m != nil {
		return m.PagesAlloced
	}
	return 0
}

func (m *TcpCbStats) GetDescAlloced() uint64 {
	if m != nil {
		return m.DescAlloced
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumPktToMem() uint64 {
	if m != nil {
		return m.DebugNumPktToMem
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumPhvToMem() uint64 {
	if m != nil {
		return m.DebugNumPhvToMem
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomicDelta() uint32 {
	if m != nil {
		return m.DebugAtomicDelta
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic0Incr1247() uint32 {
	if m != nil {
		return m.DebugAtomic0Incr1247
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic1Incr247() uint32 {
	if m != nil {
		return m.DebugAtomic1Incr247
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic2Incr47() uint32 {
	if m != nil {
		return m.DebugAtomic2Incr47
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic3Incr47() uint32 {
	if m != nil {
		return m.DebugAtomic3Incr47
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic4Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic4Incr7
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic5Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic5Incr7
	}
	return 0
}

func (m *TcpCbStats) GetDebugAtomic6Incr7() uint32 {
	if m != nil {
		return m.DebugAtomic6Incr7
	}
	return 0
}

func (m *TcpCbStats) GetBytesAcked() uint64 {
	if m != nil {
		return m.BytesAcked
	}
	return 0
}

func (m *TcpCbStats) GetSlowPathCnt() uint64 {
	if m != nil {
		return m.SlowPathCnt
	}
	return 0
}

func (m *TcpCbStats) GetSerqFullCnt() uint64 {
	if m != nil {
		return m.SerqFullCnt
	}
	return 0
}

func (m *TcpCbStats) GetOooCnt() uint64 {
	if m != nil {
		return m.OooCnt
	}
	return 0
}

func (m *TcpCbStats) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *TcpCbStats) GetPktsSent() uint64 {
	if m != nil {
		return m.PktsSent
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumPhvToPkt() uint64 {
	if m != nil {
		return m.DebugNumPhvToPkt
	}
	return 0
}

func (m *TcpCbStats) GetDebugNumMemToPkt() uint64 {
	if m != nil {
		return m.DebugNumMemToPkt
	}
	return 0
}

// TcpCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
type TcpCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TcpCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TcpCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TcpCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TcpCbGetResponse) Reset()                    { *m = TcpCbGetResponse{} }
func (m *TcpCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponse) ProtoMessage()               {}
func (*TcpCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{12} }

func (m *TcpCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbGetResponse) GetSpec() *TcpCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TcpCbGetResponse) GetStatus() *TcpCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TcpCbGetResponse) GetStats() *TcpCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TcpCbGetResponseMsg is batched response to TcpCbGetRequestMsg
type TcpCbGetResponseMsg struct {
	Response []*TcpCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbGetResponseMsg) Reset()                    { *m = TcpCbGetResponseMsg{} }
func (m *TcpCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponseMsg) ProtoMessage()               {}
func (*TcpCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorTcpProxyCb, []int{13} }

func (m *TcpCbGetResponseMsg) GetResponse() []*TcpCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpCbKeyHandle)(nil), "tcpcb.TcpCbKeyHandle")
	proto.RegisterType((*TcpCbSpec)(nil), "tcpcb.TcpCbSpec")
	proto.RegisterType((*TcpCbRequestMsg)(nil), "tcpcb.TcpCbRequestMsg")
	proto.RegisterType((*TcpCbStatus)(nil), "tcpcb.TcpCbStatus")
	proto.RegisterType((*TcpCbResponse)(nil), "tcpcb.TcpCbResponse")
	proto.RegisterType((*TcpCbResponseMsg)(nil), "tcpcb.TcpCbResponseMsg")
	proto.RegisterType((*TcpCbDeleteRequest)(nil), "tcpcb.TcpCbDeleteRequest")
	proto.RegisterType((*TcpCbDeleteRequestMsg)(nil), "tcpcb.TcpCbDeleteRequestMsg")
	proto.RegisterType((*TcpCbDeleteResponseMsg)(nil), "tcpcb.TcpCbDeleteResponseMsg")
	proto.RegisterType((*TcpCbGetRequest)(nil), "tcpcb.TcpCbGetRequest")
	proto.RegisterType((*TcpCbGetRequestMsg)(nil), "tcpcb.TcpCbGetRequestMsg")
	proto.RegisterType((*TcpCbStats)(nil), "tcpcb.TcpCbStats")
	proto.RegisterType((*TcpCbGetResponse)(nil), "tcpcb.TcpCbGetResponse")
	proto.RegisterType((*TcpCbGetResponseMsg)(nil), "tcpcb.TcpCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TcpCb service

type TcpCbClient interface {
	TcpCbCreate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error)
	TcpCbUpdate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error)
	TcpCbDelete(ctx context.Context, in *TcpCbDeleteRequestMsg, opts ...grpc.CallOption) (*TcpCbDeleteResponseMsg, error)
	TcpCbGet(ctx context.Context, in *TcpCbGetRequestMsg, opts ...grpc.CallOption) (*TcpCbGetResponseMsg, error)
}

type tcpCbClient struct {
	cc *grpc.ClientConn
}

func NewTcpCbClient(cc *grpc.ClientConn) TcpCbClient {
	return &tcpCbClient{cc}
}

func (c *tcpCbClient) TcpCbCreate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	out := new(TcpCbResponseMsg)
	err := grpc.Invoke(ctx, "/tcpcb.TcpCb/TcpCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpCbClient) TcpCbUpdate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	out := new(TcpCbResponseMsg)
	err := grpc.Invoke(ctx, "/tcpcb.TcpCb/TcpCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpCbClient) TcpCbDelete(ctx context.Context, in *TcpCbDeleteRequestMsg, opts ...grpc.CallOption) (*TcpCbDeleteResponseMsg, error) {
	out := new(TcpCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/tcpcb.TcpCb/TcpCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpCbClient) TcpCbGet(ctx context.Context, in *TcpCbGetRequestMsg, opts ...grpc.CallOption) (*TcpCbGetResponseMsg, error) {
	out := new(TcpCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/tcpcb.TcpCb/TcpCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TcpCb service

type TcpCbServer interface {
	TcpCbCreate(context.Context, *TcpCbRequestMsg) (*TcpCbResponseMsg, error)
	TcpCbUpdate(context.Context, *TcpCbRequestMsg) (*TcpCbResponseMsg, error)
	TcpCbDelete(context.Context, *TcpCbDeleteRequestMsg) (*TcpCbDeleteResponseMsg, error)
	TcpCbGet(context.Context, *TcpCbGetRequestMsg) (*TcpCbGetResponseMsg, error)
}

func RegisterTcpCbServer(s *grpc.Server, srv TcpCbServer) {
	s.RegisterService(&_TcpCb_serviceDesc, srv)
}

func _TcpCb_TcpCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpCbServer).TcpCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpcb.TcpCb/TcpCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpCbServer).TcpCbCreate(ctx, req.(*TcpCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpCb_TcpCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpCbServer).TcpCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpcb.TcpCb/TcpCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpCbServer).TcpCbUpdate(ctx, req.(*TcpCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpCb_TcpCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpCbServer).TcpCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpcb.TcpCb/TcpCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpCbServer).TcpCbDelete(ctx, req.(*TcpCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpCb_TcpCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpCbServer).TcpCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpcb.TcpCb/TcpCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpCbServer).TcpCbGet(ctx, req.(*TcpCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _TcpCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tcpcb.TcpCb",
	HandlerType: (*TcpCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TcpCbCreate",
			Handler:    _TcpCb_TcpCbCreate_Handler,
		},
		{
			MethodName: "TcpCbUpdate",
			Handler:    _TcpCb_TcpCbUpdate_Handler,
		},
		{
			MethodName: "TcpCbDelete",
			Handler:    _TcpCb_TcpCbDelete_Handler,
		},
		{
			MethodName: "TcpCbGet",
			Handler:    _TcpCb_TcpCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcp_proxy_cb.proto",
}

func (m *TcpCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *TcpCbKeyHandle_TcpcbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.TcpcbId))
	return i, nil
}
func (m *TcpCbKeyHandle_TcpcbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TcpcbHandle))
	i += 8
	return i, nil
}
func (m *TcpCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RcvNxt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.RcvNxt))
	}
	if m.SndNxt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SndNxt))
	}
	if m.SndUna != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SndUna))
	}
	if m.RcvTsval != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.RcvTsval))
	}
	if m.TsRecent != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.TsRecent))
	}
	if m.SerqBase != 0 {
		dAtA[i] = 0x39
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SerqBase))
		i += 8
	}
	if m.DebugDol != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugDol))
	}
	if m.SesqBase != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SesqBase))
		i += 8
	}
	if m.SesqPi != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SesqPi))
	}
	if m.SesqCi != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SesqCi))
	}
	if m.SndWnd != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SndWnd))
	}
	if m.SndCwnd != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SndCwnd))
	}
	if m.RcvMss != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.RcvMss))
	}
	if m.SourcePort != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SourcePort))
	}
	if m.DestPort != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DestPort))
	}
	if len(m.HeaderTemplate) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(len(m.HeaderTemplate)))
		i += copy(dAtA[i:], m.HeaderTemplate)
	}
	if m.State != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.State))
	}
	if m.SourceLif != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SourceLif))
	}
	if m.AsesqBase != 0 {
		dAtA[i] = 0xa1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.AsesqBase))
		i += 8
	}
	if m.AsesqPi != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.AsesqPi))
	}
	if m.AsesqCi != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.AsesqCi))
	}
	if m.DebugDolTx != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugDolTx))
	}
	if m.HeaderLen != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.HeaderLen))
	}
	if m.PendingAckSend {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.PendingAckSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.L7ProxyType != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.L7ProxyType))
	}
	if m.SesqRetxCi != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SesqRetxCi))
	}
	if m.RetxSndUna != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.RetxSndUna))
	}
	if m.RxTs != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.RxTs))
	}
	if m.Rto != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.Rto))
	}
	if m.SndCwndCnt != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SndCwndCnt))
	}
	if m.DebugDolTblsetaddr != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugDolTblsetaddr))
	}
	if m.SerqPi != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SerqPi))
	}
	if m.PredFlags != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.PredFlags))
	}
	if m.OtherQid != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.OtherQid))
	}
	return i, nil
}

func (m *TcpCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTcpProxyCb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TcpcbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TcpcbHandle))
		i += 8
	}
	return i, nil
}

func (m *TcpCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.TcpcbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.TcpcbStatus.Size()))
		n3, err := m.TcpcbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *TcpCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTcpProxyCb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.Meta.Size()))
		n4, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n5, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *TcpCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTcpProxyCb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA7 := make([]byte, len(m.ApiStatus)*10)
		var j6 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *TcpCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.Meta.Size()))
		n8, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n9, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *TcpCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTcpProxyCb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TcpCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BytesRcvd != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.BytesRcvd))
	}
	if m.PktsRcvd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.PktsRcvd))
	}
	if m.PagesAlloced != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.PagesAlloced))
	}
	if m.DescAlloced != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DescAlloced))
	}
	if m.DebugNumPktToMem != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugNumPktToMem))
	}
	if m.DebugNumPhvToMem != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugNumPhvToMem))
	}
	if m.DebugAtomicDelta != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugAtomicDelta))
	}
	if m.DebugAtomic0Incr1247 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugAtomic0Incr1247))
	}
	if m.DebugAtomic1Incr247 != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugAtomic1Incr247))
	}
	if m.DebugAtomic2Incr47 != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugAtomic2Incr47))
	}
	if m.DebugAtomic3Incr47 != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugAtomic3Incr47))
	}
	if m.DebugAtomic4Incr7 != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugAtomic4Incr7))
	}
	if m.DebugAtomic5Incr7 != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugAtomic5Incr7))
	}
	if m.DebugAtomic6Incr7 != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugAtomic6Incr7))
	}
	if m.BytesAcked != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.BytesAcked))
	}
	if m.SlowPathCnt != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SlowPathCnt))
	}
	if m.SerqFullCnt != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.SerqFullCnt))
	}
	if m.OooCnt != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.OooCnt))
	}
	if m.BytesSent != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.BytesSent))
	}
	if m.PktsSent != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.PktsSent))
	}
	if m.DebugNumPhvToPkt != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugNumPhvToPkt))
	}
	if m.DebugNumMemToPkt != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0xf1
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.DebugNumMemToPkt))
	}
	return i, nil
}

func (m *TcpCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.Spec.Size()))
		n10, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTcpProxyCb(dAtA, i, uint64(m.Stats.Size()))
		n12, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *TcpCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TcpCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTcpProxyCb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTcpProxyCb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TcpCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *TcpCbKeyHandle_TcpcbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTcpProxyCb(uint64(m.TcpcbId))
	return n
}
func (m *TcpCbKeyHandle_TcpcbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *TcpCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovTcpProxyCb(uint64(l))
	}
	if m.RcvNxt != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.RcvNxt))
	}
	if m.SndNxt != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.SndNxt))
	}
	if m.SndUna != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.SndUna))
	}
	if m.RcvTsval != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.RcvTsval))
	}
	if m.TsRecent != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.TsRecent))
	}
	if m.SerqBase != 0 {
		n += 9
	}
	if m.DebugDol != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugDol))
	}
	if m.SesqBase != 0 {
		n += 9
	}
	if m.SesqPi != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.SesqPi))
	}
	if m.SesqCi != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.SesqCi))
	}
	if m.SndWnd != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.SndWnd))
	}
	if m.SndCwnd != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.SndCwnd))
	}
	if m.RcvMss != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.RcvMss))
	}
	if m.SourcePort != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.SourcePort))
	}
	if m.DestPort != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.DestPort))
	}
	l = len(m.HeaderTemplate)
	if l > 0 {
		n += 2 + l + sovTcpProxyCb(uint64(l))
	}
	if m.State != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.State))
	}
	if m.SourceLif != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.SourceLif))
	}
	if m.AsesqBase != 0 {
		n += 10
	}
	if m.AsesqPi != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.AsesqPi))
	}
	if m.AsesqCi != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.AsesqCi))
	}
	if m.DebugDolTx != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.DebugDolTx))
	}
	if m.HeaderLen != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.HeaderLen))
	}
	if m.PendingAckSend {
		n += 3
	}
	if m.L7ProxyType != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.L7ProxyType))
	}
	if m.SesqRetxCi != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.SesqRetxCi))
	}
	if m.RetxSndUna != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.RetxSndUna))
	}
	if m.RxTs != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.RxTs))
	}
	if m.Rto != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.Rto))
	}
	if m.SndCwndCnt != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.SndCwndCnt))
	}
	if m.DebugDolTblsetaddr != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.DebugDolTblsetaddr))
	}
	if m.SerqPi != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.SerqPi))
	}
	if m.PredFlags != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.PredFlags))
	}
	if m.OtherQid != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.OtherQid))
	}
	return n
}

func (m *TcpCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovTcpProxyCb(uint64(l))
		}
	}
	return n
}

func (m *TcpCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.TcpcbHandle != 0 {
		n += 9
	}
	return n
}

func (m *TcpCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.ApiStatus))
	}
	if m.TcpcbStatus != nil {
		l = m.TcpcbStatus.Size()
		n += 1 + l + sovTcpProxyCb(uint64(l))
	}
	return n
}

func (m *TcpCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovTcpProxyCb(uint64(l))
		}
	}
	return n
}

func (m *TcpCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovTcpProxyCb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovTcpProxyCb(uint64(l))
	}
	return n
}

func (m *TcpCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovTcpProxyCb(uint64(l))
		}
	}
	return n
}

func (m *TcpCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovTcpProxyCb(uint64(e))
		}
		n += 1 + sovTcpProxyCb(uint64(l)) + l
	}
	return n
}

func (m *TcpCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovTcpProxyCb(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovTcpProxyCb(uint64(l))
	}
	return n
}

func (m *TcpCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovTcpProxyCb(uint64(l))
		}
	}
	return n
}

func (m *TcpCbStats) Size() (n int) {
	var l int
	_ = l
	if m.BytesRcvd != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.BytesRcvd))
	}
	if m.PktsRcvd != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.PktsRcvd))
	}
	if m.PagesAlloced != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.PagesAlloced))
	}
	if m.DescAlloced != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DescAlloced))
	}
	if m.DebugNumPktToMem != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugNumPktToMem))
	}
	if m.DebugNumPhvToMem != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugNumPhvToMem))
	}
	if m.DebugAtomicDelta != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugAtomicDelta))
	}
	if m.DebugAtomic0Incr1247 != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugAtomic0Incr1247))
	}
	if m.DebugAtomic1Incr247 != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugAtomic1Incr247))
	}
	if m.DebugAtomic2Incr47 != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugAtomic2Incr47))
	}
	if m.DebugAtomic3Incr47 != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugAtomic3Incr47))
	}
	if m.DebugAtomic4Incr7 != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugAtomic4Incr7))
	}
	if m.DebugAtomic5Incr7 != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugAtomic5Incr7))
	}
	if m.DebugAtomic6Incr7 != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.DebugAtomic6Incr7))
	}
	if m.BytesAcked != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.BytesAcked))
	}
	if m.SlowPathCnt != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.SlowPathCnt))
	}
	if m.SerqFullCnt != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.SerqFullCnt))
	}
	if m.OooCnt != 0 {
		n += 2 + sovTcpProxyCb(uint64(m.OooCnt))
	}
	if m.BytesSent != 0 {
		n += 3 + sovTcpProxyCb(uint64(m.BytesSent))
	}
	if m.PktsSent != 0 {
		n += 3 + sovTcpProxyCb(uint64(m.PktsSent))
	}
	if m.DebugNumPhvToPkt != 0 {
		n += 3 + sovTcpProxyCb(uint64(m.DebugNumPhvToPkt))
	}
	if m.DebugNumMemToPkt != 0 {
		n += 3 + sovTcpProxyCb(uint64(m.DebugNumMemToPkt))
	}
	return n
}

func (m *TcpCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovTcpProxyCb(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovTcpProxyCb(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTcpProxyCb(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovTcpProxyCb(uint64(l))
	}
	return n
}

func (m *TcpCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovTcpProxyCb(uint64(l))
		}
	}
	return n
}

func sovTcpProxyCb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTcpProxyCb(x uint64) (n int) {
	return sovTcpProxyCb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TcpCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpcbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &TcpCbKeyHandle_TcpcbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpcbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &TcpCbKeyHandle_TcpcbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TcpCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvNxt", wireType)
			}
			m.RcvNxt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvNxt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndNxt", wireType)
			}
			m.SndNxt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndNxt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndUna", wireType)
			}
			m.SndUna = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndUna |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvTsval", wireType)
			}
			m.RcvTsval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvTsval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TsRecent", wireType)
			}
			m.TsRecent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TsRecent |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqBase", wireType)
			}
			m.SerqBase = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SerqBase = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugDol", wireType)
			}
			m.DebugDol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugDol |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqBase", wireType)
			}
			m.SesqBase = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SesqBase = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqPi", wireType)
			}
			m.SesqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqCi", wireType)
			}
			m.SesqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndWnd", wireType)
			}
			m.SndWnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndWnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndCwnd", wireType)
			}
			m.SndCwnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndCwnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RcvMss", wireType)
			}
			m.RcvMss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RcvMss |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			m.SourcePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourcePort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPort", wireType)
			}
			m.DestPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderTemplate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderTemplate = append(m.HeaderTemplate[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderTemplate == nil {
				m.HeaderTemplate = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceLif", wireType)
			}
			m.SourceLif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceLif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsesqBase", wireType)
			}
			m.AsesqBase = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.AsesqBase = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsesqPi", wireType)
			}
			m.AsesqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsesqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsesqCi", wireType)
			}
			m.AsesqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AsesqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugDolTx", wireType)
			}
			m.DebugDolTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugDolTx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderLen", wireType)
			}
			m.HeaderLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderLen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAckSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PendingAckSend = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7ProxyType", wireType)
			}
			m.L7ProxyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L7ProxyType |= (AppRedirType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqRetxCi", wireType)
			}
			m.SesqRetxCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqRetxCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetxSndUna", wireType)
			}
			m.RetxSndUna = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetxSndUna |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxTs", wireType)
			}
			m.RxTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxTs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rto", wireType)
			}
			m.Rto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rto |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SndCwndCnt", wireType)
			}
			m.SndCwndCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SndCwndCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugDolTblsetaddr", wireType)
			}
			m.DebugDolTblsetaddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugDolTblsetaddr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqPi", wireType)
			}
			m.SerqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredFlags", wireType)
			}
			m.PredFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PredFlags |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherQid", wireType)
			}
			m.OtherQid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherQid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TcpCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpcbHandle", wireType)
			}
			m.TcpcbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TcpcbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpcbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TcpcbStatus == nil {
				m.TcpcbStatus = &TcpCbStatus{}
			}
			if err := m.TcpcbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TcpCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TcpCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TcpCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTcpProxyCb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTcpProxyCb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTcpProxyCb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTcpProxyCb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TcpCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TcpCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRcvd", wireType)
			}
			m.BytesRcvd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRcvd |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktsRcvd", wireType)
			}
			m.PktsRcvd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PktsRcvd |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PagesAlloced", wireType)
			}
			m.PagesAlloced = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PagesAlloced |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescAlloced", wireType)
			}
			m.DescAlloced = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescAlloced |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugNumPktToMem", wireType)
			}
			m.DebugNumPktToMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugNumPktToMem |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugNumPhvToMem", wireType)
			}
			m.DebugNumPhvToMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugNumPhvToMem |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugAtomicDelta", wireType)
			}
			m.DebugAtomicDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugAtomicDelta |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugAtomic0Incr1247", wireType)
			}
			m.DebugAtomic0Incr1247 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugAtomic0Incr1247 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugAtomic1Incr247", wireType)
			}
			m.DebugAtomic1Incr247 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugAtomic1Incr247 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugAtomic2Incr47", wireType)
			}
			m.DebugAtomic2Incr47 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugAtomic2Incr47 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugAtomic3Incr47", wireType)
			}
			m.DebugAtomic3Incr47 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugAtomic3Incr47 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugAtomic4Incr7", wireType)
			}
			m.DebugAtomic4Incr7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugAtomic4Incr7 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugAtomic5Incr7", wireType)
			}
			m.DebugAtomic5Incr7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugAtomic5Incr7 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugAtomic6Incr7", wireType)
			}
			m.DebugAtomic6Incr7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugAtomic6Incr7 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesAcked", wireType)
			}
			m.BytesAcked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesAcked |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowPathCnt", wireType)
			}
			m.SlowPathCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlowPathCnt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqFullCnt", wireType)
			}
			m.SerqFullCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqFullCnt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OooCnt", wireType)
			}
			m.OooCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OooCnt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10001:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSent", wireType)
			}
			m.BytesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10002:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PktsSent", wireType)
			}
			m.PktsSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PktsSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10003:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugNumPhvToPkt", wireType)
			}
			m.DebugNumPhvToPkt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugNumPhvToPkt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10004:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugNumMemToPkt", wireType)
			}
			m.DebugNumMemToPkt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugNumMemToPkt |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &TcpCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &TcpCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &TcpCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TcpCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TcpCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TcpCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TcpCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTcpProxyCb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTcpProxyCb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTcpProxyCb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTcpProxyCb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTcpProxyCb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTcpProxyCb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTcpProxyCb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTcpProxyCb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTcpProxyCb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTcpProxyCb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tcp_proxy_cb.proto", fileDescriptorTcpProxyCb) }

var fileDescriptorTcpProxyCb = []byte{
	// 1465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xdd, 0x52, 0x1b, 0x37,
	0x14, 0xc6, 0x60, 0xc0, 0x96, 0x31, 0x3f, 0xe2, 0x4f, 0x90, 0x40, 0x9c, 0x4d, 0x3b, 0xf1, 0x64,
	0x3a, 0x84, 0x18, 0x12, 0xa6, 0x17, 0x9d, 0x29, 0x81, 0x49, 0x43, 0x0b, 0x84, 0x2e, 0x64, 0x3a,
	0xd3, 0x1b, 0x8d, 0xbc, 0x2b, 0xf0, 0xd6, 0xeb, 0xdd, 0x45, 0x92, 0x8d, 0x79, 0x8c, 0xfe, 0x5c,
	0xf4, 0x2a, 0x8f, 0xd2, 0xeb, 0x4e, 0xaf, 0xfa, 0x08, 0x9d, 0xf4, 0x45, 0x3a, 0x3a, 0xd2, 0xda,
	0x6b, 0x9b, 0x4c, 0x3b, 0xb9, 0xe8, 0x15, 0xd6, 0xf9, 0xbe, 0xef, 0x1c, 0xe9, 0xe8, 0xe8, 0x9c,
	0x05, 0x61, 0xe5, 0x25, 0x34, 0x11, 0x71, 0xf7, 0x96, 0x7a, 0xf5, 0xad, 0x44, 0xc4, 0x2a, 0xc6,
	0x93, 0xca, 0x4b, 0xbc, 0xfa, 0x7a, 0x49, 0xdd, 0x26, 0x5c, 0x1a, 0x9b, 0xe3, 0xa1, 0xd9, 0x0b,
	0x2f, 0x39, 0xa8, 0x7f, 0xc3, 0x6f, 0x5f, 0xb3, 0xc8, 0x0f, 0x39, 0xbe, 0x87, 0x0a, 0xc0, 0xa3,
	0x81, 0x4f, 0x72, 0x95, 0x5c, 0xb5, 0xfc, 0x7a, 0xcc, 0x9d, 0x06, 0xcb, 0x91, 0x8f, 0x1f, 0xa1,
	0x19, 0x03, 0x36, 0x80, 0x4c, 0xc6, 0x2b, 0xb9, 0xea, 0xd4, 0xeb, 0x31, 0xb7, 0x04, 0x56, 0xe3,
	0xe1, 0xe5, 0x1c, 0x2a, 0x37, 0xf9, 0x2d, 0x8d, 0x85, 0x65, 0x39, 0x7f, 0x14, 0x50, 0x11, 0xa2,
	0x9c, 0x27, 0xdc, 0xc3, 0x9f, 0x0f, 0xc1, 0x10, 0xa5, 0x54, 0x5b, 0xde, 0x02, 0x1f, 0x5b, 0x83,
	0xdb, 0x71, 0x4b, 0x4d, 0x7e, 0xfb, 0x46, 0xd8, 0xbd, 0xad, 0xa2, 0x69, 0xe1, 0x75, 0x68, 0xd4,
	0x55, 0x10, 0xb9, 0xec, 0x4e, 0x09, 0xaf, 0x73, 0xda, 0x55, 0x1a, 0x90, 0x91, 0x0f, 0xc0, 0x84,
	0x01, 0x64, 0xe4, 0x67, 0x80, 0x76, 0xc4, 0x48, 0xbe, 0x07, 0xbc, 0x8d, 0x18, 0xbe, 0x87, 0x8a,
	0xda, 0x95, 0x92, 0x1d, 0x16, 0x92, 0x49, 0x80, 0x0a, 0xc2, 0xeb, 0x5c, 0xe8, 0xb5, 0x06, 0x95,
	0xa4, 0x82, 0x7b, 0x3c, 0x52, 0x64, 0xca, 0x80, 0x4a, 0xba, 0xb0, 0xd6, 0xa0, 0xe4, 0xe2, 0x9a,
	0xd6, 0x99, 0xe4, 0x64, 0x5a, 0x27, 0xc0, 0x2d, 0x68, 0xc3, 0x4b, 0x26, 0x75, 0xf6, 0x8a, 0x3e,
	0xaf, 0xb7, 0xaf, 0xa8, 0x1f, 0x87, 0xa4, 0x60, 0x94, 0x60, 0x38, 0x8c, 0x43, 0xa3, 0x94, 0x56,
	0x59, 0x4c, 0x95, 0xd2, 0x28, 0xf5, 0x4e, 0x35, 0x98, 0x04, 0x04, 0xd9, 0x9d, 0x72, 0x79, 0x7d,
	0x16, 0xf4, 0x00, 0x2f, 0x20, 0xa5, 0x3e, 0x70, 0x10, 0xa4, 0x67, 0xbb, 0x89, 0x7c, 0x32, 0xd3,
	0x3b, 0xdb, 0x77, 0x91, 0x8f, 0xd7, 0x50, 0x41, 0x03, 0x9e, 0x46, 0xca, 0x80, 0x68, 0xe2, 0xc1,
	0x4d, 0xe4, 0xa7, 0x19, 0x6c, 0x49, 0x49, 0x66, 0x7b, 0x19, 0x3c, 0x91, 0x12, 0x3f, 0x40, 0x25,
	0x19, 0xb7, 0x85, 0xc7, 0x69, 0x12, 0x0b, 0x45, 0xe6, 0x00, 0x44, 0xc6, 0x74, 0x16, 0x0b, 0x65,
	0x4e, 0x26, 0x95, 0x81, 0xe7, 0xd3, 0x93, 0x49, 0x05, 0xe0, 0x63, 0x34, 0xd7, 0xe0, 0xcc, 0xe7,
	0x82, 0x2a, 0xde, 0x4a, 0x42, 0xa6, 0x38, 0x59, 0xa8, 0xe4, 0xaa, 0x33, 0xee, 0xac, 0x31, 0x5f,
	0x58, 0x2b, 0x5e, 0x42, 0x93, 0x52, 0x69, 0x18, 0x83, 0x07, 0xb3, 0xc0, 0x1b, 0xc8, 0x46, 0xa2,
	0x61, 0x70, 0x49, 0x16, 0x01, 0x2a, 0x1a, 0xcb, 0x71, 0x70, 0xa9, 0x61, 0xd6, 0x4f, 0xdc, 0x12,
	0x24, 0xae, 0xc8, 0x7a, 0x99, 0x5b, 0x43, 0x05, 0x96, 0xa6, 0x6e, 0xd9, 0x1c, 0x97, 0xd9, 0xdc,
	0xf5, 0x20, 0x2f, 0x20, 0x2b, 0x19, 0xe8, 0x20, 0xc0, 0x15, 0x34, 0xd3, 0xbb, 0x29, 0xaa, 0xba,
	0x64, 0xd5, 0x9c, 0x38, 0xbd, 0xac, 0x8b, 0xae, 0x0e, 0x6b, 0x0f, 0x15, 0xf2, 0x88, 0x10, 0xb3,
	0x2b, 0x63, 0x39, 0xe6, 0x11, 0xae, 0xa2, 0xf9, 0x84, 0x47, 0x7e, 0x10, 0x5d, 0x51, 0xe6, 0x35,
	0xa9, 0xe4, 0x91, 0x4f, 0xd6, 0x2a, 0xb9, 0x6a, 0xc1, 0x9d, 0xb5, 0xf6, 0x7d, 0xaf, 0x79, 0xce,
	0x23, 0x1f, 0xef, 0xa1, 0x72, 0xb8, 0x67, 0x5f, 0xa3, 0x7e, 0x7c, 0x64, 0xbd, 0x92, 0xab, 0xce,
	0xd6, 0x16, 0xb7, 0xcc, 0x4b, 0xdc, 0x4f, 0x12, 0x97, 0xfb, 0x81, 0xb8, 0xb8, 0x4d, 0xb8, 0x5b,
	0x0a, 0xf7, 0xce, 0x34, 0x51, 0x2f, 0xf4, 0x1e, 0x61, 0xf7, 0x82, 0xab, 0xae, 0x3e, 0xc2, 0x3d,
	0x7b, 0x2b, 0x5c, 0x5e, 0xbb, 0x5c, 0x75, 0xcd, 0x29, 0x00, 0x4c, 0x8b, 0xfc, 0x7e, 0x25, 0x57,
	0xcd, 0xbb, 0x48, 0xdb, 0xce, 0x4d, 0xa1, 0x2f, 0xa2, 0x49, 0xd1, 0xa5, 0x4a, 0x92, 0x0d, 0x80,
	0xf2, 0xa2, 0x7b, 0x21, 0xf1, 0x3c, 0x9a, 0x10, 0x2a, 0x26, 0x9b, 0x60, 0xd2, 0x3f, 0x21, 0x94,
	0xad, 0x19, 0xea, 0x45, 0x8a, 0x3c, 0xb0, 0xa1, 0x4c, 0xdd, 0x1c, 0x44, 0x0a, 0x6f, 0xa3, 0xa5,
	0x4c, 0xc2, 0xea, 0xa1, 0xe4, 0x8a, 0xf9, 0xbe, 0x20, 0x15, 0x60, 0xe2, 0x5e, 0xe2, 0x7a, 0x88,
	0xa9, 0x5c, 0x01, 0xf7, 0xf2, 0x30, 0xad, 0x5c, 0xa1, 0xaf, 0x65, 0x03, 0xa1, 0x44, 0x70, 0x9f,
	0x5e, 0x86, 0xec, 0x4a, 0x12, 0xc7, 0x64, 0x56, 0x5b, 0x5e, 0x69, 0x83, 0x2e, 0xb5, 0x58, 0x35,
	0xb8, 0xa0, 0xd7, 0x81, 0x4f, 0x1e, 0x99, 0x52, 0x03, 0xc3, 0xb7, 0x81, 0xef, 0x7c, 0x81, 0xe6,
	0xa0, 0x45, 0xb8, 0xfc, 0xba, 0xcd, 0xa5, 0x3a, 0x91, 0x57, 0xf8, 0x09, 0x9a, 0x16, 0x66, 0x45,
	0x72, 0x95, 0x89, 0x6a, 0xa9, 0x36, 0x9f, 0xed, 0x25, 0xba, 0xe9, 0xb8, 0x29, 0xc1, 0xd9, 0x46,
	0x25, 0x63, 0x55, 0x4c, 0xb5, 0x25, 0x7e, 0x38, 0xd4, 0xd0, 0x72, 0x50, 0x5c, 0xd9, 0x76, 0xe6,
	0xdc, 0xa0, 0xb2, 0x0d, 0x28, 0x93, 0x38, 0x92, 0x1c, 0x3f, 0x45, 0x88, 0x25, 0x01, 0x95, 0xe0,
	0x01, 0x14, 0xb3, 0x3a, 0xa2, 0xbd, 0xcb, 0xc0, 0x78, 0x76, 0x8b, 0x2c, 0xfd, 0x89, 0x9f, 0xa7,
	0x41, 0xac, 0x64, 0x1c, 0x1a, 0x1e, 0x1e, 0xd8, 0xa4, 0x11, 0x99, 0xc0, 0x66, 0xe1, 0x1c, 0xa2,
	0xf9, 0x81, 0xc0, 0xfa, 0xa8, 0xdb, 0xa8, 0x20, 0xec, 0xd2, 0x9e, 0x75, 0x29, 0xeb, 0x26, 0xa5,
	0xba, 0x3d, 0x96, 0xd3, 0x41, 0x18, 0xa0, 0x43, 0x1e, 0x72, 0xc5, 0x6d, 0xd6, 0xf0, 0xa7, 0x28,
	0xdf, 0xe2, 0x8a, 0xd9, 0xde, 0xbb, 0x60, 0x77, 0xff, 0xa6, 0xfe, 0x03, 0xf7, 0xd4, 0x09, 0x57,
	0xcc, 0x05, 0x78, 0xb4, 0x57, 0x8f, 0xff, 0xd7, 0x5e, 0xed, 0x1c, 0xa3, 0xe5, 0xd1, 0xb8, 0xfa,
	0x08, 0x3b, 0xc3, 0xb7, 0xb5, 0x96, 0xf5, 0x36, 0x40, 0xef, 0x5f, 0xdb, 0x11, 0x5a, 0x19, 0x80,
	0xfb, 0x19, 0x19, 0xbe, 0x8d, 0x89, 0x7f, 0xb9, 0x0d, 0x47, 0xda, 0x02, 0xfa, 0x8a, 0xab, 0xff,
	0x2f, 0x1b, 0xaf, 0xec, 0x2d, 0xf4, 0x83, 0x9a, 0xdb, 0x1c, 0x4a, 0xc5, 0x4a, 0xd6, 0x55, 0x9f,
	0xdb, 0xcf, 0xc3, 0xbb, 0x69, 0x84, 0x7a, 0x05, 0x23, 0xf5, 0x43, 0xaa, 0xdf, 0x2a, 0x2e, 0xa9,
	0xf0, 0x3a, 0x66, 0x5c, 0xe7, 0xdd, 0x22, 0x58, 0x5c, 0xaf, 0xe3, 0xeb, 0x87, 0x94, 0x34, 0x95,
	0x45, 0xc7, 0x01, 0x2d, 0x68, 0x03, 0x80, 0x8f, 0x50, 0x39, 0x61, 0x57, 0x5c, 0x52, 0x16, 0x86,
	0xb1, 0xc7, 0x7d, 0x98, 0x9c, 0x79, 0x77, 0x06, 0x8c, 0xfb, 0xc6, 0xa6, 0xdf, 0x87, 0xcf, 0xa5,
	0xd7, 0xe3, 0xe4, 0x81, 0x53, 0xd2, 0xb6, 0x94, 0xb2, 0x95, 0xf6, 0x85, 0xa8, 0xdd, 0xa2, 0x49,
	0x53, 0x51, 0x15, 0xd3, 0x16, 0x6f, 0xc1, 0x50, 0xcd, 0xbb, 0xf3, 0x80, 0x9d, 0xb6, 0x5b, 0x67,
	0x4d, 0x75, 0x11, 0x9f, 0xf0, 0xd6, 0x10, 0xbf, 0xd1, 0x49, 0xf9, 0x53, 0x43, 0xfc, 0x46, 0xc7,
	0xf0, 0x3f, 0x43, 0xa6, 0xb7, 0x50, 0xa6, 0xe2, 0x56, 0xe0, 0x51, 0x9f, 0x87, 0x8a, 0xd9, 0xd9,
	0x6a, 0xd8, 0xfb, 0x00, 0x1c, 0x6a, 0x3b, 0xde, 0x45, 0x2b, 0x59, 0xf6, 0x36, 0x0d, 0x22, 0x4f,
	0x3c, 0xab, 0xed, 0xee, 0xc1, 0xc0, 0x2d, 0xbb, 0x4b, 0x19, 0xc5, 0xf6, 0x91, 0xc5, 0x70, 0x0d,
	0x2d, 0x67, 0x55, 0xcf, 0x40, 0xa5, 0x45, 0x66, 0x14, 0x2f, 0x66, 0x44, 0xcf, 0x8e, 0x0c, 0xd4,
	0xef, 0x87, 0x46, 0x53, 0x03, 0xcd, 0xee, 0x9e, 0x1d, 0xd2, 0x38, 0x23, 0xa9, 0x1d, 0x01, 0x32,
	0xac, 0xd8, 0x49, 0x15, 0x33, 0x23, 0x8a, 0x1d, 0xab, 0xd8, 0x42, 0x8b, 0x59, 0xc5, 0x2e, 0x28,
	0xf6, 0xec, 0x50, 0x5f, 0xc8, 0x08, 0x76, 0xb5, 0x60, 0x84, 0xff, 0xdc, 0xf2, 0x67, 0x47, 0xf8,
	0xcf, 0xef, 0xe4, 0xbf, 0xb0, 0xfc, 0xb9, 0x11, 0xfe, 0x0b, 0xc3, 0x7f, 0x80, 0x4a, 0xa6, 0xde,
	0x98, 0xd7, 0xe4, 0x3e, 0x7c, 0x06, 0xe4, 0x5d, 0x53, 0x82, 0xfb, 0xda, 0x82, 0x1d, 0x54, 0x96,
	0x61, 0x7c, 0x43, 0x13, 0xa6, 0x1a, 0x30, 0x47, 0x16, 0x4c, 0xc1, 0x68, 0xe3, 0x19, 0x53, 0x0d,
	0x3d, 0x48, 0x34, 0x47, 0x8f, 0x85, 0xcb, 0x76, 0x18, 0x02, 0x07, 0x5b, 0x0e, 0x17, 0xd7, 0xaf,
	0xda, 0x61, 0xa8, 0x39, 0xab, 0x68, 0x3a, 0x8e, 0x63, 0x40, 0x17, 0x01, 0x9d, 0x8a, 0xe3, 0x58,
	0x03, 0x9b, 0x69, 0xc5, 0x4b, 0xfd, 0x6d, 0xf6, 0xe3, 0x69, 0xa6, 0xe4, 0xcf, 0xf5, 0xd7, 0xd9,
	0x7d, 0x5b, 0xf2, 0x00, 0xff, 0x74, 0xda, 0xaf, 0x79, 0x40, 0x9f, 0xde, 0x51, 0x7b, 0x49, 0x53,
	0x91, 0x9f, 0x4f, 0xef, 0x28, 0xbe, 0xb3, 0xe6, 0x90, 0xa0, 0xc5, 0x5b, 0xa9, 0xe0, 0x97, 0x21,
	0xc1, 0x09, 0x6f, 0x81, 0xc0, 0xf9, 0x2d, 0x67, 0xbb, 0x36, 0xbc, 0xde, 0x8f, 0x9d, 0x18, 0x9f,
	0xa0, 0xbc, 0x4c, 0xb8, 0x67, 0x1b, 0xcc, 0xe8, 0x38, 0x03, 0x14, 0x3f, 0x41, 0x53, 0xd6, 0xe5,
	0xc4, 0x07, 0x27, 0x8a, 0x65, 0xe0, 0xc7, 0xe6, 0xc3, 0x4b, 0xc2, 0x0b, 0x86, 0x1e, 0x37, 0x48,
	0x95, 0xe6, 0x5b, 0x4c, 0x3a, 0x5f, 0xa3, 0xc5, 0xe1, 0xfd, 0x9b, 0xae, 0x3d, 0x3c, 0x78, 0x56,
	0x47, 0x7a, 0xd5, 0xf0, 0xec, 0xa9, 0xbd, 0x1b, 0x47, 0x93, 0x00, 0xe3, 0x2f, 0xed, 0xd8, 0x3d,
	0x10, 0x5c, 0x7f, 0xf0, 0xad, 0x0c, 0x0e, 0xad, 0xb4, 0x21, 0xae, 0xaf, 0xde, 0x35, 0xcc, 0x4e,
	0xe4, 0x95, 0x33, 0xd6, 0xf3, 0xf0, 0x36, 0xf1, 0x3f, 0xd2, 0xc3, 0xb1, 0xf5, 0x60, 0x66, 0x08,
	0xbe, 0xff, 0xc1, 0xb1, 0xa3, 0xfd, 0x6c, 0xdc, 0x85, 0x66, 0xbd, 0x1d, 0xa0, 0x42, 0x7a, 0x72,
	0xbc, 0x76, 0x77, 0xdb, 0xd6, 0x7e, 0xd6, 0x3f, 0x90, 0x25, 0x70, 0xf2, 0x72, 0xfd, 0xf7, 0xf7,
	0x9b, 0xb9, 0x3f, 0xdf, 0x6f, 0xe6, 0xfe, 0x7a, 0xbf, 0x99, 0xfb, 0xf5, 0xef, 0xcd, 0xb1, 0xef,
	0x0b, 0x0d, 0x16, 0xc2, 0xbf, 0x66, 0xf5, 0x29, 0xf8, 0xb3, 0xf3, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x73, 0x2a, 0x18, 0xc0, 0xcb, 0x0d, 0x00, 0x00,
}
