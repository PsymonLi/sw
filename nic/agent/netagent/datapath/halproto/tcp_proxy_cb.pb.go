// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcp_proxy_cb.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TcpCbKeyHandle is used to operate on a tcp_cb either by its key or handle
type TcpCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TcpCbKeyHandle_TcpcbId
	//	*TcpCbKeyHandle_TcpcbHandle
	KeyOrHandle isTcpCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TcpCbKeyHandle) Reset()                    { *m = TcpCbKeyHandle{} }
func (m *TcpCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TcpCbKeyHandle) ProtoMessage()               {}
func (*TcpCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

type isTcpCbKeyHandle_KeyOrHandle interface {
	isTcpCbKeyHandle_KeyOrHandle()
}

type TcpCbKeyHandle_TcpcbId struct {
	TcpcbId uint32 `protobuf:"varint,1,opt,name=tcpcb_id,json=tcpcbId,oneof"`
}
type TcpCbKeyHandle_TcpcbHandle struct {
	TcpcbHandle uint64 `protobuf:"fixed64,2,opt,name=tcpcb_handle,json=tcpcbHandle,oneof"`
}

func (*TcpCbKeyHandle_TcpcbId) isTcpCbKeyHandle_KeyOrHandle()     {}
func (*TcpCbKeyHandle_TcpcbHandle) isTcpCbKeyHandle_KeyOrHandle() {}

func (m *TcpCbKeyHandle) GetKeyOrHandle() isTcpCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbKeyHandle) GetTcpcbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbId); ok {
		return x.TcpcbId
	}
	return 0
}

func (m *TcpCbKeyHandle) GetTcpcbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TcpCbKeyHandle_TcpcbHandle); ok {
		return x.TcpcbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TcpCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TcpCbKeyHandle_OneofMarshaler, _TcpCbKeyHandle_OneofUnmarshaler, _TcpCbKeyHandle_OneofSizer, []interface{}{
		(*TcpCbKeyHandle_TcpcbId)(nil),
		(*TcpCbKeyHandle_TcpcbHandle)(nil),
	}
}

func _TcpCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(uint64(x.TcpcbHandle))
	case nil:
	default:
		return fmt.Errorf("TcpCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TcpCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TcpCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tcpcb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tcpcb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TcpCbKeyHandle_TcpcbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TcpCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TcpCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TcpCbKeyHandle_TcpcbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TcpcbId))
	case *TcpCbKeyHandle_TcpcbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TcpCbSpec captures all the tcp_cb level configuration
type TcpCbSpec struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	RcvNxt      uint32          `protobuf:"varint,3,opt,name=rcv_nxt,json=rcvNxt" json:"rcv_nxt,omitempty"`
	SndNxt      uint32          `protobuf:"varint,4,opt,name=snd_nxt,json=sndNxt" json:"snd_nxt,omitempty"`
	SndUna      uint32          `protobuf:"varint,5,opt,name=snd_una,json=sndUna" json:"snd_una,omitempty"`
}

func (m *TcpCbSpec) Reset()                    { *m = TcpCbSpec{} }
func (m *TcpCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TcpCbSpec) ProtoMessage()               {}
func (*TcpCbSpec) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *TcpCbSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TcpCbSpec) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TcpCbSpec) GetRcvNxt() uint32 {
	if m != nil {
		return m.RcvNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndNxt() uint32 {
	if m != nil {
		return m.SndNxt
	}
	return 0
}

func (m *TcpCbSpec) GetSndUna() uint32 {
	if m != nil {
		return m.SndUna
	}
	return 0
}

// TcpCbRequestMsg is batched add or modify tcp_cb request
type TcpCbRequestMsg struct {
	Request []*TcpCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbRequestMsg) Reset()                    { *m = TcpCbRequestMsg{} }
func (m *TcpCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbRequestMsg) ProtoMessage()               {}
func (*TcpCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *TcpCbRequestMsg) GetRequest() []*TcpCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStatus is the operational status of a given tcp_cb
type TcpCbStatus struct {
	TcpcbHandle uint64 `protobuf:"fixed64,1,opt,name=tcpcb_handle,json=tcpcbHandle" json:"tcpcb_handle,omitempty"`
}

func (m *TcpCbStatus) Reset()                    { *m = TcpCbStatus{} }
func (m *TcpCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStatus) ProtoMessage()               {}
func (*TcpCbStatus) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

func (m *TcpCbStatus) GetTcpcbHandle() uint64 {
	if m != nil {
		return m.TcpcbHandle
	}
	return 0
}

// TcpCbResponse is response to TcpCbSpec
type TcpCbResponse struct {
	ApiStatus   ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	TcpcbStatus *TcpCbStatus `protobuf:"bytes,2,opt,name=tcpcb_status,json=tcpcbStatus" json:"tcpcb_status,omitempty"`
}

func (m *TcpCbResponse) Reset()                    { *m = TcpCbResponse{} }
func (m *TcpCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponse) ProtoMessage()               {}
func (*TcpCbResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

func (m *TcpCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbResponse) GetTcpcbStatus() *TcpCbStatus {
	if m != nil {
		return m.TcpcbStatus
	}
	return nil
}

// TcpCbResponseMsg is batched response to TcpCbRequestMsg
type TcpCbResponseMsg struct {
	Response []*TcpCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbResponseMsg) Reset()                    { *m = TcpCbResponseMsg{} }
func (m *TcpCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbResponseMsg) ProtoMessage()               {}
func (*TcpCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

func (m *TcpCbResponseMsg) GetResponse() []*TcpCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TcpCbDeleteRequest is used to delete a tcpcb
type TcpCbDeleteRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbDeleteRequest) Reset()                    { *m = TcpCbDeleteRequest{} }
func (m *TcpCbDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequest) ProtoMessage()               {}
func (*TcpCbDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

func (m *TcpCbDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TcpCbDeleteRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbDeleteRequestMsg is used to delete a batch of tcp_cbs
type TcpCbDeleteRequestMsg struct {
	Request []*TcpCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbDeleteRequestMsg) Reset()                    { *m = TcpCbDeleteRequestMsg{} }
func (m *TcpCbDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteRequestMsg) ProtoMessage()               {}
func (*TcpCbDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{7} }

func (m *TcpCbDeleteRequestMsg) GetRequest() []*TcpCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbDeleteResponseMsg is batched response to TcpCbDeleteRequestMsg
type TcpCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TcpCbDeleteResponseMsg) Reset()                    { *m = TcpCbDeleteResponseMsg{} }
func (m *TcpCbDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbDeleteResponseMsg) ProtoMessage()               {}
func (*TcpCbDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{8} }

func (m *TcpCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TcpCbGetRequest is used to get information about a tcpcb
type TcpCbGetRequest struct {
	Meta        *ObjectMeta     `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *TcpCbKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TcpCbGetRequest) Reset()                    { *m = TcpCbGetRequest{} }
func (m *TcpCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequest) ProtoMessage()               {}
func (*TcpCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{9} }

func (m *TcpCbGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TcpCbGetRequest) GetKeyOrHandle() *TcpCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TcpCbGetRequestMsg is batched GET requests for tcpcbs
type TcpCbGetRequestMsg struct {
	Request []*TcpCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TcpCbGetRequestMsg) Reset()                    { *m = TcpCbGetRequestMsg{} }
func (m *TcpCbGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetRequestMsg) ProtoMessage()               {}
func (*TcpCbGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{10} }

func (m *TcpCbGetRequestMsg) GetRequest() []*TcpCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TcpCbStats is the statistics object for each tcpcb
type TcpCbStats struct {
}

func (m *TcpCbStats) Reset()                    { *m = TcpCbStats{} }
func (m *TcpCbStats) String() string            { return proto.CompactTextString(m) }
func (*TcpCbStats) ProtoMessage()               {}
func (*TcpCbStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{11} }

// TcpCbGetResponse captures all the information about a tcpcb
// only if api_status indicates success, other fields are valid
type TcpCbGetResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TcpCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TcpCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TcpCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TcpCbGetResponse) Reset()                    { *m = TcpCbGetResponse{} }
func (m *TcpCbGetResponse) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponse) ProtoMessage()               {}
func (*TcpCbGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{12} }

func (m *TcpCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TcpCbGetResponse) GetSpec() *TcpCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TcpCbGetResponse) GetStatus() *TcpCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TcpCbGetResponse) GetStats() *TcpCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TcpCbGetResponseMsg is batched response to TcpCbGetRequestMsg
type TcpCbGetResponseMsg struct {
	Response []*TcpCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TcpCbGetResponseMsg) Reset()                    { *m = TcpCbGetResponseMsg{} }
func (m *TcpCbGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TcpCbGetResponseMsg) ProtoMessage()               {}
func (*TcpCbGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{13} }

func (m *TcpCbGetResponseMsg) GetResponse() []*TcpCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpCbKeyHandle)(nil), "tcpcb.TcpCbKeyHandle")
	proto.RegisterType((*TcpCbSpec)(nil), "tcpcb.TcpCbSpec")
	proto.RegisterType((*TcpCbRequestMsg)(nil), "tcpcb.TcpCbRequestMsg")
	proto.RegisterType((*TcpCbStatus)(nil), "tcpcb.TcpCbStatus")
	proto.RegisterType((*TcpCbResponse)(nil), "tcpcb.TcpCbResponse")
	proto.RegisterType((*TcpCbResponseMsg)(nil), "tcpcb.TcpCbResponseMsg")
	proto.RegisterType((*TcpCbDeleteRequest)(nil), "tcpcb.TcpCbDeleteRequest")
	proto.RegisterType((*TcpCbDeleteRequestMsg)(nil), "tcpcb.TcpCbDeleteRequestMsg")
	proto.RegisterType((*TcpCbDeleteResponseMsg)(nil), "tcpcb.TcpCbDeleteResponseMsg")
	proto.RegisterType((*TcpCbGetRequest)(nil), "tcpcb.TcpCbGetRequest")
	proto.RegisterType((*TcpCbGetRequestMsg)(nil), "tcpcb.TcpCbGetRequestMsg")
	proto.RegisterType((*TcpCbStats)(nil), "tcpcb.TcpCbStats")
	proto.RegisterType((*TcpCbGetResponse)(nil), "tcpcb.TcpCbGetResponse")
	proto.RegisterType((*TcpCbGetResponseMsg)(nil), "tcpcb.TcpCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TcpCb service

type TcpCbClient interface {
	TcpCbCreate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error)
	TcpCbUpdate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error)
	TcpCbDelete(ctx context.Context, in *TcpCbDeleteRequestMsg, opts ...grpc.CallOption) (*TcpCbDeleteResponseMsg, error)
	TcpCbGet(ctx context.Context, in *TcpCbGetRequestMsg, opts ...grpc.CallOption) (*TcpCbGetResponseMsg, error)
}

type tcpCbClient struct {
	cc *grpc.ClientConn
}

func NewTcpCbClient(cc *grpc.ClientConn) TcpCbClient {
	return &tcpCbClient{cc}
}

func (c *tcpCbClient) TcpCbCreate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	out := new(TcpCbResponseMsg)
	err := grpc.Invoke(ctx, "/tcpcb.TcpCb/TcpCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpCbClient) TcpCbUpdate(ctx context.Context, in *TcpCbRequestMsg, opts ...grpc.CallOption) (*TcpCbResponseMsg, error) {
	out := new(TcpCbResponseMsg)
	err := grpc.Invoke(ctx, "/tcpcb.TcpCb/TcpCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpCbClient) TcpCbDelete(ctx context.Context, in *TcpCbDeleteRequestMsg, opts ...grpc.CallOption) (*TcpCbDeleteResponseMsg, error) {
	out := new(TcpCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/tcpcb.TcpCb/TcpCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpCbClient) TcpCbGet(ctx context.Context, in *TcpCbGetRequestMsg, opts ...grpc.CallOption) (*TcpCbGetResponseMsg, error) {
	out := new(TcpCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/tcpcb.TcpCb/TcpCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TcpCb service

type TcpCbServer interface {
	TcpCbCreate(context.Context, *TcpCbRequestMsg) (*TcpCbResponseMsg, error)
	TcpCbUpdate(context.Context, *TcpCbRequestMsg) (*TcpCbResponseMsg, error)
	TcpCbDelete(context.Context, *TcpCbDeleteRequestMsg) (*TcpCbDeleteResponseMsg, error)
	TcpCbGet(context.Context, *TcpCbGetRequestMsg) (*TcpCbGetResponseMsg, error)
}

func RegisterTcpCbServer(s *grpc.Server, srv TcpCbServer) {
	s.RegisterService(&_TcpCb_serviceDesc, srv)
}

func _TcpCb_TcpCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpCbServer).TcpCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpcb.TcpCb/TcpCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpCbServer).TcpCbCreate(ctx, req.(*TcpCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpCb_TcpCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpCbServer).TcpCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpcb.TcpCb/TcpCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpCbServer).TcpCbUpdate(ctx, req.(*TcpCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpCb_TcpCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpCbServer).TcpCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpcb.TcpCb/TcpCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpCbServer).TcpCbDelete(ctx, req.(*TcpCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TcpCb_TcpCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpCbServer).TcpCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcpcb.TcpCb/TcpCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpCbServer).TcpCbGet(ctx, req.(*TcpCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _TcpCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tcpcb.TcpCb",
	HandlerType: (*TcpCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TcpCbCreate",
			Handler:    _TcpCb_TcpCbCreate_Handler,
		},
		{
			MethodName: "TcpCbUpdate",
			Handler:    _TcpCb_TcpCbUpdate_Handler,
		},
		{
			MethodName: "TcpCbDelete",
			Handler:    _TcpCb_TcpCbDelete_Handler,
		},
		{
			MethodName: "TcpCbGet",
			Handler:    _TcpCb_TcpCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcp_proxy_cb.proto",
}

func init() { proto.RegisterFile("tcp_proxy_cb.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xd1, 0x6e, 0x12, 0x41,
	0x14, 0xed, 0x96, 0x42, 0xe9, 0xdd, 0xd2, 0xd6, 0xd1, 0x02, 0x45, 0x4d, 0x70, 0xd4, 0x48, 0xfa,
	0x80, 0x0d, 0x8d, 0x0f, 0x3e, 0x98, 0x68, 0x69, 0x94, 0x6a, 0xb1, 0xc9, 0x6a, 0x5f, 0x7c, 0xd9,
	0x2c, 0xb3, 0x93, 0x16, 0x8b, 0xcb, 0xb8, 0x33, 0x20, 0xfc, 0x8c, 0xdf, 0xe1, 0x93, 0xdf, 0x66,
	0xf6, 0xce, 0x2c, 0xec, 0x2e, 0x10, 0x93, 0x26, 0xfa, 0xc4, 0xce, 0x9c, 0x3b, 0xe7, 0xcc, 0x3d,
	0xf7, 0x4c, 0x00, 0xa2, 0x98, 0x70, 0x45, 0x38, 0x9c, 0x4c, 0x5d, 0xd6, 0x6b, 0x8a, 0x70, 0xa8,
	0x86, 0x24, 0xaf, 0x98, 0x60, 0xbd, 0x9a, 0xad, 0xa6, 0x82, 0x4b, 0xbd, 0x47, 0x19, 0xec, 0x7c,
	0x66, 0xa2, 0xdd, 0xfb, 0xc0, 0xa7, 0x1d, 0x2f, 0xf0, 0x07, 0x9c, 0xdc, 0x87, 0x22, 0xd6, 0xb9,
	0x7d, 0xbf, 0x6a, 0xd5, 0xad, 0x46, 0xa9, 0xb3, 0xe6, 0x6c, 0xe2, 0xce, 0x99, 0x4f, 0x1e, 0xc3,
	0xb6, 0x06, 0xaf, 0xb1, 0xb8, 0xba, 0x5e, 0xb7, 0x1a, 0x85, 0xce, 0x9a, 0x63, 0xe3, 0xae, 0x66,
	0x38, 0xd9, 0x85, 0xd2, 0x0d, 0x9f, 0xba, 0xc3, 0xd0, 0x54, 0xd1, 0x5f, 0x16, 0x6c, 0xa1, 0xca,
	0x27, 0xc1, 0x19, 0x79, 0x0a, 0x1b, 0xdf, 0xb8, 0xf2, 0x90, 0xdc, 0x6e, 0xdd, 0x69, 0xea, 0xeb,
	0x5c, 0xf4, 0xbe, 0x72, 0xa6, 0xba, 0x5c, 0x79, 0x0e, 0xc2, 0xe4, 0x65, 0x86, 0x05, 0xb5, 0xec,
	0xd6, 0x7e, 0x13, 0xa5, 0x9a, 0xe9, 0x5b, 0x3b, 0xf6, 0x0d, 0x9f, 0x5e, 0x84, 0xa6, 0x85, 0x0a,
	0x6c, 0x86, 0x6c, 0xec, 0x06, 0x13, 0x55, 0xcd, 0x45, 0x1d, 0x38, 0x85, 0x90, 0x8d, 0x3f, 0x4e,
	0x54, 0x04, 0xc8, 0xc0, 0x47, 0x60, 0x43, 0x03, 0x32, 0xf0, 0x13, 0xc0, 0x28, 0xf0, 0xaa, 0xf9,
	0x19, 0x70, 0x19, 0x78, 0xf4, 0x15, 0xec, 0xa2, 0x92, 0xc3, 0xbf, 0x8f, 0xb8, 0x54, 0x5d, 0x79,
	0x45, 0x0e, 0x61, 0x33, 0xd4, 0xab, 0xaa, 0x55, 0xcf, 0x35, 0xec, 0xd6, 0x5e, 0xf2, 0x4a, 0x51,
	0x8b, 0x4e, 0x5c, 0x40, 0x8f, 0xc0, 0xd6, 0xbb, 0xca, 0x53, 0x23, 0x49, 0x1e, 0x65, 0xec, 0x8b,
	0x2c, 0x28, 0xa4, 0xcc, 0xa3, 0x3f, 0xa0, 0x64, 0x04, 0xa5, 0x18, 0x06, 0x92, 0x93, 0xe7, 0x00,
	0x9e, 0xe8, 0xbb, 0x12, 0x19, 0xf0, 0xc4, 0x4e, 0xa4, 0x88, 0xa6, 0xbd, 0x11, 0x7d, 0xcd, 0xec,
	0x6c, 0x79, 0xf1, 0x27, 0x79, 0x11, 0x8b, 0x98, 0x23, 0xda, 0x37, 0x92, 0xba, 0xa4, 0x3e, 0xa4,
	0x85, 0xf5, 0x82, 0x9e, 0xc2, 0x5e, 0x4a, 0x38, 0x6a, 0xf5, 0x08, 0x8a, 0xa1, 0x59, 0x9a, 0x5e,
	0xef, 0x25, 0x69, 0xe2, 0x52, 0x67, 0x56, 0x45, 0xc7, 0x40, 0x10, 0x3a, 0xe5, 0x03, 0xae, 0xb8,
	0x71, 0xed, 0xdf, 0x8f, 0x9c, 0x9e, 0xc3, 0xfe, 0xa2, 0x6e, 0xd4, 0xc2, 0x71, 0x76, 0x5a, 0x07,
	0x49, 0xb6, 0x54, 0xf9, 0x7c, 0x6c, 0x67, 0x50, 0x4e, 0xc1, 0x73, 0x47, 0xb2, 0xd3, 0xc8, 0xfd,
	0x65, 0x1a, 0x54, 0x9a, 0x00, 0xbd, 0xe3, 0xea, 0xff, 0xb9, 0xf1, 0xd6, 0x4c, 0x61, 0x2e, 0xaa,
	0xa7, 0x99, 0xb1, 0xa2, 0x9c, 0xa4, 0x9a, 0xd7, 0xce, 0x7d, 0xd8, 0x06, 0x98, 0xe5, 0x45, 0xd2,
	0xdf, 0x96, 0x89, 0x08, 0x96, 0xde, 0x36, 0x9e, 0x4f, 0x60, 0x43, 0x0a, 0xce, 0x4c, 0x37, 0x8b,
	0x6f, 0x07, 0x51, 0x72, 0x08, 0x05, 0x43, 0x99, 0x5b, 0x19, 0x5f, 0x53, 0x41, 0x9e, 0x41, 0x3e,
	0xfa, 0x92, 0xf8, 0xa6, 0xd1, 0xd0, 0x74, 0xa9, 0x74, 0x34, 0x4e, 0xdf, 0xc3, 0xdd, 0xec, 0xfd,
	0x75, 0x44, 0xb2, 0x29, 0xaf, 0x2c, 0x18, 0x93, 0x0d, 0x7a, 0xeb, 0xe7, 0x3a, 0xe4, 0x11, 0x26,
	0xaf, 0xcd, 0x1b, 0x6f, 0x87, 0xdc, 0x53, 0x9c, 0x94, 0xd3, 0x2f, 0x24, 0x76, 0xbf, 0x56, 0x59,
	0xf6, 0x72, 0xba, 0xf2, 0x8a, 0xae, 0xcd, 0x18, 0x2e, 0x85, 0x7f, 0x4b, 0x86, 0x73, 0xc3, 0xa0,
	0x03, 0x4b, 0x1e, 0xac, 0xcc, 0x78, 0xc4, 0xf3, 0x70, 0x19, 0x9a, 0x64, 0x6b, 0x43, 0x31, 0xee,
	0x9c, 0x1c, 0x2c, 0xcf, 0x48, 0xc4, 0x53, 0x5b, 0xe1, 0x12, 0x92, 0x9c, 0xc0, 0x97, 0xe2, 0xb5,
	0x37, 0xc0, 0x7f, 0x99, 0x5e, 0x01, 0x7f, 0x8e, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xed, 0x7d,
	0xfc, 0xed, 0x96, 0x06, 0x00, 0x00,
}
