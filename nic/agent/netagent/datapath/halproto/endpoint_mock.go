// Code generated by MockGen. DO NOT EDIT.
// Source: endpoint.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisEndpointStatus_EpPdStatus is a mock of isEndpointStatus_EpPdStatus interface
type MockisEndpointStatus_EpPdStatus struct {
	ctrl     *gomock.Controller
	recorder *MockisEndpointStatus_EpPdStatusMockRecorder
}

// MockisEndpointStatus_EpPdStatusMockRecorder is the mock recorder for MockisEndpointStatus_EpPdStatus
type MockisEndpointStatus_EpPdStatusMockRecorder struct {
	mock *MockisEndpointStatus_EpPdStatus
}

// NewMockisEndpointStatus_EpPdStatus creates a new mock instance
func NewMockisEndpointStatus_EpPdStatus(ctrl *gomock.Controller) *MockisEndpointStatus_EpPdStatus {
	mock := &MockisEndpointStatus_EpPdStatus{ctrl: ctrl}
	mock.recorder = &MockisEndpointStatus_EpPdStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisEndpointStatus_EpPdStatus) EXPECT() *MockisEndpointStatus_EpPdStatusMockRecorder {
	return m.recorder
}

// isEndpointStatus_EpPdStatus mocks base method
func (m *MockisEndpointStatus_EpPdStatus) isEndpointStatus_EpPdStatus() {
	m.ctrl.Call(m, "isEndpointStatus_EpPdStatus")
}

// isEndpointStatus_EpPdStatus indicates an expected call of isEndpointStatus_EpPdStatus
func (mr *MockisEndpointStatus_EpPdStatusMockRecorder) isEndpointStatus_EpPdStatus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEndpointStatus_EpPdStatus", reflect.TypeOf((*MockisEndpointStatus_EpPdStatus)(nil).isEndpointStatus_EpPdStatus))
}

// MarshalTo mocks base method
func (m *MockisEndpointStatus_EpPdStatus) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisEndpointStatus_EpPdStatusMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisEndpointStatus_EpPdStatus)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisEndpointStatus_EpPdStatus) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisEndpointStatus_EpPdStatusMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisEndpointStatus_EpPdStatus)(nil).Size))
}

// MockisEndpointDeleteRequest_DeleteBy is a mock of isEndpointDeleteRequest_DeleteBy interface
type MockisEndpointDeleteRequest_DeleteBy struct {
	ctrl     *gomock.Controller
	recorder *MockisEndpointDeleteRequest_DeleteByMockRecorder
}

// MockisEndpointDeleteRequest_DeleteByMockRecorder is the mock recorder for MockisEndpointDeleteRequest_DeleteBy
type MockisEndpointDeleteRequest_DeleteByMockRecorder struct {
	mock *MockisEndpointDeleteRequest_DeleteBy
}

// NewMockisEndpointDeleteRequest_DeleteBy creates a new mock instance
func NewMockisEndpointDeleteRequest_DeleteBy(ctrl *gomock.Controller) *MockisEndpointDeleteRequest_DeleteBy {
	mock := &MockisEndpointDeleteRequest_DeleteBy{ctrl: ctrl}
	mock.recorder = &MockisEndpointDeleteRequest_DeleteByMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisEndpointDeleteRequest_DeleteBy) EXPECT() *MockisEndpointDeleteRequest_DeleteByMockRecorder {
	return m.recorder
}

// isEndpointDeleteRequest_DeleteBy mocks base method
func (m *MockisEndpointDeleteRequest_DeleteBy) isEndpointDeleteRequest_DeleteBy() {
	m.ctrl.Call(m, "isEndpointDeleteRequest_DeleteBy")
}

// isEndpointDeleteRequest_DeleteBy indicates an expected call of isEndpointDeleteRequest_DeleteBy
func (mr *MockisEndpointDeleteRequest_DeleteByMockRecorder) isEndpointDeleteRequest_DeleteBy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isEndpointDeleteRequest_DeleteBy", reflect.TypeOf((*MockisEndpointDeleteRequest_DeleteBy)(nil).isEndpointDeleteRequest_DeleteBy))
}

// MarshalTo mocks base method
func (m *MockisEndpointDeleteRequest_DeleteBy) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisEndpointDeleteRequest_DeleteByMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisEndpointDeleteRequest_DeleteBy)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisEndpointDeleteRequest_DeleteBy) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisEndpointDeleteRequest_DeleteByMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisEndpointDeleteRequest_DeleteBy)(nil).Size))
}

// MockEndpointClient is a mock of EndpointClient interface
type MockEndpointClient struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointClientMockRecorder
}

// MockEndpointClientMockRecorder is the mock recorder for MockEndpointClient
type MockEndpointClientMockRecorder struct {
	mock *MockEndpointClient
}

// NewMockEndpointClient creates a new mock instance
func NewMockEndpointClient(ctrl *gomock.Controller) *MockEndpointClient {
	mock := &MockEndpointClient{ctrl: ctrl}
	mock.recorder = &MockEndpointClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEndpointClient) EXPECT() *MockEndpointClientMockRecorder {
	return m.recorder
}

// EndpointCreate mocks base method
func (m *MockEndpointClient) EndpointCreate(ctx context.Context, in *EndpointRequestMsg, opts ...grpc.CallOption) (*EndpointResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndpointCreate", varargs...)
	ret0, _ := ret[0].(*EndpointResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointCreate indicates an expected call of EndpointCreate
func (mr *MockEndpointClientMockRecorder) EndpointCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointCreate", reflect.TypeOf((*MockEndpointClient)(nil).EndpointCreate), varargs...)
}

// EndpointUpdate mocks base method
func (m *MockEndpointClient) EndpointUpdate(ctx context.Context, in *EndpointUpdateRequestMsg, opts ...grpc.CallOption) (*EndpointUpdateResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndpointUpdate", varargs...)
	ret0, _ := ret[0].(*EndpointUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointUpdate indicates an expected call of EndpointUpdate
func (mr *MockEndpointClientMockRecorder) EndpointUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointUpdate", reflect.TypeOf((*MockEndpointClient)(nil).EndpointUpdate), varargs...)
}

// EndpointDelete mocks base method
func (m *MockEndpointClient) EndpointDelete(ctx context.Context, in *EndpointDeleteRequestMsg, opts ...grpc.CallOption) (*EndpointDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndpointDelete", varargs...)
	ret0, _ := ret[0].(*EndpointDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointDelete indicates an expected call of EndpointDelete
func (mr *MockEndpointClientMockRecorder) EndpointDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointDelete", reflect.TypeOf((*MockEndpointClient)(nil).EndpointDelete), varargs...)
}

// EndpointGet mocks base method
func (m *MockEndpointClient) EndpointGet(ctx context.Context, in *EndpointGetRequestMsg, opts ...grpc.CallOption) (*EndpointGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndpointGet", varargs...)
	ret0, _ := ret[0].(*EndpointGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointGet indicates an expected call of EndpointGet
func (mr *MockEndpointClientMockRecorder) EndpointGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointGet", reflect.TypeOf((*MockEndpointClient)(nil).EndpointGet), varargs...)
}

// FilterCreate mocks base method
func (m *MockEndpointClient) FilterCreate(ctx context.Context, in *FilterRequestMsg, opts ...grpc.CallOption) (*FilterResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilterCreate", varargs...)
	ret0, _ := ret[0].(*FilterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterCreate indicates an expected call of FilterCreate
func (mr *MockEndpointClientMockRecorder) FilterCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterCreate", reflect.TypeOf((*MockEndpointClient)(nil).FilterCreate), varargs...)
}

// FilterDelete mocks base method
func (m *MockEndpointClient) FilterDelete(ctx context.Context, in *FilterDeleteRequestMsg, opts ...grpc.CallOption) (*FilterDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilterDelete", varargs...)
	ret0, _ := ret[0].(*FilterDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterDelete indicates an expected call of FilterDelete
func (mr *MockEndpointClientMockRecorder) FilterDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterDelete", reflect.TypeOf((*MockEndpointClient)(nil).FilterDelete), varargs...)
}

// FilterGet mocks base method
func (m *MockEndpointClient) FilterGet(ctx context.Context, in *FilterGetRequestMsg, opts ...grpc.CallOption) (*FilterGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilterGet", varargs...)
	ret0, _ := ret[0].(*FilterGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterGet indicates an expected call of FilterGet
func (mr *MockEndpointClientMockRecorder) FilterGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterGet", reflect.TypeOf((*MockEndpointClient)(nil).FilterGet), varargs...)
}

// MockEndpointServer is a mock of EndpointServer interface
type MockEndpointServer struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointServerMockRecorder
}

// MockEndpointServerMockRecorder is the mock recorder for MockEndpointServer
type MockEndpointServerMockRecorder struct {
	mock *MockEndpointServer
}

// NewMockEndpointServer creates a new mock instance
func NewMockEndpointServer(ctrl *gomock.Controller) *MockEndpointServer {
	mock := &MockEndpointServer{ctrl: ctrl}
	mock.recorder = &MockEndpointServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEndpointServer) EXPECT() *MockEndpointServerMockRecorder {
	return m.recorder
}

// EndpointCreate mocks base method
func (m *MockEndpointServer) EndpointCreate(arg0 context.Context, arg1 *EndpointRequestMsg) (*EndpointResponseMsg, error) {
	ret := m.ctrl.Call(m, "EndpointCreate", arg0, arg1)
	ret0, _ := ret[0].(*EndpointResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointCreate indicates an expected call of EndpointCreate
func (mr *MockEndpointServerMockRecorder) EndpointCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointCreate", reflect.TypeOf((*MockEndpointServer)(nil).EndpointCreate), arg0, arg1)
}

// EndpointUpdate mocks base method
func (m *MockEndpointServer) EndpointUpdate(arg0 context.Context, arg1 *EndpointUpdateRequestMsg) (*EndpointUpdateResponseMsg, error) {
	ret := m.ctrl.Call(m, "EndpointUpdate", arg0, arg1)
	ret0, _ := ret[0].(*EndpointUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointUpdate indicates an expected call of EndpointUpdate
func (mr *MockEndpointServerMockRecorder) EndpointUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointUpdate", reflect.TypeOf((*MockEndpointServer)(nil).EndpointUpdate), arg0, arg1)
}

// EndpointDelete mocks base method
func (m *MockEndpointServer) EndpointDelete(arg0 context.Context, arg1 *EndpointDeleteRequestMsg) (*EndpointDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "EndpointDelete", arg0, arg1)
	ret0, _ := ret[0].(*EndpointDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointDelete indicates an expected call of EndpointDelete
func (mr *MockEndpointServerMockRecorder) EndpointDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointDelete", reflect.TypeOf((*MockEndpointServer)(nil).EndpointDelete), arg0, arg1)
}

// EndpointGet mocks base method
func (m *MockEndpointServer) EndpointGet(arg0 context.Context, arg1 *EndpointGetRequestMsg) (*EndpointGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "EndpointGet", arg0, arg1)
	ret0, _ := ret[0].(*EndpointGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndpointGet indicates an expected call of EndpointGet
func (mr *MockEndpointServerMockRecorder) EndpointGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointGet", reflect.TypeOf((*MockEndpointServer)(nil).EndpointGet), arg0, arg1)
}

// FilterCreate mocks base method
func (m *MockEndpointServer) FilterCreate(arg0 context.Context, arg1 *FilterRequestMsg) (*FilterResponseMsg, error) {
	ret := m.ctrl.Call(m, "FilterCreate", arg0, arg1)
	ret0, _ := ret[0].(*FilterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterCreate indicates an expected call of FilterCreate
func (mr *MockEndpointServerMockRecorder) FilterCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterCreate", reflect.TypeOf((*MockEndpointServer)(nil).FilterCreate), arg0, arg1)
}

// FilterDelete mocks base method
func (m *MockEndpointServer) FilterDelete(arg0 context.Context, arg1 *FilterDeleteRequestMsg) (*FilterDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "FilterDelete", arg0, arg1)
	ret0, _ := ret[0].(*FilterDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterDelete indicates an expected call of FilterDelete
func (mr *MockEndpointServerMockRecorder) FilterDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterDelete", reflect.TypeOf((*MockEndpointServer)(nil).FilterDelete), arg0, arg1)
}

// FilterGet mocks base method
func (m *MockEndpointServer) FilterGet(arg0 context.Context, arg1 *FilterGetRequestMsg) (*FilterGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "FilterGet", arg0, arg1)
	ret0, _ := ret[0].(*FilterGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterGet indicates an expected call of FilterGet
func (mr *MockEndpointServerMockRecorder) FilterGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterGet", reflect.TypeOf((*MockEndpointServer)(nil).FilterGet), arg0, arg1)
}
