// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mac_metrics.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MacMetrics struct {
	Key                   uint32          `protobuf:"fixed32,1,opt,name=Key,proto3" json:"Key,omitempty"`
	FramesRxOk            *delphi.Counter `protobuf:"bytes,2,opt,name=frames_rx_ok,json=framesRxOk" json:"frames_rx_ok,omitempty"`
	FramesRxAll           *delphi.Counter `protobuf:"bytes,3,opt,name=frames_rx_all,json=framesRxAll" json:"frames_rx_all,omitempty"`
	FramesRxBadFcs        *delphi.Counter `protobuf:"bytes,4,opt,name=frames_rx_bad_fcs,json=framesRxBadFcs" json:"frames_rx_bad_fcs,omitempty"`
	FramesRxBadAll        *delphi.Counter `protobuf:"bytes,5,opt,name=frames_rx_bad_all,json=framesRxBadAll" json:"frames_rx_bad_all,omitempty"`
	OctetsRxOk            *delphi.Counter `protobuf:"bytes,6,opt,name=octets_rx_ok,json=octetsRxOk" json:"octets_rx_ok,omitempty"`
	OctetsRxAll           *delphi.Counter `protobuf:"bytes,7,opt,name=octets_rx_all,json=octetsRxAll" json:"octets_rx_all,omitempty"`
	FramesRxUnicast       *delphi.Counter `protobuf:"bytes,8,opt,name=frames_rx_unicast,json=framesRxUnicast" json:"frames_rx_unicast,omitempty"`
	FramesRxMulticast     *delphi.Counter `protobuf:"bytes,9,opt,name=frames_rx_multicast,json=framesRxMulticast" json:"frames_rx_multicast,omitempty"`
	FramesRxBroadcast     *delphi.Counter `protobuf:"bytes,10,opt,name=frames_rx_broadcast,json=framesRxBroadcast" json:"frames_rx_broadcast,omitempty"`
	FramesRxPause         *delphi.Counter `protobuf:"bytes,11,opt,name=frames_rx_pause,json=framesRxPause" json:"frames_rx_pause,omitempty"`
	FramesRxBadLength     *delphi.Counter `protobuf:"bytes,12,opt,name=frames_rx_bad_length,json=framesRxBadLength" json:"frames_rx_bad_length,omitempty"`
	FramesRxUndersized    *delphi.Counter `protobuf:"bytes,13,opt,name=frames_rx_undersized,json=framesRxUndersized" json:"frames_rx_undersized,omitempty"`
	FramesRxOversized     *delphi.Counter `protobuf:"bytes,14,opt,name=frames_rx_oversized,json=framesRxOversized" json:"frames_rx_oversized,omitempty"`
	FramesRxFragments     *delphi.Counter `protobuf:"bytes,15,opt,name=frames_rx_fragments,json=framesRxFragments" json:"frames_rx_fragments,omitempty"`
	FramesRxJabber        *delphi.Counter `protobuf:"bytes,16,opt,name=frames_rx_jabber,json=framesRxJabber" json:"frames_rx_jabber,omitempty"`
	FramesRxPripause      *delphi.Counter `protobuf:"bytes,17,opt,name=frames_rx_pripause,json=framesRxPripause" json:"frames_rx_pripause,omitempty"`
	FramesRxStompedCrc    *delphi.Counter `protobuf:"bytes,18,opt,name=frames_rx_stomped_crc,json=framesRxStompedCrc" json:"frames_rx_stomped_crc,omitempty"`
	FramesRxTooLong       *delphi.Counter `protobuf:"bytes,19,opt,name=frames_rx_too_long,json=framesRxTooLong" json:"frames_rx_too_long,omitempty"`
	FramesRxVlanGood      *delphi.Counter `protobuf:"bytes,20,opt,name=frames_rx_vlan_good,json=framesRxVlanGood" json:"frames_rx_vlan_good,omitempty"`
	FramesRxDropped       *delphi.Counter `protobuf:"bytes,21,opt,name=frames_rx_dropped,json=framesRxDropped" json:"frames_rx_dropped,omitempty"`
	FramesRxLessThan_64B  *delphi.Counter `protobuf:"bytes,22,opt,name=frames_rx_less_than_64b,json=framesRxLessThan64b" json:"frames_rx_less_than_64b,omitempty"`
	FramesRx_64B          *delphi.Counter `protobuf:"bytes,23,opt,name=frames_rx_64b,json=framesRx64b" json:"frames_rx_64b,omitempty"`
	FramesRx_65B_127B     *delphi.Counter `protobuf:"bytes,24,opt,name=frames_rx_65b_127b,json=framesRx65b127b" json:"frames_rx_65b_127b,omitempty"`
	FramesRx_128B_255B    *delphi.Counter `protobuf:"bytes,25,opt,name=frames_rx_128b_255b,json=framesRx128b255b" json:"frames_rx_128b_255b,omitempty"`
	FramesRx_256B_511B    *delphi.Counter `protobuf:"bytes,26,opt,name=frames_rx_256b_511b,json=framesRx256b511b" json:"frames_rx_256b_511b,omitempty"`
	FramesRx_512B_1023B   *delphi.Counter `protobuf:"bytes,27,opt,name=frames_rx_512b_1023b,json=framesRx512b1023b" json:"frames_rx_512b_1023b,omitempty"`
	FramesRx_1024B_1518B  *delphi.Counter `protobuf:"bytes,28,opt,name=frames_rx_1024b_1518b,json=framesRx1024b1518b" json:"frames_rx_1024b_1518b,omitempty"`
	FramesRx_1519B_2047B  *delphi.Counter `protobuf:"bytes,29,opt,name=frames_rx_1519b_2047b,json=framesRx1519b2047b" json:"frames_rx_1519b_2047b,omitempty"`
	FramesRx_2048B_4095B  *delphi.Counter `protobuf:"bytes,30,opt,name=frames_rx_2048b_4095b,json=framesRx2048b4095b" json:"frames_rx_2048b_4095b,omitempty"`
	FramesRx_4096B_8191B  *delphi.Counter `protobuf:"bytes,31,opt,name=frames_rx_4096b_8191b,json=framesRx4096b8191b" json:"frames_rx_4096b_8191b,omitempty"`
	FramesRx_8192B_9215B  *delphi.Counter `protobuf:"bytes,32,opt,name=frames_rx_8192b_9215b,json=framesRx8192b9215b" json:"frames_rx_8192b_9215b,omitempty"`
	FramesRxOther         *delphi.Counter `protobuf:"bytes,33,opt,name=frames_rx_other,json=framesRxOther" json:"frames_rx_other,omitempty"`
	FramesTxOk            *delphi.Counter `protobuf:"bytes,34,opt,name=frames_tx_ok,json=framesTxOk" json:"frames_tx_ok,omitempty"`
	FramesTxAll           *delphi.Counter `protobuf:"bytes,35,opt,name=frames_tx_all,json=framesTxAll" json:"frames_tx_all,omitempty"`
	FramesTxBad           *delphi.Counter `protobuf:"bytes,36,opt,name=frames_tx_bad,json=framesTxBad" json:"frames_tx_bad,omitempty"`
	OctetsTxOk            *delphi.Counter `protobuf:"bytes,37,opt,name=octets_tx_ok,json=octetsTxOk" json:"octets_tx_ok,omitempty"`
	OctetsTxTotal         *delphi.Counter `protobuf:"bytes,38,opt,name=octets_tx_total,json=octetsTxTotal" json:"octets_tx_total,omitempty"`
	FramesTxUnicast       *delphi.Counter `protobuf:"bytes,39,opt,name=frames_tx_unicast,json=framesTxUnicast" json:"frames_tx_unicast,omitempty"`
	FramesTxMulticast     *delphi.Counter `protobuf:"bytes,40,opt,name=frames_tx_multicast,json=framesTxMulticast" json:"frames_tx_multicast,omitempty"`
	FramesTxBroadcast     *delphi.Counter `protobuf:"bytes,41,opt,name=frames_tx_broadcast,json=framesTxBroadcast" json:"frames_tx_broadcast,omitempty"`
	FramesTxPause         *delphi.Counter `protobuf:"bytes,42,opt,name=frames_tx_pause,json=framesTxPause" json:"frames_tx_pause,omitempty"`
	FramesTxPripause      *delphi.Counter `protobuf:"bytes,43,opt,name=frames_tx_pripause,json=framesTxPripause" json:"frames_tx_pripause,omitempty"`
	FramesTxVlan          *delphi.Counter `protobuf:"bytes,44,opt,name=frames_tx_vlan,json=framesTxVlan" json:"frames_tx_vlan,omitempty"`
	FramesTxLessThan_64B  *delphi.Counter `protobuf:"bytes,45,opt,name=frames_tx_less_than_64b,json=framesTxLessThan64b" json:"frames_tx_less_than_64b,omitempty"`
	FramesTx_64B          *delphi.Counter `protobuf:"bytes,46,opt,name=frames_tx_64b,json=framesTx64b" json:"frames_tx_64b,omitempty"`
	FramesTx_65B_127B     *delphi.Counter `protobuf:"bytes,47,opt,name=frames_tx_65b_127b,json=framesTx65b127b" json:"frames_tx_65b_127b,omitempty"`
	FramesTx_128B_255B    *delphi.Counter `protobuf:"bytes,48,opt,name=frames_tx_128b_255b,json=framesTx128b255b" json:"frames_tx_128b_255b,omitempty"`
	FramesTx_256B_511B    *delphi.Counter `protobuf:"bytes,49,opt,name=frames_tx_256b_511b,json=framesTx256b511b" json:"frames_tx_256b_511b,omitempty"`
	FramesTx_512B_1023B   *delphi.Counter `protobuf:"bytes,50,opt,name=frames_tx_512b_1023b,json=framesTx512b1023b" json:"frames_tx_512b_1023b,omitempty"`
	FramesTx_1024B_1518B  *delphi.Counter `protobuf:"bytes,51,opt,name=frames_tx_1024b_1518b,json=framesTx1024b1518b" json:"frames_tx_1024b_1518b,omitempty"`
	FramesTx_1519B_2047B  *delphi.Counter `protobuf:"bytes,52,opt,name=frames_tx_1519b_2047b,json=framesTx1519b2047b" json:"frames_tx_1519b_2047b,omitempty"`
	FramesTx_2048B_4095B  *delphi.Counter `protobuf:"bytes,53,opt,name=frames_tx_2048b_4095b,json=framesTx2048b4095b" json:"frames_tx_2048b_4095b,omitempty"`
	FramesTx_4096B_8191B  *delphi.Counter `protobuf:"bytes,54,opt,name=frames_tx_4096b_8191b,json=framesTx4096b8191b" json:"frames_tx_4096b_8191b,omitempty"`
	FramesTx_8192B_9215B  *delphi.Counter `protobuf:"bytes,55,opt,name=frames_tx_8192b_9215b,json=framesTx8192b9215b" json:"frames_tx_8192b_9215b,omitempty"`
	FramesTxOther         *delphi.Counter `protobuf:"bytes,56,opt,name=frames_tx_other,json=framesTxOther" json:"frames_tx_other,omitempty"`
	FramesTxPri_0         *delphi.Counter `protobuf:"bytes,57,opt,name=frames_tx_pri_0,json=framesTxPri0" json:"frames_tx_pri_0,omitempty"`
	FramesTxPri_1         *delphi.Counter `protobuf:"bytes,58,opt,name=frames_tx_pri_1,json=framesTxPri1" json:"frames_tx_pri_1,omitempty"`
	FramesTxPri_2         *delphi.Counter `protobuf:"bytes,59,opt,name=frames_tx_pri_2,json=framesTxPri2" json:"frames_tx_pri_2,omitempty"`
	FramesTxPri_3         *delphi.Counter `protobuf:"bytes,60,opt,name=frames_tx_pri_3,json=framesTxPri3" json:"frames_tx_pri_3,omitempty"`
	FramesTxPri_4         *delphi.Counter `protobuf:"bytes,61,opt,name=frames_tx_pri_4,json=framesTxPri4" json:"frames_tx_pri_4,omitempty"`
	FramesTxPri_5         *delphi.Counter `protobuf:"bytes,62,opt,name=frames_tx_pri_5,json=framesTxPri5" json:"frames_tx_pri_5,omitempty"`
	FramesTxPri_6         *delphi.Counter `protobuf:"bytes,63,opt,name=frames_tx_pri_6,json=framesTxPri6" json:"frames_tx_pri_6,omitempty"`
	FramesTxPri_7         *delphi.Counter `protobuf:"bytes,64,opt,name=frames_tx_pri_7,json=framesTxPri7" json:"frames_tx_pri_7,omitempty"`
	FramesRxPri_0         *delphi.Counter `protobuf:"bytes,65,opt,name=frames_rx_pri_0,json=framesRxPri0" json:"frames_rx_pri_0,omitempty"`
	FramesRxPri_1         *delphi.Counter `protobuf:"bytes,66,opt,name=frames_rx_pri_1,json=framesRxPri1" json:"frames_rx_pri_1,omitempty"`
	FramesRxPri_2         *delphi.Counter `protobuf:"bytes,67,opt,name=frames_rx_pri_2,json=framesRxPri2" json:"frames_rx_pri_2,omitempty"`
	FramesRxPri_3         *delphi.Counter `protobuf:"bytes,68,opt,name=frames_rx_pri_3,json=framesRxPri3" json:"frames_rx_pri_3,omitempty"`
	FramesRxPri_4         *delphi.Counter `protobuf:"bytes,69,opt,name=frames_rx_pri_4,json=framesRxPri4" json:"frames_rx_pri_4,omitempty"`
	FramesRxPri_5         *delphi.Counter `protobuf:"bytes,70,opt,name=frames_rx_pri_5,json=framesRxPri5" json:"frames_rx_pri_5,omitempty"`
	FramesRxPri_6         *delphi.Counter `protobuf:"bytes,71,opt,name=frames_rx_pri_6,json=framesRxPri6" json:"frames_rx_pri_6,omitempty"`
	FramesRxPri_7         *delphi.Counter `protobuf:"bytes,72,opt,name=frames_rx_pri_7,json=framesRxPri7" json:"frames_rx_pri_7,omitempty"`
	TxPripause_0_1UsCount *delphi.Counter `protobuf:"bytes,73,opt,name=tx_pripause_0_1us_count,json=txPripause01usCount" json:"tx_pripause_0_1us_count,omitempty"`
	TxPripause_1_1UsCount *delphi.Counter `protobuf:"bytes,74,opt,name=tx_pripause_1_1us_count,json=txPripause11usCount" json:"tx_pripause_1_1us_count,omitempty"`
	TxPripause_2_1UsCount *delphi.Counter `protobuf:"bytes,75,opt,name=tx_pripause_2_1us_count,json=txPripause21usCount" json:"tx_pripause_2_1us_count,omitempty"`
	TxPripause_3_1UsCount *delphi.Counter `protobuf:"bytes,76,opt,name=tx_pripause_3_1us_count,json=txPripause31usCount" json:"tx_pripause_3_1us_count,omitempty"`
	TxPripause_4_1UsCount *delphi.Counter `protobuf:"bytes,77,opt,name=tx_pripause_4_1us_count,json=txPripause41usCount" json:"tx_pripause_4_1us_count,omitempty"`
	TxPripause_5_1UsCount *delphi.Counter `protobuf:"bytes,78,opt,name=tx_pripause_5_1us_count,json=txPripause51usCount" json:"tx_pripause_5_1us_count,omitempty"`
	TxPripause_6_1UsCount *delphi.Counter `protobuf:"bytes,79,opt,name=tx_pripause_6_1us_count,json=txPripause61usCount" json:"tx_pripause_6_1us_count,omitempty"`
	TxPripause_7_1UsCount *delphi.Counter `protobuf:"bytes,80,opt,name=tx_pripause_7_1us_count,json=txPripause71usCount" json:"tx_pripause_7_1us_count,omitempty"`
	RxPripause_0_1UsCount *delphi.Counter `protobuf:"bytes,81,opt,name=rx_pripause_0_1us_count,json=rxPripause01usCount" json:"rx_pripause_0_1us_count,omitempty"`
	RxPripause_1_1UsCount *delphi.Counter `protobuf:"bytes,82,opt,name=rx_pripause_1_1us_count,json=rxPripause11usCount" json:"rx_pripause_1_1us_count,omitempty"`
	RxPripause_2_1UsCount *delphi.Counter `protobuf:"bytes,83,opt,name=rx_pripause_2_1us_count,json=rxPripause21usCount" json:"rx_pripause_2_1us_count,omitempty"`
	RxPripause_3_1UsCount *delphi.Counter `protobuf:"bytes,84,opt,name=rx_pripause_3_1us_count,json=rxPripause31usCount" json:"rx_pripause_3_1us_count,omitempty"`
	RxPripause_4_1UsCount *delphi.Counter `protobuf:"bytes,85,opt,name=rx_pripause_4_1us_count,json=rxPripause41usCount" json:"rx_pripause_4_1us_count,omitempty"`
	RxPripause_5_1UsCount *delphi.Counter `protobuf:"bytes,86,opt,name=rx_pripause_5_1us_count,json=rxPripause51usCount" json:"rx_pripause_5_1us_count,omitempty"`
	RxPripause_6_1UsCount *delphi.Counter `protobuf:"bytes,87,opt,name=rx_pripause_6_1us_count,json=rxPripause61usCount" json:"rx_pripause_6_1us_count,omitempty"`
	RxPripause_7_1UsCount *delphi.Counter `protobuf:"bytes,88,opt,name=rx_pripause_7_1us_count,json=rxPripause71usCount" json:"rx_pripause_7_1us_count,omitempty"`
	RxPause_1UsCount      *delphi.Counter `protobuf:"bytes,89,opt,name=rx_pause_1us_count,json=rxPause1usCount" json:"rx_pause_1us_count,omitempty"`
	FramesTxTruncated     *delphi.Counter `protobuf:"bytes,90,opt,name=frames_tx_truncated,json=framesTxTruncated" json:"frames_tx_truncated,omitempty"`
}

func (m *MacMetrics) Reset()                    { *m = MacMetrics{} }
func (m *MacMetrics) String() string            { return proto.CompactTextString(m) }
func (*MacMetrics) ProtoMessage()               {}
func (*MacMetrics) Descriptor() ([]byte, []int) { return fileDescriptorMacMetrics, []int{0} }

func (m *MacMetrics) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *MacMetrics) GetFramesRxOk() *delphi.Counter {
	if m != nil {
		return m.FramesRxOk
	}
	return nil
}

func (m *MacMetrics) GetFramesRxAll() *delphi.Counter {
	if m != nil {
		return m.FramesRxAll
	}
	return nil
}

func (m *MacMetrics) GetFramesRxBadFcs() *delphi.Counter {
	if m != nil {
		return m.FramesRxBadFcs
	}
	return nil
}

func (m *MacMetrics) GetFramesRxBadAll() *delphi.Counter {
	if m != nil {
		return m.FramesRxBadAll
	}
	return nil
}

func (m *MacMetrics) GetOctetsRxOk() *delphi.Counter {
	if m != nil {
		return m.OctetsRxOk
	}
	return nil
}

func (m *MacMetrics) GetOctetsRxAll() *delphi.Counter {
	if m != nil {
		return m.OctetsRxAll
	}
	return nil
}

func (m *MacMetrics) GetFramesRxUnicast() *delphi.Counter {
	if m != nil {
		return m.FramesRxUnicast
	}
	return nil
}

func (m *MacMetrics) GetFramesRxMulticast() *delphi.Counter {
	if m != nil {
		return m.FramesRxMulticast
	}
	return nil
}

func (m *MacMetrics) GetFramesRxBroadcast() *delphi.Counter {
	if m != nil {
		return m.FramesRxBroadcast
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPause() *delphi.Counter {
	if m != nil {
		return m.FramesRxPause
	}
	return nil
}

func (m *MacMetrics) GetFramesRxBadLength() *delphi.Counter {
	if m != nil {
		return m.FramesRxBadLength
	}
	return nil
}

func (m *MacMetrics) GetFramesRxUndersized() *delphi.Counter {
	if m != nil {
		return m.FramesRxUndersized
	}
	return nil
}

func (m *MacMetrics) GetFramesRxOversized() *delphi.Counter {
	if m != nil {
		return m.FramesRxOversized
	}
	return nil
}

func (m *MacMetrics) GetFramesRxFragments() *delphi.Counter {
	if m != nil {
		return m.FramesRxFragments
	}
	return nil
}

func (m *MacMetrics) GetFramesRxJabber() *delphi.Counter {
	if m != nil {
		return m.FramesRxJabber
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPripause() *delphi.Counter {
	if m != nil {
		return m.FramesRxPripause
	}
	return nil
}

func (m *MacMetrics) GetFramesRxStompedCrc() *delphi.Counter {
	if m != nil {
		return m.FramesRxStompedCrc
	}
	return nil
}

func (m *MacMetrics) GetFramesRxTooLong() *delphi.Counter {
	if m != nil {
		return m.FramesRxTooLong
	}
	return nil
}

func (m *MacMetrics) GetFramesRxVlanGood() *delphi.Counter {
	if m != nil {
		return m.FramesRxVlanGood
	}
	return nil
}

func (m *MacMetrics) GetFramesRxDropped() *delphi.Counter {
	if m != nil {
		return m.FramesRxDropped
	}
	return nil
}

func (m *MacMetrics) GetFramesRxLessThan_64B() *delphi.Counter {
	if m != nil {
		return m.FramesRxLessThan_64B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_64B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_64B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_65B_127B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_65B_127B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_128B_255B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_128B_255B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_256B_511B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_256B_511B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_512B_1023B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_512B_1023B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_1024B_1518B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_1024B_1518B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_1519B_2047B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_1519B_2047B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_2048B_4095B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_2048B_4095B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_4096B_8191B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_4096B_8191B
	}
	return nil
}

func (m *MacMetrics) GetFramesRx_8192B_9215B() *delphi.Counter {
	if m != nil {
		return m.FramesRx_8192B_9215B
	}
	return nil
}

func (m *MacMetrics) GetFramesRxOther() *delphi.Counter {
	if m != nil {
		return m.FramesRxOther
	}
	return nil
}

func (m *MacMetrics) GetFramesTxOk() *delphi.Counter {
	if m != nil {
		return m.FramesTxOk
	}
	return nil
}

func (m *MacMetrics) GetFramesTxAll() *delphi.Counter {
	if m != nil {
		return m.FramesTxAll
	}
	return nil
}

func (m *MacMetrics) GetFramesTxBad() *delphi.Counter {
	if m != nil {
		return m.FramesTxBad
	}
	return nil
}

func (m *MacMetrics) GetOctetsTxOk() *delphi.Counter {
	if m != nil {
		return m.OctetsTxOk
	}
	return nil
}

func (m *MacMetrics) GetOctetsTxTotal() *delphi.Counter {
	if m != nil {
		return m.OctetsTxTotal
	}
	return nil
}

func (m *MacMetrics) GetFramesTxUnicast() *delphi.Counter {
	if m != nil {
		return m.FramesTxUnicast
	}
	return nil
}

func (m *MacMetrics) GetFramesTxMulticast() *delphi.Counter {
	if m != nil {
		return m.FramesTxMulticast
	}
	return nil
}

func (m *MacMetrics) GetFramesTxBroadcast() *delphi.Counter {
	if m != nil {
		return m.FramesTxBroadcast
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPause() *delphi.Counter {
	if m != nil {
		return m.FramesTxPause
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPripause() *delphi.Counter {
	if m != nil {
		return m.FramesTxPripause
	}
	return nil
}

func (m *MacMetrics) GetFramesTxVlan() *delphi.Counter {
	if m != nil {
		return m.FramesTxVlan
	}
	return nil
}

func (m *MacMetrics) GetFramesTxLessThan_64B() *delphi.Counter {
	if m != nil {
		return m.FramesTxLessThan_64B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_64B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_64B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_65B_127B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_65B_127B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_128B_255B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_128B_255B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_256B_511B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_256B_511B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_512B_1023B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_512B_1023B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_1024B_1518B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_1024B_1518B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_1519B_2047B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_1519B_2047B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_2048B_4095B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_2048B_4095B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_4096B_8191B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_4096B_8191B
	}
	return nil
}

func (m *MacMetrics) GetFramesTx_8192B_9215B() *delphi.Counter {
	if m != nil {
		return m.FramesTx_8192B_9215B
	}
	return nil
}

func (m *MacMetrics) GetFramesTxOther() *delphi.Counter {
	if m != nil {
		return m.FramesTxOther
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_0() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_0
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_1() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_1
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_2() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_2
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_3() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_3
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_4() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_4
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_5() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_5
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_6() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_6
	}
	return nil
}

func (m *MacMetrics) GetFramesTxPri_7() *delphi.Counter {
	if m != nil {
		return m.FramesTxPri_7
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_0() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_0
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_1() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_1
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_2() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_2
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_3() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_3
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_4() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_4
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_5() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_5
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_6() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_6
	}
	return nil
}

func (m *MacMetrics) GetFramesRxPri_7() *delphi.Counter {
	if m != nil {
		return m.FramesRxPri_7
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_0_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_0_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_1_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_1_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_2_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_2_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_3_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_3_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_4_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_4_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_5_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_5_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_6_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_6_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetTxPripause_7_1UsCount() *delphi.Counter {
	if m != nil {
		return m.TxPripause_7_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_0_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_0_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_1_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_1_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_2_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_2_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_3_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_3_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_4_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_4_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_5_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_5_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_6_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_6_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPripause_7_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPripause_7_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetRxPause_1UsCount() *delphi.Counter {
	if m != nil {
		return m.RxPause_1UsCount
	}
	return nil
}

func (m *MacMetrics) GetFramesTxTruncated() *delphi.Counter {
	if m != nil {
		return m.FramesTxTruncated
	}
	return nil
}

func init() {
	proto.RegisterType((*MacMetrics)(nil), "metrics.MacMetrics")
}
func (m *MacMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacMetrics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Key))
		i += 4
	}
	if m.FramesRxOk != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxOk.Size()))
		n1, err := m.FramesRxOk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FramesRxAll != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxAll.Size()))
		n2, err := m.FramesRxAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.FramesRxBadFcs != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxBadFcs.Size()))
		n3, err := m.FramesRxBadFcs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.FramesRxBadAll != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxBadAll.Size()))
		n4, err := m.FramesRxBadAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.OctetsRxOk != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.OctetsRxOk.Size()))
		n5, err := m.OctetsRxOk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.OctetsRxAll != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.OctetsRxAll.Size()))
		n6, err := m.OctetsRxAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.FramesRxUnicast != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxUnicast.Size()))
		n7, err := m.FramesRxUnicast.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.FramesRxMulticast != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxMulticast.Size()))
		n8, err := m.FramesRxMulticast.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.FramesRxBroadcast != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxBroadcast.Size()))
		n9, err := m.FramesRxBroadcast.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.FramesRxPause != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPause.Size()))
		n10, err := m.FramesRxPause.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.FramesRxBadLength != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxBadLength.Size()))
		n11, err := m.FramesRxBadLength.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.FramesRxUndersized != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxUndersized.Size()))
		n12, err := m.FramesRxUndersized.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.FramesRxOversized != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxOversized.Size()))
		n13, err := m.FramesRxOversized.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.FramesRxFragments != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxFragments.Size()))
		n14, err := m.FramesRxFragments.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.FramesRxJabber != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxJabber.Size()))
		n15, err := m.FramesRxJabber.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.FramesRxPripause != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPripause.Size()))
		n16, err := m.FramesRxPripause.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.FramesRxStompedCrc != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxStompedCrc.Size()))
		n17, err := m.FramesRxStompedCrc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.FramesRxTooLong != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxTooLong.Size()))
		n18, err := m.FramesRxTooLong.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.FramesRxVlanGood != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxVlanGood.Size()))
		n19, err := m.FramesRxVlanGood.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.FramesRxDropped != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxDropped.Size()))
		n20, err := m.FramesRxDropped.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.FramesRxLessThan_64B != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxLessThan_64B.Size()))
		n21, err := m.FramesRxLessThan_64B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.FramesRx_64B != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_64B.Size()))
		n22, err := m.FramesRx_64B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.FramesRx_65B_127B != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_65B_127B.Size()))
		n23, err := m.FramesRx_65B_127B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.FramesRx_128B_255B != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_128B_255B.Size()))
		n24, err := m.FramesRx_128B_255B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.FramesRx_256B_511B != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_256B_511B.Size()))
		n25, err := m.FramesRx_256B_511B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.FramesRx_512B_1023B != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_512B_1023B.Size()))
		n26, err := m.FramesRx_512B_1023B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.FramesRx_1024B_1518B != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_1024B_1518B.Size()))
		n27, err := m.FramesRx_1024B_1518B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.FramesRx_1519B_2047B != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_1519B_2047B.Size()))
		n28, err := m.FramesRx_1519B_2047B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.FramesRx_2048B_4095B != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_2048B_4095B.Size()))
		n29, err := m.FramesRx_2048B_4095B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.FramesRx_4096B_8191B != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_4096B_8191B.Size()))
		n30, err := m.FramesRx_4096B_8191B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.FramesRx_8192B_9215B != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRx_8192B_9215B.Size()))
		n31, err := m.FramesRx_8192B_9215B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.FramesRxOther != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxOther.Size()))
		n32, err := m.FramesRxOther.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.FramesTxOk != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxOk.Size()))
		n33, err := m.FramesTxOk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.FramesTxAll != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxAll.Size()))
		n34, err := m.FramesTxAll.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.FramesTxBad != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxBad.Size()))
		n35, err := m.FramesTxBad.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.OctetsTxOk != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.OctetsTxOk.Size()))
		n36, err := m.OctetsTxOk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.OctetsTxTotal != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.OctetsTxTotal.Size()))
		n37, err := m.OctetsTxTotal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.FramesTxUnicast != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxUnicast.Size()))
		n38, err := m.FramesTxUnicast.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.FramesTxMulticast != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxMulticast.Size()))
		n39, err := m.FramesTxMulticast.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.FramesTxBroadcast != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxBroadcast.Size()))
		n40, err := m.FramesTxBroadcast.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.FramesTxPause != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPause.Size()))
		n41, err := m.FramesTxPause.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.FramesTxPripause != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPripause.Size()))
		n42, err := m.FramesTxPripause.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.FramesTxVlan != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxVlan.Size()))
		n43, err := m.FramesTxVlan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.FramesTxLessThan_64B != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxLessThan_64B.Size()))
		n44, err := m.FramesTxLessThan_64B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.FramesTx_64B != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_64B.Size()))
		n45, err := m.FramesTx_64B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.FramesTx_65B_127B != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_65B_127B.Size()))
		n46, err := m.FramesTx_65B_127B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.FramesTx_128B_255B != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_128B_255B.Size()))
		n47, err := m.FramesTx_128B_255B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if m.FramesTx_256B_511B != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_256B_511B.Size()))
		n48, err := m.FramesTx_256B_511B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.FramesTx_512B_1023B != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_512B_1023B.Size()))
		n49, err := m.FramesTx_512B_1023B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.FramesTx_1024B_1518B != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_1024B_1518B.Size()))
		n50, err := m.FramesTx_1024B_1518B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if m.FramesTx_1519B_2047B != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_1519B_2047B.Size()))
		n51, err := m.FramesTx_1519B_2047B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if m.FramesTx_2048B_4095B != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_2048B_4095B.Size()))
		n52, err := m.FramesTx_2048B_4095B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	if m.FramesTx_4096B_8191B != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_4096B_8191B.Size()))
		n53, err := m.FramesTx_4096B_8191B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.FramesTx_8192B_9215B != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTx_8192B_9215B.Size()))
		n54, err := m.FramesTx_8192B_9215B.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	if m.FramesTxOther != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxOther.Size()))
		n55, err := m.FramesTxOther.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.FramesTxPri_0 != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPri_0.Size()))
		n56, err := m.FramesTxPri_0.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if m.FramesTxPri_1 != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPri_1.Size()))
		n57, err := m.FramesTxPri_1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	if m.FramesTxPri_2 != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPri_2.Size()))
		n58, err := m.FramesTxPri_2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	if m.FramesTxPri_3 != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPri_3.Size()))
		n59, err := m.FramesTxPri_3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	if m.FramesTxPri_4 != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPri_4.Size()))
		n60, err := m.FramesTxPri_4.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	if m.FramesTxPri_5 != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPri_5.Size()))
		n61, err := m.FramesTxPri_5.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	if m.FramesTxPri_6 != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPri_6.Size()))
		n62, err := m.FramesTxPri_6.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if m.FramesTxPri_7 != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxPri_7.Size()))
		n63, err := m.FramesTxPri_7.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	if m.FramesRxPri_0 != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPri_0.Size()))
		n64, err := m.FramesRxPri_0.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	if m.FramesRxPri_1 != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPri_1.Size()))
		n65, err := m.FramesRxPri_1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.FramesRxPri_2 != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPri_2.Size()))
		n66, err := m.FramesRxPri_2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if m.FramesRxPri_3 != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPri_3.Size()))
		n67, err := m.FramesRxPri_3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.FramesRxPri_4 != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPri_4.Size()))
		n68, err := m.FramesRxPri_4.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	if m.FramesRxPri_5 != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPri_5.Size()))
		n69, err := m.FramesRxPri_5.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	if m.FramesRxPri_6 != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPri_6.Size()))
		n70, err := m.FramesRxPri_6.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	if m.FramesRxPri_7 != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesRxPri_7.Size()))
		n71, err := m.FramesRxPri_7.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.TxPripause_0_1UsCount != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.TxPripause_0_1UsCount.Size()))
		n72, err := m.TxPripause_0_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	if m.TxPripause_1_1UsCount != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.TxPripause_1_1UsCount.Size()))
		n73, err := m.TxPripause_1_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	if m.TxPripause_2_1UsCount != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.TxPripause_2_1UsCount.Size()))
		n74, err := m.TxPripause_2_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.TxPripause_3_1UsCount != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.TxPripause_3_1UsCount.Size()))
		n75, err := m.TxPripause_3_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	if m.TxPripause_4_1UsCount != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.TxPripause_4_1UsCount.Size()))
		n76, err := m.TxPripause_4_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	if m.TxPripause_5_1UsCount != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.TxPripause_5_1UsCount.Size()))
		n77, err := m.TxPripause_5_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	if m.TxPripause_6_1UsCount != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.TxPripause_6_1UsCount.Size()))
		n78, err := m.TxPripause_6_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	if m.TxPripause_7_1UsCount != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.TxPripause_7_1UsCount.Size()))
		n79, err := m.TxPripause_7_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	if m.RxPripause_0_1UsCount != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.RxPripause_0_1UsCount.Size()))
		n80, err := m.RxPripause_0_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	if m.RxPripause_1_1UsCount != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.RxPripause_1_1UsCount.Size()))
		n81, err := m.RxPripause_1_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	if m.RxPripause_2_1UsCount != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.RxPripause_2_1UsCount.Size()))
		n82, err := m.RxPripause_2_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	if m.RxPripause_3_1UsCount != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.RxPripause_3_1UsCount.Size()))
		n83, err := m.RxPripause_3_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	if m.RxPripause_4_1UsCount != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.RxPripause_4_1UsCount.Size()))
		n84, err := m.RxPripause_4_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	if m.RxPripause_5_1UsCount != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.RxPripause_5_1UsCount.Size()))
		n85, err := m.RxPripause_5_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	if m.RxPripause_6_1UsCount != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.RxPripause_6_1UsCount.Size()))
		n86, err := m.RxPripause_6_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n86
	}
	if m.RxPripause_7_1UsCount != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.RxPripause_7_1UsCount.Size()))
		n87, err := m.RxPripause_7_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n87
	}
	if m.RxPause_1UsCount != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.RxPause_1UsCount.Size()))
		n88, err := m.RxPause_1UsCount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n88
	}
	if m.FramesTxTruncated != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintMacMetrics(dAtA, i, uint64(m.FramesTxTruncated.Size()))
		n89, err := m.FramesTxTruncated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n89
	}
	return i, nil
}

func encodeVarintMacMetrics(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MacMetrics) Size() (n int) {
	var l int
	_ = l
	if m.Key != 0 {
		n += 5
	}
	if m.FramesRxOk != nil {
		l = m.FramesRxOk.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxAll != nil {
		l = m.FramesRxAll.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxBadFcs != nil {
		l = m.FramesRxBadFcs.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxBadAll != nil {
		l = m.FramesRxBadAll.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.OctetsRxOk != nil {
		l = m.OctetsRxOk.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.OctetsRxAll != nil {
		l = m.OctetsRxAll.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxUnicast != nil {
		l = m.FramesRxUnicast.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxMulticast != nil {
		l = m.FramesRxMulticast.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxBroadcast != nil {
		l = m.FramesRxBroadcast.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPause != nil {
		l = m.FramesRxPause.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxBadLength != nil {
		l = m.FramesRxBadLength.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxUndersized != nil {
		l = m.FramesRxUndersized.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxOversized != nil {
		l = m.FramesRxOversized.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxFragments != nil {
		l = m.FramesRxFragments.Size()
		n += 1 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxJabber != nil {
		l = m.FramesRxJabber.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPripause != nil {
		l = m.FramesRxPripause.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxStompedCrc != nil {
		l = m.FramesRxStompedCrc.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxTooLong != nil {
		l = m.FramesRxTooLong.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxVlanGood != nil {
		l = m.FramesRxVlanGood.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxDropped != nil {
		l = m.FramesRxDropped.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxLessThan_64B != nil {
		l = m.FramesRxLessThan_64B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_64B != nil {
		l = m.FramesRx_64B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_65B_127B != nil {
		l = m.FramesRx_65B_127B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_128B_255B != nil {
		l = m.FramesRx_128B_255B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_256B_511B != nil {
		l = m.FramesRx_256B_511B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_512B_1023B != nil {
		l = m.FramesRx_512B_1023B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_1024B_1518B != nil {
		l = m.FramesRx_1024B_1518B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_1519B_2047B != nil {
		l = m.FramesRx_1519B_2047B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_2048B_4095B != nil {
		l = m.FramesRx_2048B_4095B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_4096B_8191B != nil {
		l = m.FramesRx_4096B_8191B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRx_8192B_9215B != nil {
		l = m.FramesRx_8192B_9215B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxOther != nil {
		l = m.FramesRxOther.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxOk != nil {
		l = m.FramesTxOk.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxAll != nil {
		l = m.FramesTxAll.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxBad != nil {
		l = m.FramesTxBad.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.OctetsTxOk != nil {
		l = m.OctetsTxOk.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.OctetsTxTotal != nil {
		l = m.OctetsTxTotal.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxUnicast != nil {
		l = m.FramesTxUnicast.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxMulticast != nil {
		l = m.FramesTxMulticast.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxBroadcast != nil {
		l = m.FramesTxBroadcast.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPause != nil {
		l = m.FramesTxPause.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPripause != nil {
		l = m.FramesTxPripause.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxVlan != nil {
		l = m.FramesTxVlan.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxLessThan_64B != nil {
		l = m.FramesTxLessThan_64B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_64B != nil {
		l = m.FramesTx_64B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_65B_127B != nil {
		l = m.FramesTx_65B_127B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_128B_255B != nil {
		l = m.FramesTx_128B_255B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_256B_511B != nil {
		l = m.FramesTx_256B_511B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_512B_1023B != nil {
		l = m.FramesTx_512B_1023B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_1024B_1518B != nil {
		l = m.FramesTx_1024B_1518B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_1519B_2047B != nil {
		l = m.FramesTx_1519B_2047B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_2048B_4095B != nil {
		l = m.FramesTx_2048B_4095B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_4096B_8191B != nil {
		l = m.FramesTx_4096B_8191B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTx_8192B_9215B != nil {
		l = m.FramesTx_8192B_9215B.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxOther != nil {
		l = m.FramesTxOther.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPri_0 != nil {
		l = m.FramesTxPri_0.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPri_1 != nil {
		l = m.FramesTxPri_1.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPri_2 != nil {
		l = m.FramesTxPri_2.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPri_3 != nil {
		l = m.FramesTxPri_3.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPri_4 != nil {
		l = m.FramesTxPri_4.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPri_5 != nil {
		l = m.FramesTxPri_5.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPri_6 != nil {
		l = m.FramesTxPri_6.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxPri_7 != nil {
		l = m.FramesTxPri_7.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPri_0 != nil {
		l = m.FramesRxPri_0.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPri_1 != nil {
		l = m.FramesRxPri_1.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPri_2 != nil {
		l = m.FramesRxPri_2.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPri_3 != nil {
		l = m.FramesRxPri_3.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPri_4 != nil {
		l = m.FramesRxPri_4.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPri_5 != nil {
		l = m.FramesRxPri_5.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPri_6 != nil {
		l = m.FramesRxPri_6.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesRxPri_7 != nil {
		l = m.FramesRxPri_7.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.TxPripause_0_1UsCount != nil {
		l = m.TxPripause_0_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.TxPripause_1_1UsCount != nil {
		l = m.TxPripause_1_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.TxPripause_2_1UsCount != nil {
		l = m.TxPripause_2_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.TxPripause_3_1UsCount != nil {
		l = m.TxPripause_3_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.TxPripause_4_1UsCount != nil {
		l = m.TxPripause_4_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.TxPripause_5_1UsCount != nil {
		l = m.TxPripause_5_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.TxPripause_6_1UsCount != nil {
		l = m.TxPripause_6_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.TxPripause_7_1UsCount != nil {
		l = m.TxPripause_7_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.RxPripause_0_1UsCount != nil {
		l = m.RxPripause_0_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.RxPripause_1_1UsCount != nil {
		l = m.RxPripause_1_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.RxPripause_2_1UsCount != nil {
		l = m.RxPripause_2_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.RxPripause_3_1UsCount != nil {
		l = m.RxPripause_3_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.RxPripause_4_1UsCount != nil {
		l = m.RxPripause_4_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.RxPripause_5_1UsCount != nil {
		l = m.RxPripause_5_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.RxPripause_6_1UsCount != nil {
		l = m.RxPripause_6_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.RxPripause_7_1UsCount != nil {
		l = m.RxPripause_7_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.RxPause_1UsCount != nil {
		l = m.RxPause_1UsCount.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	if m.FramesTxTruncated != nil {
		l = m.FramesTxTruncated.Size()
		n += 2 + l + sovMacMetrics(uint64(l))
	}
	return n
}

func sovMacMetrics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMacMetrics(x uint64) (n int) {
	return sovMacMetrics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MacMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMacMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxOk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxOk == nil {
				m.FramesRxOk = &delphi.Counter{}
			}
			if err := m.FramesRxOk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxAll == nil {
				m.FramesRxAll = &delphi.Counter{}
			}
			if err := m.FramesRxAll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxBadFcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxBadFcs == nil {
				m.FramesRxBadFcs = &delphi.Counter{}
			}
			if err := m.FramesRxBadFcs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxBadAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxBadAll == nil {
				m.FramesRxBadAll = &delphi.Counter{}
			}
			if err := m.FramesRxBadAll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OctetsRxOk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OctetsRxOk == nil {
				m.OctetsRxOk = &delphi.Counter{}
			}
			if err := m.OctetsRxOk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OctetsRxAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OctetsRxAll == nil {
				m.OctetsRxAll = &delphi.Counter{}
			}
			if err := m.OctetsRxAll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxUnicast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxUnicast == nil {
				m.FramesRxUnicast = &delphi.Counter{}
			}
			if err := m.FramesRxUnicast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxMulticast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxMulticast == nil {
				m.FramesRxMulticast = &delphi.Counter{}
			}
			if err := m.FramesRxMulticast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxBroadcast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxBroadcast == nil {
				m.FramesRxBroadcast = &delphi.Counter{}
			}
			if err := m.FramesRxBroadcast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPause == nil {
				m.FramesRxPause = &delphi.Counter{}
			}
			if err := m.FramesRxPause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxBadLength", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxBadLength == nil {
				m.FramesRxBadLength = &delphi.Counter{}
			}
			if err := m.FramesRxBadLength.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxUndersized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxUndersized == nil {
				m.FramesRxUndersized = &delphi.Counter{}
			}
			if err := m.FramesRxUndersized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxOversized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxOversized == nil {
				m.FramesRxOversized = &delphi.Counter{}
			}
			if err := m.FramesRxOversized.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxFragments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxFragments == nil {
				m.FramesRxFragments = &delphi.Counter{}
			}
			if err := m.FramesRxFragments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxJabber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxJabber == nil {
				m.FramesRxJabber = &delphi.Counter{}
			}
			if err := m.FramesRxJabber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPripause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPripause == nil {
				m.FramesRxPripause = &delphi.Counter{}
			}
			if err := m.FramesRxPripause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxStompedCrc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxStompedCrc == nil {
				m.FramesRxStompedCrc = &delphi.Counter{}
			}
			if err := m.FramesRxStompedCrc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxTooLong", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxTooLong == nil {
				m.FramesRxTooLong = &delphi.Counter{}
			}
			if err := m.FramesRxTooLong.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxVlanGood", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxVlanGood == nil {
				m.FramesRxVlanGood = &delphi.Counter{}
			}
			if err := m.FramesRxVlanGood.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxDropped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxDropped == nil {
				m.FramesRxDropped = &delphi.Counter{}
			}
			if err := m.FramesRxDropped.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxLessThan_64B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxLessThan_64B == nil {
				m.FramesRxLessThan_64B = &delphi.Counter{}
			}
			if err := m.FramesRxLessThan_64B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_64B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_64B == nil {
				m.FramesRx_64B = &delphi.Counter{}
			}
			if err := m.FramesRx_64B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_65B_127B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_65B_127B == nil {
				m.FramesRx_65B_127B = &delphi.Counter{}
			}
			if err := m.FramesRx_65B_127B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_128B_255B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_128B_255B == nil {
				m.FramesRx_128B_255B = &delphi.Counter{}
			}
			if err := m.FramesRx_128B_255B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_256B_511B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_256B_511B == nil {
				m.FramesRx_256B_511B = &delphi.Counter{}
			}
			if err := m.FramesRx_256B_511B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_512B_1023B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_512B_1023B == nil {
				m.FramesRx_512B_1023B = &delphi.Counter{}
			}
			if err := m.FramesRx_512B_1023B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_1024B_1518B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_1024B_1518B == nil {
				m.FramesRx_1024B_1518B = &delphi.Counter{}
			}
			if err := m.FramesRx_1024B_1518B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_1519B_2047B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_1519B_2047B == nil {
				m.FramesRx_1519B_2047B = &delphi.Counter{}
			}
			if err := m.FramesRx_1519B_2047B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_2048B_4095B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_2048B_4095B == nil {
				m.FramesRx_2048B_4095B = &delphi.Counter{}
			}
			if err := m.FramesRx_2048B_4095B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_4096B_8191B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_4096B_8191B == nil {
				m.FramesRx_4096B_8191B = &delphi.Counter{}
			}
			if err := m.FramesRx_4096B_8191B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_8192B_9215B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRx_8192B_9215B == nil {
				m.FramesRx_8192B_9215B = &delphi.Counter{}
			}
			if err := m.FramesRx_8192B_9215B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxOther", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxOther == nil {
				m.FramesRxOther = &delphi.Counter{}
			}
			if err := m.FramesRxOther.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxOk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxOk == nil {
				m.FramesTxOk = &delphi.Counter{}
			}
			if err := m.FramesTxOk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxAll == nil {
				m.FramesTxAll = &delphi.Counter{}
			}
			if err := m.FramesTxAll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxBad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxBad == nil {
				m.FramesTxBad = &delphi.Counter{}
			}
			if err := m.FramesTxBad.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OctetsTxOk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OctetsTxOk == nil {
				m.OctetsTxOk = &delphi.Counter{}
			}
			if err := m.OctetsTxOk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OctetsTxTotal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OctetsTxTotal == nil {
				m.OctetsTxTotal = &delphi.Counter{}
			}
			if err := m.OctetsTxTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxUnicast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxUnicast == nil {
				m.FramesTxUnicast = &delphi.Counter{}
			}
			if err := m.FramesTxUnicast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxMulticast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxMulticast == nil {
				m.FramesTxMulticast = &delphi.Counter{}
			}
			if err := m.FramesTxMulticast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxBroadcast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxBroadcast == nil {
				m.FramesTxBroadcast = &delphi.Counter{}
			}
			if err := m.FramesTxBroadcast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPause == nil {
				m.FramesTxPause = &delphi.Counter{}
			}
			if err := m.FramesTxPause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPripause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPripause == nil {
				m.FramesTxPripause = &delphi.Counter{}
			}
			if err := m.FramesTxPripause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxVlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxVlan == nil {
				m.FramesTxVlan = &delphi.Counter{}
			}
			if err := m.FramesTxVlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxLessThan_64B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxLessThan_64B == nil {
				m.FramesTxLessThan_64B = &delphi.Counter{}
			}
			if err := m.FramesTxLessThan_64B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_64B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_64B == nil {
				m.FramesTx_64B = &delphi.Counter{}
			}
			if err := m.FramesTx_64B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_65B_127B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_65B_127B == nil {
				m.FramesTx_65B_127B = &delphi.Counter{}
			}
			if err := m.FramesTx_65B_127B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_128B_255B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_128B_255B == nil {
				m.FramesTx_128B_255B = &delphi.Counter{}
			}
			if err := m.FramesTx_128B_255B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 49:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_256B_511B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_256B_511B == nil {
				m.FramesTx_256B_511B = &delphi.Counter{}
			}
			if err := m.FramesTx_256B_511B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_512B_1023B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_512B_1023B == nil {
				m.FramesTx_512B_1023B = &delphi.Counter{}
			}
			if err := m.FramesTx_512B_1023B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_1024B_1518B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_1024B_1518B == nil {
				m.FramesTx_1024B_1518B = &delphi.Counter{}
			}
			if err := m.FramesTx_1024B_1518B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_1519B_2047B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_1519B_2047B == nil {
				m.FramesTx_1519B_2047B = &delphi.Counter{}
			}
			if err := m.FramesTx_1519B_2047B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_2048B_4095B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_2048B_4095B == nil {
				m.FramesTx_2048B_4095B = &delphi.Counter{}
			}
			if err := m.FramesTx_2048B_4095B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_4096B_8191B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_4096B_8191B == nil {
				m.FramesTx_4096B_8191B = &delphi.Counter{}
			}
			if err := m.FramesTx_4096B_8191B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_8192B_9215B", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTx_8192B_9215B == nil {
				m.FramesTx_8192B_9215B = &delphi.Counter{}
			}
			if err := m.FramesTx_8192B_9215B.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxOther", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxOther == nil {
				m.FramesTxOther = &delphi.Counter{}
			}
			if err := m.FramesTxOther.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPri_0 == nil {
				m.FramesTxPri_0 = &delphi.Counter{}
			}
			if err := m.FramesTxPri_0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPri_1 == nil {
				m.FramesTxPri_1 = &delphi.Counter{}
			}
			if err := m.FramesTxPri_1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPri_2 == nil {
				m.FramesTxPri_2 = &delphi.Counter{}
			}
			if err := m.FramesTxPri_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPri_3 == nil {
				m.FramesTxPri_3 = &delphi.Counter{}
			}
			if err := m.FramesTxPri_3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPri_4 == nil {
				m.FramesTxPri_4 = &delphi.Counter{}
			}
			if err := m.FramesTxPri_4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_5", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPri_5 == nil {
				m.FramesTxPri_5 = &delphi.Counter{}
			}
			if err := m.FramesTxPri_5.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPri_6 == nil {
				m.FramesTxPri_6 = &delphi.Counter{}
			}
			if err := m.FramesTxPri_6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_7", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxPri_7 == nil {
				m.FramesTxPri_7 = &delphi.Counter{}
			}
			if err := m.FramesTxPri_7.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPri_0 == nil {
				m.FramesRxPri_0 = &delphi.Counter{}
			}
			if err := m.FramesRxPri_0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPri_1 == nil {
				m.FramesRxPri_1 = &delphi.Counter{}
			}
			if err := m.FramesRxPri_1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPri_2 == nil {
				m.FramesRxPri_2 = &delphi.Counter{}
			}
			if err := m.FramesRxPri_2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPri_3 == nil {
				m.FramesRxPri_3 = &delphi.Counter{}
			}
			if err := m.FramesRxPri_3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPri_4 == nil {
				m.FramesRxPri_4 = &delphi.Counter{}
			}
			if err := m.FramesRxPri_4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_5", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPri_5 == nil {
				m.FramesRxPri_5 = &delphi.Counter{}
			}
			if err := m.FramesRxPri_5.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPri_6 == nil {
				m.FramesRxPri_6 = &delphi.Counter{}
			}
			if err := m.FramesRxPri_6.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_7", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesRxPri_7 == nil {
				m.FramesRxPri_7 = &delphi.Counter{}
			}
			if err := m.FramesRxPri_7.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_0_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxPripause_0_1UsCount == nil {
				m.TxPripause_0_1UsCount = &delphi.Counter{}
			}
			if err := m.TxPripause_0_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_1_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxPripause_1_1UsCount == nil {
				m.TxPripause_1_1UsCount = &delphi.Counter{}
			}
			if err := m.TxPripause_1_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_2_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxPripause_2_1UsCount == nil {
				m.TxPripause_2_1UsCount = &delphi.Counter{}
			}
			if err := m.TxPripause_2_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_3_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxPripause_3_1UsCount == nil {
				m.TxPripause_3_1UsCount = &delphi.Counter{}
			}
			if err := m.TxPripause_3_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_4_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxPripause_4_1UsCount == nil {
				m.TxPripause_4_1UsCount = &delphi.Counter{}
			}
			if err := m.TxPripause_4_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_5_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxPripause_5_1UsCount == nil {
				m.TxPripause_5_1UsCount = &delphi.Counter{}
			}
			if err := m.TxPripause_5_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_6_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxPripause_6_1UsCount == nil {
				m.TxPripause_6_1UsCount = &delphi.Counter{}
			}
			if err := m.TxPripause_6_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_7_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxPripause_7_1UsCount == nil {
				m.TxPripause_7_1UsCount = &delphi.Counter{}
			}
			if err := m.TxPripause_7_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_0_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPripause_0_1UsCount == nil {
				m.RxPripause_0_1UsCount = &delphi.Counter{}
			}
			if err := m.RxPripause_0_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_1_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPripause_1_1UsCount == nil {
				m.RxPripause_1_1UsCount = &delphi.Counter{}
			}
			if err := m.RxPripause_1_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_2_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPripause_2_1UsCount == nil {
				m.RxPripause_2_1UsCount = &delphi.Counter{}
			}
			if err := m.RxPripause_2_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_3_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPripause_3_1UsCount == nil {
				m.RxPripause_3_1UsCount = &delphi.Counter{}
			}
			if err := m.RxPripause_3_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_4_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPripause_4_1UsCount == nil {
				m.RxPripause_4_1UsCount = &delphi.Counter{}
			}
			if err := m.RxPripause_4_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_5_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPripause_5_1UsCount == nil {
				m.RxPripause_5_1UsCount = &delphi.Counter{}
			}
			if err := m.RxPripause_5_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_6_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPripause_6_1UsCount == nil {
				m.RxPripause_6_1UsCount = &delphi.Counter{}
			}
			if err := m.RxPripause_6_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_7_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPripause_7_1UsCount == nil {
				m.RxPripause_7_1UsCount = &delphi.Counter{}
			}
			if err := m.RxPripause_7_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPause_1UsCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxPause_1UsCount == nil {
				m.RxPause_1UsCount = &delphi.Counter{}
			}
			if err := m.RxPause_1UsCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxTruncated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMacMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FramesTxTruncated == nil {
				m.FramesTxTruncated = &delphi.Counter{}
			}
			if err := m.FramesTxTruncated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMacMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMacMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMacMetrics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMacMetrics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMacMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMacMetrics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMacMetrics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMacMetrics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMacMetrics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMacMetrics   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mac_metrics.proto", fileDescriptorMacMetrics) }

var fileDescriptorMacMetrics = []byte{
	// 1245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x98, 0x5b, 0x77, 0xdb, 0x44,
	0x17, 0x86, 0x97, 0xbf, 0x7e, 0xb4, 0x45, 0xcd, 0x51, 0xe9, 0x61, 0x53, 0x20, 0x84, 0x72, 0x0a,
	0x14, 0x82, 0x47, 0x96, 0x64, 0xbb, 0x4d, 0x0f, 0x71, 0xda, 0x14, 0xda, 0x84, 0x84, 0x54, 0x2d,
	0xd0, 0x1b, 0x2d, 0x8d, 0xa4, 0xc4, 0xa6, 0xb2, 0xe4, 0x35, 0x1a, 0x67, 0x15, 0x7e, 0x21, 0x97,
	0x5c, 0x71, 0xcd, 0xca, 0x2f, 0x61, 0x49, 0x8a, 0xa2, 0x99, 0x68, 0xe4, 0x7d, 0x05, 0x4d, 0xdf,
	0xe7, 0x91, 0x34, 0xde, 0x7a, 0xb7, 0x1b, 0x6d, 0x79, 0xec, 0xf9, 0xee, 0x38, 0xe4, 0x6c, 0xe4,
	0xa7, 0x1b, 0x13, 0x96, 0xf0, 0x44, 0xbf, 0x72, 0xf6, 0xc7, 0xdb, 0x73, 0x41, 0x18, 0x4d, 0x86,
	0xa3, 0xe2, 0xc7, 0x77, 0xfe, 0xb9, 0xab, 0x69, 0x7b, 0x9e, 0xbf, 0x57, 0xfc, 0xa5, 0xbe, 0xa4,
	0x5d, 0x7a, 0x11, 0xfe, 0x01, 0xad, 0xb5, 0xd6, 0xfa, 0x95, 0xc3, 0xec, 0x7f, 0x75, 0xa2, 0xcd,
	0x1d, 0x31, 0x6f, 0x1c, 0xa6, 0x2e, 0x7b, 0xe7, 0x26, 0x6f, 0xe1, 0x7f, 0x6b, 0xad, 0xf5, 0x6b,
	0xc6, 0xe2, 0xc6, 0x99, 0x65, 0x3b, 0x99, 0xc6, 0x3c, 0x64, 0x87, 0x5a, 0x11, 0x3a, 0x7c, 0xb7,
	0xff, 0x56, 0xef, 0x68, 0xf3, 0x15, 0xe2, 0x45, 0x11, 0x5c, 0x52, 0x33, 0xd7, 0x4a, 0x66, 0x2b,
	0x8a, 0xf4, 0x7b, 0xda, 0x72, 0x05, 0x51, 0x2f, 0x70, 0x8f, 0xfc, 0x14, 0xfe, 0xaf, 0x06, 0x17,
	0x4a, 0x70, 0xe0, 0x05, 0x3b, 0x7e, 0x5a, 0x67, 0xb3, 0x8b, 0xbe, 0x87, 0xb3, 0xd9, 0x75, 0x89,
	0x36, 0x97, 0xf8, 0x3c, 0xe4, 0xe5, 0xf3, 0x5d, 0x6e, 0x78, 0xbe, 0x22, 0x54, 0x3e, 0x5f, 0x85,
	0x64, 0x97, 0xba, 0xd2, 0xf0, 0x7c, 0x25, 0x93, 0x5d, 0xe7, 0xbe, 0x78, 0x8f, 0xd3, 0x78, 0xe4,
	0x7b, 0x29, 0x87, 0xab, 0x6a, 0x70, 0xb1, 0xbc, 0xc7, 0x57, 0x45, 0x4e, 0x7f, 0xa4, 0xad, 0x54,
	0xf0, 0x78, 0x1a, 0xf1, 0x02, 0x7f, 0x5f, 0x8d, 0x2f, 0x97, 0xf8, 0x5e, 0x99, 0x94, 0x05, 0x94,
	0x25, 0x5e, 0x90, 0x0b, 0x34, 0x44, 0x30, 0x28, 0x93, 0x7a, 0x57, 0x5b, 0xac, 0x04, 0x13, 0x6f,
	0x9a, 0x86, 0x70, 0x4d, 0x0d, 0xcf, 0x97, 0xf0, 0x41, 0x96, 0xd2, 0x1f, 0x6b, 0xd7, 0xe5, 0xcf,
	0x26, 0x0a, 0xe3, 0x63, 0x3e, 0x84, 0x39, 0xec, 0xd2, 0x5e, 0xb0, 0x9b, 0x27, 0xf5, 0x2d, 0xd1,
	0x30, 0x8d, 0x83, 0x90, 0xa5, 0xa3, 0x3f, 0xc3, 0x00, 0xe6, 0xd5, 0x06, 0xbd, 0x3a, 0xbc, 0x32,
	0x2a, 0x3f, 0x7e, 0x72, 0x52, 0x1a, 0x16, 0x90, 0x7b, 0xd8, 0x3f, 0x51, 0x0a, 0x8e, 0x98, 0x77,
	0x3c, 0x0e, 0x63, 0x9e, 0xc2, 0x22, 0x22, 0xd8, 0x29, 0x93, 0x7a, 0x5f, 0x5b, 0xaa, 0x04, 0xbf,
	0x7b, 0x94, 0x86, 0x0c, 0x96, 0x90, 0x09, 0x7d, 0x9e, 0xc7, 0xf4, 0x07, 0x9a, 0x2e, 0x1c, 0x3d,
	0x1b, 0x15, 0xa7, 0xbf, 0xac, 0x86, 0x97, 0xce, 0x4f, 0xff, 0x2c, 0xa8, 0x0f, 0xb4, 0x1b, 0x15,
	0x9e, 0xf2, 0x64, 0x3c, 0x09, 0x03, 0xd7, 0x67, 0x3e, 0xe8, 0xc8, 0xf9, 0xbd, 0x2c, 0xb2, 0xdb,
	0xcc, 0xd7, 0x37, 0xc5, 0x5b, 0xe0, 0x49, 0xe2, 0x46, 0x49, 0x7c, 0x0c, 0x2b, 0xc8, 0xf4, 0x3a,
	0x49, 0xb2, 0x9b, 0xc4, 0xc7, 0xfa, 0x43, 0xf1, 0xf0, 0x4e, 0x22, 0x2f, 0x76, 0x8f, 0x93, 0x24,
	0x80, 0xeb, 0xc8, 0x13, 0xbc, 0x8e, 0xbc, 0xf8, 0x59, 0x92, 0x04, 0xf2, 0xab, 0x13, 0xb0, 0x64,
	0x32, 0x09, 0x03, 0xb8, 0x81, 0x5c, 0xfc, 0x49, 0x91, 0xd3, 0x9f, 0x6a, 0xb7, 0x2a, 0x38, 0x0a,
	0xd3, 0xd4, 0xe5, 0x43, 0x2f, 0x76, 0x6d, 0x93, 0xc2, 0x4d, 0xb5, 0x62, 0xa5, 0x54, 0xec, 0x86,
	0x69, 0xea, 0x0c, 0xbd, 0xd8, 0x36, 0xa9, 0xdc, 0x69, 0x19, 0x7c, 0x0b, 0xe9, 0xb4, 0x0c, 0x92,
	0x8e, 0xcd, 0xb6, 0xa8, 0x4b, 0x8c, 0x2e, 0x05, 0x40, 0xee, 0xdc, 0xb6, 0x68, 0x96, 0x93, 0x8f,
	0x8d, 0x18, 0x3d, 0xea, 0x1a, 0x96, 0x45, 0xe1, 0x03, 0xe4, 0xd8, 0xb2, 0x64, 0x16, 0x94, 0x79,
	0xc3, 0xb2, 0xa9, 0x6b, 0x11, 0x42, 0xe1, 0x36, 0xc2, 0x67, 0xc9, 0x2c, 0x28, 0xbf, 0xb9, 0x16,
	0x31, 0xa8, 0x4b, 0xda, 0x46, 0x87, 0xc2, 0x87, 0xc8, 0xd0, 0x67, 0xd1, 0x3c, 0x29, 0x8f, 0x1e,
	0x69, 0x1b, 0x26, 0x75, 0x89, 0x45, 0x7a, 0x14, 0x3e, 0x42, 0x46, 0x2f, 0xcf, 0xe6, 0xd1, 0x0b,
	0x0e, 0x8b, 0xf4, 0xa9, 0x6b, 0xb4, 0xcd, 0x2e, 0x85, 0x8f, 0x31, 0x47, 0x96, 0xcd, 0xa3, 0xb2,
	0xc3, 0x68, 0x9b, 0x3d, 0xea, 0x9a, 0xed, 0xbe, 0x45, 0x61, 0x15, 0x71, 0xe4, 0xd9, 0x3c, 0x2a,
	0x3b, 0xcc, 0x76, 0xdf, 0xa6, 0x6e, 0x8f, 0xf4, 0x09, 0x85, 0x4f, 0x10, 0x47, 0x9e, 0xcd, 0xa3,
	0xb2, 0xa3, 0x47, 0xfa, 0x06, 0x75, 0xfb, 0x06, 0xb1, 0x28, 0xac, 0x21, 0x8e, 0x3c, 0x9b, 0x47,
	0xe5, 0x22, 0x4e, 0xf8, 0x30, 0x64, 0xf0, 0x29, 0x52, 0xc4, 0xfb, 0x59, 0x4a, 0x58, 0xe4, 0x3c,
	0x5f, 0x74, 0x77, 0x66, 0x2e, 0x72, 0x47, 0x5e, 0xe4, 0xbc, 0x58, 0x74, 0x9f, 0xcd, 0x1c, 0x7a,
	0x27, 0x5f, 0x74, 0x12, 0x44, 0xbd, 0x00, 0x3e, 0x47, 0xa0, 0x81, 0x17, 0x08, 0x5b, 0xb8, 0xb8,
	0xb9, 0x2f, 0x66, 0x6e, 0xe1, 0xfc, 0xe6, 0xba, 0xda, 0x62, 0x85, 0xf0, 0x84, 0x7b, 0x11, 0x7c,
	0xd9, 0x70, 0x10, 0x25, 0xe5, 0x64, 0x29, 0xa1, 0x4e, 0x78, 0xb5, 0x89, 0xbf, 0x9a, 0xf9, 0x52,
	0x3a, 0x8a, 0x4d, 0xcc, 0xc5, 0x4d, 0xbc, 0x3e, 0xf3, 0x9d, 0x70, 0x94, 0x9b, 0x98, 0x8b, 0x9b,
	0xf8, 0x6b, 0x44, 0xa0, 0xda, 0xc4, 0xbc, 0xdc, 0xc4, 0xdf, 0xcc, 0x1c, 0x00, 0xe7, 0x6c, 0x13,
	0x57, 0x7b, 0x84, 0x0b, 0x7b, 0xe4, 0xee, 0xcc, 0x3a, 0x70, 0xaa, 0x3d, 0x62, 0x69, 0x0b, 0x15,
	0x9e, 0xb5, 0x38, 0x7c, 0xab, 0x46, 0xe7, 0x4a, 0x34, 0x2b, 0x70, 0xa1, 0x7f, 0xf9, 0xc5, 0xfe,
	0xfd, 0x6e, 0x66, 0xff, 0x3a, 0x0d, 0xfd, 0xcb, 0x8b, 0xfe, 0xdd, 0x40, 0xa6, 0x4a, 0xee, 0x5f,
	0x2e, 0xf4, 0xef, 0xf7, 0xc8, 0x47, 0x5d, 0xef, 0x5f, 0x2e, 0xf6, 0x6f, 0x1b, 0x39, 0x30, 0x45,
	0xff, 0x72, 0xb1, 0x7f, 0x09, 0xc2, 0x2b, 0xfa, 0x97, 0x4b, 0xfd, 0x6b, 0x20, 0xa3, 0xa2, 0xea,
	0x5f, 0x2e, 0xf7, 0x6f, 0x67, 0x66, 0xdf, 0x38, 0xea, 0xfe, 0xe5, 0x72, 0xff, 0x9a, 0x98, 0x43,
	0xd5, 0xbf, 0x5c, 0xee, 0x5f, 0x0b, 0x71, 0x28, 0xfb, 0x97, 0xcb, 0xfd, 0x6b, 0x23, 0x0e, 0x65,
	0xff, 0x72, 0xb9, 0x7f, 0xbb, 0x88, 0x43, 0xd9, 0xbf, 0xbc, 0xec, 0xdf, 0x1e, 0xf2, 0xfa, 0x15,
	0xfd, 0x6b, 0x4b, 0xef, 0x2d, 0x1b, 0xb9, 0x6d, 0xe8, 0x23, 0x2f, 0xd0, 0x01, 0x1b, 0xb5, 0xeb,
	0x1c, 0x81, 0x7b, 0x38, 0x47, 0xea, 0x9c, 0x01, 0xf7, 0x71, 0xce, 0xa8, 0x73, 0x1d, 0xd8, 0xc4,
	0xb9, 0x4e, 0x9d, 0x33, 0xe1, 0x01, 0xce, 0x99, 0x75, 0xce, 0x82, 0x87, 0x38, 0x67, 0xd5, 0x39,
	0x1b, 0x1e, 0xe1, 0x9c, 0x5d, 0xe7, 0xba, 0xf0, 0x18, 0xe7, 0xba, 0x02, 0xc7, 0xca, 0xcf, 0x6f,
	0x6b, 0x26, 0x77, 0x78, 0xf1, 0xf3, 0x63, 0xe5, 0xe7, 0x37, 0xc0, 0x39, 0x52, 0xe7, 0x0c, 0xd8,
	0xc6, 0x39, 0xa3, 0xce, 0x75, 0xe0, 0x09, 0xce, 0x75, 0xea, 0x9c, 0x09, 0x4f, 0x71, 0xce, 0xac,
	0x73, 0x16, 0xec, 0xe0, 0x9c, 0x55, 0xe7, 0x6c, 0x78, 0x86, 0x73, 0x76, 0x9d, 0xeb, 0xc2, 0x0f,
	0x38, 0xd7, 0xcd, 0x16, 0x91, 0xb0, 0xf7, 0xdc, 0xb6, 0x4b, 0xa6, 0xa9, 0xeb, 0x67, 0x51, 0xf8,
	0xb1, 0x61, 0x11, 0xf1, 0xf3, 0xed, 0xd7, 0x26, 0xd3, 0x34, 0xff, 0xf1, 0x45, 0x0d, 0x11, 0x34,
	0xcf, 0x51, 0x0d, 0x69, 0xd2, 0x18, 0x82, 0xe6, 0x05, 0xaa, 0x31, 0x9a, 0x34, 0x1d, 0x41, 0xb3,
	0x8b, 0x6a, 0x3a, 0x4d, 0x1a, 0x53, 0xd0, 0xec, 0xa1, 0x1a, 0xb3, 0x49, 0x63, 0x09, 0x9a, 0x9f,
	0x50, 0x8d, 0xd5, 0xa4, 0xb1, 0x05, 0xcd, 0x3e, 0xaa, 0xb1, 0x9b, 0x34, 0x5d, 0x41, 0x73, 0x80,
	0x6a, 0xba, 0xa2, 0x86, 0x35, 0xcc, 0xcd, 0xcf, 0x0d, 0x1a, 0xa6, 0x9e, 0x1b, 0xd6, 0x30, 0x37,
	0x87, 0xa8, 0x86, 0x34, 0x69, 0xc4, 0xb9, 0x79, 0x89, 0x6a, 0x8c, 0x26, 0x8d, 0x38, 0x37, 0x0e,
	0xaa, 0xe9, 0x34, 0x69, 0xc4, 0xb9, 0x79, 0x85, 0x6a, 0xcc, 0x26, 0x8d, 0x38, 0x37, 0xaf, 0x51,
	0x8d, 0xd5, 0xa4, 0x11, 0xe7, 0xe6, 0x17, 0x54, 0x63, 0x37, 0x69, 0xc4, 0xb9, 0xf9, 0x15, 0xd5,
	0x54, 0x73, 0xb3, 0xa9, 0xe9, 0xe5, 0xaf, 0xca, 0x04, 0xc3, 0x6f, 0x0d, 0x5f, 0x3e, 0x59, 0xf1,
	0x25, 0xfd, 0x9c, 0x96, 0xfe, 0x99, 0xc0, 0xd9, 0x34, 0xf6, 0x3d, 0x1e, 0x06, 0xf0, 0x06, 0xf9,
	0xee, 0xe7, 0x94, 0xc9, 0xc1, 0xcd, 0xbf, 0x4e, 0x57, 0x5b, 0x7f, 0x9f, 0xae, 0xb6, 0xfe, 0x3d,
	0x5d, 0x6d, 0xbd, 0xb9, 0x3a, 0xf4, 0xa2, 0xfc, 0x17, 0xbe, 0xf4, 0x72, 0xfe, 0x9f, 0xce, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x0c, 0x3a, 0x1e, 0x23, 0x16, 0x00, 0x00,
}
