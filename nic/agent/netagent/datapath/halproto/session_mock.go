// Code generated by MockGen. DO NOT EDIT.
// Source: session.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisFlowKeyV4_L4Fields is a mock of isFlowKeyV4_L4Fields interface
type MockisFlowKeyV4_L4Fields struct {
	ctrl     *gomock.Controller
	recorder *MockisFlowKeyV4_L4FieldsMockRecorder
}

// MockisFlowKeyV4_L4FieldsMockRecorder is the mock recorder for MockisFlowKeyV4_L4Fields
type MockisFlowKeyV4_L4FieldsMockRecorder struct {
	mock *MockisFlowKeyV4_L4Fields
}

// NewMockisFlowKeyV4_L4Fields creates a new mock instance
func NewMockisFlowKeyV4_L4Fields(ctrl *gomock.Controller) *MockisFlowKeyV4_L4Fields {
	mock := &MockisFlowKeyV4_L4Fields{ctrl: ctrl}
	mock.recorder = &MockisFlowKeyV4_L4FieldsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisFlowKeyV4_L4Fields) EXPECT() *MockisFlowKeyV4_L4FieldsMockRecorder {
	return m.recorder
}

// isFlowKeyV4_L4Fields mocks base method
func (m *MockisFlowKeyV4_L4Fields) isFlowKeyV4_L4Fields() {
	m.ctrl.Call(m, "isFlowKeyV4_L4Fields")
}

// isFlowKeyV4_L4Fields indicates an expected call of isFlowKeyV4_L4Fields
func (mr *MockisFlowKeyV4_L4FieldsMockRecorder) isFlowKeyV4_L4Fields() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isFlowKeyV4_L4Fields", reflect.TypeOf((*MockisFlowKeyV4_L4Fields)(nil).isFlowKeyV4_L4Fields))
}

// MarshalTo mocks base method
func (m *MockisFlowKeyV4_L4Fields) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisFlowKeyV4_L4FieldsMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisFlowKeyV4_L4Fields)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisFlowKeyV4_L4Fields) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisFlowKeyV4_L4FieldsMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisFlowKeyV4_L4Fields)(nil).Size))
}

// MockisFlowKeyV6_L4Fields is a mock of isFlowKeyV6_L4Fields interface
type MockisFlowKeyV6_L4Fields struct {
	ctrl     *gomock.Controller
	recorder *MockisFlowKeyV6_L4FieldsMockRecorder
}

// MockisFlowKeyV6_L4FieldsMockRecorder is the mock recorder for MockisFlowKeyV6_L4Fields
type MockisFlowKeyV6_L4FieldsMockRecorder struct {
	mock *MockisFlowKeyV6_L4Fields
}

// NewMockisFlowKeyV6_L4Fields creates a new mock instance
func NewMockisFlowKeyV6_L4Fields(ctrl *gomock.Controller) *MockisFlowKeyV6_L4Fields {
	mock := &MockisFlowKeyV6_L4Fields{ctrl: ctrl}
	mock.recorder = &MockisFlowKeyV6_L4FieldsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisFlowKeyV6_L4Fields) EXPECT() *MockisFlowKeyV6_L4FieldsMockRecorder {
	return m.recorder
}

// isFlowKeyV6_L4Fields mocks base method
func (m *MockisFlowKeyV6_L4Fields) isFlowKeyV6_L4Fields() {
	m.ctrl.Call(m, "isFlowKeyV6_L4Fields")
}

// isFlowKeyV6_L4Fields indicates an expected call of isFlowKeyV6_L4Fields
func (mr *MockisFlowKeyV6_L4FieldsMockRecorder) isFlowKeyV6_L4Fields() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isFlowKeyV6_L4Fields", reflect.TypeOf((*MockisFlowKeyV6_L4Fields)(nil).isFlowKeyV6_L4Fields))
}

// MarshalTo mocks base method
func (m *MockisFlowKeyV6_L4Fields) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisFlowKeyV6_L4FieldsMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisFlowKeyV6_L4Fields)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisFlowKeyV6_L4Fields) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisFlowKeyV6_L4FieldsMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisFlowKeyV6_L4Fields)(nil).Size))
}

// MockisFlowKey_FlowKey is a mock of isFlowKey_FlowKey interface
type MockisFlowKey_FlowKey struct {
	ctrl     *gomock.Controller
	recorder *MockisFlowKey_FlowKeyMockRecorder
}

// MockisFlowKey_FlowKeyMockRecorder is the mock recorder for MockisFlowKey_FlowKey
type MockisFlowKey_FlowKeyMockRecorder struct {
	mock *MockisFlowKey_FlowKey
}

// NewMockisFlowKey_FlowKey creates a new mock instance
func NewMockisFlowKey_FlowKey(ctrl *gomock.Controller) *MockisFlowKey_FlowKey {
	mock := &MockisFlowKey_FlowKey{ctrl: ctrl}
	mock.recorder = &MockisFlowKey_FlowKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisFlowKey_FlowKey) EXPECT() *MockisFlowKey_FlowKeyMockRecorder {
	return m.recorder
}

// isFlowKey_FlowKey mocks base method
func (m *MockisFlowKey_FlowKey) isFlowKey_FlowKey() {
	m.ctrl.Call(m, "isFlowKey_FlowKey")
}

// isFlowKey_FlowKey indicates an expected call of isFlowKey_FlowKey
func (mr *MockisFlowKey_FlowKeyMockRecorder) isFlowKey_FlowKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isFlowKey_FlowKey", reflect.TypeOf((*MockisFlowKey_FlowKey)(nil).isFlowKey_FlowKey))
}

// MarshalTo mocks base method
func (m *MockisFlowKey_FlowKey) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisFlowKey_FlowKeyMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisFlowKey_FlowKey)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisFlowKey_FlowKey) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisFlowKey_FlowKeyMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisFlowKey_FlowKey)(nil).Size))
}

// MockisSessionStatus_AlgInfo is a mock of isSessionStatus_AlgInfo interface
type MockisSessionStatus_AlgInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisSessionStatus_AlgInfoMockRecorder
}

// MockisSessionStatus_AlgInfoMockRecorder is the mock recorder for MockisSessionStatus_AlgInfo
type MockisSessionStatus_AlgInfoMockRecorder struct {
	mock *MockisSessionStatus_AlgInfo
}

// NewMockisSessionStatus_AlgInfo creates a new mock instance
func NewMockisSessionStatus_AlgInfo(ctrl *gomock.Controller) *MockisSessionStatus_AlgInfo {
	mock := &MockisSessionStatus_AlgInfo{ctrl: ctrl}
	mock.recorder = &MockisSessionStatus_AlgInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisSessionStatus_AlgInfo) EXPECT() *MockisSessionStatus_AlgInfoMockRecorder {
	return m.recorder
}

// isSessionStatus_AlgInfo mocks base method
func (m *MockisSessionStatus_AlgInfo) isSessionStatus_AlgInfo() {
	m.ctrl.Call(m, "isSessionStatus_AlgInfo")
}

// isSessionStatus_AlgInfo indicates an expected call of isSessionStatus_AlgInfo
func (mr *MockisSessionStatus_AlgInfoMockRecorder) isSessionStatus_AlgInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSessionStatus_AlgInfo", reflect.TypeOf((*MockisSessionStatus_AlgInfo)(nil).isSessionStatus_AlgInfo))
}

// MarshalTo mocks base method
func (m *MockisSessionStatus_AlgInfo) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisSessionStatus_AlgInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisSessionStatus_AlgInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisSessionStatus_AlgInfo) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisSessionStatus_AlgInfoMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisSessionStatus_AlgInfo)(nil).Size))
}

// MockisSessionGetRequest_GetBy is a mock of isSessionGetRequest_GetBy interface
type MockisSessionGetRequest_GetBy struct {
	ctrl     *gomock.Controller
	recorder *MockisSessionGetRequest_GetByMockRecorder
}

// MockisSessionGetRequest_GetByMockRecorder is the mock recorder for MockisSessionGetRequest_GetBy
type MockisSessionGetRequest_GetByMockRecorder struct {
	mock *MockisSessionGetRequest_GetBy
}

// NewMockisSessionGetRequest_GetBy creates a new mock instance
func NewMockisSessionGetRequest_GetBy(ctrl *gomock.Controller) *MockisSessionGetRequest_GetBy {
	mock := &MockisSessionGetRequest_GetBy{ctrl: ctrl}
	mock.recorder = &MockisSessionGetRequest_GetByMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisSessionGetRequest_GetBy) EXPECT() *MockisSessionGetRequest_GetByMockRecorder {
	return m.recorder
}

// isSessionGetRequest_GetBy mocks base method
func (m *MockisSessionGetRequest_GetBy) isSessionGetRequest_GetBy() {
	m.ctrl.Call(m, "isSessionGetRequest_GetBy")
}

// isSessionGetRequest_GetBy indicates an expected call of isSessionGetRequest_GetBy
func (mr *MockisSessionGetRequest_GetByMockRecorder) isSessionGetRequest_GetBy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSessionGetRequest_GetBy", reflect.TypeOf((*MockisSessionGetRequest_GetBy)(nil).isSessionGetRequest_GetBy))
}

// MarshalTo mocks base method
func (m *MockisSessionGetRequest_GetBy) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisSessionGetRequest_GetByMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisSessionGetRequest_GetBy)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisSessionGetRequest_GetBy) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisSessionGetRequest_GetByMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisSessionGetRequest_GetBy)(nil).Size))
}

// MockSessionClient is a mock of SessionClient interface
type MockSessionClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionClientMockRecorder
}

// MockSessionClientMockRecorder is the mock recorder for MockSessionClient
type MockSessionClientMockRecorder struct {
	mock *MockSessionClient
}

// NewMockSessionClient creates a new mock instance
func NewMockSessionClient(ctrl *gomock.Controller) *MockSessionClient {
	mock := &MockSessionClient{ctrl: ctrl}
	mock.recorder = &MockSessionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionClient) EXPECT() *MockSessionClientMockRecorder {
	return m.recorder
}

// SessionCreate mocks base method
func (m *MockSessionClient) SessionCreate(ctx context.Context, in *SessionRequestMsg, opts ...grpc.CallOption) (*SessionResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SessionCreate", varargs...)
	ret0, _ := ret[0].(*SessionResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionCreate indicates an expected call of SessionCreate
func (mr *MockSessionClientMockRecorder) SessionCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionCreate", reflect.TypeOf((*MockSessionClient)(nil).SessionCreate), varargs...)
}

// SessionDelete mocks base method
func (m *MockSessionClient) SessionDelete(ctx context.Context, in *SessionDeleteRequestMsg, opts ...grpc.CallOption) (*SessionDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SessionDelete", varargs...)
	ret0, _ := ret[0].(*SessionDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionDelete indicates an expected call of SessionDelete
func (mr *MockSessionClientMockRecorder) SessionDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionDelete", reflect.TypeOf((*MockSessionClient)(nil).SessionDelete), varargs...)
}

// SessionGet mocks base method
func (m *MockSessionClient) SessionGet(ctx context.Context, in *SessionGetRequestMsg, opts ...grpc.CallOption) (*SessionGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SessionGet", varargs...)
	ret0, _ := ret[0].(*SessionGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionGet indicates an expected call of SessionGet
func (mr *MockSessionClientMockRecorder) SessionGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionGet", reflect.TypeOf((*MockSessionClient)(nil).SessionGet), varargs...)
}

// MockSessionServer is a mock of SessionServer interface
type MockSessionServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServerMockRecorder
}

// MockSessionServerMockRecorder is the mock recorder for MockSessionServer
type MockSessionServerMockRecorder struct {
	mock *MockSessionServer
}

// NewMockSessionServer creates a new mock instance
func NewMockSessionServer(ctrl *gomock.Controller) *MockSessionServer {
	mock := &MockSessionServer{ctrl: ctrl}
	mock.recorder = &MockSessionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionServer) EXPECT() *MockSessionServerMockRecorder {
	return m.recorder
}

// SessionCreate mocks base method
func (m *MockSessionServer) SessionCreate(arg0 context.Context, arg1 *SessionRequestMsg) (*SessionResponseMsg, error) {
	ret := m.ctrl.Call(m, "SessionCreate", arg0, arg1)
	ret0, _ := ret[0].(*SessionResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionCreate indicates an expected call of SessionCreate
func (mr *MockSessionServerMockRecorder) SessionCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionCreate", reflect.TypeOf((*MockSessionServer)(nil).SessionCreate), arg0, arg1)
}

// SessionDelete mocks base method
func (m *MockSessionServer) SessionDelete(arg0 context.Context, arg1 *SessionDeleteRequestMsg) (*SessionDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "SessionDelete", arg0, arg1)
	ret0, _ := ret[0].(*SessionDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionDelete indicates an expected call of SessionDelete
func (mr *MockSessionServerMockRecorder) SessionDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionDelete", reflect.TypeOf((*MockSessionServer)(nil).SessionDelete), arg0, arg1)
}

// SessionGet mocks base method
func (m *MockSessionServer) SessionGet(arg0 context.Context, arg1 *SessionGetRequestMsg) (*SessionGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "SessionGet", arg0, arg1)
	ret0, _ := ret[0].(*SessionGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionGet indicates an expected call of SessionGet
func (mr *MockSessionServerMockRecorder) SessionGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionGet", reflect.TypeOf((*MockSessionServer)(nil).SessionGet), arg0, arg1)
}
