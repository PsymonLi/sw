// Code generated by MockGen. DO NOT EDIT.
// Source: session.pb.go

package halproto

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisFlowKeyV4_L4Fields is a mock of isFlowKeyV4_L4Fields interface
type MockisFlowKeyV4_L4Fields struct {
	ctrl     *gomock.Controller
	recorder *MockisFlowKeyV4_L4FieldsMockRecorder
}

// MockisFlowKeyV4_L4FieldsMockRecorder is the mock recorder for MockisFlowKeyV4_L4Fields
type MockisFlowKeyV4_L4FieldsMockRecorder struct {
	mock *MockisFlowKeyV4_L4Fields
}

// NewMockisFlowKeyV4_L4Fields creates a new mock instance
func NewMockisFlowKeyV4_L4Fields(ctrl *gomock.Controller) *MockisFlowKeyV4_L4Fields {
	mock := &MockisFlowKeyV4_L4Fields{ctrl: ctrl}
	mock.recorder = &MockisFlowKeyV4_L4FieldsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisFlowKeyV4_L4Fields) EXPECT() *MockisFlowKeyV4_L4FieldsMockRecorder {
	return _m.recorder
}

// isFlowKeyV4_L4Fields mocks base method
func (_m *MockisFlowKeyV4_L4Fields) isFlowKeyV4_L4Fields() {
	_m.ctrl.Call(_m, "isFlowKeyV4_L4Fields")
}

// isFlowKeyV4_L4Fields indicates an expected call of isFlowKeyV4_L4Fields
func (_mr *MockisFlowKeyV4_L4FieldsMockRecorder) isFlowKeyV4_L4Fields() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isFlowKeyV4_L4Fields")
}

// MockisFlowKeyV6_L4Fields is a mock of isFlowKeyV6_L4Fields interface
type MockisFlowKeyV6_L4Fields struct {
	ctrl     *gomock.Controller
	recorder *MockisFlowKeyV6_L4FieldsMockRecorder
}

// MockisFlowKeyV6_L4FieldsMockRecorder is the mock recorder for MockisFlowKeyV6_L4Fields
type MockisFlowKeyV6_L4FieldsMockRecorder struct {
	mock *MockisFlowKeyV6_L4Fields
}

// NewMockisFlowKeyV6_L4Fields creates a new mock instance
func NewMockisFlowKeyV6_L4Fields(ctrl *gomock.Controller) *MockisFlowKeyV6_L4Fields {
	mock := &MockisFlowKeyV6_L4Fields{ctrl: ctrl}
	mock.recorder = &MockisFlowKeyV6_L4FieldsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisFlowKeyV6_L4Fields) EXPECT() *MockisFlowKeyV6_L4FieldsMockRecorder {
	return _m.recorder
}

// isFlowKeyV6_L4Fields mocks base method
func (_m *MockisFlowKeyV6_L4Fields) isFlowKeyV6_L4Fields() {
	_m.ctrl.Call(_m, "isFlowKeyV6_L4Fields")
}

// isFlowKeyV6_L4Fields indicates an expected call of isFlowKeyV6_L4Fields
func (_mr *MockisFlowKeyV6_L4FieldsMockRecorder) isFlowKeyV6_L4Fields() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isFlowKeyV6_L4Fields")
}

// MockisFlowKey_FlowKey is a mock of isFlowKey_FlowKey interface
type MockisFlowKey_FlowKey struct {
	ctrl     *gomock.Controller
	recorder *MockisFlowKey_FlowKeyMockRecorder
}

// MockisFlowKey_FlowKeyMockRecorder is the mock recorder for MockisFlowKey_FlowKey
type MockisFlowKey_FlowKeyMockRecorder struct {
	mock *MockisFlowKey_FlowKey
}

// NewMockisFlowKey_FlowKey creates a new mock instance
func NewMockisFlowKey_FlowKey(ctrl *gomock.Controller) *MockisFlowKey_FlowKey {
	mock := &MockisFlowKey_FlowKey{ctrl: ctrl}
	mock.recorder = &MockisFlowKey_FlowKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockisFlowKey_FlowKey) EXPECT() *MockisFlowKey_FlowKeyMockRecorder {
	return _m.recorder
}

// isFlowKey_FlowKey mocks base method
func (_m *MockisFlowKey_FlowKey) isFlowKey_FlowKey() {
	_m.ctrl.Call(_m, "isFlowKey_FlowKey")
}

// isFlowKey_FlowKey indicates an expected call of isFlowKey_FlowKey
func (_mr *MockisFlowKey_FlowKeyMockRecorder) isFlowKey_FlowKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isFlowKey_FlowKey")
}

// MockSessionClient is a mock of SessionClient interface
type MockSessionClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionClientMockRecorder
}

// MockSessionClientMockRecorder is the mock recorder for MockSessionClient
type MockSessionClientMockRecorder struct {
	mock *MockSessionClient
}

// NewMockSessionClient creates a new mock instance
func NewMockSessionClient(ctrl *gomock.Controller) *MockSessionClient {
	mock := &MockSessionClient{ctrl: ctrl}
	mock.recorder = &MockSessionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSessionClient) EXPECT() *MockSessionClientMockRecorder {
	return _m.recorder
}

// SessionCreate mocks base method
func (_m *MockSessionClient) SessionCreate(ctx context.Context, in *SessionRequestMsg, opts ...grpc.CallOption) (*SessionResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SessionCreate", _s...)
	ret0, _ := ret[0].(*SessionResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionCreate indicates an expected call of SessionCreate
func (_mr *MockSessionClientMockRecorder) SessionCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SessionCreate", _s...)
}

// SessionDelete mocks base method
func (_m *MockSessionClient) SessionDelete(ctx context.Context, in *SessionDeleteRequestMsg, opts ...grpc.CallOption) (*SessionDeleteResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SessionDelete", _s...)
	ret0, _ := ret[0].(*SessionDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionDelete indicates an expected call of SessionDelete
func (_mr *MockSessionClientMockRecorder) SessionDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SessionDelete", _s...)
}

// SessionGet mocks base method
func (_m *MockSessionClient) SessionGet(ctx context.Context, in *SessionGetRequestMsg, opts ...grpc.CallOption) (*SessionGetResponseMsg, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SessionGet", _s...)
	ret0, _ := ret[0].(*SessionGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionGet indicates an expected call of SessionGet
func (_mr *MockSessionClientMockRecorder) SessionGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SessionGet", _s...)
}

// MockSessionServer is a mock of SessionServer interface
type MockSessionServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServerMockRecorder
}

// MockSessionServerMockRecorder is the mock recorder for MockSessionServer
type MockSessionServerMockRecorder struct {
	mock *MockSessionServer
}

// NewMockSessionServer creates a new mock instance
func NewMockSessionServer(ctrl *gomock.Controller) *MockSessionServer {
	mock := &MockSessionServer{ctrl: ctrl}
	mock.recorder = &MockSessionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSessionServer) EXPECT() *MockSessionServerMockRecorder {
	return _m.recorder
}

// SessionCreate mocks base method
func (_m *MockSessionServer) SessionCreate(_param0 context.Context, _param1 *SessionRequestMsg) (*SessionResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "SessionCreate", _param0, _param1)
	ret0, _ := ret[0].(*SessionResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionCreate indicates an expected call of SessionCreate
func (_mr *MockSessionServerMockRecorder) SessionCreate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SessionCreate", arg0, arg1)
}

// SessionDelete mocks base method
func (_m *MockSessionServer) SessionDelete(_param0 context.Context, _param1 *SessionDeleteRequestMsg) (*SessionDeleteResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "SessionDelete", _param0, _param1)
	ret0, _ := ret[0].(*SessionDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionDelete indicates an expected call of SessionDelete
func (_mr *MockSessionServerMockRecorder) SessionDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SessionDelete", arg0, arg1)
}

// SessionGet mocks base method
func (_m *MockSessionServer) SessionGet(_param0 context.Context, _param1 *SessionGetRequestMsg) (*SessionGetResponseMsg, error) {
	ret := _m.ctrl.Call(_m, "SessionGet", _param0, _param1)
	ret0, _ := ret[0].(*SessionGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionGet indicates an expected call of SessionGet
func (_mr *MockSessionServerMockRecorder) SessionGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SessionGet", arg0, arg1)
}
