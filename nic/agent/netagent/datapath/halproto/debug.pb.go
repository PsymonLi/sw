// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TraceLevel int32

const (
	TraceLevel_TRACE_LEVEL_NONE  TraceLevel = 0
	TraceLevel_TRACE_LEVEL_ERROR TraceLevel = 1
	TraceLevel_TRACE_LEVEL_DEBUG TraceLevel = 2
)

var TraceLevel_name = map[int32]string{
	0: "TRACE_LEVEL_NONE",
	1: "TRACE_LEVEL_ERROR",
	2: "TRACE_LEVEL_DEBUG",
}
var TraceLevel_value = map[string]int32{
	"TRACE_LEVEL_NONE":  0,
	"TRACE_LEVEL_ERROR": 1,
	"TRACE_LEVEL_DEBUG": 2,
}

func (x TraceLevel) String() string {
	return proto.EnumName(TraceLevel_name, int32(x))
}
func (TraceLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

// pipeline type for MPU trace
type MpuTracePipelineType int32

const (
	MpuTracePipelineType_MPU_TRACE_PIPELINE_NONE       MpuTracePipelineType = 0
	MpuTracePipelineType_MPU_TRACE_PIPELINE_P4_INGRESS MpuTracePipelineType = 1
	MpuTracePipelineType_MPU_TRACE_PIPELINE_P4_EGRESS  MpuTracePipelineType = 2
	MpuTracePipelineType_MPU_TRACE_PIPELINE_P4P_RXDMA  MpuTracePipelineType = 3
	MpuTracePipelineType_MPU_TRACE_PIPELINE_P4P_TXDMA  MpuTracePipelineType = 4
)

var MpuTracePipelineType_name = map[int32]string{
	0: "MPU_TRACE_PIPELINE_NONE",
	1: "MPU_TRACE_PIPELINE_P4_INGRESS",
	2: "MPU_TRACE_PIPELINE_P4_EGRESS",
	3: "MPU_TRACE_PIPELINE_P4P_RXDMA",
	4: "MPU_TRACE_PIPELINE_P4P_TXDMA",
}
var MpuTracePipelineType_value = map[string]int32{
	"MPU_TRACE_PIPELINE_NONE":       0,
	"MPU_TRACE_PIPELINE_P4_INGRESS": 1,
	"MPU_TRACE_PIPELINE_P4_EGRESS":  2,
	"MPU_TRACE_PIPELINE_P4P_RXDMA":  3,
	"MPU_TRACE_PIPELINE_P4P_TXDMA":  4,
}

func (x MpuTracePipelineType) String() string {
	return proto.EnumName(MpuTracePipelineType_name, int32(x))
}
func (MpuTracePipelineType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{1} }

type RegisterRequest struct {
	// Types that are valid to be assigned to IdOrName:
	//	*RegisterRequest_RegId
	//	*RegisterRequest_RegName
	IdOrName  isRegisterRequest_IdOrName `protobuf_oneof:"id_or_name"`
	BlockName string                     `protobuf:"bytes,3,opt,name=block_name,json=blockName,proto3" json:"block_name,omitempty"`
	Addr      uint64                     `protobuf:"varint,4,opt,name=addr,proto3" json:"addr,omitempty"`
	RegData   uint32                     `protobuf:"varint,5,opt,name=reg_data,json=regData,proto3" json:"reg_data,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

type isRegisterRequest_IdOrName interface {
	isRegisterRequest_IdOrName()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RegisterRequest_RegId struct {
	RegId uint32 `protobuf:"fixed32,1,opt,name=reg_id,json=regId,proto3,oneof"`
}
type RegisterRequest_RegName struct {
	RegName string `protobuf:"bytes,2,opt,name=reg_name,json=regName,proto3,oneof"`
}

func (*RegisterRequest_RegId) isRegisterRequest_IdOrName()   {}
func (*RegisterRequest_RegName) isRegisterRequest_IdOrName() {}

func (m *RegisterRequest) GetIdOrName() isRegisterRequest_IdOrName {
	if m != nil {
		return m.IdOrName
	}
	return nil
}

func (m *RegisterRequest) GetRegId() uint32 {
	if x, ok := m.GetIdOrName().(*RegisterRequest_RegId); ok {
		return x.RegId
	}
	return 0
}

func (m *RegisterRequest) GetRegName() string {
	if x, ok := m.GetIdOrName().(*RegisterRequest_RegName); ok {
		return x.RegName
	}
	return ""
}

func (m *RegisterRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *RegisterRequest) GetAddr() uint64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *RegisterRequest) GetRegData() uint32 {
	if m != nil {
		return m.RegData
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RegisterRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RegisterRequest_OneofMarshaler, _RegisterRequest_OneofUnmarshaler, _RegisterRequest_OneofSizer, []interface{}{
		(*RegisterRequest_RegId)(nil),
		(*RegisterRequest_RegName)(nil),
	}
}

func _RegisterRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RegisterRequest)
	// id_or_name
	switch x := m.IdOrName.(type) {
	case *RegisterRequest_RegId:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.RegId))
	case *RegisterRequest_RegName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.RegName)
	case nil:
	default:
		return fmt.Errorf("RegisterRequest.IdOrName has unexpected type %T", x)
	}
	return nil
}

func _RegisterRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RegisterRequest)
	switch tag {
	case 1: // id_or_name.reg_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.IdOrName = &RegisterRequest_RegId{uint32(x)}
		return true, err
	case 2: // id_or_name.reg_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.IdOrName = &RegisterRequest_RegName{x}
		return true, err
	default:
		return false, nil
	}
}

func _RegisterRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RegisterRequest)
	// id_or_name
	switch x := m.IdOrName.(type) {
	case *RegisterRequest_RegId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *RegisterRequest_RegName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RegName)))
		n += len(x.RegName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RegisterRequestMsg struct {
	Request []*RegisterRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RegisterRequestMsg) Reset()                    { *m = RegisterRequestMsg{} }
func (m *RegisterRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequestMsg) ProtoMessage()               {}
func (*RegisterRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{1} }

func (m *RegisterRequestMsg) GetRequest() []*RegisterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type RegisterResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Data      *RegisterData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{2} }

func (m *RegisterResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RegisterResponse) GetData() *RegisterData {
	if m != nil {
		return m.Data
	}
	return nil
}

type RegisterResponseMsg struct {
	Response []*RegisterResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RegisterResponseMsg) Reset()                    { *m = RegisterResponseMsg{} }
func (m *RegisterResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponseMsg) ProtoMessage()               {}
func (*RegisterResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{3} }

func (m *RegisterResponseMsg) GetResponse() []*RegisterResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MemoryRequest struct {
	// Types that are valid to be assigned to IdOrName:
	//	*MemoryRequest_TableId
	//	*MemoryRequest_TableName
	IdOrName   isMemoryRequest_IdOrName `protobuf_oneof:"id_or_name"`
	Index      uint32                   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Swkey      []byte                   `protobuf:"bytes,4,opt,name=swkey,proto3" json:"swkey,omitempty"`
	SwkeyMask  []byte                   `protobuf:"bytes,5,opt,name=swkey_mask,json=swkeyMask,proto3" json:"swkey_mask,omitempty"`
	Actiondata []byte                   `protobuf:"bytes,6,opt,name=actiondata,proto3" json:"actiondata,omitempty"`
}

func (m *MemoryRequest) Reset()                    { *m = MemoryRequest{} }
func (m *MemoryRequest) String() string            { return proto.CompactTextString(m) }
func (*MemoryRequest) ProtoMessage()               {}
func (*MemoryRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{4} }

type isMemoryRequest_IdOrName interface {
	isMemoryRequest_IdOrName()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MemoryRequest_TableId struct {
	TableId uint32 `protobuf:"fixed32,1,opt,name=table_id,json=tableId,proto3,oneof"`
}
type MemoryRequest_TableName struct {
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3,oneof"`
}

func (*MemoryRequest_TableId) isMemoryRequest_IdOrName()   {}
func (*MemoryRequest_TableName) isMemoryRequest_IdOrName() {}

func (m *MemoryRequest) GetIdOrName() isMemoryRequest_IdOrName {
	if m != nil {
		return m.IdOrName
	}
	return nil
}

func (m *MemoryRequest) GetTableId() uint32 {
	if x, ok := m.GetIdOrName().(*MemoryRequest_TableId); ok {
		return x.TableId
	}
	return 0
}

func (m *MemoryRequest) GetTableName() string {
	if x, ok := m.GetIdOrName().(*MemoryRequest_TableName); ok {
		return x.TableName
	}
	return ""
}

func (m *MemoryRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MemoryRequest) GetSwkey() []byte {
	if m != nil {
		return m.Swkey
	}
	return nil
}

func (m *MemoryRequest) GetSwkeyMask() []byte {
	if m != nil {
		return m.SwkeyMask
	}
	return nil
}

func (m *MemoryRequest) GetActiondata() []byte {
	if m != nil {
		return m.Actiondata
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MemoryRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MemoryRequest_OneofMarshaler, _MemoryRequest_OneofUnmarshaler, _MemoryRequest_OneofSizer, []interface{}{
		(*MemoryRequest_TableId)(nil),
		(*MemoryRequest_TableName)(nil),
	}
}

func _MemoryRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MemoryRequest)
	// id_or_name
	switch x := m.IdOrName.(type) {
	case *MemoryRequest_TableId:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.TableId))
	case *MemoryRequest_TableName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.TableName)
	case nil:
	default:
		return fmt.Errorf("MemoryRequest.IdOrName has unexpected type %T", x)
	}
	return nil
}

func _MemoryRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MemoryRequest)
	switch tag {
	case 1: // id_or_name.table_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.IdOrName = &MemoryRequest_TableId{uint32(x)}
		return true, err
	case 2: // id_or_name.table_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.IdOrName = &MemoryRequest_TableName{x}
		return true, err
	default:
		return false, nil
	}
}

func _MemoryRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MemoryRequest)
	// id_or_name
	switch x := m.IdOrName.(type) {
	case *MemoryRequest_TableId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *MemoryRequest_TableName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TableName)))
		n += len(x.TableName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MemoryRequestMsg struct {
	Request []*MemoryRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MemoryRequestMsg) Reset()                    { *m = MemoryRequestMsg{} }
func (m *MemoryRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MemoryRequestMsg) ProtoMessage()               {}
func (*MemoryRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{5} }

func (m *MemoryRequestMsg) GetRequest() []*MemoryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MemoryResponse struct {
	ApiStatus  ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Index      uint32    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Swkey      []byte    `protobuf:"bytes,3,opt,name=swkey,proto3" json:"swkey,omitempty"`
	SwkeyMask  []byte    `protobuf:"bytes,4,opt,name=swkey_mask,json=swkeyMask,proto3" json:"swkey_mask,omitempty"`
	Actiondata []byte    `protobuf:"bytes,5,opt,name=actiondata,proto3" json:"actiondata,omitempty"`
}

func (m *MemoryResponse) Reset()                    { *m = MemoryResponse{} }
func (m *MemoryResponse) String() string            { return proto.CompactTextString(m) }
func (*MemoryResponse) ProtoMessage()               {}
func (*MemoryResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{6} }

func (m *MemoryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MemoryResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MemoryResponse) GetSwkey() []byte {
	if m != nil {
		return m.Swkey
	}
	return nil
}

func (m *MemoryResponse) GetSwkeyMask() []byte {
	if m != nil {
		return m.SwkeyMask
	}
	return nil
}

func (m *MemoryResponse) GetActiondata() []byte {
	if m != nil {
		return m.Actiondata
	}
	return nil
}

type MemoryResponseMsg struct {
	Response []*MemoryResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MemoryResponseMsg) Reset()                    { *m = MemoryResponseMsg{} }
func (m *MemoryResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MemoryResponseMsg) ProtoMessage()               {}
func (*MemoryResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{7} }

func (m *MemoryResponseMsg) GetResponse() []*MemoryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Captures the return data for registers
type RegisterData struct {
	RegName string `protobuf:"bytes,1,opt,name=reg_name,json=regName,proto3" json:"reg_name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RegisterData) Reset()                    { *m = RegisterData{} }
func (m *RegisterData) String() string            { return proto.CompactTextString(m) }
func (*RegisterData) ProtoMessage()               {}
func (*RegisterData) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{8} }

func (m *RegisterData) GetRegName() string {
	if m != nil {
		return m.RegName
	}
	return ""
}

func (m *RegisterData) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisterData) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MemTrackSpec struct {
	AllocId uint32 `protobuf:"varint,1,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
}

func (m *MemTrackSpec) Reset()                    { *m = MemTrackSpec{} }
func (m *MemTrackSpec) String() string            { return proto.CompactTextString(m) }
func (*MemTrackSpec) ProtoMessage()               {}
func (*MemTrackSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{9} }

func (m *MemTrackSpec) GetAllocId() uint32 {
	if m != nil {
		return m.AllocId
	}
	return 0
}

// MemTrackGetRequest is request msg with allocation id that info is requested for
type MemTrackGetRequest struct {
	Meta *ObjectMeta   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec *MemTrackSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *MemTrackGetRequest) Reset()                    { *m = MemTrackGetRequest{} }
func (m *MemTrackGetRequest) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetRequest) ProtoMessage()               {}
func (*MemTrackGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{10} }

func (m *MemTrackGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MemTrackGetRequest) GetSpec() *MemTrackSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// MemTrackGetRequestMsg is batched MemTrackGetRequest
type MemTrackGetRequestMsg struct {
	Request []*MemTrackGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MemTrackGetRequestMsg) Reset()                    { *m = MemTrackGetRequestMsg{} }
func (m *MemTrackGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetRequestMsg) ProtoMessage()               {}
func (*MemTrackGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{11} }

func (m *MemTrackGetRequestMsg) GetRequest() []*MemTrackGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// operational status of memory tracker object
type MemTrackStatus struct {
}

func (m *MemTrackStatus) Reset()                    { *m = MemTrackStatus{} }
func (m *MemTrackStatus) String() string            { return proto.CompactTextString(m) }
func (*MemTrackStatus) ProtoMessage()               {}
func (*MemTrackStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{12} }

// stats per memory tracker object
type MemTrackStats struct {
	NumAllocs uint32 `protobuf:"varint,1,opt,name=num_allocs,json=numAllocs,proto3" json:"num_allocs,omitempty"`
	NumFrees  uint32 `protobuf:"varint,2,opt,name=num_frees,json=numFrees,proto3" json:"num_frees,omitempty"`
}

func (m *MemTrackStats) Reset()                    { *m = MemTrackStats{} }
func (m *MemTrackStats) String() string            { return proto.CompactTextString(m) }
func (*MemTrackStats) ProtoMessage()               {}
func (*MemTrackStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{13} }

func (m *MemTrackStats) GetNumAllocs() uint32 {
	if m != nil {
		return m.NumAllocs
	}
	return 0
}

func (m *MemTrackStats) GetNumFrees() uint32 {
	if m != nil {
		return m.NumFrees
	}
	return 0
}

// MemTrackGetResponse captures debug information per allocation id
type MemTrackGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *MemTrackSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *MemTrackStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *MemTrackStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *MemTrackGetResponse) Reset()                    { *m = MemTrackGetResponse{} }
func (m *MemTrackGetResponse) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetResponse) ProtoMessage()               {}
func (*MemTrackGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{14} }

func (m *MemTrackGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MemTrackGetResponse) GetSpec() *MemTrackSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MemTrackGetResponse) GetStatus() *MemTrackStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MemTrackGetResponse) GetStats() *MemTrackStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// MemTrackGetResponseMsg is batched MemTrackGetResponse
type MemTrackGetResponseMsg struct {
	Response []*MemTrackGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MemTrackGetResponseMsg) Reset()                    { *m = MemTrackGetResponseMsg{} }
func (m *MemTrackGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetResponseMsg) ProtoMessage()               {}
func (*MemTrackGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{15} }

func (m *MemTrackGetResponseMsg) GetResponse() []*MemTrackGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SlabSpec identifies a slab
type SlabSpec struct {
	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id               uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ElementSize      uint32 `protobuf:"varint,3,opt,name=element_size,json=elementSize,proto3" json:"element_size,omitempty"`
	ElementsPerBlock uint32 `protobuf:"varint,4,opt,name=elements_per_block,json=elementsPerBlock,proto3" json:"elements_per_block,omitempty"`
	ThreadSafe       bool   `protobuf:"varint,5,opt,name=thread_safe,json=threadSafe,proto3" json:"thread_safe,omitempty"`
	GrowOnDemand     bool   `protobuf:"varint,6,opt,name=grow_on_demand,json=growOnDemand,proto3" json:"grow_on_demand,omitempty"`
	DelayDelete      bool   `protobuf:"varint,7,opt,name=delay_delete,json=delayDelete,proto3" json:"delay_delete,omitempty"`
	ZeroOnAllocation bool   `protobuf:"varint,8,opt,name=zero_on_allocation,json=zeroOnAllocation,proto3" json:"zero_on_allocation,omitempty"`
}

func (m *SlabSpec) Reset()                    { *m = SlabSpec{} }
func (m *SlabSpec) String() string            { return proto.CompactTextString(m) }
func (*SlabSpec) ProtoMessage()               {}
func (*SlabSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{16} }

func (m *SlabSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SlabSpec) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SlabSpec) GetElementSize() uint32 {
	if m != nil {
		return m.ElementSize
	}
	return 0
}

func (m *SlabSpec) GetElementsPerBlock() uint32 {
	if m != nil {
		return m.ElementsPerBlock
	}
	return 0
}

func (m *SlabSpec) GetThreadSafe() bool {
	if m != nil {
		return m.ThreadSafe
	}
	return false
}

func (m *SlabSpec) GetGrowOnDemand() bool {
	if m != nil {
		return m.GrowOnDemand
	}
	return false
}

func (m *SlabSpec) GetDelayDelete() bool {
	if m != nil {
		return m.DelayDelete
	}
	return false
}

func (m *SlabSpec) GetZeroOnAllocation() bool {
	if m != nil {
		return m.ZeroOnAllocation
	}
	return false
}

// operational status of slab, if any
type SlabStatus struct {
}

func (m *SlabStatus) Reset()                    { *m = SlabStatus{} }
func (m *SlabStatus) String() string            { return proto.CompactTextString(m) }
func (*SlabStatus) ProtoMessage()               {}
func (*SlabStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{17} }

// per slab statistics
type SlabStats struct {
	NumElementsInUse uint32 `protobuf:"varint,1,opt,name=num_elements_in_use,json=numElementsInUse,proto3" json:"num_elements_in_use,omitempty"`
	NumAllocs        uint32 `protobuf:"varint,2,opt,name=num_allocs,json=numAllocs,proto3" json:"num_allocs,omitempty"`
	NumFrees         uint32 `protobuf:"varint,3,opt,name=num_frees,json=numFrees,proto3" json:"num_frees,omitempty"`
	NumAllocErrors   uint32 `protobuf:"varint,4,opt,name=num_alloc_errors,json=numAllocErrors,proto3" json:"num_alloc_errors,omitempty"`
	NumBlocks        uint32 `protobuf:"varint,5,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
}

func (m *SlabStats) Reset()                    { *m = SlabStats{} }
func (m *SlabStats) String() string            { return proto.CompactTextString(m) }
func (*SlabStats) ProtoMessage()               {}
func (*SlabStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{18} }

func (m *SlabStats) GetNumElementsInUse() uint32 {
	if m != nil {
		return m.NumElementsInUse
	}
	return 0
}

func (m *SlabStats) GetNumAllocs() uint32 {
	if m != nil {
		return m.NumAllocs
	}
	return 0
}

func (m *SlabStats) GetNumFrees() uint32 {
	if m != nil {
		return m.NumFrees
	}
	return 0
}

func (m *SlabStats) GetNumAllocErrors() uint32 {
	if m != nil {
		return m.NumAllocErrors
	}
	return 0
}

func (m *SlabStats) GetNumBlocks() uint32 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

// SlabGetRequest is GET request per slab
type SlabGetRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Id   uint32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SlabGetRequest) Reset()                    { *m = SlabGetRequest{} }
func (m *SlabGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SlabGetRequest) ProtoMessage()               {}
func (*SlabGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{19} }

func (m *SlabGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SlabGetRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// SlabGetResponse is batched GET request
type SlabGetRequestMsg struct {
	Request []*SlabGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SlabGetRequestMsg) Reset()                    { *m = SlabGetRequestMsg{} }
func (m *SlabGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SlabGetRequestMsg) ProtoMessage()               {}
func (*SlabGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{20} }

func (m *SlabGetRequestMsg) GetRequest() []*SlabGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SlabGetResponse captures all information about a slab
type SlabGetResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *SlabSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SlabStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SlabStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SlabGetResponse) Reset()                    { *m = SlabGetResponse{} }
func (m *SlabGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SlabGetResponse) ProtoMessage()               {}
func (*SlabGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{21} }

func (m *SlabGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SlabGetResponse) GetSpec() *SlabSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SlabGetResponse) GetStatus() *SlabStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SlabGetResponse) GetStats() *SlabStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SlabGetResponseMsg is batched response for GET operation
type SlabGetResponseMsg struct {
	Response []*SlabGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SlabGetResponseMsg) Reset()                    { *m = SlabGetResponseMsg{} }
func (m *SlabGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SlabGetResponseMsg) ProtoMessage()               {}
func (*SlabGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{22} }

func (m *SlabGetResponseMsg) GetResponse() []*SlabGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type TraceSpec struct {
	Meta       *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	TraceLevel TraceLevel  `protobuf:"varint,2,opt,name=trace_level,json=traceLevel,proto3,enum=debug.TraceLevel" json:"trace_level,omitempty"`
}

func (m *TraceSpec) Reset()                    { *m = TraceSpec{} }
func (m *TraceSpec) String() string            { return proto.CompactTextString(m) }
func (*TraceSpec) ProtoMessage()               {}
func (*TraceSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{23} }

func (m *TraceSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *TraceSpec) GetTraceLevel() TraceLevel {
	if m != nil {
		return m.TraceLevel
	}
	return TraceLevel_TRACE_LEVEL_NONE
}

type TraceRequestMsg struct {
	Request []*TraceSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TraceRequestMsg) Reset()                    { *m = TraceRequestMsg{} }
func (m *TraceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TraceRequestMsg) ProtoMessage()               {}
func (*TraceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{24} }

func (m *TraceRequestMsg) GetRequest() []*TraceSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type TraceResponse struct {
	ApiStatus  ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	TraceLevel TraceLevel `protobuf:"varint,2,opt,name=trace_level,json=traceLevel,proto3,enum=debug.TraceLevel" json:"trace_level,omitempty"`
}

func (m *TraceResponse) Reset()                    { *m = TraceResponse{} }
func (m *TraceResponse) String() string            { return proto.CompactTextString(m) }
func (*TraceResponse) ProtoMessage()               {}
func (*TraceResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{25} }

func (m *TraceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TraceResponse) GetTraceLevel() TraceLevel {
	if m != nil {
		return m.TraceLevel
	}
	return TraceLevel_TRACE_LEVEL_NONE
}

type TraceResponseMsg struct {
	Response []*TraceResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TraceResponseMsg) Reset()                    { *m = TraceResponseMsg{} }
func (m *TraceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TraceResponseMsg) ProtoMessage()               {}
func (*TraceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{26} }

func (m *TraceResponseMsg) GetResponse() []*TraceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// parameters to enable/disable MPU tracing
type MpuTraceRequest struct {
	PipelineType MpuTracePipelineType `protobuf:"varint,1,opt,name=pipeline_type,json=pipelineType,proto3,enum=debug.MpuTracePipelineType" json:"pipeline_type,omitempty"`
	StageId      uint32               `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Mpu          uint32               `protobuf:"varint,3,opt,name=mpu,proto3" json:"mpu,omitempty"`
	Enable       bool                 `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
	TraceEnable  bool                 `protobuf:"varint,5,opt,name=trace_enable,json=traceEnable,proto3" json:"trace_enable,omitempty"`
	PhvDebug     bool                 `protobuf:"varint,6,opt,name=phv_debug,json=phvDebug,proto3" json:"phv_debug,omitempty"`
	PhvError     bool                 `protobuf:"varint,7,opt,name=phv_error,json=phvError,proto3" json:"phv_error,omitempty"`
	WatchPc      uint64               `protobuf:"varint,8,opt,name=watch_pc,json=watchPc,proto3" json:"watch_pc,omitempty"`
	BaseAddr     uint64               `protobuf:"varint,9,opt,name=base_addr,json=baseAddr,proto3" json:"base_addr,omitempty"`
	TableKey     bool                 `protobuf:"varint,10,opt,name=table_key,json=tableKey,proto3" json:"table_key,omitempty"`
	Instructions bool                 `protobuf:"varint,11,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Wrap         bool                 `protobuf:"varint,12,opt,name=wrap,proto3" json:"wrap,omitempty"`
	Reset_       bool                 `protobuf:"varint,13,opt,name=reset,proto3" json:"reset,omitempty"`
}

func (m *MpuTraceRequest) Reset()                    { *m = MpuTraceRequest{} }
func (m *MpuTraceRequest) String() string            { return proto.CompactTextString(m) }
func (*MpuTraceRequest) ProtoMessage()               {}
func (*MpuTraceRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{27} }

func (m *MpuTraceRequest) GetPipelineType() MpuTracePipelineType {
	if m != nil {
		return m.PipelineType
	}
	return MpuTracePipelineType_MPU_TRACE_PIPELINE_NONE
}

func (m *MpuTraceRequest) GetStageId() uint32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *MpuTraceRequest) GetMpu() uint32 {
	if m != nil {
		return m.Mpu
	}
	return 0
}

func (m *MpuTraceRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *MpuTraceRequest) GetTraceEnable() bool {
	if m != nil {
		return m.TraceEnable
	}
	return false
}

func (m *MpuTraceRequest) GetPhvDebug() bool {
	if m != nil {
		return m.PhvDebug
	}
	return false
}

func (m *MpuTraceRequest) GetPhvError() bool {
	if m != nil {
		return m.PhvError
	}
	return false
}

func (m *MpuTraceRequest) GetWatchPc() uint64 {
	if m != nil {
		return m.WatchPc
	}
	return 0
}

func (m *MpuTraceRequest) GetBaseAddr() uint64 {
	if m != nil {
		return m.BaseAddr
	}
	return 0
}

func (m *MpuTraceRequest) GetTableKey() bool {
	if m != nil {
		return m.TableKey
	}
	return false
}

func (m *MpuTraceRequest) GetInstructions() bool {
	if m != nil {
		return m.Instructions
	}
	return false
}

func (m *MpuTraceRequest) GetWrap() bool {
	if m != nil {
		return m.Wrap
	}
	return false
}

func (m *MpuTraceRequest) GetReset_() bool {
	if m != nil {
		return m.Reset_
	}
	return false
}

// Batched MPU trace enable/disable request msg
type MpuTraceRequestMsg struct {
	Request []*MpuTraceRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MpuTraceRequestMsg) Reset()                    { *m = MpuTraceRequestMsg{} }
func (m *MpuTraceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MpuTraceRequestMsg) ProtoMessage()               {}
func (*MpuTraceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{28} }

func (m *MpuTraceRequestMsg) GetRequest() []*MpuTraceRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// MPU trace enable/disable status
type MpuTraceResponse struct {
	ApiStatus  ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	DebugIndex uint32    `protobuf:"varint,2,opt,name=debug_index,json=debugIndex,proto3" json:"debug_index,omitempty"`
}

func (m *MpuTraceResponse) Reset()                    { *m = MpuTraceResponse{} }
func (m *MpuTraceResponse) String() string            { return proto.CompactTextString(m) }
func (*MpuTraceResponse) ProtoMessage()               {}
func (*MpuTraceResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{29} }

func (m *MpuTraceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MpuTraceResponse) GetDebugIndex() uint32 {
	if m != nil {
		return m.DebugIndex
	}
	return 0
}

// Batched MPU trace response
type MpuTraceResponseMsg struct {
	Response []*MpuTraceResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MpuTraceResponseMsg) Reset()                    { *m = MpuTraceResponseMsg{} }
func (m *MpuTraceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MpuTraceResponseMsg) ProtoMessage()               {}
func (*MpuTraceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{30} }

func (m *MpuTraceResponseMsg) GetResponse() []*MpuTraceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "debug.RegisterRequest")
	proto.RegisterType((*RegisterRequestMsg)(nil), "debug.RegisterRequestMsg")
	proto.RegisterType((*RegisterResponse)(nil), "debug.RegisterResponse")
	proto.RegisterType((*RegisterResponseMsg)(nil), "debug.RegisterResponseMsg")
	proto.RegisterType((*MemoryRequest)(nil), "debug.MemoryRequest")
	proto.RegisterType((*MemoryRequestMsg)(nil), "debug.MemoryRequestMsg")
	proto.RegisterType((*MemoryResponse)(nil), "debug.MemoryResponse")
	proto.RegisterType((*MemoryResponseMsg)(nil), "debug.MemoryResponseMsg")
	proto.RegisterType((*RegisterData)(nil), "debug.RegisterData")
	proto.RegisterType((*MemTrackSpec)(nil), "debug.MemTrackSpec")
	proto.RegisterType((*MemTrackGetRequest)(nil), "debug.MemTrackGetRequest")
	proto.RegisterType((*MemTrackGetRequestMsg)(nil), "debug.MemTrackGetRequestMsg")
	proto.RegisterType((*MemTrackStatus)(nil), "debug.MemTrackStatus")
	proto.RegisterType((*MemTrackStats)(nil), "debug.MemTrackStats")
	proto.RegisterType((*MemTrackGetResponse)(nil), "debug.MemTrackGetResponse")
	proto.RegisterType((*MemTrackGetResponseMsg)(nil), "debug.MemTrackGetResponseMsg")
	proto.RegisterType((*SlabSpec)(nil), "debug.SlabSpec")
	proto.RegisterType((*SlabStatus)(nil), "debug.SlabStatus")
	proto.RegisterType((*SlabStats)(nil), "debug.SlabStats")
	proto.RegisterType((*SlabGetRequest)(nil), "debug.SlabGetRequest")
	proto.RegisterType((*SlabGetRequestMsg)(nil), "debug.SlabGetRequestMsg")
	proto.RegisterType((*SlabGetResponse)(nil), "debug.SlabGetResponse")
	proto.RegisterType((*SlabGetResponseMsg)(nil), "debug.SlabGetResponseMsg")
	proto.RegisterType((*TraceSpec)(nil), "debug.TraceSpec")
	proto.RegisterType((*TraceRequestMsg)(nil), "debug.TraceRequestMsg")
	proto.RegisterType((*TraceResponse)(nil), "debug.TraceResponse")
	proto.RegisterType((*TraceResponseMsg)(nil), "debug.TraceResponseMsg")
	proto.RegisterType((*MpuTraceRequest)(nil), "debug.MpuTraceRequest")
	proto.RegisterType((*MpuTraceRequestMsg)(nil), "debug.MpuTraceRequestMsg")
	proto.RegisterType((*MpuTraceResponse)(nil), "debug.MpuTraceResponse")
	proto.RegisterType((*MpuTraceResponseMsg)(nil), "debug.MpuTraceResponseMsg")
	proto.RegisterEnum("debug.TraceLevel", TraceLevel_name, TraceLevel_value)
	proto.RegisterEnum("debug.MpuTracePipelineType", MpuTracePipelineType_name, MpuTracePipelineType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Debug service

type DebugClient interface {
	RegisterGet(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error)
	RegisterUpdate(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error)
	MemoryGet(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error)
	MemoryUpdate(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error)
	MpuTraceUpdate(ctx context.Context, in *MpuTraceRequestMsg, opts ...grpc.CallOption) (*MpuTraceResponseMsg, error)
	MemTrackGet(ctx context.Context, in *MemTrackGetRequestMsg, opts ...grpc.CallOption) (*MemTrackGetResponseMsg, error)
	SlabGet(ctx context.Context, in *SlabGetRequestMsg, opts ...grpc.CallOption) (*SlabGetResponseMsg, error)
	TraceUpdate(ctx context.Context, in *TraceRequestMsg, opts ...grpc.CallOption) (*TraceResponseMsg, error)
	TraceGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TraceResponseMsg, error)
}

type debugClient struct {
	cc *grpc.ClientConn
}

func NewDebugClient(cc *grpc.ClientConn) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) RegisterGet(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error) {
	out := new(RegisterResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/RegisterGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) RegisterUpdate(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error) {
	out := new(RegisterResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/RegisterUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemoryGet(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error) {
	out := new(MemoryResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MemoryGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemoryUpdate(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error) {
	out := new(MemoryResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MemoryUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MpuTraceUpdate(ctx context.Context, in *MpuTraceRequestMsg, opts ...grpc.CallOption) (*MpuTraceResponseMsg, error) {
	out := new(MpuTraceResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MpuTraceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemTrackGet(ctx context.Context, in *MemTrackGetRequestMsg, opts ...grpc.CallOption) (*MemTrackGetResponseMsg, error) {
	out := new(MemTrackGetResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MemTrackGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SlabGet(ctx context.Context, in *SlabGetRequestMsg, opts ...grpc.CallOption) (*SlabGetResponseMsg, error) {
	out := new(SlabGetResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/SlabGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) TraceUpdate(ctx context.Context, in *TraceRequestMsg, opts ...grpc.CallOption) (*TraceResponseMsg, error) {
	out := new(TraceResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/TraceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) TraceGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TraceResponseMsg, error) {
	out := new(TraceResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/TraceGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Debug service

type DebugServer interface {
	RegisterGet(context.Context, *RegisterRequestMsg) (*RegisterResponseMsg, error)
	RegisterUpdate(context.Context, *RegisterRequestMsg) (*RegisterResponseMsg, error)
	MemoryGet(context.Context, *MemoryRequestMsg) (*MemoryResponseMsg, error)
	MemoryUpdate(context.Context, *MemoryRequestMsg) (*MemoryResponseMsg, error)
	MpuTraceUpdate(context.Context, *MpuTraceRequestMsg) (*MpuTraceResponseMsg, error)
	MemTrackGet(context.Context, *MemTrackGetRequestMsg) (*MemTrackGetResponseMsg, error)
	SlabGet(context.Context, *SlabGetRequestMsg) (*SlabGetResponseMsg, error)
	TraceUpdate(context.Context, *TraceRequestMsg) (*TraceResponseMsg, error)
	TraceGet(context.Context, *Empty) (*TraceResponseMsg, error)
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_RegisterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).RegisterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/RegisterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).RegisterGet(ctx, req.(*RegisterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_RegisterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).RegisterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/RegisterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).RegisterUpdate(ctx, req.(*RegisterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemoryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemoryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemoryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemoryGet(ctx, req.(*MemoryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemoryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemoryUpdate(ctx, req.(*MemoryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MpuTraceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MpuTraceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MpuTraceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MpuTraceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MpuTraceUpdate(ctx, req.(*MpuTraceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemTrackGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemTrackGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemTrackGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemTrackGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemTrackGet(ctx, req.(*MemTrackGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SlabGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlabGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SlabGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/SlabGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SlabGet(ctx, req.(*SlabGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_TraceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).TraceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/TraceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).TraceUpdate(ctx, req.(*TraceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_TraceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).TraceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/TraceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).TraceGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debug.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGet",
			Handler:    _Debug_RegisterGet_Handler,
		},
		{
			MethodName: "RegisterUpdate",
			Handler:    _Debug_RegisterUpdate_Handler,
		},
		{
			MethodName: "MemoryGet",
			Handler:    _Debug_MemoryGet_Handler,
		},
		{
			MethodName: "MemoryUpdate",
			Handler:    _Debug_MemoryUpdate_Handler,
		},
		{
			MethodName: "MpuTraceUpdate",
			Handler:    _Debug_MpuTraceUpdate_Handler,
		},
		{
			MethodName: "MemTrackGet",
			Handler:    _Debug_MemTrackGet_Handler,
		},
		{
			MethodName: "SlabGet",
			Handler:    _Debug_SlabGet_Handler,
		},
		{
			MethodName: "TraceUpdate",
			Handler:    _Debug_TraceUpdate_Handler,
		},
		{
			MethodName: "TraceGet",
			Handler:    _Debug_TraceGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debug.proto",
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdOrName != nil {
		nn1, err := m.IdOrName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.BlockName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.BlockName)))
		i += copy(dAtA[i:], m.BlockName)
	}
	if m.Addr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Addr))
	}
	if m.RegData != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.RegData))
	}
	return i, nil
}

func (m *RegisterRequest_RegId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.RegId))
	i += 4
	return i, nil
}
func (m *RegisterRequest_RegName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintDebug(dAtA, i, uint64(len(m.RegName)))
	i += copy(dAtA[i:], m.RegName)
	return i, nil
}
func (m *RegisterRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RegisterResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdOrName != nil {
		nn3, err := m.IdOrName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Index))
	}
	if len(m.Swkey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Swkey)))
		i += copy(dAtA[i:], m.Swkey)
	}
	if len(m.SwkeyMask) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.SwkeyMask)))
		i += copy(dAtA[i:], m.SwkeyMask)
	}
	if len(m.Actiondata) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Actiondata)))
		i += copy(dAtA[i:], m.Actiondata)
	}
	return i, nil
}

func (m *MemoryRequest_TableId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TableId))
	i += 4
	return i, nil
}
func (m *MemoryRequest_TableName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintDebug(dAtA, i, uint64(len(m.TableName)))
	i += copy(dAtA[i:], m.TableName)
	return i, nil
}
func (m *MemoryRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Index))
	}
	if len(m.Swkey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Swkey)))
		i += copy(dAtA[i:], m.Swkey)
	}
	if len(m.SwkeyMask) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.SwkeyMask)))
		i += copy(dAtA[i:], m.SwkeyMask)
	}
	if len(m.Actiondata) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Actiondata)))
		i += copy(dAtA[i:], m.Actiondata)
	}
	return i, nil
}

func (m *MemoryResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RegisterData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RegName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.RegName)))
		i += copy(dAtA[i:], m.RegName)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *MemTrackSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllocId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.AllocId))
	}
	return i, nil
}

func (m *MemTrackGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Meta.Size()))
		n4, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n5, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *MemTrackGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemTrackStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MemTrackStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumAllocs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumFrees))
	}
	return i, nil
}

func (m *MemTrackGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n6, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n7, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Stats.Size()))
		n8, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *MemTrackGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SlabSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Id))
	}
	if m.ElementSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ElementSize))
	}
	if m.ElementsPerBlock != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ElementsPerBlock))
	}
	if m.ThreadSafe {
		dAtA[i] = 0x28
		i++
		if m.ThreadSafe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GrowOnDemand {
		dAtA[i] = 0x30
		i++
		if m.GrowOnDemand {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DelayDelete {
		dAtA[i] = 0x38
		i++
		if m.DelayDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ZeroOnAllocation {
		dAtA[i] = 0x40
		i++
		if m.ZeroOnAllocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SlabStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SlabStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumElementsInUse != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumElementsInUse))
	}
	if m.NumAllocs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumFrees))
	}
	if m.NumAllocErrors != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumAllocErrors))
	}
	if m.NumBlocks != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumBlocks))
	}
	return i, nil
}

func (m *SlabGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Meta.Size()))
		n9, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *SlabGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SlabGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n10, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Stats.Size()))
		n12, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *SlabGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TraceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Meta.Size()))
		n13, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.TraceLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.TraceLevel))
	}
	return i, nil
}

func (m *TraceRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TraceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.TraceLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.TraceLevel))
	}
	return i, nil
}

func (m *TraceResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MpuTraceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MpuTraceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PipelineType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.PipelineType))
	}
	if m.StageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.StageId))
	}
	if m.Mpu != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Mpu))
	}
	if m.Enable {
		dAtA[i] = 0x20
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TraceEnable {
		dAtA[i] = 0x28
		i++
		if m.TraceEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhvDebug {
		dAtA[i] = 0x30
		i++
		if m.PhvDebug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhvError {
		dAtA[i] = 0x38
		i++
		if m.PhvError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WatchPc != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.WatchPc))
	}
	if m.BaseAddr != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.BaseAddr))
	}
	if m.TableKey {
		dAtA[i] = 0x50
		i++
		if m.TableKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Instructions {
		dAtA[i] = 0x58
		i++
		if m.Instructions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Wrap {
		dAtA[i] = 0x60
		i++
		if m.Wrap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reset_ {
		dAtA[i] = 0x68
		i++
		if m.Reset_ {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MpuTraceRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MpuTraceRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MpuTraceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MpuTraceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.DebugIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.DebugIndex))
	}
	return i, nil
}

func (m *MpuTraceResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MpuTraceResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintDebug(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterRequest) Size() (n int) {
	var l int
	_ = l
	if m.IdOrName != nil {
		n += m.IdOrName.Size()
	}
	l = len(m.BlockName)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Addr != 0 {
		n += 1 + sovDebug(uint64(m.Addr))
	}
	if m.RegData != 0 {
		n += 1 + sovDebug(uint64(m.RegData))
	}
	return n
}

func (m *RegisterRequest_RegId) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *RegisterRequest_RegName) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegName)
	n += 1 + l + sovDebug(uint64(l))
	return n
}
func (m *RegisterRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *RegisterResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemoryRequest) Size() (n int) {
	var l int
	_ = l
	if m.IdOrName != nil {
		n += m.IdOrName.Size()
	}
	if m.Index != 0 {
		n += 1 + sovDebug(uint64(m.Index))
	}
	l = len(m.Swkey)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.SwkeyMask)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Actiondata)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemoryRequest_TableId) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *MemoryRequest_TableName) Size() (n int) {
	var l int
	_ = l
	l = len(m.TableName)
	n += 1 + l + sovDebug(uint64(l))
	return n
}
func (m *MemoryRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemoryResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Index != 0 {
		n += 1 + sovDebug(uint64(m.Index))
	}
	l = len(m.Swkey)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.SwkeyMask)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Actiondata)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemoryResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *RegisterData) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegName)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemTrackSpec) Size() (n int) {
	var l int
	_ = l
	if m.AllocId != 0 {
		n += 1 + sovDebug(uint64(m.AllocId))
	}
	return n
}

func (m *MemTrackGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemTrackGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemTrackStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MemTrackStats) Size() (n int) {
	var l int
	_ = l
	if m.NumAllocs != 0 {
		n += 1 + sovDebug(uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		n += 1 + sovDebug(uint64(m.NumFrees))
	}
	return n
}

func (m *MemTrackGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemTrackGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SlabSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDebug(uint64(m.Id))
	}
	if m.ElementSize != 0 {
		n += 1 + sovDebug(uint64(m.ElementSize))
	}
	if m.ElementsPerBlock != 0 {
		n += 1 + sovDebug(uint64(m.ElementsPerBlock))
	}
	if m.ThreadSafe {
		n += 2
	}
	if m.GrowOnDemand {
		n += 2
	}
	if m.DelayDelete {
		n += 2
	}
	if m.ZeroOnAllocation {
		n += 2
	}
	return n
}

func (m *SlabStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SlabStats) Size() (n int) {
	var l int
	_ = l
	if m.NumElementsInUse != 0 {
		n += 1 + sovDebug(uint64(m.NumElementsInUse))
	}
	if m.NumAllocs != 0 {
		n += 1 + sovDebug(uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		n += 1 + sovDebug(uint64(m.NumFrees))
	}
	if m.NumAllocErrors != 0 {
		n += 1 + sovDebug(uint64(m.NumAllocErrors))
	}
	if m.NumBlocks != 0 {
		n += 1 + sovDebug(uint64(m.NumBlocks))
	}
	return n
}

func (m *SlabGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDebug(uint64(m.Id))
	}
	return n
}

func (m *SlabGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SlabGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *SlabGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *TraceSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.TraceLevel != 0 {
		n += 1 + sovDebug(uint64(m.TraceLevel))
	}
	return n
}

func (m *TraceRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *TraceResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.TraceLevel != 0 {
		n += 1 + sovDebug(uint64(m.TraceLevel))
	}
	return n
}

func (m *TraceResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MpuTraceRequest) Size() (n int) {
	var l int
	_ = l
	if m.PipelineType != 0 {
		n += 1 + sovDebug(uint64(m.PipelineType))
	}
	if m.StageId != 0 {
		n += 1 + sovDebug(uint64(m.StageId))
	}
	if m.Mpu != 0 {
		n += 1 + sovDebug(uint64(m.Mpu))
	}
	if m.Enable {
		n += 2
	}
	if m.TraceEnable {
		n += 2
	}
	if m.PhvDebug {
		n += 2
	}
	if m.PhvError {
		n += 2
	}
	if m.WatchPc != 0 {
		n += 1 + sovDebug(uint64(m.WatchPc))
	}
	if m.BaseAddr != 0 {
		n += 1 + sovDebug(uint64(m.BaseAddr))
	}
	if m.TableKey {
		n += 2
	}
	if m.Instructions {
		n += 2
	}
	if m.Wrap {
		n += 2
	}
	if m.Reset_ {
		n += 2
	}
	return n
}

func (m *MpuTraceRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MpuTraceResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.DebugIndex != 0 {
		n += 1 + sovDebug(uint64(m.DebugIndex))
	}
	return n
}

func (m *MpuTraceResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func sovDebug(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDebug(x uint64) (n int) {
	return sovDebug(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.IdOrName = &RegisterRequest_RegId{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdOrName = &RegisterRequest_RegName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegData", wireType)
			}
			m.RegData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegData |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RegisterRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RegisterData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &RegisterResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.IdOrName = &MemoryRequest_TableId{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdOrName = &MemoryRequest_TableName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swkey = append(m.Swkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Swkey == nil {
				m.Swkey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwkeyMask", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwkeyMask = append(m.SwkeyMask[:0], dAtA[iNdEx:postIndex]...)
			if m.SwkeyMask == nil {
				m.SwkeyMask = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actiondata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actiondata = append(m.Actiondata[:0], dAtA[iNdEx:postIndex]...)
			if m.Actiondata == nil {
				m.Actiondata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MemoryRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swkey = append(m.Swkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Swkey == nil {
				m.Swkey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwkeyMask", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwkeyMask = append(m.SwkeyMask[:0], dAtA[iNdEx:postIndex]...)
			if m.SwkeyMask == nil {
				m.SwkeyMask = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actiondata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actiondata = append(m.Actiondata[:0], dAtA[iNdEx:postIndex]...)
			if m.Actiondata == nil {
				m.Actiondata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MemoryResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocId", wireType)
			}
			m.AllocId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MemTrackSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MemTrackGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocs", wireType)
			}
			m.NumAllocs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFrees", wireType)
			}
			m.NumFrees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFrees |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MemTrackSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MemTrackStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &MemTrackStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MemTrackGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementSize", wireType)
			}
			m.ElementSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElementSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementsPerBlock", wireType)
			}
			m.ElementsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElementsPerBlock |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadSafe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreadSafe = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrowOnDemand", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrowOnDemand = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelayDelete = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroOnAllocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZeroOnAllocation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumElementsInUse", wireType)
			}
			m.NumElementsInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumElementsInUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocs", wireType)
			}
			m.NumAllocs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFrees", wireType)
			}
			m.NumFrees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFrees |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocErrors", wireType)
			}
			m.NumAllocErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocks", wireType)
			}
			m.NumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocks |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SlabGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SlabSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SlabStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SlabStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SlabGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceLevel", wireType)
			}
			m.TraceLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceLevel |= (TraceLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TraceSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceLevel", wireType)
			}
			m.TraceLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceLevel |= (TraceLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TraceResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MpuTraceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MpuTraceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MpuTraceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineType", wireType)
			}
			m.PipelineType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PipelineType |= (MpuTracePipelineType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpu", wireType)
			}
			m.Mpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mpu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TraceEnable = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhvDebug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhvDebug = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhvError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhvError = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchPc", wireType)
			}
			m.WatchPc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchPc |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAddr", wireType)
			}
			m.BaseAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TableKey = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Instructions = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wrap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wrap = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reset_ = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MpuTraceRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MpuTraceRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MpuTraceRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MpuTraceRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MpuTraceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MpuTraceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MpuTraceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugIndex", wireType)
			}
			m.DebugIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MpuTraceResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MpuTraceResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MpuTraceResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MpuTraceResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebug(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDebug
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDebug(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDebug = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebug   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("debug.proto", fileDescriptorDebug) }

var fileDescriptorDebug = []byte{
	// 1628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6e, 0x23, 0xc5,
	0x13, 0xcf, 0xd8, 0x4e, 0x6c, 0x97, 0x3f, 0x32, 0xe9, 0x7c, 0x39, 0xc9, 0x6e, 0x92, 0x9d, 0xff,
	0x57, 0x36, 0xfa, 0x6f, 0x80, 0x2c, 0xe2, 0x80, 0x84, 0xb4, 0xc9, 0xda, 0xc9, 0x9a, 0x8d, 0x13,
	0xab, 0x93, 0x20, 0xe0, 0x32, 0xea, 0x78, 0x3a, 0xce, 0x10, 0x7b, 0x3c, 0x4c, 0x8f, 0x13, 0xbc,
	0x1c, 0x39, 0xf2, 0x00, 0xec, 0x9d, 0xd7, 0x40, 0xe2, 0x80, 0x84, 0x38, 0xc2, 0x0b, 0x20, 0x58,
	0xde, 0x00, 0x5e, 0x00, 0x75, 0xf5, 0x8c, 0x3d, 0x1e, 0x3b, 0xd1, 0xb2, 0xca, 0xc9, 0x53, 0x55,
	0xbf, 0xa9, 0xee, 0xaa, 0xfa, 0x55, 0x4d, 0xb7, 0x21, 0x67, 0xf1, 0xb3, 0x6e, 0x73, 0xcb, 0xf5,
	0x3a, 0x7e, 0x87, 0x4c, 0xa2, 0xb0, 0x9c, 0xf3, 0x7b, 0x2e, 0x17, 0x4a, 0x67, 0x7c, 0xab, 0xc1,
	0x34, 0xe5, 0x4d, 0x5b, 0xf8, 0xdc, 0xa3, 0xfc, 0xf3, 0x2e, 0x17, 0x3e, 0x59, 0x84, 0x29, 0x8f,
	0x37, 0x4d, 0xdb, 0x2a, 0x69, 0xeb, 0xda, 0x46, 0xfa, 0xd9, 0x04, 0x9d, 0xf4, 0x78, 0xb3, 0x6a,
	0x91, 0x15, 0xc8, 0x48, 0x83, 0xc3, 0xda, 0xbc, 0x94, 0x58, 0xd7, 0x36, 0xb2, 0xcf, 0x26, 0x68,
	0xda, 0xe3, 0xcd, 0x43, 0xd6, 0xe6, 0xe4, 0x3e, 0xc0, 0x59, 0xab, 0xd3, 0xb8, 0x54, 0xe6, 0xa4,
	0x34, 0xd3, 0x2c, 0x6a, 0xd0, 0x4c, 0x20, 0xc5, 0x2c, 0xcb, 0x2b, 0xa5, 0xd6, 0xb5, 0x8d, 0x14,
	0xc5, 0x67, 0xb2, 0xa4, 0xfc, 0x59, 0xcc, 0x67, 0xa5, 0xc9, 0x75, 0x6d, 0xa3, 0x80, 0xde, 0xca,
	0xcc, 0x67, 0xbb, 0x79, 0x00, 0xdb, 0x32, 0x3b, 0x1e, 0x7a, 0x33, 0xf6, 0x80, 0xc4, 0x36, 0x59,
	0x13, 0x4d, 0xf2, 0x36, 0xa4, 0x3d, 0x25, 0x95, 0xb4, 0xf5, 0xe4, 0x46, 0x6e, 0x7b, 0x61, 0x4b,
	0x85, 0x1b, 0xc3, 0xd2, 0x10, 0x66, 0x7c, 0xa5, 0x81, 0x3e, 0x30, 0x0a, 0xb7, 0xe3, 0x08, 0x4e,
	0xf6, 0x00, 0x98, 0x6b, 0x9b, 0xc2, 0x67, 0x7e, 0x57, 0x60, 0xc8, 0xc5, 0x6d, 0x7d, 0x4b, 0x25,
	0x69, 0xc7, 0xb5, 0x8f, 0x51, 0xbf, 0x3b, 0xff, 0xe7, 0xaf, 0x6b, 0x33, 0x57, 0xdc, 0xb1, 0x1b,
	0xfc, 0xfd, 0x01, 0x9c, 0x66, 0x59, 0x88, 0x20, 0xff, 0x83, 0x14, 0x46, 0x22, 0x33, 0x93, 0xdb,
	0x9e, 0x8d, 0xed, 0x45, 0x46, 0x45, 0x11, 0x60, 0x7c, 0x08, 0xb3, 0xf1, 0x4d, 0xc8, 0x70, 0x1e,
	0xcb, 0x6c, 0x28, 0x31, 0x88, 0x67, 0x71, 0x24, 0x1e, 0x65, 0xa6, 0x7d, 0xa0, 0xf1, 0xa3, 0x06,
	0x85, 0x1a, 0x6f, 0x77, 0xbc, 0x5e, 0x58, 0xbd, 0x15, 0xc8, 0xf8, 0xec, 0xac, 0xc5, 0xa3, 0xf5,
	0x4b, 0xa3, 0xa6, 0x6a, 0x91, 0x35, 0x00, 0x65, 0x1c, 0xaa, 0x61, 0x16, 0x75, 0x58, 0xa6, 0x39,
	0x98, 0xb4, 0x1d, 0x8b, 0x7f, 0x81, 0x05, 0x2c, 0x50, 0x25, 0x48, 0xad, 0xb8, 0xbe, 0xe4, 0x3d,
	0xac, 0x5e, 0x9e, 0x2a, 0x41, 0x56, 0x1c, 0x1f, 0xcc, 0x36, 0x13, 0x97, 0x58, 0xc0, 0x3c, 0xcd,
	0xa2, 0xa6, 0xc6, 0xc4, 0x25, 0x59, 0x05, 0x60, 0x0d, 0xdf, 0xee, 0x38, 0x98, 0x95, 0x29, 0x34,
	0x47, 0x34, 0xb1, 0x12, 0xef, 0x82, 0x3e, 0x14, 0x87, 0xcc, 0xc8, 0x56, 0xbc, 0xc0, 0x73, 0x41,
	0x42, 0x86, 0x90, 0x83, 0xf2, 0xfe, 0xa0, 0x41, 0x31, 0x34, 0xdd, 0x71, 0x71, 0xfb, 0x79, 0x49,
	0x8c, 0xcd, 0x4b, 0xf2, 0xe6, 0xbc, 0xa4, 0x6e, 0xcf, 0xcb, 0x64, 0x3c, 0x2f, 0xc6, 0x1e, 0xcc,
	0x0c, 0x07, 0x21, 0x53, 0xf1, 0xce, 0x08, 0x39, 0xe6, 0x63, 0xb9, 0x18, 0xa1, 0xc6, 0x27, 0x90,
	0x8f, 0x92, 0x2f, 0xec, 0x36, 0xac, 0xbc, 0x86, 0xed, 0xd9, 0xef, 0xdd, 0x12, 0xa4, 0x65, 0x43,
	0x72, 0x21, 0x14, 0x27, 0x68, 0x28, 0xca, 0x08, 0xaf, 0x58, 0xab, 0x1b, 0x36, 0xb4, 0x12, 0x8c,
	0x87, 0x90, 0xaf, 0xf1, 0xf6, 0x89, 0xc7, 0x1a, 0x97, 0xc7, 0x2e, 0x6f, 0x48, 0xd7, 0xac, 0xd5,
	0xea, 0x34, 0x42, 0xce, 0x15, 0x68, 0x1a, 0xe5, 0xaa, 0x65, 0x58, 0x40, 0x42, 0xe8, 0x3e, 0xf7,
	0x43, 0x92, 0xfe, 0x07, 0x52, 0x6d, 0xee, 0x33, 0x04, 0xe7, 0xb6, 0x67, 0x82, 0x82, 0x1c, 0x9d,
	0x7d, 0xc6, 0x1b, 0x7e, 0x8d, 0xcb, 0x4e, 0x91, 0x66, 0xd9, 0x52, 0xc2, 0xe5, 0x8d, 0x58, 0x4b,
	0x45, 0x97, 0xa6, 0x08, 0x30, 0x0e, 0x60, 0x7e, 0x74, 0x15, 0xd5, 0x54, 0x31, 0x0a, 0x2d, 0xc5,
	0x9c, 0x0c, 0xe0, 0x03, 0x1e, 0xe9, 0x48, 0x23, 0xb5, 0x06, 0x96, 0xdf, 0x78, 0x8e, 0x5d, 0xd6,
	0xd7, 0x08, 0x59, 0x63, 0xa7, 0xdb, 0x36, 0x31, 0x4a, 0x11, 0xc4, 0x9c, 0x75, 0xba, 0xed, 0x1d,
	0x54, 0x90, 0x15, 0x90, 0x82, 0x79, 0xee, 0x71, 0x2e, 0x02, 0xca, 0x64, 0x9c, 0x6e, 0x7b, 0x4f,
	0xca, 0xc6, 0xef, 0x1a, 0xcc, 0x0e, 0x2d, 0x7f, 0xf7, 0x83, 0xe8, 0xb5, 0xb2, 0x46, 0x1e, 0xc1,
	0x54, 0xb0, 0x58, 0x12, 0xa1, 0xf3, 0x71, 0xa8, 0x72, 0x1d, 0x80, 0xc8, 0x26, 0x4c, 0xca, 0x27,
	0x81, 0x94, 0x1e, 0x6a, 0xc6, 0x41, 0x62, 0xa8, 0x82, 0x18, 0x75, 0x58, 0x18, 0x13, 0xa2, 0xac,
	0xc8, 0x7b, 0x23, 0x4c, 0x5e, 0x1e, 0x57, 0x92, 0x11, 0x3a, 0x7f, 0x93, 0x80, 0xcc, 0x71, 0x8b,
	0x9d, 0x21, 0xe1, 0x08, 0xa4, 0x22, 0x3c, 0xc6, 0x67, 0x52, 0x84, 0x84, 0x6d, 0x05, 0xc9, 0x4e,
	0xd8, 0x16, 0x79, 0x00, 0x79, 0xde, 0xe2, 0x6d, 0xee, 0xf8, 0xa6, 0xb0, 0x5f, 0xf0, 0x60, 0xa2,
	0xe5, 0x02, 0xdd, 0xb1, 0xfd, 0x82, 0x93, 0xff, 0x03, 0x09, 0x44, 0x61, 0xba, 0xdc, 0x33, 0xf1,
	0x73, 0x85, 0xe1, 0x15, 0xa8, 0x1e, 0x5a, 0xea, 0xdc, 0xdb, 0x95, 0x7a, 0xb2, 0x06, 0x39, 0xff,
	0xc2, 0xe3, 0xcc, 0x32, 0x05, 0x3b, 0xe7, 0xd8, 0xb9, 0x19, 0x0a, 0x4a, 0x75, 0xcc, 0xce, 0x39,
	0xf9, 0x37, 0x14, 0x9b, 0x5e, 0xe7, 0xda, 0xec, 0x38, 0xa6, 0xc5, 0xdb, 0xcc, 0xb1, 0x70, 0xea,
	0x65, 0x68, 0x5e, 0x6a, 0x8f, 0x9c, 0x32, 0xea, 0xe4, 0xbe, 0x2c, 0xde, 0x62, 0x3d, 0xd3, 0xe2,
	0x2d, 0xee, 0xf3, 0x52, 0x1a, 0x31, 0x39, 0xd4, 0x95, 0x51, 0x25, 0xf7, 0xf5, 0x82, 0x7b, 0x1d,
	0xe9, 0x08, 0x19, 0xc6, 0xe4, 0x70, 0x28, 0x65, 0x10, 0xa8, 0x4b, 0xcb, 0x91, 0xb3, 0xd3, 0xd7,
	0x1b, 0x79, 0x00, 0x4c, 0x8c, 0xa2, 0xea, 0xf7, 0x1a, 0x64, 0x43, 0x51, 0x90, 0x47, 0x30, 0x2b,
	0x89, 0xd8, 0x8f, 0xd2, 0x76, 0xcc, 0xae, 0xe0, 0x01, 0x61, 0x75, 0xa7, 0xdb, 0xae, 0x04, 0x96,
	0xaa, 0x73, 0x2a, 0x78, 0x8c, 0xd6, 0x89, 0x5b, 0x69, 0x9d, 0x1c, 0xa6, 0x35, 0xd9, 0x00, 0xbd,
	0xff, 0xae, 0xc9, 0x3d, 0xaf, 0xe3, 0x89, 0x20, 0x95, 0xc5, 0xd0, 0x43, 0x05, 0xb5, 0xe1, 0x2a,
	0x98, 0x6d, 0x11, 0x7c, 0xf9, 0xa5, 0x63, 0x4c, 0xb3, 0x30, 0xf6, 0xa1, 0x28, 0x03, 0xf8, 0xe7,
	0xe3, 0x22, 0xc6, 0x00, 0xa3, 0x0c, 0x33, 0xc3, 0x8e, 0x24, 0xff, 0xde, 0x8a, 0x4f, 0x84, 0x90,
	0xf5, 0xc3, 0xd0, 0xc1, 0x34, 0xf8, 0x45, 0x83, 0xe9, 0xbe, 0xed, 0x8e, 0x5b, 0xf5, 0x5f, 0x43,
	0xad, 0x3a, 0x1d, 0xd9, 0x49, 0xa4, 0x4d, 0x1f, 0xc6, 0xda, 0x74, 0x26, 0x0a, 0x1b, 0x6e, 0xd1,
	0xff, 0x0e, 0xb7, 0xa8, 0x1e, 0x43, 0xf6, 0xdb, 0xf3, 0x19, 0x90, 0x58, 0x48, 0x32, 0x35, 0xdb,
	0x23, 0xad, 0xb9, 0x10, 0xcf, 0xcd, 0x48, 0x5b, 0x9e, 0x43, 0x56, 0x36, 0x2d, 0xc7, 0xb6, 0x7c,
	0xcd, 0x3a, 0x6d, 0x43, 0xce, 0x97, 0xef, 0x98, 0x2d, 0x7e, 0xc5, 0x5b, 0x18, 0x7c, 0xb1, 0x1f,
	0x15, 0x7a, 0x3b, 0x90, 0x06, 0x0a, 0x7e, 0xff, 0xd9, 0xf8, 0x00, 0xa6, 0xd1, 0x12, 0xa9, 0xe4,
	0x66, 0xbc, 0x92, 0x7a, 0xd4, 0x05, 0x26, 0xb0, 0x5f, 0xc4, 0xaf, 0x35, 0x28, 0x04, 0xef, 0xdf,
	0x71, 0x09, 0xdf, 0x24, 0x98, 0x32, 0xe8, 0x43, 0x9b, 0x51, 0xa7, 0xd9, 0x78, 0xf2, 0xe7, 0xa2,
	0x4e, 0xc6, 0xa4, 0xfe, 0x65, 0x12, 0xa6, 0x6b, 0x6e, 0x37, 0x9a, 0x16, 0xf2, 0x04, 0x0a, 0xae,
	0xed, 0xf2, 0x96, 0xed, 0x70, 0x53, 0xc6, 0x12, 0x04, 0xb6, 0x12, 0x8e, 0xd8, 0x00, 0x5e, 0x0f,
	0x30, 0x27, 0x3d, 0x97, 0xd3, 0xbc, 0x1b, 0x91, 0xe4, 0xb7, 0x5c, 0xf8, 0xac, 0x89, 0xe7, 0x47,
	0xd5, 0x4a, 0x69, 0x94, 0xab, 0x16, 0xd1, 0x21, 0xd9, 0x76, 0xbb, 0x41, 0xe3, 0xcb, 0x47, 0xb2,
	0x00, 0x53, 0xdc, 0x91, 0x87, 0x47, 0x24, 0x5c, 0x86, 0x06, 0x92, 0x9c, 0x71, 0x2a, 0x29, 0x81,
	0x55, 0xcd, 0x4a, 0x95, 0xa8, 0x8a, 0x82, 0xac, 0x40, 0xd6, 0xbd, 0xb8, 0x32, 0x71, 0x5f, 0xc1,
	0x9c, 0xcc, 0xb8, 0x17, 0x57, 0x65, 0x29, 0x87, 0x46, 0x9c, 0x22, 0xc1, 0x80, 0x94, 0x46, 0x9c,
	0x1f, 0x72, 0x87, 0xd7, 0xcc, 0x6f, 0x5c, 0x98, 0x6e, 0x03, 0x67, 0x62, 0x8a, 0xa6, 0x51, 0xae,
	0x37, 0xe4, 0x7b, 0x67, 0x4c, 0x70, 0x13, 0xaf, 0x1a, 0x59, 0xb4, 0x65, 0xa4, 0x62, 0x47, 0x5e,
	0x37, 0x56, 0x40, 0x1d, 0x74, 0x4d, 0x79, 0x62, 0x03, 0xe5, 0x14, 0x15, 0xcf, 0x79, 0x8f, 0x18,
	0x90, 0xb7, 0x1d, 0xe1, 0x7b, 0x5d, 0x3c, 0x88, 0x89, 0x52, 0x4e, 0x4d, 0xee, 0xa8, 0x4e, 0x7e,
	0x75, 0xae, 0x3d, 0xe6, 0x96, 0xf2, 0x68, 0xc3, 0x67, 0x79, 0x40, 0xf2, 0xb8, 0xe0, 0x7e, 0xa9,
	0x80, 0x4a, 0x25, 0xc8, 0x0b, 0x4b, 0xac, 0x32, 0xb7, 0x5e, 0x58, 0x62, 0xd8, 0x01, 0x6d, 0xbf,
	0x04, 0x7d, 0x60, 0xbb, 0x63, 0xe2, 0xae, 0x05, 0xb7, 0x43, 0x33, 0x7a, 0xb0, 0x05, 0x54, 0x55,
	0xa5, 0x46, 0xde, 0x53, 0xe2, 0x8b, 0xdf, 0x7e, 0x4f, 0x89, 0xa3, 0x07, 0x5c, 0xdd, 0xac, 0x03,
	0x0c, 0x7a, 0x81, 0xcc, 0x81, 0x7e, 0x42, 0x77, 0x9e, 0x56, 0xcc, 0x83, 0xca, 0x47, 0x95, 0x03,
	0xf3, 0xf0, 0xe8, 0xb0, 0xa2, 0x4f, 0x90, 0x79, 0x98, 0x89, 0x6a, 0x2b, 0x94, 0x1e, 0x51, 0x5d,
	0x8b, 0xab, 0xcb, 0x95, 0xdd, 0xd3, 0x7d, 0x3d, 0xb1, 0xf9, 0x9d, 0x06, 0x73, 0xe3, 0xe8, 0x4c,
	0x56, 0x60, 0xb1, 0x56, 0x3f, 0x35, 0xd5, 0x3b, 0xf5, 0x6a, 0xbd, 0x72, 0x50, 0x3d, 0xac, 0x84,
	0x6b, 0x3c, 0x80, 0xfb, 0x63, 0x8c, 0xf5, 0x77, 0xcd, 0xea, 0xe1, 0x3e, 0xad, 0x1c, 0x1f, 0xeb,
	0x1a, 0x59, 0x87, 0x7b, 0xe3, 0x21, 0x15, 0x85, 0x48, 0xdc, 0x88, 0xa8, 0x9b, 0xf4, 0xe3, 0x72,
	0x6d, 0x47, 0x4f, 0xde, 0x82, 0x38, 0x41, 0x44, 0x6a, 0xfb, 0xaf, 0x14, 0x4c, 0x2a, 0xae, 0xef,
	0x41, 0x2e, 0x3c, 0xa7, 0xef, 0x73, 0x9f, 0x2c, 0x8d, 0xbf, 0xc4, 0xd6, 0x44, 0x73, 0x79, 0xf9,
	0x86, 0xfb, 0x60, 0x4d, 0x34, 0x8d, 0x09, 0x52, 0x85, 0x62, 0x68, 0x38, 0x75, 0x2d, 0xe6, 0xf3,
	0x37, 0x77, 0xf5, 0x04, 0xb2, 0xea, 0x5a, 0x21, 0x37, 0xb4, 0x38, 0xee, 0xd2, 0x25, 0x7d, 0x94,
	0xc6, 0xde, 0x40, 0x94, 0x87, 0xa7, 0x78, 0x43, 0xe8, 0x78, 0xbd, 0x60, 0x2b, 0x6f, 0xe4, 0xa4,
	0x0a, 0xc5, 0xb0, 0xc2, 0xb1, 0x88, 0x46, 0x9b, 0xab, 0x1f, 0xd1, 0x18, 0xca, 0x1a, 0x13, 0xe4,
	0x00, 0x72, 0x91, 0xe3, 0x25, 0xb9, 0x77, 0xe3, 0x2d, 0x40, 0xba, 0xba, 0x7f, 0xf3, 0x81, 0x34,
	0xcc, 0x4f, 0x3a, 0xf8, 0x22, 0x92, 0xd2, 0xd8, 0xd3, 0x83, 0xf4, 0xb2, 0x34, 0xfe, 0xdb, 0x19,
	0x7a, 0xc8, 0x45, 0xe3, 0x5a, 0x18, 0x1e, 0xf5, 0x7d, 0x1f, 0x8b, 0xe3, 0x3e, 0x01, 0xca, 0xc3,
	0x63, 0xc8, 0xa0, 0x56, 0x6e, 0x22, 0x1f, 0xb4, 0x7f, 0xa5, 0xed, 0xfa, 0xbd, 0x5b, 0x5e, 0xda,
	0x5d, 0xfe, 0xe9, 0xd5, 0xaa, 0xf6, 0xf3, 0xab, 0x55, 0xed, 0xb7, 0x57, 0xab, 0xda, 0xcb, 0x3f,
	0x56, 0x27, 0x3e, 0xcd, 0x5c, 0xb0, 0x16, 0xfe, 0x15, 0x74, 0x36, 0x85, 0x3f, 0x8f, 0xff, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0x5f, 0xf1, 0x10, 0xe1, 0x34, 0x12, 0x00, 0x00,
}
