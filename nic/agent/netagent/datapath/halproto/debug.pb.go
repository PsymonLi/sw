// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Debug table and register Read/Write operation
type DebugOperationType int32

const (
	DebugOperationType_DEBUG_OP_TYPE_NONE  DebugOperationType = 0
	DebugOperationType_DEBUG_OP_TYPE_READ  DebugOperationType = 1
	DebugOperationType_DEBUG_OP_TYPE_WRITE DebugOperationType = 2
)

var DebugOperationType_name = map[int32]string{
	0: "DEBUG_OP_TYPE_NONE",
	1: "DEBUG_OP_TYPE_READ",
	2: "DEBUG_OP_TYPE_WRITE",
}
var DebugOperationType_value = map[string]int32{
	"DEBUG_OP_TYPE_NONE":  0,
	"DEBUG_OP_TYPE_READ":  1,
	"DEBUG_OP_TYPE_WRITE": 2,
}

func (x DebugOperationType) String() string {
	return proto.EnumName(DebugOperationType_name, int32(x))
}
func (DebugOperationType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

// Debug table or register
type DebugMemoryType int32

const (
	DebugMemoryType_DEBUG_MEM_TYPE_NONE  DebugMemoryType = 0
	DebugMemoryType_DEBUG_MEM_TYPE_TABLE DebugMemoryType = 1
	DebugMemoryType_DEBUG_MEM_TYPE_REG   DebugMemoryType = 2
)

var DebugMemoryType_name = map[int32]string{
	0: "DEBUG_MEM_TYPE_NONE",
	1: "DEBUG_MEM_TYPE_TABLE",
	2: "DEBUG_MEM_TYPE_REG",
}
var DebugMemoryType_value = map[string]int32{
	"DEBUG_MEM_TYPE_NONE":  0,
	"DEBUG_MEM_TYPE_TABLE": 1,
	"DEBUG_MEM_TYPE_REG":   2,
}

func (x DebugMemoryType) String() string {
	return proto.EnumName(DebugMemoryType_name, int32(x))
}
func (DebugMemoryType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{1} }

// DebugKeyHandle uniquely identfies the table/register to access
type DebugKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*DebugKeyHandle_TableId
	//	*DebugKeyHandle_TableName
	//	*DebugKeyHandle_RegId
	//	*DebugKeyHandle_RegName
	//	*DebugKeyHandle_BlockName
	KeyOrHandle isDebugKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *DebugKeyHandle) Reset()                    { *m = DebugKeyHandle{} }
func (m *DebugKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*DebugKeyHandle) ProtoMessage()               {}
func (*DebugKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

type isDebugKeyHandle_KeyOrHandle interface {
	isDebugKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DebugKeyHandle_TableId struct {
	TableId uint32 `protobuf:"fixed32,1,opt,name=table_id,json=tableId,proto3,oneof"`
}
type DebugKeyHandle_TableName struct {
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3,oneof"`
}
type DebugKeyHandle_RegId struct {
	RegId uint32 `protobuf:"fixed32,3,opt,name=reg_id,json=regId,proto3,oneof"`
}
type DebugKeyHandle_RegName struct {
	RegName string `protobuf:"bytes,4,opt,name=reg_name,json=regName,proto3,oneof"`
}
type DebugKeyHandle_BlockName struct {
	BlockName string `protobuf:"bytes,5,opt,name=block_name,json=blockName,proto3,oneof"`
}

func (*DebugKeyHandle_TableId) isDebugKeyHandle_KeyOrHandle()   {}
func (*DebugKeyHandle_TableName) isDebugKeyHandle_KeyOrHandle() {}
func (*DebugKeyHandle_RegId) isDebugKeyHandle_KeyOrHandle()     {}
func (*DebugKeyHandle_RegName) isDebugKeyHandle_KeyOrHandle()   {}
func (*DebugKeyHandle_BlockName) isDebugKeyHandle_KeyOrHandle() {}

func (m *DebugKeyHandle) GetKeyOrHandle() isDebugKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *DebugKeyHandle) GetTableId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*DebugKeyHandle_TableId); ok {
		return x.TableId
	}
	return 0
}

func (m *DebugKeyHandle) GetTableName() string {
	if x, ok := m.GetKeyOrHandle().(*DebugKeyHandle_TableName); ok {
		return x.TableName
	}
	return ""
}

func (m *DebugKeyHandle) GetRegId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*DebugKeyHandle_RegId); ok {
		return x.RegId
	}
	return 0
}

func (m *DebugKeyHandle) GetRegName() string {
	if x, ok := m.GetKeyOrHandle().(*DebugKeyHandle_RegName); ok {
		return x.RegName
	}
	return ""
}

func (m *DebugKeyHandle) GetBlockName() string {
	if x, ok := m.GetKeyOrHandle().(*DebugKeyHandle_BlockName); ok {
		return x.BlockName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DebugKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DebugKeyHandle_OneofMarshaler, _DebugKeyHandle_OneofUnmarshaler, _DebugKeyHandle_OneofSizer, []interface{}{
		(*DebugKeyHandle_TableId)(nil),
		(*DebugKeyHandle_TableName)(nil),
		(*DebugKeyHandle_RegId)(nil),
		(*DebugKeyHandle_RegName)(nil),
		(*DebugKeyHandle_BlockName)(nil),
	}
}

func _DebugKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DebugKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *DebugKeyHandle_TableId:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.TableId))
	case *DebugKeyHandle_TableName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.TableName)
	case *DebugKeyHandle_RegId:
		_ = b.EncodeVarint(3<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.RegId))
	case *DebugKeyHandle_RegName:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.RegName)
	case *DebugKeyHandle_BlockName:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.BlockName)
	case nil:
	default:
		return fmt.Errorf("DebugKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _DebugKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DebugKeyHandle)
	switch tag {
	case 1: // key_or_handle.table_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.KeyOrHandle = &DebugKeyHandle_TableId{uint32(x)}
		return true, err
	case 2: // key_or_handle.table_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.KeyOrHandle = &DebugKeyHandle_TableName{x}
		return true, err
	case 3: // key_or_handle.reg_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.KeyOrHandle = &DebugKeyHandle_RegId{uint32(x)}
		return true, err
	case 4: // key_or_handle.reg_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.KeyOrHandle = &DebugKeyHandle_RegName{x}
		return true, err
	case 5: // key_or_handle.block_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.KeyOrHandle = &DebugKeyHandle_BlockName{x}
		return true, err
	default:
		return false, nil
	}
}

func _DebugKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DebugKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *DebugKeyHandle_TableId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *DebugKeyHandle_TableName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TableName)))
		n += len(x.TableName)
	case *DebugKeyHandle_RegId:
		n += proto.SizeVarint(3<<3 | proto.WireFixed32)
		n += 4
	case *DebugKeyHandle_RegName:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RegName)))
		n += len(x.RegName)
	case *DebugKeyHandle_BlockName:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BlockName)))
		n += len(x.BlockName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// DebugSpec msg is used to pass parameters for the Debug
type DebugSpec struct {
	KeyOrHandle *DebugKeyHandle    `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	OpnType     DebugOperationType `protobuf:"varint,2,opt,name=opn_type,json=opnType,proto3,enum=debug.DebugOperationType" json:"opn_type,omitempty"`
	MemType     DebugMemoryType    `protobuf:"varint,3,opt,name=mem_type,json=memType,proto3,enum=debug.DebugMemoryType" json:"mem_type,omitempty"`
	Addr        uint64             `protobuf:"varint,4,opt,name=addr,proto3" json:"addr,omitempty"`
	RegData     uint32             `protobuf:"varint,5,opt,name=reg_data,json=regData,proto3" json:"reg_data,omitempty"`
	Index       uint32             `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	Swkey       []byte             `protobuf:"bytes,7,opt,name=swkey,proto3" json:"swkey,omitempty"`
	SwkeyMask   []byte             `protobuf:"bytes,8,opt,name=swkey_mask,json=swkeyMask,proto3" json:"swkey_mask,omitempty"`
	Actiondata  []byte             `protobuf:"bytes,9,opt,name=actiondata,proto3" json:"actiondata,omitempty"`
}

func (m *DebugSpec) Reset()                    { *m = DebugSpec{} }
func (m *DebugSpec) String() string            { return proto.CompactTextString(m) }
func (*DebugSpec) ProtoMessage()               {}
func (*DebugSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{1} }

func (m *DebugSpec) GetKeyOrHandle() *DebugKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *DebugSpec) GetOpnType() DebugOperationType {
	if m != nil {
		return m.OpnType
	}
	return DebugOperationType_DEBUG_OP_TYPE_NONE
}

func (m *DebugSpec) GetMemType() DebugMemoryType {
	if m != nil {
		return m.MemType
	}
	return DebugMemoryType_DEBUG_MEM_TYPE_NONE
}

func (m *DebugSpec) GetAddr() uint64 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *DebugSpec) GetRegData() uint32 {
	if m != nil {
		return m.RegData
	}
	return 0
}

func (m *DebugSpec) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *DebugSpec) GetSwkey() []byte {
	if m != nil {
		return m.Swkey
	}
	return nil
}

func (m *DebugSpec) GetSwkeyMask() []byte {
	if m != nil {
		return m.SwkeyMask
	}
	return nil
}

func (m *DebugSpec) GetActiondata() []byte {
	if m != nil {
		return m.Actiondata
	}
	return nil
}

// Batched DEBUG request message
type DebugRequestMsg struct {
	Request []*DebugSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *DebugRequestMsg) Reset()                    { *m = DebugRequestMsg{} }
func (m *DebugRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*DebugRequestMsg) ProtoMessage()               {}
func (*DebugRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{2} }

func (m *DebugRequestMsg) GetRequest() []*DebugSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// Captures the return data for registers
type RegisterData struct {
	RegName string `protobuf:"bytes,1,opt,name=reg_name,json=regName,proto3" json:"reg_name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RegisterData) Reset()                    { *m = RegisterData{} }
func (m *RegisterData) String() string            { return proto.CompactTextString(m) }
func (*RegisterData) ProtoMessage()               {}
func (*RegisterData) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{3} }

func (m *RegisterData) GetRegName() string {
	if m != nil {
		return m.RegName
	}
	return ""
}

func (m *RegisterData) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisterData) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// DEBUG response - captures keys and data of table as well as registers
type DebugResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *DebugSpec      `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Data      []*RegisterData `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *DebugResponse) Reset()                    { *m = DebugResponse{} }
func (m *DebugResponse) String() string            { return proto.CompactTextString(m) }
func (*DebugResponse) ProtoMessage()               {}
func (*DebugResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{4} }

func (m *DebugResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DebugResponse) GetSpec() *DebugSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DebugResponse) GetData() []*RegisterData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Batched DEBUG response msg
type DebugResponseMsg struct {
	Response []*DebugResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *DebugResponseMsg) Reset()                    { *m = DebugResponseMsg{} }
func (m *DebugResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*DebugResponseMsg) ProtoMessage()               {}
func (*DebugResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{5} }

func (m *DebugResponseMsg) GetResponse() []*DebugResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MemTrackSpec struct {
	AllocId uint32 `protobuf:"varint,1,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
}

func (m *MemTrackSpec) Reset()                    { *m = MemTrackSpec{} }
func (m *MemTrackSpec) String() string            { return proto.CompactTextString(m) }
func (*MemTrackSpec) ProtoMessage()               {}
func (*MemTrackSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{6} }

func (m *MemTrackSpec) GetAllocId() uint32 {
	if m != nil {
		return m.AllocId
	}
	return 0
}

// MemTrackGetRequest is request msg with allocation id that info is requested for
type MemTrackGetRequest struct {
	Meta *ObjectMeta   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec *MemTrackSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *MemTrackGetRequest) Reset()                    { *m = MemTrackGetRequest{} }
func (m *MemTrackGetRequest) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetRequest) ProtoMessage()               {}
func (*MemTrackGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{7} }

func (m *MemTrackGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MemTrackGetRequest) GetSpec() *MemTrackSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// MemTrackGetRequestMsg is batched MemTrackGetRequest
type MemTrackGetRequestMsg struct {
	Request []*MemTrackGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MemTrackGetRequestMsg) Reset()                    { *m = MemTrackGetRequestMsg{} }
func (m *MemTrackGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetRequestMsg) ProtoMessage()               {}
func (*MemTrackGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{8} }

func (m *MemTrackGetRequestMsg) GetRequest() []*MemTrackGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// operational status of memory tracker object
type MemTrackStatus struct {
}

func (m *MemTrackStatus) Reset()                    { *m = MemTrackStatus{} }
func (m *MemTrackStatus) String() string            { return proto.CompactTextString(m) }
func (*MemTrackStatus) ProtoMessage()               {}
func (*MemTrackStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{9} }

// stats per memory tracker object
type MemTrackStats struct {
	NumAllocs uint32 `protobuf:"varint,1,opt,name=num_allocs,json=numAllocs,proto3" json:"num_allocs,omitempty"`
	NumFrees  uint32 `protobuf:"varint,2,opt,name=num_frees,json=numFrees,proto3" json:"num_frees,omitempty"`
}

func (m *MemTrackStats) Reset()                    { *m = MemTrackStats{} }
func (m *MemTrackStats) String() string            { return proto.CompactTextString(m) }
func (*MemTrackStats) ProtoMessage()               {}
func (*MemTrackStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{10} }

func (m *MemTrackStats) GetNumAllocs() uint32 {
	if m != nil {
		return m.NumAllocs
	}
	return 0
}

func (m *MemTrackStats) GetNumFrees() uint32 {
	if m != nil {
		return m.NumFrees
	}
	return 0
}

// MemTrackGetResponse captures debug information per allocation id
type MemTrackGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *MemTrackSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *MemTrackStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *MemTrackStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *MemTrackGetResponse) Reset()                    { *m = MemTrackGetResponse{} }
func (m *MemTrackGetResponse) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetResponse) ProtoMessage()               {}
func (*MemTrackGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{11} }

func (m *MemTrackGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MemTrackGetResponse) GetSpec() *MemTrackSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MemTrackGetResponse) GetStatus() *MemTrackStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MemTrackGetResponse) GetStats() *MemTrackStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// MemTrackGetResponseMsg is batched MemTrackGetResponse
type MemTrackGetResponseMsg struct {
	Response []*MemTrackGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MemTrackGetResponseMsg) Reset()                    { *m = MemTrackGetResponseMsg{} }
func (m *MemTrackGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetResponseMsg) ProtoMessage()               {}
func (*MemTrackGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{12} }

func (m *MemTrackGetResponseMsg) GetResponse() []*MemTrackGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SlabSpec identifies a slab
type SlabSpec struct {
	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id               uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ElementSize      uint32 `protobuf:"varint,3,opt,name=element_size,json=elementSize,proto3" json:"element_size,omitempty"`
	ElementsPerBlock uint32 `protobuf:"varint,4,opt,name=elements_per_block,json=elementsPerBlock,proto3" json:"elements_per_block,omitempty"`
	ThreadSafe       bool   `protobuf:"varint,5,opt,name=thread_safe,json=threadSafe,proto3" json:"thread_safe,omitempty"`
	GrowOnDemand     bool   `protobuf:"varint,6,opt,name=grow_on_demand,json=growOnDemand,proto3" json:"grow_on_demand,omitempty"`
	DelayDelete      bool   `protobuf:"varint,7,opt,name=delay_delete,json=delayDelete,proto3" json:"delay_delete,omitempty"`
	ZeroOnAllocation bool   `protobuf:"varint,8,opt,name=zero_on_allocation,json=zeroOnAllocation,proto3" json:"zero_on_allocation,omitempty"`
}

func (m *SlabSpec) Reset()                    { *m = SlabSpec{} }
func (m *SlabSpec) String() string            { return proto.CompactTextString(m) }
func (*SlabSpec) ProtoMessage()               {}
func (*SlabSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{13} }

func (m *SlabSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SlabSpec) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SlabSpec) GetElementSize() uint32 {
	if m != nil {
		return m.ElementSize
	}
	return 0
}

func (m *SlabSpec) GetElementsPerBlock() uint32 {
	if m != nil {
		return m.ElementsPerBlock
	}
	return 0
}

func (m *SlabSpec) GetThreadSafe() bool {
	if m != nil {
		return m.ThreadSafe
	}
	return false
}

func (m *SlabSpec) GetGrowOnDemand() bool {
	if m != nil {
		return m.GrowOnDemand
	}
	return false
}

func (m *SlabSpec) GetDelayDelete() bool {
	if m != nil {
		return m.DelayDelete
	}
	return false
}

func (m *SlabSpec) GetZeroOnAllocation() bool {
	if m != nil {
		return m.ZeroOnAllocation
	}
	return false
}

// operational status of slab, if any
type SlabStatus struct {
}

func (m *SlabStatus) Reset()                    { *m = SlabStatus{} }
func (m *SlabStatus) String() string            { return proto.CompactTextString(m) }
func (*SlabStatus) ProtoMessage()               {}
func (*SlabStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{14} }

// per slab statistics
type SlabStats struct {
	NumElementsInUse uint32 `protobuf:"varint,1,opt,name=num_elements_in_use,json=numElementsInUse,proto3" json:"num_elements_in_use,omitempty"`
	NumAllocs        uint32 `protobuf:"varint,2,opt,name=num_allocs,json=numAllocs,proto3" json:"num_allocs,omitempty"`
	NumFrees         uint32 `protobuf:"varint,3,opt,name=num_frees,json=numFrees,proto3" json:"num_frees,omitempty"`
	NumAllocErrors   uint32 `protobuf:"varint,4,opt,name=num_alloc_errors,json=numAllocErrors,proto3" json:"num_alloc_errors,omitempty"`
	NumBlocks        uint32 `protobuf:"varint,5,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
}

func (m *SlabStats) Reset()                    { *m = SlabStats{} }
func (m *SlabStats) String() string            { return proto.CompactTextString(m) }
func (*SlabStats) ProtoMessage()               {}
func (*SlabStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{15} }

func (m *SlabStats) GetNumElementsInUse() uint32 {
	if m != nil {
		return m.NumElementsInUse
	}
	return 0
}

func (m *SlabStats) GetNumAllocs() uint32 {
	if m != nil {
		return m.NumAllocs
	}
	return 0
}

func (m *SlabStats) GetNumFrees() uint32 {
	if m != nil {
		return m.NumFrees
	}
	return 0
}

func (m *SlabStats) GetNumAllocErrors() uint32 {
	if m != nil {
		return m.NumAllocErrors
	}
	return 0
}

func (m *SlabStats) GetNumBlocks() uint32 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

// SlabGetRequest is GET request per slab
type SlabGetRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Id   uint32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SlabGetRequest) Reset()                    { *m = SlabGetRequest{} }
func (m *SlabGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SlabGetRequest) ProtoMessage()               {}
func (*SlabGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{16} }

func (m *SlabGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SlabGetRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// SlabGetResponse is batched GET request
type SlabGetRequestMsg struct {
	Request []*SlabGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SlabGetRequestMsg) Reset()                    { *m = SlabGetRequestMsg{} }
func (m *SlabGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SlabGetRequestMsg) ProtoMessage()               {}
func (*SlabGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{17} }

func (m *SlabGetRequestMsg) GetRequest() []*SlabGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SlabGetResponse captures all information about a slab
type SlabGetResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *SlabSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SlabStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SlabStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SlabGetResponse) Reset()                    { *m = SlabGetResponse{} }
func (m *SlabGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SlabGetResponse) ProtoMessage()               {}
func (*SlabGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{18} }

func (m *SlabGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SlabGetResponse) GetSpec() *SlabSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SlabGetResponse) GetStatus() *SlabStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SlabGetResponse) GetStats() *SlabStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SlabGetResponseMsg is batched response for GET operation
type SlabGetResponseMsg struct {
	Response []*SlabGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SlabGetResponseMsg) Reset()                    { *m = SlabGetResponseMsg{} }
func (m *SlabGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SlabGetResponseMsg) ProtoMessage()               {}
func (*SlabGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{19} }

func (m *SlabGetResponseMsg) GetResponse() []*SlabGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*DebugKeyHandle)(nil), "debug.DebugKeyHandle")
	proto.RegisterType((*DebugSpec)(nil), "debug.DebugSpec")
	proto.RegisterType((*DebugRequestMsg)(nil), "debug.DebugRequestMsg")
	proto.RegisterType((*RegisterData)(nil), "debug.RegisterData")
	proto.RegisterType((*DebugResponse)(nil), "debug.DebugResponse")
	proto.RegisterType((*DebugResponseMsg)(nil), "debug.DebugResponseMsg")
	proto.RegisterType((*MemTrackSpec)(nil), "debug.MemTrackSpec")
	proto.RegisterType((*MemTrackGetRequest)(nil), "debug.MemTrackGetRequest")
	proto.RegisterType((*MemTrackGetRequestMsg)(nil), "debug.MemTrackGetRequestMsg")
	proto.RegisterType((*MemTrackStatus)(nil), "debug.MemTrackStatus")
	proto.RegisterType((*MemTrackStats)(nil), "debug.MemTrackStats")
	proto.RegisterType((*MemTrackGetResponse)(nil), "debug.MemTrackGetResponse")
	proto.RegisterType((*MemTrackGetResponseMsg)(nil), "debug.MemTrackGetResponseMsg")
	proto.RegisterType((*SlabSpec)(nil), "debug.SlabSpec")
	proto.RegisterType((*SlabStatus)(nil), "debug.SlabStatus")
	proto.RegisterType((*SlabStats)(nil), "debug.SlabStats")
	proto.RegisterType((*SlabGetRequest)(nil), "debug.SlabGetRequest")
	proto.RegisterType((*SlabGetRequestMsg)(nil), "debug.SlabGetRequestMsg")
	proto.RegisterType((*SlabGetResponse)(nil), "debug.SlabGetResponse")
	proto.RegisterType((*SlabGetResponseMsg)(nil), "debug.SlabGetResponseMsg")
	proto.RegisterEnum("debug.DebugOperationType", DebugOperationType_name, DebugOperationType_value)
	proto.RegisterEnum("debug.DebugMemoryType", DebugMemoryType_name, DebugMemoryType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Debug service

type DebugClient interface {
	DebugInvoke(ctx context.Context, in *DebugRequestMsg, opts ...grpc.CallOption) (*DebugResponseMsg, error)
	MemTrackGet(ctx context.Context, in *MemTrackGetRequestMsg, opts ...grpc.CallOption) (*MemTrackGetResponseMsg, error)
	SlabGet(ctx context.Context, in *SlabGetRequestMsg, opts ...grpc.CallOption) (*SlabGetResponseMsg, error)
}

type debugClient struct {
	cc *grpc.ClientConn
}

func NewDebugClient(cc *grpc.ClientConn) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) DebugInvoke(ctx context.Context, in *DebugRequestMsg, opts ...grpc.CallOption) (*DebugResponseMsg, error) {
	out := new(DebugResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/DebugInvoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemTrackGet(ctx context.Context, in *MemTrackGetRequestMsg, opts ...grpc.CallOption) (*MemTrackGetResponseMsg, error) {
	out := new(MemTrackGetResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MemTrackGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SlabGet(ctx context.Context, in *SlabGetRequestMsg, opts ...grpc.CallOption) (*SlabGetResponseMsg, error) {
	out := new(SlabGetResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/SlabGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Debug service

type DebugServer interface {
	DebugInvoke(context.Context, *DebugRequestMsg) (*DebugResponseMsg, error)
	MemTrackGet(context.Context, *MemTrackGetRequestMsg) (*MemTrackGetResponseMsg, error)
	SlabGet(context.Context, *SlabGetRequestMsg) (*SlabGetResponseMsg, error)
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_DebugInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).DebugInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/DebugInvoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).DebugInvoke(ctx, req.(*DebugRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemTrackGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemTrackGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemTrackGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemTrackGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemTrackGet(ctx, req.(*MemTrackGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SlabGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlabGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SlabGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/SlabGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SlabGet(ctx, req.(*SlabGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debug.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DebugInvoke",
			Handler:    _Debug_DebugInvoke_Handler,
		},
		{
			MethodName: "MemTrackGet",
			Handler:    _Debug_MemTrackGet_Handler,
		},
		{
			MethodName: "SlabGet",
			Handler:    _Debug_SlabGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debug.proto",
}

func (m *DebugKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *DebugKeyHandle_TableId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TableId))
	i += 4
	return i, nil
}
func (m *DebugKeyHandle_TableName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintDebug(dAtA, i, uint64(len(m.TableName)))
	i += copy(dAtA[i:], m.TableName)
	return i, nil
}
func (m *DebugKeyHandle_RegId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1d
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.RegId))
	i += 4
	return i, nil
}
func (m *DebugKeyHandle_RegName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x22
	i++
	i = encodeVarintDebug(dAtA, i, uint64(len(m.RegName)))
	i += copy(dAtA[i:], m.RegName)
	return i, nil
}
func (m *DebugKeyHandle_BlockName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x2a
	i++
	i = encodeVarintDebug(dAtA, i, uint64(len(m.BlockName)))
	i += copy(dAtA[i:], m.BlockName)
	return i, nil
}
func (m *DebugSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.OpnType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.OpnType))
	}
	if m.MemType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.MemType))
	}
	if m.Addr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Addr))
	}
	if m.RegData != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.RegData))
	}
	if m.Index != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Index))
	}
	if len(m.Swkey) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Swkey)))
		i += copy(dAtA[i:], m.Swkey)
	}
	if len(m.SwkeyMask) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.SwkeyMask)))
		i += copy(dAtA[i:], m.SwkeyMask)
	}
	if len(m.Actiondata) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Actiondata)))
		i += copy(dAtA[i:], m.Actiondata)
	}
	return i, nil
}

func (m *DebugRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RegisterData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RegName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.RegName)))
		i += copy(dAtA[i:], m.RegName)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *DebugResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n3, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DebugResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemTrackSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllocId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.AllocId))
	}
	return i, nil
}

func (m *MemTrackGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Meta.Size()))
		n4, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n5, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *MemTrackGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemTrackStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MemTrackStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumAllocs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumFrees))
	}
	return i, nil
}

func (m *MemTrackGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n6, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n7, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Stats.Size()))
		n8, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *MemTrackGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SlabSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Id))
	}
	if m.ElementSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ElementSize))
	}
	if m.ElementsPerBlock != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ElementsPerBlock))
	}
	if m.ThreadSafe {
		dAtA[i] = 0x28
		i++
		if m.ThreadSafe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GrowOnDemand {
		dAtA[i] = 0x30
		i++
		if m.GrowOnDemand {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DelayDelete {
		dAtA[i] = 0x38
		i++
		if m.DelayDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ZeroOnAllocation {
		dAtA[i] = 0x40
		i++
		if m.ZeroOnAllocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SlabStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SlabStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumElementsInUse != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumElementsInUse))
	}
	if m.NumAllocs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumFrees))
	}
	if m.NumAllocErrors != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumAllocErrors))
	}
	if m.NumBlocks != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumBlocks))
	}
	return i, nil
}

func (m *SlabGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Meta.Size()))
		n9, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *SlabGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SlabGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n10, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Stats.Size()))
		n12, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *SlabGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintDebug(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DebugKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *DebugKeyHandle_TableId) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *DebugKeyHandle_TableName) Size() (n int) {
	var l int
	_ = l
	l = len(m.TableName)
	n += 1 + l + sovDebug(uint64(l))
	return n
}
func (m *DebugKeyHandle_RegId) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *DebugKeyHandle_RegName) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegName)
	n += 1 + l + sovDebug(uint64(l))
	return n
}
func (m *DebugKeyHandle_BlockName) Size() (n int) {
	var l int
	_ = l
	l = len(m.BlockName)
	n += 1 + l + sovDebug(uint64(l))
	return n
}
func (m *DebugSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.OpnType != 0 {
		n += 1 + sovDebug(uint64(m.OpnType))
	}
	if m.MemType != 0 {
		n += 1 + sovDebug(uint64(m.MemType))
	}
	if m.Addr != 0 {
		n += 1 + sovDebug(uint64(m.Addr))
	}
	if m.RegData != 0 {
		n += 1 + sovDebug(uint64(m.RegData))
	}
	if m.Index != 0 {
		n += 1 + sovDebug(uint64(m.Index))
	}
	l = len(m.Swkey)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.SwkeyMask)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Actiondata)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *DebugRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *RegisterData) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegName)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *DebugResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *DebugResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemTrackSpec) Size() (n int) {
	var l int
	_ = l
	if m.AllocId != 0 {
		n += 1 + sovDebug(uint64(m.AllocId))
	}
	return n
}

func (m *MemTrackGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemTrackGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemTrackStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MemTrackStats) Size() (n int) {
	var l int
	_ = l
	if m.NumAllocs != 0 {
		n += 1 + sovDebug(uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		n += 1 + sovDebug(uint64(m.NumFrees))
	}
	return n
}

func (m *MemTrackGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemTrackGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SlabSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDebug(uint64(m.Id))
	}
	if m.ElementSize != 0 {
		n += 1 + sovDebug(uint64(m.ElementSize))
	}
	if m.ElementsPerBlock != 0 {
		n += 1 + sovDebug(uint64(m.ElementsPerBlock))
	}
	if m.ThreadSafe {
		n += 2
	}
	if m.GrowOnDemand {
		n += 2
	}
	if m.DelayDelete {
		n += 2
	}
	if m.ZeroOnAllocation {
		n += 2
	}
	return n
}

func (m *SlabStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SlabStats) Size() (n int) {
	var l int
	_ = l
	if m.NumElementsInUse != 0 {
		n += 1 + sovDebug(uint64(m.NumElementsInUse))
	}
	if m.NumAllocs != 0 {
		n += 1 + sovDebug(uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		n += 1 + sovDebug(uint64(m.NumFrees))
	}
	if m.NumAllocErrors != 0 {
		n += 1 + sovDebug(uint64(m.NumAllocErrors))
	}
	if m.NumBlocks != 0 {
		n += 1 + sovDebug(uint64(m.NumBlocks))
	}
	return n
}

func (m *SlabGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDebug(uint64(m.Id))
	}
	return n
}

func (m *SlabGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SlabGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *SlabGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func sovDebug(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDebug(x uint64) (n int) {
	return sovDebug(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DebugKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.KeyOrHandle = &DebugKeyHandle_TableId{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyOrHandle = &DebugKeyHandle_TableName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.KeyOrHandle = &DebugKeyHandle_RegId{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyOrHandle = &DebugKeyHandle_RegName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyOrHandle = &DebugKeyHandle_BlockName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &DebugKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpnType", wireType)
			}
			m.OpnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpnType |= (DebugOperationType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemType", wireType)
			}
			m.MemType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemType |= (DebugMemoryType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegData", wireType)
			}
			m.RegData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegData |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swkey = append(m.Swkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Swkey == nil {
				m.Swkey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwkeyMask", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwkeyMask = append(m.SwkeyMask[:0], dAtA[iNdEx:postIndex]...)
			if m.SwkeyMask == nil {
				m.SwkeyMask = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actiondata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actiondata = append(m.Actiondata[:0], dAtA[iNdEx:postIndex]...)
			if m.Actiondata == nil {
				m.Actiondata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &DebugSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &DebugSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RegisterData{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &DebugResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocId", wireType)
			}
			m.AllocId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MemTrackSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MemTrackGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocs", wireType)
			}
			m.NumAllocs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFrees", wireType)
			}
			m.NumFrees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFrees |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MemTrackSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MemTrackStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &MemTrackStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MemTrackGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementSize", wireType)
			}
			m.ElementSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElementSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementsPerBlock", wireType)
			}
			m.ElementsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElementsPerBlock |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadSafe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreadSafe = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrowOnDemand", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrowOnDemand = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelayDelete = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroOnAllocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZeroOnAllocation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumElementsInUse", wireType)
			}
			m.NumElementsInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumElementsInUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocs", wireType)
			}
			m.NumAllocs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFrees", wireType)
			}
			m.NumFrees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFrees |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocErrors", wireType)
			}
			m.NumAllocErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocks", wireType)
			}
			m.NumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocks |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SlabGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SlabSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SlabStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SlabStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SlabGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebug(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDebug
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDebug(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDebug = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebug   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("debug.proto", fileDescriptorDebug) }

var fileDescriptorDebug = []byte{
	// 1223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xcf, 0x3a, 0x4e, 0xbc, 0x3e, 0x8e, 0x9d, 0xcd, 0xa4, 0x4d, 0x9d, 0xf4, 0xdf, 0x24, 0xff,
	0xa5, 0x40, 0x1a, 0xd1, 0x02, 0x29, 0x42, 0x02, 0x09, 0xa9, 0x89, 0xec, 0x26, 0x51, 0xeb, 0x3a,
	0x9a, 0xa4, 0x42, 0x45, 0xa0, 0xd5, 0xc4, 0x7b, 0xea, 0x2e, 0xf6, 0x7e, 0xb0, 0xb3, 0x6e, 0x71,
	0x5f, 0x04, 0x9e, 0x80, 0x47, 0xe0, 0x96, 0x5b, 0xb8, 0x83, 0x4b, 0x6e, 0x10, 0x84, 0x37, 0xe0,
	0x09, 0xd0, 0x9c, 0xdd, 0xb5, 0x77, 0x37, 0x2e, 0x02, 0xa9, 0x57, 0x9e, 0xf3, 0x39, 0xe7, 0x77,
	0xe6, 0x77, 0xce, 0x1a, 0x6a, 0x36, 0x9e, 0x8f, 0xfa, 0x77, 0x82, 0xd0, 0x8f, 0x7c, 0xb6, 0x40,
	0xc2, 0x46, 0x2d, 0x1a, 0x07, 0x28, 0x63, 0x9d, 0xf9, 0xbd, 0x06, 0x8d, 0x96, 0x52, 0x3f, 0xc0,
	0xf1, 0x91, 0xf0, 0xec, 0x21, 0xb2, 0xeb, 0xa0, 0x47, 0xe2, 0x7c, 0x88, 0x96, 0x63, 0x37, 0xb5,
	0x6d, 0x6d, 0xa7, 0x72, 0x34, 0xc7, 0x2b, 0xa4, 0x39, 0xb6, 0xd9, 0x16, 0x40, 0x6c, 0xf4, 0x84,
	0x8b, 0xcd, 0xd2, 0xb6, 0xb6, 0x53, 0x3d, 0x9a, 0xe3, 0x55, 0xd2, 0x3d, 0x12, 0x2e, 0xb2, 0x6b,
	0xb0, 0x18, 0x62, 0x5f, 0xc5, 0xce, 0x27, 0xb1, 0x0b, 0x21, 0xf6, 0x8f, 0x6d, 0x95, 0x56, 0x19,
	0x28, 0xae, 0x9c, 0xc4, 0x55, 0x42, 0xec, 0x53, 0xd4, 0x16, 0xc0, 0xf9, 0xd0, 0xef, 0x0d, 0x62,
	0xf3, 0x42, 0x9a, 0x96, 0x74, 0xca, 0xe1, 0x60, 0x19, 0xea, 0x03, 0x1c, 0x5b, 0x7e, 0x68, 0x3d,
	0xa3, 0x2a, 0xcd, 0x9f, 0x4a, 0x50, 0xa5, 0xc2, 0x4f, 0x03, 0xec, 0xb1, 0x8f, 0x0a, 0x66, 0x2a,
	0xbc, 0xb6, 0x77, 0xf5, 0x4e, 0x8c, 0x3f, 0x8f, 0x90, 0xd7, 0x06, 0x38, 0xee, 0x86, 0x09, 0xdc,
	0x0f, 0x40, 0xf7, 0x03, 0xcf, 0x52, 0x4d, 0x21, 0x3c, 0x8d, 0xbd, 0xf5, 0x6c, 0x54, 0x37, 0xc0,
	0x50, 0x44, 0x8e, 0xef, 0x9d, 0x8d, 0x03, 0xe4, 0x15, 0x3f, 0xa0, 0x03, 0x7b, 0x1f, 0x74, 0x17,
	0xdd, 0x38, 0x6a, 0x9e, 0xa2, 0xd6, 0xb2, 0x51, 0x1d, 0x74, 0xfd, 0x70, 0x1c, 0x87, 0xb8, 0xe8,
	0x52, 0x08, 0x83, 0xb2, 0xb0, 0xed, 0x90, 0xc0, 0x97, 0x39, 0x9d, 0xd9, 0x7a, 0xdc, 0x14, 0x5b,
	0x44, 0x82, 0x50, 0xd7, 0xa9, 0x25, 0x2d, 0x11, 0x09, 0x76, 0x05, 0x16, 0x1c, 0xcf, 0xc6, 0xaf,
	0x9b, 0x8b, 0xa4, 0x8f, 0x05, 0xa5, 0x95, 0x2f, 0x06, 0x38, 0x6e, 0x56, 0xb6, 0xb5, 0x9d, 0x25,
	0x1e, 0x0b, 0xec, 0x06, 0x00, 0x1d, 0x2c, 0x57, 0xc8, 0x41, 0x53, 0x27, 0x53, 0x95, 0x34, 0x1d,
	0x21, 0x07, 0x6c, 0x13, 0x40, 0xf4, 0x14, 0x06, 0xba, 0xa7, 0x4a, 0xe6, 0x8c, 0xc6, 0xfc, 0x04,
	0x96, 0xa9, 0x6a, 0x8e, 0x5f, 0x8d, 0x50, 0x46, 0x1d, 0xd9, 0x67, 0xbb, 0x50, 0x09, 0x63, 0xa9,
	0xa9, 0x6d, 0xcf, 0xef, 0xd4, 0xf6, 0x8c, 0x2c, 0x3c, 0xd5, 0x73, 0x9e, 0x3a, 0x98, 0x4f, 0x60,
	0x89, 0x63, 0xdf, 0x91, 0x11, 0x86, 0x54, 0xf9, 0x7a, 0xe6, 0xa5, 0xd5, 0x3b, 0x54, 0xa7, 0xef,
	0xdc, 0x84, 0x8a, 0xc2, 0x8d, 0x52, 0xc6, 0xdc, 0xe1, 0xa9, 0xa8, 0x80, 0x3d, 0x17, 0xc3, 0x51,
	0xdc, 0xcd, 0x2a, 0x8f, 0x05, 0xf3, 0x3b, 0x0d, 0xea, 0x49, 0x69, 0x32, 0xf0, 0x3d, 0x89, 0xec,
	0x3e, 0x80, 0x08, 0x1c, 0x4b, 0x46, 0x22, 0x1a, 0x49, 0x4a, 0xdf, 0xd8, 0x33, 0xee, 0xc4, 0x94,
	0xde, 0x0f, 0x9c, 0x53, 0xd2, 0x1f, 0x5c, 0xfd, 0xeb, 0xb7, 0xad, 0x95, 0xe7, 0xe8, 0x39, 0x3d,
	0xfc, 0x78, 0xea, 0xce, 0xab, 0x22, 0xf5, 0x60, 0x37, 0xa1, 0x2c, 0x03, 0xec, 0x51, 0x19, 0xb3,
	0xd0, 0x91, 0x95, 0xbd, 0x0d, 0x65, 0xea, 0xd9, 0x3c, 0xf5, 0x60, 0x35, 0xf1, 0xca, 0xa2, 0xe5,
	0xe4, 0x60, 0xb6, 0xc0, 0xc8, 0xd5, 0xa9, 0x7a, 0xf8, 0x9e, 0xea, 0x43, 0x2c, 0x26, 0x4d, 0xbc,
	0x92, 0xbd, 0x26, 0x75, 0xe5, 0x13, 0x2f, 0xf3, 0x16, 0x2c, 0x75, 0xd0, 0x3d, 0x0b, 0x45, 0x6f,
	0x40, 0xb4, 0x5e, 0x07, 0x5d, 0x0c, 0x87, 0x7e, 0x2f, 0x1d, 0xc5, 0x3a, 0xaf, 0x90, 0x7c, 0x6c,
	0x9b, 0x36, 0xb0, 0xd4, 0xf5, 0x10, 0xa3, 0xe4, 0xe5, 0xd8, 0x9b, 0x50, 0x76, 0x31, 0x12, 0x09,
	0xfd, 0x57, 0x92, 0xbe, 0x74, 0xcf, 0xbf, 0xc4, 0x5e, 0xd4, 0x41, 0x55, 0xad, 0x32, 0x2b, 0x58,
	0x19, 0xf0, 0x29, 0xac, 0xec, 0xd5, 0x31, 0x7e, 0xf3, 0x21, 0x5c, 0xbd, 0x7c, 0x8b, 0xc2, 0x76,
	0xb7, 0xc8, 0x8f, 0xf5, 0x42, 0x92, 0xa9, 0xfb, 0x94, 0x28, 0x06, 0x34, 0x26, 0x77, 0xd0, 0x2b,
	0x98, 0x0f, 0xa0, 0x9e, 0xd5, 0x48, 0xc5, 0x64, 0x6f, 0xe4, 0x5a, 0x84, 0x52, 0x26, 0x98, 0xab,
	0xde, 0xc8, 0xdd, 0x27, 0x05, 0xbb, 0x0e, 0x4a, 0xb0, 0x9e, 0x86, 0x88, 0x31, 0x83, 0xea, 0x5c,
	0xf7, 0x46, 0xee, 0x7d, 0x25, 0x9b, 0x7f, 0x68, 0xb0, 0x9a, 0xbb, 0xfe, 0x35, 0x53, 0xe6, 0xdf,
	0x76, 0x8d, 0xdd, 0x86, 0xc5, 0xe4, 0xb2, 0xf9, 0xdc, 0x1a, 0xca, 0x83, 0xe7, 0x89, 0x13, 0xdb,
	0x85, 0x05, 0x75, 0x92, 0xb4, 0x19, 0xa6, 0x24, 0xc9, 0x35, 0x86, 0xc7, 0x2e, 0xe6, 0x09, 0xac,
	0xcd, 0x80, 0xa8, 0x5e, 0xe4, 0xc3, 0x4b, 0x6c, 0xdb, 0x98, 0xf5, 0x24, 0x97, 0x38, 0xf7, 0x4d,
	0x09, 0xf4, 0xd3, 0xa1, 0x38, 0x27, 0xc2, 0x31, 0x28, 0x67, 0xc6, 0x96, 0xce, 0xac, 0x01, 0x25,
	0xc7, 0x4e, 0x9a, 0x5d, 0x72, 0x6c, 0xf6, 0x7f, 0x58, 0xc2, 0x21, 0xba, 0xe8, 0x45, 0x96, 0x74,
	0x5e, 0xc6, 0x03, 0x5b, 0xe7, 0xb5, 0x44, 0x77, 0xea, 0xbc, 0x44, 0xf6, 0x0e, 0xb0, 0x44, 0x94,
	0x56, 0x80, 0xa1, 0x45, 0x7b, 0x9c, 0xe0, 0xd5, 0xb9, 0x91, 0x5a, 0x4e, 0x30, 0x3c, 0x50, 0x7a,
	0xb6, 0x05, 0xb5, 0xe8, 0x59, 0x88, 0xc2, 0xb6, 0xa4, 0x78, 0x1a, 0x6f, 0x7f, 0x9d, 0x43, 0xac,
	0x3a, 0x15, 0x4f, 0x91, 0xdd, 0x84, 0x46, 0x3f, 0xf4, 0x5f, 0x58, 0xbe, 0x67, 0xd9, 0xe8, 0x0a,
	0xcf, 0xa6, 0x9d, 0xa8, 0xf3, 0x25, 0xa5, 0xed, 0x7a, 0x2d, 0xd2, 0xa9, 0xba, 0x6c, 0x1c, 0x8a,
	0xb1, 0x65, 0xe3, 0x10, 0x23, 0xa4, 0x0d, 0xa9, 0xf3, 0x1a, 0xe9, 0x5a, 0xa4, 0x52, 0x75, 0xbd,
	0xc4, 0xd0, 0x57, 0x89, 0x88, 0x61, 0xb4, 0xd8, 0x69, 0x5f, 0xea, 0xdc, 0x50, 0x96, 0xae, 0xb7,
	0x3f, 0xd1, 0x9b, 0x4b, 0x00, 0xd4, 0x98, 0x98, 0xaa, 0x3f, 0x68, 0x50, 0x4d, 0x45, 0xc9, 0x6e,
	0xc3, 0xaa, 0x22, 0xe2, 0x04, 0xa5, 0xe3, 0x59, 0x23, 0x89, 0x09, 0x61, 0x0d, 0x6f, 0xe4, 0xb6,
	0x13, 0xcb, 0xb1, 0xf7, 0x58, 0x62, 0x81, 0xd6, 0xa5, 0x7f, 0xa4, 0xf5, 0x7c, 0x9e, 0xd6, 0x6c,
	0x07, 0x8c, 0x49, 0xac, 0x85, 0x61, 0xe8, 0x87, 0x32, 0x69, 0x65, 0x23, 0xcd, 0xd0, 0x26, 0x6d,
	0x7a, 0x0b, 0x75, 0x5b, 0x26, 0xdf, 0x13, 0x95, 0x98, 0xda, 0x2c, 0xcd, 0x43, 0x68, 0x28, 0x00,
	0xff, 0x7d, 0x5d, 0x14, 0x18, 0x60, 0xb6, 0x60, 0x25, 0x9f, 0x48, 0xf1, 0xef, 0xdd, 0xe2, 0x46,
	0x48, 0x59, 0x9f, 0x77, 0x9d, 0x6e, 0x83, 0x5f, 0x34, 0x58, 0x9e, 0xd8, 0x5e, 0xf3, 0xa8, 0xbe,
	0x91, 0x1b, 0xd5, 0xe5, 0x4c, 0x25, 0x99, 0x31, 0xbd, 0x55, 0x18, 0xd3, 0x95, 0xac, 0x5b, 0x7e,
	0x44, 0xdf, 0xca, 0x8f, 0xa8, 0x51, 0xf0, 0x9c, 0x8c, 0xe7, 0x11, 0xb0, 0x02, 0x24, 0xd5, 0x9a,
	0xbd, 0x4b, 0xa3, 0xb9, 0x56, 0xec, 0x4d, 0x71, 0x2c, 0x77, 0xbf, 0x00, 0x76, 0xf9, 0xff, 0x07,
	0x5b, 0x03, 0xd6, 0x6a, 0x1f, 0x3c, 0x3e, 0xb4, 0xba, 0x27, 0xd6, 0xd9, 0x93, 0x93, 0xb6, 0xf5,
	0xa8, 0xfb, 0xa8, 0x6d, 0xcc, 0x5d, 0xd6, 0xf3, 0xf6, 0x7e, 0xcb, 0xd0, 0xd8, 0x35, 0x58, 0xcd,
	0xeb, 0x3f, 0xe5, 0xc7, 0x67, 0x6d, 0xa3, 0xb4, 0xfb, 0x79, 0xf2, 0xc9, 0x9f, 0xfe, 0x51, 0x99,
	0xfa, 0x76, 0xda, 0x9d, 0x5c, 0xf2, 0x26, 0x5c, 0x29, 0x18, 0xce, 0xf6, 0x0f, 0x1e, 0xb6, 0x0d,
	0x6d, 0x7a, 0xed, 0xc4, 0xc2, 0xdb, 0x87, 0x46, 0x69, 0xef, 0x57, 0x0d, 0x16, 0x28, 0x3d, 0xbb,
	0x07, 0x35, 0x3a, 0x1c, 0x7b, 0xcf, 0xfd, 0x01, 0xb2, 0xb5, 0xfc, 0x07, 0x30, 0x25, 0xcf, 0xc6,
	0xb5, 0x59, 0x1f, 0xc6, 0x8e, 0xec, 0x9b, 0x73, 0xec, 0x21, 0xd4, 0x32, 0x0b, 0x8c, 0xfd, 0xef,
	0x95, 0xdf, 0x19, 0x95, 0xe7, 0xc6, 0xab, 0x57, 0x5e, 0x9c, 0xed, 0x1e, 0x54, 0x92, 0x9e, 0xb3,
	0xe6, 0x4c, 0x7e, 0xaa, 0x2c, 0xeb, 0xb3, 0x5f, 0x87, 0x32, 0x1c, 0x6c, 0xfc, 0x78, 0xb1, 0xa9,
	0xfd, 0x7c, 0xb1, 0xa9, 0xfd, 0x7e, 0xb1, 0xa9, 0x7d, 0xfb, 0xe7, 0xe6, 0xdc, 0x67, 0xfa, 0x33,
	0x31, 0xa4, 0x7f, 0xd3, 0xe7, 0x8b, 0xf4, 0x73, 0xf7, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85,
	0xdb, 0xc2, 0x85, 0x77, 0x0b, 0x00, 0x00,
}
