// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SchedPolicy int32

const (
	SchedPolicy_SCHED_POLICY_OTHER SchedPolicy = 0
	SchedPolicy_SCHED_POLICY_FIFO  SchedPolicy = 1
	SchedPolicy_SCHED_POLICY_RR    SchedPolicy = 2
)

var SchedPolicy_name = map[int32]string{
	0: "SCHED_POLICY_OTHER",
	1: "SCHED_POLICY_FIFO",
	2: "SCHED_POLICY_RR",
}
var SchedPolicy_value = map[string]int32{
	"SCHED_POLICY_OTHER": 0,
	"SCHED_POLICY_FIFO":  1,
	"SCHED_POLICY_RR":    2,
}

func (x SchedPolicy) String() string {
	return proto.EnumName(SchedPolicy_name, int32(x))
}
func (SchedPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

type ThreadRole int32

const (
	ThreadRole_THREAD_ROLE_CONTROL ThreadRole = 0
	ThreadRole_THREAD_ROLE_DATA    ThreadRole = 1
)

var ThreadRole_name = map[int32]string{
	0: "THREAD_ROLE_CONTROL",
	1: "THREAD_ROLE_DATA",
}
var ThreadRole_value = map[string]int32{
	"THREAD_ROLE_CONTROL": 0,
	"THREAD_ROLE_DATA":    1,
}

func (x ThreadRole) String() string {
	return proto.EnumName(ThreadRole_name, int32(x))
}
func (ThreadRole) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{1} }

type TraceLevel int32

const (
	TraceLevel_TRACE_LEVEL_NONE    TraceLevel = 0
	TraceLevel_TRACE_LEVEL_ERROR   TraceLevel = 1
	TraceLevel_TRACE_LEVEL_WARNING TraceLevel = 2
	TraceLevel_TRACE_LEVEL_INFO    TraceLevel = 3
	TraceLevel_TRACE_LEVEL_DEBUG   TraceLevel = 4
	TraceLevel_TRACE_LEVEL_VERBOSE TraceLevel = 5
)

var TraceLevel_name = map[int32]string{
	0: "TRACE_LEVEL_NONE",
	1: "TRACE_LEVEL_ERROR",
	2: "TRACE_LEVEL_WARNING",
	3: "TRACE_LEVEL_INFO",
	4: "TRACE_LEVEL_DEBUG",
	5: "TRACE_LEVEL_VERBOSE",
}
var TraceLevel_value = map[string]int32{
	"TRACE_LEVEL_NONE":    0,
	"TRACE_LEVEL_ERROR":   1,
	"TRACE_LEVEL_WARNING": 2,
	"TRACE_LEVEL_INFO":    3,
	"TRACE_LEVEL_DEBUG":   4,
	"TRACE_LEVEL_VERBOSE": 5,
}

func (x TraceLevel) String() string {
	return proto.EnumName(TraceLevel_name, int32(x))
}
func (TraceLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{2} }

// pipeline type for MPU trace
type MpuTracePipelineType int32

const (
	MpuTracePipelineType_MPU_TRACE_PIPELINE_NONE       MpuTracePipelineType = 0
	MpuTracePipelineType_MPU_TRACE_PIPELINE_P4_INGRESS MpuTracePipelineType = 1
	MpuTracePipelineType_MPU_TRACE_PIPELINE_P4_EGRESS  MpuTracePipelineType = 2
	MpuTracePipelineType_MPU_TRACE_PIPELINE_P4P_RXDMA  MpuTracePipelineType = 3
	MpuTracePipelineType_MPU_TRACE_PIPELINE_P4P_TXDMA  MpuTracePipelineType = 4
)

var MpuTracePipelineType_name = map[int32]string{
	0: "MPU_TRACE_PIPELINE_NONE",
	1: "MPU_TRACE_PIPELINE_P4_INGRESS",
	2: "MPU_TRACE_PIPELINE_P4_EGRESS",
	3: "MPU_TRACE_PIPELINE_P4P_RXDMA",
	4: "MPU_TRACE_PIPELINE_P4P_TXDMA",
}
var MpuTracePipelineType_value = map[string]int32{
	"MPU_TRACE_PIPELINE_NONE":       0,
	"MPU_TRACE_PIPELINE_P4_INGRESS": 1,
	"MPU_TRACE_PIPELINE_P4_EGRESS":  2,
	"MPU_TRACE_PIPELINE_P4P_RXDMA":  3,
	"MPU_TRACE_PIPELINE_P4P_TXDMA":  4,
}

func (x MpuTracePipelineType) String() string {
	return proto.EnumName(MpuTracePipelineType_name, int32(x))
}
func (MpuTracePipelineType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{3} }

// Clock Delta Op
type ClockOpType int32

const (
	ClockOpType_CLOCK_DELTA_OP_ADD ClockOpType = 0
	ClockOpType_CLOCK_DELTA_OP_DEL ClockOpType = 1
)

var ClockOpType_name = map[int32]string{
	0: "CLOCK_DELTA_OP_ADD",
	1: "CLOCK_DELTA_OP_DEL",
}
var ClockOpType_value = map[string]int32{
	"CLOCK_DELTA_OP_ADD": 0,
	"CLOCK_DELTA_OP_DEL": 1,
}

func (x ClockOpType) String() string {
	return proto.EnumName(ClockOpType_name, int32(x))
}
func (ClockOpType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{4} }

type CapriBlock int32

const (
	CapriBlock_CAPRI_BLOCK_PB    CapriBlock = 0
	CapriBlock_CAPRI_BLOCK_TXDMA CapriBlock = 1
	CapriBlock_CAPRI_BLOCK_RXDMA CapriBlock = 2
	CapriBlock_CAPRI_BLOCK_MS    CapriBlock = 3
	CapriBlock_CAPRI_BLOCK_PCIE  CapriBlock = 4
)

var CapriBlock_name = map[int32]string{
	0: "CAPRI_BLOCK_PB",
	1: "CAPRI_BLOCK_TXDMA",
	2: "CAPRI_BLOCK_RXDMA",
	3: "CAPRI_BLOCK_MS",
	4: "CAPRI_BLOCK_PCIE",
}
var CapriBlock_value = map[string]int32{
	"CAPRI_BLOCK_PB":    0,
	"CAPRI_BLOCK_TXDMA": 1,
	"CAPRI_BLOCK_RXDMA": 2,
	"CAPRI_BLOCK_MS":    3,
	"CAPRI_BLOCK_PCIE":  4,
}

func (x CapriBlock) String() string {
	return proto.EnumName(CapriBlock_name, int32(x))
}
func (CapriBlock) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{5} }

type LlcCounterType int32

const (
	LlcCounterType_LLC_COUNTER_CACHE_NONE        LlcCounterType = 0
	LlcCounterType_LLC_COUNTER_CACHE_READ        LlcCounterType = 1
	LlcCounterType_LLC_COUNTER_CACHE_WRITE       LlcCounterType = 2
	LlcCounterType_LLC_COUNTER_SCRATCHPAD_ACCESS LlcCounterType = 3
	LlcCounterType_LLC_COUNTER_CACHE_HIT         LlcCounterType = 4
	LlcCounterType_LLC_COUNTER_CACHE_MISS        LlcCounterType = 5
	LlcCounterType_LLC_COUNTER_PARTIAL_WRITE     LlcCounterType = 6
	LlcCounterType_LLC_COUNTER_CACHE_MAINT_OP    LlcCounterType = 7
	LlcCounterType_LLC_COUNTER_EVICTION          LlcCounterType = 8
	LlcCounterType_LLC_COUNTER_RETRY_NEEDED      LlcCounterType = 9
	LlcCounterType_LLC_COUNTER_RETRY_ACCESS      LlcCounterType = 10
)

var LlcCounterType_name = map[int32]string{
	0:  "LLC_COUNTER_CACHE_NONE",
	1:  "LLC_COUNTER_CACHE_READ",
	2:  "LLC_COUNTER_CACHE_WRITE",
	3:  "LLC_COUNTER_SCRATCHPAD_ACCESS",
	4:  "LLC_COUNTER_CACHE_HIT",
	5:  "LLC_COUNTER_CACHE_MISS",
	6:  "LLC_COUNTER_PARTIAL_WRITE",
	7:  "LLC_COUNTER_CACHE_MAINT_OP",
	8:  "LLC_COUNTER_EVICTION",
	9:  "LLC_COUNTER_RETRY_NEEDED",
	10: "LLC_COUNTER_RETRY_ACCESS",
}
var LlcCounterType_value = map[string]int32{
	"LLC_COUNTER_CACHE_NONE":        0,
	"LLC_COUNTER_CACHE_READ":        1,
	"LLC_COUNTER_CACHE_WRITE":       2,
	"LLC_COUNTER_SCRATCHPAD_ACCESS": 3,
	"LLC_COUNTER_CACHE_HIT":         4,
	"LLC_COUNTER_CACHE_MISS":        5,
	"LLC_COUNTER_PARTIAL_WRITE":     6,
	"LLC_COUNTER_CACHE_MAINT_OP":    7,
	"LLC_COUNTER_EVICTION":          8,
	"LLC_COUNTER_RETRY_NEEDED":      9,
	"LLC_COUNTER_RETRY_ACCESS":      10,
}

func (x LlcCounterType) String() string {
	return proto.EnumName(LlcCounterType_name, int32(x))
}
func (LlcCounterType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{6} }

type HbmSramType int32

const (
	HbmSramType_SRAM_P4_INGRESS   HbmSramType = 0
	HbmSramType_SRAM_P4_EGRESS    HbmSramType = 1
	HbmSramType_SRAM_P4_ALL       HbmSramType = 2
	HbmSramType_SRAM_P4PLUS_RXDMA HbmSramType = 3
	HbmSramType_SRAM_P4PLUS_TXDMA HbmSramType = 4
	HbmSramType_SRAM_P4PLUS_ALL   HbmSramType = 5
	HbmSramType_SRAM_ALL          HbmSramType = 6
)

var HbmSramType_name = map[int32]string{
	0: "SRAM_P4_INGRESS",
	1: "SRAM_P4_EGRESS",
	2: "SRAM_P4_ALL",
	3: "SRAM_P4PLUS_RXDMA",
	4: "SRAM_P4PLUS_TXDMA",
	5: "SRAM_P4PLUS_ALL",
	6: "SRAM_ALL",
}
var HbmSramType_value = map[string]int32{
	"SRAM_P4_INGRESS":   0,
	"SRAM_P4_EGRESS":    1,
	"SRAM_P4_ALL":       2,
	"SRAM_P4PLUS_RXDMA": 3,
	"SRAM_P4PLUS_TXDMA": 4,
	"SRAM_P4PLUS_ALL":   5,
	"SRAM_ALL":          6,
}

func (x HbmSramType) String() string {
	return proto.EnumName(HbmSramType_name, int32(x))
}
func (HbmSramType) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{7} }

type Command int32

const (
	Command_CMD_NONE       Command = 0
	Command_CMD_DUMP_INTR  Command = 1
	Command_CMD_CLEAR_INTR Command = 2
)

var Command_name = map[int32]string{
	0: "CMD_NONE",
	1: "CMD_DUMP_INTR",
	2: "CMD_CLEAR_INTR",
}
var Command_value = map[string]int32{
	"CMD_NONE":       0,
	"CMD_DUMP_INTR":  1,
	"CMD_CLEAR_INTR": 2,
}

func (x Command) String() string {
	return proto.EnumName(Command_name, int32(x))
}
func (Command) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{8} }

// FTE Span
type FteSpanRequest struct {
	Selector      uint32              `protobuf:"varint,1,opt,name=selector,proto3" json:"selector,omitempty"`
	SrcLif        uint32              `protobuf:"varint,2,opt,name=src_lif,json=srcLif,proto3" json:"src_lif,omitempty"`
	SrcLport      uint32              `protobuf:"varint,3,opt,name=src_lport,json=srcLport,proto3" json:"src_lport,omitempty"`
	DstLport      uint32              `protobuf:"varint,4,opt,name=dst_lport,json=dstLport,proto3" json:"dst_lport,omitempty"`
	DropReason    uint32              `protobuf:"varint,5,opt,name=drop_reason,json=dropReason,proto3" json:"drop_reason,omitempty"`
	FlowLkupDir   uint32              `protobuf:"varint,6,opt,name=flow_lkup_dir,json=flowLkupDir,proto3" json:"flow_lkup_dir,omitempty"`
	FlowLkupType  uint32              `protobuf:"varint,7,opt,name=flow_lkup_type,json=flowLkupType,proto3" json:"flow_lkup_type,omitempty"`
	FlowLkupVrf   uint32              `protobuf:"varint,8,opt,name=flow_lkup_vrf,json=flowLkupVrf,proto3" json:"flow_lkup_vrf,omitempty"`
	FlowLkupSrc   *IPAddress          `protobuf:"bytes,9,opt,name=flow_lkup_src,json=flowLkupSrc" json:"flow_lkup_src,omitempty"`
	FlowLkupDst   *IPAddress          `protobuf:"bytes,10,opt,name=flow_lkup_dst,json=flowLkupDst" json:"flow_lkup_dst,omitempty"`
	FlowLkupProto uint32              `protobuf:"varint,11,opt,name=flow_lkup_proto,json=flowLkupProto,proto3" json:"flow_lkup_proto,omitempty"`
	FlowLkupSport uint32              `protobuf:"varint,12,opt,name=flow_lkup_sport,json=flowLkupSport,proto3" json:"flow_lkup_sport,omitempty"`
	FlowLkupDport uint32              `protobuf:"varint,13,opt,name=flow_lkup_dport,json=flowLkupDport,proto3" json:"flow_lkup_dport,omitempty"`
	EthDmac       uint64              `protobuf:"varint,14,opt,name=eth_dmac,json=ethDmac,proto3" json:"eth_dmac,omitempty"`
	FromCpu       bool                `protobuf:"varint,15,opt,name=from_cpu,json=fromCpu,proto3" json:"from_cpu,omitempty"`
	IsEgress      bool                `protobuf:"varint,16,opt,name=is_egress,json=isEgress,proto3" json:"is_egress,omitempty"`
	EgressIf      *InterfaceKeyHandle `protobuf:"bytes,17,opt,name=egress_if,json=egressIf" json:"egress_if,omitempty"`
	SpanLport     uint32              `protobuf:"varint,18,opt,name=span_lport,json=spanLport,proto3" json:"span_lport,omitempty"`
	AttachStats   bool                `protobuf:"varint,19,opt,name=attach_stats,json=attachStats,proto3" json:"attach_stats,omitempty"`
}

func (m *FteSpanRequest) Reset()                    { *m = FteSpanRequest{} }
func (m *FteSpanRequest) String() string            { return proto.CompactTextString(m) }
func (*FteSpanRequest) ProtoMessage()               {}
func (*FteSpanRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

func (m *FteSpanRequest) GetSelector() uint32 {
	if m != nil {
		return m.Selector
	}
	return 0
}

func (m *FteSpanRequest) GetSrcLif() uint32 {
	if m != nil {
		return m.SrcLif
	}
	return 0
}

func (m *FteSpanRequest) GetSrcLport() uint32 {
	if m != nil {
		return m.SrcLport
	}
	return 0
}

func (m *FteSpanRequest) GetDstLport() uint32 {
	if m != nil {
		return m.DstLport
	}
	return 0
}

func (m *FteSpanRequest) GetDropReason() uint32 {
	if m != nil {
		return m.DropReason
	}
	return 0
}

func (m *FteSpanRequest) GetFlowLkupDir() uint32 {
	if m != nil {
		return m.FlowLkupDir
	}
	return 0
}

func (m *FteSpanRequest) GetFlowLkupType() uint32 {
	if m != nil {
		return m.FlowLkupType
	}
	return 0
}

func (m *FteSpanRequest) GetFlowLkupVrf() uint32 {
	if m != nil {
		return m.FlowLkupVrf
	}
	return 0
}

func (m *FteSpanRequest) GetFlowLkupSrc() *IPAddress {
	if m != nil {
		return m.FlowLkupSrc
	}
	return nil
}

func (m *FteSpanRequest) GetFlowLkupDst() *IPAddress {
	if m != nil {
		return m.FlowLkupDst
	}
	return nil
}

func (m *FteSpanRequest) GetFlowLkupProto() uint32 {
	if m != nil {
		return m.FlowLkupProto
	}
	return 0
}

func (m *FteSpanRequest) GetFlowLkupSport() uint32 {
	if m != nil {
		return m.FlowLkupSport
	}
	return 0
}

func (m *FteSpanRequest) GetFlowLkupDport() uint32 {
	if m != nil {
		return m.FlowLkupDport
	}
	return 0
}

func (m *FteSpanRequest) GetEthDmac() uint64 {
	if m != nil {
		return m.EthDmac
	}
	return 0
}

func (m *FteSpanRequest) GetFromCpu() bool {
	if m != nil {
		return m.FromCpu
	}
	return false
}

func (m *FteSpanRequest) GetIsEgress() bool {
	if m != nil {
		return m.IsEgress
	}
	return false
}

func (m *FteSpanRequest) GetEgressIf() *InterfaceKeyHandle {
	if m != nil {
		return m.EgressIf
	}
	return nil
}

func (m *FteSpanRequest) GetSpanLport() uint32 {
	if m != nil {
		return m.SpanLport
	}
	return 0
}

func (m *FteSpanRequest) GetAttachStats() bool {
	if m != nil {
		return m.AttachStats
	}
	return false
}

type FteSpanRequestMsg struct {
	Request []*FteSpanRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FteSpanRequestMsg) Reset()                    { *m = FteSpanRequestMsg{} }
func (m *FteSpanRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*FteSpanRequestMsg) ProtoMessage()               {}
func (*FteSpanRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{1} }

func (m *FteSpanRequestMsg) GetRequest() []*FteSpanRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type FteSpanResponse struct {
	ApiStatus  ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Request    *FteSpanRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	StatsIndex uint32          `protobuf:"varint,3,opt,name=stats_index,json=statsIndex,proto3" json:"stats_index,omitempty"`
}

func (m *FteSpanResponse) Reset()                    { *m = FteSpanResponse{} }
func (m *FteSpanResponse) String() string            { return proto.CompactTextString(m) }
func (*FteSpanResponse) ProtoMessage()               {}
func (*FteSpanResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{2} }

func (m *FteSpanResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *FteSpanResponse) GetRequest() *FteSpanRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *FteSpanResponse) GetStatsIndex() uint32 {
	if m != nil {
		return m.StatsIndex
	}
	return 0
}

type FteSpanResponseMsg struct {
	Response []*FteSpanResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *FteSpanResponseMsg) Reset()                    { *m = FteSpanResponseMsg{} }
func (m *FteSpanResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*FteSpanResponseMsg) ProtoMessage()               {}
func (*FteSpanResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{3} }

func (m *FteSpanResponseMsg) GetResponse() []*FteSpanResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Snake Test
type SnakeTestRequest struct {
	Type SnakeTestType `protobuf:"varint,1,opt,name=type,proto3,enum=types.SnakeTestType" json:"type,omitempty"`
	Vlan uint32        `protobuf:"varint,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
}

func (m *SnakeTestRequest) Reset()                    { *m = SnakeTestRequest{} }
func (m *SnakeTestRequest) String() string            { return proto.CompactTextString(m) }
func (*SnakeTestRequest) ProtoMessage()               {}
func (*SnakeTestRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{4} }

func (m *SnakeTestRequest) GetType() SnakeTestType {
	if m != nil {
		return m.Type
	}
	return SnakeTestType_SNAKE_TEST_TYPE_NONE
}

func (m *SnakeTestRequest) GetVlan() uint32 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

type SnakeTestRequestMsg struct {
	Request []*SnakeTestRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SnakeTestRequestMsg) Reset()                    { *m = SnakeTestRequestMsg{} }
func (m *SnakeTestRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SnakeTestRequestMsg) ProtoMessage()               {}
func (*SnakeTestRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{5} }

func (m *SnakeTestRequestMsg) GetRequest() []*SnakeTestRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type SnakeTestResponse struct {
	ApiStatus ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Request   *SnakeTestRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *SnakeTestResponse) Reset()                    { *m = SnakeTestResponse{} }
func (m *SnakeTestResponse) String() string            { return proto.CompactTextString(m) }
func (*SnakeTestResponse) ProtoMessage()               {}
func (*SnakeTestResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{6} }

func (m *SnakeTestResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SnakeTestResponse) GetRequest() *SnakeTestRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type SnakeTestResponseMsg struct {
	Response []*SnakeTestResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SnakeTestResponseMsg) Reset()                    { *m = SnakeTestResponseMsg{} }
func (m *SnakeTestResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SnakeTestResponseMsg) ProtoMessage()               {}
func (*SnakeTestResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{7} }

func (m *SnakeTestResponseMsg) GetResponse() []*SnakeTestResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type SnakeTestDeleteRequest struct {
	Type SnakeTestType `protobuf:"varint,1,opt,name=type,proto3,enum=types.SnakeTestType" json:"type,omitempty"`
}

func (m *SnakeTestDeleteRequest) Reset()                    { *m = SnakeTestDeleteRequest{} }
func (m *SnakeTestDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*SnakeTestDeleteRequest) ProtoMessage()               {}
func (*SnakeTestDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{8} }

func (m *SnakeTestDeleteRequest) GetType() SnakeTestType {
	if m != nil {
		return m.Type
	}
	return SnakeTestType_SNAKE_TEST_TYPE_NONE
}

type SnakeTestDeleteRequestMsg struct {
	Request []*SnakeTestDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SnakeTestDeleteRequestMsg) Reset()                    { *m = SnakeTestDeleteRequestMsg{} }
func (m *SnakeTestDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SnakeTestDeleteRequestMsg) ProtoMessage()               {}
func (*SnakeTestDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{9} }

func (m *SnakeTestDeleteRequestMsg) GetRequest() []*SnakeTestDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type SnakeTestDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *SnakeTestDeleteResponse) Reset()                    { *m = SnakeTestDeleteResponse{} }
func (m *SnakeTestDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*SnakeTestDeleteResponse) ProtoMessage()               {}
func (*SnakeTestDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{10} }

func (m *SnakeTestDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type SnakeTestDeleteResponseMsg struct {
	Response []*SnakeTestDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SnakeTestDeleteResponseMsg) Reset()                    { *m = SnakeTestDeleteResponseMsg{} }
func (m *SnakeTestDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SnakeTestDeleteResponseMsg) ProtoMessage()               {}
func (*SnakeTestDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{11} }

func (m *SnakeTestDeleteResponseMsg) GetResponse() []*SnakeTestDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type GenericOpnRequest struct {
	Opn  uint32 `protobuf:"varint,1,opt,name=opn,proto3" json:"opn,omitempty"`
	Val1 uint64 `protobuf:"varint,2,opt,name=val1,proto3" json:"val1,omitempty"`
	Val2 uint64 `protobuf:"varint,3,opt,name=val2,proto3" json:"val2,omitempty"`
	Val3 uint64 `protobuf:"varint,4,opt,name=val3,proto3" json:"val3,omitempty"`
	Val4 uint64 `protobuf:"varint,5,opt,name=val4,proto3" json:"val4,omitempty"`
}

func (m *GenericOpnRequest) Reset()                    { *m = GenericOpnRequest{} }
func (m *GenericOpnRequest) String() string            { return proto.CompactTextString(m) }
func (*GenericOpnRequest) ProtoMessage()               {}
func (*GenericOpnRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{12} }

func (m *GenericOpnRequest) GetOpn() uint32 {
	if m != nil {
		return m.Opn
	}
	return 0
}

func (m *GenericOpnRequest) GetVal1() uint64 {
	if m != nil {
		return m.Val1
	}
	return 0
}

func (m *GenericOpnRequest) GetVal2() uint64 {
	if m != nil {
		return m.Val2
	}
	return 0
}

func (m *GenericOpnRequest) GetVal3() uint64 {
	if m != nil {
		return m.Val3
	}
	return 0
}

func (m *GenericOpnRequest) GetVal4() uint64 {
	if m != nil {
		return m.Val4
	}
	return 0
}

type GenericOpnRequestMsg struct {
	Request []*GenericOpnRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *GenericOpnRequestMsg) Reset()                    { *m = GenericOpnRequestMsg{} }
func (m *GenericOpnRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*GenericOpnRequestMsg) ProtoMessage()               {}
func (*GenericOpnRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{13} }

func (m *GenericOpnRequestMsg) GetRequest() []*GenericOpnRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type GenericOpnStatus struct {
	Val1 uint64 `protobuf:"varint,1,opt,name=val1,proto3" json:"val1,omitempty"`
	Val2 uint64 `protobuf:"varint,2,opt,name=val2,proto3" json:"val2,omitempty"`
	Val3 uint64 `protobuf:"varint,3,opt,name=val3,proto3" json:"val3,omitempty"`
	Val4 uint64 `protobuf:"varint,4,opt,name=val4,proto3" json:"val4,omitempty"`
}

func (m *GenericOpnStatus) Reset()                    { *m = GenericOpnStatus{} }
func (m *GenericOpnStatus) String() string            { return proto.CompactTextString(m) }
func (*GenericOpnStatus) ProtoMessage()               {}
func (*GenericOpnStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{14} }

func (m *GenericOpnStatus) GetVal1() uint64 {
	if m != nil {
		return m.Val1
	}
	return 0
}

func (m *GenericOpnStatus) GetVal2() uint64 {
	if m != nil {
		return m.Val2
	}
	return 0
}

func (m *GenericOpnStatus) GetVal3() uint64 {
	if m != nil {
		return m.Val3
	}
	return 0
}

func (m *GenericOpnStatus) GetVal4() uint64 {
	if m != nil {
		return m.Val4
	}
	return 0
}

type GenericOpnResponse struct {
	ApiStatus ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *GenericOpnStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *GenericOpnResponse) Reset()                    { *m = GenericOpnResponse{} }
func (m *GenericOpnResponse) String() string            { return proto.CompactTextString(m) }
func (*GenericOpnResponse) ProtoMessage()               {}
func (*GenericOpnResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{15} }

func (m *GenericOpnResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *GenericOpnResponse) GetStatus() *GenericOpnStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type GenericOpnResponseMsg struct {
	Response []*GenericOpnResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *GenericOpnResponseMsg) Reset()                    { *m = GenericOpnResponseMsg{} }
func (m *GenericOpnResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*GenericOpnResponseMsg) ProtoMessage()               {}
func (*GenericOpnResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{16} }

func (m *GenericOpnResponseMsg) GetResponse() []*GenericOpnResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type RegisterRequest struct {
	// Types that are valid to be assigned to IdNameOrAddr:
	//	*RegisterRequest_RegId
	//	*RegisterRequest_RegName
	//	*RegisterRequest_Addr
	IdNameOrAddr isRegisterRequest_IdNameOrAddr `protobuf_oneof:"id_name_or_addr"`
	BlockName    string                         `protobuf:"bytes,4,opt,name=block_name,json=blockName,proto3" json:"block_name,omitempty"`
	Instance     uint32                         `protobuf:"varint,5,opt,name=instance,proto3" json:"instance,omitempty"`
	RegData      uint32                         `protobuf:"varint,6,opt,name=reg_data,json=regData,proto3" json:"reg_data,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{17} }

type isRegisterRequest_IdNameOrAddr interface {
	isRegisterRequest_IdNameOrAddr()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RegisterRequest_RegId struct {
	RegId uint32 `protobuf:"fixed32,1,opt,name=reg_id,json=regId,proto3,oneof"`
}
type RegisterRequest_RegName struct {
	RegName string `protobuf:"bytes,2,opt,name=reg_name,json=regName,proto3,oneof"`
}
type RegisterRequest_Addr struct {
	Addr uint64 `protobuf:"varint,3,opt,name=addr,proto3,oneof"`
}

func (*RegisterRequest_RegId) isRegisterRequest_IdNameOrAddr()   {}
func (*RegisterRequest_RegName) isRegisterRequest_IdNameOrAddr() {}
func (*RegisterRequest_Addr) isRegisterRequest_IdNameOrAddr()    {}

func (m *RegisterRequest) GetIdNameOrAddr() isRegisterRequest_IdNameOrAddr {
	if m != nil {
		return m.IdNameOrAddr
	}
	return nil
}

func (m *RegisterRequest) GetRegId() uint32 {
	if x, ok := m.GetIdNameOrAddr().(*RegisterRequest_RegId); ok {
		return x.RegId
	}
	return 0
}

func (m *RegisterRequest) GetRegName() string {
	if x, ok := m.GetIdNameOrAddr().(*RegisterRequest_RegName); ok {
		return x.RegName
	}
	return ""
}

func (m *RegisterRequest) GetAddr() uint64 {
	if x, ok := m.GetIdNameOrAddr().(*RegisterRequest_Addr); ok {
		return x.Addr
	}
	return 0
}

func (m *RegisterRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *RegisterRequest) GetInstance() uint32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *RegisterRequest) GetRegData() uint32 {
	if m != nil {
		return m.RegData
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RegisterRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RegisterRequest_OneofMarshaler, _RegisterRequest_OneofUnmarshaler, _RegisterRequest_OneofSizer, []interface{}{
		(*RegisterRequest_RegId)(nil),
		(*RegisterRequest_RegName)(nil),
		(*RegisterRequest_Addr)(nil),
	}
}

func _RegisterRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RegisterRequest)
	// id_name_or_addr
	switch x := m.IdNameOrAddr.(type) {
	case *RegisterRequest_RegId:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.RegId))
	case *RegisterRequest_RegName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.RegName)
	case *RegisterRequest_Addr:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Addr))
	case nil:
	default:
		return fmt.Errorf("RegisterRequest.IdNameOrAddr has unexpected type %T", x)
	}
	return nil
}

func _RegisterRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RegisterRequest)
	switch tag {
	case 1: // id_name_or_addr.reg_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.IdNameOrAddr = &RegisterRequest_RegId{uint32(x)}
		return true, err
	case 2: // id_name_or_addr.reg_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.IdNameOrAddr = &RegisterRequest_RegName{x}
		return true, err
	case 3: // id_name_or_addr.addr
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.IdNameOrAddr = &RegisterRequest_Addr{x}
		return true, err
	default:
		return false, nil
	}
}

func _RegisterRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RegisterRequest)
	// id_name_or_addr
	switch x := m.IdNameOrAddr.(type) {
	case *RegisterRequest_RegId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *RegisterRequest_RegName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RegName)))
		n += len(x.RegName)
	case *RegisterRequest_Addr:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Addr))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RegisterRequestMsg struct {
	Request []*RegisterRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *RegisterRequestMsg) Reset()                    { *m = RegisterRequestMsg{} }
func (m *RegisterRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequestMsg) ProtoMessage()               {}
func (*RegisterRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{18} }

func (m *RegisterRequestMsg) GetRequest() []*RegisterRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type RegisterResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Data      *RegisterData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{19} }

func (m *RegisterResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *RegisterResponse) GetData() *RegisterData {
	if m != nil {
		return m.Data
	}
	return nil
}

type RegisterResponseMsg struct {
	Response []*RegisterResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *RegisterResponseMsg) Reset()                    { *m = RegisterResponseMsg{} }
func (m *RegisterResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponseMsg) ProtoMessage()               {}
func (*RegisterResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{20} }

func (m *RegisterResponseMsg) GetResponse() []*RegisterResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MemoryRequest struct {
	// Types that are valid to be assigned to IdOrName:
	//	*MemoryRequest_TableId
	//	*MemoryRequest_TableName
	IdOrName   isMemoryRequest_IdOrName `protobuf_oneof:"id_or_name"`
	Index      uint32                   `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Swkey      []byte                   `protobuf:"bytes,4,opt,name=swkey,proto3" json:"swkey,omitempty"`
	SwkeyMask  []byte                   `protobuf:"bytes,5,opt,name=swkey_mask,json=swkeyMask,proto3" json:"swkey_mask,omitempty"`
	Actiondata []byte                   `protobuf:"bytes,6,opt,name=actiondata,proto3" json:"actiondata,omitempty"`
}

func (m *MemoryRequest) Reset()                    { *m = MemoryRequest{} }
func (m *MemoryRequest) String() string            { return proto.CompactTextString(m) }
func (*MemoryRequest) ProtoMessage()               {}
func (*MemoryRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{21} }

type isMemoryRequest_IdOrName interface {
	isMemoryRequest_IdOrName()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MemoryRequest_TableId struct {
	TableId uint32 `protobuf:"fixed32,1,opt,name=table_id,json=tableId,proto3,oneof"`
}
type MemoryRequest_TableName struct {
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3,oneof"`
}

func (*MemoryRequest_TableId) isMemoryRequest_IdOrName()   {}
func (*MemoryRequest_TableName) isMemoryRequest_IdOrName() {}

func (m *MemoryRequest) GetIdOrName() isMemoryRequest_IdOrName {
	if m != nil {
		return m.IdOrName
	}
	return nil
}

func (m *MemoryRequest) GetTableId() uint32 {
	if x, ok := m.GetIdOrName().(*MemoryRequest_TableId); ok {
		return x.TableId
	}
	return 0
}

func (m *MemoryRequest) GetTableName() string {
	if x, ok := m.GetIdOrName().(*MemoryRequest_TableName); ok {
		return x.TableName
	}
	return ""
}

func (m *MemoryRequest) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MemoryRequest) GetSwkey() []byte {
	if m != nil {
		return m.Swkey
	}
	return nil
}

func (m *MemoryRequest) GetSwkeyMask() []byte {
	if m != nil {
		return m.SwkeyMask
	}
	return nil
}

func (m *MemoryRequest) GetActiondata() []byte {
	if m != nil {
		return m.Actiondata
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MemoryRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MemoryRequest_OneofMarshaler, _MemoryRequest_OneofUnmarshaler, _MemoryRequest_OneofSizer, []interface{}{
		(*MemoryRequest_TableId)(nil),
		(*MemoryRequest_TableName)(nil),
	}
}

func _MemoryRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MemoryRequest)
	// id_or_name
	switch x := m.IdOrName.(type) {
	case *MemoryRequest_TableId:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(x.TableId))
	case *MemoryRequest_TableName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.TableName)
	case nil:
	default:
		return fmt.Errorf("MemoryRequest.IdOrName has unexpected type %T", x)
	}
	return nil
}

func _MemoryRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MemoryRequest)
	switch tag {
	case 1: // id_or_name.table_id
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.IdOrName = &MemoryRequest_TableId{uint32(x)}
		return true, err
	case 2: // id_or_name.table_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.IdOrName = &MemoryRequest_TableName{x}
		return true, err
	default:
		return false, nil
	}
}

func _MemoryRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MemoryRequest)
	// id_or_name
	switch x := m.IdOrName.(type) {
	case *MemoryRequest_TableId:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *MemoryRequest_TableName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TableName)))
		n += len(x.TableName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MemoryRequestMsg struct {
	Request []*MemoryRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MemoryRequestMsg) Reset()                    { *m = MemoryRequestMsg{} }
func (m *MemoryRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MemoryRequestMsg) ProtoMessage()               {}
func (*MemoryRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{22} }

func (m *MemoryRequestMsg) GetRequest() []*MemoryRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MemoryResponse struct {
	ApiStatus  ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Index      uint32    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Swkey      []byte    `protobuf:"bytes,3,opt,name=swkey,proto3" json:"swkey,omitempty"`
	SwkeyMask  []byte    `protobuf:"bytes,4,opt,name=swkey_mask,json=swkeyMask,proto3" json:"swkey_mask,omitempty"`
	Actiondata []byte    `protobuf:"bytes,5,opt,name=actiondata,proto3" json:"actiondata,omitempty"`
}

func (m *MemoryResponse) Reset()                    { *m = MemoryResponse{} }
func (m *MemoryResponse) String() string            { return proto.CompactTextString(m) }
func (*MemoryResponse) ProtoMessage()               {}
func (*MemoryResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{23} }

func (m *MemoryResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MemoryResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MemoryResponse) GetSwkey() []byte {
	if m != nil {
		return m.Swkey
	}
	return nil
}

func (m *MemoryResponse) GetSwkeyMask() []byte {
	if m != nil {
		return m.SwkeyMask
	}
	return nil
}

func (m *MemoryResponse) GetActiondata() []byte {
	if m != nil {
		return m.Actiondata
	}
	return nil
}

type MemoryResponseMsg struct {
	Response []*MemoryResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MemoryResponseMsg) Reset()                    { *m = MemoryResponseMsg{} }
func (m *MemoryResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MemoryResponseMsg) ProtoMessage()               {}
func (*MemoryResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{24} }

func (m *MemoryResponseMsg) GetResponse() []*MemoryResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MemoryRawRequest struct {
	Address uint64 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	Len     uint32 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
}

func (m *MemoryRawRequest) Reset()                    { *m = MemoryRawRequest{} }
func (m *MemoryRawRequest) String() string            { return proto.CompactTextString(m) }
func (*MemoryRawRequest) ProtoMessage()               {}
func (*MemoryRawRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{25} }

func (m *MemoryRawRequest) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *MemoryRawRequest) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type MemoryRawRequestMsg struct {
	Request []*MemoryRawRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MemoryRawRequestMsg) Reset()                    { *m = MemoryRawRequestMsg{} }
func (m *MemoryRawRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MemoryRawRequestMsg) ProtoMessage()               {}
func (*MemoryRawRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{26} }

func (m *MemoryRawRequestMsg) GetRequest() []*MemoryRawRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MemoryRawResponse struct {
	ApiStatus  ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Actiondata []byte    `protobuf:"bytes,2,opt,name=actiondata,proto3" json:"actiondata,omitempty"`
}

func (m *MemoryRawResponse) Reset()                    { *m = MemoryRawResponse{} }
func (m *MemoryRawResponse) String() string            { return proto.CompactTextString(m) }
func (*MemoryRawResponse) ProtoMessage()               {}
func (*MemoryRawResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{27} }

func (m *MemoryRawResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MemoryRawResponse) GetActiondata() []byte {
	if m != nil {
		return m.Actiondata
	}
	return nil
}

type MemoryRawResponseMsg struct {
	Response []*MemoryRawResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MemoryRawResponseMsg) Reset()                    { *m = MemoryRawResponseMsg{} }
func (m *MemoryRawResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MemoryRawResponseMsg) ProtoMessage()               {}
func (*MemoryRawResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{28} }

func (m *MemoryRawResponseMsg) GetResponse() []*MemoryRawResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MemoryRawUpdateRequest struct {
	Address    uint64 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	Actiondata []byte `protobuf:"bytes,2,opt,name=actiondata,proto3" json:"actiondata,omitempty"`
	Len        uint32 `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
}

func (m *MemoryRawUpdateRequest) Reset()                    { *m = MemoryRawUpdateRequest{} }
func (m *MemoryRawUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*MemoryRawUpdateRequest) ProtoMessage()               {}
func (*MemoryRawUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{29} }

func (m *MemoryRawUpdateRequest) GetAddress() uint64 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *MemoryRawUpdateRequest) GetActiondata() []byte {
	if m != nil {
		return m.Actiondata
	}
	return nil
}

func (m *MemoryRawUpdateRequest) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type MemoryRawUpdateRequestMsg struct {
	Request []*MemoryRawUpdateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MemoryRawUpdateRequestMsg) Reset()                    { *m = MemoryRawUpdateRequestMsg{} }
func (m *MemoryRawUpdateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MemoryRawUpdateRequestMsg) ProtoMessage()               {}
func (*MemoryRawUpdateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{30} }

func (m *MemoryRawUpdateRequestMsg) GetRequest() []*MemoryRawUpdateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type MemoryRawUpdateResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *MemoryRawUpdateResponse) Reset()                    { *m = MemoryRawUpdateResponse{} }
func (m *MemoryRawUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*MemoryRawUpdateResponse) ProtoMessage()               {}
func (*MemoryRawUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{31} }

func (m *MemoryRawUpdateResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type MemoryRawUpdateResponseMsg struct {
	Response []*MemoryRawUpdateResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MemoryRawUpdateResponseMsg) Reset()                    { *m = MemoryRawUpdateResponseMsg{} }
func (m *MemoryRawUpdateResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MemoryRawUpdateResponseMsg) ProtoMessage()               {}
func (*MemoryRawUpdateResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{32} }

func (m *MemoryRawUpdateResponseMsg) GetResponse() []*MemoryRawUpdateResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Captures the return data for registers
type RegisterData struct {
	RegName string `protobuf:"bytes,1,opt,name=reg_name,json=regName,proto3" json:"reg_name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RegisterData) Reset()                    { *m = RegisterData{} }
func (m *RegisterData) String() string            { return proto.CompactTextString(m) }
func (*RegisterData) ProtoMessage()               {}
func (*RegisterData) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{33} }

func (m *RegisterData) GetRegName() string {
	if m != nil {
		return m.RegName
	}
	return ""
}

func (m *RegisterData) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisterData) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MemTrackSpec struct {
	AllocId uint32 `protobuf:"varint,1,opt,name=alloc_id,json=allocId,proto3" json:"alloc_id,omitempty"`
}

func (m *MemTrackSpec) Reset()                    { *m = MemTrackSpec{} }
func (m *MemTrackSpec) String() string            { return proto.CompactTextString(m) }
func (*MemTrackSpec) ProtoMessage()               {}
func (*MemTrackSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{34} }

func (m *MemTrackSpec) GetAllocId() uint32 {
	if m != nil {
		return m.AllocId
	}
	return 0
}

// MemTrackGetRequest is request msg with allocation id that info is requested for
type MemTrackGetRequest struct {
	Spec *MemTrackSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *MemTrackGetRequest) Reset()                    { *m = MemTrackGetRequest{} }
func (m *MemTrackGetRequest) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetRequest) ProtoMessage()               {}
func (*MemTrackGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{35} }

func (m *MemTrackGetRequest) GetSpec() *MemTrackSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// MemTrackGetRequestMsg is batched MemTrackGetRequest
type MemTrackGetRequestMsg struct {
	Request []*MemTrackGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MemTrackGetRequestMsg) Reset()                    { *m = MemTrackGetRequestMsg{} }
func (m *MemTrackGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetRequestMsg) ProtoMessage()               {}
func (*MemTrackGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{36} }

func (m *MemTrackGetRequestMsg) GetRequest() []*MemTrackGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// operational status of memory tracker object
type MemTrackStatus struct {
}

func (m *MemTrackStatus) Reset()                    { *m = MemTrackStatus{} }
func (m *MemTrackStatus) String() string            { return proto.CompactTextString(m) }
func (*MemTrackStatus) ProtoMessage()               {}
func (*MemTrackStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{37} }

// stats per memory tracker object
type MemTrackStats struct {
	NumAllocs uint32 `protobuf:"varint,1,opt,name=num_allocs,json=numAllocs,proto3" json:"num_allocs,omitempty"`
	NumFrees  uint32 `protobuf:"varint,2,opt,name=num_frees,json=numFrees,proto3" json:"num_frees,omitempty"`
}

func (m *MemTrackStats) Reset()                    { *m = MemTrackStats{} }
func (m *MemTrackStats) String() string            { return proto.CompactTextString(m) }
func (*MemTrackStats) ProtoMessage()               {}
func (*MemTrackStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{38} }

func (m *MemTrackStats) GetNumAllocs() uint32 {
	if m != nil {
		return m.NumAllocs
	}
	return 0
}

func (m *MemTrackStats) GetNumFrees() uint32 {
	if m != nil {
		return m.NumFrees
	}
	return 0
}

// MemTrackGetResponse captures debug information per allocation id
type MemTrackGetResponse struct {
	ApiStatus ApiStatus       `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *MemTrackSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *MemTrackStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *MemTrackStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *MemTrackGetResponse) Reset()                    { *m = MemTrackGetResponse{} }
func (m *MemTrackGetResponse) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetResponse) ProtoMessage()               {}
func (*MemTrackGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{39} }

func (m *MemTrackGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MemTrackGetResponse) GetSpec() *MemTrackSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MemTrackGetResponse) GetStatus() *MemTrackStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MemTrackGetResponse) GetStats() *MemTrackStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// MemTrackGetResponseMsg is batched MemTrackGetResponse
type MemTrackGetResponseMsg struct {
	Response []*MemTrackGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MemTrackGetResponseMsg) Reset()                    { *m = MemTrackGetResponseMsg{} }
func (m *MemTrackGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MemTrackGetResponseMsg) ProtoMessage()               {}
func (*MemTrackGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{40} }

func (m *MemTrackGetResponseMsg) GetResponse() []*MemTrackGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// SlabSpec identifies a slab
type SlabSpec struct {
	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id               uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ElementSize      uint32 `protobuf:"varint,3,opt,name=element_size,json=elementSize,proto3" json:"element_size,omitempty"`
	ElementsPerBlock uint32 `protobuf:"varint,4,opt,name=elements_per_block,json=elementsPerBlock,proto3" json:"elements_per_block,omitempty"`
	ThreadSafe       bool   `protobuf:"varint,5,opt,name=thread_safe,json=threadSafe,proto3" json:"thread_safe,omitempty"`
	GrowOnDemand     bool   `protobuf:"varint,6,opt,name=grow_on_demand,json=growOnDemand,proto3" json:"grow_on_demand,omitempty"`
	DelayDelete      bool   `protobuf:"varint,7,opt,name=delay_delete,json=delayDelete,proto3" json:"delay_delete,omitempty"`
	ZeroOnAllocation bool   `protobuf:"varint,8,opt,name=zero_on_allocation,json=zeroOnAllocation,proto3" json:"zero_on_allocation,omitempty"`
	RawBlockSize     uint32 `protobuf:"varint,9,opt,name=raw_block_size,json=rawBlockSize,proto3" json:"raw_block_size,omitempty"`
}

func (m *SlabSpec) Reset()                    { *m = SlabSpec{} }
func (m *SlabSpec) String() string            { return proto.CompactTextString(m) }
func (*SlabSpec) ProtoMessage()               {}
func (*SlabSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{41} }

func (m *SlabSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SlabSpec) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SlabSpec) GetElementSize() uint32 {
	if m != nil {
		return m.ElementSize
	}
	return 0
}

func (m *SlabSpec) GetElementsPerBlock() uint32 {
	if m != nil {
		return m.ElementsPerBlock
	}
	return 0
}

func (m *SlabSpec) GetThreadSafe() bool {
	if m != nil {
		return m.ThreadSafe
	}
	return false
}

func (m *SlabSpec) GetGrowOnDemand() bool {
	if m != nil {
		return m.GrowOnDemand
	}
	return false
}

func (m *SlabSpec) GetDelayDelete() bool {
	if m != nil {
		return m.DelayDelete
	}
	return false
}

func (m *SlabSpec) GetZeroOnAllocation() bool {
	if m != nil {
		return m.ZeroOnAllocation
	}
	return false
}

func (m *SlabSpec) GetRawBlockSize() uint32 {
	if m != nil {
		return m.RawBlockSize
	}
	return 0
}

// operational status of slab, if any
type SlabStatus struct {
}

func (m *SlabStatus) Reset()                    { *m = SlabStatus{} }
func (m *SlabStatus) String() string            { return proto.CompactTextString(m) }
func (*SlabStatus) ProtoMessage()               {}
func (*SlabStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{42} }

// per slab statistics
type SlabStats struct {
	NumElementsInUse uint32 `protobuf:"varint,1,opt,name=num_elements_in_use,json=numElementsInUse,proto3" json:"num_elements_in_use,omitempty"`
	NumAllocs        uint32 `protobuf:"varint,2,opt,name=num_allocs,json=numAllocs,proto3" json:"num_allocs,omitempty"`
	NumFrees         uint32 `protobuf:"varint,3,opt,name=num_frees,json=numFrees,proto3" json:"num_frees,omitempty"`
	NumAllocErrors   uint32 `protobuf:"varint,4,opt,name=num_alloc_errors,json=numAllocErrors,proto3" json:"num_alloc_errors,omitempty"`
	NumBlocks        uint32 `protobuf:"varint,5,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
}

func (m *SlabStats) Reset()                    { *m = SlabStats{} }
func (m *SlabStats) String() string            { return proto.CompactTextString(m) }
func (*SlabStats) ProtoMessage()               {}
func (*SlabStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{43} }

func (m *SlabStats) GetNumElementsInUse() uint32 {
	if m != nil {
		return m.NumElementsInUse
	}
	return 0
}

func (m *SlabStats) GetNumAllocs() uint32 {
	if m != nil {
		return m.NumAllocs
	}
	return 0
}

func (m *SlabStats) GetNumFrees() uint32 {
	if m != nil {
		return m.NumFrees
	}
	return 0
}

func (m *SlabStats) GetNumAllocErrors() uint32 {
	if m != nil {
		return m.NumAllocErrors
	}
	return 0
}

func (m *SlabStats) GetNumBlocks() uint32 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

// SlabGetRequest is GET request per slab
type SlabGetRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SlabGetRequest) Reset()                    { *m = SlabGetRequest{} }
func (m *SlabGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SlabGetRequest) ProtoMessage()               {}
func (*SlabGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{44} }

func (m *SlabGetRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// SlabGetResponse is batched GET request
type SlabGetRequestMsg struct {
	Request []*SlabGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SlabGetRequestMsg) Reset()                    { *m = SlabGetRequestMsg{} }
func (m *SlabGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SlabGetRequestMsg) ProtoMessage()               {}
func (*SlabGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{45} }

func (m *SlabGetRequestMsg) GetRequest() []*SlabGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SlabGetResponse captures all information about a slab
type SlabGetResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *SlabSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *SlabStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *SlabStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *SlabGetResponse) Reset()                    { *m = SlabGetResponse{} }
func (m *SlabGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SlabGetResponse) ProtoMessage()               {}
func (*SlabGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{46} }

func (m *SlabGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SlabGetResponse) GetSpec() *SlabSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *SlabGetResponse) GetStatus() *SlabStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SlabGetResponse) GetStats() *SlabStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// SlabGetResponseMsg is batched response for GET operation
type SlabGetResponseMsg struct {
	Response []*SlabGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SlabGetResponseMsg) Reset()                    { *m = SlabGetResponseMsg{} }
func (m *SlabGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SlabGetResponseMsg) ProtoMessage()               {}
func (*SlabGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{47} }

func (m *SlabGetResponseMsg) GetResponse() []*SlabGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// HashTableSpec identifies a hash table
type HashTableSpec struct {
	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NumBuckets     uint32 `protobuf:"varint,2,opt,name=num_buckets,json=numBuckets,proto3" json:"num_buckets,omitempty"`
	ThreadSafe     bool   `protobuf:"varint,3,opt,name=thread_safe,json=threadSafe,proto3" json:"thread_safe,omitempty"`
	MaxBucketDepth uint32 `protobuf:"varint,4,opt,name=max_bucket_depth,json=maxBucketDepth,proto3" json:"max_bucket_depth,omitempty"`
	AvgBucketDepth uint32 `protobuf:"varint,5,opt,name=avg_bucket_depth,json=avgBucketDepth,proto3" json:"avg_bucket_depth,omitempty"`
}

func (m *HashTableSpec) Reset()                    { *m = HashTableSpec{} }
func (m *HashTableSpec) String() string            { return proto.CompactTextString(m) }
func (*HashTableSpec) ProtoMessage()               {}
func (*HashTableSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{48} }

func (m *HashTableSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HashTableSpec) GetNumBuckets() uint32 {
	if m != nil {
		return m.NumBuckets
	}
	return 0
}

func (m *HashTableSpec) GetThreadSafe() bool {
	if m != nil {
		return m.ThreadSafe
	}
	return false
}

func (m *HashTableSpec) GetMaxBucketDepth() uint32 {
	if m != nil {
		return m.MaxBucketDepth
	}
	return 0
}

func (m *HashTableSpec) GetAvgBucketDepth() uint32 {
	if m != nil {
		return m.AvgBucketDepth
	}
	return 0
}

// operational status of slab, if any
type HashTableStatus struct {
}

func (m *HashTableStatus) Reset()                    { *m = HashTableStatus{} }
func (m *HashTableStatus) String() string            { return proto.CompactTextString(m) }
func (*HashTableStatus) ProtoMessage()               {}
func (*HashTableStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{49} }

// per hash table statisitics
type HashTableStats struct {
	NumEntries      uint32 `protobuf:"varint,1,opt,name=num_entries,json=numEntries,proto3" json:"num_entries,omitempty"`
	NumInserts      uint32 `protobuf:"varint,2,opt,name=num_inserts,json=numInserts,proto3" json:"num_inserts,omitempty"`
	NumInsertErrors uint32 `protobuf:"varint,3,opt,name=num_insert_errors,json=numInsertErrors,proto3" json:"num_insert_errors,omitempty"`
	NumDeletes      uint32 `protobuf:"varint,4,opt,name=num_deletes,json=numDeletes,proto3" json:"num_deletes,omitempty"`
	NumDeleteErrors uint32 `protobuf:"varint,5,opt,name=num_delete_errors,json=numDeleteErrors,proto3" json:"num_delete_errors,omitempty"`
	NumLookups      uint32 `protobuf:"varint,6,opt,name=num_lookups,json=numLookups,proto3" json:"num_lookups,omitempty"`
}

func (m *HashTableStats) Reset()                    { *m = HashTableStats{} }
func (m *HashTableStats) String() string            { return proto.CompactTextString(m) }
func (*HashTableStats) ProtoMessage()               {}
func (*HashTableStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{50} }

func (m *HashTableStats) GetNumEntries() uint32 {
	if m != nil {
		return m.NumEntries
	}
	return 0
}

func (m *HashTableStats) GetNumInserts() uint32 {
	if m != nil {
		return m.NumInserts
	}
	return 0
}

func (m *HashTableStats) GetNumInsertErrors() uint32 {
	if m != nil {
		return m.NumInsertErrors
	}
	return 0
}

func (m *HashTableStats) GetNumDeletes() uint32 {
	if m != nil {
		return m.NumDeletes
	}
	return 0
}

func (m *HashTableStats) GetNumDeleteErrors() uint32 {
	if m != nil {
		return m.NumDeleteErrors
	}
	return 0
}

func (m *HashTableStats) GetNumLookups() uint32 {
	if m != nil {
		return m.NumLookups
	}
	return 0
}

type HashTableGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *HashTableSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *HashTableStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *HashTableStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *HashTableGetResponse) Reset()                    { *m = HashTableGetResponse{} }
func (m *HashTableGetResponse) String() string            { return proto.CompactTextString(m) }
func (*HashTableGetResponse) ProtoMessage()               {}
func (*HashTableGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{51} }

func (m *HashTableGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *HashTableGetResponse) GetSpec() *HashTableSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *HashTableGetResponse) GetStatus() *HashTableStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *HashTableGetResponse) GetStats() *HashTableStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type HashTableGetResponseMsg struct {
	Response []*HashTableGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *HashTableGetResponseMsg) Reset()                    { *m = HashTableGetResponseMsg{} }
func (m *HashTableGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*HashTableGetResponseMsg) ProtoMessage()               {}
func (*HashTableGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{52} }

func (m *HashTableGetResponseMsg) GetResponse() []*HashTableGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type ThreadSpec struct {
	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id          uint32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PthreadId   uint32      `protobuf:"varint,3,opt,name=pthread_id,json=pthreadId,proto3" json:"pthread_id,omitempty"`
	Prio        int32       `protobuf:"varint,4,opt,name=prio,proto3" json:"prio,omitempty"`
	SchedPolicy SchedPolicy `protobuf:"varint,5,opt,name=sched_policy,json=schedPolicy,proto3,enum=debug.SchedPolicy" json:"sched_policy,omitempty"`
	Running     bool        `protobuf:"varint,6,opt,name=running,proto3" json:"running,omitempty"`
	Role        ThreadRole  `protobuf:"varint,7,opt,name=role,proto3,enum=debug.ThreadRole" json:"role,omitempty"`
	CoreMask    uint64      `protobuf:"varint,8,opt,name=core_mask,json=coreMask,proto3" json:"core_mask,omitempty"`
}

func (m *ThreadSpec) Reset()                    { *m = ThreadSpec{} }
func (m *ThreadSpec) String() string            { return proto.CompactTextString(m) }
func (*ThreadSpec) ProtoMessage()               {}
func (*ThreadSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{53} }

func (m *ThreadSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ThreadSpec) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ThreadSpec) GetPthreadId() uint32 {
	if m != nil {
		return m.PthreadId
	}
	return 0
}

func (m *ThreadSpec) GetPrio() int32 {
	if m != nil {
		return m.Prio
	}
	return 0
}

func (m *ThreadSpec) GetSchedPolicy() SchedPolicy {
	if m != nil {
		return m.SchedPolicy
	}
	return SchedPolicy_SCHED_POLICY_OTHER
}

func (m *ThreadSpec) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *ThreadSpec) GetRole() ThreadRole {
	if m != nil {
		return m.Role
	}
	return ThreadRole_THREAD_ROLE_CONTROL
}

func (m *ThreadSpec) GetCoreMask() uint64 {
	if m != nil {
		return m.CoreMask
	}
	return 0
}

type ThreadStatus struct {
	LastHb uint64 `protobuf:"varint,1,opt,name=last_hb,json=lastHb,proto3" json:"last_hb,omitempty"`
}

func (m *ThreadStatus) Reset()                    { *m = ThreadStatus{} }
func (m *ThreadStatus) String() string            { return proto.CompactTextString(m) }
func (*ThreadStatus) ProtoMessage()               {}
func (*ThreadStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{54} }

func (m *ThreadStatus) GetLastHb() uint64 {
	if m != nil {
		return m.LastHb
	}
	return 0
}

type ThreadStats struct {
}

func (m *ThreadStats) Reset()                    { *m = ThreadStats{} }
func (m *ThreadStats) String() string            { return proto.CompactTextString(m) }
func (*ThreadStats) ProtoMessage()               {}
func (*ThreadStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{55} }

type ThreadResponse struct {
	ApiStatus       ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	ControlCoreMask uint64        `protobuf:"varint,2,opt,name=control_core_mask,json=controlCoreMask,proto3" json:"control_core_mask,omitempty"`
	DataCoreMask    uint64        `protobuf:"varint,3,opt,name=data_core_mask,json=dataCoreMask,proto3" json:"data_core_mask,omitempty"`
	Spec            *ThreadSpec   `protobuf:"bytes,4,opt,name=spec" json:"spec,omitempty"`
	Status          *ThreadStatus `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	Stats           *ThreadStats  `protobuf:"bytes,6,opt,name=stats" json:"stats,omitempty"`
}

func (m *ThreadResponse) Reset()                    { *m = ThreadResponse{} }
func (m *ThreadResponse) String() string            { return proto.CompactTextString(m) }
func (*ThreadResponse) ProtoMessage()               {}
func (*ThreadResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{56} }

func (m *ThreadResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ThreadResponse) GetControlCoreMask() uint64 {
	if m != nil {
		return m.ControlCoreMask
	}
	return 0
}

func (m *ThreadResponse) GetDataCoreMask() uint64 {
	if m != nil {
		return m.DataCoreMask
	}
	return 0
}

func (m *ThreadResponse) GetSpec() *ThreadSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ThreadResponse) GetStatus() *ThreadStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ThreadResponse) GetStats() *ThreadStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type ThreadResponseMsg struct {
	Response []*ThreadResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *ThreadResponseMsg) Reset()                    { *m = ThreadResponseMsg{} }
func (m *ThreadResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*ThreadResponseMsg) ProtoMessage()               {}
func (*ThreadResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{57} }

func (m *ThreadResponseMsg) GetResponse() []*ThreadResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type TraceSpec struct {
	TraceLevel TraceLevel `protobuf:"varint,1,opt,name=trace_level,json=traceLevel,proto3,enum=debug.TraceLevel" json:"trace_level,omitempty"`
}

func (m *TraceSpec) Reset()                    { *m = TraceSpec{} }
func (m *TraceSpec) String() string            { return proto.CompactTextString(m) }
func (*TraceSpec) ProtoMessage()               {}
func (*TraceSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{58} }

func (m *TraceSpec) GetTraceLevel() TraceLevel {
	if m != nil {
		return m.TraceLevel
	}
	return TraceLevel_TRACE_LEVEL_NONE
}

type TraceRequestMsg struct {
	Request []*TraceSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TraceRequestMsg) Reset()                    { *m = TraceRequestMsg{} }
func (m *TraceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TraceRequestMsg) ProtoMessage()               {}
func (*TraceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{59} }

func (m *TraceRequestMsg) GetRequest() []*TraceSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

type TraceResponse struct {
	ApiStatus  ApiStatus  `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	TraceLevel TraceLevel `protobuf:"varint,2,opt,name=trace_level,json=traceLevel,proto3,enum=debug.TraceLevel" json:"trace_level,omitempty"`
}

func (m *TraceResponse) Reset()                    { *m = TraceResponse{} }
func (m *TraceResponse) String() string            { return proto.CompactTextString(m) }
func (*TraceResponse) ProtoMessage()               {}
func (*TraceResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{60} }

func (m *TraceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TraceResponse) GetTraceLevel() TraceLevel {
	if m != nil {
		return m.TraceLevel
	}
	return TraceLevel_TRACE_LEVEL_NONE
}

type TraceResponseMsg struct {
	Response []*TraceResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TraceResponseMsg) Reset()                    { *m = TraceResponseMsg{} }
func (m *TraceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TraceResponseMsg) ProtoMessage()               {}
func (*TraceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{61} }

func (m *TraceResponseMsg) GetResponse() []*TraceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MpuTraceSpec struct {
	Enable       bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	TraceEnable  bool   `protobuf:"varint,2,opt,name=trace_enable,json=traceEnable,proto3" json:"trace_enable,omitempty"`
	PhvDebug     bool   `protobuf:"varint,3,opt,name=phv_debug,json=phvDebug,proto3" json:"phv_debug,omitempty"`
	PhvError     bool   `protobuf:"varint,4,opt,name=phv_error,json=phvError,proto3" json:"phv_error,omitempty"`
	WatchPc      uint64 `protobuf:"varint,5,opt,name=watch_pc,json=watchPc,proto3" json:"watch_pc,omitempty"`
	BaseAddr     uint64 `protobuf:"varint,6,opt,name=base_addr,json=baseAddr,proto3" json:"base_addr,omitempty"`
	BufSize      uint32 `protobuf:"varint,7,opt,name=buf_size,json=bufSize,proto3" json:"buf_size,omitempty"`
	TableKey     bool   `protobuf:"varint,8,opt,name=table_key,json=tableKey,proto3" json:"table_key,omitempty"`
	Instructions bool   `protobuf:"varint,9,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Wrap         bool   `protobuf:"varint,10,opt,name=wrap,proto3" json:"wrap,omitempty"`
	Reset_       bool   `protobuf:"varint,11,opt,name=reset,proto3" json:"reset,omitempty"`
}

func (m *MpuTraceSpec) Reset()                    { *m = MpuTraceSpec{} }
func (m *MpuTraceSpec) String() string            { return proto.CompactTextString(m) }
func (*MpuTraceSpec) ProtoMessage()               {}
func (*MpuTraceSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{62} }

func (m *MpuTraceSpec) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *MpuTraceSpec) GetTraceEnable() bool {
	if m != nil {
		return m.TraceEnable
	}
	return false
}

func (m *MpuTraceSpec) GetPhvDebug() bool {
	if m != nil {
		return m.PhvDebug
	}
	return false
}

func (m *MpuTraceSpec) GetPhvError() bool {
	if m != nil {
		return m.PhvError
	}
	return false
}

func (m *MpuTraceSpec) GetWatchPc() uint64 {
	if m != nil {
		return m.WatchPc
	}
	return 0
}

func (m *MpuTraceSpec) GetBaseAddr() uint64 {
	if m != nil {
		return m.BaseAddr
	}
	return 0
}

func (m *MpuTraceSpec) GetBufSize() uint32 {
	if m != nil {
		return m.BufSize
	}
	return 0
}

func (m *MpuTraceSpec) GetTableKey() bool {
	if m != nil {
		return m.TableKey
	}
	return false
}

func (m *MpuTraceSpec) GetInstructions() bool {
	if m != nil {
		return m.Instructions
	}
	return false
}

func (m *MpuTraceSpec) GetWrap() bool {
	if m != nil {
		return m.Wrap
	}
	return false
}

func (m *MpuTraceSpec) GetReset_() bool {
	if m != nil {
		return m.Reset_
	}
	return false
}

// parameters to enable/disable MPU tracing
type MpuTraceRequest struct {
	PipelineType MpuTracePipelineType `protobuf:"varint,1,opt,name=pipeline_type,json=pipelineType,proto3,enum=debug.MpuTracePipelineType" json:"pipeline_type,omitempty"`
	StageId      uint32               `protobuf:"varint,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Mpu          uint32               `protobuf:"varint,3,opt,name=mpu,proto3" json:"mpu,omitempty"`
	Spec         *MpuTraceSpec        `protobuf:"bytes,4,opt,name=spec" json:"spec,omitempty"`
}

func (m *MpuTraceRequest) Reset()                    { *m = MpuTraceRequest{} }
func (m *MpuTraceRequest) String() string            { return proto.CompactTextString(m) }
func (*MpuTraceRequest) ProtoMessage()               {}
func (*MpuTraceRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{63} }

func (m *MpuTraceRequest) GetPipelineType() MpuTracePipelineType {
	if m != nil {
		return m.PipelineType
	}
	return MpuTracePipelineType_MPU_TRACE_PIPELINE_NONE
}

func (m *MpuTraceRequest) GetStageId() uint32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *MpuTraceRequest) GetMpu() uint32 {
	if m != nil {
		return m.Mpu
	}
	return 0
}

func (m *MpuTraceRequest) GetSpec() *MpuTraceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Batched MPU trace enable/disable request msg
type MpuTraceRequestMsg struct {
	Request []*MpuTraceRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *MpuTraceRequestMsg) Reset()                    { *m = MpuTraceRequestMsg{} }
func (m *MpuTraceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*MpuTraceRequestMsg) ProtoMessage()               {}
func (*MpuTraceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{64} }

func (m *MpuTraceRequestMsg) GetRequest() []*MpuTraceRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// MPU trace enable/disable status
type MpuTraceResponse struct {
	ApiStatus  ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec       *MpuTraceSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	DebugIndex uint32        `protobuf:"varint,3,opt,name=debug_index,json=debugIndex,proto3" json:"debug_index,omitempty"`
}

func (m *MpuTraceResponse) Reset()                    { *m = MpuTraceResponse{} }
func (m *MpuTraceResponse) String() string            { return proto.CompactTextString(m) }
func (*MpuTraceResponse) ProtoMessage()               {}
func (*MpuTraceResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{65} }

func (m *MpuTraceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *MpuTraceResponse) GetSpec() *MpuTraceSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MpuTraceResponse) GetDebugIndex() uint32 {
	if m != nil {
		return m.DebugIndex
	}
	return 0
}

// Batched MPU trace response
type MpuTraceResponseMsg struct {
	Response []*MpuTraceResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *MpuTraceResponseMsg) Reset()                    { *m = MpuTraceResponseMsg{} }
func (m *MpuTraceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*MpuTraceResponseMsg) ProtoMessage()               {}
func (*MpuTraceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{66} }

func (m *MpuTraceResponseMsg) GetResponse() []*MpuTraceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// Flush logs response
type FlushLogsResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *FlushLogsResponse) Reset()                    { *m = FlushLogsResponse{} }
func (m *FlushLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*FlushLogsResponse) ProtoMessage()               {}
func (*FlushLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{67} }

func (m *FlushLogsResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// Flush logs response message
type FlushLogsResponseMsg struct {
	Response []*FlushLogsResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *FlushLogsResponseMsg) Reset()                    { *m = FlushLogsResponseMsg{} }
func (m *FlushLogsResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*FlushLogsResponseMsg) ProtoMessage()               {}
func (*FlushLogsResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{68} }

func (m *FlushLogsResponseMsg) GetResponse() []*FlushLogsResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type AgingTraceUpdateRequest struct {
	AgingTraceEnable bool `protobuf:"varint,1,opt,name=aging_trace_enable,json=agingTraceEnable,proto3" json:"aging_trace_enable,omitempty"`
}

func (m *AgingTraceUpdateRequest) Reset()                    { *m = AgingTraceUpdateRequest{} }
func (m *AgingTraceUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*AgingTraceUpdateRequest) ProtoMessage()               {}
func (*AgingTraceUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{69} }

func (m *AgingTraceUpdateRequest) GetAgingTraceEnable() bool {
	if m != nil {
		return m.AgingTraceEnable
	}
	return false
}

type AgingTraceUpdateRequestMsg struct {
	Request []*AgingTraceUpdateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *AgingTraceUpdateRequestMsg) Reset()                    { *m = AgingTraceUpdateRequestMsg{} }
func (m *AgingTraceUpdateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*AgingTraceUpdateRequestMsg) ProtoMessage()               {}
func (*AgingTraceUpdateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{70} }

func (m *AgingTraceUpdateRequestMsg) GetRequest() []*AgingTraceUpdateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type FteTraceUpdateRequest struct {
	FteTraceEnable bool `protobuf:"varint,1,opt,name=fte_trace_enable,json=fteTraceEnable,proto3" json:"fte_trace_enable,omitempty"`
}

func (m *FteTraceUpdateRequest) Reset()                    { *m = FteTraceUpdateRequest{} }
func (m *FteTraceUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*FteTraceUpdateRequest) ProtoMessage()               {}
func (*FteTraceUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{71} }

func (m *FteTraceUpdateRequest) GetFteTraceEnable() bool {
	if m != nil {
		return m.FteTraceEnable
	}
	return false
}

type FteTraceUpdateRequestMsg struct {
	Request []*FteTraceUpdateRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *FteTraceUpdateRequestMsg) Reset()                    { *m = FteTraceUpdateRequestMsg{} }
func (m *FteTraceUpdateRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*FteTraceUpdateRequestMsg) ProtoMessage()               {}
func (*FteTraceUpdateRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{72} }

func (m *FteTraceUpdateRequestMsg) GetRequest() []*FteTraceUpdateRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type ClockSpec struct {
	HardwareClock uint64      `protobuf:"varint,1,opt,name=hardware_clock,json=hardwareClock,proto3" json:"hardware_clock,omitempty"`
	ClockOpType   ClockOpType `protobuf:"varint,2,opt,name=clock_op_type,json=clockOpType,proto3,enum=debug.ClockOpType" json:"clock_op_type,omitempty"`
	SoftwareDelta uint64      `protobuf:"varint,3,opt,name=software_delta,json=softwareDelta,proto3" json:"software_delta,omitempty"`
	SoftwareClock uint64      `protobuf:"varint,4,opt,name=software_clock,json=softwareClock,proto3" json:"software_clock,omitempty"`
}

func (m *ClockSpec) Reset()                    { *m = ClockSpec{} }
func (m *ClockSpec) String() string            { return proto.CompactTextString(m) }
func (*ClockSpec) ProtoMessage()               {}
func (*ClockSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{73} }

func (m *ClockSpec) GetHardwareClock() uint64 {
	if m != nil {
		return m.HardwareClock
	}
	return 0
}

func (m *ClockSpec) GetClockOpType() ClockOpType {
	if m != nil {
		return m.ClockOpType
	}
	return ClockOpType_CLOCK_DELTA_OP_ADD
}

func (m *ClockSpec) GetSoftwareDelta() uint64 {
	if m != nil {
		return m.SoftwareDelta
	}
	return 0
}

func (m *ClockSpec) GetSoftwareClock() uint64 {
	if m != nil {
		return m.SoftwareClock
	}
	return 0
}

type ClockStatus struct {
}

func (m *ClockStatus) Reset()                    { *m = ClockStatus{} }
func (m *ClockStatus) String() string            { return proto.CompactTextString(m) }
func (*ClockStatus) ProtoMessage()               {}
func (*ClockStatus) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{74} }

type ClockStats struct {
}

func (m *ClockStats) Reset()                    { *m = ClockStats{} }
func (m *ClockStats) String() string            { return proto.CompactTextString(m) }
func (*ClockStats) ProtoMessage()               {}
func (*ClockStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{75} }

type ClockResponse struct {
	ApiStatus ApiStatus    `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *ClockSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *ClockStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *ClockStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *ClockResponse) Reset()                    { *m = ClockResponse{} }
func (m *ClockResponse) String() string            { return proto.CompactTextString(m) }
func (*ClockResponse) ProtoMessage()               {}
func (*ClockResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{76} }

func (m *ClockResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *ClockResponse) GetSpec() *ClockSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ClockResponse) GetStatus() *ClockStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClockResponse) GetStats() *ClockStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type Bandwidth struct {
	Read  float64 `protobuf:"fixed64,1,opt,name=read,proto3" json:"read,omitempty"`
	Write float64 `protobuf:"fixed64,2,opt,name=write,proto3" json:"write,omitempty"`
}

func (m *Bandwidth) Reset()                    { *m = Bandwidth{} }
func (m *Bandwidth) String() string            { return proto.CompactTextString(m) }
func (*Bandwidth) ProtoMessage()               {}
func (*Bandwidth) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{77} }

func (m *Bandwidth) GetRead() float64 {
	if m != nil {
		return m.Read
	}
	return 0
}

func (m *Bandwidth) GetWrite() float64 {
	if m != nil {
		return m.Write
	}
	return 0
}

type HbmBwGetRequest struct {
	NumSamples    uint32 `protobuf:"varint,1,opt,name=num_samples,json=numSamples,proto3" json:"num_samples,omitempty"`
	SleepInterval uint32 `protobuf:"varint,2,opt,name=sleep_interval,json=sleepInterval,proto3" json:"sleep_interval,omitempty"`
}

func (m *HbmBwGetRequest) Reset()                    { *m = HbmBwGetRequest{} }
func (m *HbmBwGetRequest) String() string            { return proto.CompactTextString(m) }
func (*HbmBwGetRequest) ProtoMessage()               {}
func (*HbmBwGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{78} }

func (m *HbmBwGetRequest) GetNumSamples() uint32 {
	if m != nil {
		return m.NumSamples
	}
	return 0
}

func (m *HbmBwGetRequest) GetSleepInterval() uint32 {
	if m != nil {
		return m.SleepInterval
	}
	return 0
}

type HbmBwGetRequestMsg struct {
	Request []*HbmBwGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *HbmBwGetRequestMsg) Reset()                    { *m = HbmBwGetRequestMsg{} }
func (m *HbmBwGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*HbmBwGetRequestMsg) ProtoMessage()               {}
func (*HbmBwGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{79} }

func (m *HbmBwGetRequestMsg) GetRequest() []*HbmBwGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type HbmBwGetResponse struct {
	Type    CapriBlock `protobuf:"varint,1,opt,name=type,proto3,enum=debug.CapriBlock" json:"type,omitempty"`
	Average *Bandwidth `protobuf:"bytes,2,opt,name=average" json:"average,omitempty"`
	Maximum *Bandwidth `protobuf:"bytes,3,opt,name=maximum" json:"maximum,omitempty"`
	ClkDiff uint64     `protobuf:"varint,4,opt,name=clk_diff,json=clkDiff,proto3" json:"clk_diff,omitempty"`
}

func (m *HbmBwGetResponse) Reset()                    { *m = HbmBwGetResponse{} }
func (m *HbmBwGetResponse) String() string            { return proto.CompactTextString(m) }
func (*HbmBwGetResponse) ProtoMessage()               {}
func (*HbmBwGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{80} }

func (m *HbmBwGetResponse) GetType() CapriBlock {
	if m != nil {
		return m.Type
	}
	return CapriBlock_CAPRI_BLOCK_PB
}

func (m *HbmBwGetResponse) GetAverage() *Bandwidth {
	if m != nil {
		return m.Average
	}
	return nil
}

func (m *HbmBwGetResponse) GetMaximum() *Bandwidth {
	if m != nil {
		return m.Maximum
	}
	return nil
}

func (m *HbmBwGetResponse) GetClkDiff() uint64 {
	if m != nil {
		return m.ClkDiff
	}
	return 0
}

type HbmBwGetResponseMsg struct {
	Response []*HbmBwGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *HbmBwGetResponseMsg) Reset()                    { *m = HbmBwGetResponseMsg{} }
func (m *HbmBwGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*HbmBwGetResponseMsg) ProtoMessage()               {}
func (*HbmBwGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{81} }

func (m *HbmBwGetResponseMsg) GetResponse() []*HbmBwGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type LlcSetupRequest struct {
	Type LlcCounterType `protobuf:"varint,1,opt,name=type,proto3,enum=debug.LlcCounterType" json:"type,omitempty"`
}

func (m *LlcSetupRequest) Reset()                    { *m = LlcSetupRequest{} }
func (m *LlcSetupRequest) String() string            { return proto.CompactTextString(m) }
func (*LlcSetupRequest) ProtoMessage()               {}
func (*LlcSetupRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{82} }

func (m *LlcSetupRequest) GetType() LlcCounterType {
	if m != nil {
		return m.Type
	}
	return LlcCounterType_LLC_COUNTER_CACHE_NONE
}

type LlcSetupRequestMsg struct {
	Request []*LlcSetupRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *LlcSetupRequestMsg) Reset()                    { *m = LlcSetupRequestMsg{} }
func (m *LlcSetupRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*LlcSetupRequestMsg) ProtoMessage()               {}
func (*LlcSetupRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{83} }

func (m *LlcSetupRequestMsg) GetRequest() []*LlcSetupRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type LlcSetupResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *LlcSetupResponse) Reset()                    { *m = LlcSetupResponse{} }
func (m *LlcSetupResponse) String() string            { return proto.CompactTextString(m) }
func (*LlcSetupResponse) ProtoMessage()               {}
func (*LlcSetupResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{84} }

func (m *LlcSetupResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type LlcSetupResponseMsg struct {
	Response []*LlcSetupResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LlcSetupResponseMsg) Reset()                    { *m = LlcSetupResponseMsg{} }
func (m *LlcSetupResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LlcSetupResponseMsg) ProtoMessage()               {}
func (*LlcSetupResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{85} }

func (m *LlcSetupResponseMsg) GetResponse() []*LlcSetupResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type LlcGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Type      LlcCounterType `protobuf:"varint,2,opt,name=type,proto3,enum=debug.LlcCounterType" json:"type,omitempty"`
	Count     []uint32       `protobuf:"varint,3,rep,packed,name=count" json:"count,omitempty"`
}

func (m *LlcGetResponse) Reset()                    { *m = LlcGetResponse{} }
func (m *LlcGetResponse) String() string            { return proto.CompactTextString(m) }
func (*LlcGetResponse) ProtoMessage()               {}
func (*LlcGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{86} }

func (m *LlcGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *LlcGetResponse) GetType() LlcCounterType {
	if m != nil {
		return m.Type
	}
	return LlcCounterType_LLC_COUNTER_CACHE_NONE
}

func (m *LlcGetResponse) GetCount() []uint32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type LlcGetResponseMsg struct {
	Response []*LlcGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *LlcGetResponseMsg) Reset()                    { *m = LlcGetResponseMsg{} }
func (m *LlcGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*LlcGetResponseMsg) ProtoMessage()               {}
func (*LlcGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{87} }

func (m *LlcGetResponseMsg) GetResponse() []*LlcGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type HbmCacheSram struct {
	Type   HbmSramType `protobuf:"varint,1,opt,name=type,proto3,enum=debug.HbmSramType" json:"type,omitempty"`
	Enable bool        `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *HbmCacheSram) Reset()                    { *m = HbmCacheSram{} }
func (m *HbmCacheSram) String() string            { return proto.CompactTextString(m) }
func (*HbmCacheSram) ProtoMessage()               {}
func (*HbmCacheSram) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{88} }

func (m *HbmCacheSram) GetType() HbmSramType {
	if m != nil {
		return m.Type
	}
	return HbmSramType_SRAM_P4_INGRESS
}

func (m *HbmCacheSram) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type HbmCacheLlc struct {
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *HbmCacheLlc) Reset()                    { *m = HbmCacheLlc{} }
func (m *HbmCacheLlc) String() string            { return proto.CompactTextString(m) }
func (*HbmCacheLlc) ProtoMessage()               {}
func (*HbmCacheLlc) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{89} }

func (m *HbmCacheLlc) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type HbmCacheRequest struct {
	// Types that are valid to be assigned to CacheRegions:
	//	*HbmCacheRequest_Sram
	//	*HbmCacheRequest_Llc
	CacheRegions isHbmCacheRequest_CacheRegions `protobuf_oneof:"cache_regions"`
}

func (m *HbmCacheRequest) Reset()                    { *m = HbmCacheRequest{} }
func (m *HbmCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*HbmCacheRequest) ProtoMessage()               {}
func (*HbmCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{90} }

type isHbmCacheRequest_CacheRegions interface {
	isHbmCacheRequest_CacheRegions()
	MarshalTo([]byte) (int, error)
	Size() int
}

type HbmCacheRequest_Sram struct {
	Sram *HbmCacheSram `protobuf:"bytes,1,opt,name=sram,oneof"`
}
type HbmCacheRequest_Llc struct {
	Llc *HbmCacheLlc `protobuf:"bytes,2,opt,name=llc,oneof"`
}

func (*HbmCacheRequest_Sram) isHbmCacheRequest_CacheRegions() {}
func (*HbmCacheRequest_Llc) isHbmCacheRequest_CacheRegions()  {}

func (m *HbmCacheRequest) GetCacheRegions() isHbmCacheRequest_CacheRegions {
	if m != nil {
		return m.CacheRegions
	}
	return nil
}

func (m *HbmCacheRequest) GetSram() *HbmCacheSram {
	if x, ok := m.GetCacheRegions().(*HbmCacheRequest_Sram); ok {
		return x.Sram
	}
	return nil
}

func (m *HbmCacheRequest) GetLlc() *HbmCacheLlc {
	if x, ok := m.GetCacheRegions().(*HbmCacheRequest_Llc); ok {
		return x.Llc
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HbmCacheRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HbmCacheRequest_OneofMarshaler, _HbmCacheRequest_OneofUnmarshaler, _HbmCacheRequest_OneofSizer, []interface{}{
		(*HbmCacheRequest_Sram)(nil),
		(*HbmCacheRequest_Llc)(nil),
	}
}

func _HbmCacheRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HbmCacheRequest)
	// cache_regions
	switch x := m.CacheRegions.(type) {
	case *HbmCacheRequest_Sram:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sram); err != nil {
			return err
		}
	case *HbmCacheRequest_Llc:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Llc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HbmCacheRequest.CacheRegions has unexpected type %T", x)
	}
	return nil
}

func _HbmCacheRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HbmCacheRequest)
	switch tag {
	case 1: // cache_regions.sram
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HbmCacheSram)
		err := b.DecodeMessage(msg)
		m.CacheRegions = &HbmCacheRequest_Sram{msg}
		return true, err
	case 2: // cache_regions.llc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HbmCacheLlc)
		err := b.DecodeMessage(msg)
		m.CacheRegions = &HbmCacheRequest_Llc{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HbmCacheRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HbmCacheRequest)
	// cache_regions
	switch x := m.CacheRegions.(type) {
	case *HbmCacheRequest_Sram:
		s := proto.Size(x.Sram)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HbmCacheRequest_Llc:
		s := proto.Size(x.Llc)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HbmCacheRequestMsg struct {
	Request []*HbmCacheRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *HbmCacheRequestMsg) Reset()                    { *m = HbmCacheRequestMsg{} }
func (m *HbmCacheRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*HbmCacheRequestMsg) ProtoMessage()               {}
func (*HbmCacheRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{91} }

func (m *HbmCacheRequestMsg) GetRequest() []*HbmCacheRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type HbmCacheResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *HbmCacheResponse) Reset()                    { *m = HbmCacheResponse{} }
func (m *HbmCacheResponse) String() string            { return proto.CompactTextString(m) }
func (*HbmCacheResponse) ProtoMessage()               {}
func (*HbmCacheResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{92} }

func (m *HbmCacheResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type HbmCacheResponseMsg struct {
	Response []*HbmCacheResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *HbmCacheResponseMsg) Reset()                    { *m = HbmCacheResponseMsg{} }
func (m *HbmCacheResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*HbmCacheResponseMsg) ProtoMessage()               {}
func (*HbmCacheResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{93} }

func (m *HbmCacheResponseMsg) GetResponse() []*HbmCacheResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CosStats struct {
	Cos           uint32 `protobuf:"varint,1,opt,name=cos,proto3" json:"cos,omitempty"`
	DoorbellCount uint32 `protobuf:"varint,2,opt,name=doorbell_count,json=doorbellCount,proto3" json:"doorbell_count,omitempty"`
	XonStatus     bool   `protobuf:"varint,3,opt,name=xon_status,json=xonStatus,proto3" json:"xon_status,omitempty"`
}

func (m *CosStats) Reset()                    { *m = CosStats{} }
func (m *CosStats) String() string            { return proto.CompactTextString(m) }
func (*CosStats) ProtoMessage()               {}
func (*CosStats) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{94} }

func (m *CosStats) GetCos() uint32 {
	if m != nil {
		return m.Cos
	}
	return 0
}

func (m *CosStats) GetDoorbellCount() uint32 {
	if m != nil {
		return m.DoorbellCount
	}
	return 0
}

func (m *CosStats) GetXonStatus() bool {
	if m != nil {
		return m.XonStatus
	}
	return false
}

type SchedulerStatsResponse struct {
	ApiStatus           ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	DoorbellSetCount    uint32      `protobuf:"varint,2,opt,name=doorbell_set_count,json=doorbellSetCount,proto3" json:"doorbell_set_count,omitempty"`
	DoorbellClearCount  uint32      `protobuf:"varint,3,opt,name=doorbell_clear_count,json=doorbellClearCount,proto3" json:"doorbell_clear_count,omitempty"`
	RatelimitStartCount uint32      `protobuf:"varint,4,opt,name=ratelimit_start_count,json=ratelimitStartCount,proto3" json:"ratelimit_start_count,omitempty"`
	RatelimitStopCount  uint32      `protobuf:"varint,5,opt,name=ratelimit_stop_count,json=ratelimitStopCount,proto3" json:"ratelimit_stop_count,omitempty"`
	CosEntry            []*CosStats `protobuf:"bytes,6,rep,name=cos_entry,json=cosEntry" json:"cos_entry,omitempty"`
}

func (m *SchedulerStatsResponse) Reset()                    { *m = SchedulerStatsResponse{} }
func (m *SchedulerStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*SchedulerStatsResponse) ProtoMessage()               {}
func (*SchedulerStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{95} }

func (m *SchedulerStatsResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *SchedulerStatsResponse) GetDoorbellSetCount() uint32 {
	if m != nil {
		return m.DoorbellSetCount
	}
	return 0
}

func (m *SchedulerStatsResponse) GetDoorbellClearCount() uint32 {
	if m != nil {
		return m.DoorbellClearCount
	}
	return 0
}

func (m *SchedulerStatsResponse) GetRatelimitStartCount() uint32 {
	if m != nil {
		return m.RatelimitStartCount
	}
	return 0
}

func (m *SchedulerStatsResponse) GetRatelimitStopCount() uint32 {
	if m != nil {
		return m.RatelimitStopCount
	}
	return 0
}

func (m *SchedulerStatsResponse) GetCosEntry() []*CosStats {
	if m != nil {
		return m.CosEntry
	}
	return nil
}

type SchedulerStatsResponseMsg struct {
	Response []*SchedulerStatsResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SchedulerStatsResponseMsg) Reset()                    { *m = SchedulerStatsResponseMsg{} }
func (m *SchedulerStatsResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*SchedulerStatsResponseMsg) ProtoMessage()               {}
func (*SchedulerStatsResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{96} }

func (m *SchedulerStatsResponseMsg) GetResponse() []*SchedulerStatsResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QRange struct {
	// inclusive of both q_beg and q_end
	QBeg uint32 `protobuf:"varint,1,opt,name=q_beg,json=qBeg,proto3" json:"q_beg,omitempty"`
	QEnd uint32 `protobuf:"varint,2,opt,name=q_end,json=qEnd,proto3" json:"q_end,omitempty"`
}

func (m *QRange) Reset()                    { *m = QRange{} }
func (m *QRange) String() string            { return proto.CompactTextString(m) }
func (*QRange) ProtoMessage()               {}
func (*QRange) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{97} }

func (m *QRange) GetQBeg() uint32 {
	if m != nil {
		return m.QBeg
	}
	return 0
}

func (m *QRange) GetQEnd() uint32 {
	if m != nil {
		return m.QEnd
	}
	return 0
}

type QRanges struct {
	Range []*QRange `protobuf:"bytes,1,rep,name=range" json:"range,omitempty"`
}

func (m *QRanges) Reset()                    { *m = QRanges{} }
func (m *QRanges) String() string            { return proto.CompactTextString(m) }
func (*QRanges) ProtoMessage()               {}
func (*QRanges) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{98} }

func (m *QRanges) GetRange() []*QRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type SchedulerActiveQRequest struct {
	Lif   *LifKeyHandle `protobuf:"bytes,1,opt,name=lif" json:"lif,omitempty"`
	QType LifQPurpose   `protobuf:"varint,2,opt,name=q_type,json=qType,proto3,enum=intf.LifQPurpose" json:"q_type,omitempty"`
	// Types that are valid to be assigned to NumOrRanges:
	//	*SchedulerActiveQRequest_QNum
	//	*SchedulerActiveQRequest_QRanges
	NumOrRanges isSchedulerActiveQRequest_NumOrRanges `protobuf_oneof:"num_or_ranges"`
	PollCount   uint32                                `protobuf:"varint,5,opt,name=poll_count,json=pollCount,proto3" json:"poll_count,omitempty"`
}

func (m *SchedulerActiveQRequest) Reset()                    { *m = SchedulerActiveQRequest{} }
func (m *SchedulerActiveQRequest) String() string            { return proto.CompactTextString(m) }
func (*SchedulerActiveQRequest) ProtoMessage()               {}
func (*SchedulerActiveQRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{99} }

type isSchedulerActiveQRequest_NumOrRanges interface {
	isSchedulerActiveQRequest_NumOrRanges()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SchedulerActiveQRequest_QNum struct {
	QNum uint32 `protobuf:"varint,3,opt,name=q_num,json=qNum,proto3,oneof"`
}
type SchedulerActiveQRequest_QRanges struct {
	QRanges *QRanges `protobuf:"bytes,4,opt,name=q_ranges,json=qRanges,oneof"`
}

func (*SchedulerActiveQRequest_QNum) isSchedulerActiveQRequest_NumOrRanges()    {}
func (*SchedulerActiveQRequest_QRanges) isSchedulerActiveQRequest_NumOrRanges() {}

func (m *SchedulerActiveQRequest) GetNumOrRanges() isSchedulerActiveQRequest_NumOrRanges {
	if m != nil {
		return m.NumOrRanges
	}
	return nil
}

func (m *SchedulerActiveQRequest) GetLif() *LifKeyHandle {
	if m != nil {
		return m.Lif
	}
	return nil
}

func (m *SchedulerActiveQRequest) GetQType() LifQPurpose {
	if m != nil {
		return m.QType
	}
	return LifQPurpose_LIF_QUEUE_PURPOSE_NONE
}

func (m *SchedulerActiveQRequest) GetQNum() uint32 {
	if x, ok := m.GetNumOrRanges().(*SchedulerActiveQRequest_QNum); ok {
		return x.QNum
	}
	return 0
}

func (m *SchedulerActiveQRequest) GetQRanges() *QRanges {
	if x, ok := m.GetNumOrRanges().(*SchedulerActiveQRequest_QRanges); ok {
		return x.QRanges
	}
	return nil
}

func (m *SchedulerActiveQRequest) GetPollCount() uint32 {
	if m != nil {
		return m.PollCount
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SchedulerActiveQRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SchedulerActiveQRequest_OneofMarshaler, _SchedulerActiveQRequest_OneofUnmarshaler, _SchedulerActiveQRequest_OneofSizer, []interface{}{
		(*SchedulerActiveQRequest_QNum)(nil),
		(*SchedulerActiveQRequest_QRanges)(nil),
	}
}

func _SchedulerActiveQRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SchedulerActiveQRequest)
	// num_or_ranges
	switch x := m.NumOrRanges.(type) {
	case *SchedulerActiveQRequest_QNum:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.QNum))
	case *SchedulerActiveQRequest_QRanges:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QRanges); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SchedulerActiveQRequest.NumOrRanges has unexpected type %T", x)
	}
	return nil
}

func _SchedulerActiveQRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SchedulerActiveQRequest)
	switch tag {
	case 3: // num_or_ranges.q_num
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.NumOrRanges = &SchedulerActiveQRequest_QNum{uint32(x)}
		return true, err
	case 4: // num_or_ranges.q_ranges
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QRanges)
		err := b.DecodeMessage(msg)
		m.NumOrRanges = &SchedulerActiveQRequest_QRanges{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SchedulerActiveQRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SchedulerActiveQRequest)
	// num_or_ranges
	switch x := m.NumOrRanges.(type) {
	case *SchedulerActiveQRequest_QNum:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.QNum))
	case *SchedulerActiveQRequest_QRanges:
		s := proto.Size(x.QRanges)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SchedulerActiveQRequestMsg struct {
	Request []*SchedulerActiveQRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *SchedulerActiveQRequestMsg) Reset()         { *m = SchedulerActiveQRequestMsg{} }
func (m *SchedulerActiveQRequestMsg) String() string { return proto.CompactTextString(m) }
func (*SchedulerActiveQRequestMsg) ProtoMessage()    {}
func (*SchedulerActiveQRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorDebug, []int{100}
}

func (m *SchedulerActiveQRequestMsg) GetRequest() []*SchedulerActiveQRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type SchedulerActiveQResponse struct {
	ActiveQNum []uint32 `protobuf:"varint,1,rep,packed,name=active_q_num,json=activeQNum" json:"active_q_num,omitempty"`
}

func (m *SchedulerActiveQResponse) Reset()                    { *m = SchedulerActiveQResponse{} }
func (m *SchedulerActiveQResponse) String() string            { return proto.CompactTextString(m) }
func (*SchedulerActiveQResponse) ProtoMessage()               {}
func (*SchedulerActiveQResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{101} }

func (m *SchedulerActiveQResponse) GetActiveQNum() []uint32 {
	if m != nil {
		return m.ActiveQNum
	}
	return nil
}

type SchedulerActiveQResponseMsg struct {
	Response []*SchedulerActiveQResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *SchedulerActiveQResponseMsg) Reset()         { *m = SchedulerActiveQResponseMsg{} }
func (m *SchedulerActiveQResponseMsg) String() string { return proto.CompactTextString(m) }
func (*SchedulerActiveQResponseMsg) ProtoMessage()    {}
func (*SchedulerActiveQResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorDebug, []int{102}
}

func (m *SchedulerActiveQResponseMsg) GetResponse() []*SchedulerActiveQResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type PacketBufferPause struct {
	Pause bool `protobuf:"varint,1,opt,name=pause,proto3" json:"pause,omitempty"`
}

func (m *PacketBufferPause) Reset()                    { *m = PacketBufferPause{} }
func (m *PacketBufferPause) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferPause) ProtoMessage()               {}
func (*PacketBufferPause) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{103} }

func (m *PacketBufferPause) GetPause() bool {
	if m != nil {
		return m.Pause
	}
	return false
}

type PacketBufferSpan struct {
	SpanThreshold uint32 `protobuf:"varint,1,opt,name=span_threshold,json=spanThreshold,proto3" json:"span_threshold,omitempty"`
}

func (m *PacketBufferSpan) Reset()                    { *m = PacketBufferSpan{} }
func (m *PacketBufferSpan) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferSpan) ProtoMessage()               {}
func (*PacketBufferSpan) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{104} }

func (m *PacketBufferSpan) GetSpanThreshold() uint32 {
	if m != nil {
		return m.SpanThreshold
	}
	return 0
}

type PacketBufferSpec struct {
	Pause *PacketBufferPause `protobuf:"bytes,1,opt,name=pause" json:"pause,omitempty"`
	Span  *PacketBufferSpan  `protobuf:"bytes,2,opt,name=span" json:"span,omitempty"`
}

func (m *PacketBufferSpec) Reset()                    { *m = PacketBufferSpec{} }
func (m *PacketBufferSpec) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferSpec) ProtoMessage()               {}
func (*PacketBufferSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{105} }

func (m *PacketBufferSpec) GetPause() *PacketBufferPause {
	if m != nil {
		return m.Pause
	}
	return nil
}

func (m *PacketBufferSpec) GetSpan() *PacketBufferSpan {
	if m != nil {
		return m.Span
	}
	return nil
}

type PacketBufferRequest struct {
	Spec *PacketBufferSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *PacketBufferRequest) Reset()                    { *m = PacketBufferRequest{} }
func (m *PacketBufferRequest) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferRequest) ProtoMessage()               {}
func (*PacketBufferRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{106} }

func (m *PacketBufferRequest) GetSpec() *PacketBufferSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type PacketBufferRequestMsg struct {
	Request []*PacketBufferRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PacketBufferRequestMsg) Reset()                    { *m = PacketBufferRequestMsg{} }
func (m *PacketBufferRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferRequestMsg) ProtoMessage()               {}
func (*PacketBufferRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{107} }

func (m *PacketBufferRequestMsg) GetRequest() []*PacketBufferRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type PacketBufferResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *PacketBufferResponse) Reset()                    { *m = PacketBufferResponse{} }
func (m *PacketBufferResponse) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferResponse) ProtoMessage()               {}
func (*PacketBufferResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{108} }

func (m *PacketBufferResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type PacketBufferResponseMsg struct {
	Response []*PacketBufferResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PacketBufferResponseMsg) Reset()                    { *m = PacketBufferResponseMsg{} }
func (m *PacketBufferResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PacketBufferResponseMsg) ProtoMessage()               {}
func (*PacketBufferResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{109} }

func (m *PacketBufferResponseMsg) GetResponse() []*PacketBufferResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type QueueCredit struct {
	Queue  uint32 `protobuf:"varint,1,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Credit uint32 `protobuf:"varint,2,opt,name=Credit,proto3" json:"Credit,omitempty"`
}

func (m *QueueCredit) Reset()                    { *m = QueueCredit{} }
func (m *QueueCredit) String() string            { return proto.CompactTextString(m) }
func (*QueueCredit) ProtoMessage()               {}
func (*QueueCredit) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{110} }

func (m *QueueCredit) GetQueue() uint32 {
	if m != nil {
		return m.Queue
	}
	return 0
}

func (m *QueueCredit) GetCredit() uint32 {
	if m != nil {
		return m.Credit
	}
	return 0
}

type PortQueueCredit struct {
	Port        uint32         `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	QueueCredit []*QueueCredit `protobuf:"bytes,2,rep,name=QueueCredit" json:"QueueCredit,omitempty"`
}

func (m *PortQueueCredit) Reset()                    { *m = PortQueueCredit{} }
func (m *PortQueueCredit) String() string            { return proto.CompactTextString(m) }
func (*PortQueueCredit) ProtoMessage()               {}
func (*PortQueueCredit) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{111} }

func (m *PortQueueCredit) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortQueueCredit) GetQueueCredit() []*QueueCredit {
	if m != nil {
		return m.QueueCredit
	}
	return nil
}

type QueueCreditsGetResponse struct {
	ApiStatus       ApiStatus          `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty" venice:api_status`
	PortQueueCredit []*PortQueueCredit `protobuf:"bytes,2,rep,name=PortQueueCredit" json:"PortQueueCredit,omitempty"`
}

func (m *QueueCreditsGetResponse) Reset()                    { *m = QueueCreditsGetResponse{} }
func (m *QueueCreditsGetResponse) String() string            { return proto.CompactTextString(m) }
func (*QueueCreditsGetResponse) ProtoMessage()               {}
func (*QueueCreditsGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{112} }

func (m *QueueCreditsGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *QueueCreditsGetResponse) GetPortQueueCredit() []*PortQueueCredit {
	if m != nil {
		return m.PortQueueCredit
	}
	return nil
}

type SessionCtrlSpec struct {
	MaxSession uint64 `protobuf:"varint,1,opt,name=max_session,json=maxSession,proto3" json:"max_session,omitempty"`
}

func (m *SessionCtrlSpec) Reset()                    { *m = SessionCtrlSpec{} }
func (m *SessionCtrlSpec) String() string            { return proto.CompactTextString(m) }
func (*SessionCtrlSpec) ProtoMessage()               {}
func (*SessionCtrlSpec) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{113} }

func (m *SessionCtrlSpec) GetMaxSession() uint64 {
	if m != nil {
		return m.MaxSession
	}
	return 0
}

type SessionCtrlRequestMsg struct {
	Spec []*SessionCtrlSpec `protobuf:"bytes,1,rep,name=spec" json:"spec,omitempty"`
}

func (m *SessionCtrlRequestMsg) Reset()                    { *m = SessionCtrlRequestMsg{} }
func (m *SessionCtrlRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*SessionCtrlRequestMsg) ProtoMessage()               {}
func (*SessionCtrlRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{114} }

func (m *SessionCtrlRequestMsg) GetSpec() []*SessionCtrlSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type OifListGetRequest struct {
	Id uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *OifListGetRequest) Reset()                    { *m = OifListGetRequest{} }
func (m *OifListGetRequest) String() string            { return proto.CompactTextString(m) }
func (*OifListGetRequest) ProtoMessage()               {}
func (*OifListGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{115} }

func (m *OifListGetRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type OifListGetRequestMsg struct {
	Request []*OifListGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *OifListGetRequestMsg) Reset()                    { *m = OifListGetRequestMsg{} }
func (m *OifListGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*OifListGetRequestMsg) ProtoMessage()               {}
func (*OifListGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{116} }

func (m *OifListGetRequestMsg) GetRequest() []*OifListGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type OifListGetResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	OifList   *OifList  `protobuf:"bytes,2,opt,name=oif_list,json=oifList" json:"oif_list,omitempty"`
}

func (m *OifListGetResponse) Reset()                    { *m = OifListGetResponse{} }
func (m *OifListGetResponse) String() string            { return proto.CompactTextString(m) }
func (*OifListGetResponse) ProtoMessage()               {}
func (*OifListGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{117} }

func (m *OifListGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *OifListGetResponse) GetOifList() *OifList {
	if m != nil {
		return m.OifList
	}
	return nil
}

type OifListGetResponseMsg struct {
	ApiStatus ApiStatus             `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Response  []*OifListGetResponse `protobuf:"bytes,2,rep,name=response" json:"response,omitempty"`
}

func (m *OifListGetResponseMsg) Reset()                    { *m = OifListGetResponseMsg{} }
func (m *OifListGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*OifListGetResponseMsg) ProtoMessage()               {}
func (*OifListGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{118} }

func (m *OifListGetResponseMsg) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *OifListGetResponseMsg) GetResponse() []*OifListGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type CommandCtxt struct {
	Version int64   `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Cmd     Command `protobuf:"varint,2,opt,name=Cmd,proto3,enum=debug.Command" json:"Cmd,omitempty"`
}

func (m *CommandCtxt) Reset()                    { *m = CommandCtxt{} }
func (m *CommandCtxt) String() string            { return proto.CompactTextString(m) }
func (*CommandCtxt) ProtoMessage()               {}
func (*CommandCtxt) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{119} }

func (m *CommandCtxt) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CommandCtxt) GetCmd() Command {
	if m != nil {
		return m.Cmd
	}
	return Command_CMD_NONE
}

type CommandResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
}

func (m *CommandResponse) Reset()                    { *m = CommandResponse{} }
func (m *CommandResponse) String() string            { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()               {}
func (*CommandResponse) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{120} }

func (m *CommandResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func init() {
	proto.RegisterType((*FteSpanRequest)(nil), "debug.FteSpanRequest")
	proto.RegisterType((*FteSpanRequestMsg)(nil), "debug.FteSpanRequestMsg")
	proto.RegisterType((*FteSpanResponse)(nil), "debug.FteSpanResponse")
	proto.RegisterType((*FteSpanResponseMsg)(nil), "debug.FteSpanResponseMsg")
	proto.RegisterType((*SnakeTestRequest)(nil), "debug.SnakeTestRequest")
	proto.RegisterType((*SnakeTestRequestMsg)(nil), "debug.SnakeTestRequestMsg")
	proto.RegisterType((*SnakeTestResponse)(nil), "debug.SnakeTestResponse")
	proto.RegisterType((*SnakeTestResponseMsg)(nil), "debug.SnakeTestResponseMsg")
	proto.RegisterType((*SnakeTestDeleteRequest)(nil), "debug.SnakeTestDeleteRequest")
	proto.RegisterType((*SnakeTestDeleteRequestMsg)(nil), "debug.SnakeTestDeleteRequestMsg")
	proto.RegisterType((*SnakeTestDeleteResponse)(nil), "debug.SnakeTestDeleteResponse")
	proto.RegisterType((*SnakeTestDeleteResponseMsg)(nil), "debug.SnakeTestDeleteResponseMsg")
	proto.RegisterType((*GenericOpnRequest)(nil), "debug.GenericOpnRequest")
	proto.RegisterType((*GenericOpnRequestMsg)(nil), "debug.GenericOpnRequestMsg")
	proto.RegisterType((*GenericOpnStatus)(nil), "debug.GenericOpnStatus")
	proto.RegisterType((*GenericOpnResponse)(nil), "debug.GenericOpnResponse")
	proto.RegisterType((*GenericOpnResponseMsg)(nil), "debug.GenericOpnResponseMsg")
	proto.RegisterType((*RegisterRequest)(nil), "debug.RegisterRequest")
	proto.RegisterType((*RegisterRequestMsg)(nil), "debug.RegisterRequestMsg")
	proto.RegisterType((*RegisterResponse)(nil), "debug.RegisterResponse")
	proto.RegisterType((*RegisterResponseMsg)(nil), "debug.RegisterResponseMsg")
	proto.RegisterType((*MemoryRequest)(nil), "debug.MemoryRequest")
	proto.RegisterType((*MemoryRequestMsg)(nil), "debug.MemoryRequestMsg")
	proto.RegisterType((*MemoryResponse)(nil), "debug.MemoryResponse")
	proto.RegisterType((*MemoryResponseMsg)(nil), "debug.MemoryResponseMsg")
	proto.RegisterType((*MemoryRawRequest)(nil), "debug.MemoryRawRequest")
	proto.RegisterType((*MemoryRawRequestMsg)(nil), "debug.MemoryRawRequestMsg")
	proto.RegisterType((*MemoryRawResponse)(nil), "debug.MemoryRawResponse")
	proto.RegisterType((*MemoryRawResponseMsg)(nil), "debug.MemoryRawResponseMsg")
	proto.RegisterType((*MemoryRawUpdateRequest)(nil), "debug.MemoryRawUpdateRequest")
	proto.RegisterType((*MemoryRawUpdateRequestMsg)(nil), "debug.MemoryRawUpdateRequestMsg")
	proto.RegisterType((*MemoryRawUpdateResponse)(nil), "debug.MemoryRawUpdateResponse")
	proto.RegisterType((*MemoryRawUpdateResponseMsg)(nil), "debug.MemoryRawUpdateResponseMsg")
	proto.RegisterType((*RegisterData)(nil), "debug.RegisterData")
	proto.RegisterType((*MemTrackSpec)(nil), "debug.MemTrackSpec")
	proto.RegisterType((*MemTrackGetRequest)(nil), "debug.MemTrackGetRequest")
	proto.RegisterType((*MemTrackGetRequestMsg)(nil), "debug.MemTrackGetRequestMsg")
	proto.RegisterType((*MemTrackStatus)(nil), "debug.MemTrackStatus")
	proto.RegisterType((*MemTrackStats)(nil), "debug.MemTrackStats")
	proto.RegisterType((*MemTrackGetResponse)(nil), "debug.MemTrackGetResponse")
	proto.RegisterType((*MemTrackGetResponseMsg)(nil), "debug.MemTrackGetResponseMsg")
	proto.RegisterType((*SlabSpec)(nil), "debug.SlabSpec")
	proto.RegisterType((*SlabStatus)(nil), "debug.SlabStatus")
	proto.RegisterType((*SlabStats)(nil), "debug.SlabStats")
	proto.RegisterType((*SlabGetRequest)(nil), "debug.SlabGetRequest")
	proto.RegisterType((*SlabGetRequestMsg)(nil), "debug.SlabGetRequestMsg")
	proto.RegisterType((*SlabGetResponse)(nil), "debug.SlabGetResponse")
	proto.RegisterType((*SlabGetResponseMsg)(nil), "debug.SlabGetResponseMsg")
	proto.RegisterType((*HashTableSpec)(nil), "debug.HashTableSpec")
	proto.RegisterType((*HashTableStatus)(nil), "debug.HashTableStatus")
	proto.RegisterType((*HashTableStats)(nil), "debug.HashTableStats")
	proto.RegisterType((*HashTableGetResponse)(nil), "debug.HashTableGetResponse")
	proto.RegisterType((*HashTableGetResponseMsg)(nil), "debug.HashTableGetResponseMsg")
	proto.RegisterType((*ThreadSpec)(nil), "debug.ThreadSpec")
	proto.RegisterType((*ThreadStatus)(nil), "debug.ThreadStatus")
	proto.RegisterType((*ThreadStats)(nil), "debug.ThreadStats")
	proto.RegisterType((*ThreadResponse)(nil), "debug.ThreadResponse")
	proto.RegisterType((*ThreadResponseMsg)(nil), "debug.ThreadResponseMsg")
	proto.RegisterType((*TraceSpec)(nil), "debug.TraceSpec")
	proto.RegisterType((*TraceRequestMsg)(nil), "debug.TraceRequestMsg")
	proto.RegisterType((*TraceResponse)(nil), "debug.TraceResponse")
	proto.RegisterType((*TraceResponseMsg)(nil), "debug.TraceResponseMsg")
	proto.RegisterType((*MpuTraceSpec)(nil), "debug.MpuTraceSpec")
	proto.RegisterType((*MpuTraceRequest)(nil), "debug.MpuTraceRequest")
	proto.RegisterType((*MpuTraceRequestMsg)(nil), "debug.MpuTraceRequestMsg")
	proto.RegisterType((*MpuTraceResponse)(nil), "debug.MpuTraceResponse")
	proto.RegisterType((*MpuTraceResponseMsg)(nil), "debug.MpuTraceResponseMsg")
	proto.RegisterType((*FlushLogsResponse)(nil), "debug.FlushLogsResponse")
	proto.RegisterType((*FlushLogsResponseMsg)(nil), "debug.FlushLogsResponseMsg")
	proto.RegisterType((*AgingTraceUpdateRequest)(nil), "debug.AgingTraceUpdateRequest")
	proto.RegisterType((*AgingTraceUpdateRequestMsg)(nil), "debug.AgingTraceUpdateRequestMsg")
	proto.RegisterType((*FteTraceUpdateRequest)(nil), "debug.FteTraceUpdateRequest")
	proto.RegisterType((*FteTraceUpdateRequestMsg)(nil), "debug.FteTraceUpdateRequestMsg")
	proto.RegisterType((*ClockSpec)(nil), "debug.ClockSpec")
	proto.RegisterType((*ClockStatus)(nil), "debug.ClockStatus")
	proto.RegisterType((*ClockStats)(nil), "debug.ClockStats")
	proto.RegisterType((*ClockResponse)(nil), "debug.ClockResponse")
	proto.RegisterType((*Bandwidth)(nil), "debug.Bandwidth")
	proto.RegisterType((*HbmBwGetRequest)(nil), "debug.HbmBwGetRequest")
	proto.RegisterType((*HbmBwGetRequestMsg)(nil), "debug.HbmBwGetRequestMsg")
	proto.RegisterType((*HbmBwGetResponse)(nil), "debug.HbmBwGetResponse")
	proto.RegisterType((*HbmBwGetResponseMsg)(nil), "debug.HbmBwGetResponseMsg")
	proto.RegisterType((*LlcSetupRequest)(nil), "debug.LlcSetupRequest")
	proto.RegisterType((*LlcSetupRequestMsg)(nil), "debug.LlcSetupRequestMsg")
	proto.RegisterType((*LlcSetupResponse)(nil), "debug.LlcSetupResponse")
	proto.RegisterType((*LlcSetupResponseMsg)(nil), "debug.LlcSetupResponseMsg")
	proto.RegisterType((*LlcGetResponse)(nil), "debug.LlcGetResponse")
	proto.RegisterType((*LlcGetResponseMsg)(nil), "debug.LlcGetResponseMsg")
	proto.RegisterType((*HbmCacheSram)(nil), "debug.HbmCacheSram")
	proto.RegisterType((*HbmCacheLlc)(nil), "debug.HbmCacheLlc")
	proto.RegisterType((*HbmCacheRequest)(nil), "debug.HbmCacheRequest")
	proto.RegisterType((*HbmCacheRequestMsg)(nil), "debug.HbmCacheRequestMsg")
	proto.RegisterType((*HbmCacheResponse)(nil), "debug.HbmCacheResponse")
	proto.RegisterType((*HbmCacheResponseMsg)(nil), "debug.HbmCacheResponseMsg")
	proto.RegisterType((*CosStats)(nil), "debug.CosStats")
	proto.RegisterType((*SchedulerStatsResponse)(nil), "debug.SchedulerStatsResponse")
	proto.RegisterType((*SchedulerStatsResponseMsg)(nil), "debug.SchedulerStatsResponseMsg")
	proto.RegisterType((*QRange)(nil), "debug.QRange")
	proto.RegisterType((*QRanges)(nil), "debug.QRanges")
	proto.RegisterType((*SchedulerActiveQRequest)(nil), "debug.SchedulerActiveQRequest")
	proto.RegisterType((*SchedulerActiveQRequestMsg)(nil), "debug.SchedulerActiveQRequestMsg")
	proto.RegisterType((*SchedulerActiveQResponse)(nil), "debug.SchedulerActiveQResponse")
	proto.RegisterType((*SchedulerActiveQResponseMsg)(nil), "debug.SchedulerActiveQResponseMsg")
	proto.RegisterType((*PacketBufferPause)(nil), "debug.PacketBufferPause")
	proto.RegisterType((*PacketBufferSpan)(nil), "debug.PacketBufferSpan")
	proto.RegisterType((*PacketBufferSpec)(nil), "debug.PacketBufferSpec")
	proto.RegisterType((*PacketBufferRequest)(nil), "debug.PacketBufferRequest")
	proto.RegisterType((*PacketBufferRequestMsg)(nil), "debug.PacketBufferRequestMsg")
	proto.RegisterType((*PacketBufferResponse)(nil), "debug.PacketBufferResponse")
	proto.RegisterType((*PacketBufferResponseMsg)(nil), "debug.PacketBufferResponseMsg")
	proto.RegisterType((*QueueCredit)(nil), "debug.QueueCredit")
	proto.RegisterType((*PortQueueCredit)(nil), "debug.PortQueueCredit")
	proto.RegisterType((*QueueCreditsGetResponse)(nil), "debug.QueueCreditsGetResponse")
	proto.RegisterType((*SessionCtrlSpec)(nil), "debug.SessionCtrlSpec")
	proto.RegisterType((*SessionCtrlRequestMsg)(nil), "debug.SessionCtrlRequestMsg")
	proto.RegisterType((*OifListGetRequest)(nil), "debug.OifListGetRequest")
	proto.RegisterType((*OifListGetRequestMsg)(nil), "debug.OifListGetRequestMsg")
	proto.RegisterType((*OifListGetResponse)(nil), "debug.OifListGetResponse")
	proto.RegisterType((*OifListGetResponseMsg)(nil), "debug.OifListGetResponseMsg")
	proto.RegisterType((*CommandCtxt)(nil), "debug.CommandCtxt")
	proto.RegisterType((*CommandResponse)(nil), "debug.CommandResponse")
	proto.RegisterEnum("debug.SchedPolicy", SchedPolicy_name, SchedPolicy_value)
	proto.RegisterEnum("debug.ThreadRole", ThreadRole_name, ThreadRole_value)
	proto.RegisterEnum("debug.TraceLevel", TraceLevel_name, TraceLevel_value)
	proto.RegisterEnum("debug.MpuTracePipelineType", MpuTracePipelineType_name, MpuTracePipelineType_value)
	proto.RegisterEnum("debug.ClockOpType", ClockOpType_name, ClockOpType_value)
	proto.RegisterEnum("debug.CapriBlock", CapriBlock_name, CapriBlock_value)
	proto.RegisterEnum("debug.LlcCounterType", LlcCounterType_name, LlcCounterType_value)
	proto.RegisterEnum("debug.HbmSramType", HbmSramType_name, HbmSramType_value)
	proto.RegisterEnum("debug.Command", Command_name, Command_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Debug service

type DebugClient interface {
	// low level APIs for debugging
	RegisterGet(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error)
	RegisterUpdate(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error)
	MemoryGet(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error)
	MemoryUpdate(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error)
	MemoryRawGet(ctx context.Context, in *MemoryRawRequestMsg, opts ...grpc.CallOption) (*MemoryRawResponseMsg, error)
	MemoryRawUpdate(ctx context.Context, in *MemoryRawUpdateRequestMsg, opts ...grpc.CallOption) (*MemoryRawUpdateResponseMsg, error)
	MpuTraceUpdate(ctx context.Context, in *MpuTraceRequestMsg, opts ...grpc.CallOption) (*MpuTraceResponseMsg, error)
	MemTrackGet(ctx context.Context, in *MemTrackGetRequestMsg, opts ...grpc.CallOption) (*MemTrackGetResponseMsg, error)
	SlabGet(ctx context.Context, in *SlabGetRequestMsg, opts ...grpc.CallOption) (*SlabGetResponseMsg, error)
	HashTableGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HashTableGetResponseMsg, error)
	TraceUpdate(ctx context.Context, in *TraceRequestMsg, opts ...grpc.CallOption) (*TraceResponseMsg, error)
	TraceGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TraceResponseMsg, error)
	ThreadGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ThreadResponseMsg, error)
	ClockGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClockResponse, error)
	FlushLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FlushLogsResponseMsg, error)
	// generic debug operations
	// used only for linkmgr
	GenericOpn(ctx context.Context, in *GenericOpnRequestMsg, opts ...grpc.CallOption) (*GenericOpnResponseMsg, error)
	// FTE span
	FteSpanGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FteSpanResponseMsg, error)
	FteSpanUpdate(ctx context.Context, in *FteSpanRequestMsg, opts ...grpc.CallOption) (*FteSpanResponseMsg, error)
	// Snake Test
	SnakeTestCreate(ctx context.Context, in *SnakeTestRequestMsg, opts ...grpc.CallOption) (*SnakeTestResponseMsg, error)
	SnakeTestDelete(ctx context.Context, in *SnakeTestDeleteRequestMsg, opts ...grpc.CallOption) (*SnakeTestDeleteResponseMsg, error)
	SnakeTestGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnakeTestResponseMsg, error)
	HbmBwGet(ctx context.Context, in *HbmBwGetRequestMsg, opts ...grpc.CallOption) (*HbmBwGetResponseMsg, error)
	LlcClear(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	LlcSetup(ctx context.Context, in *LlcSetupRequestMsg, opts ...grpc.CallOption) (*LlcSetupResponseMsg, error)
	LlcGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LlcGetResponseMsg, error)
	HbmCacheSetup(ctx context.Context, in *HbmCacheRequestMsg, opts ...grpc.CallOption) (*HbmCacheResponseMsg, error)
	SchedulerStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SchedulerStatsResponseMsg, error)
	SchedulerActiveQGet(ctx context.Context, in *SchedulerActiveQRequestMsg, opts ...grpc.CallOption) (*SchedulerActiveQResponseMsg, error)
	PacketBufferUpdate(ctx context.Context, in *PacketBufferRequestMsg, opts ...grpc.CallOption) (*PacketBufferResponseMsg, error)
	XcvrValidCheckEnable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	XcvrValidCheckDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	MemoryTrim(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	QueueCreditsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueueCreditsGetResponse, error)
	SessionCtrlUpdate(ctx context.Context, in *SessionCtrlRequestMsg, opts ...grpc.CallOption) (*Empty, error)
	OifListGet(ctx context.Context, in *OifListGetRequestMsg, opts ...grpc.CallOption) (Debug_OifListGetClient, error)
	AgingTraceUpdate(ctx context.Context, in *AgingTraceUpdateRequestMsg, opts ...grpc.CallOption) (*Empty, error)
	FteTraceUpdate(ctx context.Context, in *FteTraceUpdateRequestMsg, opts ...grpc.CallOption) (*Empty, error)
}

type debugClient struct {
	cc *grpc.ClientConn
}

func NewDebugClient(cc *grpc.ClientConn) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) RegisterGet(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error) {
	out := new(RegisterResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/RegisterGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) RegisterUpdate(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error) {
	out := new(RegisterResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/RegisterUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemoryGet(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error) {
	out := new(MemoryResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MemoryGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemoryUpdate(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error) {
	out := new(MemoryResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MemoryUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemoryRawGet(ctx context.Context, in *MemoryRawRequestMsg, opts ...grpc.CallOption) (*MemoryRawResponseMsg, error) {
	out := new(MemoryRawResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MemoryRawGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemoryRawUpdate(ctx context.Context, in *MemoryRawUpdateRequestMsg, opts ...grpc.CallOption) (*MemoryRawUpdateResponseMsg, error) {
	out := new(MemoryRawUpdateResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MemoryRawUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MpuTraceUpdate(ctx context.Context, in *MpuTraceRequestMsg, opts ...grpc.CallOption) (*MpuTraceResponseMsg, error) {
	out := new(MpuTraceResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MpuTraceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemTrackGet(ctx context.Context, in *MemTrackGetRequestMsg, opts ...grpc.CallOption) (*MemTrackGetResponseMsg, error) {
	out := new(MemTrackGetResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/MemTrackGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SlabGet(ctx context.Context, in *SlabGetRequestMsg, opts ...grpc.CallOption) (*SlabGetResponseMsg, error) {
	out := new(SlabGetResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/SlabGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) HashTableGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HashTableGetResponseMsg, error) {
	out := new(HashTableGetResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/HashTableGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) TraceUpdate(ctx context.Context, in *TraceRequestMsg, opts ...grpc.CallOption) (*TraceResponseMsg, error) {
	out := new(TraceResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/TraceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) TraceGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TraceResponseMsg, error) {
	out := new(TraceResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/TraceGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) ThreadGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ThreadResponseMsg, error) {
	out := new(ThreadResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/ThreadGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) ClockGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClockResponse, error) {
	out := new(ClockResponse)
	err := grpc.Invoke(ctx, "/debug.Debug/ClockGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) FlushLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FlushLogsResponseMsg, error) {
	out := new(FlushLogsResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/FlushLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) GenericOpn(ctx context.Context, in *GenericOpnRequestMsg, opts ...grpc.CallOption) (*GenericOpnResponseMsg, error) {
	out := new(GenericOpnResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/GenericOpn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) FteSpanGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FteSpanResponseMsg, error) {
	out := new(FteSpanResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/FteSpanGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) FteSpanUpdate(ctx context.Context, in *FteSpanRequestMsg, opts ...grpc.CallOption) (*FteSpanResponseMsg, error) {
	out := new(FteSpanResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/FteSpanUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SnakeTestCreate(ctx context.Context, in *SnakeTestRequestMsg, opts ...grpc.CallOption) (*SnakeTestResponseMsg, error) {
	out := new(SnakeTestResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/SnakeTestCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SnakeTestDelete(ctx context.Context, in *SnakeTestDeleteRequestMsg, opts ...grpc.CallOption) (*SnakeTestDeleteResponseMsg, error) {
	out := new(SnakeTestDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/SnakeTestDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SnakeTestGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnakeTestResponseMsg, error) {
	out := new(SnakeTestResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/SnakeTestGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) HbmBwGet(ctx context.Context, in *HbmBwGetRequestMsg, opts ...grpc.CallOption) (*HbmBwGetResponseMsg, error) {
	out := new(HbmBwGetResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/HbmBwGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) LlcClear(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/debug.Debug/LlcClear", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) LlcSetup(ctx context.Context, in *LlcSetupRequestMsg, opts ...grpc.CallOption) (*LlcSetupResponseMsg, error) {
	out := new(LlcSetupResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/LlcSetup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) LlcGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LlcGetResponseMsg, error) {
	out := new(LlcGetResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/LlcGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) HbmCacheSetup(ctx context.Context, in *HbmCacheRequestMsg, opts ...grpc.CallOption) (*HbmCacheResponseMsg, error) {
	out := new(HbmCacheResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/HbmCacheSetup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SchedulerStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SchedulerStatsResponseMsg, error) {
	out := new(SchedulerStatsResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/SchedulerStatsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SchedulerActiveQGet(ctx context.Context, in *SchedulerActiveQRequestMsg, opts ...grpc.CallOption) (*SchedulerActiveQResponseMsg, error) {
	out := new(SchedulerActiveQResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/SchedulerActiveQGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) PacketBufferUpdate(ctx context.Context, in *PacketBufferRequestMsg, opts ...grpc.CallOption) (*PacketBufferResponseMsg, error) {
	out := new(PacketBufferResponseMsg)
	err := grpc.Invoke(ctx, "/debug.Debug/PacketBufferUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) XcvrValidCheckEnable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/debug.Debug/XcvrValidCheckEnable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) XcvrValidCheckDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/debug.Debug/XcvrValidCheckDisable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) MemoryTrim(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/debug.Debug/MemoryTrim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) QueueCreditsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueueCreditsGetResponse, error) {
	out := new(QueueCreditsGetResponse)
	err := grpc.Invoke(ctx, "/debug.Debug/QueueCreditsGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) SessionCtrlUpdate(ctx context.Context, in *SessionCtrlRequestMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/debug.Debug/SessionCtrlUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) OifListGet(ctx context.Context, in *OifListGetRequestMsg, opts ...grpc.CallOption) (Debug_OifListGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Debug_serviceDesc.Streams[0], c.cc, "/debug.Debug/OifListGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugOifListGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_OifListGetClient interface {
	Recv() (*OifListGetResponseMsg, error)
	grpc.ClientStream
}

type debugOifListGetClient struct {
	grpc.ClientStream
}

func (x *debugOifListGetClient) Recv() (*OifListGetResponseMsg, error) {
	m := new(OifListGetResponseMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugClient) AgingTraceUpdate(ctx context.Context, in *AgingTraceUpdateRequestMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/debug.Debug/AgingTraceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugClient) FteTraceUpdate(ctx context.Context, in *FteTraceUpdateRequestMsg, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/debug.Debug/FteTraceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Debug service

type DebugServer interface {
	// low level APIs for debugging
	RegisterGet(context.Context, *RegisterRequestMsg) (*RegisterResponseMsg, error)
	RegisterUpdate(context.Context, *RegisterRequestMsg) (*RegisterResponseMsg, error)
	MemoryGet(context.Context, *MemoryRequestMsg) (*MemoryResponseMsg, error)
	MemoryUpdate(context.Context, *MemoryRequestMsg) (*MemoryResponseMsg, error)
	MemoryRawGet(context.Context, *MemoryRawRequestMsg) (*MemoryRawResponseMsg, error)
	MemoryRawUpdate(context.Context, *MemoryRawUpdateRequestMsg) (*MemoryRawUpdateResponseMsg, error)
	MpuTraceUpdate(context.Context, *MpuTraceRequestMsg) (*MpuTraceResponseMsg, error)
	MemTrackGet(context.Context, *MemTrackGetRequestMsg) (*MemTrackGetResponseMsg, error)
	SlabGet(context.Context, *SlabGetRequestMsg) (*SlabGetResponseMsg, error)
	HashTableGet(context.Context, *Empty) (*HashTableGetResponseMsg, error)
	TraceUpdate(context.Context, *TraceRequestMsg) (*TraceResponseMsg, error)
	TraceGet(context.Context, *Empty) (*TraceResponseMsg, error)
	ThreadGet(context.Context, *Empty) (*ThreadResponseMsg, error)
	ClockGet(context.Context, *Empty) (*ClockResponse, error)
	FlushLogs(context.Context, *Empty) (*FlushLogsResponseMsg, error)
	// generic debug operations
	// used only for linkmgr
	GenericOpn(context.Context, *GenericOpnRequestMsg) (*GenericOpnResponseMsg, error)
	// FTE span
	FteSpanGet(context.Context, *Empty) (*FteSpanResponseMsg, error)
	FteSpanUpdate(context.Context, *FteSpanRequestMsg) (*FteSpanResponseMsg, error)
	// Snake Test
	SnakeTestCreate(context.Context, *SnakeTestRequestMsg) (*SnakeTestResponseMsg, error)
	SnakeTestDelete(context.Context, *SnakeTestDeleteRequestMsg) (*SnakeTestDeleteResponseMsg, error)
	SnakeTestGet(context.Context, *Empty) (*SnakeTestResponseMsg, error)
	HbmBwGet(context.Context, *HbmBwGetRequestMsg) (*HbmBwGetResponseMsg, error)
	LlcClear(context.Context, *Empty) (*Empty, error)
	LlcSetup(context.Context, *LlcSetupRequestMsg) (*LlcSetupResponseMsg, error)
	LlcGet(context.Context, *Empty) (*LlcGetResponseMsg, error)
	HbmCacheSetup(context.Context, *HbmCacheRequestMsg) (*HbmCacheResponseMsg, error)
	SchedulerStatsGet(context.Context, *Empty) (*SchedulerStatsResponseMsg, error)
	SchedulerActiveQGet(context.Context, *SchedulerActiveQRequestMsg) (*SchedulerActiveQResponseMsg, error)
	PacketBufferUpdate(context.Context, *PacketBufferRequestMsg) (*PacketBufferResponseMsg, error)
	XcvrValidCheckEnable(context.Context, *Empty) (*Empty, error)
	XcvrValidCheckDisable(context.Context, *Empty) (*Empty, error)
	MemoryTrim(context.Context, *Empty) (*Empty, error)
	QueueCreditsGet(context.Context, *Empty) (*QueueCreditsGetResponse, error)
	SessionCtrlUpdate(context.Context, *SessionCtrlRequestMsg) (*Empty, error)
	OifListGet(*OifListGetRequestMsg, Debug_OifListGetServer) error
	AgingTraceUpdate(context.Context, *AgingTraceUpdateRequestMsg) (*Empty, error)
	FteTraceUpdate(context.Context, *FteTraceUpdateRequestMsg) (*Empty, error)
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_RegisterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).RegisterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/RegisterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).RegisterGet(ctx, req.(*RegisterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_RegisterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).RegisterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/RegisterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).RegisterUpdate(ctx, req.(*RegisterRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemoryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemoryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemoryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemoryGet(ctx, req.(*MemoryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemoryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemoryUpdate(ctx, req.(*MemoryRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemoryRawGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRawRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemoryRawGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemoryRawGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemoryRawGet(ctx, req.(*MemoryRawRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemoryRawUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRawUpdateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemoryRawUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemoryRawUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemoryRawUpdate(ctx, req.(*MemoryRawUpdateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MpuTraceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MpuTraceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MpuTraceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MpuTraceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MpuTraceUpdate(ctx, req.(*MpuTraceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemTrackGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemTrackGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemTrackGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemTrackGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemTrackGet(ctx, req.(*MemTrackGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SlabGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlabGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SlabGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/SlabGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SlabGet(ctx, req.(*SlabGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_HashTableGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).HashTableGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/HashTableGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).HashTableGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_TraceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).TraceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/TraceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).TraceUpdate(ctx, req.(*TraceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_TraceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).TraceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/TraceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).TraceGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_ThreadGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).ThreadGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/ThreadGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).ThreadGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_ClockGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).ClockGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/ClockGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).ClockGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_FlushLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).FlushLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/FlushLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).FlushLogs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_GenericOpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericOpnRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).GenericOpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/GenericOpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).GenericOpn(ctx, req.(*GenericOpnRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_FteSpanGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).FteSpanGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/FteSpanGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).FteSpanGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_FteSpanUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FteSpanRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).FteSpanUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/FteSpanUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).FteSpanUpdate(ctx, req.(*FteSpanRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SnakeTestCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnakeTestRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SnakeTestCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/SnakeTestCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SnakeTestCreate(ctx, req.(*SnakeTestRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SnakeTestDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnakeTestDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SnakeTestDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/SnakeTestDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SnakeTestDelete(ctx, req.(*SnakeTestDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SnakeTestGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SnakeTestGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/SnakeTestGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SnakeTestGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_HbmBwGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HbmBwGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).HbmBwGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/HbmBwGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).HbmBwGet(ctx, req.(*HbmBwGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_LlcClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).LlcClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/LlcClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).LlcClear(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_LlcSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LlcSetupRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).LlcSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/LlcSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).LlcSetup(ctx, req.(*LlcSetupRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_LlcGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).LlcGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/LlcGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).LlcGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_HbmCacheSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HbmCacheRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).HbmCacheSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/HbmCacheSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).HbmCacheSetup(ctx, req.(*HbmCacheRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SchedulerStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SchedulerStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/SchedulerStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SchedulerStatsGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SchedulerActiveQGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerActiveQRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SchedulerActiveQGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/SchedulerActiveQGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SchedulerActiveQGet(ctx, req.(*SchedulerActiveQRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_PacketBufferUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketBufferRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).PacketBufferUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/PacketBufferUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).PacketBufferUpdate(ctx, req.(*PacketBufferRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_XcvrValidCheckEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).XcvrValidCheckEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/XcvrValidCheckEnable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).XcvrValidCheckEnable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_XcvrValidCheckDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).XcvrValidCheckDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/XcvrValidCheckDisable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).XcvrValidCheckDisable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_MemoryTrim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).MemoryTrim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/MemoryTrim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).MemoryTrim(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_QueueCreditsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).QueueCreditsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/QueueCreditsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).QueueCreditsGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_SessionCtrlUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCtrlRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).SessionCtrlUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/SessionCtrlUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).SessionCtrlUpdate(ctx, req.(*SessionCtrlRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_OifListGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OifListGetRequestMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).OifListGet(m, &debugOifListGetServer{stream})
}

type Debug_OifListGetServer interface {
	Send(*OifListGetResponseMsg) error
	grpc.ServerStream
}

type debugOifListGetServer struct {
	grpc.ServerStream
}

func (x *debugOifListGetServer) Send(m *OifListGetResponseMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Debug_AgingTraceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgingTraceUpdateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).AgingTraceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/AgingTraceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).AgingTraceUpdate(ctx, req.(*AgingTraceUpdateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Debug_FteTraceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FteTraceUpdateRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServer).FteTraceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.Debug/FteTraceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServer).FteTraceUpdate(ctx, req.(*FteTraceUpdateRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debug.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGet",
			Handler:    _Debug_RegisterGet_Handler,
		},
		{
			MethodName: "RegisterUpdate",
			Handler:    _Debug_RegisterUpdate_Handler,
		},
		{
			MethodName: "MemoryGet",
			Handler:    _Debug_MemoryGet_Handler,
		},
		{
			MethodName: "MemoryUpdate",
			Handler:    _Debug_MemoryUpdate_Handler,
		},
		{
			MethodName: "MemoryRawGet",
			Handler:    _Debug_MemoryRawGet_Handler,
		},
		{
			MethodName: "MemoryRawUpdate",
			Handler:    _Debug_MemoryRawUpdate_Handler,
		},
		{
			MethodName: "MpuTraceUpdate",
			Handler:    _Debug_MpuTraceUpdate_Handler,
		},
		{
			MethodName: "MemTrackGet",
			Handler:    _Debug_MemTrackGet_Handler,
		},
		{
			MethodName: "SlabGet",
			Handler:    _Debug_SlabGet_Handler,
		},
		{
			MethodName: "HashTableGet",
			Handler:    _Debug_HashTableGet_Handler,
		},
		{
			MethodName: "TraceUpdate",
			Handler:    _Debug_TraceUpdate_Handler,
		},
		{
			MethodName: "TraceGet",
			Handler:    _Debug_TraceGet_Handler,
		},
		{
			MethodName: "ThreadGet",
			Handler:    _Debug_ThreadGet_Handler,
		},
		{
			MethodName: "ClockGet",
			Handler:    _Debug_ClockGet_Handler,
		},
		{
			MethodName: "FlushLogs",
			Handler:    _Debug_FlushLogs_Handler,
		},
		{
			MethodName: "GenericOpn",
			Handler:    _Debug_GenericOpn_Handler,
		},
		{
			MethodName: "FteSpanGet",
			Handler:    _Debug_FteSpanGet_Handler,
		},
		{
			MethodName: "FteSpanUpdate",
			Handler:    _Debug_FteSpanUpdate_Handler,
		},
		{
			MethodName: "SnakeTestCreate",
			Handler:    _Debug_SnakeTestCreate_Handler,
		},
		{
			MethodName: "SnakeTestDelete",
			Handler:    _Debug_SnakeTestDelete_Handler,
		},
		{
			MethodName: "SnakeTestGet",
			Handler:    _Debug_SnakeTestGet_Handler,
		},
		{
			MethodName: "HbmBwGet",
			Handler:    _Debug_HbmBwGet_Handler,
		},
		{
			MethodName: "LlcClear",
			Handler:    _Debug_LlcClear_Handler,
		},
		{
			MethodName: "LlcSetup",
			Handler:    _Debug_LlcSetup_Handler,
		},
		{
			MethodName: "LlcGet",
			Handler:    _Debug_LlcGet_Handler,
		},
		{
			MethodName: "HbmCacheSetup",
			Handler:    _Debug_HbmCacheSetup_Handler,
		},
		{
			MethodName: "SchedulerStatsGet",
			Handler:    _Debug_SchedulerStatsGet_Handler,
		},
		{
			MethodName: "SchedulerActiveQGet",
			Handler:    _Debug_SchedulerActiveQGet_Handler,
		},
		{
			MethodName: "PacketBufferUpdate",
			Handler:    _Debug_PacketBufferUpdate_Handler,
		},
		{
			MethodName: "XcvrValidCheckEnable",
			Handler:    _Debug_XcvrValidCheckEnable_Handler,
		},
		{
			MethodName: "XcvrValidCheckDisable",
			Handler:    _Debug_XcvrValidCheckDisable_Handler,
		},
		{
			MethodName: "MemoryTrim",
			Handler:    _Debug_MemoryTrim_Handler,
		},
		{
			MethodName: "QueueCreditsGet",
			Handler:    _Debug_QueueCreditsGet_Handler,
		},
		{
			MethodName: "SessionCtrlUpdate",
			Handler:    _Debug_SessionCtrlUpdate_Handler,
		},
		{
			MethodName: "AgingTraceUpdate",
			Handler:    _Debug_AgingTraceUpdate_Handler,
		},
		{
			MethodName: "FteTraceUpdate",
			Handler:    _Debug_FteTraceUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OifListGet",
			Handler:       _Debug_OifListGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "debug.proto",
}

func (m *FteSpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FteSpanRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Selector != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Selector))
	}
	if m.SrcLif != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.SrcLif))
	}
	if m.SrcLport != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.SrcLport))
	}
	if m.DstLport != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.DstLport))
	}
	if m.DropReason != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.DropReason))
	}
	if m.FlowLkupDir != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.FlowLkupDir))
	}
	if m.FlowLkupType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.FlowLkupType))
	}
	if m.FlowLkupVrf != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.FlowLkupVrf))
	}
	if m.FlowLkupSrc != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.FlowLkupSrc.Size()))
		n1, err := m.FlowLkupSrc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FlowLkupDst != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.FlowLkupDst.Size()))
		n2, err := m.FlowLkupDst.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.FlowLkupProto != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.FlowLkupProto))
	}
	if m.FlowLkupSport != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.FlowLkupSport))
	}
	if m.FlowLkupDport != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.FlowLkupDport))
	}
	if m.EthDmac != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.EthDmac))
	}
	if m.FromCpu {
		dAtA[i] = 0x78
		i++
		if m.FromCpu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsEgress {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.IsEgress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EgressIf != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.EgressIf.Size()))
		n3, err := m.EgressIf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.SpanLport != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.SpanLport))
	}
	if m.AttachStats {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.AttachStats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FteSpanRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FteSpanRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FteSpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FteSpanResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Request.Size()))
		n4, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.StatsIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.StatsIndex))
	}
	return i, nil
}

func (m *FteSpanResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FteSpanResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SnakeTestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnakeTestRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Type))
	}
	if m.Vlan != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Vlan))
	}
	return i, nil
}

func (m *SnakeTestRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnakeTestRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SnakeTestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnakeTestResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Request.Size()))
		n5, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *SnakeTestResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnakeTestResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SnakeTestDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnakeTestDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *SnakeTestDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnakeTestDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SnakeTestDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnakeTestDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *SnakeTestDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnakeTestDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GenericOpnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericOpnRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Opn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Opn))
	}
	if m.Val1 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Val1))
	}
	if m.Val2 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Val2))
	}
	if m.Val3 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Val3))
	}
	if m.Val4 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Val4))
	}
	return i, nil
}

func (m *GenericOpnRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericOpnRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GenericOpnStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericOpnStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Val1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Val1))
	}
	if m.Val2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Val2))
	}
	if m.Val3 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Val3))
	}
	if m.Val4 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Val4))
	}
	return i, nil
}

func (m *GenericOpnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericOpnResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n6, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *GenericOpnResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericOpnResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdNameOrAddr != nil {
		nn7, err := m.IdNameOrAddr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	if len(m.BlockName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.BlockName)))
		i += copy(dAtA[i:], m.BlockName)
	}
	if m.Instance != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Instance))
	}
	if m.RegData != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.RegData))
	}
	return i, nil
}

func (m *RegisterRequest_RegId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.RegId))
	i += 4
	return i, nil
}
func (m *RegisterRequest_RegName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintDebug(dAtA, i, uint64(len(m.RegName)))
	i += copy(dAtA[i:], m.RegName)
	return i, nil
}
func (m *RegisterRequest_Addr) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintDebug(dAtA, i, uint64(m.Addr))
	return i, nil
}
func (m *RegisterRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Data.Size()))
		n8, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *RegisterResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdOrName != nil {
		nn9, err := m.IdOrName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Index))
	}
	if len(m.Swkey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Swkey)))
		i += copy(dAtA[i:], m.Swkey)
	}
	if len(m.SwkeyMask) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.SwkeyMask)))
		i += copy(dAtA[i:], m.SwkeyMask)
	}
	if len(m.Actiondata) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Actiondata)))
		i += copy(dAtA[i:], m.Actiondata)
	}
	return i, nil
}

func (m *MemoryRequest_TableId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TableId))
	i += 4
	return i, nil
}
func (m *MemoryRequest_TableName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintDebug(dAtA, i, uint64(len(m.TableName)))
	i += copy(dAtA[i:], m.TableName)
	return i, nil
}
func (m *MemoryRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Index))
	}
	if len(m.Swkey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Swkey)))
		i += copy(dAtA[i:], m.Swkey)
	}
	if len(m.SwkeyMask) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.SwkeyMask)))
		i += copy(dAtA[i:], m.SwkeyMask)
	}
	if len(m.Actiondata) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Actiondata)))
		i += copy(dAtA[i:], m.Actiondata)
	}
	return i, nil
}

func (m *MemoryResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemoryRawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRawRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Address != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Address))
	}
	if m.Len != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Len))
	}
	return i, nil
}

func (m *MemoryRawRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRawRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemoryRawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRawResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Actiondata) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Actiondata)))
		i += copy(dAtA[i:], m.Actiondata)
	}
	return i, nil
}

func (m *MemoryRawResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRawResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemoryRawUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRawUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Address != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Address))
	}
	if len(m.Actiondata) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Actiondata)))
		i += copy(dAtA[i:], m.Actiondata)
	}
	if m.Len != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Len))
	}
	return i, nil
}

func (m *MemoryRawUpdateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRawUpdateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemoryRawUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRawUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *MemoryRawUpdateResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRawUpdateResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RegisterData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RegName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.RegName)))
		i += copy(dAtA[i:], m.RegName)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *MemTrackSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllocId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.AllocId))
	}
	return i, nil
}

func (m *MemTrackGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n10, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *MemTrackGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemTrackStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MemTrackStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumAllocs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumFrees))
	}
	return i, nil
}

func (m *MemTrackGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n11, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n12, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Stats.Size()))
		n13, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *MemTrackGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemTrackGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SlabSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Id))
	}
	if m.ElementSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ElementSize))
	}
	if m.ElementsPerBlock != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ElementsPerBlock))
	}
	if m.ThreadSafe {
		dAtA[i] = 0x28
		i++
		if m.ThreadSafe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GrowOnDemand {
		dAtA[i] = 0x30
		i++
		if m.GrowOnDemand {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DelayDelete {
		dAtA[i] = 0x38
		i++
		if m.DelayDelete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ZeroOnAllocation {
		dAtA[i] = 0x40
		i++
		if m.ZeroOnAllocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RawBlockSize != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.RawBlockSize))
	}
	return i, nil
}

func (m *SlabStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SlabStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumElementsInUse != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumElementsInUse))
	}
	if m.NumAllocs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumFrees))
	}
	if m.NumAllocErrors != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumAllocErrors))
	}
	if m.NumBlocks != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumBlocks))
	}
	return i, nil
}

func (m *SlabGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *SlabGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SlabGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n14, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n15, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Stats.Size()))
		n16, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *SlabGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlabGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HashTableSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashTableSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NumBuckets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumBuckets))
	}
	if m.ThreadSafe {
		dAtA[i] = 0x18
		i++
		if m.ThreadSafe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MaxBucketDepth != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.MaxBucketDepth))
	}
	if m.AvgBucketDepth != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.AvgBucketDepth))
	}
	return i, nil
}

func (m *HashTableStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashTableStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HashTableStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashTableStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumEntries != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumEntries))
	}
	if m.NumInserts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumInserts))
	}
	if m.NumInsertErrors != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumInsertErrors))
	}
	if m.NumDeletes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumDeletes))
	}
	if m.NumDeleteErrors != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumDeleteErrors))
	}
	if m.NumLookups != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumLookups))
	}
	return i, nil
}

func (m *HashTableGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashTableGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n17, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n18, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Stats.Size()))
		n19, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *HashTableGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashTableGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ThreadSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Id))
	}
	if m.PthreadId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.PthreadId))
	}
	if m.Prio != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Prio))
	}
	if m.SchedPolicy != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.SchedPolicy))
	}
	if m.Running {
		dAtA[i] = 0x30
		i++
		if m.Running {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Role != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Role))
	}
	if m.CoreMask != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.CoreMask))
	}
	return i, nil
}

func (m *ThreadStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastHb != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.LastHb))
	}
	return i, nil
}

func (m *ThreadStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ThreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.ControlCoreMask != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ControlCoreMask))
	}
	if m.DataCoreMask != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.DataCoreMask))
	}
	if m.Spec != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n20, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Status != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n21, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Stats != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Stats.Size()))
		n22, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *ThreadResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TraceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TraceLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.TraceLevel))
	}
	return i, nil
}

func (m *TraceRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TraceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.TraceLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.TraceLevel))
	}
	return i, nil
}

func (m *TraceResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MpuTraceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MpuTraceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enable {
		dAtA[i] = 0x8
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TraceEnable {
		dAtA[i] = 0x10
		i++
		if m.TraceEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhvDebug {
		dAtA[i] = 0x18
		i++
		if m.PhvDebug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PhvError {
		dAtA[i] = 0x20
		i++
		if m.PhvError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WatchPc != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.WatchPc))
	}
	if m.BaseAddr != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.BaseAddr))
	}
	if m.BufSize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.BufSize))
	}
	if m.TableKey {
		dAtA[i] = 0x40
		i++
		if m.TableKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Instructions {
		dAtA[i] = 0x48
		i++
		if m.Instructions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Wrap {
		dAtA[i] = 0x50
		i++
		if m.Wrap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Reset_ {
		dAtA[i] = 0x58
		i++
		if m.Reset_ {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MpuTraceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MpuTraceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PipelineType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.PipelineType))
	}
	if m.StageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.StageId))
	}
	if m.Mpu != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Mpu))
	}
	if m.Spec != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n23, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *MpuTraceRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MpuTraceRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MpuTraceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MpuTraceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n24, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.DebugIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.DebugIndex))
	}
	return i, nil
}

func (m *MpuTraceResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MpuTraceResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FlushLogsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushLogsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *FlushLogsResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushLogsResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AgingTraceUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgingTraceUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AgingTraceEnable {
		dAtA[i] = 0x8
		i++
		if m.AgingTraceEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AgingTraceUpdateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgingTraceUpdateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FteTraceUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FteTraceUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FteTraceEnable {
		dAtA[i] = 0x8
		i++
		if m.FteTraceEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FteTraceUpdateRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FteTraceUpdateRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClockSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClockSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HardwareClock != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.HardwareClock))
	}
	if m.ClockOpType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ClockOpType))
	}
	if m.SoftwareDelta != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.SoftwareDelta))
	}
	if m.SoftwareClock != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.SoftwareClock))
	}
	return i, nil
}

func (m *ClockStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClockStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClockStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClockStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClockResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n25, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Status.Size()))
		n26, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Stats.Size()))
		n27, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *Bandwidth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bandwidth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Read != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Read))))
		i += 8
	}
	if m.Write != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Write))))
		i += 8
	}
	return i, nil
}

func (m *HbmBwGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmBwGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumSamples != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.NumSamples))
	}
	if m.SleepInterval != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.SleepInterval))
	}
	return i, nil
}

func (m *HbmBwGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmBwGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HbmBwGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmBwGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Type))
	}
	if m.Average != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Average.Size()))
		n28, err := m.Average.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Maximum != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Maximum.Size()))
		n29, err := m.Maximum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.ClkDiff != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ClkDiff))
	}
	return i, nil
}

func (m *HbmBwGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmBwGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LlcSetupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LlcSetupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *LlcSetupRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LlcSetupRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LlcSetupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LlcSetupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *LlcSetupResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LlcSetupResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LlcGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LlcGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Type))
	}
	if len(m.Count) > 0 {
		dAtA31 := make([]byte, len(m.Count)*10)
		var j30 int
		for _, num := range m.Count {
			for num >= 1<<7 {
				dAtA31[j30] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j30++
			}
			dAtA31[j30] = uint8(num)
			j30++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDebug(dAtA, i, uint64(j30))
		i += copy(dAtA[i:], dAtA31[:j30])
	}
	return i, nil
}

func (m *LlcGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LlcGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HbmCacheSram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmCacheSram) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Type))
	}
	if m.Enable {
		dAtA[i] = 0x10
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *HbmCacheLlc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmCacheLlc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enable {
		dAtA[i] = 0x8
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *HbmCacheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmCacheRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CacheRegions != nil {
		nn32, err := m.CacheRegions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn32
	}
	return i, nil
}

func (m *HbmCacheRequest_Sram) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Sram != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Sram.Size()))
		n33, err := m.Sram.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *HbmCacheRequest_Llc) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Llc != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Llc.Size()))
		n34, err := m.Llc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *HbmCacheRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmCacheRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HbmCacheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmCacheResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *HbmCacheResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HbmCacheResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CosStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Cos))
	}
	if m.DoorbellCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.DoorbellCount))
	}
	if m.XonStatus {
		dAtA[i] = 0x18
		i++
		if m.XonStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SchedulerStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulerStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.DoorbellSetCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.DoorbellSetCount))
	}
	if m.DoorbellClearCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.DoorbellClearCount))
	}
	if m.RatelimitStartCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.RatelimitStartCount))
	}
	if m.RatelimitStopCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.RatelimitStopCount))
	}
	if len(m.CosEntry) > 0 {
		for _, msg := range m.CosEntry {
			dAtA[i] = 0x32
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SchedulerStatsResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulerStatsResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.QBeg != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.QBeg))
	}
	if m.QEnd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.QEnd))
	}
	return i, nil
}

func (m *QRanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QRanges) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Range) > 0 {
		for _, msg := range m.Range {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SchedulerActiveQRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulerActiveQRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lif != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Lif.Size()))
		n35, err := m.Lif.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.QType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.QType))
	}
	if m.NumOrRanges != nil {
		nn36, err := m.NumOrRanges.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	if m.PollCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.PollCount))
	}
	return i, nil
}

func (m *SchedulerActiveQRequest_QNum) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintDebug(dAtA, i, uint64(m.QNum))
	return i, nil
}
func (m *SchedulerActiveQRequest_QRanges) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QRanges != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.QRanges.Size()))
		n37, err := m.QRanges.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *SchedulerActiveQRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulerActiveQRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SchedulerActiveQResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulerActiveQResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActiveQNum) > 0 {
		dAtA39 := make([]byte, len(m.ActiveQNum)*10)
		var j38 int
		for _, num := range m.ActiveQNum {
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(j38))
		i += copy(dAtA[i:], dAtA39[:j38])
	}
	return i, nil
}

func (m *SchedulerActiveQResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchedulerActiveQResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PacketBufferPause) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBufferPause) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pause {
		dAtA[i] = 0x8
		i++
		if m.Pause {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PacketBufferSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBufferSpan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SpanThreshold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.SpanThreshold))
	}
	return i, nil
}

func (m *PacketBufferSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBufferSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pause != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Pause.Size()))
		n40, err := m.Pause.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.Span != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Span.Size()))
		n41, err := m.Span.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *PacketBufferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBufferRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Spec.Size()))
		n42, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}

func (m *PacketBufferRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBufferRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PacketBufferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBufferResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *PacketBufferResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBufferResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QueueCredit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueCredit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Queue != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Queue))
	}
	if m.Credit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Credit))
	}
	return i, nil
}

func (m *PortQueueCredit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortQueueCredit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Port))
	}
	if len(m.QueueCredit) > 0 {
		for _, msg := range m.QueueCredit {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QueueCreditsGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueCreditsGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.PortQueueCredit) > 0 {
		for _, msg := range m.PortQueueCredit {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SessionCtrlSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionCtrlSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxSession != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.MaxSession))
	}
	return i, nil
}

func (m *SessionCtrlRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionCtrlRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Spec) > 0 {
		for _, msg := range m.Spec {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OifListGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OifListGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Id))
		i += 4
	}
	return i, nil
}

func (m *OifListGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OifListGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OifListGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OifListGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if m.OifList != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.OifList.Size()))
		n43, err := m.OifList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}

func (m *OifListGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OifListGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CommandCtxt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandCtxt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Version))
	}
	if m.Cmd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.Cmd))
	}
	return i, nil
}

func (m *CommandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func encodeVarintDebug(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FteSpanRequest) Size() (n int) {
	var l int
	_ = l
	if m.Selector != 0 {
		n += 1 + sovDebug(uint64(m.Selector))
	}
	if m.SrcLif != 0 {
		n += 1 + sovDebug(uint64(m.SrcLif))
	}
	if m.SrcLport != 0 {
		n += 1 + sovDebug(uint64(m.SrcLport))
	}
	if m.DstLport != 0 {
		n += 1 + sovDebug(uint64(m.DstLport))
	}
	if m.DropReason != 0 {
		n += 1 + sovDebug(uint64(m.DropReason))
	}
	if m.FlowLkupDir != 0 {
		n += 1 + sovDebug(uint64(m.FlowLkupDir))
	}
	if m.FlowLkupType != 0 {
		n += 1 + sovDebug(uint64(m.FlowLkupType))
	}
	if m.FlowLkupVrf != 0 {
		n += 1 + sovDebug(uint64(m.FlowLkupVrf))
	}
	if m.FlowLkupSrc != nil {
		l = m.FlowLkupSrc.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.FlowLkupDst != nil {
		l = m.FlowLkupDst.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.FlowLkupProto != 0 {
		n += 1 + sovDebug(uint64(m.FlowLkupProto))
	}
	if m.FlowLkupSport != 0 {
		n += 1 + sovDebug(uint64(m.FlowLkupSport))
	}
	if m.FlowLkupDport != 0 {
		n += 1 + sovDebug(uint64(m.FlowLkupDport))
	}
	if m.EthDmac != 0 {
		n += 1 + sovDebug(uint64(m.EthDmac))
	}
	if m.FromCpu {
		n += 2
	}
	if m.IsEgress {
		n += 3
	}
	if m.EgressIf != nil {
		l = m.EgressIf.Size()
		n += 2 + l + sovDebug(uint64(l))
	}
	if m.SpanLport != 0 {
		n += 2 + sovDebug(uint64(m.SpanLport))
	}
	if m.AttachStats {
		n += 3
	}
	return n
}

func (m *FteSpanRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *FteSpanResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.StatsIndex != 0 {
		n += 1 + sovDebug(uint64(m.StatsIndex))
	}
	return n
}

func (m *FteSpanResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SnakeTestRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDebug(uint64(m.Type))
	}
	if m.Vlan != 0 {
		n += 1 + sovDebug(uint64(m.Vlan))
	}
	return n
}

func (m *SnakeTestRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SnakeTestResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *SnakeTestResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SnakeTestDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDebug(uint64(m.Type))
	}
	return n
}

func (m *SnakeTestDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SnakeTestDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	return n
}

func (m *SnakeTestDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *GenericOpnRequest) Size() (n int) {
	var l int
	_ = l
	if m.Opn != 0 {
		n += 1 + sovDebug(uint64(m.Opn))
	}
	if m.Val1 != 0 {
		n += 1 + sovDebug(uint64(m.Val1))
	}
	if m.Val2 != 0 {
		n += 1 + sovDebug(uint64(m.Val2))
	}
	if m.Val3 != 0 {
		n += 1 + sovDebug(uint64(m.Val3))
	}
	if m.Val4 != 0 {
		n += 1 + sovDebug(uint64(m.Val4))
	}
	return n
}

func (m *GenericOpnRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *GenericOpnStatus) Size() (n int) {
	var l int
	_ = l
	if m.Val1 != 0 {
		n += 1 + sovDebug(uint64(m.Val1))
	}
	if m.Val2 != 0 {
		n += 1 + sovDebug(uint64(m.Val2))
	}
	if m.Val3 != 0 {
		n += 1 + sovDebug(uint64(m.Val3))
	}
	if m.Val4 != 0 {
		n += 1 + sovDebug(uint64(m.Val4))
	}
	return n
}

func (m *GenericOpnResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *GenericOpnResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *RegisterRequest) Size() (n int) {
	var l int
	_ = l
	if m.IdNameOrAddr != nil {
		n += m.IdNameOrAddr.Size()
	}
	l = len(m.BlockName)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Instance != 0 {
		n += 1 + sovDebug(uint64(m.Instance))
	}
	if m.RegData != 0 {
		n += 1 + sovDebug(uint64(m.RegData))
	}
	return n
}

func (m *RegisterRequest_RegId) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *RegisterRequest_RegName) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegName)
	n += 1 + l + sovDebug(uint64(l))
	return n
}
func (m *RegisterRequest_Addr) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovDebug(uint64(m.Addr))
	return n
}
func (m *RegisterRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *RegisterResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemoryRequest) Size() (n int) {
	var l int
	_ = l
	if m.IdOrName != nil {
		n += m.IdOrName.Size()
	}
	if m.Index != 0 {
		n += 1 + sovDebug(uint64(m.Index))
	}
	l = len(m.Swkey)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.SwkeyMask)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Actiondata)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemoryRequest_TableId) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *MemoryRequest_TableName) Size() (n int) {
	var l int
	_ = l
	l = len(m.TableName)
	n += 1 + l + sovDebug(uint64(l))
	return n
}
func (m *MemoryRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemoryResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Index != 0 {
		n += 1 + sovDebug(uint64(m.Index))
	}
	l = len(m.Swkey)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.SwkeyMask)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Actiondata)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemoryResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemoryRawRequest) Size() (n int) {
	var l int
	_ = l
	if m.Address != 0 {
		n += 1 + sovDebug(uint64(m.Address))
	}
	if m.Len != 0 {
		n += 1 + sovDebug(uint64(m.Len))
	}
	return n
}

func (m *MemoryRawRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemoryRawResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	l = len(m.Actiondata)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemoryRawResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemoryRawUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Address != 0 {
		n += 1 + sovDebug(uint64(m.Address))
	}
	l = len(m.Actiondata)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Len != 0 {
		n += 1 + sovDebug(uint64(m.Len))
	}
	return n
}

func (m *MemoryRawUpdateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemoryRawUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	return n
}

func (m *MemoryRawUpdateResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *RegisterData) Size() (n int) {
	var l int
	_ = l
	l = len(m.RegName)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemTrackSpec) Size() (n int) {
	var l int
	_ = l
	if m.AllocId != 0 {
		n += 1 + sovDebug(uint64(m.AllocId))
	}
	return n
}

func (m *MemTrackGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemTrackGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MemTrackStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MemTrackStats) Size() (n int) {
	var l int
	_ = l
	if m.NumAllocs != 0 {
		n += 1 + sovDebug(uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		n += 1 + sovDebug(uint64(m.NumFrees))
	}
	return n
}

func (m *MemTrackGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MemTrackGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SlabSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDebug(uint64(m.Id))
	}
	if m.ElementSize != 0 {
		n += 1 + sovDebug(uint64(m.ElementSize))
	}
	if m.ElementsPerBlock != 0 {
		n += 1 + sovDebug(uint64(m.ElementsPerBlock))
	}
	if m.ThreadSafe {
		n += 2
	}
	if m.GrowOnDemand {
		n += 2
	}
	if m.DelayDelete {
		n += 2
	}
	if m.ZeroOnAllocation {
		n += 2
	}
	if m.RawBlockSize != 0 {
		n += 1 + sovDebug(uint64(m.RawBlockSize))
	}
	return n
}

func (m *SlabStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SlabStats) Size() (n int) {
	var l int
	_ = l
	if m.NumElementsInUse != 0 {
		n += 1 + sovDebug(uint64(m.NumElementsInUse))
	}
	if m.NumAllocs != 0 {
		n += 1 + sovDebug(uint64(m.NumAllocs))
	}
	if m.NumFrees != 0 {
		n += 1 + sovDebug(uint64(m.NumFrees))
	}
	if m.NumAllocErrors != 0 {
		n += 1 + sovDebug(uint64(m.NumAllocErrors))
	}
	if m.NumBlocks != 0 {
		n += 1 + sovDebug(uint64(m.NumBlocks))
	}
	return n
}

func (m *SlabGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDebug(uint64(m.Id))
	}
	return n
}

func (m *SlabGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SlabGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *SlabGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *HashTableSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.NumBuckets != 0 {
		n += 1 + sovDebug(uint64(m.NumBuckets))
	}
	if m.ThreadSafe {
		n += 2
	}
	if m.MaxBucketDepth != 0 {
		n += 1 + sovDebug(uint64(m.MaxBucketDepth))
	}
	if m.AvgBucketDepth != 0 {
		n += 1 + sovDebug(uint64(m.AvgBucketDepth))
	}
	return n
}

func (m *HashTableStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HashTableStats) Size() (n int) {
	var l int
	_ = l
	if m.NumEntries != 0 {
		n += 1 + sovDebug(uint64(m.NumEntries))
	}
	if m.NumInserts != 0 {
		n += 1 + sovDebug(uint64(m.NumInserts))
	}
	if m.NumInsertErrors != 0 {
		n += 1 + sovDebug(uint64(m.NumInsertErrors))
	}
	if m.NumDeletes != 0 {
		n += 1 + sovDebug(uint64(m.NumDeletes))
	}
	if m.NumDeleteErrors != 0 {
		n += 1 + sovDebug(uint64(m.NumDeleteErrors))
	}
	if m.NumLookups != 0 {
		n += 1 + sovDebug(uint64(m.NumLookups))
	}
	return n
}

func (m *HashTableGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *HashTableGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *ThreadSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDebug(uint64(m.Id))
	}
	if m.PthreadId != 0 {
		n += 1 + sovDebug(uint64(m.PthreadId))
	}
	if m.Prio != 0 {
		n += 1 + sovDebug(uint64(m.Prio))
	}
	if m.SchedPolicy != 0 {
		n += 1 + sovDebug(uint64(m.SchedPolicy))
	}
	if m.Running {
		n += 2
	}
	if m.Role != 0 {
		n += 1 + sovDebug(uint64(m.Role))
	}
	if m.CoreMask != 0 {
		n += 1 + sovDebug(uint64(m.CoreMask))
	}
	return n
}

func (m *ThreadStatus) Size() (n int) {
	var l int
	_ = l
	if m.LastHb != 0 {
		n += 1 + sovDebug(uint64(m.LastHb))
	}
	return n
}

func (m *ThreadStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ThreadResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.ControlCoreMask != 0 {
		n += 1 + sovDebug(uint64(m.ControlCoreMask))
	}
	if m.DataCoreMask != 0 {
		n += 1 + sovDebug(uint64(m.DataCoreMask))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *ThreadResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *TraceSpec) Size() (n int) {
	var l int
	_ = l
	if m.TraceLevel != 0 {
		n += 1 + sovDebug(uint64(m.TraceLevel))
	}
	return n
}

func (m *TraceRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *TraceResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.TraceLevel != 0 {
		n += 1 + sovDebug(uint64(m.TraceLevel))
	}
	return n
}

func (m *TraceResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MpuTraceSpec) Size() (n int) {
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	if m.TraceEnable {
		n += 2
	}
	if m.PhvDebug {
		n += 2
	}
	if m.PhvError {
		n += 2
	}
	if m.WatchPc != 0 {
		n += 1 + sovDebug(uint64(m.WatchPc))
	}
	if m.BaseAddr != 0 {
		n += 1 + sovDebug(uint64(m.BaseAddr))
	}
	if m.BufSize != 0 {
		n += 1 + sovDebug(uint64(m.BufSize))
	}
	if m.TableKey {
		n += 2
	}
	if m.Instructions {
		n += 2
	}
	if m.Wrap {
		n += 2
	}
	if m.Reset_ {
		n += 2
	}
	return n
}

func (m *MpuTraceRequest) Size() (n int) {
	var l int
	_ = l
	if m.PipelineType != 0 {
		n += 1 + sovDebug(uint64(m.PipelineType))
	}
	if m.StageId != 0 {
		n += 1 + sovDebug(uint64(m.StageId))
	}
	if m.Mpu != 0 {
		n += 1 + sovDebug(uint64(m.Mpu))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *MpuTraceRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *MpuTraceResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.DebugIndex != 0 {
		n += 1 + sovDebug(uint64(m.DebugIndex))
	}
	return n
}

func (m *MpuTraceResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *FlushLogsResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	return n
}

func (m *FlushLogsResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *AgingTraceUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.AgingTraceEnable {
		n += 2
	}
	return n
}

func (m *AgingTraceUpdateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *FteTraceUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.FteTraceEnable {
		n += 2
	}
	return n
}

func (m *FteTraceUpdateRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *ClockSpec) Size() (n int) {
	var l int
	_ = l
	if m.HardwareClock != 0 {
		n += 1 + sovDebug(uint64(m.HardwareClock))
	}
	if m.ClockOpType != 0 {
		n += 1 + sovDebug(uint64(m.ClockOpType))
	}
	if m.SoftwareDelta != 0 {
		n += 1 + sovDebug(uint64(m.SoftwareDelta))
	}
	if m.SoftwareClock != 0 {
		n += 1 + sovDebug(uint64(m.SoftwareClock))
	}
	return n
}

func (m *ClockStatus) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ClockStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ClockResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *Bandwidth) Size() (n int) {
	var l int
	_ = l
	if m.Read != 0 {
		n += 9
	}
	if m.Write != 0 {
		n += 9
	}
	return n
}

func (m *HbmBwGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.NumSamples != 0 {
		n += 1 + sovDebug(uint64(m.NumSamples))
	}
	if m.SleepInterval != 0 {
		n += 1 + sovDebug(uint64(m.SleepInterval))
	}
	return n
}

func (m *HbmBwGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *HbmBwGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDebug(uint64(m.Type))
	}
	if m.Average != nil {
		l = m.Average.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Maximum != nil {
		l = m.Maximum.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.ClkDiff != 0 {
		n += 1 + sovDebug(uint64(m.ClkDiff))
	}
	return n
}

func (m *HbmBwGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *LlcSetupRequest) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDebug(uint64(m.Type))
	}
	return n
}

func (m *LlcSetupRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *LlcSetupResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	return n
}

func (m *LlcSetupResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *LlcGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.Type != 0 {
		n += 1 + sovDebug(uint64(m.Type))
	}
	if len(m.Count) > 0 {
		l = 0
		for _, e := range m.Count {
			l += sovDebug(uint64(e))
		}
		n += 1 + sovDebug(uint64(l)) + l
	}
	return n
}

func (m *LlcGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *HbmCacheSram) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDebug(uint64(m.Type))
	}
	if m.Enable {
		n += 2
	}
	return n
}

func (m *HbmCacheLlc) Size() (n int) {
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	return n
}

func (m *HbmCacheRequest) Size() (n int) {
	var l int
	_ = l
	if m.CacheRegions != nil {
		n += m.CacheRegions.Size()
	}
	return n
}

func (m *HbmCacheRequest_Sram) Size() (n int) {
	var l int
	_ = l
	if m.Sram != nil {
		l = m.Sram.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}
func (m *HbmCacheRequest_Llc) Size() (n int) {
	var l int
	_ = l
	if m.Llc != nil {
		l = m.Llc.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}
func (m *HbmCacheRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *HbmCacheResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	return n
}

func (m *HbmCacheResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *CosStats) Size() (n int) {
	var l int
	_ = l
	if m.Cos != 0 {
		n += 1 + sovDebug(uint64(m.Cos))
	}
	if m.DoorbellCount != 0 {
		n += 1 + sovDebug(uint64(m.DoorbellCount))
	}
	if m.XonStatus {
		n += 2
	}
	return n
}

func (m *SchedulerStatsResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.DoorbellSetCount != 0 {
		n += 1 + sovDebug(uint64(m.DoorbellSetCount))
	}
	if m.DoorbellClearCount != 0 {
		n += 1 + sovDebug(uint64(m.DoorbellClearCount))
	}
	if m.RatelimitStartCount != 0 {
		n += 1 + sovDebug(uint64(m.RatelimitStartCount))
	}
	if m.RatelimitStopCount != 0 {
		n += 1 + sovDebug(uint64(m.RatelimitStopCount))
	}
	if len(m.CosEntry) > 0 {
		for _, e := range m.CosEntry {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SchedulerStatsResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *QRange) Size() (n int) {
	var l int
	_ = l
	if m.QBeg != 0 {
		n += 1 + sovDebug(uint64(m.QBeg))
	}
	if m.QEnd != 0 {
		n += 1 + sovDebug(uint64(m.QEnd))
	}
	return n
}

func (m *QRanges) Size() (n int) {
	var l int
	_ = l
	if len(m.Range) > 0 {
		for _, e := range m.Range {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SchedulerActiveQRequest) Size() (n int) {
	var l int
	_ = l
	if m.Lif != nil {
		l = m.Lif.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.QType != 0 {
		n += 1 + sovDebug(uint64(m.QType))
	}
	if m.NumOrRanges != nil {
		n += m.NumOrRanges.Size()
	}
	if m.PollCount != 0 {
		n += 1 + sovDebug(uint64(m.PollCount))
	}
	return n
}

func (m *SchedulerActiveQRequest_QNum) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovDebug(uint64(m.QNum))
	return n
}
func (m *SchedulerActiveQRequest_QRanges) Size() (n int) {
	var l int
	_ = l
	if m.QRanges != nil {
		l = m.QRanges.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}
func (m *SchedulerActiveQRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SchedulerActiveQResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ActiveQNum) > 0 {
		l = 0
		for _, e := range m.ActiveQNum {
			l += sovDebug(uint64(e))
		}
		n += 1 + sovDebug(uint64(l)) + l
	}
	return n
}

func (m *SchedulerActiveQResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *PacketBufferPause) Size() (n int) {
	var l int
	_ = l
	if m.Pause {
		n += 2
	}
	return n
}

func (m *PacketBufferSpan) Size() (n int) {
	var l int
	_ = l
	if m.SpanThreshold != 0 {
		n += 1 + sovDebug(uint64(m.SpanThreshold))
	}
	return n
}

func (m *PacketBufferSpec) Size() (n int) {
	var l int
	_ = l
	if m.Pause != nil {
		l = m.Pause.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *PacketBufferRequest) Size() (n int) {
	var l int
	_ = l
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *PacketBufferRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *PacketBufferResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	return n
}

func (m *PacketBufferResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *QueueCredit) Size() (n int) {
	var l int
	_ = l
	if m.Queue != 0 {
		n += 1 + sovDebug(uint64(m.Queue))
	}
	if m.Credit != 0 {
		n += 1 + sovDebug(uint64(m.Credit))
	}
	return n
}

func (m *PortQueueCredit) Size() (n int) {
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovDebug(uint64(m.Port))
	}
	if len(m.QueueCredit) > 0 {
		for _, e := range m.QueueCredit {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *QueueCreditsGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if len(m.PortQueueCredit) > 0 {
		for _, e := range m.PortQueueCredit {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *SessionCtrlSpec) Size() (n int) {
	var l int
	_ = l
	if m.MaxSession != 0 {
		n += 1 + sovDebug(uint64(m.MaxSession))
	}
	return n
}

func (m *SessionCtrlRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Spec) > 0 {
		for _, e := range m.Spec {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *OifListGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 5
	}
	return n
}

func (m *OifListGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *OifListGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if m.OifList != nil {
		l = m.OifList.Size()
		n += 1 + l + sovDebug(uint64(l))
	}
	return n
}

func (m *OifListGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	return n
}

func (m *CommandCtxt) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovDebug(uint64(m.Version))
	}
	if m.Cmd != 0 {
		n += 1 + sovDebug(uint64(m.Cmd))
	}
	return n
}

func (m *CommandResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovDebug(uint64(m.ApiStatus))
	}
	return n
}

func sovDebug(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDebug(x uint64) (n int) {
	return sovDebug(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FteSpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FteSpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FteSpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			m.Selector = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selector |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcLif", wireType)
			}
			m.SrcLif = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcLif |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcLport", wireType)
			}
			m.SrcLport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcLport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstLport", wireType)
			}
			m.DstLport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstLport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropReason", wireType)
			}
			m.DropReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropReason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLkupDir", wireType)
			}
			m.FlowLkupDir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowLkupDir |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLkupType", wireType)
			}
			m.FlowLkupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowLkupType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLkupVrf", wireType)
			}
			m.FlowLkupVrf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowLkupVrf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLkupSrc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowLkupSrc == nil {
				m.FlowLkupSrc = &IPAddress{}
			}
			if err := m.FlowLkupSrc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLkupDst", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlowLkupDst == nil {
				m.FlowLkupDst = &IPAddress{}
			}
			if err := m.FlowLkupDst.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLkupProto", wireType)
			}
			m.FlowLkupProto = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowLkupProto |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLkupSport", wireType)
			}
			m.FlowLkupSport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowLkupSport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowLkupDport", wireType)
			}
			m.FlowLkupDport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowLkupDport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthDmac", wireType)
			}
			m.EthDmac = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthDmac |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromCpu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromCpu = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEgress = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressIf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EgressIf == nil {
				m.EgressIf = &InterfaceKeyHandle{}
			}
			if err := m.EgressIf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanLport", wireType)
			}
			m.SpanLport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanLport |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachStats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttachStats = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FteSpanRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FteSpanRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FteSpanRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &FteSpanRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FteSpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FteSpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FteSpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &FteSpanRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsIndex", wireType)
			}
			m.StatsIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatsIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FteSpanResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FteSpanResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FteSpanResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &FteSpanResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnakeTestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnakeTestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnakeTestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SnakeTestType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			m.Vlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vlan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnakeTestRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnakeTestRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnakeTestRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SnakeTestRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnakeTestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnakeTestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnakeTestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &SnakeTestRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnakeTestResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnakeTestResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnakeTestResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SnakeTestResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnakeTestDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnakeTestDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnakeTestDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SnakeTestType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnakeTestDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnakeTestDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnakeTestDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SnakeTestDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnakeTestDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnakeTestDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnakeTestDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnakeTestDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnakeTestDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnakeTestDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SnakeTestDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericOpnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericOpnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericOpnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opn", wireType)
			}
			m.Opn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val1", wireType)
			}
			m.Val1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val1 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val2", wireType)
			}
			m.Val2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val2 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val3", wireType)
			}
			m.Val3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val3 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val4", wireType)
			}
			m.Val4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val4 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericOpnRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericOpnRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericOpnRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &GenericOpnRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericOpnStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericOpnStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericOpnStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val1", wireType)
			}
			m.Val1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val1 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val2", wireType)
			}
			m.Val2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val2 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val3", wireType)
			}
			m.Val3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val3 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val4", wireType)
			}
			m.Val4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val4 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericOpnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericOpnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericOpnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &GenericOpnStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericOpnResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericOpnResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericOpnResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &GenericOpnResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.IdNameOrAddr = &RegisterRequest_RegId{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdNameOrAddr = &RegisterRequest_RegName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IdNameOrAddr = &RegisterRequest_Addr{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			m.Instance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Instance |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegData", wireType)
			}
			m.RegData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegData |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RegisterRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RegisterData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &RegisterResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableId", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.IdOrName = &MemoryRequest_TableId{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdOrName = &MemoryRequest_TableName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swkey = append(m.Swkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Swkey == nil {
				m.Swkey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwkeyMask", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwkeyMask = append(m.SwkeyMask[:0], dAtA[iNdEx:postIndex]...)
			if m.SwkeyMask == nil {
				m.SwkeyMask = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actiondata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actiondata = append(m.Actiondata[:0], dAtA[iNdEx:postIndex]...)
			if m.Actiondata == nil {
				m.Actiondata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MemoryRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swkey = append(m.Swkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Swkey == nil {
				m.Swkey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwkeyMask", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwkeyMask = append(m.SwkeyMask[:0], dAtA[iNdEx:postIndex]...)
			if m.SwkeyMask == nil {
				m.SwkeyMask = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actiondata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actiondata = append(m.Actiondata[:0], dAtA[iNdEx:postIndex]...)
			if m.Actiondata == nil {
				m.Actiondata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MemoryResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRawRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRawRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRawRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MemoryRawRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actiondata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actiondata = append(m.Actiondata[:0], dAtA[iNdEx:postIndex]...)
			if m.Actiondata == nil {
				m.Actiondata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRawResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRawResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRawResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MemoryRawResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRawUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRawUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRawUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actiondata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actiondata = append(m.Actiondata[:0], dAtA[iNdEx:postIndex]...)
			if m.Actiondata == nil {
				m.Actiondata = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRawUpdateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRawUpdateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRawUpdateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MemoryRawUpdateRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRawUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRawUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRawUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRawUpdateResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRawUpdateResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRawUpdateResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MemoryRawUpdateResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocId", wireType)
			}
			m.AllocId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllocId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MemTrackSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MemTrackGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocs", wireType)
			}
			m.NumAllocs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFrees", wireType)
			}
			m.NumFrees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFrees |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MemTrackSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &MemTrackStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &MemTrackStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemTrackGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemTrackGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemTrackGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MemTrackGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementSize", wireType)
			}
			m.ElementSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElementSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementsPerBlock", wireType)
			}
			m.ElementsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElementsPerBlock |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadSafe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreadSafe = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrowOnDemand", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrowOnDemand = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DelayDelete = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZeroOnAllocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ZeroOnAllocation = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawBlockSize", wireType)
			}
			m.RawBlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RawBlockSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumElementsInUse", wireType)
			}
			m.NumElementsInUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumElementsInUse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocs", wireType)
			}
			m.NumAllocs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocs |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFrees", wireType)
			}
			m.NumFrees = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFrees |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumAllocErrors", wireType)
			}
			m.NumAllocErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumAllocErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocks", wireType)
			}
			m.NumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocks |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SlabGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SlabSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SlabStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SlabStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlabGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlabGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlabGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SlabGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashTableSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashTableSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashTableSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBuckets", wireType)
			}
			m.NumBuckets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBuckets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadSafe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreadSafe = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBucketDepth", wireType)
			}
			m.MaxBucketDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBucketDepth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgBucketDepth", wireType)
			}
			m.AvgBucketDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgBucketDepth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashTableStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashTableStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashTableStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashTableStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashTableStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashTableStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEntries", wireType)
			}
			m.NumEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEntries |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInserts", wireType)
			}
			m.NumInserts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInserts |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumInsertErrors", wireType)
			}
			m.NumInsertErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumInsertErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeletes", wireType)
			}
			m.NumDeletes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeletes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDeleteErrors", wireType)
			}
			m.NumDeleteErrors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDeleteErrors |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLookups", wireType)
			}
			m.NumLookups = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLookups |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashTableGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashTableGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashTableGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &HashTableSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &HashTableStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &HashTableStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashTableGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashTableGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashTableGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &HashTableGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PthreadId", wireType)
			}
			m.PthreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PthreadId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prio", wireType)
			}
			m.Prio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prio |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedPolicy", wireType)
			}
			m.SchedPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedPolicy |= (SchedPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Running", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Running = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (ThreadRole(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreMask", wireType)
			}
			m.CoreMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoreMask |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHb", wireType)
			}
			m.LastHb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHb |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlCoreMask", wireType)
			}
			m.ControlCoreMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ControlCoreMask |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCoreMask", wireType)
			}
			m.DataCoreMask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataCoreMask |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ThreadSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ThreadStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &ThreadStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &ThreadResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceLevel", wireType)
			}
			m.TraceLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceLevel |= (TraceLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TraceSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceLevel", wireType)
			}
			m.TraceLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceLevel |= (TraceLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TraceResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MpuTraceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MpuTraceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MpuTraceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TraceEnable = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhvDebug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhvDebug = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhvError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhvError = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchPc", wireType)
			}
			m.WatchPc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WatchPc |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAddr", wireType)
			}
			m.BaseAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufSize", wireType)
			}
			m.BufSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TableKey = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Instructions = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wrap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wrap = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reset_", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reset_ = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MpuTraceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MpuTraceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MpuTraceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PipelineType", wireType)
			}
			m.PipelineType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PipelineType |= (MpuTracePipelineType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpu", wireType)
			}
			m.Mpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mpu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MpuTraceSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MpuTraceRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MpuTraceRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MpuTraceRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &MpuTraceRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MpuTraceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MpuTraceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MpuTraceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &MpuTraceSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugIndex", wireType)
			}
			m.DebugIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MpuTraceResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MpuTraceResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MpuTraceResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &MpuTraceResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushLogsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushLogsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushLogsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushLogsResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushLogsResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushLogsResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &FlushLogsResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgingTraceUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgingTraceUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgingTraceUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgingTraceEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AgingTraceEnable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgingTraceUpdateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgingTraceUpdateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgingTraceUpdateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &AgingTraceUpdateRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FteTraceUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FteTraceUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FteTraceUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FteTraceEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FteTraceEnable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FteTraceUpdateRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FteTraceUpdateRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FteTraceUpdateRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &FteTraceUpdateRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClockSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClockSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClockSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareClock", wireType)
			}
			m.HardwareClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardwareClock |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClockOpType", wireType)
			}
			m.ClockOpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClockOpType |= (ClockOpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareDelta", wireType)
			}
			m.SoftwareDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareDelta |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareClock", wireType)
			}
			m.SoftwareClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareClock |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClockStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClockStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClockStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClockStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClockStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClockStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &ClockSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &ClockStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &ClockStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bandwidth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bandwidth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bandwidth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Read = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Write", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Write = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmBwGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmBwGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmBwGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSamples", wireType)
			}
			m.NumSamples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSamples |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SleepInterval", wireType)
			}
			m.SleepInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SleepInterval |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmBwGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmBwGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmBwGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &HbmBwGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmBwGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmBwGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmBwGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CapriBlock(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Average", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Average == nil {
				m.Average = &Bandwidth{}
			}
			if err := m.Average.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Maximum == nil {
				m.Maximum = &Bandwidth{}
			}
			if err := m.Maximum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClkDiff", wireType)
			}
			m.ClkDiff = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClkDiff |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmBwGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmBwGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmBwGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &HbmBwGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LlcSetupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LlcSetupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LlcSetupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (LlcCounterType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LlcSetupRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LlcSetupRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LlcSetupRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &LlcSetupRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LlcSetupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LlcSetupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LlcSetupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LlcSetupResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LlcSetupResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LlcSetupResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LlcSetupResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LlcGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LlcGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LlcGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (LlcCounterType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDebug
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LlcGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LlcGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LlcGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &LlcGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmCacheSram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmCacheSram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmCacheSram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (HbmSramType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmCacheLlc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmCacheLlc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmCacheLlc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmCacheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmCacheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmCacheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HbmCacheSram{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CacheRegions = &HbmCacheRequest_Sram{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Llc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HbmCacheLlc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CacheRegions = &HbmCacheRequest_Llc{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmCacheRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmCacheRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmCacheRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &HbmCacheRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmCacheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmCacheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmCacheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HbmCacheResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HbmCacheResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HbmCacheResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &HbmCacheResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cos", wireType)
			}
			m.Cos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellCount", wireType)
			}
			m.DoorbellCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoorbellCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XonStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XonStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulerStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulerStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulerStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellSetCount", wireType)
			}
			m.DoorbellSetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoorbellSetCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorbellClearCount", wireType)
			}
			m.DoorbellClearCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoorbellClearCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatelimitStartCount", wireType)
			}
			m.RatelimitStartCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatelimitStartCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatelimitStopCount", wireType)
			}
			m.RatelimitStopCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RatelimitStopCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosEntry = append(m.CosEntry, &CosStats{})
			if err := m.CosEntry[len(m.CosEntry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulerStatsResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulerStatsResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulerStatsResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SchedulerStatsResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QBeg", wireType)
			}
			m.QBeg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QBeg |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QEnd", wireType)
			}
			m.QEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QEnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QRanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QRanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QRanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Range = append(m.Range, &QRange{})
			if err := m.Range[len(m.Range)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulerActiveQRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulerActiveQRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulerActiveQRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lif", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lif == nil {
				m.Lif = &LifKeyHandle{}
			}
			if err := m.Lif.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QType", wireType)
			}
			m.QType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QType |= (LifQPurpose(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QNum", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumOrRanges = &SchedulerActiveQRequest_QNum{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &QRanges{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NumOrRanges = &SchedulerActiveQRequest_QRanges{v}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollCount", wireType)
			}
			m.PollCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulerActiveQRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulerActiveQRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulerActiveQRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &SchedulerActiveQRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulerActiveQResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulerActiveQResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulerActiveQResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ActiveQNum = append(m.ActiveQNum, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDebug
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDebug
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ActiveQNum = append(m.ActiveQNum, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveQNum", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchedulerActiveQResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchedulerActiveQResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchedulerActiveQResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &SchedulerActiveQResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBufferPause) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBufferPause: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBufferPause: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pause", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pause = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBufferSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBufferSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBufferSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanThreshold", wireType)
			}
			m.SpanThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBufferSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBufferSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBufferSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pause", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pause == nil {
				m.Pause = &PacketBufferPause{}
			}
			if err := m.Pause.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &PacketBufferSpan{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBufferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBufferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBufferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PacketBufferSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBufferRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBufferRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBufferRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &PacketBufferRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBufferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBufferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBufferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBufferResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBufferResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBufferResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &PacketBufferResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueCredit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueCredit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueCredit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			m.Queue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Queue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credit", wireType)
			}
			m.Credit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortQueueCredit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortQueueCredit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortQueueCredit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueCredit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueCredit = append(m.QueueCredit, &QueueCredit{})
			if err := m.QueueCredit[len(m.QueueCredit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueCreditsGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueCreditsGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueCreditsGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortQueueCredit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortQueueCredit = append(m.PortQueueCredit, &PortQueueCredit{})
			if err := m.PortQueueCredit[len(m.PortQueueCredit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionCtrlSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionCtrlSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionCtrlSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSession", wireType)
			}
			m.MaxSession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSession |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionCtrlRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionCtrlRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionCtrlRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = append(m.Spec, &SessionCtrlSpec{})
			if err := m.Spec[len(m.Spec)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OifListGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OifListGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OifListGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OifListGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OifListGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OifListGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &OifListGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OifListGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OifListGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OifListGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OifList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OifList == nil {
				m.OifList = &OifList{}
			}
			if err := m.OifList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OifListGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OifListGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OifListGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &OifListGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandCtxt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandCtxt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandCtxt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= (Command(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebug(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDebug
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDebug(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDebug = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebug   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("debug.proto", fileDescriptorDebug) }

var fileDescriptorDebug = []byte{
	// 5158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3c, 0x4d, 0x6f, 0xeb, 0x48,
	0x72, 0xa6, 0x2c, 0xdb, 0x52, 0x49, 0xb2, 0xe8, 0xf6, 0x97, 0x9e, 0xdf, 0x97, 0x87, 0xbb, 0x33,
	0xe3, 0xf1, 0xcc, 0x3a, 0xb3, 0x7e, 0x6f, 0xf6, 0x6b, 0x76, 0x37, 0x2b, 0x4b, 0xf2, 0xb3, 0x66,
	0x64, 0x5b, 0x8f, 0xd2, 0x7b, 0x3b, 0x33, 0x0b, 0x2c, 0x41, 0x93, 0x2d, 0x99, 0x30, 0x45, 0xf2,
	0x91, 0x94, 0xfd, 0x3c, 0x39, 0xe4, 0x90, 0x63, 0x90, 0x9c, 0x93, 0x6b, 0x90, 0x43, 0x82, 0xe4,
	0x07, 0x24, 0xc0, 0x06, 0x41, 0x10, 0x20, 0xc8, 0x31, 0x59, 0xec, 0x2d, 0x40, 0x90, 0x0c, 0x90,
	0x5b, 0x4e, 0x39, 0xe5, 0x18, 0xf4, 0x07, 0xbf, 0x29, 0xbd, 0xd9, 0x85, 0x37, 0x27, 0xb3, 0xab,
	0xaa, 0xab, 0xab, 0xab, 0xaa, 0xab, 0xab, 0xab, 0x5b, 0x86, 0x8a, 0x8e, 0x2f, 0xa6, 0xe3, 0x03,
	0xc7, 0xb5, 0x7d, 0x1b, 0x2d, 0xd1, 0xc6, 0x4e, 0xc5, 0xbf, 0x75, 0xb0, 0xc7, 0x60, 0x3b, 0xa5,
	0xab, 0x4b, 0xfe, 0x55, 0x37, 0x2c, 0x1f, 0xbb, 0x23, 0x55, 0xc3, 0x01, 0x60, 0x32, 0x35, 0x7d,
	0x43, 0x53, 0x3d, 0x9f, 0x01, 0xa4, 0x5f, 0x2c, 0xc1, 0xea, 0xb1, 0x8f, 0x07, 0x8e, 0x6a, 0xc9,
	0xf8, 0xd5, 0x14, 0x7b, 0x3e, 0xda, 0x81, 0x92, 0x87, 0x4d, 0xac, 0xf9, 0xb6, 0xdb, 0x10, 0x76,
	0x85, 0xbd, 0x9a, 0x1c, 0xb6, 0xd1, 0x36, 0xac, 0x78, 0xae, 0xa6, 0x98, 0xc6, 0xa8, 0x51, 0xa0,
	0xa8, 0x65, 0xcf, 0xd5, 0x7a, 0xc6, 0x08, 0xdd, 0x87, 0x32, 0x45, 0x38, 0xb6, 0xeb, 0x37, 0x16,
	0x79, 0x2f, 0x57, 0xeb, 0x91, 0x36, 0x41, 0xea, 0x9e, 0xcf, 0x91, 0x45, 0x86, 0xd4, 0x3d, 0x9f,
	0x21, 0x1f, 0x43, 0x45, 0x77, 0x6d, 0x47, 0x71, 0xb1, 0xea, 0xd9, 0x56, 0x63, 0x89, 0xa2, 0x81,
	0x80, 0x64, 0x0a, 0x41, 0x12, 0xd4, 0x46, 0xa6, 0x7d, 0xa3, 0x98, 0x57, 0x53, 0x47, 0xd1, 0x0d,
	0xb7, 0xb1, 0x4c, 0x49, 0x2a, 0x04, 0xd8, 0xbb, 0x9a, 0x3a, 0x6d, 0xc3, 0x45, 0xdf, 0x84, 0xd5,
	0x88, 0x86, 0xe8, 0xa2, 0xb1, 0x42, 0x89, 0xaa, 0x01, 0xd1, 0xf0, 0xd6, 0xc1, 0x49, 0x4e, 0xd7,
	0xee, 0xa8, 0x51, 0x4a, 0x72, 0x7a, 0xe9, 0x8e, 0xd0, 0xd3, 0x38, 0x8d, 0xe7, 0x6a, 0x8d, 0xf2,
	0xae, 0xb0, 0x57, 0x39, 0x14, 0x0f, 0x98, 0x86, 0xbb, 0xfd, 0xa6, 0xae, 0xbb, 0xd8, 0xf3, 0xa2,
	0x5e, 0x03, 0x57, 0x4b, 0xf6, 0xd2, 0x3d, 0xbf, 0x01, 0x6f, 0xea, 0xd5, 0xf6, 0x7c, 0xf4, 0x0e,
	0xd4, 0xa3, 0x5e, 0xd4, 0x1e, 0x8d, 0x0a, 0x95, 0xa8, 0x16, 0x50, 0xf5, 0xa9, 0x91, 0x13, 0x74,
	0x1e, 0xd5, 0x62, 0x35, 0x49, 0x37, 0xa0, 0xaa, 0x4c, 0xd0, 0xe9, 0x94, 0xae, 0x96, 0xa4, 0x6b,
	0x53, 0xba, 0x7b, 0x50, 0xc2, 0xfe, 0xa5, 0xa2, 0x4f, 0x54, 0xad, 0xb1, 0xba, 0x2b, 0xec, 0x15,
	0xe5, 0x15, 0xec, 0x5f, 0xb6, 0x27, 0xaa, 0x46, 0x50, 0x23, 0xd7, 0x9e, 0x28, 0x9a, 0x33, 0x6d,
	0xd4, 0x77, 0x85, 0xbd, 0x92, 0xbc, 0x42, 0xda, 0x2d, 0x67, 0x4a, 0xac, 0x68, 0x78, 0x0a, 0x1e,
	0x93, 0x79, 0x34, 0x44, 0x8a, 0x2b, 0x19, 0x5e, 0x87, 0xb6, 0xd1, 0x13, 0x28, 0x33, 0x8c, 0x62,
	0x8c, 0x1a, 0x6b, 0x74, 0xf2, 0x5b, 0x07, 0x57, 0x97, 0x07, 0xdd, 0xc0, 0x01, 0x3f, 0xc5, 0xb7,
	0x27, 0xaa, 0xa5, 0x9b, 0x58, 0x2e, 0x31, 0xc2, 0xee, 0x08, 0x3d, 0x04, 0xf0, 0x1c, 0xd5, 0xe2,
	0x8e, 0x81, 0xa8, 0xa8, 0x65, 0x02, 0x61, 0x9e, 0xf1, 0x16, 0x54, 0x55, 0xdf, 0x57, 0xb5, 0x4b,
	0xc5, 0xf3, 0x55, 0xdf, 0x6b, 0xac, 0xd3, 0x31, 0x2b, 0x0c, 0x36, 0x20, 0x20, 0xa9, 0x0d, 0x6b,
	0x49, 0xef, 0x3d, 0xf5, 0xc6, 0xe8, 0x77, 0x60, 0xc5, 0x65, 0xad, 0x86, 0xb0, 0xbb, 0xb8, 0x57,
	0x39, 0xdc, 0x3c, 0x60, 0x4b, 0x26, 0x49, 0x2a, 0x07, 0x54, 0xd2, 0x5f, 0x09, 0x50, 0x0f, 0x71,
	0x9e, 0x63, 0x5b, 0x1e, 0x46, 0xc7, 0x00, 0xaa, 0x63, 0xd0, 0x91, 0xa7, 0x1e, 0x5d, 0x07, 0xab,
	0xa1, 0x39, 0x9b, 0x8e, 0x31, 0xa0, 0xf0, 0xa3, 0xcd, 0xff, 0xf9, 0xf7, 0xc7, 0x6b, 0xd7, 0xd8,
	0x32, 0x34, 0xfc, 0x83, 0x88, 0x5c, 0x2e, 0xab, 0x01, 0x45, 0x5c, 0x98, 0x02, 0x55, 0xcb, 0x1b,
	0x84, 0x21, 0xeb, 0x81, 0x4e, 0x57, 0x31, 0x2c, 0x1d, 0xbf, 0xe6, 0x6b, 0x09, 0x28, 0xa8, 0x4b,
	0x20, 0xd2, 0x09, 0xa0, 0x94, 0xb0, 0x64, 0xd2, 0x87, 0x50, 0x72, 0x79, 0x93, 0xcf, 0x7a, 0x2b,
	0x3d, 0x10, 0xc3, 0xca, 0x21, 0x9d, 0xd4, 0x07, 0x71, 0x60, 0xa9, 0x57, 0x78, 0x48, 0x04, 0xe0,
	0xc3, 0xef, 0x41, 0x91, 0xae, 0x1f, 0x36, 0xe3, 0x0d, 0x3e, 0xe3, 0x90, 0x8c, 0xac, 0x23, 0x99,
	0x52, 0x20, 0x04, 0xc5, 0x6b, 0x53, 0xb5, 0x78, 0x20, 0xa0, 0xdf, 0xd2, 0x09, 0xac, 0xa7, 0x39,
	0x12, 0xe1, 0xbe, 0x9d, 0xb6, 0xc8, 0x36, 0x97, 0x2d, 0x4d, 0x1c, 0xd9, 0xe4, 0x8f, 0x05, 0x58,
	0x8b, 0x61, 0xef, 0xd8, 0x2a, 0xdf, 0x4e, 0x5b, 0xe5, 0xcd, 0x02, 0xf5, 0x60, 0x23, 0x23, 0x0f,
	0x99, 0xdb, 0xd3, 0x8c, 0xe2, 0x1b, 0x59, 0x5e, 0x19, 0xd5, 0x1f, 0xc1, 0x56, 0x88, 0x6e, 0x63,
	0x13, 0xfb, 0xf8, 0xd7, 0x36, 0x80, 0x34, 0x84, 0x7b, 0xf9, 0x3c, 0x88, 0x58, 0xdf, 0x4d, 0xab,
	0xfc, 0x61, 0x5a, 0xaa, 0x44, 0x97, 0x68, 0x9e, 0x2a, 0x6c, 0x67, 0x48, 0xee, 0x56, 0xfb, 0xd2,
	0x67, 0xb0, 0x33, 0x63, 0x08, 0x22, 0xf9, 0x0f, 0x32, 0x0a, 0x7d, 0x34, 0x4b, 0xf4, 0x8c, 0x5a,
	0xa7, 0xb0, 0xf6, 0x0c, 0x5b, 0xd8, 0x35, 0xb4, 0x73, 0x27, 0xdc, 0xd0, 0x44, 0x58, 0xb4, 0x1d,
	0x8b, 0xef, 0x65, 0xe4, 0x93, 0xba, 0xae, 0x6a, 0x7e, 0x9b, 0xda, 0xbe, 0x28, 0xd3, 0x6f, 0x0e,
	0x3b, 0xa4, 0x0b, 0x8e, 0xc1, 0x0e, 0x39, 0xec, 0x09, 0xdd, 0xb3, 0x18, 0xec, 0x09, 0x87, 0x3d,
	0xa5, 0x1b, 0x15, 0x83, 0x3d, 0x95, 0x3e, 0x81, 0x8d, 0xcc, 0xb0, 0x6c, 0x51, 0xa6, 0x8c, 0x10,
	0xb8, 0x46, 0x86, 0x3a, 0xd2, 0xff, 0x05, 0x88, 0x11, 0x96, 0xbb, 0x6b, 0x20, 0xaf, 0x90, 0x23,
	0x6f, 0x21, 0x47, 0xde, 0xc5, 0x1c, 0x79, 0x8b, 0x31, 0x79, 0xff, 0x48, 0x00, 0x14, 0x17, 0xe1,
	0xce, 0x63, 0xde, 0x32, 0xe7, 0x91, 0x5c, 0x5c, 0xe9, 0x79, 0xc9, 0x9c, 0x4c, 0x3a, 0x83, 0xcd,
	0xac, 0x38, 0x44, 0x81, 0x1f, 0x65, 0x7c, 0xe1, 0x5e, 0x8e, 0x06, 0x33, 0x6e, 0xf0, 0x4f, 0x02,
	0xd4, 0x65, 0x3c, 0x36, 0x3c, 0x1f, 0xbb, 0x81, 0x17, 0x6c, 0xc3, 0xb2, 0x8b, 0xc7, 0x8a, 0xa1,
	0xd3, 0x89, 0xad, 0x9c, 0x2c, 0xc8, 0x4b, 0x2e, 0x1e, 0x77, 0x75, 0x74, 0x9f, 0x8c, 0x31, 0x56,
	0x2c, 0x75, 0x82, 0xa9, 0xbc, 0xe5, 0x93, 0x05, 0x62, 0x8d, 0xf1, 0x99, 0x3a, 0xc1, 0x68, 0x03,
	0x8a, 0xaa, 0xae, 0xbb, 0x4c, 0xa3, 0x27, 0x0b, 0x32, 0x6d, 0x91, 0x8d, 0xeb, 0xc2, 0xb4, 0xb5,
	0x2b, 0xd6, 0x89, 0x68, 0xb6, 0x2c, 0x97, 0x29, 0x84, 0x76, 0xda, 0x81, 0x92, 0x61, 0x79, 0xbe,
	0x6a, 0x69, 0x98, 0xe7, 0x33, 0x61, 0x9b, 0x6c, 0xb0, 0x64, 0x34, 0x5d, 0xf5, 0x55, 0x9e, 0xc8,
	0x90, 0xb1, 0xda, 0xaa, 0xaf, 0x1e, 0xad, 0x41, 0xdd, 0xd0, 0x29, 0x4b, 0xc5, 0x76, 0x15, 0x32,
	0x90, 0x74, 0x0c, 0x28, 0x35, 0x0f, 0xa2, 0x95, 0x0f, 0xd3, 0x6e, 0x15, 0x84, 0xfa, 0x14, 0x6d,
	0xe4, 0x54, 0x7f, 0x20, 0x80, 0x18, 0x21, 0xef, 0xd8, 0xdc, 0xef, 0x42, 0x91, 0x4e, 0x87, 0x19,
	0x7b, 0x3d, 0x25, 0x0b, 0x99, 0x9a, 0x4c, 0x09, 0xa4, 0x4f, 0x60, 0x3d, 0x2d, 0x04, 0x99, 0xce,
	0x93, 0x8c, 0x91, 0xb7, 0x33, 0xf3, 0xc9, 0x33, 0x71, 0xed, 0x14, 0x4f, 0x6c, 0xf7, 0x36, 0x30,
	0xf0, 0x7d, 0x28, 0xf9, 0xea, 0x85, 0x89, 0xe3, 0x26, 0x5e, 0xa1, 0x90, 0xae, 0x8e, 0x1e, 0x03,
	0x30, 0x64, 0xc2, 0xcc, 0x65, 0x0a, 0xe3, 0x86, 0x5e, 0x8a, 0x6f, 0xb8, 0xac, 0x41, 0xa0, 0xde,
	0xcd, 0x15, 0xbe, 0xa5, 0x36, 0xae, 0xca, 0xac, 0x41, 0xf3, 0x16, 0xf2, 0xa1, 0x4c, 0x54, 0xef,
	0x8a, 0x5a, 0xb8, 0x2a, 0x97, 0x29, 0xe4, 0x54, 0xf5, 0xae, 0xd0, 0x23, 0x00, 0x55, 0xf3, 0x0d,
	0xdb, 0x0a, 0x8d, 0x5c, 0x95, 0x63, 0x90, 0xa3, 0x2a, 0x80, 0xa1, 0x13, 0x13, 0x13, 0x59, 0xa4,
	0x23, 0x10, 0x13, 0xf3, 0x20, 0x1a, 0x39, 0x48, 0x1b, 0x78, 0x83, 0x2b, 0x24, 0x41, 0x19, 0x99,
	0xf7, 0x1f, 0x05, 0x58, 0x0d, 0x50, 0x77, 0x6c, 0xdc, 0x50, 0x2f, 0x85, 0x5c, 0xbd, 0x2c, 0xce,
	0xd6, 0x4b, 0x71, 0xbe, 0x5e, 0x96, 0xd2, 0x7a, 0x91, 0x8e, 0x61, 0x2d, 0x39, 0x09, 0x96, 0x3a,
	0xa4, 0x9d, 0x63, 0x33, 0xa5, 0x8b, 0x8c, 0x6b, 0xfc, 0x38, 0xd4, 0xa8, 0x7a, 0x13, 0x38, 0x47,
	0x03, 0x56, 0x54, 0x96, 0x82, 0xf3, 0x20, 0x1a, 0x34, 0xc9, 0xee, 0x60, 0xe2, 0x20, 0x8b, 0x21,
	0x9f, 0x24, 0x89, 0x49, 0xf7, 0x9f, 0x9b, 0xc4, 0xa4, 0x89, 0x23, 0xbb, 0xfc, 0x5e, 0x38, 0x23,
	0x82, 0xbc, 0x63, 0xcb, 0x24, 0xd5, 0x59, 0xc8, 0xa8, 0xb3, 0x07, 0x1b, 0x99, 0xc1, 0xe7, 0x27,
	0x2c, 0x19, 0xf2, 0x98, 0x52, 0x75, 0xd8, 0x0a, 0xd1, 0x2f, 0x1c, 0x5d, 0x8d, 0x12, 0x96, 0xd9,
	0xaa, 0x7d, 0x83, 0x84, 0x81, 0xea, 0x17, 0x23, 0xd5, 0x0f, 0xe1, 0x5e, 0xfe, 0x28, 0x73, 0x53,
	0x9a, 0xfc, 0x2e, 0x89, 0x94, 0x26, 0x43, 0x72, 0xf7, 0x29, 0xcd, 0x8c, 0x21, 0xe6, 0xa7, 0x34,
	0x33, 0x3a, 0xc5, 0x14, 0xff, 0x39, 0x54, 0xe3, 0xa1, 0x34, 0xd8, 0x40, 0x68, 0x1c, 0x13, 0xe8,
	0xce, 0x13, 0x6e, 0x56, 0x31, 0x4b, 0x14, 0x18, 0x26, 0xb0, 0xc4, 0x06, 0x2c, 0x5d, 0xab, 0xe6,
	0x14, 0x53, 0x5d, 0x97, 0x65, 0xd6, 0x90, 0xde, 0x83, 0xea, 0x29, 0x9e, 0x0c, 0x5d, 0x55, 0xbb,
	0x1a, 0x38, 0x98, 0x1e, 0xfe, 0x54, 0xd3, 0xb4, 0xb5, 0x20, 0x82, 0xd6, 0xe4, 0x15, 0xda, 0xee,
	0xea, 0xd2, 0x8f, 0x00, 0x05, 0xa4, 0xcf, 0x70, 0x78, 0x58, 0x78, 0x17, 0x8a, 0x9e, 0x83, 0x35,
	0x4a, 0x1c, 0x45, 0xfe, 0x38, 0x4f, 0x99, 0x12, 0x48, 0x3d, 0xd8, 0xcc, 0x76, 0x67, 0xb1, 0x3f,
	0x65, 0xd3, 0x7b, 0x29, 0x26, 0x11, 0x79, 0x64, 0x4f, 0x91, 0x46, 0x3b, 0x36, 0x06, 0x53, 0xff,
	0xa7, 0x74, 0x33, 0x08, 0x21, 0x1e, 0x09, 0x45, 0xd6, 0x74, 0xa2, 0x50, 0xf1, 0x3d, 0x3e, 0x99,
	0xb2, 0x35, 0x9d, 0x34, 0x29, 0x80, 0x9c, 0x65, 0x09, 0x7a, 0xe4, 0x62, 0xec, 0xf1, 0xa5, 0x5f,
	0xb2, 0xa6, 0x93, 0x63, 0xd2, 0x96, 0xfe, 0x53, 0xa0, 0x01, 0x20, 0x1a, 0xfe, 0xee, 0xf7, 0x4b,
	0xaa, 0xb5, 0xc2, 0x1b, 0xb4, 0x86, 0xbe, 0x15, 0xe6, 0x51, 0x8b, 0x89, 0xa3, 0x63, 0x72, 0xf2,
	0x41, 0x16, 0x85, 0xf6, 0x61, 0x89, 0x1d, 0x94, 0x8b, 0x94, 0x7a, 0x23, 0x87, 0xda, 0x93, 0x19,
	0x89, 0xd4, 0xa7, 0xcb, 0x39, 0x3d, 0x45, 0x62, 0x91, 0xef, 0x64, 0x7c, 0x75, 0x27, 0xcf, 0x24,
	0x19, 0x3f, 0xfd, 0xbb, 0x02, 0x94, 0x06, 0xa6, 0x7a, 0x41, 0x3d, 0x09, 0x41, 0x31, 0xe6, 0xa0,
	0xf4, 0x1b, 0xad, 0x42, 0xc1, 0xd0, 0xb9, 0xb2, 0x0b, 0x86, 0x4e, 0x8e, 0xf7, 0xd8, 0xc4, 0x13,
	0x6c, 0xf9, 0x8a, 0x67, 0x7c, 0x89, 0x79, 0x18, 0xa8, 0x70, 0xd8, 0xc0, 0xf8, 0x12, 0xa3, 0x0f,
	0x00, 0xf1, 0xa6, 0xa7, 0x38, 0xd8, 0x55, 0x68, 0x8a, 0xc5, 0x2b, 0x48, 0x62, 0x80, 0xe9, 0x63,
	0xf7, 0x88, 0xc0, 0xc9, 0xc9, 0xd9, 0xbf, 0x74, 0xb1, 0xaa, 0x2b, 0x9e, 0x3a, 0x62, 0x99, 0x57,
	0x49, 0x06, 0x06, 0x1a, 0xa8, 0x23, 0x8c, 0xbe, 0x09, 0xab, 0x63, 0xd7, 0xbe, 0x51, 0x6c, 0x4b,
	0xd1, 0xf1, 0x44, 0xb5, 0x74, 0xba, 0x39, 0x97, 0xe4, 0x2a, 0x81, 0x9e, 0x5b, 0x6d, 0x0a, 0x23,
	0x72, 0xe9, 0xd8, 0x54, 0x6f, 0x15, 0x9d, 0x9e, 0x32, 0x68, 0x25, 0xa9, 0x24, 0x57, 0x28, 0x8c,
	0x1d, 0x3c, 0x88, 0x5c, 0x5f, 0x62, 0xd7, 0x26, 0x8c, 0xa8, 0x87, 0xa9, 0x24, 0xa4, 0xd1, 0x6a,
	0x52, 0x49, 0x16, 0x09, 0xe6, 0xdc, 0x6a, 0x86, 0x70, 0x32, 0xac, 0xab, 0xde, 0x30, 0xe1, 0xd9,
	0x54, 0xcb, 0xac, 0x38, 0xe5, 0xaa, 0x37, 0x54, 0x72, 0x32, 0x57, 0xa9, 0x0a, 0x40, 0xd5, 0xc7,
	0x1c, 0xfa, 0xef, 0x05, 0x28, 0x07, 0x4d, 0x0f, 0x7d, 0x0b, 0xd6, 0x89, 0xbb, 0x86, 0xba, 0x30,
	0x2c, 0x65, 0xea, 0x61, 0xee, 0xd6, 0xa2, 0x35, 0x9d, 0x74, 0x38, 0xa6, 0x6b, 0xbd, 0xf0, 0x70,
	0xca, 0xf9, 0x0b, 0x73, 0x9d, 0x7f, 0x31, 0xe9, 0xfc, 0x68, 0x0f, 0xc4, 0xb0, 0xaf, 0x82, 0x5d,
	0xd7, 0x76, 0x3d, 0xae, 0xf0, 0xd5, 0x80, 0x43, 0x87, 0x42, 0x83, 0x51, 0xe8, 0xb4, 0x3c, 0x9e,
	0xe7, 0x12, 0xc6, 0x74, 0x4a, 0x9e, 0xb4, 0x0b, 0xab, 0x64, 0x02, 0xb1, 0x68, 0xc1, 0x1c, 0x40,
	0x08, 0x1c, 0x40, 0x6a, 0xc3, 0x5a, 0x92, 0x62, 0x6e, 0xf1, 0x26, 0x49, 0x1a, 0x05, 0x83, 0x7f,
	0x15, 0xa0, 0x1e, 0xe2, 0xee, 0x78, 0xa5, 0x7e, 0x23, 0xb1, 0x52, 0xeb, 0x31, 0x49, 0x62, 0xab,
	0xf4, 0xbd, 0xd4, 0x2a, 0x5d, 0x8b, 0x93, 0x25, 0x57, 0xe8, 0x3b, 0xc9, 0x15, 0x2a, 0xa6, 0x28,
	0xc3, 0xd5, 0x79, 0x02, 0x28, 0x35, 0xa5, 0xf9, 0x25, 0x9e, 0x14, 0x71, 0x6c, 0x55, 0xfe, 0xad,
	0x00, 0xb5, 0x13, 0xd5, 0xbb, 0x1c, 0x92, 0x44, 0x77, 0xe6, 0xd2, 0x7c, 0x0c, 0x15, 0x6a, 0xca,
	0xa9, 0x76, 0x85, 0xfd, 0xc0, 0x63, 0x88, 0x75, 0x8f, 0x18, 0x24, 0xbd, 0xb4, 0x16, 0x33, 0x4b,
	0x6b, 0x0f, 0xc4, 0x89, 0xfa, 0x9a, 0x73, 0x50, 0x74, 0xec, 0xf8, 0x97, 0x81, 0xdb, 0x4c, 0xd4,
	0xd7, 0x8c, 0x4d, 0x9b, 0x40, 0x09, 0xa5, 0x7a, 0x3d, 0x4e, 0x52, 0x32, 0xe7, 0x59, 0x55, 0xaf,
	0xc7, 0x31, 0x4a, 0x69, 0x0d, 0xea, 0x91, 0xe8, 0x6c, 0x59, 0xfc, 0xb7, 0x00, 0xab, 0x09, 0x98,
	0x17, 0xc8, 0x8e, 0x2d, 0xdf, 0x35, 0x70, 0x10, 0xea, 0x89, 0xec, 0x1d, 0x06, 0x09, 0x08, 0x0c,
	0xcb, 0xc3, 0x6e, 0x62, 0x72, 0x5d, 0x06, 0x41, 0xfb, 0xb0, 0x16, 0x11, 0x04, 0x3e, 0xcf, 0xd6,
	0x45, 0x3d, 0x24, 0xe3, 0x4e, 0xcf, 0x99, 0xb1, 0xd0, 0x10, 0xac, 0x0c, 0xc2, 0x8c, 0x45, 0x86,
	0x90, 0x19, 0x23, 0x08, 0x98, 0x2d, 0x85, 0xcc, 0x18, 0x59, 0x92, 0x99, 0x69, 0xdb, 0x57, 0x53,
	0xc7, 0xe3, 0xc7, 0x41, 0xc2, 0xac, 0xc7, 0x20, 0xd2, 0x7f, 0x09, 0xb0, 0x11, 0x4e, 0xf7, 0xb7,
	0xe1, 0xe0, 0x7b, 0x09, 0x07, 0x0f, 0x76, 0x8c, 0x84, 0xc3, 0x70, 0x2f, 0x3f, 0x48, 0x79, 0xf9,
	0x56, 0x86, 0x36, 0xe9, 0xea, 0xef, 0x27, 0x5d, 0x7d, 0x33, 0x8f, 0x3c, 0xf4, 0x77, 0x19, 0xb6,
	0xf3, 0xa6, 0xc9, 0x92, 0xbe, 0xb4, 0xd3, 0xdf, 0x4f, 0xb3, 0xca, 0xf7, 0xfc, 0xff, 0x15, 0x00,
	0x86, 0xcc, 0x41, 0xbf, 0xee, 0x8e, 0xf4, 0x10, 0xc0, 0xe1, 0x6e, 0x6e, 0xe8, 0xdc, 0x03, 0xca,
	0x1c, 0xd2, 0xd5, 0x09, 0x0b, 0xc7, 0x35, 0x6c, 0x3a, 0xa3, 0x25, 0x99, 0x7e, 0xa3, 0x8f, 0xa0,
	0xea, 0x69, 0x97, 0x58, 0x57, 0x1c, 0xdb, 0x34, 0xb4, 0x5b, 0x6a, 0xe9, 0xd5, 0x43, 0x14, 0xac,
	0x4b, 0x82, 0xea, 0x53, 0x8c, 0x5c, 0xf1, 0xa2, 0x06, 0xc9, 0xd4, 0xdc, 0xa9, 0x65, 0x19, 0xd6,
	0x98, 0x6f, 0x41, 0x41, 0x13, 0xbd, 0x0d, 0x45, 0xd7, 0x36, 0xd9, 0xae, 0xb3, 0x1a, 0xc6, 0x12,
	0x36, 0x11, 0xd9, 0x36, 0xb1, 0x4c, 0xd1, 0x24, 0x86, 0x6b, 0xb6, 0x8b, 0xd9, 0x49, 0xab, 0x44,
	0xd3, 0xee, 0x12, 0x01, 0x90, 0x83, 0x96, 0xf4, 0x2e, 0x54, 0xf9, 0xcc, 0x99, 0x2d, 0xb6, 0x61,
	0xc5, 0x54, 0x3d, 0x5f, 0xb9, 0xbc, 0xe0, 0x19, 0xfa, 0x32, 0x69, 0x9e, 0x5c, 0x48, 0x35, 0xa8,
	0x44, 0x84, 0x9e, 0xf4, 0x17, 0x05, 0x58, 0xe5, 0x23, 0xdd, 0xb5, 0xa3, 0xed, 0xc3, 0x9a, 0x66,
	0x5b, 0xbe, 0x6b, 0x9b, 0x4a, 0x24, 0x37, 0x2b, 0x5d, 0xd5, 0x39, 0xa2, 0xc5, 0xc5, 0x27, 0xfb,
	0x25, 0x39, 0x1e, 0xc4, 0x08, 0x59, 0x3d, 0xab, 0x4a, 0xa0, 0x21, 0xd5, 0xdb, 0xdc, 0x75, 0x8b,
	0x89, 0xa0, 0x1b, 0x59, 0x9c, 0xfb, 0xed, 0xfb, 0xa1, 0xdf, 0x2e, 0x25, 0xd2, 0xad, 0xb8, 0x82,
	0x42, 0xa7, 0xdd, 0x0b, 0x9c, 0x76, 0x99, 0xd2, 0xa2, 0x0c, 0x6d, 0xe8, 0xb1, 0xc7, 0xb0, 0x96,
	0xd4, 0xd4, 0xfc, 0xb3, 0x6a, 0x92, 0x36, 0xe6, 0xa5, 0xbf, 0x0b, 0x65, 0x92, 0x53, 0xb1, 0xd0,
	0x7c, 0x08, 0x15, 0x9f, 0x34, 0x14, 0x13, 0x5f, 0x63, 0x93, 0x6b, 0x3b, 0x9c, 0x19, 0xc1, 0xf4,
	0x08, 0x42, 0x06, 0x3f, 0xfc, 0x96, 0x7e, 0x04, 0x75, 0x8a, 0x89, 0x6d, 0xa1, 0xfb, 0xe9, 0x2d,
	0x54, 0x8c, 0xb3, 0xa0, 0xba, 0x09, 0x77, 0xcf, 0x3f, 0x14, 0xa0, 0xc6, 0xfb, 0xdf, 0xb1, 0xc5,
	0x53, 0x93, 0x29, 0x7c, 0x9d, 0xc9, 0xb4, 0x41, 0x4c, 0x08, 0xc3, 0x8a, 0x5d, 0x69, 0xa5, 0x6e,
	0xc4, 0x99, 0xe4, 0xe8, 0xf4, 0x1f, 0x0a, 0x50, 0x3d, 0x75, 0xa6, 0x91, 0x5e, 0xb7, 0x60, 0x19,
	0x5b, 0x24, 0x52, 0xd0, 0xe9, 0x94, 0x64, 0xde, 0x22, 0x99, 0x1e, 0x13, 0x91, 0x63, 0x0b, 0x2c,
	0xd3, 0xa3, 0xb0, 0x0e, 0x23, 0xb9, 0x0f, 0x65, 0xe7, 0xf2, 0x5a, 0xa1, 0x03, 0xf2, 0x6d, 0xaf,
	0xe4, 0x5c, 0x5e, 0xb7, 0x49, 0x3b, 0x40, 0xd2, 0x20, 0x4f, 0xfd, 0x90, 0x21, 0x69, 0x74, 0x27,
	0x87, 0xa9, 0x1b, 0xd5, 0xd7, 0x2e, 0x15, 0x47, 0xe3, 0xb5, 0xe2, 0x15, 0xda, 0xee, 0x6b, 0xa4,
	0xdf, 0x85, 0xea, 0x61, 0x5a, 0xe2, 0xa3, 0xae, 0x56, 0x94, 0x4b, 0x04, 0xd0, 0xd4, 0x75, 0xda,
	0xef, 0x62, 0x3a, 0x62, 0x79, 0x22, 0xbb, 0xc4, 0x5c, 0xb9, 0x98, 0x8e, 0x68, 0x3a, 0x7c, 0x1f,
	0x58, 0xc1, 0x4a, 0xb9, 0xc2, 0xb7, 0x3c, 0xdb, 0x64, 0x25, 0xaf, 0x4f, 0xf1, 0x2d, 0x92, 0xa0,
	0x6a, 0x58, 0x9e, 0xef, 0x4e, 0xe9, 0xf9, 0xda, 0xa3, 0x39, 0x66, 0x49, 0x4e, 0xc0, 0x48, 0x04,
	0xbb, 0x71, 0x55, 0x87, 0xde, 0x4e, 0x96, 0x64, 0xfa, 0x4d, 0x8e, 0x86, 0x2e, 0xf6, 0xb0, 0x4f,
	0xaf, 0x1e, 0x4b, 0x32, 0x6b, 0x48, 0x7f, 0x29, 0x40, 0x3d, 0xd0, 0x61, 0x90, 0xbf, 0xfd, 0x04,
	0x6a, 0x8e, 0xe1, 0x60, 0xd3, 0xb0, 0xb0, 0x12, 0xbb, 0xa2, 0x08, 0xe2, 0x71, 0x40, 0xde, 0xe7,
	0x34, 0xf4, 0xa6, 0xa2, 0xea, 0xc4, 0x5a, 0x64, 0x6e, 0x9e, 0xaf, 0x8e, 0x69, 0x89, 0x8e, 0x85,
	0xdd, 0x15, 0xda, 0xee, 0xea, 0x48, 0x84, 0xc5, 0x89, 0x33, 0x0d, 0x6a, 0x01, 0x13, 0x67, 0x1a,
	0x1e, 0x93, 0x8a, 0xc9, 0x63, 0x52, 0xcc, 0xb0, 0xfc, 0x70, 0x79, 0x0c, 0x28, 0x25, 0xea, 0xdc,
	0x22, 0x69, 0x8a, 0x36, 0x5a, 0x0b, 0x7f, 0x2e, 0x80, 0x18, 0x21, 0xff, 0x7f, 0x0e, 0x7d, 0x99,
	0xd9, 0xd0, 0xfb, 0x70, 0x82, 0x4b, 0xde, 0xff, 0x51, 0x10, 0xbb, 0xff, 0xfb, 0x04, 0xd6, 0xd3,
	0x52, 0xce, 0xaf, 0xa2, 0xa6, 0xa9, 0x63, 0x4b, 0xe5, 0x67, 0xb0, 0x76, 0x6c, 0x4e, 0xbd, 0xcb,
	0x9e, 0x3d, 0xf6, 0xee, 0xbc, 0x26, 0xd2, 0x83, 0x8d, 0x0c, 0xf3, 0xf9, 0x05, 0xa8, 0x0c, 0x79,
	0x4c, 0xd4, 0x67, 0xb0, 0xdd, 0x1c, 0x1b, 0xd6, 0x98, 0x4e, 0x25, 0x59, 0x81, 0xfa, 0x00, 0x90,
	0x4a, 0x50, 0x4a, 0x62, 0x35, 0xb3, 0xb5, 0x2e, 0xaa, 0x61, 0x27, 0xb6, 0xa4, 0xa5, 0x97, 0xb0,
	0x33, 0x83, 0x11, 0x11, 0xee, 0x7b, 0x69, 0xb7, 0x09, 0x2a, 0x35, 0x33, 0xfa, 0x44, 0xee, 0xd3,
	0x84, 0xcd, 0x63, 0x1f, 0xe7, 0x88, 0xb7, 0x07, 0xe2, 0xc8, 0xc7, 0x79, 0xc2, 0xad, 0x8e, 0x78,
	0x07, 0x2e, 0x9a, 0x0c, 0x8d, 0x5c, 0x16, 0xec, 0x5c, 0x9e, 0x12, 0xec, 0x41, 0x74, 0xbf, 0x3b,
	0x4f, 0xac, 0xbf, 0x11, 0xa0, 0xdc, 0xa2, 0xa7, 0x4c, 0xe2, 0x5d, 0x6f, 0xc3, 0xea, 0xa5, 0xea,
	0xea, 0x37, 0xaa, 0x8b, 0x15, 0x8d, 0x9e, 0xa6, 0x59, 0x46, 0x50, 0x0b, 0xa0, 0x94, 0x14, 0x7d,
	0x07, 0x6a, 0x14, 0xab, 0xd8, 0xfc, 0x39, 0x45, 0x21, 0x91, 0xd7, 0x50, 0xa2, 0x73, 0xfa, 0xa8,
	0x42, 0xae, 0x68, 0x51, 0x83, 0xb0, 0xf7, 0xec, 0x91, 0x4f, 0xd9, 0xeb, 0xd8, 0xf4, 0x55, 0xbe,
	0x75, 0xd7, 0x02, 0x68, 0x9b, 0x00, 0x13, 0x64, 0x5a, 0x78, 0xa6, 0x8f, 0x91, 0xd1, 0x01, 0x48,
	0x7a, 0xc2, 0x24, 0x67, 0xfe, 0x54, 0x05, 0x08, 0x9b, 0x9e, 0xf4, 0x4b, 0x01, 0x6a, 0xb4, 0x79,
	0xe7, 0x4b, 0xf5, 0x9b, 0x89, 0xa5, 0x2a, 0xc6, 0xe7, 0x1c, 0x5b, 0xa7, 0xfb, 0xa9, 0x84, 0x38,
	0xa1, 0x9b, 0x54, 0x5e, 0xf1, 0x6e, 0x32, 0x19, 0x5e, 0x4b, 0x93, 0x86, 0x69, 0xc5, 0x47, 0x50,
	0x3e, 0x52, 0x2d, 0xfd, 0xc6, 0xd0, 0xfd, 0x4b, 0x12, 0xad, 0x49, 0xd6, 0x40, 0x67, 0x22, 0xc8,
	0xf4, 0x9b, 0x44, 0xeb, 0x1b, 0xd7, 0xf0, 0x99, 0x41, 0x04, 0x99, 0x35, 0xa4, 0xcf, 0xa1, 0x7e,
	0x72, 0x31, 0x39, 0xba, 0x89, 0x1d, 0xb6, 0xf9, 0xd9, 0xc2, 0x53, 0x27, 0x8e, 0x99, 0x38, 0x16,
	0x0d, 0x18, 0x84, 0xda, 0xc0, 0xc4, 0xd8, 0x51, 0xe8, 0x1b, 0xa1, 0x6b, 0xd5, 0xe4, 0x11, 0xb9,
	0x46, 0xa1, 0x5d, 0x0e, 0x24, 0xc1, 0x35, 0xc5, 0x7a, 0x6e, 0x70, 0x4d, 0xd1, 0x46, 0x6e, 0xf8,
	0xd7, 0x02, 0x88, 0x11, 0x92, 0x5b, 0xec, 0xed, 0xc4, 0x5d, 0x77, 0xa8, 0x16, 0xd5, 0x71, 0x0d,
	0x5a, 0x45, 0xe0, 0x2f, 0x0d, 0xf6, 0x61, 0x45, 0xbd, 0xc6, 0xae, 0x3a, 0xc6, 0x29, 0x9b, 0x84,
	0xba, 0x92, 0x03, 0x02, 0x42, 0x3b, 0x51, 0x5f, 0x1b, 0x93, 0xe9, 0x84, 0xdb, 0x25, 0x87, 0x96,
	0x13, 0x90, 0xed, 0x48, 0x33, 0xaf, 0x14, 0xdd, 0x18, 0x8d, 0xb8, 0x03, 0xae, 0x68, 0xe6, 0x55,
	0xdb, 0x18, 0x8d, 0x48, 0x90, 0x4d, 0x4b, 0x3b, 0x3f, 0xc8, 0xa6, 0xa9, 0x63, 0x91, 0xeb, 0x87,
	0x50, 0xef, 0x99, 0xda, 0x00, 0xfb, 0x53, 0x27, 0xb0, 0xce, 0x7b, 0x89, 0x89, 0x07, 0x59, 0x62,
	0xcf, 0xd4, 0x5a, 0xf6, 0x94, 0x68, 0x3e, 0x76, 0xcb, 0x7f, 0x0c, 0x28, 0xd5, 0x7b, 0xae, 0x01,
	0x52, 0xb4, 0x91, 0x01, 0xbe, 0x00, 0x31, 0xc2, 0xdd, 0x71, 0xa4, 0xff, 0x04, 0xd6, 0xd3, 0xbc,
	0xe7, 0x6b, 0x2b, 0x4d, 0x1d, 0xd3, 0xd6, 0x9f, 0x0a, 0xb0, 0xda, 0x33, 0xb5, 0xdf, 0xc6, 0x69,
	0x37, 0xd0, 0x7a, 0xe1, 0x8d, 0x5a, 0x27, 0xeb, 0x4c, 0x23, 0xc0, 0xc6, 0xe2, 0xee, 0xe2, 0x5e,
	0x4d, 0x66, 0x0d, 0x92, 0xf5, 0x27, 0x45, 0x9b, 0x9f, 0xf5, 0x27, 0x69, 0x63, 0x73, 0x3c, 0x83,
	0xea, 0xc9, 0xc5, 0xa4, 0xa5, 0x6a, 0x97, 0x78, 0xe0, 0xaa, 0x13, 0xf4, 0x4e, 0xc2, 0x1d, 0x50,
	0xe4, 0x52, 0x04, 0x1b, 0x93, 0x2a, 0x4a, 0x64, 0x0b, 0xf1, 0x44, 0x56, 0x7a, 0x1b, 0x2a, 0x01,
	0xbf, 0x9e, 0x39, 0x33, 0xdf, 0x95, 0xa6, 0x34, 0x4c, 0x50, 0xb2, 0x98, 0x23, 0x7a, 0xae, 0x3a,
	0x49, 0x55, 0xf0, 0xe3, 0xc2, 0x9d, 0x2c, 0xc8, 0x94, 0x04, 0xbd, 0x03, 0x8b, 0xa6, 0x19, 0x44,
	0x45, 0x94, 0xa2, 0xec, 0x99, 0xda, 0xc9, 0x82, 0x4c, 0x08, 0x8e, 0xea, 0x50, 0xd3, 0x08, 0x48,
	0x71, 0xf1, 0x98, 0x64, 0x9d, 0x3c, 0x84, 0xc4, 0x87, 0x7d, 0x53, 0x08, 0x89, 0xd3, 0x26, 0x3c,
	0x38, 0xc2, 0xdd, 0xbd, 0x07, 0xa7, 0x79, 0xbf, 0x71, 0xbd, 0x27, 0xa8, 0x63, 0xd6, 0xbd, 0x80,
	0x52, 0xcb, 0xf6, 0x58, 0x75, 0x4a, 0x84, 0x45, 0xcd, 0x0e, 0xc2, 0x2f, 0xf9, 0x24, 0x71, 0x57,
	0xb7, 0x6d, 0xf7, 0x02, 0x9b, 0xe4, 0x28, 0x4c, 0x5c, 0x8c, 0xc7, 0xdd, 0x00, 0x4a, 0x9d, 0x11,
	0x3d, 0x04, 0x78, 0x6d, 0x5b, 0x4a, 0x6c, 0x8b, 0x29, 0xc9, 0xe5, 0xd7, 0x36, 0x7f, 0x39, 0x21,
	0xfd, 0xaa, 0x00, 0x5b, 0xb4, 0xba, 0x30, 0x35, 0xb1, 0xcb, 0xb6, 0x90, 0xbb, 0x5e, 0x2d, 0x1f,
	0x00, 0x0a, 0x05, 0xf5, 0xb0, 0x9f, 0x10, 0x56, 0x0c, 0x30, 0x03, 0xec, 0x33, 0x79, 0x3f, 0x84,
	0x8d, 0x68, 0x5a, 0x26, 0x56, 0x5d, 0x25, 0x58, 0x3f, 0x84, 0x3e, 0xe4, 0xd4, 0x22, 0x28, 0xd6,
	0xe3, 0x10, 0x36, 0x5d, 0xd5, 0xc7, 0xa6, 0x31, 0x31, 0x7c, 0x32, 0xbc, 0x1b, 0x0c, 0xc1, 0x8a,
	0x6a, 0xeb, 0x21, 0x72, 0x40, 0x70, 0xe1, 0x28, 0xf1, 0x3e, 0xb6, 0xc3, 0xbb, 0xb0, 0x02, 0x1b,
	0x8a, 0x75, 0xb1, 0x1d, 0xd6, 0xe3, 0x03, 0x28, 0x6b, 0xb6, 0x47, 0xcb, 0x83, 0xb7, 0x8d, 0x65,
	0x6a, 0xc2, 0xa0, 0x8e, 0x1b, 0x18, 0x49, 0x2e, 0x69, 0xb6, 0xd7, 0x21, 0x04, 0xd2, 0x4b, 0xb8,
	0x97, 0xaf, 0x55, 0xe2, 0x0c, 0xdf, 0xcf, 0x38, 0xc3, 0xc3, 0x78, 0x9d, 0x27, 0xd3, 0x27, 0xe6,
	0x12, 0x87, 0xb0, 0xfc, 0x5c, 0x56, 0xad, 0x31, 0x46, 0xeb, 0xb0, 0xf4, 0x4a, 0xb9, 0xc0, 0x63,
	0xee, 0x12, 0xc5, 0x57, 0x47, 0x78, 0xcc, 0x80, 0xd8, 0x0a, 0x0e, 0x45, 0xc5, 0x57, 0x1d, 0x4b,
	0x97, 0x0e, 0x60, 0x85, 0xf5, 0xf1, 0xd0, 0x37, 0x60, 0xc9, 0x25, 0x5f, 0x7c, 0xd8, 0x1a, 0x1f,
	0x96, 0xa1, 0x65, 0x86, 0x93, 0xfe, 0x4d, 0x80, 0xed, 0x50, 0x90, 0xa6, 0xe6, 0x1b, 0xd7, 0xf8,
	0x79, 0xb0, 0xcc, 0x25, 0x58, 0x34, 0x8d, 0x11, 0x5f, 0xe5, 0xe2, 0xc1, 0xd5, 0xe5, 0x41, 0xcf,
	0x18, 0x45, 0x4f, 0x32, 0x09, 0x12, 0xed, 0xc1, 0xf2, 0xab, 0x78, 0xb2, 0xb7, 0x76, 0x60, 0x58,
	0xfe, 0x88, 0x10, 0x3e, 0xef, 0x4f, 0x5d, 0xc7, 0xf6, 0xb0, 0xbc, 0xf4, 0x8a, 0x66, 0x79, 0x9b,
	0x44, 0x5c, 0x8b, 0xef, 0xb0, 0x35, 0x12, 0x20, 0x5e, 0x9d, 0x4d, 0x27, 0xe8, 0x7d, 0x28, 0xbd,
	0x52, 0xa8, 0x2c, 0x41, 0xa2, 0xb3, 0x9a, 0x10, 0xd4, 0x3b, 0x59, 0x90, 0x57, 0x5e, 0xf1, 0x29,
	0x3d, 0x04, 0x70, 0xec, 0x70, 0x09, 0xf0, 0xdb, 0x03, 0x02, 0xa1, 0x66, 0x23, 0x41, 0x84, 0xa4,
	0x2f, 0xb6, 0xcb, 0x19, 0x92, 0xac, 0x7d, 0xc6, 0xe4, 0xe6, 0x66, 0xed, 0x33, 0xfa, 0x44, 0x41,
	0xe5, 0x87, 0xd0, 0xc8, 0xd2, 0xf0, 0x95, 0xb4, 0x0b, 0x55, 0x95, 0x82, 0x14, 0x36, 0x5d, 0x81,
	0xee, 0x05, 0xc0, 0x60, 0xcf, 0xcf, 0xa6, 0x13, 0xe9, 0x0b, 0xb8, 0x3f, 0xab, 0x37, 0x11, 0xeb,
	0xe3, 0x8c, 0xc7, 0x3c, 0x9e, 0x29, 0x57, 0xc6, 0x67, 0xde, 0x83, 0xb5, 0xbe, 0xaa, 0x5d, 0x61,
	0xff, 0x68, 0x3a, 0x1a, 0x61, 0xb7, 0xaf, 0x4e, 0x3d, 0xba, 0x2f, 0x39, 0x6a, 0x70, 0xf7, 0x53,
	0x92, 0x59, 0x43, 0xfa, 0x3e, 0x88, 0x71, 0xd2, 0x81, 0xa3, 0x5a, 0x34, 0xbf, 0x73, 0x54, 0x4b,
	0xf1, 0x2f, 0x5d, 0xec, 0x5d, 0xda, 0x66, 0x70, 0xf3, 0x52, 0x23, 0xd0, 0x61, 0x00, 0x94, 0xec,
	0x74, 0x57, 0x5a, 0xeb, 0x8d, 0x0d, 0x12, 0x9d, 0xce, 0x32, 0xd2, 0xf0, 0xe1, 0xd1, 0xfb, 0x24,
	0x61, 0xe6, 0x2f, 0x41, 0xa3, 0x08, 0x99, 0x96, 0x48, 0xa6, 0x44, 0xd2, 0x11, 0xac, 0xc7, 0x31,
	0x81, 0x87, 0xbe, 0x9f, 0xb8, 0x4a, 0xce, 0xe7, 0x11, 0x9e, 0xf8, 0xcf, 0x60, 0x2b, 0x87, 0x07,
	0x3b, 0x5b, 0xa6, 0x1c, 0x61, 0x27, 0x87, 0x53, 0xc6, 0x09, 0x7e, 0x0e, 0x1b, 0x49, 0xfc, 0x1d,
	0xef, 0x2e, 0x32, 0x6c, 0xe7, 0xf1, 0x9f, 0x5f, 0xdf, 0xce, 0xeb, 0x11, 0x73, 0x8f, 0x8f, 0xa1,
	0xf2, 0x7c, 0x8a, 0xa7, 0xb8, 0xe5, 0x62, 0xdd, 0xf0, 0x89, 0x63, 0xd0, 0x26, 0xb7, 0x32, 0x6b,
	0x90, 0x4c, 0x80, 0xe1, 0x83, 0xe7, 0xfa, 0xac, 0x25, 0xfd, 0x0c, 0xea, 0x7d, 0xdb, 0xf5, 0xe3,
	0x0c, 0x10, 0x14, 0x09, 0x28, 0x88, 0x4b, 0xe4, 0x1b, 0x3d, 0x4d, 0x8c, 0xd1, 0x28, 0x50, 0xf9,
	0x82, 0xad, 0x3f, 0x86, 0x91, 0xe3, 0x64, 0xd2, 0x9f, 0x09, 0xb0, 0x1d, 0x6b, 0x7b, 0xf1, 0x54,
	0xae, 0x03, 0xe5, 0x50, 0x71, 0xbf, 0xb6, 0x42, 0x43, 0x0a, 0xf4, 0x93, 0x8c, 0xfc, 0x5c, 0xb8,
	0x20, 0x89, 0x48, 0x61, 0xe5, 0x34, 0xb9, 0x74, 0x08, 0xf5, 0x01, 0xf6, 0x3c, 0xc3, 0xb6, 0x5a,
	0xbe, 0x6b, 0x0e, 0x78, 0xe5, 0x65, 0xa2, 0xbe, 0x56, 0x3c, 0x06, 0xe6, 0x07, 0x63, 0x98, 0xa8,
	0xaf, 0x39, 0xa1, 0xd4, 0x82, 0xcd, 0x58, 0x9f, 0x44, 0xc5, 0x35, 0x70, 0xde, 0xc4, 0xad, 0x5c,
	0x92, 0x3f, 0xf7, 0xdd, 0x6f, 0xc0, 0xda, 0xb9, 0x31, 0xea, 0x19, 0x9e, 0x9f, 0x7b, 0x35, 0xba,
	0x42, 0xaf, 0x46, 0x3f, 0x81, 0x8d, 0x0c, 0xd1, 0xdc, 0x07, 0xa5, 0x19, 0xea, 0x44, 0x89, 0x17,
	0xc5, 0xd1, 0x77, 0x9c, 0x26, 0x7c, 0x0b, 0x4a, 0xb6, 0x31, 0x52, 0x4c, 0x23, 0x7c, 0x4b, 0x8d,
	0x0e, 0xa2, 0x5f, 0x99, 0xf0, 0x81, 0xe5, 0x15, 0x9b, 0x7d, 0x48, 0xbf, 0x0f, 0x9b, 0x59, 0x61,
	0xd8, 0xc5, 0xef, 0xd7, 0x90, 0x27, 0x3e, 0x70, 0xfc, 0x6d, 0x68, 0x21, 0xf1, 0x76, 0x24, 0x3b,
	0x40, 0x6c, 0xdd, 0x74, 0xa1, 0xd2, 0xb2, 0x27, 0x13, 0xd5, 0xd2, 0x5b, 0xfe, 0x6b, 0xfa, 0x7a,
	0xe9, 0x25, 0x76, 0x43, 0x83, 0x2f, 0xca, 0x41, 0x13, 0xed, 0xc2, 0x62, 0x6b, 0xa2, 0xf3, 0xcd,
	0x70, 0x35, 0xcc, 0x19, 0x68, 0x57, 0x99, 0xa0, 0xa4, 0x26, 0xd4, 0x83, 0x76, 0xa0, 0xd5, 0x83,
	0xaf, 0xe1, 0xdf, 0x31, 0x47, 0xde, 0x7f, 0x0e, 0x95, 0xd8, 0x25, 0x11, 0xda, 0x02, 0x34, 0x68,
	0x9d, 0x74, 0xda, 0x4a, 0xff, 0xbc, 0xd7, 0x6d, 0x7d, 0xae, 0x9c, 0x0f, 0x4f, 0x3a, 0xb2, 0xb8,
	0x80, 0x36, 0x61, 0x2d, 0x01, 0x3f, 0xee, 0x1e, 0x9f, 0x8b, 0x02, 0x5a, 0x87, 0x7a, 0x02, 0x2c,
	0xcb, 0x62, 0x61, 0xff, 0xe3, 0xe0, 0xde, 0x4b, 0xb6, 0x4d, 0x8c, 0xb6, 0x61, 0x7d, 0x78, 0x22,
	0x77, 0x9a, 0x6d, 0x45, 0x3e, 0xef, 0x75, 0x94, 0xd6, 0xf9, 0xd9, 0x50, 0x3e, 0xef, 0x89, 0x0b,
	0x68, 0x03, 0xc4, 0x38, 0xa2, 0xdd, 0x1c, 0x36, 0x45, 0x61, 0xff, 0x4f, 0x04, 0x80, 0xa8, 0x38,
	0x4f, 0x89, 0xe4, 0x66, 0xab, 0xa3, 0xf4, 0x3a, 0x2f, 0x3b, 0x3d, 0xe5, 0xec, 0xfc, 0xac, 0xc3,
	0xa4, 0x89, 0x43, 0x3b, 0xb2, 0x7c, 0x2e, 0x8b, 0x02, 0x1d, 0x2a, 0x06, 0xfe, 0x69, 0x53, 0x3e,
	0xeb, 0x9e, 0x3d, 0x13, 0x0b, 0x69, 0x2e, 0xdd, 0xb3, 0xe3, 0x73, 0x71, 0x31, 0xcd, 0xa5, 0xdd,
	0x39, 0x7a, 0xf1, 0x4c, 0x2c, 0xa6, 0xb9, 0xbc, 0xec, 0xc8, 0x47, 0xe7, 0x83, 0x8e, 0xb8, 0xb4,
	0xff, 0x0b, 0x01, 0x36, 0xf2, 0x6a, 0xcc, 0xe8, 0x3e, 0x6c, 0x9f, 0xf6, 0x5f, 0x28, 0xac, 0x57,
	0xbf, 0xdb, 0xef, 0xf4, 0xba, 0x67, 0x9d, 0x40, 0xd6, 0xb7, 0xe0, 0x61, 0x0e, 0xb2, 0xff, 0x54,
	0xe9, 0x9e, 0x3d, 0x93, 0x3b, 0x83, 0x81, 0x28, 0xa0, 0x5d, 0x78, 0x90, 0x4f, 0xd2, 0x61, 0x14,
	0x85, 0x99, 0x14, 0x7d, 0x45, 0xfe, 0xac, 0x7d, 0xda, 0x14, 0x17, 0xe7, 0x50, 0x0c, 0x29, 0x45,
	0x71, 0xff, 0x47, 0xbc, 0x98, 0xc5, 0x2b, 0x65, 0x5b, 0x80, 0x5a, 0xbd, 0xf3, 0xd6, 0xa7, 0x4a,
	0xbb, 0xd3, 0x1b, 0x36, 0x95, 0xf3, 0xbe, 0xd2, 0x6c, 0xb7, 0xc5, 0x85, 0x1c, 0x78, 0xbb, 0xd3,
	0x13, 0x85, 0xfd, 0xd7, 0x00, 0x51, 0x5d, 0x04, 0x21, 0x58, 0x6d, 0x35, 0xfb, 0x72, 0x57, 0x39,
	0xa2, 0xb4, 0xfd, 0x23, 0x66, 0x95, 0x38, 0x8c, 0x8d, 0x2b, 0xa4, 0xc1, 0x4c, 0xe0, 0x42, 0x9a,
	0xc3, 0xe9, 0x40, 0x5c, 0x24, 0x76, 0x4a, 0x70, 0x6d, 0x75, 0x3b, 0x62, 0x71, 0xff, 0x57, 0x05,
	0x7a, 0x20, 0x8f, 0x9d, 0x91, 0xd1, 0x0e, 0x6c, 0xf5, 0x7a, 0x2d, 0xa5, 0x75, 0xfe, 0xe2, 0x6c,
	0xd8, 0x91, 0x95, 0x56, 0xb3, 0x75, 0x12, 0x2a, 0x3c, 0x17, 0x47, 0xfc, 0x4c, 0x14, 0x88, 0xa5,
	0xb2, 0xb8, 0x9f, 0xca, 0xdd, 0x61, 0x47, 0x2c, 0x10, 0x4b, 0xc5, 0x91, 0x83, 0x96, 0xdc, 0x1c,
	0xb6, 0x4e, 0xfa, 0xcd, 0xb6, 0xd2, 0x6c, 0xb5, 0x88, 0x1d, 0x16, 0xd1, 0x3d, 0xd8, 0xcc, 0xf6,
	0x3f, 0xe9, 0x0e, 0xc5, 0x62, 0xfe, 0xb0, 0xa7, 0xdd, 0xc1, 0x40, 0x5c, 0x42, 0x0f, 0xe1, 0x5e,
	0x1c, 0xd7, 0x6f, 0xca, 0xc3, 0x6e, 0xb3, 0xc7, 0x07, 0x5e, 0x46, 0x8f, 0x60, 0x27, 0xa7, 0x6b,
	0xb3, 0x7b, 0x36, 0x54, 0xce, 0xfb, 0xe2, 0x0a, 0x6a, 0xc0, 0x46, 0x1c, 0xdf, 0x79, 0xd9, 0x6d,
	0x0d, 0xbb, 0xe7, 0x67, 0x62, 0x09, 0x3d, 0x80, 0x46, 0x1c, 0x23, 0x77, 0x86, 0xf2, 0xe7, 0xca,
	0x59, 0xa7, 0xd3, 0xee, 0xb4, 0xc5, 0x72, 0x3e, 0x96, 0xcf, 0x05, 0xc8, 0x4a, 0xab, 0xc4, 0x4e,
	0xf8, 0x74, 0x2d, 0xcb, 0xcd, 0xd3, 0xb8, 0x6b, 0x2e, 0x10, 0x2b, 0x05, 0xc0, 0x4e, 0xe0, 0xae,
	0x75, 0xa8, 0x04, 0xb0, 0x66, 0xaf, 0x27, 0x16, 0x68, 0x70, 0x60, 0x80, 0x7e, 0xef, 0xc5, 0x20,
	0x74, 0xc9, 0x14, 0x98, 0xfb, 0x61, 0x6c, 0x1c, 0x0a, 0x26, 0x2c, 0x96, 0x50, 0x15, 0x4a, 0x14,
	0x48, 0x5a, 0xcb, 0xfb, 0x3f, 0x86, 0x15, 0x1e, 0xd7, 0x08, 0xa2, 0x75, 0xda, 0x0e, 0x6c, 0xbb,
	0x06, 0x35, 0xd2, 0x6a, 0xbf, 0x38, 0xed, 0x2b, 0xdd, 0xb3, 0x21, 0x59, 0xf4, 0xc4, 0x8f, 0x4e,
	0xdb, 0x4a, 0xab, 0xd7, 0x69, 0xca, 0x0c, 0x56, 0x38, 0xfc, 0xe5, 0x3a, 0x2c, 0xb1, 0x1b, 0xb2,
	0x63, 0xa8, 0x04, 0x8f, 0x17, 0x9f, 0x61, 0x1f, 0xdd, 0xcb, 0x7f, 0xa7, 0x7e, 0xea, 0x8d, 0x77,
	0x76, 0x66, 0x3c, 0xf9, 0x3e, 0xf5, 0xc6, 0xd2, 0x02, 0xea, 0xc2, 0x6a, 0x80, 0x60, 0x65, 0xee,
	0xdf, 0x9c, 0xd5, 0x4f, 0xa0, 0xcc, 0x1e, 0x5d, 0x12, 0x81, 0xb6, 0xf3, 0xde, 0x55, 0x13, 0x1e,
	0x8d, 0xdc, 0x47, 0xc6, 0x8c, 0x43, 0x8b, 0x3e, 0x9b, 0xb4, 0xdd, 0x5b, 0x2e, 0xca, 0x6f, 0xc4,
	0xa4, 0x1b, 0x30, 0x91, 0xd5, 0x1b, 0x22, 0xc9, 0xce, 0x8c, 0xc7, 0xc4, 0x84, 0xcf, 0xfd, 0x59,
	0xef, 0x73, 0x19, 0xab, 0xcf, 0xa0, 0x9e, 0x7a, 0x46, 0x8a, 0x76, 0xe7, 0xbe, 0x8c, 0x25, 0x3c,
	0xdf, 0x9a, 0xff, 0x00, 0x35, 0x54, 0x7b, 0x10, 0x71, 0x53, 0x6a, 0xcf, 0x5e, 0xb8, 0x85, 0x6a,
	0xcf, 0xb9, 0x9c, 0x92, 0x16, 0x50, 0x0f, 0x2a, 0xb1, 0xf7, 0x83, 0xe8, 0xc1, 0xcc, 0x67, 0x9e,
	0x84, 0xd5, 0xc3, 0xd9, 0x2f, 0x0e, 0x03, 0x23, 0xae, 0xf0, 0x37, 0x4f, 0xa8, 0x91, 0xfb, 0x3e,
	0x8c, 0x70, 0xb9, 0x97, 0xff, 0x3a, 0x8a, 0x71, 0xf8, 0x31, 0x54, 0xe3, 0x0f, 0x48, 0x50, 0x95,
	0xef, 0xd2, 0x9d, 0x89, 0xe3, 0xdf, 0xee, 0x3c, 0x9a, 0xf3, 0xc6, 0x24, 0x90, 0xa0, 0x12, 0xd7,
	0xcb, 0x56, 0xf2, 0x4e, 0x3a, 0x94, 0x61, 0x3b, 0xef, 0xae, 0x9a, 0x71, 0x78, 0x02, 0x25, 0x0a,
	0xcd, 0x8e, 0x3e, 0xa7, 0xd3, 0x47, 0x50, 0x66, 0x9b, 0x7b, 0xb6, 0x57, 0x23, 0xf7, 0xad, 0x01,
	0xeb, 0xf6, 0x21, 0x94, 0xe8, 0xe6, 0x93, 0xed, 0xb5, 0x11, 0xbf, 0x8b, 0x08, 0x3a, 0x49, 0x0b,
	0xe8, 0x7b, 0x50, 0x0e, 0x6f, 0xe3, 0x52, 0x5d, 0xee, 0xcf, 0xba, 0xad, 0x0b, 0x9c, 0x06, 0xa2,
	0x1f, 0xe7, 0xa0, 0xfb, 0xb3, 0x7e, 0xf1, 0x44, 0xb4, 0xf3, 0x60, 0xe6, 0x8f, 0x79, 0x18, 0xab,
	0xef, 0x02, 0xf0, 0x5f, 0x2f, 0x66, 0x05, 0xbf, 0x97, 0xff, 0xf3, 0x46, 0xd6, 0xf1, 0x18, 0x6a,
	0x1c, 0xce, 0xed, 0xd3, 0xc8, 0xfd, 0xd5, 0x65, 0xdc, 0x4b, 0x72, 0xf9, 0xf4, 0xa0, 0x1e, 0xfe,
	0xe8, 0xac, 0xe5, 0x62, 0xc2, 0x69, 0x67, 0xc6, 0x2f, 0x05, 0xe3, 0x0b, 0x35, 0xef, 0x87, 0x82,
	0x6c, 0xa1, 0xa6, 0x7e, 0xc2, 0x16, 0x2e, 0xd4, 0x99, 0x3f, 0xe4, 0x0b, 0x17, 0xea, 0xec, 0x5f,
	0xcc, 0x49, 0x0b, 0xe8, 0x63, 0xa8, 0x86, 0xf8, 0xac, 0xaa, 0xde, 0x20, 0x56, 0x0b, 0x4a, 0xc1,
	0xed, 0x45, 0xb8, 0xbe, 0xb3, 0x77, 0x3e, 0xe1, 0xfa, 0xce, 0xb9, 0x17, 0x91, 0x16, 0xd0, 0x1e,
	0x94, 0x48, 0x92, 0x60, 0x62, 0xd5, 0x4d, 0x8d, 0x9e, 0x68, 0xb1, 0xe1, 0x82, 0xf2, 0x7f, 0x38,
	0x5c, 0xf6, 0x86, 0x23, 0x1c, 0x2e, 0xe7, 0x62, 0x41, 0x5a, 0x40, 0x87, 0xb0, 0xcc, 0xaa, 0xeb,
	0x33, 0x16, 0x41, 0xa6, 0x4c, 0x2f, 0x2d, 0xa0, 0x13, 0xa8, 0x85, 0x85, 0xed, 0xc4, 0xe8, 0xd9,
	0xea, 0x74, 0x7c, 0xb2, 0xe9, 0xa2, 0xb0, 0xb4, 0x80, 0x3a, 0xb0, 0x96, 0x2c, 0xf9, 0x65, 0x05,
	0xd9, 0x9d, 0x5b, 0x1a, 0x64, 0x6c, 0x7e, 0x0e, 0xeb, 0xe9, 0x3a, 0x10, 0x61, 0xf4, 0xd6, 0xfc,
	0xda, 0x15, 0x11, 0x4f, 0x7a, 0x43, 0x19, 0x89, 0xf1, 0x7f, 0x01, 0x28, 0x5e, 0x44, 0xe0, 0x4b,
	0xe1, 0xe1, 0xec, 0x8a, 0x08, 0x61, 0xfd, 0x68, 0x4e, 0xf9, 0x81, 0xb1, 0x7d, 0x0a, 0x1b, 0x9f,
	0x69, 0xd7, 0xee, 0x4b, 0xd5, 0x34, 0xf4, 0xd6, 0x25, 0xd6, 0xae, 0xf8, 0x5b, 0x99, 0xf9, 0x66,
	0xff, 0x08, 0x36, 0x93, 0xbd, 0xda, 0x86, 0xf7, 0x35, 0xba, 0xed, 0x03, 0xb0, 0x2d, 0x6a, 0xe8,
	0x1a, 0x93, 0x37, 0xd0, 0x36, 0xa1, 0x9e, 0xaa, 0x3b, 0xcc, 0x08, 0xeb, 0x33, 0xaa, 0x13, 0x94,
	0xc5, 0x5a, 0xec, 0xd8, 0xce, 0x35, 0xf6, 0x20, 0x7b, 0xa0, 0x8f, 0x29, 0x2c, 0x2d, 0xc5, 0xa7,
	0x00, 0xd1, 0x01, 0x34, 0x8c, 0x7f, 0x79, 0xc7, 0xf9, 0x30, 0xfe, 0xe5, 0x9e, 0x88, 0xa5, 0x85,
	0x0f, 0x05, 0xd4, 0x01, 0x31, 0xfd, 0xf0, 0x20, 0xf4, 0x8f, 0xd9, 0xaf, 0x18, 0x72, 0x34, 0xb3,
	0x9a, 0x7c, 0x26, 0x80, 0x1e, 0xcf, 0x7b, 0x3d, 0x90, 0xc3, 0xe2, 0x68, 0xeb, 0x9f, 0xbf, 0x7a,
	0x24, 0xfc, 0xcb, 0x57, 0x8f, 0x84, 0xff, 0xf8, 0xea, 0x91, 0xf0, 0x45, 0xe9, 0x52, 0x35, 0xe9,
	0x7f, 0x2c, 0xb8, 0x58, 0xa6, 0x7f, 0x9e, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0x80,
	0xff, 0x88, 0x97, 0x42, 0x00, 0x00,
}
