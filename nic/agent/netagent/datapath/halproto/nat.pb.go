// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nat.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// types of NAT actions supported
type NatAction int32

const (
	NatAction_NAT_TYPE_NONE                 NatAction = 0
	NatAction_NAT_TYPE_STATIC_ADDRESS       NatAction = 1
	NatAction_NAT_TYPE_DYNAMIC_ADDRESS      NatAction = 2
	NatAction_NAT_TYPE_DYNAMIC_ADDRESS_PORT NatAction = 3
)

var NatAction_name = map[int32]string{
	0: "NAT_TYPE_NONE",
	1: "NAT_TYPE_STATIC_ADDRESS",
	2: "NAT_TYPE_DYNAMIC_ADDRESS",
	3: "NAT_TYPE_DYNAMIC_ADDRESS_PORT",
}
var NatAction_value = map[string]int32{
	"NAT_TYPE_NONE":                 0,
	"NAT_TYPE_STATIC_ADDRESS":       1,
	"NAT_TYPE_DYNAMIC_ADDRESS":      2,
	"NAT_TYPE_DYNAMIC_ADDRESS_PORT": 3,
}

func (x NatAction) String() string {
	return proto.EnumName(NatAction_name, int32(x))
}
func (NatAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorNat, []int{0} }

// NAT pool configuration
// NOTE: addresses inside the NAT pool are "owned" by the device, so device is
// expected to advertise the routes for the same and respond to ARP requests
type NatPoolSpec struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NatPoolKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
	Address     []*Address        `protobuf:"bytes,3,rep,name=address" json:"address,omitempty" venice:mandatory`
	PortRange   *L4PortRange      `protobuf:"bytes,4,opt,name=port_range,json=portRange" json:"port_range,omitempty"`
}

func (m *NatPoolSpec) Reset()                    { *m = NatPoolSpec{} }
func (m *NatPoolSpec) String() string            { return proto.CompactTextString(m) }
func (*NatPoolSpec) ProtoMessage()               {}
func (*NatPoolSpec) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{0} }

func (m *NatPoolSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NatPoolSpec) GetKeyOrHandle() *NatPoolKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NatPoolSpec) GetAddress() []*Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *NatPoolSpec) GetPortRange() *L4PortRange {
	if m != nil {
		return m.PortRange
	}
	return nil
}

type NatPoolRequestMsg struct {
	Request []*NatPoolSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPoolRequestMsg) Reset()                    { *m = NatPoolRequestMsg{} }
func (m *NatPoolRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolRequestMsg) ProtoMessage()               {}
func (*NatPoolRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{1} }

func (m *NatPoolRequestMsg) GetRequest() []*NatPoolSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPoolStatus is the operational status of a given NAT pool
// TODO: Add NAT mappings here
type NatPoolStatus struct {
	PoolHandle uint64 `protobuf:"fixed64,1,opt,name=pool_handle,json=poolHandle,proto3" json:"pool_handle,omitempty"`
}

func (m *NatPoolStatus) Reset()                    { *m = NatPoolStatus{} }
func (m *NatPoolStatus) String() string            { return proto.CompactTextString(m) }
func (*NatPoolStatus) ProtoMessage()               {}
func (*NatPoolStatus) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{2} }

func (m *NatPoolStatus) GetPoolHandle() uint64 {
	if m != nil {
		return m.PoolHandle
	}
	return 0
}

// NatPoolResponse is response to NatPoolSpec
type NatPoolResponse struct {
	ApiStatus  ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	PoolStatus *NatPoolStatus `protobuf:"bytes,2,opt,name=pool_status,json=poolStatus" json:"pool_status,omitempty"`
}

func (m *NatPoolResponse) Reset()                    { *m = NatPoolResponse{} }
func (m *NatPoolResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPoolResponse) ProtoMessage()               {}
func (*NatPoolResponse) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{3} }

func (m *NatPoolResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatPoolResponse) GetPoolStatus() *NatPoolStatus {
	if m != nil {
		return m.PoolStatus
	}
	return nil
}

// NatPoolResponseMsg is batched response to NatPoolRequestMsg
type NatPoolResponseMsg struct {
	Response []*NatPoolResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPoolResponseMsg) Reset()                    { *m = NatPoolResponseMsg{} }
func (m *NatPoolResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolResponseMsg) ProtoMessage()               {}
func (*NatPoolResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{4} }

func (m *NatPoolResponseMsg) GetResponse() []*NatPoolResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatPoolDeleteRequest is used to delete a NAT pool
type NatPoolDeleteRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NatPoolKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NatPoolDeleteRequest) Reset()                    { *m = NatPoolDeleteRequest{} }
func (m *NatPoolDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NatPoolDeleteRequest) ProtoMessage()               {}
func (*NatPoolDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{5} }

func (m *NatPoolDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NatPoolDeleteRequest) GetKeyOrHandle() *NatPoolKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatPoolDeleteRequestMsg is used to delete batch of NAT pools
type NatPoolDeleteRequestMsg struct {
	Request []*NatPoolDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPoolDeleteRequestMsg) Reset()                    { *m = NatPoolDeleteRequestMsg{} }
func (m *NatPoolDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolDeleteRequestMsg) ProtoMessage()               {}
func (*NatPoolDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{6} }

func (m *NatPoolDeleteRequestMsg) GetRequest() []*NatPoolDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPoolDeleteResponse is response to NatPoolDeleteRequest
type NatPoolDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *NatPoolDeleteResponse) Reset()                    { *m = NatPoolDeleteResponse{} }
func (m *NatPoolDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPoolDeleteResponse) ProtoMessage()               {}
func (*NatPoolDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{7} }

func (m *NatPoolDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// NatPoolDeleteResponseMsg is batched response to NatPoolDeleteRequestMsg
type NatPoolDeleteResponseMsg struct {
	Response []*NatPoolDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPoolDeleteResponseMsg) Reset()                    { *m = NatPoolDeleteResponseMsg{} }
func (m *NatPoolDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolDeleteResponseMsg) ProtoMessage()               {}
func (*NatPoolDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{8} }

func (m *NatPoolDeleteResponseMsg) GetResponse() []*NatPoolDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatPoolGetRequest is used to get all the information about a pool
type NatPoolGetRequest struct {
	Meta        *ObjectMeta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NatPoolKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *NatPoolGetRequest) Reset()                    { *m = NatPoolGetRequest{} }
func (m *NatPoolGetRequest) String() string            { return proto.CompactTextString(m) }
func (*NatPoolGetRequest) ProtoMessage()               {}
func (*NatPoolGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{9} }

func (m *NatPoolGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NatPoolGetRequest) GetKeyOrHandle() *NatPoolKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatPoolGetRequestMsg is batched GET requests for NAT pools
type NatPoolGetRequestMsg struct {
	Request []*NatPoolGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPoolGetRequestMsg) Reset()                    { *m = NatPoolGetRequestMsg{} }
func (m *NatPoolGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolGetRequestMsg) ProtoMessage()               {}
func (*NatPoolGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{10} }

func (m *NatPoolGetRequestMsg) GetRequest() []*NatPoolGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPoolStats is the statistics object for NAT pool
type NatPoolStats struct {
}

func (m *NatPoolStats) Reset()                    { *m = NatPoolStats{} }
func (m *NatPoolStats) String() string            { return proto.CompactTextString(m) }
func (*NatPoolStats) ProtoMessage()               {}
func (*NatPoolStats) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{11} }

// NatPoolGetResponse captures all the information for a given NAT pool
type NatPoolGetResponse struct {
	ApiStatus ApiStatus      `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *NatPoolSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *NatPoolStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *NatPoolStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *NatPoolGetResponse) Reset()                    { *m = NatPoolGetResponse{} }
func (m *NatPoolGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPoolGetResponse) ProtoMessage()               {}
func (*NatPoolGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{12} }

func (m *NatPoolGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatPoolGetResponse) GetSpec() *NatPoolSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NatPoolGetResponse) GetStatus() *NatPoolStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NatPoolGetResponse) GetStats() *NatPoolStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NatPoolGetResponseMsg is the batched response to NatPoolGetRequestMsg
type NatPoolGetResponseMsg struct {
	Response []*NatPoolGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPoolGetResponseMsg) Reset()                    { *m = NatPoolGetResponseMsg{} }
func (m *NatPoolGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPoolGetResponseMsg) ProtoMessage()               {}
func (*NatPoolGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{13} }

func (m *NatPoolGetResponseMsg) GetResponse() []*NatPoolGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatRuleSpec is the user intent for the NAT rule
type NatRuleSpec struct {
	RuleId uint64 `protobuf:"varint,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// NAT rule match conditions
	SrcAddress   []*IPAddressObj `protobuf:"bytes,2,rep,name=src_address,json=srcAddress" json:"src_address,omitempty"`
	SrcSg        []uint32        `protobuf:"varint,3,rep,packed,name=src_sg,json=srcSg" json:"src_sg,omitempty"`
	DstAddress   []*IPAddressObj `protobuf:"bytes,4,rep,name=dst_address,json=dstAddress" json:"dst_address,omitempty"`
	DstSg        []uint32        `protobuf:"varint,5,rep,packed,name=dst_sg,json=dstSg" json:"dst_sg,omitempty"`
	DstPortRange []*L4PortRange  `protobuf:"bytes,6,rep,name=dst_port_range,json=dstPortRange" json:"dst_port_range,omitempty"`
	SrcPortRange []*L4PortRange  `protobuf:"bytes,7,rep,name=src_port_range,json=srcPortRange" json:"src_port_range,omitempty"`
	// NAT rule action related attributes
	SrcNatAction NatAction         `protobuf:"varint,8,opt,name=src_nat_action,json=srcNatAction,proto3,enum=nat.NatAction" json:"src_nat_action,omitempty"`
	DstNatAction NatAction         `protobuf:"varint,9,opt,name=dst_nat_action,json=dstNatAction,proto3,enum=nat.NatAction" json:"dst_nat_action,omitempty"`
	SrcNatPool   *NatPoolKeyHandle `protobuf:"bytes,10,opt,name=src_nat_pool,json=srcNatPool" json:"src_nat_pool,omitempty"`
	DstNatPool   *NatPoolKeyHandle `protobuf:"bytes,11,opt,name=dst_nat_pool,json=dstNatPool" json:"dst_nat_pool,omitempty"`
}

func (m *NatRuleSpec) Reset()                    { *m = NatRuleSpec{} }
func (m *NatRuleSpec) String() string            { return proto.CompactTextString(m) }
func (*NatRuleSpec) ProtoMessage()               {}
func (*NatRuleSpec) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{14} }

func (m *NatRuleSpec) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *NatRuleSpec) GetSrcAddress() []*IPAddressObj {
	if m != nil {
		return m.SrcAddress
	}
	return nil
}

func (m *NatRuleSpec) GetSrcSg() []uint32 {
	if m != nil {
		return m.SrcSg
	}
	return nil
}

func (m *NatRuleSpec) GetDstAddress() []*IPAddressObj {
	if m != nil {
		return m.DstAddress
	}
	return nil
}

func (m *NatRuleSpec) GetDstSg() []uint32 {
	if m != nil {
		return m.DstSg
	}
	return nil
}

func (m *NatRuleSpec) GetDstPortRange() []*L4PortRange {
	if m != nil {
		return m.DstPortRange
	}
	return nil
}

func (m *NatRuleSpec) GetSrcPortRange() []*L4PortRange {
	if m != nil {
		return m.SrcPortRange
	}
	return nil
}

func (m *NatRuleSpec) GetSrcNatAction() NatAction {
	if m != nil {
		return m.SrcNatAction
	}
	return NatAction_NAT_TYPE_NONE
}

func (m *NatRuleSpec) GetDstNatAction() NatAction {
	if m != nil {
		return m.DstNatAction
	}
	return NatAction_NAT_TYPE_NONE
}

func (m *NatRuleSpec) GetSrcNatPool() *NatPoolKeyHandle {
	if m != nil {
		return m.SrcNatPool
	}
	return nil
}

func (m *NatRuleSpec) GetDstNatPool() *NatPoolKeyHandle {
	if m != nil {
		return m.DstNatPool
	}
	return nil
}

// NatPolicySpec captures the NAT policy which is a group of NAT rules
type NatPolicySpec struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NatPolicyKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
	Rules       []*NatRuleSpec      `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (m *NatPolicySpec) Reset()                    { *m = NatPolicySpec{} }
func (m *NatPolicySpec) String() string            { return proto.CompactTextString(m) }
func (*NatPolicySpec) ProtoMessage()               {}
func (*NatPolicySpec) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{15} }

func (m *NatPolicySpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NatPolicySpec) GetKeyOrHandle() *NatPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *NatPolicySpec) GetRules() []*NatRuleSpec {
	if m != nil {
		return m.Rules
	}
	return nil
}

// NatPolicyRequestMsg is the batched NAT policy
type NatPolicyRequestMsg struct {
	Request []*NatPolicySpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPolicyRequestMsg) Reset()                    { *m = NatPolicyRequestMsg{} }
func (m *NatPolicyRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyRequestMsg) ProtoMessage()               {}
func (*NatPolicyRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{16} }

func (m *NatPolicyRequestMsg) GetRequest() []*NatPolicySpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPolicyStatus is the operational status of NatPolicySpec
type NatPolicyStatus struct {
	NatPolicyHandle uint64 `protobuf:"fixed64,1,opt,name=nat_policy_handle,json=natPolicyHandle,proto3" json:"nat_policy_handle,omitempty"`
}

func (m *NatPolicyStatus) Reset()                    { *m = NatPolicyStatus{} }
func (m *NatPolicyStatus) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyStatus) ProtoMessage()               {}
func (*NatPolicyStatus) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{17} }

func (m *NatPolicyStatus) GetNatPolicyHandle() uint64 {
	if m != nil {
		return m.NatPolicyHandle
	}
	return 0
}

// NatPolicyResponse is response to NatPolicySpec
type NatPolicyResponse struct {
	ApiStatus    ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	PolicyStatus *NatPolicyStatus `protobuf:"bytes,2,opt,name=policy_status,json=policyStatus" json:"policy_status,omitempty"`
}

func (m *NatPolicyResponse) Reset()                    { *m = NatPolicyResponse{} }
func (m *NatPolicyResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyResponse) ProtoMessage()               {}
func (*NatPolicyResponse) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{18} }

func (m *NatPolicyResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatPolicyResponse) GetPolicyStatus() *NatPolicyStatus {
	if m != nil {
		return m.PolicyStatus
	}
	return nil
}

// NatPolicyResponseMsg is the batched NatPolicyResponse
type NatPolicyResponseMsg struct {
	Response []*NatPolicyResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPolicyResponseMsg) Reset()                    { *m = NatPolicyResponseMsg{} }
func (m *NatPolicyResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyResponseMsg) ProtoMessage()               {}
func (*NatPolicyResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{19} }

func (m *NatPolicyResponseMsg) GetResponse() []*NatPolicyResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatPolicyDeleteRequest is used to delete a NAT policy
type NatPolicyDeleteRequest struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NatPolicyKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *NatPolicyDeleteRequest) Reset()                    { *m = NatPolicyDeleteRequest{} }
func (m *NatPolicyDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyDeleteRequest) ProtoMessage()               {}
func (*NatPolicyDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{20} }

func (m *NatPolicyDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NatPolicyDeleteRequest) GetKeyOrHandle() *NatPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatPolicyDeleteRequestMsg is batched NatPolicyDeleteRequest
type NatPolicyDeleteRequestMsg struct {
	Request []*NatPolicyDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPolicyDeleteRequestMsg) Reset()                    { *m = NatPolicyDeleteRequestMsg{} }
func (m *NatPolicyDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyDeleteRequestMsg) ProtoMessage()               {}
func (*NatPolicyDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{21} }

func (m *NatPolicyDeleteRequestMsg) GetRequest() []*NatPolicyDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatPolicyDeleteResponse is response to NatPolicyDeleteRequest
type NatPolicyDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *NatPolicyDeleteResponse) Reset()                    { *m = NatPolicyDeleteResponse{} }
func (m *NatPolicyDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyDeleteResponse) ProtoMessage()               {}
func (*NatPolicyDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{22} }

func (m *NatPolicyDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// NatPolicyDeleteResponseMsg is batched response to NatPolicyDeleteRequestMsg
type NatPolicyDeleteResponseMsg struct {
	Response []*NatPolicyDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPolicyDeleteResponseMsg) Reset()                    { *m = NatPolicyDeleteResponseMsg{} }
func (m *NatPolicyDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyDeleteResponseMsg) ProtoMessage()               {}
func (*NatPolicyDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{23} }

func (m *NatPolicyDeleteResponseMsg) GetResponse() []*NatPolicyDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatPolicyGetRequest is used to get information about a NAT policy
type NatPolicyGetRequest struct {
	Meta        *ObjectMeta         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NatPolicyKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *NatPolicyGetRequest) Reset()                    { *m = NatPolicyGetRequest{} }
func (m *NatPolicyGetRequest) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyGetRequest) ProtoMessage()               {}
func (*NatPolicyGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{24} }

func (m *NatPolicyGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NatPolicyGetRequest) GetKeyOrHandle() *NatPolicyKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatPolicyGetRequestMsg is batched GET request
type NatPolicyGetRequestMsg struct {
	Request []*NatPolicyGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatPolicyGetRequestMsg) Reset()                    { *m = NatPolicyGetRequestMsg{} }
func (m *NatPolicyGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyGetRequestMsg) ProtoMessage()               {}
func (*NatPolicyGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{25} }

func (m *NatPolicyGetRequestMsg) GetRequest() []*NatPolicyGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// per rule stats
type NatRuleStats struct {
	NumTcpSessions   uint32 `protobuf:"varint,1,opt,name=num_tcp_sessions,json=numTcpSessions,proto3" json:"num_tcp_sessions,omitempty"`
	NumUdpSessions   uint32 `protobuf:"varint,2,opt,name=num_udp_sessions,json=numUdpSessions,proto3" json:"num_udp_sessions,omitempty"`
	NumOtherSessions uint32 `protobuf:"varint,3,opt,name=num_other_sessions,json=numOtherSessions,proto3" json:"num_other_sessions,omitempty"`
}

func (m *NatRuleStats) Reset()                    { *m = NatRuleStats{} }
func (m *NatRuleStats) String() string            { return proto.CompactTextString(m) }
func (*NatRuleStats) ProtoMessage()               {}
func (*NatRuleStats) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{26} }

func (m *NatRuleStats) GetNumTcpSessions() uint32 {
	if m != nil {
		return m.NumTcpSessions
	}
	return 0
}

func (m *NatRuleStats) GetNumUdpSessions() uint32 {
	if m != nil {
		return m.NumUdpSessions
	}
	return 0
}

func (m *NatRuleStats) GetNumOtherSessions() uint32 {
	if m != nil {
		return m.NumOtherSessions
	}
	return 0
}

// per policy stats
type NatPolicyStats struct {
	Stats []*NatRuleStats `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (m *NatPolicyStats) Reset()                    { *m = NatPolicyStats{} }
func (m *NatPolicyStats) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyStats) ProtoMessage()               {}
func (*NatPolicyStats) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{27} }

func (m *NatPolicyStats) GetStats() []*NatRuleStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NatPolicyGetResponse catpures all information about NAT policy
type NatPolicyGetResponse struct {
	ApiStatus ApiStatus        `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *NatPolicySpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *NatPolicyStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *NatPolicyStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *NatPolicyGetResponse) Reset()                    { *m = NatPolicyGetResponse{} }
func (m *NatPolicyGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyGetResponse) ProtoMessage()               {}
func (*NatPolicyGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{28} }

func (m *NatPolicyGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatPolicyGetResponse) GetSpec() *NatPolicySpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NatPolicyGetResponse) GetStatus() *NatPolicyStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NatPolicyGetResponse) GetStats() *NatPolicyStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NatPolicyGetResponseMsg is batched response to NatPolicyGetRequestMsg
type NatPolicyGetResponseMsg struct {
	Response []*NatPolicyGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatPolicyGetResponseMsg) Reset()                    { *m = NatPolicyGetResponseMsg{} }
func (m *NatPolicyGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatPolicyGetResponseMsg) ProtoMessage()               {}
func (*NatPolicyGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{29} }

func (m *NatPolicyGetResponseMsg) GetResponse() []*NatPolicyGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatVpnMappingSpec is the user intent for the NAT-VPN mapping
type NatVpnMappingSpec struct {
	Meta        *ObjectMeta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NatVpnMappingKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *NatVpnMappingSpec) Reset()                    { *m = NatVpnMappingSpec{} }
func (m *NatVpnMappingSpec) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingSpec) ProtoMessage()               {}
func (*NatVpnMappingSpec) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{30} }

func (m *NatVpnMappingSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NatVpnMappingSpec) GetKeyOrHandle() *NatVpnMappingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatVpnMappingRequestMsg is the batched add or modify of NAT VPN mapping request
type NatVpnMappingRequestMsg struct {
	Request []*NatVpnMappingSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatVpnMappingRequestMsg) Reset()                    { *m = NatVpnMappingRequestMsg{} }
func (m *NatVpnMappingRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingRequestMsg) ProtoMessage()               {}
func (*NatVpnMappingRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{31} }

func (m *NatVpnMappingRequestMsg) GetRequest() []*NatVpnMappingSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatVpnMappingStatus reflects the current operational status of a NAT VPN mapping
type NatVpnMappingStatus struct {
	Handle     uint64 `protobuf:"fixed64,1,opt,name=handle,proto3" json:"handle,omitempty"`
	SvcMapping *Svc   `protobuf:"bytes,2,opt,name=svc_mapping,json=svcMapping" json:"svc_mapping,omitempty"`
}

func (m *NatVpnMappingStatus) Reset()                    { *m = NatVpnMappingStatus{} }
func (m *NatVpnMappingStatus) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingStatus) ProtoMessage()               {}
func (*NatVpnMappingStatus) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{32} }

func (m *NatVpnMappingStatus) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *NatVpnMappingStatus) GetSvcMapping() *Svc {
	if m != nil {
		return m.SvcMapping
	}
	return nil
}

// NatVpnMappingResponse is the response to NatVpnMappingSpec
type NatVpnMappingResponse struct {
	ApiStatus ApiStatus            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status"`
	Status    *NatVpnMappingStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *NatVpnMappingResponse) Reset()                    { *m = NatVpnMappingResponse{} }
func (m *NatVpnMappingResponse) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingResponse) ProtoMessage()               {}
func (*NatVpnMappingResponse) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{33} }

func (m *NatVpnMappingResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatVpnMappingResponse) GetStatus() *NatVpnMappingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// NatVpnMappingResponseMsg is batched response to NatVpnMappingRequestMsg
type NatVpnMappingResponseMsg struct {
	Response []*NatVpnMappingResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatVpnMappingResponseMsg) Reset()                    { *m = NatVpnMappingResponseMsg{} }
func (m *NatVpnMappingResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingResponseMsg) ProtoMessage()               {}
func (*NatVpnMappingResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{34} }

func (m *NatVpnMappingResponseMsg) GetResponse() []*NatVpnMappingResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// NatVpnMappingGetRequest is used to get information about a NAT VPN mapping
type NatVpnMappingGetRequest struct {
	Meta        *ObjectMeta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	KeyOrHandle *NatVpnMappingKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:"key"`
}

func (m *NatVpnMappingGetRequest) Reset()                    { *m = NatVpnMappingGetRequest{} }
func (m *NatVpnMappingGetRequest) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingGetRequest) ProtoMessage()               {}
func (*NatVpnMappingGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{35} }

func (m *NatVpnMappingGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *NatVpnMappingGetRequest) GetKeyOrHandle() *NatVpnMappingKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// NatVpnMappingGetRequestMsg is batched GET request for NAT VPN mappings
type NatVpnMappingGetRequestMsg struct {
	Request []*NatVpnMappingGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *NatVpnMappingGetRequestMsg) Reset()                    { *m = NatVpnMappingGetRequestMsg{} }
func (m *NatVpnMappingGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingGetRequestMsg) ProtoMessage()               {}
func (*NatVpnMappingGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{36} }

func (m *NatVpnMappingGetRequestMsg) GetRequest() []*NatVpnMappingGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// NatVpnMappingStats is the statistics object for each NAT VPN mapping
type NatVpnMappingStats struct {
	RxBytes              uint64 `protobuf:"varint,1,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	RxPackets            uint64 `protobuf:"varint,2,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"`
	TxBytes              uint64 `protobuf:"varint,3,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	TxPackets            uint64 `protobuf:"varint,4,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
	RxBytesDropped       uint64 `protobuf:"varint,5,opt,name=rx_bytes_dropped,json=rxBytesDropped,proto3" json:"rx_bytes_dropped,omitempty"`
	RxPacketsDropped     uint64 `protobuf:"varint,6,opt,name=rx_packets_dropped,json=rxPacketsDropped,proto3" json:"rx_packets_dropped,omitempty"`
	TxBytesDropped       uint64 `protobuf:"varint,7,opt,name=tx_bytes_dropped,json=txBytesDropped,proto3" json:"tx_bytes_dropped,omitempty"`
	TxPacketsDropped     uint64 `protobuf:"varint,8,opt,name=tx_packets_dropped,json=txPacketsDropped,proto3" json:"tx_packets_dropped,omitempty"`
	NumTcpSessions       uint32 `protobuf:"varint,9,opt,name=num_tcp_sessions,json=numTcpSessions,proto3" json:"num_tcp_sessions,omitempty"`
	NumUdpSessions       uint32 `protobuf:"varint,10,opt,name=num_udp_sessions,json=numUdpSessions,proto3" json:"num_udp_sessions,omitempty"`
	NumOtherSessions     uint32 `protobuf:"varint,11,opt,name=num_other_sessions,json=numOtherSessions,proto3" json:"num_other_sessions,omitempty"`
	NumActiveConnections uint32 `protobuf:"varint,12,opt,name=num_active_connections,json=numActiveConnections,proto3" json:"num_active_connections,omitempty"`
}

func (m *NatVpnMappingStats) Reset()                    { *m = NatVpnMappingStats{} }
func (m *NatVpnMappingStats) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingStats) ProtoMessage()               {}
func (*NatVpnMappingStats) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{37} }

func (m *NatVpnMappingStats) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *NatVpnMappingStats) GetRxPackets() uint64 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *NatVpnMappingStats) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *NatVpnMappingStats) GetTxPackets() uint64 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *NatVpnMappingStats) GetRxBytesDropped() uint64 {
	if m != nil {
		return m.RxBytesDropped
	}
	return 0
}

func (m *NatVpnMappingStats) GetRxPacketsDropped() uint64 {
	if m != nil {
		return m.RxPacketsDropped
	}
	return 0
}

func (m *NatVpnMappingStats) GetTxBytesDropped() uint64 {
	if m != nil {
		return m.TxBytesDropped
	}
	return 0
}

func (m *NatVpnMappingStats) GetTxPacketsDropped() uint64 {
	if m != nil {
		return m.TxPacketsDropped
	}
	return 0
}

func (m *NatVpnMappingStats) GetNumTcpSessions() uint32 {
	if m != nil {
		return m.NumTcpSessions
	}
	return 0
}

func (m *NatVpnMappingStats) GetNumUdpSessions() uint32 {
	if m != nil {
		return m.NumUdpSessions
	}
	return 0
}

func (m *NatVpnMappingStats) GetNumOtherSessions() uint32 {
	if m != nil {
		return m.NumOtherSessions
	}
	return 0
}

func (m *NatVpnMappingStats) GetNumActiveConnections() uint32 {
	if m != nil {
		return m.NumActiveConnections
	}
	return 0
}

// NatVpnMappingGetResponse reflects all the information about a NAT VPN mapping
type NatVpnMappingGetResponse struct {
	ApiStatus ApiStatus            `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *NatVpnMappingSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *NatVpnMappingStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *NatVpnMappingStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *NatVpnMappingGetResponse) Reset()                    { *m = NatVpnMappingGetResponse{} }
func (m *NatVpnMappingGetResponse) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingGetResponse) ProtoMessage()               {}
func (*NatVpnMappingGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{38} }

func (m *NatVpnMappingGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *NatVpnMappingGetResponse) GetSpec() *NatVpnMappingSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *NatVpnMappingGetResponse) GetStatus() *NatVpnMappingStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NatVpnMappingGetResponse) GetStats() *NatVpnMappingStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// NatVpnMappingGetResponseMsg is batched response to NatVpnMappingGetRequestMsg
type NatVpnMappingGetResponseMsg struct {
	Response []*NatVpnMappingGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *NatVpnMappingGetResponseMsg) Reset()                    { *m = NatVpnMappingGetResponseMsg{} }
func (m *NatVpnMappingGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*NatVpnMappingGetResponseMsg) ProtoMessage()               {}
func (*NatVpnMappingGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNat, []int{39} }

func (m *NatVpnMappingGetResponseMsg) GetResponse() []*NatVpnMappingGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*NatPoolSpec)(nil), "nat.NatPoolSpec")
	proto.RegisterType((*NatPoolRequestMsg)(nil), "nat.NatPoolRequestMsg")
	proto.RegisterType((*NatPoolStatus)(nil), "nat.NatPoolStatus")
	proto.RegisterType((*NatPoolResponse)(nil), "nat.NatPoolResponse")
	proto.RegisterType((*NatPoolResponseMsg)(nil), "nat.NatPoolResponseMsg")
	proto.RegisterType((*NatPoolDeleteRequest)(nil), "nat.NatPoolDeleteRequest")
	proto.RegisterType((*NatPoolDeleteRequestMsg)(nil), "nat.NatPoolDeleteRequestMsg")
	proto.RegisterType((*NatPoolDeleteResponse)(nil), "nat.NatPoolDeleteResponse")
	proto.RegisterType((*NatPoolDeleteResponseMsg)(nil), "nat.NatPoolDeleteResponseMsg")
	proto.RegisterType((*NatPoolGetRequest)(nil), "nat.NatPoolGetRequest")
	proto.RegisterType((*NatPoolGetRequestMsg)(nil), "nat.NatPoolGetRequestMsg")
	proto.RegisterType((*NatPoolStats)(nil), "nat.NatPoolStats")
	proto.RegisterType((*NatPoolGetResponse)(nil), "nat.NatPoolGetResponse")
	proto.RegisterType((*NatPoolGetResponseMsg)(nil), "nat.NatPoolGetResponseMsg")
	proto.RegisterType((*NatRuleSpec)(nil), "nat.NatRuleSpec")
	proto.RegisterType((*NatPolicySpec)(nil), "nat.NatPolicySpec")
	proto.RegisterType((*NatPolicyRequestMsg)(nil), "nat.NatPolicyRequestMsg")
	proto.RegisterType((*NatPolicyStatus)(nil), "nat.NatPolicyStatus")
	proto.RegisterType((*NatPolicyResponse)(nil), "nat.NatPolicyResponse")
	proto.RegisterType((*NatPolicyResponseMsg)(nil), "nat.NatPolicyResponseMsg")
	proto.RegisterType((*NatPolicyDeleteRequest)(nil), "nat.NatPolicyDeleteRequest")
	proto.RegisterType((*NatPolicyDeleteRequestMsg)(nil), "nat.NatPolicyDeleteRequestMsg")
	proto.RegisterType((*NatPolicyDeleteResponse)(nil), "nat.NatPolicyDeleteResponse")
	proto.RegisterType((*NatPolicyDeleteResponseMsg)(nil), "nat.NatPolicyDeleteResponseMsg")
	proto.RegisterType((*NatPolicyGetRequest)(nil), "nat.NatPolicyGetRequest")
	proto.RegisterType((*NatPolicyGetRequestMsg)(nil), "nat.NatPolicyGetRequestMsg")
	proto.RegisterType((*NatRuleStats)(nil), "nat.NatRuleStats")
	proto.RegisterType((*NatPolicyStats)(nil), "nat.NatPolicyStats")
	proto.RegisterType((*NatPolicyGetResponse)(nil), "nat.NatPolicyGetResponse")
	proto.RegisterType((*NatPolicyGetResponseMsg)(nil), "nat.NatPolicyGetResponseMsg")
	proto.RegisterType((*NatVpnMappingSpec)(nil), "nat.NatVpnMappingSpec")
	proto.RegisterType((*NatVpnMappingRequestMsg)(nil), "nat.NatVpnMappingRequestMsg")
	proto.RegisterType((*NatVpnMappingStatus)(nil), "nat.NatVpnMappingStatus")
	proto.RegisterType((*NatVpnMappingResponse)(nil), "nat.NatVpnMappingResponse")
	proto.RegisterType((*NatVpnMappingResponseMsg)(nil), "nat.NatVpnMappingResponseMsg")
	proto.RegisterType((*NatVpnMappingGetRequest)(nil), "nat.NatVpnMappingGetRequest")
	proto.RegisterType((*NatVpnMappingGetRequestMsg)(nil), "nat.NatVpnMappingGetRequestMsg")
	proto.RegisterType((*NatVpnMappingStats)(nil), "nat.NatVpnMappingStats")
	proto.RegisterType((*NatVpnMappingGetResponse)(nil), "nat.NatVpnMappingGetResponse")
	proto.RegisterType((*NatVpnMappingGetResponseMsg)(nil), "nat.NatVpnMappingGetResponseMsg")
	proto.RegisterEnum("nat.NatAction", NatAction_name, NatAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nat service

type NatClient interface {
	// NAT pool related APIs
	NatPoolCreate(ctx context.Context, in *NatPoolRequestMsg, opts ...grpc.CallOption) (*NatPoolResponseMsg, error)
	NatPoolUpdate(ctx context.Context, in *NatPoolRequestMsg, opts ...grpc.CallOption) (*NatPoolResponseMsg, error)
	NatPoolDelete(ctx context.Context, in *NatPoolDeleteRequestMsg, opts ...grpc.CallOption) (*NatPoolDeleteResponseMsg, error)
	NatPoolGet(ctx context.Context, in *NatPoolGetRequestMsg, opts ...grpc.CallOption) (*NatPoolGetResponseMsg, error)
	// NAT policy related APIs
	NatPolicyCreate(ctx context.Context, in *NatPolicyRequestMsg, opts ...grpc.CallOption) (*NatPolicyResponseMsg, error)
	NatPolicyUpdate(ctx context.Context, in *NatPolicyRequestMsg, opts ...grpc.CallOption) (*NatPolicyResponseMsg, error)
	NatPolicyDelete(ctx context.Context, in *NatPolicyDeleteRequestMsg, opts ...grpc.CallOption) (*NatPolicyDeleteResponseMsg, error)
	NatPolicyGet(ctx context.Context, in *NatPolicyGetRequestMsg, opts ...grpc.CallOption) (*NatPolicyGetResponseMsg, error)
	// NAT-VPN mappings related APIs
	NatVpnMappingCreate(ctx context.Context, in *NatVpnMappingRequestMsg, opts ...grpc.CallOption) (*NatVpnMappingResponseMsg, error)
	NatVpnMappingGet(ctx context.Context, in *NatVpnMappingGetRequestMsg, opts ...grpc.CallOption) (*NatVpnMappingGetResponseMsg, error)
}

type natClient struct {
	cc *grpc.ClientConn
}

func NewNatClient(cc *grpc.ClientConn) NatClient {
	return &natClient{cc}
}

func (c *natClient) NatPoolCreate(ctx context.Context, in *NatPoolRequestMsg, opts ...grpc.CallOption) (*NatPoolResponseMsg, error) {
	out := new(NatPoolResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatPoolCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) NatPoolUpdate(ctx context.Context, in *NatPoolRequestMsg, opts ...grpc.CallOption) (*NatPoolResponseMsg, error) {
	out := new(NatPoolResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatPoolUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) NatPoolDelete(ctx context.Context, in *NatPoolDeleteRequestMsg, opts ...grpc.CallOption) (*NatPoolDeleteResponseMsg, error) {
	out := new(NatPoolDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatPoolDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) NatPoolGet(ctx context.Context, in *NatPoolGetRequestMsg, opts ...grpc.CallOption) (*NatPoolGetResponseMsg, error) {
	out := new(NatPoolGetResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatPoolGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) NatPolicyCreate(ctx context.Context, in *NatPolicyRequestMsg, opts ...grpc.CallOption) (*NatPolicyResponseMsg, error) {
	out := new(NatPolicyResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatPolicyCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) NatPolicyUpdate(ctx context.Context, in *NatPolicyRequestMsg, opts ...grpc.CallOption) (*NatPolicyResponseMsg, error) {
	out := new(NatPolicyResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatPolicyUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) NatPolicyDelete(ctx context.Context, in *NatPolicyDeleteRequestMsg, opts ...grpc.CallOption) (*NatPolicyDeleteResponseMsg, error) {
	out := new(NatPolicyDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatPolicyDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) NatPolicyGet(ctx context.Context, in *NatPolicyGetRequestMsg, opts ...grpc.CallOption) (*NatPolicyGetResponseMsg, error) {
	out := new(NatPolicyGetResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatPolicyGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) NatVpnMappingCreate(ctx context.Context, in *NatVpnMappingRequestMsg, opts ...grpc.CallOption) (*NatVpnMappingResponseMsg, error) {
	out := new(NatVpnMappingResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatVpnMappingCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) NatVpnMappingGet(ctx context.Context, in *NatVpnMappingGetRequestMsg, opts ...grpc.CallOption) (*NatVpnMappingGetResponseMsg, error) {
	out := new(NatVpnMappingGetResponseMsg)
	err := grpc.Invoke(ctx, "/nat.Nat/NatVpnMappingGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nat service

type NatServer interface {
	// NAT pool related APIs
	NatPoolCreate(context.Context, *NatPoolRequestMsg) (*NatPoolResponseMsg, error)
	NatPoolUpdate(context.Context, *NatPoolRequestMsg) (*NatPoolResponseMsg, error)
	NatPoolDelete(context.Context, *NatPoolDeleteRequestMsg) (*NatPoolDeleteResponseMsg, error)
	NatPoolGet(context.Context, *NatPoolGetRequestMsg) (*NatPoolGetResponseMsg, error)
	// NAT policy related APIs
	NatPolicyCreate(context.Context, *NatPolicyRequestMsg) (*NatPolicyResponseMsg, error)
	NatPolicyUpdate(context.Context, *NatPolicyRequestMsg) (*NatPolicyResponseMsg, error)
	NatPolicyDelete(context.Context, *NatPolicyDeleteRequestMsg) (*NatPolicyDeleteResponseMsg, error)
	NatPolicyGet(context.Context, *NatPolicyGetRequestMsg) (*NatPolicyGetResponseMsg, error)
	// NAT-VPN mappings related APIs
	NatVpnMappingCreate(context.Context, *NatVpnMappingRequestMsg) (*NatVpnMappingResponseMsg, error)
	NatVpnMappingGet(context.Context, *NatVpnMappingGetRequestMsg) (*NatVpnMappingGetResponseMsg, error)
}

func RegisterNatServer(s *grpc.Server, srv NatServer) {
	s.RegisterService(&_Nat_serviceDesc, srv)
}

func _Nat_NatPoolCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatPoolRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatPoolCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatPoolCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatPoolCreate(ctx, req.(*NatPoolRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_NatPoolUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatPoolRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatPoolUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatPoolUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatPoolUpdate(ctx, req.(*NatPoolRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_NatPoolDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatPoolDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatPoolDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatPoolDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatPoolDelete(ctx, req.(*NatPoolDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_NatPoolGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatPoolGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatPoolGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatPoolGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatPoolGet(ctx, req.(*NatPoolGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_NatPolicyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatPolicyRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatPolicyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatPolicyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatPolicyCreate(ctx, req.(*NatPolicyRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_NatPolicyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatPolicyRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatPolicyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatPolicyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatPolicyUpdate(ctx, req.(*NatPolicyRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_NatPolicyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatPolicyDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatPolicyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatPolicyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatPolicyDelete(ctx, req.(*NatPolicyDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_NatPolicyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatPolicyGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatPolicyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatPolicyGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatPolicyGet(ctx, req.(*NatPolicyGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_NatVpnMappingCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatVpnMappingRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatVpnMappingCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatVpnMappingCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatVpnMappingCreate(ctx, req.(*NatVpnMappingRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_NatVpnMappingGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NatVpnMappingGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).NatVpnMappingGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nat.Nat/NatVpnMappingGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).NatVpnMappingGet(ctx, req.(*NatVpnMappingGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nat.Nat",
	HandlerType: (*NatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NatPoolCreate",
			Handler:    _Nat_NatPoolCreate_Handler,
		},
		{
			MethodName: "NatPoolUpdate",
			Handler:    _Nat_NatPoolUpdate_Handler,
		},
		{
			MethodName: "NatPoolDelete",
			Handler:    _Nat_NatPoolDelete_Handler,
		},
		{
			MethodName: "NatPoolGet",
			Handler:    _Nat_NatPoolGet_Handler,
		},
		{
			MethodName: "NatPolicyCreate",
			Handler:    _Nat_NatPolicyCreate_Handler,
		},
		{
			MethodName: "NatPolicyUpdate",
			Handler:    _Nat_NatPolicyUpdate_Handler,
		},
		{
			MethodName: "NatPolicyDelete",
			Handler:    _Nat_NatPolicyDelete_Handler,
		},
		{
			MethodName: "NatPolicyGet",
			Handler:    _Nat_NatPolicyGet_Handler,
		},
		{
			MethodName: "NatVpnMappingCreate",
			Handler:    _Nat_NatVpnMappingCreate_Handler,
		},
		{
			MethodName: "NatVpnMappingGet",
			Handler:    _Nat_NatVpnMappingGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nat.proto",
}

func (m *NatPoolSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Address) > 0 {
		for _, msg := range m.Address {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PortRange != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.PortRange.Size()))
		n3, err := m.PortRange.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *NatPoolRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPoolStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.PoolHandle))
		i += 8
	}
	return i, nil
}

func (m *NatPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.ApiStatus))
	}
	if m.PoolStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.PoolStatus.Size()))
		n4, err := m.PoolStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *NatPoolResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPoolDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Meta.Size()))
		n5, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n6, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *NatPoolDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPoolDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *NatPoolDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPoolGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Meta.Size()))
		n7, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n8, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *NatPoolGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPoolStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *NatPoolGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Spec.Size()))
		n9, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Status.Size()))
		n10, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Stats.Size()))
		n11, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *NatPoolGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPoolGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatRuleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatRuleSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RuleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.RuleId))
	}
	if len(m.SrcAddress) > 0 {
		for _, msg := range m.SrcAddress {
			dAtA[i] = 0x12
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SrcSg) > 0 {
		dAtA13 := make([]byte, len(m.SrcSg)*10)
		var j12 int
		for _, num := range m.SrcSg {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNat(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if len(m.DstAddress) > 0 {
		for _, msg := range m.DstAddress {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DstSg) > 0 {
		dAtA15 := make([]byte, len(m.DstSg)*10)
		var j14 int
		for _, num := range m.DstSg {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNat(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if len(m.DstPortRange) > 0 {
		for _, msg := range m.DstPortRange {
			dAtA[i] = 0x32
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SrcPortRange) > 0 {
		for _, msg := range m.SrcPortRange {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SrcNatAction != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.SrcNatAction))
	}
	if m.DstNatAction != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.DstNatAction))
	}
	if m.SrcNatPool != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.SrcNatPool.Size()))
		n16, err := m.SrcNatPool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.DstNatPool != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.DstNatPool.Size()))
		n17, err := m.DstNatPool.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *NatPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Meta.Size()))
		n18, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n19, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.Rules) > 0 {
		for _, msg := range m.Rules {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPolicyRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NatPolicyHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.NatPolicyHandle))
		i += 8
	}
	return i, nil
}

func (m *NatPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.ApiStatus))
	}
	if m.PolicyStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.PolicyStatus.Size()))
		n20, err := m.PolicyStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *NatPolicyResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPolicyDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Meta.Size()))
		n21, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n22, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *NatPolicyDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPolicyDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *NatPolicyDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPolicyGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Meta.Size()))
		n23, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n24, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *NatPolicyGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatRuleStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatRuleStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumTcpSessions != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NumTcpSessions))
	}
	if m.NumUdpSessions != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NumUdpSessions))
	}
	if m.NumOtherSessions != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NumOtherSessions))
	}
	return i, nil
}

func (m *NatPolicyStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatPolicyGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Spec.Size()))
		n25, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Status.Size()))
		n26, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Stats.Size()))
		n27, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *NatPolicyGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatPolicyGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatVpnMappingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Meta.Size()))
		n28, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n29, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *NatVpnMappingRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatVpnMappingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Handle))
		i += 8
	}
	if m.SvcMapping != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.SvcMapping.Size()))
		n30, err := m.SvcMapping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *NatVpnMappingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Status.Size()))
		n31, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *NatVpnMappingResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatVpnMappingGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Meta.Size()))
		n32, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n33, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *NatVpnMappingGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NatVpnMappingStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RxBytes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.RxBytes))
	}
	if m.RxPackets != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.RxPackets))
	}
	if m.TxBytes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.TxBytes))
	}
	if m.TxPackets != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.TxPackets))
	}
	if m.RxBytesDropped != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.RxBytesDropped))
	}
	if m.RxPacketsDropped != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.RxPacketsDropped))
	}
	if m.TxBytesDropped != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.TxBytesDropped))
	}
	if m.TxPacketsDropped != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.TxPacketsDropped))
	}
	if m.NumTcpSessions != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NumTcpSessions))
	}
	if m.NumUdpSessions != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NumUdpSessions))
	}
	if m.NumOtherSessions != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NumOtherSessions))
	}
	if m.NumActiveConnections != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.NumActiveConnections))
	}
	return i, nil
}

func (m *NatVpnMappingGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Spec.Size()))
		n34, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Status.Size()))
		n35, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNat(dAtA, i, uint64(m.Stats.Size()))
		n36, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *NatVpnMappingGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NatVpnMappingGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintNat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NatPoolSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	if m.PortRange != nil {
		l = m.PortRange.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPoolRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPoolStatus) Size() (n int) {
	var l int
	_ = l
	if m.PoolHandle != 0 {
		n += 9
	}
	return n
}

func (m *NatPoolResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNat(uint64(m.ApiStatus))
	}
	if m.PoolStatus != nil {
		l = m.PoolStatus.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPoolResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPoolDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPoolDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPoolDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNat(uint64(m.ApiStatus))
	}
	return n
}

func (m *NatPoolDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPoolGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPoolGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPoolStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *NatPoolGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNat(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPoolGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatRuleSpec) Size() (n int) {
	var l int
	_ = l
	if m.RuleId != 0 {
		n += 1 + sovNat(uint64(m.RuleId))
	}
	if len(m.SrcAddress) > 0 {
		for _, e := range m.SrcAddress {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	if len(m.SrcSg) > 0 {
		l = 0
		for _, e := range m.SrcSg {
			l += sovNat(uint64(e))
		}
		n += 1 + sovNat(uint64(l)) + l
	}
	if len(m.DstAddress) > 0 {
		for _, e := range m.DstAddress {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	if len(m.DstSg) > 0 {
		l = 0
		for _, e := range m.DstSg {
			l += sovNat(uint64(e))
		}
		n += 1 + sovNat(uint64(l)) + l
	}
	if len(m.DstPortRange) > 0 {
		for _, e := range m.DstPortRange {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	if len(m.SrcPortRange) > 0 {
		for _, e := range m.SrcPortRange {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	if m.SrcNatAction != 0 {
		n += 1 + sovNat(uint64(m.SrcNatAction))
	}
	if m.DstNatAction != 0 {
		n += 1 + sovNat(uint64(m.DstNatAction))
	}
	if m.SrcNatPool != nil {
		l = m.SrcNatPool.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.DstNatPool != nil {
		l = m.DstNatPool.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPolicySpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPolicyRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPolicyStatus) Size() (n int) {
	var l int
	_ = l
	if m.NatPolicyHandle != 0 {
		n += 9
	}
	return n
}

func (m *NatPolicyResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNat(uint64(m.ApiStatus))
	}
	if m.PolicyStatus != nil {
		l = m.PolicyStatus.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPolicyResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPolicyDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPolicyDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPolicyDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNat(uint64(m.ApiStatus))
	}
	return n
}

func (m *NatPolicyDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPolicyGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPolicyGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatRuleStats) Size() (n int) {
	var l int
	_ = l
	if m.NumTcpSessions != 0 {
		n += 1 + sovNat(uint64(m.NumTcpSessions))
	}
	if m.NumUdpSessions != 0 {
		n += 1 + sovNat(uint64(m.NumUdpSessions))
	}
	if m.NumOtherSessions != 0 {
		n += 1 + sovNat(uint64(m.NumOtherSessions))
	}
	return n
}

func (m *NatPolicyStats) Size() (n int) {
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatPolicyGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNat(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatPolicyGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatVpnMappingSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatVpnMappingRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatVpnMappingStatus) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 9
	}
	if m.SvcMapping != nil {
		l = m.SvcMapping.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatVpnMappingResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNat(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatVpnMappingResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatVpnMappingGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatVpnMappingGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func (m *NatVpnMappingStats) Size() (n int) {
	var l int
	_ = l
	if m.RxBytes != 0 {
		n += 1 + sovNat(uint64(m.RxBytes))
	}
	if m.RxPackets != 0 {
		n += 1 + sovNat(uint64(m.RxPackets))
	}
	if m.TxBytes != 0 {
		n += 1 + sovNat(uint64(m.TxBytes))
	}
	if m.TxPackets != 0 {
		n += 1 + sovNat(uint64(m.TxPackets))
	}
	if m.RxBytesDropped != 0 {
		n += 1 + sovNat(uint64(m.RxBytesDropped))
	}
	if m.RxPacketsDropped != 0 {
		n += 1 + sovNat(uint64(m.RxPacketsDropped))
	}
	if m.TxBytesDropped != 0 {
		n += 1 + sovNat(uint64(m.TxBytesDropped))
	}
	if m.TxPacketsDropped != 0 {
		n += 1 + sovNat(uint64(m.TxPacketsDropped))
	}
	if m.NumTcpSessions != 0 {
		n += 1 + sovNat(uint64(m.NumTcpSessions))
	}
	if m.NumUdpSessions != 0 {
		n += 1 + sovNat(uint64(m.NumUdpSessions))
	}
	if m.NumOtherSessions != 0 {
		n += 1 + sovNat(uint64(m.NumOtherSessions))
	}
	if m.NumActiveConnections != 0 {
		n += 1 + sovNat(uint64(m.NumActiveConnections))
	}
	return n
}

func (m *NatVpnMappingGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNat(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovNat(uint64(l))
	}
	return n
}

func (m *NatVpnMappingGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovNat(uint64(l))
		}
	}
	return n
}

func sovNat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNat(x uint64) (n int) {
	return sovNat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NatPoolSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &NatPoolKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &Address{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PortRange == nil {
				m.PortRange = &L4PortRange{}
			}
			if err := m.PortRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &NatPoolSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolHandle", wireType)
			}
			m.PoolHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolStatus == nil {
				m.PoolStatus = &NatPoolStatus{}
			}
			if err := m.PoolStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &NatPoolResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &NatPoolKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &NatPoolDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &NatPoolDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &NatPoolKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &NatPoolGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &NatPoolSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &NatPoolStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &NatPoolStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPoolGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPoolGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPoolGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &NatPoolGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatRuleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatRuleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatRuleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			m.RuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddress = append(m.SrcAddress, &IPAddressObj{})
			if err := m.SrcAddress[len(m.SrcAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SrcSg = append(m.SrcSg, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNat
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SrcSg = append(m.SrcSg, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcSg", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstAddress = append(m.DstAddress, &IPAddressObj{})
			if err := m.DstAddress[len(m.DstAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DstSg = append(m.DstSg, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNat
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DstSg = append(m.DstSg, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DstSg", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstPortRange = append(m.DstPortRange, &L4PortRange{})
			if err := m.DstPortRange[len(m.DstPortRange)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPortRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcPortRange = append(m.SrcPortRange, &L4PortRange{})
			if err := m.SrcPortRange[len(m.SrcPortRange)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNatAction", wireType)
			}
			m.SrcNatAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcNatAction |= (NatAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstNatAction", wireType)
			}
			m.DstNatAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstNatAction |= (NatAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SrcNatPool == nil {
				m.SrcNatPool = &NatPoolKeyHandle{}
			}
			if err := m.SrcNatPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstNatPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DstNatPool == nil {
				m.DstNatPool = &NatPoolKeyHandle{}
			}
			if err := m.DstNatPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &NatPolicyKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &NatRuleSpec{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &NatPolicySpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NatPolicyHandle", wireType)
			}
			m.NatPolicyHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.NatPolicyHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyStatus == nil {
				m.PolicyStatus = &NatPolicyStatus{}
			}
			if err := m.PolicyStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &NatPolicyResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &NatPolicyKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &NatPolicyDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &NatPolicyDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &NatPolicyKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &NatPolicyGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatRuleStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatRuleStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatRuleStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTcpSessions", wireType)
			}
			m.NumTcpSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTcpSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUdpSessions", wireType)
			}
			m.NumUdpSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUdpSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOtherSessions", wireType)
			}
			m.NumOtherSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOtherSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &NatRuleStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &NatPolicySpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &NatPolicyStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &NatPolicyStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatPolicyGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatPolicyGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatPolicyGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &NatPolicyGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &NatVpnMappingKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &NatVpnMappingSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Handle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvcMapping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SvcMapping == nil {
				m.SvcMapping = &Svc{}
			}
			if err := m.SvcMapping.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &NatVpnMappingStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &NatVpnMappingResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &NatVpnMappingKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &NatVpnMappingGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxBytes", wireType)
			}
			m.RxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPackets", wireType)
			}
			m.RxPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPackets |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			m.TxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPackets", wireType)
			}
			m.TxPackets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPackets |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxBytesDropped", wireType)
			}
			m.RxBytesDropped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxBytesDropped |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPacketsDropped", wireType)
			}
			m.RxPacketsDropped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPacketsDropped |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytesDropped", wireType)
			}
			m.TxBytesDropped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxBytesDropped |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPacketsDropped", wireType)
			}
			m.TxPacketsDropped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPacketsDropped |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTcpSessions", wireType)
			}
			m.NumTcpSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTcpSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUdpSessions", wireType)
			}
			m.NumUdpSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumUdpSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOtherSessions", wireType)
			}
			m.NumOtherSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumOtherSessions |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumActiveConnections", wireType)
			}
			m.NumActiveConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumActiveConnections |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &NatVpnMappingSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &NatVpnMappingStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &NatVpnMappingStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NatVpnMappingGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NatVpnMappingGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NatVpnMappingGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &NatVpnMappingGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nat.proto", fileDescriptorNat) }

var fileDescriptorNat = []byte{
	// 1694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x5b, 0x4f, 0x1c, 0xc9,
	0x15, 0xa6, 0x99, 0x61, 0x80, 0x33, 0x30, 0x1e, 0xca, 0x5c, 0x86, 0xe1, 0xe6, 0xb4, 0x12, 0x87,
	0x20, 0x07, 0x11, 0x8c, 0x2d, 0x3b, 0x52, 0x62, 0x71, 0x73, 0x7c, 0x81, 0x61, 0xd4, 0x33, 0xb6,
	0xe3, 0xbc, 0xb4, 0x9a, 0xee, 0xd2, 0x30, 0x66, 0xe8, 0xee, 0x74, 0xd5, 0x10, 0x46, 0xca, 0x2f,
	0xb0, 0x92, 0xc8, 0xca, 0x43, 0x94, 0x1f, 0xb1, 0x3f, 0x64, 0x1f, 0xf7, 0x6d, 0xdf, 0xd8, 0x95,
	0xf7, 0x6d, 0x5f, 0x76, 0xe5, 0xfd, 0x03, 0xab, 0xba, 0xf4, 0xbd, 0x07, 0x83, 0x85, 0xf7, 0x89,
	0xa9, 0xaa, 0x73, 0xbe, 0x73, 0xa9, 0x73, 0xeb, 0x02, 0x46, 0x6d, 0x83, 0xae, 0xba, 0x9e, 0x43,
	0x1d, 0x94, 0xb3, 0x0d, 0x5a, 0x2d, 0xd2, 0x9e, 0x8b, 0x89, 0xd8, 0xa9, 0x8e, 0x1c, 0x1f, 0x89,
	0x5f, 0xea, 0x4f, 0x0a, 0x14, 0x6b, 0x06, 0xad, 0x3b, 0x4e, 0xa7, 0xe1, 0x62, 0x13, 0xfd, 0x06,
	0xf2, 0x27, 0x98, 0x1a, 0x15, 0xe5, 0x96, 0xb2, 0x5c, 0x5c, 0x9f, 0x58, 0x15, 0x5c, 0x07, 0x87,
	0x6f, 0xb0, 0x49, 0xf7, 0x31, 0x35, 0x34, 0x7e, 0x8c, 0x9e, 0xc1, 0xf8, 0x31, 0xee, 0xe9, 0x8e,
	0xa7, 0x1f, 0x19, 0xb6, 0xd5, 0xc1, 0x95, 0x41, 0x4e, 0x3f, 0xb9, 0x7a, 0x7c, 0xb4, 0x2a, 0xe1,
	0x9e, 0xe3, 0xde, 0x13, 0x7e, 0xb6, 0x55, 0xfe, 0x70, 0xbe, 0x34, 0x76, 0x8a, 0xed, 0xb6, 0x89,
	0xff, 0xa8, 0x1e, 0xe3, 0x9e, 0xaa, 0x15, 0x8f, 0x71, 0xef, 0xc0, 0x13, 0xc7, 0xe8, 0xcf, 0x30,
	0x6c, 0x58, 0x96, 0x87, 0x09, 0xa9, 0xe4, 0x6e, 0xe5, 0x96, 0x8b, 0xeb, 0x25, 0x29, 0x75, 0x53,
	0xec, 0x6e, 0x4d, 0x7e, 0x38, 0x5f, 0x2a, 0x4b, 0xfe, 0x13, 0xc3, 0xb6, 0x0c, 0xea, 0x78, 0x3d,
	0xcd, 0x67, 0x42, 0x7f, 0x00, 0x70, 0x1d, 0x8f, 0xea, 0x9e, 0x61, 0xb7, 0x70, 0x25, 0xcf, 0x15,
	0x41, 0x12, 0x62, 0x6f, 0xa3, 0xee, 0x78, 0x54, 0x63, 0x27, 0xda, 0xa8, 0xeb, 0xff, 0x54, 0x1f,
	0xc1, 0x84, 0xd4, 0x52, 0xc3, 0x7f, 0xef, 0x62, 0x42, 0xf7, 0x49, 0x0b, 0xad, 0xc0, 0xb0, 0x27,
	0x56, 0x15, 0x85, 0xeb, 0x51, 0x5e, 0x65, 0x3e, 0x8c, 0x78, 0x47, 0xf3, 0x09, 0xd4, 0x35, 0x18,
	0xf7, 0xf7, 0xa9, 0x41, 0xbb, 0x04, 0x2d, 0x41, 0xd1, 0x75, 0x9c, 0x8e, 0xef, 0x0e, 0xe6, 0xbe,
	0x82, 0x06, 0x6c, 0x4b, 0x58, 0xa9, 0xfe, 0x47, 0x81, 0x1b, 0x81, 0x4c, 0xe2, 0x3a, 0x36, 0xc1,
	0xe8, 0x31, 0x80, 0xe1, 0xb6, 0x75, 0xc2, 0x21, 0x38, 0x4f, 0x69, 0xbd, 0xec, 0x1b, 0xef, 0xb6,
	0x05, 0xf4, 0xd6, 0xd4, 0x87, 0xf3, 0xa5, 0x09, 0x69, 0x7e, 0x48, 0xae, 0x8d, 0x1a, 0x3e, 0x05,
	0xba, 0x2b, 0x85, 0x4b, 0xa0, 0x41, 0xe9, 0x82, 0xa8, 0xf6, 0x82, 0x87, 0x2b, 0x24, 0x7e, 0xab,
	0x8f, 0x01, 0x25, 0xf4, 0x61, 0x4e, 0x58, 0x83, 0x11, 0x4f, 0x2e, 0xa5, 0x17, 0x26, 0xa3, 0x38,
	0x3e, 0xa9, 0x16, 0x50, 0xa9, 0xff, 0x80, 0x49, 0x79, 0xb8, 0x83, 0x3b, 0x98, 0x62, 0xe9, 0xd1,
	0xcb, 0x46, 0xd2, 0x83, 0x2b, 0x44, 0x52, 0x2c, 0x6e, 0xd4, 0x1a, 0xcc, 0x64, 0x09, 0x66, 0x56,
	0xdc, 0x4d, 0x5e, 0xe5, 0x6c, 0xd4, 0x88, 0x18, 0x79, 0x78, 0xa7, 0x3a, 0x4c, 0x25, 0x08, 0xae,
	0xf7, 0x9a, 0x54, 0x0d, 0x2a, 0x99, 0x02, 0x98, 0xc6, 0xf7, 0x53, 0x7e, 0xaf, 0x66, 0xa9, 0x9c,
	0xf2, 0x3e, 0x0d, 0x22, 0xf9, 0x2f, 0x98, 0xfe, 0x62, 0xae, 0x7f, 0x12, 0xdc, 0x79, 0x28, 0x55,
	0x44, 0x4f, 0xc2, 0xef, 0xd3, 0x51, 0x23, 0x42, 0xda, 0xd0, 0xe9, 0x25, 0x18, 0x8b, 0x84, 0x28,
	0x51, 0xbf, 0x56, 0x82, 0xb0, 0xe4, 0xe4, 0xd7, 0x9c, 0x29, 0xbf, 0x86, 0x3c, 0x71, 0xb1, 0x29,
	0x2d, 0x4d, 0x27, 0x38, 0x3f, 0x45, 0x2b, 0x50, 0x90, 0x92, 0x72, 0x7d, 0x53, 0x49, 0x52, 0xa0,
	0xdf, 0xc2, 0x10, 0xfb, 0x45, 0x64, 0xe1, 0x99, 0x48, 0x92, 0x12, 0x4d, 0x9c, 0xab, 0x7b, 0x41,
	0x78, 0x45, 0x0c, 0x13, 0xc1, 0x9a, 0xbc, 0xfa, 0x99, 0x94, 0xd7, 0x52, 0xf7, 0xfe, 0x2e, 0xcf,
	0xeb, 0xb6, 0xd6, 0xed, 0x60, 0x5e, 0xb7, 0x67, 0x60, 0xd8, 0xeb, 0x76, 0xb0, 0xde, 0xb6, 0xb8,
	0x77, 0xf2, 0x5a, 0x81, 0x2d, 0x9f, 0x5a, 0x68, 0x03, 0x8a, 0xc4, 0x33, 0x75, 0xbf, 0xc2, 0x0e,
	0x72, 0x01, 0x37, 0xa5, 0xeb, 0x9e, 0xd6, 0x65, 0x8d, 0x3d, 0x38, 0x7c, 0xa3, 0x01, 0xf1, 0x4c,
	0xb9, 0x44, 0x53, 0x50, 0x60, 0x5c, 0xa4, 0xc5, 0x4b, 0xf2, 0xb8, 0x36, 0x44, 0x3c, 0xb3, 0xd1,
	0x62, 0x60, 0x16, 0xa1, 0x01, 0x58, 0xfe, 0x02, 0x30, 0x8b, 0xd0, 0x08, 0x18, 0xe3, 0x22, 0xad,
	0xca, 0x90, 0x00, 0xb3, 0x08, 0x6d, 0xb4, 0xd0, 0x03, 0x28, 0xb1, 0xed, 0x48, 0xed, 0x2e, 0x70,
	0xbc, 0xac, 0xda, 0x3d, 0x66, 0x11, 0x1a, 0xac, 0x18, 0x27, 0xd3, 0x2e, 0xc2, 0x39, 0xdc, 0x9f,
	0x93, 0x78, 0x66, 0xc8, 0xb9, 0x21, 0x38, 0x6d, 0x83, 0xea, 0x86, 0x49, 0xdb, 0x8e, 0x5d, 0x19,
	0xe1, 0xb1, 0x54, 0xf2, 0x3d, 0xbe, 0xc9, 0x77, 0x39, 0x57, 0xb0, 0x62, 0x5c, 0x4c, 0xd3, 0x08,
	0xd7, 0x68, 0x36, 0x97, 0x45, 0x68, 0xc8, 0x75, 0x1f, 0xc6, 0x7c, 0x59, 0xac, 0xec, 0x56, 0xe0,
	0x82, 0xec, 0x02, 0x21, 0x8f, 0x6d, 0x32, 0x3e, 0x5f, 0x1a, 0xe7, 0x2b, 0x5e, 0xc4, 0x27, 0x24,
	0xb2, 0x4d, 0xf5, 0x0b, 0x45, 0x36, 0xa5, 0x4e, 0xdb, 0xec, 0x5d, 0xa5, 0x99, 0xef, 0x65, 0xd7,
	0x81, 0xe9, 0x40, 0x22, 0x03, 0xbc, 0x74, 0x3b, 0xbf, 0x0d, 0x43, 0x2c, 0xf4, 0xfc, 0x66, 0x1e,
	0xe4, 0x98, 0x1f, 0xaa, 0x9a, 0x38, 0x56, 0xb7, 0xe1, 0x66, 0x00, 0x1e, 0x29, 0x21, 0x77, 0x92,
	0x25, 0x24, 0x92, 0x7c, 0xbe, 0x61, 0x61, 0xf9, 0xf8, 0x93, 0x6c, 0xaa, 0xfc, 0x44, 0x24, 0xe4,
	0x0a, 0x4c, 0x08, 0xd7, 0xb1, 0xbd, 0x78, 0x3f, 0xbe, 0x61, 0xfb, 0xb4, 0xb2, 0x8e, 0xfd, 0x4f,
	0x91, 0xe5, 0x53, 0x28, 0x71, 0xcd, 0xc5, 0xe6, 0x21, 0x8c, 0x4b, 0x2d, 0x62, 0x8d, 0x79, 0x32,
	0x61, 0x90, 0xe0, 0x1b, 0x73, 0x23, 0x2b, 0xf5, 0x99, 0x2c, 0xb0, 0x51, 0xbd, 0x98, 0x77, 0xd6,
	0x53, 0xb5, 0x62, 0x3a, 0x8e, 0x96, 0x51, 0x2a, 0xfe, 0xad, 0xc0, 0x74, 0x70, 0xfe, 0x49, 0x3d,
	0xfa, 0x5a, 0x03, 0x44, 0xd5, 0x60, 0x36, 0x5b, 0x1d, 0x66, 0xe0, 0xbd, 0xe4, 0xf5, 0xcf, 0xc5,
	0xed, 0xeb, 0xd3, 0xbb, 0x0d, 0x39, 0x0b, 0x44, 0x49, 0xae, 0xb9, 0x7b, 0xbf, 0x84, 0x6a, 0x1f,
	0x11, 0x4c, 0xef, 0x07, 0xa9, 0x8b, 0x99, 0xcf, 0x56, 0x3c, 0x75, 0x3d, 0x6f, 0x95, 0x48, 0x22,
	0x5c, 0xbd, 0x89, 0x5f, 0xef, 0xdd, 0xec, 0x45, 0x42, 0x25, 0xde, 0xda, 0xd7, 0x93, 0x17, 0x53,
	0x89, 0xdb, 0x97, 0xd5, 0xdc, 0xdf, 0x29, 0xbc, 0xbb, 0xf3, 0xcc, 0x67, 0x3d, 0x10, 0x2d, 0x43,
	0xd9, 0xee, 0x9e, 0xe8, 0xd4, 0x74, 0x75, 0x82, 0x09, 0x69, 0x3b, 0xb6, 0xb8, 0x91, 0x71, 0xad,
	0x64, 0x77, 0x4f, 0x9a, 0xa6, 0xdb, 0x90, 0xbb, 0x3e, 0x65, 0xd7, 0x8a, 0x50, 0x0e, 0x06, 0x94,
	0x2f, 0xac, 0x90, 0xf2, 0x0e, 0x20, 0x46, 0xe9, 0xd0, 0x23, 0xec, 0x85, 0xb4, 0x39, 0x4e, 0xcb,
	0x30, 0x0e, 0xd8, 0x81, 0x4f, 0xad, 0x3e, 0x84, 0x52, 0x2c, 0xf3, 0x22, 0x0d, 0x5c, 0x98, 0x35,
	0x11, 0xab, 0x57, 0xd1, 0x06, 0xfe, 0x8d, 0x12, 0x49, 0xca, 0xcf, 0x31, 0x9c, 0xdc, 0x8e, 0x0d,
	0x27, 0x59, 0x75, 0x4f, 0x8c, 0x27, 0x77, 0x12, 0xe3, 0x49, 0x76, 0x41, 0xf1, 0x07, 0x94, 0xdf,
	0xc5, 0x07, 0x94, 0x9b, 0x69, 0xe2, 0xc0, 0xc2, 0x7a, 0x24, 0x8b, 0x12, 0x43, 0xca, 0xbd, 0x54,
	0x7c, 0xcf, 0x66, 0xdc, 0x7f, 0x2a, 0xb8, 0xff, 0x25, 0x0a, 0xec, 0x4b, 0xd7, 0xde, 0x37, 0x5c,
	0xb7, 0x6d, 0xb7, 0xae, 0xd2, 0x97, 0xea, 0xd9, 0xa1, 0x5d, 0x95, 0xa1, 0x1d, 0x82, 0x5e, 0x3a,
	0xbc, 0x9f, 0x73, 0x03, 0x43, 0xc6, 0x4b, 0x8d, 0xae, 0x71, 0xe5, 0xc3, 0xe8, 0x7e, 0xc5, 0xf3,
	0x36, 0x72, 0x2a, 0xfc, 0x3d, 0x0d, 0x85, 0x58, 0xd3, 0x91, 0x2b, 0xb4, 0x0c, 0x45, 0x72, 0x6a,
	0xea, 0x27, 0x82, 0x58, 0xda, 0x32, 0xcc, 0x6c, 0x69, 0x9c, 0x9a, 0x1a, 0x90, 0x53, 0x53, 0xe2,
	0xb0, 0x8a, 0x30, 0x95, 0x50, 0x53, 0x46, 0xda, 0xa3, 0x4b, 0x45, 0x5a, 0xe9, 0xfb, 0xf3, 0x25,
	0xc8, 0x0e, 0xb1, 0xb5, 0x20, 0x74, 0x84, 0xfc, 0x4a, 0x86, 0x91, 0xb1, 0xf0, 0x91, 0x1f, 0x2d,
	0x69, 0x5d, 0x3e, 0xf2, 0xd1, 0x92, 0x66, 0x88, 0x44, 0xc5, 0x7f, 0x95, 0xc4, 0x3d, 0x5c, 0xbd,
	0xec, 0x5d, 0x7f, 0x6c, 0x34, 0x79, 0x7d, 0xcf, 0xd2, 0x49, 0x98, 0x9a, 0x08, 0x8f, 0xf9, 0xb4,
	0xa5, 0x59, 0x25, 0xf0, 0xc7, 0x1c, 0xff, 0x9e, 0x89, 0xbb, 0x97, 0xa0, 0x59, 0x18, 0xf1, 0xce,
	0xf4, 0xc3, 0x1e, 0xc5, 0x44, 0xce, 0xeb, 0xc3, 0xde, 0xd9, 0x16, 0x5b, 0xa2, 0x05, 0x00, 0xef,
	0x4c, 0x77, 0x0d, 0xf3, 0x18, 0x53, 0x71, 0x4d, 0x79, 0x6d, 0xd4, 0x3b, 0xab, 0x8b, 0x0d, 0xc6,
	0x49, 0x7d, 0xce, 0x9c, 0xe0, 0xa4, 0x21, 0x27, 0x0d, 0x39, 0xf3, 0x82, 0x93, 0x06, 0x9c, 0xcb,
	0x50, 0xf6, 0x65, 0xea, 0x96, 0xe7, 0xb8, 0x2e, 0xb6, 0x2a, 0x43, 0x9c, 0xa8, 0x24, 0x65, 0xef,
	0x88, 0x5d, 0x56, 0x52, 0x43, 0x15, 0x02, 0xda, 0x02, 0xa7, 0x2d, 0x07, 0xaa, 0xf8, 0xd4, 0xcb,
	0x50, 0xa6, 0x49, 0xdc, 0x61, 0x81, 0x4b, 0x53, 0xb8, 0x34, 0x8d, 0x3b, 0x22, 0x70, 0x69, 0x06,
	0x6e, 0xaa, 0x59, 0x8c, 0x5e, 0xba, 0x59, 0xc0, 0x15, 0x9a, 0x45, 0x31, 0xbb, 0x59, 0xa0, 0x0d,
	0x98, 0x66, 0xd4, 0x6c, 0xe6, 0x3f, 0xc5, 0xba, 0xe9, 0xd8, 0x36, 0xe6, 0xa3, 0x3d, 0xa9, 0x8c,
	0x71, 0x8e, 0x49, 0xbb, 0x7b, 0xb2, 0xc9, 0x0f, 0xb7, 0xc3, 0x33, 0xf5, 0x07, 0x25, 0x91, 0x32,
	0x9f, 0xa3, 0x57, 0xac, 0xc4, 0x7a, 0x45, 0xbf, 0x5a, 0x25, 0xfa, 0xc5, 0x5a, 0xa2, 0x5f, 0x7c,
	0x34, 0xe9, 0xd1, 0xef, 0xe3, 0x3d, 0x63, 0x26, 0x9b, 0x21, 0xe8, 0x1b, 0x7f, 0x85, 0xb9, 0x7e,
	0x06, 0xb3, 0xdc, 0x79, 0x98, 0x2a, 0x13, 0x0b, 0x7d, 0x92, 0x27, 0x59, 0x29, 0x56, 0xfe, 0x09,
	0xa3, 0xe1, 0x07, 0xd5, 0x04, 0x8c, 0xd7, 0x36, 0x9b, 0x7a, 0xf3, 0x75, 0x7d, 0x57, 0xaf, 0x1d,
	0xd4, 0x76, 0xcb, 0x03, 0x68, 0x0e, 0x66, 0x82, 0xad, 0x46, 0x73, 0xb3, 0xf9, 0x74, 0x5b, 0xdf,
	0xdc, 0xd9, 0xd1, 0x76, 0x1b, 0x8d, 0xb2, 0x82, 0xe6, 0xa1, 0x12, 0x1c, 0xee, 0xbc, 0xae, 0x6d,
	0xee, 0x47, 0x4e, 0x07, 0xd1, 0xaf, 0x60, 0xa1, 0xdf, 0xa9, 0x5e, 0x3f, 0xd0, 0x9a, 0xe5, 0xdc,
	0xfa, 0xdb, 0x02, 0xe4, 0x6a, 0x06, 0x45, 0x5b, 0xc1, 0x6b, 0xdf, 0xb6, 0x87, 0x0d, 0x8a, 0xd1,
	0x74, 0xfc, 0x4d, 0xcc, 0xaf, 0x12, 0xd5, 0x99, 0xac, 0xb7, 0xb2, 0x7d, 0xd2, 0x52, 0x07, 0x22,
	0x18, 0x2f, 0x5c, 0xeb, 0x13, 0x31, 0x6a, 0x01, 0x86, 0x98, 0x26, 0xd1, 0x7c, 0xdf, 0x67, 0x2d,
	0x86, 0xb4, 0xd0, 0xff, 0x05, 0x49, 0xe0, 0xed, 0x02, 0x84, 0x8f, 0x0c, 0x68, 0x36, 0xfb, 0xad,
	0x86, 0x21, 0x55, 0xfb, 0x3c, 0x48, 0x08, 0x98, 0x27, 0x91, 0x8f, 0x30, 0xe9, 0xa0, 0x4a, 0xf2,
	0xab, 0x24, 0x80, 0x9a, 0xcd, 0xfe, 0x5e, 0x49, 0x23, 0x49, 0x37, 0x7d, 0x22, 0x52, 0x33, 0x82,
	0x24, 0x9d, 0xb5, 0x78, 0xc1, 0x97, 0x04, 0xc3, 0x5b, 0xba, 0x68, 0x60, 0x17, 0xa8, 0xcf, 0xe5,
	0x6b, 0x95, 0x1c, 0x78, 0xd0, 0x5c, 0xbf, 0x19, 0x98, 0xe1, 0xcd, 0xf7, 0x1d, 0x90, 0x7c, 0x15,
	0xe3, 0xf3, 0x83, 0x74, 0xdd, 0x7c, 0x56, 0x0b, 0x4d, 0xdf, 0x69, 0x66, 0x47, 0x56, 0x07, 0xd0,
	0x2b, 0x28, 0x27, 0xf3, 0x0a, 0x2d, 0x5d, 0xd4, 0xab, 0x18, 0xea, 0xad, 0x0b, 0xf3, 0x91, 0x03,
	0x6f, 0x55, 0xbf, 0x7c, 0xbf, 0xa8, 0x7c, 0xf5, 0x7e, 0x51, 0xf9, 0xf6, 0xfd, 0xa2, 0xf2, 0xff,
	0xef, 0x16, 0x07, 0xfe, 0x36, 0x72, 0x64, 0x74, 0xf8, 0x7f, 0x11, 0x0e, 0x0b, 0xfc, 0xcf, 0xdd,
	0x9f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x65, 0x2b, 0x10, 0xa7, 0x75, 0x18, 0x00, 0x00,
}
