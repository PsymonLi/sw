// Code generated by MockGen. DO NOT EDIT.
// Source: debug.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockisRegisterRequest_IdNameOrAddr is a mock of isRegisterRequest_IdNameOrAddr interface
type MockisRegisterRequest_IdNameOrAddr struct {
	ctrl     *gomock.Controller
	recorder *MockisRegisterRequest_IdNameOrAddrMockRecorder
}

// MockisRegisterRequest_IdNameOrAddrMockRecorder is the mock recorder for MockisRegisterRequest_IdNameOrAddr
type MockisRegisterRequest_IdNameOrAddrMockRecorder struct {
	mock *MockisRegisterRequest_IdNameOrAddr
}

// NewMockisRegisterRequest_IdNameOrAddr creates a new mock instance
func NewMockisRegisterRequest_IdNameOrAddr(ctrl *gomock.Controller) *MockisRegisterRequest_IdNameOrAddr {
	mock := &MockisRegisterRequest_IdNameOrAddr{ctrl: ctrl}
	mock.recorder = &MockisRegisterRequest_IdNameOrAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRegisterRequest_IdNameOrAddr) EXPECT() *MockisRegisterRequest_IdNameOrAddrMockRecorder {
	return m.recorder
}

// isRegisterRequest_IdNameOrAddr mocks base method
func (m *MockisRegisterRequest_IdNameOrAddr) isRegisterRequest_IdNameOrAddr() {
	m.ctrl.Call(m, "isRegisterRequest_IdNameOrAddr")
}

// isRegisterRequest_IdNameOrAddr indicates an expected call of isRegisterRequest_IdNameOrAddr
func (mr *MockisRegisterRequest_IdNameOrAddrMockRecorder) isRegisterRequest_IdNameOrAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRegisterRequest_IdNameOrAddr", reflect.TypeOf((*MockisRegisterRequest_IdNameOrAddr)(nil).isRegisterRequest_IdNameOrAddr))
}

// MarshalTo mocks base method
func (m *MockisRegisterRequest_IdNameOrAddr) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisRegisterRequest_IdNameOrAddrMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRegisterRequest_IdNameOrAddr)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisRegisterRequest_IdNameOrAddr) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisRegisterRequest_IdNameOrAddrMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRegisterRequest_IdNameOrAddr)(nil).Size))
}

// MockisMemoryRequest_IdOrName is a mock of isMemoryRequest_IdOrName interface
type MockisMemoryRequest_IdOrName struct {
	ctrl     *gomock.Controller
	recorder *MockisMemoryRequest_IdOrNameMockRecorder
}

// MockisMemoryRequest_IdOrNameMockRecorder is the mock recorder for MockisMemoryRequest_IdOrName
type MockisMemoryRequest_IdOrNameMockRecorder struct {
	mock *MockisMemoryRequest_IdOrName
}

// NewMockisMemoryRequest_IdOrName creates a new mock instance
func NewMockisMemoryRequest_IdOrName(ctrl *gomock.Controller) *MockisMemoryRequest_IdOrName {
	mock := &MockisMemoryRequest_IdOrName{ctrl: ctrl}
	mock.recorder = &MockisMemoryRequest_IdOrNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisMemoryRequest_IdOrName) EXPECT() *MockisMemoryRequest_IdOrNameMockRecorder {
	return m.recorder
}

// isMemoryRequest_IdOrName mocks base method
func (m *MockisMemoryRequest_IdOrName) isMemoryRequest_IdOrName() {
	m.ctrl.Call(m, "isMemoryRequest_IdOrName")
}

// isMemoryRequest_IdOrName indicates an expected call of isMemoryRequest_IdOrName
func (mr *MockisMemoryRequest_IdOrNameMockRecorder) isMemoryRequest_IdOrName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isMemoryRequest_IdOrName", reflect.TypeOf((*MockisMemoryRequest_IdOrName)(nil).isMemoryRequest_IdOrName))
}

// MarshalTo mocks base method
func (m *MockisMemoryRequest_IdOrName) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisMemoryRequest_IdOrNameMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisMemoryRequest_IdOrName)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisMemoryRequest_IdOrName) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisMemoryRequest_IdOrNameMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisMemoryRequest_IdOrName)(nil).Size))
}

// MockisHbmCacheRequest_CacheRegions is a mock of isHbmCacheRequest_CacheRegions interface
type MockisHbmCacheRequest_CacheRegions struct {
	ctrl     *gomock.Controller
	recorder *MockisHbmCacheRequest_CacheRegionsMockRecorder
}

// MockisHbmCacheRequest_CacheRegionsMockRecorder is the mock recorder for MockisHbmCacheRequest_CacheRegions
type MockisHbmCacheRequest_CacheRegionsMockRecorder struct {
	mock *MockisHbmCacheRequest_CacheRegions
}

// NewMockisHbmCacheRequest_CacheRegions creates a new mock instance
func NewMockisHbmCacheRequest_CacheRegions(ctrl *gomock.Controller) *MockisHbmCacheRequest_CacheRegions {
	mock := &MockisHbmCacheRequest_CacheRegions{ctrl: ctrl}
	mock.recorder = &MockisHbmCacheRequest_CacheRegionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisHbmCacheRequest_CacheRegions) EXPECT() *MockisHbmCacheRequest_CacheRegionsMockRecorder {
	return m.recorder
}

// isHbmCacheRequest_CacheRegions mocks base method
func (m *MockisHbmCacheRequest_CacheRegions) isHbmCacheRequest_CacheRegions() {
	m.ctrl.Call(m, "isHbmCacheRequest_CacheRegions")
}

// isHbmCacheRequest_CacheRegions indicates an expected call of isHbmCacheRequest_CacheRegions
func (mr *MockisHbmCacheRequest_CacheRegionsMockRecorder) isHbmCacheRequest_CacheRegions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isHbmCacheRequest_CacheRegions", reflect.TypeOf((*MockisHbmCacheRequest_CacheRegions)(nil).isHbmCacheRequest_CacheRegions))
}

// MarshalTo mocks base method
func (m *MockisHbmCacheRequest_CacheRegions) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisHbmCacheRequest_CacheRegionsMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisHbmCacheRequest_CacheRegions)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisHbmCacheRequest_CacheRegions) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisHbmCacheRequest_CacheRegionsMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisHbmCacheRequest_CacheRegions)(nil).Size))
}

// MockisSchedulerActiveQRequest_NumOrRanges is a mock of isSchedulerActiveQRequest_NumOrRanges interface
type MockisSchedulerActiveQRequest_NumOrRanges struct {
	ctrl     *gomock.Controller
	recorder *MockisSchedulerActiveQRequest_NumOrRangesMockRecorder
}

// MockisSchedulerActiveQRequest_NumOrRangesMockRecorder is the mock recorder for MockisSchedulerActiveQRequest_NumOrRanges
type MockisSchedulerActiveQRequest_NumOrRangesMockRecorder struct {
	mock *MockisSchedulerActiveQRequest_NumOrRanges
}

// NewMockisSchedulerActiveQRequest_NumOrRanges creates a new mock instance
func NewMockisSchedulerActiveQRequest_NumOrRanges(ctrl *gomock.Controller) *MockisSchedulerActiveQRequest_NumOrRanges {
	mock := &MockisSchedulerActiveQRequest_NumOrRanges{ctrl: ctrl}
	mock.recorder = &MockisSchedulerActiveQRequest_NumOrRangesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisSchedulerActiveQRequest_NumOrRanges) EXPECT() *MockisSchedulerActiveQRequest_NumOrRangesMockRecorder {
	return m.recorder
}

// isSchedulerActiveQRequest_NumOrRanges mocks base method
func (m *MockisSchedulerActiveQRequest_NumOrRanges) isSchedulerActiveQRequest_NumOrRanges() {
	m.ctrl.Call(m, "isSchedulerActiveQRequest_NumOrRanges")
}

// isSchedulerActiveQRequest_NumOrRanges indicates an expected call of isSchedulerActiveQRequest_NumOrRanges
func (mr *MockisSchedulerActiveQRequest_NumOrRangesMockRecorder) isSchedulerActiveQRequest_NumOrRanges() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isSchedulerActiveQRequest_NumOrRanges", reflect.TypeOf((*MockisSchedulerActiveQRequest_NumOrRanges)(nil).isSchedulerActiveQRequest_NumOrRanges))
}

// MarshalTo mocks base method
func (m *MockisSchedulerActiveQRequest_NumOrRanges) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisSchedulerActiveQRequest_NumOrRangesMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisSchedulerActiveQRequest_NumOrRanges)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisSchedulerActiveQRequest_NumOrRanges) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisSchedulerActiveQRequest_NumOrRangesMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisSchedulerActiveQRequest_NumOrRanges)(nil).Size))
}

// MockDebugClient is a mock of DebugClient interface
type MockDebugClient struct {
	ctrl     *gomock.Controller
	recorder *MockDebugClientMockRecorder
}

// MockDebugClientMockRecorder is the mock recorder for MockDebugClient
type MockDebugClientMockRecorder struct {
	mock *MockDebugClient
}

// NewMockDebugClient creates a new mock instance
func NewMockDebugClient(ctrl *gomock.Controller) *MockDebugClient {
	mock := &MockDebugClient{ctrl: ctrl}
	mock.recorder = &MockDebugClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebugClient) EXPECT() *MockDebugClientMockRecorder {
	return m.recorder
}

// RegisterGet mocks base method
func (m *MockDebugClient) RegisterGet(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterGet", varargs...)
	ret0, _ := ret[0].(*RegisterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterGet indicates an expected call of RegisterGet
func (mr *MockDebugClientMockRecorder) RegisterGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGet", reflect.TypeOf((*MockDebugClient)(nil).RegisterGet), varargs...)
}

// RegisterUpdate mocks base method
func (m *MockDebugClient) RegisterUpdate(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterUpdate", varargs...)
	ret0, _ := ret[0].(*RegisterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUpdate indicates an expected call of RegisterUpdate
func (mr *MockDebugClientMockRecorder) RegisterUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUpdate", reflect.TypeOf((*MockDebugClient)(nil).RegisterUpdate), varargs...)
}

// MemoryGet mocks base method
func (m *MockDebugClient) MemoryGet(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryGet", varargs...)
	ret0, _ := ret[0].(*MemoryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryGet indicates an expected call of MemoryGet
func (mr *MockDebugClientMockRecorder) MemoryGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryGet", reflect.TypeOf((*MockDebugClient)(nil).MemoryGet), varargs...)
}

// MemoryUpdate mocks base method
func (m *MockDebugClient) MemoryUpdate(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryUpdate", varargs...)
	ret0, _ := ret[0].(*MemoryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryUpdate indicates an expected call of MemoryUpdate
func (mr *MockDebugClientMockRecorder) MemoryUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryUpdate", reflect.TypeOf((*MockDebugClient)(nil).MemoryUpdate), varargs...)
}

// MemoryRawGet mocks base method
func (m *MockDebugClient) MemoryRawGet(ctx context.Context, in *MemoryRawRequestMsg, opts ...grpc.CallOption) (*MemoryRawResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryRawGet", varargs...)
	ret0, _ := ret[0].(*MemoryRawResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRawGet indicates an expected call of MemoryRawGet
func (mr *MockDebugClientMockRecorder) MemoryRawGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRawGet", reflect.TypeOf((*MockDebugClient)(nil).MemoryRawGet), varargs...)
}

// MemoryRawUpdate mocks base method
func (m *MockDebugClient) MemoryRawUpdate(ctx context.Context, in *MemoryRawUpdateRequestMsg, opts ...grpc.CallOption) (*MemoryRawUpdateResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryRawUpdate", varargs...)
	ret0, _ := ret[0].(*MemoryRawUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRawUpdate indicates an expected call of MemoryRawUpdate
func (mr *MockDebugClientMockRecorder) MemoryRawUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRawUpdate", reflect.TypeOf((*MockDebugClient)(nil).MemoryRawUpdate), varargs...)
}

// MpuTraceUpdate mocks base method
func (m *MockDebugClient) MpuTraceUpdate(ctx context.Context, in *MpuTraceRequestMsg, opts ...grpc.CallOption) (*MpuTraceResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MpuTraceUpdate", varargs...)
	ret0, _ := ret[0].(*MpuTraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MpuTraceUpdate indicates an expected call of MpuTraceUpdate
func (mr *MockDebugClientMockRecorder) MpuTraceUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MpuTraceUpdate", reflect.TypeOf((*MockDebugClient)(nil).MpuTraceUpdate), varargs...)
}

// MemTrackGet mocks base method
func (m *MockDebugClient) MemTrackGet(ctx context.Context, in *MemTrackGetRequestMsg, opts ...grpc.CallOption) (*MemTrackGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemTrackGet", varargs...)
	ret0, _ := ret[0].(*MemTrackGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemTrackGet indicates an expected call of MemTrackGet
func (mr *MockDebugClientMockRecorder) MemTrackGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemTrackGet", reflect.TypeOf((*MockDebugClient)(nil).MemTrackGet), varargs...)
}

// SlabGet mocks base method
func (m *MockDebugClient) SlabGet(ctx context.Context, in *SlabGetRequestMsg, opts ...grpc.CallOption) (*SlabGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SlabGet", varargs...)
	ret0, _ := ret[0].(*SlabGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SlabGet indicates an expected call of SlabGet
func (mr *MockDebugClientMockRecorder) SlabGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlabGet", reflect.TypeOf((*MockDebugClient)(nil).SlabGet), varargs...)
}

// HashTableGet mocks base method
func (m *MockDebugClient) HashTableGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HashTableGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HashTableGet", varargs...)
	ret0, _ := ret[0].(*HashTableGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashTableGet indicates an expected call of HashTableGet
func (mr *MockDebugClientMockRecorder) HashTableGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashTableGet", reflect.TypeOf((*MockDebugClient)(nil).HashTableGet), varargs...)
}

// TraceUpdate mocks base method
func (m *MockDebugClient) TraceUpdate(ctx context.Context, in *TraceRequestMsg, opts ...grpc.CallOption) (*TraceResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TraceUpdate", varargs...)
	ret0, _ := ret[0].(*TraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceUpdate indicates an expected call of TraceUpdate
func (mr *MockDebugClientMockRecorder) TraceUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceUpdate", reflect.TypeOf((*MockDebugClient)(nil).TraceUpdate), varargs...)
}

// TraceGet mocks base method
func (m *MockDebugClient) TraceGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TraceResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TraceGet", varargs...)
	ret0, _ := ret[0].(*TraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceGet indicates an expected call of TraceGet
func (mr *MockDebugClientMockRecorder) TraceGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceGet", reflect.TypeOf((*MockDebugClient)(nil).TraceGet), varargs...)
}

// ThreadGet mocks base method
func (m *MockDebugClient) ThreadGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ThreadResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadGet", varargs...)
	ret0, _ := ret[0].(*ThreadResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadGet indicates an expected call of ThreadGet
func (mr *MockDebugClientMockRecorder) ThreadGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadGet", reflect.TypeOf((*MockDebugClient)(nil).ThreadGet), varargs...)
}

// ClockGet mocks base method
func (m *MockDebugClient) ClockGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClockResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClockGet", varargs...)
	ret0, _ := ret[0].(*ClockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClockGet indicates an expected call of ClockGet
func (mr *MockDebugClientMockRecorder) ClockGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClockGet", reflect.TypeOf((*MockDebugClient)(nil).ClockGet), varargs...)
}

// FlushLogs mocks base method
func (m *MockDebugClient) FlushLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FlushLogsResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlushLogs", varargs...)
	ret0, _ := ret[0].(*FlushLogsResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushLogs indicates an expected call of FlushLogs
func (mr *MockDebugClientMockRecorder) FlushLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushLogs", reflect.TypeOf((*MockDebugClient)(nil).FlushLogs), varargs...)
}

// GenericOpn mocks base method
func (m *MockDebugClient) GenericOpn(ctx context.Context, in *GenericOpnRequestMsg, opts ...grpc.CallOption) (*GenericOpnResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenericOpn", varargs...)
	ret0, _ := ret[0].(*GenericOpnResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenericOpn indicates an expected call of GenericOpn
func (mr *MockDebugClientMockRecorder) GenericOpn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericOpn", reflect.TypeOf((*MockDebugClient)(nil).GenericOpn), varargs...)
}

// FteSpanGet mocks base method
func (m *MockDebugClient) FteSpanGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FteSpanResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FteSpanGet", varargs...)
	ret0, _ := ret[0].(*FteSpanResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FteSpanGet indicates an expected call of FteSpanGet
func (mr *MockDebugClientMockRecorder) FteSpanGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FteSpanGet", reflect.TypeOf((*MockDebugClient)(nil).FteSpanGet), varargs...)
}

// FteSpanUpdate mocks base method
func (m *MockDebugClient) FteSpanUpdate(ctx context.Context, in *FteSpanRequestMsg, opts ...grpc.CallOption) (*FteSpanResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FteSpanUpdate", varargs...)
	ret0, _ := ret[0].(*FteSpanResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FteSpanUpdate indicates an expected call of FteSpanUpdate
func (mr *MockDebugClientMockRecorder) FteSpanUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FteSpanUpdate", reflect.TypeOf((*MockDebugClient)(nil).FteSpanUpdate), varargs...)
}

// SnakeTestCreate mocks base method
func (m *MockDebugClient) SnakeTestCreate(ctx context.Context, in *SnakeTestRequestMsg, opts ...grpc.CallOption) (*SnakeTestResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SnakeTestCreate", varargs...)
	ret0, _ := ret[0].(*SnakeTestResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnakeTestCreate indicates an expected call of SnakeTestCreate
func (mr *MockDebugClientMockRecorder) SnakeTestCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnakeTestCreate", reflect.TypeOf((*MockDebugClient)(nil).SnakeTestCreate), varargs...)
}

// SnakeTestDelete mocks base method
func (m *MockDebugClient) SnakeTestDelete(ctx context.Context, in *SnakeTestDeleteRequestMsg, opts ...grpc.CallOption) (*SnakeTestDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SnakeTestDelete", varargs...)
	ret0, _ := ret[0].(*SnakeTestDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnakeTestDelete indicates an expected call of SnakeTestDelete
func (mr *MockDebugClientMockRecorder) SnakeTestDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnakeTestDelete", reflect.TypeOf((*MockDebugClient)(nil).SnakeTestDelete), varargs...)
}

// SnakeTestGet mocks base method
func (m *MockDebugClient) SnakeTestGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SnakeTestResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SnakeTestGet", varargs...)
	ret0, _ := ret[0].(*SnakeTestResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnakeTestGet indicates an expected call of SnakeTestGet
func (mr *MockDebugClientMockRecorder) SnakeTestGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnakeTestGet", reflect.TypeOf((*MockDebugClient)(nil).SnakeTestGet), varargs...)
}

// HbmBwGet mocks base method
func (m *MockDebugClient) HbmBwGet(ctx context.Context, in *HbmBwGetRequestMsg, opts ...grpc.CallOption) (*HbmBwGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HbmBwGet", varargs...)
	ret0, _ := ret[0].(*HbmBwGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HbmBwGet indicates an expected call of HbmBwGet
func (mr *MockDebugClientMockRecorder) HbmBwGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HbmBwGet", reflect.TypeOf((*MockDebugClient)(nil).HbmBwGet), varargs...)
}

// LlcClear mocks base method
func (m *MockDebugClient) LlcClear(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LlcClear", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LlcClear indicates an expected call of LlcClear
func (mr *MockDebugClientMockRecorder) LlcClear(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LlcClear", reflect.TypeOf((*MockDebugClient)(nil).LlcClear), varargs...)
}

// LlcSetup mocks base method
func (m *MockDebugClient) LlcSetup(ctx context.Context, in *LlcSetupRequestMsg, opts ...grpc.CallOption) (*LlcSetupResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LlcSetup", varargs...)
	ret0, _ := ret[0].(*LlcSetupResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LlcSetup indicates an expected call of LlcSetup
func (mr *MockDebugClientMockRecorder) LlcSetup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LlcSetup", reflect.TypeOf((*MockDebugClient)(nil).LlcSetup), varargs...)
}

// LlcGet mocks base method
func (m *MockDebugClient) LlcGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LlcGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LlcGet", varargs...)
	ret0, _ := ret[0].(*LlcGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LlcGet indicates an expected call of LlcGet
func (mr *MockDebugClientMockRecorder) LlcGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LlcGet", reflect.TypeOf((*MockDebugClient)(nil).LlcGet), varargs...)
}

// HbmCacheSetup mocks base method
func (m *MockDebugClient) HbmCacheSetup(ctx context.Context, in *HbmCacheRequestMsg, opts ...grpc.CallOption) (*HbmCacheResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HbmCacheSetup", varargs...)
	ret0, _ := ret[0].(*HbmCacheResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HbmCacheSetup indicates an expected call of HbmCacheSetup
func (mr *MockDebugClientMockRecorder) HbmCacheSetup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HbmCacheSetup", reflect.TypeOf((*MockDebugClient)(nil).HbmCacheSetup), varargs...)
}

// SchedulerStatsGet mocks base method
func (m *MockDebugClient) SchedulerStatsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SchedulerStatsResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SchedulerStatsGet", varargs...)
	ret0, _ := ret[0].(*SchedulerStatsResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedulerStatsGet indicates an expected call of SchedulerStatsGet
func (mr *MockDebugClientMockRecorder) SchedulerStatsGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulerStatsGet", reflect.TypeOf((*MockDebugClient)(nil).SchedulerStatsGet), varargs...)
}

// SchedulerActiveQGet mocks base method
func (m *MockDebugClient) SchedulerActiveQGet(ctx context.Context, in *SchedulerActiveQRequestMsg, opts ...grpc.CallOption) (*SchedulerActiveQResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SchedulerActiveQGet", varargs...)
	ret0, _ := ret[0].(*SchedulerActiveQResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedulerActiveQGet indicates an expected call of SchedulerActiveQGet
func (mr *MockDebugClientMockRecorder) SchedulerActiveQGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulerActiveQGet", reflect.TypeOf((*MockDebugClient)(nil).SchedulerActiveQGet), varargs...)
}

// PacketBufferUpdate mocks base method
func (m *MockDebugClient) PacketBufferUpdate(ctx context.Context, in *PacketBufferRequestMsg, opts ...grpc.CallOption) (*PacketBufferResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PacketBufferUpdate", varargs...)
	ret0, _ := ret[0].(*PacketBufferResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PacketBufferUpdate indicates an expected call of PacketBufferUpdate
func (mr *MockDebugClientMockRecorder) PacketBufferUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PacketBufferUpdate", reflect.TypeOf((*MockDebugClient)(nil).PacketBufferUpdate), varargs...)
}

// XcvrValidCheckEnable mocks base method
func (m *MockDebugClient) XcvrValidCheckEnable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XcvrValidCheckEnable", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XcvrValidCheckEnable indicates an expected call of XcvrValidCheckEnable
func (mr *MockDebugClientMockRecorder) XcvrValidCheckEnable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XcvrValidCheckEnable", reflect.TypeOf((*MockDebugClient)(nil).XcvrValidCheckEnable), varargs...)
}

// XcvrValidCheckDisable mocks base method
func (m *MockDebugClient) XcvrValidCheckDisable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XcvrValidCheckDisable", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XcvrValidCheckDisable indicates an expected call of XcvrValidCheckDisable
func (mr *MockDebugClientMockRecorder) XcvrValidCheckDisable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XcvrValidCheckDisable", reflect.TypeOf((*MockDebugClient)(nil).XcvrValidCheckDisable), varargs...)
}

// MemoryTrim mocks base method
func (m *MockDebugClient) MemoryTrim(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryTrim", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryTrim indicates an expected call of MemoryTrim
func (mr *MockDebugClientMockRecorder) MemoryTrim(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryTrim", reflect.TypeOf((*MockDebugClient)(nil).MemoryTrim), varargs...)
}

// QueueCreditsGet mocks base method
func (m *MockDebugClient) QueueCreditsGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueueCreditsGetResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueueCreditsGet", varargs...)
	ret0, _ := ret[0].(*QueueCreditsGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueCreditsGet indicates an expected call of QueueCreditsGet
func (mr *MockDebugClientMockRecorder) QueueCreditsGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCreditsGet", reflect.TypeOf((*MockDebugClient)(nil).QueueCreditsGet), varargs...)
}

// SessionCtrlUpdate mocks base method
func (m *MockDebugClient) SessionCtrlUpdate(ctx context.Context, in *SessionCtrlRequestMsg, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SessionCtrlUpdate", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionCtrlUpdate indicates an expected call of SessionCtrlUpdate
func (mr *MockDebugClientMockRecorder) SessionCtrlUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionCtrlUpdate", reflect.TypeOf((*MockDebugClient)(nil).SessionCtrlUpdate), varargs...)
}

// OifListGet mocks base method
func (m *MockDebugClient) OifListGet(ctx context.Context, in *OifListGetRequestMsg, opts ...grpc.CallOption) (Debug_OifListGetClient, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OifListGet", varargs...)
	ret0, _ := ret[0].(Debug_OifListGetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OifListGet indicates an expected call of OifListGet
func (mr *MockDebugClientMockRecorder) OifListGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OifListGet", reflect.TypeOf((*MockDebugClient)(nil).OifListGet), varargs...)
}

// AgingLogs mocks base method
func (m *MockDebugClient) AgingLogs(ctx context.Context, in *AgingLogsRequestMsg, opts ...grpc.CallOption) (*Empty, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AgingLogs", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgingLogs indicates an expected call of AgingLogs
func (mr *MockDebugClientMockRecorder) AgingLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgingLogs", reflect.TypeOf((*MockDebugClient)(nil).AgingLogs), varargs...)
}

// MockDebug_OifListGetClient is a mock of Debug_OifListGetClient interface
type MockDebug_OifListGetClient struct {
	ctrl     *gomock.Controller
	recorder *MockDebug_OifListGetClientMockRecorder
}

// MockDebug_OifListGetClientMockRecorder is the mock recorder for MockDebug_OifListGetClient
type MockDebug_OifListGetClientMockRecorder struct {
	mock *MockDebug_OifListGetClient
}

// NewMockDebug_OifListGetClient creates a new mock instance
func NewMockDebug_OifListGetClient(ctrl *gomock.Controller) *MockDebug_OifListGetClient {
	mock := &MockDebug_OifListGetClient{ctrl: ctrl}
	mock.recorder = &MockDebug_OifListGetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebug_OifListGetClient) EXPECT() *MockDebug_OifListGetClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockDebug_OifListGetClient) Recv() (*OifListGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*OifListGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockDebug_OifListGetClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDebug_OifListGetClient)(nil).Recv))
}

// Header mocks base method
func (m *MockDebug_OifListGetClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockDebug_OifListGetClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDebug_OifListGetClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockDebug_OifListGetClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockDebug_OifListGetClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDebug_OifListGetClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockDebug_OifListGetClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockDebug_OifListGetClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDebug_OifListGetClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockDebug_OifListGetClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDebug_OifListGetClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDebug_OifListGetClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockDebug_OifListGetClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDebug_OifListGetClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDebug_OifListGetClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockDebug_OifListGetClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockDebug_OifListGetClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDebug_OifListGetClient)(nil).RecvMsg), m)
}

// MockDebugServer is a mock of DebugServer interface
type MockDebugServer struct {
	ctrl     *gomock.Controller
	recorder *MockDebugServerMockRecorder
}

// MockDebugServerMockRecorder is the mock recorder for MockDebugServer
type MockDebugServerMockRecorder struct {
	mock *MockDebugServer
}

// NewMockDebugServer creates a new mock instance
func NewMockDebugServer(ctrl *gomock.Controller) *MockDebugServer {
	mock := &MockDebugServer{ctrl: ctrl}
	mock.recorder = &MockDebugServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebugServer) EXPECT() *MockDebugServerMockRecorder {
	return m.recorder
}

// RegisterGet mocks base method
func (m *MockDebugServer) RegisterGet(arg0 context.Context, arg1 *RegisterRequestMsg) (*RegisterResponseMsg, error) {
	ret := m.ctrl.Call(m, "RegisterGet", arg0, arg1)
	ret0, _ := ret[0].(*RegisterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterGet indicates an expected call of RegisterGet
func (mr *MockDebugServerMockRecorder) RegisterGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGet", reflect.TypeOf((*MockDebugServer)(nil).RegisterGet), arg0, arg1)
}

// RegisterUpdate mocks base method
func (m *MockDebugServer) RegisterUpdate(arg0 context.Context, arg1 *RegisterRequestMsg) (*RegisterResponseMsg, error) {
	ret := m.ctrl.Call(m, "RegisterUpdate", arg0, arg1)
	ret0, _ := ret[0].(*RegisterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUpdate indicates an expected call of RegisterUpdate
func (mr *MockDebugServerMockRecorder) RegisterUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUpdate", reflect.TypeOf((*MockDebugServer)(nil).RegisterUpdate), arg0, arg1)
}

// MemoryGet mocks base method
func (m *MockDebugServer) MemoryGet(arg0 context.Context, arg1 *MemoryRequestMsg) (*MemoryResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemoryGet", arg0, arg1)
	ret0, _ := ret[0].(*MemoryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryGet indicates an expected call of MemoryGet
func (mr *MockDebugServerMockRecorder) MemoryGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryGet", reflect.TypeOf((*MockDebugServer)(nil).MemoryGet), arg0, arg1)
}

// MemoryUpdate mocks base method
func (m *MockDebugServer) MemoryUpdate(arg0 context.Context, arg1 *MemoryRequestMsg) (*MemoryResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemoryUpdate", arg0, arg1)
	ret0, _ := ret[0].(*MemoryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryUpdate indicates an expected call of MemoryUpdate
func (mr *MockDebugServerMockRecorder) MemoryUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryUpdate", reflect.TypeOf((*MockDebugServer)(nil).MemoryUpdate), arg0, arg1)
}

// MemoryRawGet mocks base method
func (m *MockDebugServer) MemoryRawGet(arg0 context.Context, arg1 *MemoryRawRequestMsg) (*MemoryRawResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemoryRawGet", arg0, arg1)
	ret0, _ := ret[0].(*MemoryRawResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRawGet indicates an expected call of MemoryRawGet
func (mr *MockDebugServerMockRecorder) MemoryRawGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRawGet", reflect.TypeOf((*MockDebugServer)(nil).MemoryRawGet), arg0, arg1)
}

// MemoryRawUpdate mocks base method
func (m *MockDebugServer) MemoryRawUpdate(arg0 context.Context, arg1 *MemoryRawUpdateRequestMsg) (*MemoryRawUpdateResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemoryRawUpdate", arg0, arg1)
	ret0, _ := ret[0].(*MemoryRawUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRawUpdate indicates an expected call of MemoryRawUpdate
func (mr *MockDebugServerMockRecorder) MemoryRawUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRawUpdate", reflect.TypeOf((*MockDebugServer)(nil).MemoryRawUpdate), arg0, arg1)
}

// MpuTraceUpdate mocks base method
func (m *MockDebugServer) MpuTraceUpdate(arg0 context.Context, arg1 *MpuTraceRequestMsg) (*MpuTraceResponseMsg, error) {
	ret := m.ctrl.Call(m, "MpuTraceUpdate", arg0, arg1)
	ret0, _ := ret[0].(*MpuTraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MpuTraceUpdate indicates an expected call of MpuTraceUpdate
func (mr *MockDebugServerMockRecorder) MpuTraceUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MpuTraceUpdate", reflect.TypeOf((*MockDebugServer)(nil).MpuTraceUpdate), arg0, arg1)
}

// MemTrackGet mocks base method
func (m *MockDebugServer) MemTrackGet(arg0 context.Context, arg1 *MemTrackGetRequestMsg) (*MemTrackGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemTrackGet", arg0, arg1)
	ret0, _ := ret[0].(*MemTrackGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemTrackGet indicates an expected call of MemTrackGet
func (mr *MockDebugServerMockRecorder) MemTrackGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemTrackGet", reflect.TypeOf((*MockDebugServer)(nil).MemTrackGet), arg0, arg1)
}

// SlabGet mocks base method
func (m *MockDebugServer) SlabGet(arg0 context.Context, arg1 *SlabGetRequestMsg) (*SlabGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "SlabGet", arg0, arg1)
	ret0, _ := ret[0].(*SlabGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SlabGet indicates an expected call of SlabGet
func (mr *MockDebugServerMockRecorder) SlabGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlabGet", reflect.TypeOf((*MockDebugServer)(nil).SlabGet), arg0, arg1)
}

// HashTableGet mocks base method
func (m *MockDebugServer) HashTableGet(arg0 context.Context, arg1 *Empty) (*HashTableGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "HashTableGet", arg0, arg1)
	ret0, _ := ret[0].(*HashTableGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashTableGet indicates an expected call of HashTableGet
func (mr *MockDebugServerMockRecorder) HashTableGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashTableGet", reflect.TypeOf((*MockDebugServer)(nil).HashTableGet), arg0, arg1)
}

// TraceUpdate mocks base method
func (m *MockDebugServer) TraceUpdate(arg0 context.Context, arg1 *TraceRequestMsg) (*TraceResponseMsg, error) {
	ret := m.ctrl.Call(m, "TraceUpdate", arg0, arg1)
	ret0, _ := ret[0].(*TraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceUpdate indicates an expected call of TraceUpdate
func (mr *MockDebugServerMockRecorder) TraceUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceUpdate", reflect.TypeOf((*MockDebugServer)(nil).TraceUpdate), arg0, arg1)
}

// TraceGet mocks base method
func (m *MockDebugServer) TraceGet(arg0 context.Context, arg1 *Empty) (*TraceResponseMsg, error) {
	ret := m.ctrl.Call(m, "TraceGet", arg0, arg1)
	ret0, _ := ret[0].(*TraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceGet indicates an expected call of TraceGet
func (mr *MockDebugServerMockRecorder) TraceGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceGet", reflect.TypeOf((*MockDebugServer)(nil).TraceGet), arg0, arg1)
}

// ThreadGet mocks base method
func (m *MockDebugServer) ThreadGet(arg0 context.Context, arg1 *Empty) (*ThreadResponseMsg, error) {
	ret := m.ctrl.Call(m, "ThreadGet", arg0, arg1)
	ret0, _ := ret[0].(*ThreadResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadGet indicates an expected call of ThreadGet
func (mr *MockDebugServerMockRecorder) ThreadGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadGet", reflect.TypeOf((*MockDebugServer)(nil).ThreadGet), arg0, arg1)
}

// ClockGet mocks base method
func (m *MockDebugServer) ClockGet(arg0 context.Context, arg1 *Empty) (*ClockResponse, error) {
	ret := m.ctrl.Call(m, "ClockGet", arg0, arg1)
	ret0, _ := ret[0].(*ClockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClockGet indicates an expected call of ClockGet
func (mr *MockDebugServerMockRecorder) ClockGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClockGet", reflect.TypeOf((*MockDebugServer)(nil).ClockGet), arg0, arg1)
}

// FlushLogs mocks base method
func (m *MockDebugServer) FlushLogs(arg0 context.Context, arg1 *Empty) (*FlushLogsResponseMsg, error) {
	ret := m.ctrl.Call(m, "FlushLogs", arg0, arg1)
	ret0, _ := ret[0].(*FlushLogsResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushLogs indicates an expected call of FlushLogs
func (mr *MockDebugServerMockRecorder) FlushLogs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushLogs", reflect.TypeOf((*MockDebugServer)(nil).FlushLogs), arg0, arg1)
}

// GenericOpn mocks base method
func (m *MockDebugServer) GenericOpn(arg0 context.Context, arg1 *GenericOpnRequestMsg) (*GenericOpnResponseMsg, error) {
	ret := m.ctrl.Call(m, "GenericOpn", arg0, arg1)
	ret0, _ := ret[0].(*GenericOpnResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenericOpn indicates an expected call of GenericOpn
func (mr *MockDebugServerMockRecorder) GenericOpn(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericOpn", reflect.TypeOf((*MockDebugServer)(nil).GenericOpn), arg0, arg1)
}

// FteSpanGet mocks base method
func (m *MockDebugServer) FteSpanGet(arg0 context.Context, arg1 *Empty) (*FteSpanResponseMsg, error) {
	ret := m.ctrl.Call(m, "FteSpanGet", arg0, arg1)
	ret0, _ := ret[0].(*FteSpanResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FteSpanGet indicates an expected call of FteSpanGet
func (mr *MockDebugServerMockRecorder) FteSpanGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FteSpanGet", reflect.TypeOf((*MockDebugServer)(nil).FteSpanGet), arg0, arg1)
}

// FteSpanUpdate mocks base method
func (m *MockDebugServer) FteSpanUpdate(arg0 context.Context, arg1 *FteSpanRequestMsg) (*FteSpanResponseMsg, error) {
	ret := m.ctrl.Call(m, "FteSpanUpdate", arg0, arg1)
	ret0, _ := ret[0].(*FteSpanResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FteSpanUpdate indicates an expected call of FteSpanUpdate
func (mr *MockDebugServerMockRecorder) FteSpanUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FteSpanUpdate", reflect.TypeOf((*MockDebugServer)(nil).FteSpanUpdate), arg0, arg1)
}

// SnakeTestCreate mocks base method
func (m *MockDebugServer) SnakeTestCreate(arg0 context.Context, arg1 *SnakeTestRequestMsg) (*SnakeTestResponseMsg, error) {
	ret := m.ctrl.Call(m, "SnakeTestCreate", arg0, arg1)
	ret0, _ := ret[0].(*SnakeTestResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnakeTestCreate indicates an expected call of SnakeTestCreate
func (mr *MockDebugServerMockRecorder) SnakeTestCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnakeTestCreate", reflect.TypeOf((*MockDebugServer)(nil).SnakeTestCreate), arg0, arg1)
}

// SnakeTestDelete mocks base method
func (m *MockDebugServer) SnakeTestDelete(arg0 context.Context, arg1 *SnakeTestDeleteRequestMsg) (*SnakeTestDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "SnakeTestDelete", arg0, arg1)
	ret0, _ := ret[0].(*SnakeTestDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnakeTestDelete indicates an expected call of SnakeTestDelete
func (mr *MockDebugServerMockRecorder) SnakeTestDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnakeTestDelete", reflect.TypeOf((*MockDebugServer)(nil).SnakeTestDelete), arg0, arg1)
}

// SnakeTestGet mocks base method
func (m *MockDebugServer) SnakeTestGet(arg0 context.Context, arg1 *Empty) (*SnakeTestResponseMsg, error) {
	ret := m.ctrl.Call(m, "SnakeTestGet", arg0, arg1)
	ret0, _ := ret[0].(*SnakeTestResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SnakeTestGet indicates an expected call of SnakeTestGet
func (mr *MockDebugServerMockRecorder) SnakeTestGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnakeTestGet", reflect.TypeOf((*MockDebugServer)(nil).SnakeTestGet), arg0, arg1)
}

// HbmBwGet mocks base method
func (m *MockDebugServer) HbmBwGet(arg0 context.Context, arg1 *HbmBwGetRequestMsg) (*HbmBwGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "HbmBwGet", arg0, arg1)
	ret0, _ := ret[0].(*HbmBwGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HbmBwGet indicates an expected call of HbmBwGet
func (mr *MockDebugServerMockRecorder) HbmBwGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HbmBwGet", reflect.TypeOf((*MockDebugServer)(nil).HbmBwGet), arg0, arg1)
}

// LlcClear mocks base method
func (m *MockDebugServer) LlcClear(arg0 context.Context, arg1 *Empty) (*Empty, error) {
	ret := m.ctrl.Call(m, "LlcClear", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LlcClear indicates an expected call of LlcClear
func (mr *MockDebugServerMockRecorder) LlcClear(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LlcClear", reflect.TypeOf((*MockDebugServer)(nil).LlcClear), arg0, arg1)
}

// LlcSetup mocks base method
func (m *MockDebugServer) LlcSetup(arg0 context.Context, arg1 *LlcSetupRequestMsg) (*LlcSetupResponseMsg, error) {
	ret := m.ctrl.Call(m, "LlcSetup", arg0, arg1)
	ret0, _ := ret[0].(*LlcSetupResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LlcSetup indicates an expected call of LlcSetup
func (mr *MockDebugServerMockRecorder) LlcSetup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LlcSetup", reflect.TypeOf((*MockDebugServer)(nil).LlcSetup), arg0, arg1)
}

// LlcGet mocks base method
func (m *MockDebugServer) LlcGet(arg0 context.Context, arg1 *Empty) (*LlcGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "LlcGet", arg0, arg1)
	ret0, _ := ret[0].(*LlcGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LlcGet indicates an expected call of LlcGet
func (mr *MockDebugServerMockRecorder) LlcGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LlcGet", reflect.TypeOf((*MockDebugServer)(nil).LlcGet), arg0, arg1)
}

// HbmCacheSetup mocks base method
func (m *MockDebugServer) HbmCacheSetup(arg0 context.Context, arg1 *HbmCacheRequestMsg) (*HbmCacheResponseMsg, error) {
	ret := m.ctrl.Call(m, "HbmCacheSetup", arg0, arg1)
	ret0, _ := ret[0].(*HbmCacheResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HbmCacheSetup indicates an expected call of HbmCacheSetup
func (mr *MockDebugServerMockRecorder) HbmCacheSetup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HbmCacheSetup", reflect.TypeOf((*MockDebugServer)(nil).HbmCacheSetup), arg0, arg1)
}

// SchedulerStatsGet mocks base method
func (m *MockDebugServer) SchedulerStatsGet(arg0 context.Context, arg1 *Empty) (*SchedulerStatsResponseMsg, error) {
	ret := m.ctrl.Call(m, "SchedulerStatsGet", arg0, arg1)
	ret0, _ := ret[0].(*SchedulerStatsResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedulerStatsGet indicates an expected call of SchedulerStatsGet
func (mr *MockDebugServerMockRecorder) SchedulerStatsGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulerStatsGet", reflect.TypeOf((*MockDebugServer)(nil).SchedulerStatsGet), arg0, arg1)
}

// SchedulerActiveQGet mocks base method
func (m *MockDebugServer) SchedulerActiveQGet(arg0 context.Context, arg1 *SchedulerActiveQRequestMsg) (*SchedulerActiveQResponseMsg, error) {
	ret := m.ctrl.Call(m, "SchedulerActiveQGet", arg0, arg1)
	ret0, _ := ret[0].(*SchedulerActiveQResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SchedulerActiveQGet indicates an expected call of SchedulerActiveQGet
func (mr *MockDebugServerMockRecorder) SchedulerActiveQGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulerActiveQGet", reflect.TypeOf((*MockDebugServer)(nil).SchedulerActiveQGet), arg0, arg1)
}

// PacketBufferUpdate mocks base method
func (m *MockDebugServer) PacketBufferUpdate(arg0 context.Context, arg1 *PacketBufferRequestMsg) (*PacketBufferResponseMsg, error) {
	ret := m.ctrl.Call(m, "PacketBufferUpdate", arg0, arg1)
	ret0, _ := ret[0].(*PacketBufferResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PacketBufferUpdate indicates an expected call of PacketBufferUpdate
func (mr *MockDebugServerMockRecorder) PacketBufferUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PacketBufferUpdate", reflect.TypeOf((*MockDebugServer)(nil).PacketBufferUpdate), arg0, arg1)
}

// XcvrValidCheckEnable mocks base method
func (m *MockDebugServer) XcvrValidCheckEnable(arg0 context.Context, arg1 *Empty) (*Empty, error) {
	ret := m.ctrl.Call(m, "XcvrValidCheckEnable", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XcvrValidCheckEnable indicates an expected call of XcvrValidCheckEnable
func (mr *MockDebugServerMockRecorder) XcvrValidCheckEnable(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XcvrValidCheckEnable", reflect.TypeOf((*MockDebugServer)(nil).XcvrValidCheckEnable), arg0, arg1)
}

// XcvrValidCheckDisable mocks base method
func (m *MockDebugServer) XcvrValidCheckDisable(arg0 context.Context, arg1 *Empty) (*Empty, error) {
	ret := m.ctrl.Call(m, "XcvrValidCheckDisable", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XcvrValidCheckDisable indicates an expected call of XcvrValidCheckDisable
func (mr *MockDebugServerMockRecorder) XcvrValidCheckDisable(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XcvrValidCheckDisable", reflect.TypeOf((*MockDebugServer)(nil).XcvrValidCheckDisable), arg0, arg1)
}

// MemoryTrim mocks base method
func (m *MockDebugServer) MemoryTrim(arg0 context.Context, arg1 *Empty) (*Empty, error) {
	ret := m.ctrl.Call(m, "MemoryTrim", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryTrim indicates an expected call of MemoryTrim
func (mr *MockDebugServerMockRecorder) MemoryTrim(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryTrim", reflect.TypeOf((*MockDebugServer)(nil).MemoryTrim), arg0, arg1)
}

// QueueCreditsGet mocks base method
func (m *MockDebugServer) QueueCreditsGet(arg0 context.Context, arg1 *Empty) (*QueueCreditsGetResponse, error) {
	ret := m.ctrl.Call(m, "QueueCreditsGet", arg0, arg1)
	ret0, _ := ret[0].(*QueueCreditsGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueCreditsGet indicates an expected call of QueueCreditsGet
func (mr *MockDebugServerMockRecorder) QueueCreditsGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueCreditsGet", reflect.TypeOf((*MockDebugServer)(nil).QueueCreditsGet), arg0, arg1)
}

// SessionCtrlUpdate mocks base method
func (m *MockDebugServer) SessionCtrlUpdate(arg0 context.Context, arg1 *SessionCtrlRequestMsg) (*Empty, error) {
	ret := m.ctrl.Call(m, "SessionCtrlUpdate", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionCtrlUpdate indicates an expected call of SessionCtrlUpdate
func (mr *MockDebugServerMockRecorder) SessionCtrlUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionCtrlUpdate", reflect.TypeOf((*MockDebugServer)(nil).SessionCtrlUpdate), arg0, arg1)
}

// OifListGet mocks base method
func (m *MockDebugServer) OifListGet(arg0 *OifListGetRequestMsg, arg1 Debug_OifListGetServer) error {
	ret := m.ctrl.Call(m, "OifListGet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OifListGet indicates an expected call of OifListGet
func (mr *MockDebugServerMockRecorder) OifListGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OifListGet", reflect.TypeOf((*MockDebugServer)(nil).OifListGet), arg0, arg1)
}

// AgingLogs mocks base method
func (m *MockDebugServer) AgingLogs(arg0 context.Context, arg1 *AgingLogsRequestMsg) (*Empty, error) {
	ret := m.ctrl.Call(m, "AgingLogs", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgingLogs indicates an expected call of AgingLogs
func (mr *MockDebugServerMockRecorder) AgingLogs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgingLogs", reflect.TypeOf((*MockDebugServer)(nil).AgingLogs), arg0, arg1)
}

// MockDebug_OifListGetServer is a mock of Debug_OifListGetServer interface
type MockDebug_OifListGetServer struct {
	ctrl     *gomock.Controller
	recorder *MockDebug_OifListGetServerMockRecorder
}

// MockDebug_OifListGetServerMockRecorder is the mock recorder for MockDebug_OifListGetServer
type MockDebug_OifListGetServerMockRecorder struct {
	mock *MockDebug_OifListGetServer
}

// NewMockDebug_OifListGetServer creates a new mock instance
func NewMockDebug_OifListGetServer(ctrl *gomock.Controller) *MockDebug_OifListGetServer {
	mock := &MockDebug_OifListGetServer{ctrl: ctrl}
	mock.recorder = &MockDebug_OifListGetServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebug_OifListGetServer) EXPECT() *MockDebug_OifListGetServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockDebug_OifListGetServer) Send(arg0 *OifListGetResponseMsg) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockDebug_OifListGetServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockDebug_OifListGetServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockDebug_OifListGetServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockDebug_OifListGetServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockDebug_OifListGetServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockDebug_OifListGetServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockDebug_OifListGetServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockDebug_OifListGetServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockDebug_OifListGetServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockDebug_OifListGetServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockDebug_OifListGetServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockDebug_OifListGetServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockDebug_OifListGetServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDebug_OifListGetServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockDebug_OifListGetServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockDebug_OifListGetServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDebug_OifListGetServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockDebug_OifListGetServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockDebug_OifListGetServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDebug_OifListGetServer)(nil).RecvMsg), m)
}
