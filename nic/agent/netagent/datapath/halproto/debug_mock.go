// Code generated by MockGen. DO NOT EDIT.
// Source: debug.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisRegisterRequest_IdOrName is a mock of isRegisterRequest_IdOrName interface
type MockisRegisterRequest_IdOrName struct {
	ctrl     *gomock.Controller
	recorder *MockisRegisterRequest_IdOrNameMockRecorder
}

// MockisRegisterRequest_IdOrNameMockRecorder is the mock recorder for MockisRegisterRequest_IdOrName
type MockisRegisterRequest_IdOrNameMockRecorder struct {
	mock *MockisRegisterRequest_IdOrName
}

// NewMockisRegisterRequest_IdOrName creates a new mock instance
func NewMockisRegisterRequest_IdOrName(ctrl *gomock.Controller) *MockisRegisterRequest_IdOrName {
	mock := &MockisRegisterRequest_IdOrName{ctrl: ctrl}
	mock.recorder = &MockisRegisterRequest_IdOrNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisRegisterRequest_IdOrName) EXPECT() *MockisRegisterRequest_IdOrNameMockRecorder {
	return m.recorder
}

// isRegisterRequest_IdOrName mocks base method
func (m *MockisRegisterRequest_IdOrName) isRegisterRequest_IdOrName() {
	m.ctrl.Call(m, "isRegisterRequest_IdOrName")
}

// isRegisterRequest_IdOrName indicates an expected call of isRegisterRequest_IdOrName
func (mr *MockisRegisterRequest_IdOrNameMockRecorder) isRegisterRequest_IdOrName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRegisterRequest_IdOrName", reflect.TypeOf((*MockisRegisterRequest_IdOrName)(nil).isRegisterRequest_IdOrName))
}

// MarshalTo mocks base method
func (m *MockisRegisterRequest_IdOrName) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisRegisterRequest_IdOrNameMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRegisterRequest_IdOrName)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisRegisterRequest_IdOrName) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisRegisterRequest_IdOrNameMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRegisterRequest_IdOrName)(nil).Size))
}

// MockisMemoryRequest_IdOrName is a mock of isMemoryRequest_IdOrName interface
type MockisMemoryRequest_IdOrName struct {
	ctrl     *gomock.Controller
	recorder *MockisMemoryRequest_IdOrNameMockRecorder
}

// MockisMemoryRequest_IdOrNameMockRecorder is the mock recorder for MockisMemoryRequest_IdOrName
type MockisMemoryRequest_IdOrNameMockRecorder struct {
	mock *MockisMemoryRequest_IdOrName
}

// NewMockisMemoryRequest_IdOrName creates a new mock instance
func NewMockisMemoryRequest_IdOrName(ctrl *gomock.Controller) *MockisMemoryRequest_IdOrName {
	mock := &MockisMemoryRequest_IdOrName{ctrl: ctrl}
	mock.recorder = &MockisMemoryRequest_IdOrNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisMemoryRequest_IdOrName) EXPECT() *MockisMemoryRequest_IdOrNameMockRecorder {
	return m.recorder
}

// isMemoryRequest_IdOrName mocks base method
func (m *MockisMemoryRequest_IdOrName) isMemoryRequest_IdOrName() {
	m.ctrl.Call(m, "isMemoryRequest_IdOrName")
}

// isMemoryRequest_IdOrName indicates an expected call of isMemoryRequest_IdOrName
func (mr *MockisMemoryRequest_IdOrNameMockRecorder) isMemoryRequest_IdOrName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isMemoryRequest_IdOrName", reflect.TypeOf((*MockisMemoryRequest_IdOrName)(nil).isMemoryRequest_IdOrName))
}

// MarshalTo mocks base method
func (m *MockisMemoryRequest_IdOrName) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisMemoryRequest_IdOrNameMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisMemoryRequest_IdOrName)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisMemoryRequest_IdOrName) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisMemoryRequest_IdOrNameMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisMemoryRequest_IdOrName)(nil).Size))
}

// MockDebugClient is a mock of DebugClient interface
type MockDebugClient struct {
	ctrl     *gomock.Controller
	recorder *MockDebugClientMockRecorder
}

// MockDebugClientMockRecorder is the mock recorder for MockDebugClient
type MockDebugClientMockRecorder struct {
	mock *MockDebugClient
}

// NewMockDebugClient creates a new mock instance
func NewMockDebugClient(ctrl *gomock.Controller) *MockDebugClient {
	mock := &MockDebugClient{ctrl: ctrl}
	mock.recorder = &MockDebugClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebugClient) EXPECT() *MockDebugClientMockRecorder {
	return m.recorder
}

// RegisterGet mocks base method
func (m *MockDebugClient) RegisterGet(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterGet", varargs...)
	ret0, _ := ret[0].(*RegisterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterGet indicates an expected call of RegisterGet
func (mr *MockDebugClientMockRecorder) RegisterGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGet", reflect.TypeOf((*MockDebugClient)(nil).RegisterGet), varargs...)
}

// RegisterUpdate mocks base method
func (m *MockDebugClient) RegisterUpdate(ctx context.Context, in *RegisterRequestMsg, opts ...grpc.CallOption) (*RegisterResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterUpdate", varargs...)
	ret0, _ := ret[0].(*RegisterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUpdate indicates an expected call of RegisterUpdate
func (mr *MockDebugClientMockRecorder) RegisterUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUpdate", reflect.TypeOf((*MockDebugClient)(nil).RegisterUpdate), varargs...)
}

// MemoryGet mocks base method
func (m *MockDebugClient) MemoryGet(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryGet", varargs...)
	ret0, _ := ret[0].(*MemoryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryGet indicates an expected call of MemoryGet
func (mr *MockDebugClientMockRecorder) MemoryGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryGet", reflect.TypeOf((*MockDebugClient)(nil).MemoryGet), varargs...)
}

// MemoryUpdate mocks base method
func (m *MockDebugClient) MemoryUpdate(ctx context.Context, in *MemoryRequestMsg, opts ...grpc.CallOption) (*MemoryResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryUpdate", varargs...)
	ret0, _ := ret[0].(*MemoryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryUpdate indicates an expected call of MemoryUpdate
func (mr *MockDebugClientMockRecorder) MemoryUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryUpdate", reflect.TypeOf((*MockDebugClient)(nil).MemoryUpdate), varargs...)
}

// MemoryRawGet mocks base method
func (m *MockDebugClient) MemoryRawGet(ctx context.Context, in *MemoryRawRequestMsg, opts ...grpc.CallOption) (*MemoryRawResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryRawGet", varargs...)
	ret0, _ := ret[0].(*MemoryRawResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRawGet indicates an expected call of MemoryRawGet
func (mr *MockDebugClientMockRecorder) MemoryRawGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRawGet", reflect.TypeOf((*MockDebugClient)(nil).MemoryRawGet), varargs...)
}

// MemoryRawUpdate mocks base method
func (m *MockDebugClient) MemoryRawUpdate(ctx context.Context, in *MemoryRawUpdateRequestMsg, opts ...grpc.CallOption) (*MemoryRawUpdateResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryRawUpdate", varargs...)
	ret0, _ := ret[0].(*MemoryRawUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRawUpdate indicates an expected call of MemoryRawUpdate
func (mr *MockDebugClientMockRecorder) MemoryRawUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRawUpdate", reflect.TypeOf((*MockDebugClient)(nil).MemoryRawUpdate), varargs...)
}

// MpuTraceUpdate mocks base method
func (m *MockDebugClient) MpuTraceUpdate(ctx context.Context, in *MpuTraceRequestMsg, opts ...grpc.CallOption) (*MpuTraceResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MpuTraceUpdate", varargs...)
	ret0, _ := ret[0].(*MpuTraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MpuTraceUpdate indicates an expected call of MpuTraceUpdate
func (mr *MockDebugClientMockRecorder) MpuTraceUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MpuTraceUpdate", reflect.TypeOf((*MockDebugClient)(nil).MpuTraceUpdate), varargs...)
}

// MemTrackGet mocks base method
func (m *MockDebugClient) MemTrackGet(ctx context.Context, in *MemTrackGetRequestMsg, opts ...grpc.CallOption) (*MemTrackGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemTrackGet", varargs...)
	ret0, _ := ret[0].(*MemTrackGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemTrackGet indicates an expected call of MemTrackGet
func (mr *MockDebugClientMockRecorder) MemTrackGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemTrackGet", reflect.TypeOf((*MockDebugClient)(nil).MemTrackGet), varargs...)
}

// SlabGet mocks base method
func (m *MockDebugClient) SlabGet(ctx context.Context, in *SlabGetRequestMsg, opts ...grpc.CallOption) (*SlabGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SlabGet", varargs...)
	ret0, _ := ret[0].(*SlabGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SlabGet indicates an expected call of SlabGet
func (mr *MockDebugClientMockRecorder) SlabGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlabGet", reflect.TypeOf((*MockDebugClient)(nil).SlabGet), varargs...)
}

// HashTableGet mocks base method
func (m *MockDebugClient) HashTableGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HashTableGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HashTableGet", varargs...)
	ret0, _ := ret[0].(*HashTableGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashTableGet indicates an expected call of HashTableGet
func (mr *MockDebugClientMockRecorder) HashTableGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashTableGet", reflect.TypeOf((*MockDebugClient)(nil).HashTableGet), varargs...)
}

// TraceUpdate mocks base method
func (m *MockDebugClient) TraceUpdate(ctx context.Context, in *TraceRequestMsg, opts ...grpc.CallOption) (*TraceResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TraceUpdate", varargs...)
	ret0, _ := ret[0].(*TraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceUpdate indicates an expected call of TraceUpdate
func (mr *MockDebugClientMockRecorder) TraceUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceUpdate", reflect.TypeOf((*MockDebugClient)(nil).TraceUpdate), varargs...)
}

// TraceGet mocks base method
func (m *MockDebugClient) TraceGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TraceResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TraceGet", varargs...)
	ret0, _ := ret[0].(*TraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceGet indicates an expected call of TraceGet
func (mr *MockDebugClientMockRecorder) TraceGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceGet", reflect.TypeOf((*MockDebugClient)(nil).TraceGet), varargs...)
}

// ThreadGet mocks base method
func (m *MockDebugClient) ThreadGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ThreadResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ThreadGet", varargs...)
	ret0, _ := ret[0].(*ThreadResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadGet indicates an expected call of ThreadGet
func (mr *MockDebugClientMockRecorder) ThreadGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadGet", reflect.TypeOf((*MockDebugClient)(nil).ThreadGet), varargs...)
}

// ClockGet mocks base method
func (m *MockDebugClient) ClockGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClockResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClockGet", varargs...)
	ret0, _ := ret[0].(*ClockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClockGet indicates an expected call of ClockGet
func (mr *MockDebugClientMockRecorder) ClockGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClockGet", reflect.TypeOf((*MockDebugClient)(nil).ClockGet), varargs...)
}

// FlushLogs mocks base method
func (m *MockDebugClient) FlushLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FlushLogsResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlushLogs", varargs...)
	ret0, _ := ret[0].(*FlushLogsResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushLogs indicates an expected call of FlushLogs
func (mr *MockDebugClientMockRecorder) FlushLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushLogs", reflect.TypeOf((*MockDebugClient)(nil).FlushLogs), varargs...)
}

// GenericOpn mocks base method
func (m *MockDebugClient) GenericOpn(ctx context.Context, in *GenericOpnRequestMsg, opts ...grpc.CallOption) (*GenericOpnResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenericOpn", varargs...)
	ret0, _ := ret[0].(*GenericOpnResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenericOpn indicates an expected call of GenericOpn
func (mr *MockDebugClientMockRecorder) GenericOpn(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericOpn", reflect.TypeOf((*MockDebugClient)(nil).GenericOpn), varargs...)
}

// FteSpanGet mocks base method
func (m *MockDebugClient) FteSpanGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FteSpanResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FteSpanGet", varargs...)
	ret0, _ := ret[0].(*FteSpanResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FteSpanGet indicates an expected call of FteSpanGet
func (mr *MockDebugClientMockRecorder) FteSpanGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FteSpanGet", reflect.TypeOf((*MockDebugClient)(nil).FteSpanGet), varargs...)
}

// FteSpanUpdate mocks base method
func (m *MockDebugClient) FteSpanUpdate(ctx context.Context, in *FteSpanRequestMsg, opts ...grpc.CallOption) (*FteSpanResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FteSpanUpdate", varargs...)
	ret0, _ := ret[0].(*FteSpanResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FteSpanUpdate indicates an expected call of FteSpanUpdate
func (mr *MockDebugClientMockRecorder) FteSpanUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FteSpanUpdate", reflect.TypeOf((*MockDebugClient)(nil).FteSpanUpdate), varargs...)
}

// MockDebugServer is a mock of DebugServer interface
type MockDebugServer struct {
	ctrl     *gomock.Controller
	recorder *MockDebugServerMockRecorder
}

// MockDebugServerMockRecorder is the mock recorder for MockDebugServer
type MockDebugServerMockRecorder struct {
	mock *MockDebugServer
}

// NewMockDebugServer creates a new mock instance
func NewMockDebugServer(ctrl *gomock.Controller) *MockDebugServer {
	mock := &MockDebugServer{ctrl: ctrl}
	mock.recorder = &MockDebugServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebugServer) EXPECT() *MockDebugServerMockRecorder {
	return m.recorder
}

// RegisterGet mocks base method
func (m *MockDebugServer) RegisterGet(arg0 context.Context, arg1 *RegisterRequestMsg) (*RegisterResponseMsg, error) {
	ret := m.ctrl.Call(m, "RegisterGet", arg0, arg1)
	ret0, _ := ret[0].(*RegisterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterGet indicates an expected call of RegisterGet
func (mr *MockDebugServerMockRecorder) RegisterGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGet", reflect.TypeOf((*MockDebugServer)(nil).RegisterGet), arg0, arg1)
}

// RegisterUpdate mocks base method
func (m *MockDebugServer) RegisterUpdate(arg0 context.Context, arg1 *RegisterRequestMsg) (*RegisterResponseMsg, error) {
	ret := m.ctrl.Call(m, "RegisterUpdate", arg0, arg1)
	ret0, _ := ret[0].(*RegisterResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUpdate indicates an expected call of RegisterUpdate
func (mr *MockDebugServerMockRecorder) RegisterUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUpdate", reflect.TypeOf((*MockDebugServer)(nil).RegisterUpdate), arg0, arg1)
}

// MemoryGet mocks base method
func (m *MockDebugServer) MemoryGet(arg0 context.Context, arg1 *MemoryRequestMsg) (*MemoryResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemoryGet", arg0, arg1)
	ret0, _ := ret[0].(*MemoryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryGet indicates an expected call of MemoryGet
func (mr *MockDebugServerMockRecorder) MemoryGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryGet", reflect.TypeOf((*MockDebugServer)(nil).MemoryGet), arg0, arg1)
}

// MemoryUpdate mocks base method
func (m *MockDebugServer) MemoryUpdate(arg0 context.Context, arg1 *MemoryRequestMsg) (*MemoryResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemoryUpdate", arg0, arg1)
	ret0, _ := ret[0].(*MemoryResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryUpdate indicates an expected call of MemoryUpdate
func (mr *MockDebugServerMockRecorder) MemoryUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryUpdate", reflect.TypeOf((*MockDebugServer)(nil).MemoryUpdate), arg0, arg1)
}

// MemoryRawGet mocks base method
func (m *MockDebugServer) MemoryRawGet(arg0 context.Context, arg1 *MemoryRawRequestMsg) (*MemoryRawResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemoryRawGet", arg0, arg1)
	ret0, _ := ret[0].(*MemoryRawResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRawGet indicates an expected call of MemoryRawGet
func (mr *MockDebugServerMockRecorder) MemoryRawGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRawGet", reflect.TypeOf((*MockDebugServer)(nil).MemoryRawGet), arg0, arg1)
}

// MemoryRawUpdate mocks base method
func (m *MockDebugServer) MemoryRawUpdate(arg0 context.Context, arg1 *MemoryRawUpdateRequestMsg) (*MemoryRawUpdateResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemoryRawUpdate", arg0, arg1)
	ret0, _ := ret[0].(*MemoryRawUpdateResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemoryRawUpdate indicates an expected call of MemoryRawUpdate
func (mr *MockDebugServerMockRecorder) MemoryRawUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryRawUpdate", reflect.TypeOf((*MockDebugServer)(nil).MemoryRawUpdate), arg0, arg1)
}

// MpuTraceUpdate mocks base method
func (m *MockDebugServer) MpuTraceUpdate(arg0 context.Context, arg1 *MpuTraceRequestMsg) (*MpuTraceResponseMsg, error) {
	ret := m.ctrl.Call(m, "MpuTraceUpdate", arg0, arg1)
	ret0, _ := ret[0].(*MpuTraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MpuTraceUpdate indicates an expected call of MpuTraceUpdate
func (mr *MockDebugServerMockRecorder) MpuTraceUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MpuTraceUpdate", reflect.TypeOf((*MockDebugServer)(nil).MpuTraceUpdate), arg0, arg1)
}

// MemTrackGet mocks base method
func (m *MockDebugServer) MemTrackGet(arg0 context.Context, arg1 *MemTrackGetRequestMsg) (*MemTrackGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "MemTrackGet", arg0, arg1)
	ret0, _ := ret[0].(*MemTrackGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemTrackGet indicates an expected call of MemTrackGet
func (mr *MockDebugServerMockRecorder) MemTrackGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemTrackGet", reflect.TypeOf((*MockDebugServer)(nil).MemTrackGet), arg0, arg1)
}

// SlabGet mocks base method
func (m *MockDebugServer) SlabGet(arg0 context.Context, arg1 *SlabGetRequestMsg) (*SlabGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "SlabGet", arg0, arg1)
	ret0, _ := ret[0].(*SlabGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SlabGet indicates an expected call of SlabGet
func (mr *MockDebugServerMockRecorder) SlabGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlabGet", reflect.TypeOf((*MockDebugServer)(nil).SlabGet), arg0, arg1)
}

// HashTableGet mocks base method
func (m *MockDebugServer) HashTableGet(arg0 context.Context, arg1 *Empty) (*HashTableGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "HashTableGet", arg0, arg1)
	ret0, _ := ret[0].(*HashTableGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashTableGet indicates an expected call of HashTableGet
func (mr *MockDebugServerMockRecorder) HashTableGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashTableGet", reflect.TypeOf((*MockDebugServer)(nil).HashTableGet), arg0, arg1)
}

// TraceUpdate mocks base method
func (m *MockDebugServer) TraceUpdate(arg0 context.Context, arg1 *TraceRequestMsg) (*TraceResponseMsg, error) {
	ret := m.ctrl.Call(m, "TraceUpdate", arg0, arg1)
	ret0, _ := ret[0].(*TraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceUpdate indicates an expected call of TraceUpdate
func (mr *MockDebugServerMockRecorder) TraceUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceUpdate", reflect.TypeOf((*MockDebugServer)(nil).TraceUpdate), arg0, arg1)
}

// TraceGet mocks base method
func (m *MockDebugServer) TraceGet(arg0 context.Context, arg1 *Empty) (*TraceResponseMsg, error) {
	ret := m.ctrl.Call(m, "TraceGet", arg0, arg1)
	ret0, _ := ret[0].(*TraceResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceGet indicates an expected call of TraceGet
func (mr *MockDebugServerMockRecorder) TraceGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceGet", reflect.TypeOf((*MockDebugServer)(nil).TraceGet), arg0, arg1)
}

// ThreadGet mocks base method
func (m *MockDebugServer) ThreadGet(arg0 context.Context, arg1 *Empty) (*ThreadResponseMsg, error) {
	ret := m.ctrl.Call(m, "ThreadGet", arg0, arg1)
	ret0, _ := ret[0].(*ThreadResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadGet indicates an expected call of ThreadGet
func (mr *MockDebugServerMockRecorder) ThreadGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadGet", reflect.TypeOf((*MockDebugServer)(nil).ThreadGet), arg0, arg1)
}

// ClockGet mocks base method
func (m *MockDebugServer) ClockGet(arg0 context.Context, arg1 *Empty) (*ClockResponse, error) {
	ret := m.ctrl.Call(m, "ClockGet", arg0, arg1)
	ret0, _ := ret[0].(*ClockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClockGet indicates an expected call of ClockGet
func (mr *MockDebugServerMockRecorder) ClockGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClockGet", reflect.TypeOf((*MockDebugServer)(nil).ClockGet), arg0, arg1)
}

// FlushLogs mocks base method
func (m *MockDebugServer) FlushLogs(arg0 context.Context, arg1 *Empty) (*FlushLogsResponseMsg, error) {
	ret := m.ctrl.Call(m, "FlushLogs", arg0, arg1)
	ret0, _ := ret[0].(*FlushLogsResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushLogs indicates an expected call of FlushLogs
func (mr *MockDebugServerMockRecorder) FlushLogs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushLogs", reflect.TypeOf((*MockDebugServer)(nil).FlushLogs), arg0, arg1)
}

// GenericOpn mocks base method
func (m *MockDebugServer) GenericOpn(arg0 context.Context, arg1 *GenericOpnRequestMsg) (*GenericOpnResponseMsg, error) {
	ret := m.ctrl.Call(m, "GenericOpn", arg0, arg1)
	ret0, _ := ret[0].(*GenericOpnResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenericOpn indicates an expected call of GenericOpn
func (mr *MockDebugServerMockRecorder) GenericOpn(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericOpn", reflect.TypeOf((*MockDebugServer)(nil).GenericOpn), arg0, arg1)
}

// FteSpanGet mocks base method
func (m *MockDebugServer) FteSpanGet(arg0 context.Context, arg1 *Empty) (*FteSpanResponseMsg, error) {
	ret := m.ctrl.Call(m, "FteSpanGet", arg0, arg1)
	ret0, _ := ret[0].(*FteSpanResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FteSpanGet indicates an expected call of FteSpanGet
func (mr *MockDebugServerMockRecorder) FteSpanGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FteSpanGet", reflect.TypeOf((*MockDebugServer)(nil).FteSpanGet), arg0, arg1)
}

// FteSpanUpdate mocks base method
func (m *MockDebugServer) FteSpanUpdate(arg0 context.Context, arg1 *FteSpanRequestMsg) (*FteSpanResponseMsg, error) {
	ret := m.ctrl.Call(m, "FteSpanUpdate", arg0, arg1)
	ret0, _ := ret[0].(*FteSpanResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FteSpanUpdate indicates an expected call of FteSpanUpdate
func (mr *MockDebugServerMockRecorder) FteSpanUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FteSpanUpdate", reflect.TypeOf((*MockDebugServer)(nil).FteSpanUpdate), arg0, arg1)
}
