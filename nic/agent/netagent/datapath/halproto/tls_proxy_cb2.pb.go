// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tls_proxy_cb2.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// TlsProxyCbKeyHandle is used to operate on a tls_proxy_cb either by its key or handle
type TlsProxyCbKeyHandle struct {
	// Types that are valid to be assigned to KeyOrHandle:
	//	*TlsProxyCbKeyHandle_TlsProxyCbId
	//	*TlsProxyCbKeyHandle_TlsProxyCbHandle
	KeyOrHandle isTlsProxyCbKeyHandle_KeyOrHandle `protobuf_oneof:"key_or_handle"`
}

func (m *TlsProxyCbKeyHandle) Reset()                    { *m = TlsProxyCbKeyHandle{} }
func (m *TlsProxyCbKeyHandle) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyCbKeyHandle) ProtoMessage()               {}
func (*TlsProxyCbKeyHandle) Descriptor() ([]byte, []int) { return fileDescriptorTlsProxyCb2, []int{0} }

type isTlsProxyCbKeyHandle_KeyOrHandle interface {
	isTlsProxyCbKeyHandle_KeyOrHandle()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TlsProxyCbKeyHandle_TlsProxyCbId struct {
	TlsProxyCbId uint32 `protobuf:"varint,1,opt,name=tls_proxy_cb_id,json=tlsProxyCbId,proto3,oneof"`
}
type TlsProxyCbKeyHandle_TlsProxyCbHandle struct {
	TlsProxyCbHandle uint64 `protobuf:"fixed64,2,opt,name=tls_proxy_cb_handle,json=tlsProxyCbHandle,proto3,oneof"`
}

func (*TlsProxyCbKeyHandle_TlsProxyCbId) isTlsProxyCbKeyHandle_KeyOrHandle()     {}
func (*TlsProxyCbKeyHandle_TlsProxyCbHandle) isTlsProxyCbKeyHandle_KeyOrHandle() {}

func (m *TlsProxyCbKeyHandle) GetKeyOrHandle() isTlsProxyCbKeyHandle_KeyOrHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsProxyCbKeyHandle) GetTlsProxyCbId() uint32 {
	if x, ok := m.GetKeyOrHandle().(*TlsProxyCbKeyHandle_TlsProxyCbId); ok {
		return x.TlsProxyCbId
	}
	return 0
}

func (m *TlsProxyCbKeyHandle) GetTlsProxyCbHandle() uint64 {
	if x, ok := m.GetKeyOrHandle().(*TlsProxyCbKeyHandle_TlsProxyCbHandle); ok {
		return x.TlsProxyCbHandle
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TlsProxyCbKeyHandle) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TlsProxyCbKeyHandle_OneofMarshaler, _TlsProxyCbKeyHandle_OneofUnmarshaler, _TlsProxyCbKeyHandle_OneofSizer, []interface{}{
		(*TlsProxyCbKeyHandle_TlsProxyCbId)(nil),
		(*TlsProxyCbKeyHandle_TlsProxyCbHandle)(nil),
	}
}

func _TlsProxyCbKeyHandle_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TlsProxyCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsProxyCbKeyHandle_TlsProxyCbId:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TlsProxyCbId))
	case *TlsProxyCbKeyHandle_TlsProxyCbHandle:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(uint64(x.TlsProxyCbHandle))
	case nil:
	default:
		return fmt.Errorf("TlsProxyCbKeyHandle.KeyOrHandle has unexpected type %T", x)
	}
	return nil
}

func _TlsProxyCbKeyHandle_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TlsProxyCbKeyHandle)
	switch tag {
	case 1: // key_or_handle.tls_proxy_cb_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.KeyOrHandle = &TlsProxyCbKeyHandle_TlsProxyCbId{uint32(x)}
		return true, err
	case 2: // key_or_handle.tls_proxy_cb_handle
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.KeyOrHandle = &TlsProxyCbKeyHandle_TlsProxyCbHandle{x}
		return true, err
	default:
		return false, nil
	}
}

func _TlsProxyCbKeyHandle_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TlsProxyCbKeyHandle)
	// key_or_handle
	switch x := m.KeyOrHandle.(type) {
	case *TlsProxyCbKeyHandle_TlsProxyCbId:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TlsProxyCbId))
	case *TlsProxyCbKeyHandle_TlsProxyCbHandle:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TlsProxyCbSpec captures all the tls_proxy_cb level configuration
type TlsProxyCbSpec struct {
	KeyOrHandle             *TlsProxyCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
	NicDecHead              uint32               `protobuf:"varint,2,opt,name=nic_dec_head,json=nicDecHead,proto3" json:"nic_dec_head,omitempty"`
	NicDecTail              uint32               `protobuf:"varint,3,opt,name=nic_dec_tail,json=nicDecTail,proto3" json:"nic_dec_tail,omitempty"`
	Command                 uint32               `protobuf:"varint,4,opt,name=command,proto3" json:"command,omitempty"`
	DebugDol                uint32               `protobuf:"varint,5,opt,name=debug_dol,json=debugDol,proto3" json:"debug_dol,omitempty"`
	SerqPi                  uint32               `protobuf:"varint,6,opt,name=serq_pi,json=serqPi,proto3" json:"serq_pi,omitempty"`
	SerqCi                  uint32               `protobuf:"varint,7,opt,name=serq_ci,json=serqCi,proto3" json:"serq_ci,omitempty"`
	BsqPi                   uint32               `protobuf:"varint,8,opt,name=bsq_pi,json=bsqPi,proto3" json:"bsq_pi,omitempty"`
	BsqCi                   uint32               `protobuf:"varint,9,opt,name=bsq_ci,json=bsqCi,proto3" json:"bsq_ci,omitempty"`
	CryptoKeyIdx            uint32               `protobuf:"varint,10,opt,name=crypto_key_idx,json=cryptoKeyIdx,proto3" json:"crypto_key_idx,omitempty"`
	SerqBase                uint32               `protobuf:"varint,11,opt,name=serq_base,json=serqBase,proto3" json:"serq_base,omitempty"`
	SesqBase                uint32               `protobuf:"varint,12,opt,name=sesq_base,json=sesqBase,proto3" json:"sesq_base,omitempty"`
	TnmdrAlloc              uint64               `protobuf:"fixed64,13,opt,name=tnmdr_alloc,json=tnmdrAlloc,proto3" json:"tnmdr_alloc,omitempty"`
	TnmprAlloc              uint64               `protobuf:"fixed64,14,opt,name=tnmpr_alloc,json=tnmprAlloc,proto3" json:"tnmpr_alloc,omitempty"`
	RnmdrFree               uint64               `protobuf:"fixed64,15,opt,name=rnmdr_free,json=rnmdrFree,proto3" json:"rnmdr_free,omitempty"`
	RnmprFree               uint64               `protobuf:"fixed64,16,opt,name=rnmpr_free,json=rnmprFree,proto3" json:"rnmpr_free,omitempty"`
	EncRequests             uint64               `protobuf:"fixed64,17,opt,name=enc_requests,json=encRequests,proto3" json:"enc_requests,omitempty"`
	EncCompletions          uint64               `protobuf:"fixed64,18,opt,name=enc_completions,json=encCompletions,proto3" json:"enc_completions,omitempty"`
	EncFailures             uint64               `protobuf:"fixed64,19,opt,name=enc_failures,json=encFailures,proto3" json:"enc_failures,omitempty"`
	DecRequests             uint64               `protobuf:"fixed64,20,opt,name=dec_requests,json=decRequests,proto3" json:"dec_requests,omitempty"`
	DecCompletions          uint64               `protobuf:"fixed64,21,opt,name=dec_completions,json=decCompletions,proto3" json:"dec_completions,omitempty"`
	DecFailures             uint64               `protobuf:"fixed64,22,opt,name=dec_failures,json=decFailures,proto3" json:"dec_failures,omitempty"`
	Salt                    uint32               `protobuf:"varint,23,opt,name=salt,proto3" json:"salt,omitempty"`
	ExplicitIv              uint64               `protobuf:"varint,24,opt,name=explicit_iv,json=explicitIv,proto3" json:"explicit_iv,omitempty"`
	PreDebugStage0_7Thread  uint32               `protobuf:"varint,25,opt,name=pre_debug_stage0_7_thread,json=preDebugStage07Thread,proto3" json:"pre_debug_stage0_7_thread,omitempty"`
	PostDebugStage0_7Thread uint32               `protobuf:"varint,26,opt,name=post_debug_stage0_7_thread,json=postDebugStage07Thread,proto3" json:"post_debug_stage0_7_thread,omitempty"`
	IsDecryptFlow           bool                 `protobuf:"varint,27,opt,name=is_decrypt_flow,json=isDecryptFlow,proto3" json:"is_decrypt_flow,omitempty"`
	OtherFid                uint32               `protobuf:"varint,28,opt,name=other_fid,json=otherFid,proto3" json:"other_fid,omitempty"`
	L7ProxyType             AppRedirType         `protobuf:"varint,29,opt,name=l7_proxy_type,json=l7ProxyType,proto3,enum=types.AppRedirType" json:"l7_proxy_type,omitempty"`
	CryptoHmacKeyIdx        uint32               `protobuf:"varint,30,opt,name=crypto_hmac_key_idx,json=cryptoHmacKeyIdx,proto3" json:"crypto_hmac_key_idx,omitempty"`
	MacRequests             uint64               `protobuf:"fixed64,31,opt,name=mac_requests,json=macRequests,proto3" json:"mac_requests,omitempty"`
	MacCompletions          uint64               `protobuf:"fixed64,32,opt,name=mac_completions,json=macCompletions,proto3" json:"mac_completions,omitempty"`
	MacFailures             uint64               `protobuf:"fixed64,33,opt,name=mac_failures,json=macFailures,proto3" json:"mac_failures,omitempty"`
	CpuId                   uint32               `protobuf:"varint,34,opt,name=cpu_id,json=cpuId,proto3" json:"cpu_id,omitempty"`
}

func (m *TlsProxyCbSpec) Reset()                    { *m = TlsProxyCbSpec{} }
func (m *TlsProxyCbSpec) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyCbSpec) ProtoMessage()               {}
func (*TlsProxyCbSpec) Descriptor() ([]byte, []int) { return fileDescriptorTlsProxyCb2, []int{1} }

func (m *TlsProxyCbSpec) GetKeyOrHandle() *TlsProxyCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *TlsProxyCbSpec) GetNicDecHead() uint32 {
	if m != nil {
		return m.NicDecHead
	}
	return 0
}

func (m *TlsProxyCbSpec) GetNicDecTail() uint32 {
	if m != nil {
		return m.NicDecTail
	}
	return 0
}

func (m *TlsProxyCbSpec) GetCommand() uint32 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *TlsProxyCbSpec) GetDebugDol() uint32 {
	if m != nil {
		return m.DebugDol
	}
	return 0
}

func (m *TlsProxyCbSpec) GetSerqPi() uint32 {
	if m != nil {
		return m.SerqPi
	}
	return 0
}

func (m *TlsProxyCbSpec) GetSerqCi() uint32 {
	if m != nil {
		return m.SerqCi
	}
	return 0
}

func (m *TlsProxyCbSpec) GetBsqPi() uint32 {
	if m != nil {
		return m.BsqPi
	}
	return 0
}

func (m *TlsProxyCbSpec) GetBsqCi() uint32 {
	if m != nil {
		return m.BsqCi
	}
	return 0
}

func (m *TlsProxyCbSpec) GetCryptoKeyIdx() uint32 {
	if m != nil {
		return m.CryptoKeyIdx
	}
	return 0
}

func (m *TlsProxyCbSpec) GetSerqBase() uint32 {
	if m != nil {
		return m.SerqBase
	}
	return 0
}

func (m *TlsProxyCbSpec) GetSesqBase() uint32 {
	if m != nil {
		return m.SesqBase
	}
	return 0
}

func (m *TlsProxyCbSpec) GetTnmdrAlloc() uint64 {
	if m != nil {
		return m.TnmdrAlloc
	}
	return 0
}

func (m *TlsProxyCbSpec) GetTnmprAlloc() uint64 {
	if m != nil {
		return m.TnmprAlloc
	}
	return 0
}

func (m *TlsProxyCbSpec) GetRnmdrFree() uint64 {
	if m != nil {
		return m.RnmdrFree
	}
	return 0
}

func (m *TlsProxyCbSpec) GetRnmprFree() uint64 {
	if m != nil {
		return m.RnmprFree
	}
	return 0
}

func (m *TlsProxyCbSpec) GetEncRequests() uint64 {
	if m != nil {
		return m.EncRequests
	}
	return 0
}

func (m *TlsProxyCbSpec) GetEncCompletions() uint64 {
	if m != nil {
		return m.EncCompletions
	}
	return 0
}

func (m *TlsProxyCbSpec) GetEncFailures() uint64 {
	if m != nil {
		return m.EncFailures
	}
	return 0
}

func (m *TlsProxyCbSpec) GetDecRequests() uint64 {
	if m != nil {
		return m.DecRequests
	}
	return 0
}

func (m *TlsProxyCbSpec) GetDecCompletions() uint64 {
	if m != nil {
		return m.DecCompletions
	}
	return 0
}

func (m *TlsProxyCbSpec) GetDecFailures() uint64 {
	if m != nil {
		return m.DecFailures
	}
	return 0
}

func (m *TlsProxyCbSpec) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *TlsProxyCbSpec) GetExplicitIv() uint64 {
	if m != nil {
		return m.ExplicitIv
	}
	return 0
}

func (m *TlsProxyCbSpec) GetPreDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PreDebugStage0_7Thread
	}
	return 0
}

func (m *TlsProxyCbSpec) GetPostDebugStage0_7Thread() uint32 {
	if m != nil {
		return m.PostDebugStage0_7Thread
	}
	return 0
}

func (m *TlsProxyCbSpec) GetIsDecryptFlow() bool {
	if m != nil {
		return m.IsDecryptFlow
	}
	return false
}

func (m *TlsProxyCbSpec) GetOtherFid() uint32 {
	if m != nil {
		return m.OtherFid
	}
	return 0
}

func (m *TlsProxyCbSpec) GetL7ProxyType() AppRedirType {
	if m != nil {
		return m.L7ProxyType
	}
	return AppRedirType_APP_REDIR_TYPE_NONE
}

func (m *TlsProxyCbSpec) GetCryptoHmacKeyIdx() uint32 {
	if m != nil {
		return m.CryptoHmacKeyIdx
	}
	return 0
}

func (m *TlsProxyCbSpec) GetMacRequests() uint64 {
	if m != nil {
		return m.MacRequests
	}
	return 0
}

func (m *TlsProxyCbSpec) GetMacCompletions() uint64 {
	if m != nil {
		return m.MacCompletions
	}
	return 0
}

func (m *TlsProxyCbSpec) GetMacFailures() uint64 {
	if m != nil {
		return m.MacFailures
	}
	return 0
}

func (m *TlsProxyCbSpec) GetCpuId() uint32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

// TlsProxyCbRequestMsg is batched add or modify tls_proxy_cb request
type TlsProxyCbRequestMsg struct {
	Request []*TlsProxyCbSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsProxyCbRequestMsg) Reset()                    { *m = TlsProxyCbRequestMsg{} }
func (m *TlsProxyCbRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyCbRequestMsg) ProtoMessage()               {}
func (*TlsProxyCbRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorTlsProxyCb2, []int{2} }

func (m *TlsProxyCbRequestMsg) GetRequest() []*TlsProxyCbSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsProxyCbStatus is the operational status of a given tls_proxy_cb
type TlsProxyCbStatus struct {
	TlsProxyCbHandle uint64 `protobuf:"fixed64,1,opt,name=tls_proxy_cb_handle,json=tlsProxyCbHandle,proto3" json:"tls_proxy_cb_handle,omitempty"`
}

func (m *TlsProxyCbStatus) Reset()                    { *m = TlsProxyCbStatus{} }
func (m *TlsProxyCbStatus) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyCbStatus) ProtoMessage()               {}
func (*TlsProxyCbStatus) Descriptor() ([]byte, []int) { return fileDescriptorTlsProxyCb2, []int{3} }

func (m *TlsProxyCbStatus) GetTlsProxyCbHandle() uint64 {
	if m != nil {
		return m.TlsProxyCbHandle
	}
	return 0
}

// TlsProxyCbResponse is response to TlsProxyCbSpec
type TlsProxyCbResponse struct {
	ApiStatus        ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	TlsProxyCbStatus *TlsProxyCbStatus `protobuf:"bytes,2,opt,name=tls_proxy_cb_status,json=tlsProxyCbStatus" json:"tls_proxy_cb_status,omitempty"`
}

func (m *TlsProxyCbResponse) Reset()                    { *m = TlsProxyCbResponse{} }
func (m *TlsProxyCbResponse) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyCbResponse) ProtoMessage()               {}
func (*TlsProxyCbResponse) Descriptor() ([]byte, []int) { return fileDescriptorTlsProxyCb2, []int{4} }

func (m *TlsProxyCbResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsProxyCbResponse) GetTlsProxyCbStatus() *TlsProxyCbStatus {
	if m != nil {
		return m.TlsProxyCbStatus
	}
	return nil
}

// TlsProxyCbResponseMsg is batched response to TlsProxyCbRequestMsg
type TlsProxyCbResponseMsg struct {
	Response []*TlsProxyCbResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsProxyCbResponseMsg) Reset()                    { *m = TlsProxyCbResponseMsg{} }
func (m *TlsProxyCbResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyCbResponseMsg) ProtoMessage()               {}
func (*TlsProxyCbResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorTlsProxyCb2, []int{5} }

func (m *TlsProxyCbResponseMsg) GetResponse() []*TlsProxyCbResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// TlsProxyCbDeleteRequest is used to delete a tls_proxy_cb
type TlsProxyCbDeleteRequest struct {
	KeyOrHandle *TlsProxyCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsProxyCbDeleteRequest) Reset()         { *m = TlsProxyCbDeleteRequest{} }
func (m *TlsProxyCbDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*TlsProxyCbDeleteRequest) ProtoMessage()    {}
func (*TlsProxyCbDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTlsProxyCb2, []int{6}
}

func (m *TlsProxyCbDeleteRequest) GetKeyOrHandle() *TlsProxyCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsProxyCbDeleteRequestMsg is used to delete a batch of tls_proxy_cbs
type TlsProxyCbDeleteRequestMsg struct {
	Request []*TlsProxyCbDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsProxyCbDeleteRequestMsg) Reset()         { *m = TlsProxyCbDeleteRequestMsg{} }
func (m *TlsProxyCbDeleteRequestMsg) String() string { return proto.CompactTextString(m) }
func (*TlsProxyCbDeleteRequestMsg) ProtoMessage()    {}
func (*TlsProxyCbDeleteRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorTlsProxyCb2, []int{7}
}

func (m *TlsProxyCbDeleteRequestMsg) GetRequest() []*TlsProxyCbDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsProxyCbDeleteResponseMsg is batched response to TlsProxyCbDeleteRequestMsg
type TlsProxyCbDeleteResponseMsg struct {
	ApiStatus []ApiStatus `protobuf:"varint,1,rep,packed,name=api_status,json=apiStatus,enum=types.ApiStatus" json:"api_status,omitempty"`
}

func (m *TlsProxyCbDeleteResponseMsg) Reset()         { *m = TlsProxyCbDeleteResponseMsg{} }
func (m *TlsProxyCbDeleteResponseMsg) String() string { return proto.CompactTextString(m) }
func (*TlsProxyCbDeleteResponseMsg) ProtoMessage()    {}
func (*TlsProxyCbDeleteResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorTlsProxyCb2, []int{8}
}

func (m *TlsProxyCbDeleteResponseMsg) GetApiStatus() []ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return nil
}

// TlsProxyCbGetRequest is used to get information about a tls_proxy_cb
type TlsProxyCbGetRequest struct {
	KeyOrHandle *TlsProxyCbKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty"`
}

func (m *TlsProxyCbGetRequest) Reset()                    { *m = TlsProxyCbGetRequest{} }
func (m *TlsProxyCbGetRequest) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyCbGetRequest) ProtoMessage()               {}
func (*TlsProxyCbGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorTlsProxyCb2, []int{9} }

func (m *TlsProxyCbGetRequest) GetKeyOrHandle() *TlsProxyCbKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// TlsProxyCbGetRequestMsg is batched GET requests for tls_proxy_cbs
type TlsProxyCbGetRequestMsg struct {
	Request []*TlsProxyCbGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *TlsProxyCbGetRequestMsg) Reset()         { *m = TlsProxyCbGetRequestMsg{} }
func (m *TlsProxyCbGetRequestMsg) String() string { return proto.CompactTextString(m) }
func (*TlsProxyCbGetRequestMsg) ProtoMessage()    {}
func (*TlsProxyCbGetRequestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorTlsProxyCb2, []int{10}
}

func (m *TlsProxyCbGetRequestMsg) GetRequest() []*TlsProxyCbGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// TlsProxyCbStats is the statistics object for each tls_proxy_cb
type TlsProxyCbStats struct {
}

func (m *TlsProxyCbStats) Reset()                    { *m = TlsProxyCbStats{} }
func (m *TlsProxyCbStats) String() string            { return proto.CompactTextString(m) }
func (*TlsProxyCbStats) ProtoMessage()               {}
func (*TlsProxyCbStats) Descriptor() ([]byte, []int) { return fileDescriptorTlsProxyCb2, []int{11} }

// TlsProxyCbGetResponse captures all the information about a tls_proxy_cb
// only if api_status indicates success, other fields are valid
type TlsProxyCbGetResponse struct {
	ApiStatus ApiStatus         `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty"`
	Spec      *TlsProxyCbSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *TlsProxyCbStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *TlsProxyCbStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *TlsProxyCbGetResponse) Reset()         { *m = TlsProxyCbGetResponse{} }
func (m *TlsProxyCbGetResponse) String() string { return proto.CompactTextString(m) }
func (*TlsProxyCbGetResponse) ProtoMessage()    {}
func (*TlsProxyCbGetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTlsProxyCb2, []int{12}
}

func (m *TlsProxyCbGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *TlsProxyCbGetResponse) GetSpec() *TlsProxyCbSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TlsProxyCbGetResponse) GetStatus() *TlsProxyCbStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TlsProxyCbGetResponse) GetStats() *TlsProxyCbStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// TlsProxyCbGetResponseMsg is batched response to TlsProxyCbGetRequestMsg
type TlsProxyCbGetResponseMsg struct {
	Response []*TlsProxyCbGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *TlsProxyCbGetResponseMsg) Reset()         { *m = TlsProxyCbGetResponseMsg{} }
func (m *TlsProxyCbGetResponseMsg) String() string { return proto.CompactTextString(m) }
func (*TlsProxyCbGetResponseMsg) ProtoMessage()    {}
func (*TlsProxyCbGetResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorTlsProxyCb2, []int{13}
}

func (m *TlsProxyCbGetResponseMsg) GetResponse() []*TlsProxyCbGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*TlsProxyCbKeyHandle)(nil), "tls_proxy.TlsProxyCbKeyHandle")
	proto.RegisterType((*TlsProxyCbSpec)(nil), "tls_proxy.TlsProxyCbSpec")
	proto.RegisterType((*TlsProxyCbRequestMsg)(nil), "tls_proxy.TlsProxyCbRequestMsg")
	proto.RegisterType((*TlsProxyCbStatus)(nil), "tls_proxy.TlsProxyCbStatus")
	proto.RegisterType((*TlsProxyCbResponse)(nil), "tls_proxy.TlsProxyCbResponse")
	proto.RegisterType((*TlsProxyCbResponseMsg)(nil), "tls_proxy.TlsProxyCbResponseMsg")
	proto.RegisterType((*TlsProxyCbDeleteRequest)(nil), "tls_proxy.TlsProxyCbDeleteRequest")
	proto.RegisterType((*TlsProxyCbDeleteRequestMsg)(nil), "tls_proxy.TlsProxyCbDeleteRequestMsg")
	proto.RegisterType((*TlsProxyCbDeleteResponseMsg)(nil), "tls_proxy.TlsProxyCbDeleteResponseMsg")
	proto.RegisterType((*TlsProxyCbGetRequest)(nil), "tls_proxy.TlsProxyCbGetRequest")
	proto.RegisterType((*TlsProxyCbGetRequestMsg)(nil), "tls_proxy.TlsProxyCbGetRequestMsg")
	proto.RegisterType((*TlsProxyCbStats)(nil), "tls_proxy.TlsProxyCbStats")
	proto.RegisterType((*TlsProxyCbGetResponse)(nil), "tls_proxy.TlsProxyCbGetResponse")
	proto.RegisterType((*TlsProxyCbGetResponseMsg)(nil), "tls_proxy.TlsProxyCbGetResponseMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TlsProxyCb service

type TlsProxyCbClient interface {
	TlsProxyCbCreate(ctx context.Context, in *TlsProxyCbRequestMsg, opts ...grpc.CallOption) (*TlsProxyCbResponseMsg, error)
	TlsProxyCbUpdate(ctx context.Context, in *TlsProxyCbRequestMsg, opts ...grpc.CallOption) (*TlsProxyCbResponseMsg, error)
	TlsProxyCbDelete(ctx context.Context, in *TlsProxyCbDeleteRequestMsg, opts ...grpc.CallOption) (*TlsProxyCbDeleteResponseMsg, error)
	TlsProxyCbGet(ctx context.Context, in *TlsProxyCbGetRequestMsg, opts ...grpc.CallOption) (*TlsProxyCbGetResponseMsg, error)
}

type tlsProxyCbClient struct {
	cc *grpc.ClientConn
}

func NewTlsProxyCbClient(cc *grpc.ClientConn) TlsProxyCbClient {
	return &tlsProxyCbClient{cc}
}

func (c *tlsProxyCbClient) TlsProxyCbCreate(ctx context.Context, in *TlsProxyCbRequestMsg, opts ...grpc.CallOption) (*TlsProxyCbResponseMsg, error) {
	out := new(TlsProxyCbResponseMsg)
	err := grpc.Invoke(ctx, "/tls_proxy.TlsProxyCb/TlsProxyCbCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlsProxyCbClient) TlsProxyCbUpdate(ctx context.Context, in *TlsProxyCbRequestMsg, opts ...grpc.CallOption) (*TlsProxyCbResponseMsg, error) {
	out := new(TlsProxyCbResponseMsg)
	err := grpc.Invoke(ctx, "/tls_proxy.TlsProxyCb/TlsProxyCbUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlsProxyCbClient) TlsProxyCbDelete(ctx context.Context, in *TlsProxyCbDeleteRequestMsg, opts ...grpc.CallOption) (*TlsProxyCbDeleteResponseMsg, error) {
	out := new(TlsProxyCbDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/tls_proxy.TlsProxyCb/TlsProxyCbDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tlsProxyCbClient) TlsProxyCbGet(ctx context.Context, in *TlsProxyCbGetRequestMsg, opts ...grpc.CallOption) (*TlsProxyCbGetResponseMsg, error) {
	out := new(TlsProxyCbGetResponseMsg)
	err := grpc.Invoke(ctx, "/tls_proxy.TlsProxyCb/TlsProxyCbGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TlsProxyCb service

type TlsProxyCbServer interface {
	TlsProxyCbCreate(context.Context, *TlsProxyCbRequestMsg) (*TlsProxyCbResponseMsg, error)
	TlsProxyCbUpdate(context.Context, *TlsProxyCbRequestMsg) (*TlsProxyCbResponseMsg, error)
	TlsProxyCbDelete(context.Context, *TlsProxyCbDeleteRequestMsg) (*TlsProxyCbDeleteResponseMsg, error)
	TlsProxyCbGet(context.Context, *TlsProxyCbGetRequestMsg) (*TlsProxyCbGetResponseMsg, error)
}

func RegisterTlsProxyCbServer(s *grpc.Server, srv TlsProxyCbServer) {
	s.RegisterService(&_TlsProxyCb_serviceDesc, srv)
}

func _TlsProxyCb_TlsProxyCbCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsProxyCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlsProxyCbServer).TlsProxyCbCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tls_proxy.TlsProxyCb/TlsProxyCbCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlsProxyCbServer).TlsProxyCbCreate(ctx, req.(*TlsProxyCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TlsProxyCb_TlsProxyCbUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsProxyCbRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlsProxyCbServer).TlsProxyCbUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tls_proxy.TlsProxyCb/TlsProxyCbUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlsProxyCbServer).TlsProxyCbUpdate(ctx, req.(*TlsProxyCbRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TlsProxyCb_TlsProxyCbDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsProxyCbDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlsProxyCbServer).TlsProxyCbDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tls_proxy.TlsProxyCb/TlsProxyCbDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlsProxyCbServer).TlsProxyCbDelete(ctx, req.(*TlsProxyCbDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TlsProxyCb_TlsProxyCbGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TlsProxyCbGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TlsProxyCbServer).TlsProxyCbGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tls_proxy.TlsProxyCb/TlsProxyCbGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TlsProxyCbServer).TlsProxyCbGet(ctx, req.(*TlsProxyCbGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _TlsProxyCb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tls_proxy.TlsProxyCb",
	HandlerType: (*TlsProxyCbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TlsProxyCbCreate",
			Handler:    _TlsProxyCb_TlsProxyCbCreate_Handler,
		},
		{
			MethodName: "TlsProxyCbUpdate",
			Handler:    _TlsProxyCb_TlsProxyCbUpdate_Handler,
		},
		{
			MethodName: "TlsProxyCbDelete",
			Handler:    _TlsProxyCb_TlsProxyCbDelete_Handler,
		},
		{
			MethodName: "TlsProxyCbGet",
			Handler:    _TlsProxyCb_TlsProxyCbGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tls_proxy_cb2.proto",
}

func (m *TlsProxyCbKeyHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbKeyHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		nn1, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *TlsProxyCbKeyHandle_TlsProxyCbId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.TlsProxyCbId))
	return i, nil
}
func (m *TlsProxyCbKeyHandle_TlsProxyCbHandle) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TlsProxyCbHandle))
	i += 8
	return i, nil
}
func (m *TlsProxyCbSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.NicDecHead != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.NicDecHead))
	}
	if m.NicDecTail != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.NicDecTail))
	}
	if m.Command != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.Command))
	}
	if m.DebugDol != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.DebugDol))
	}
	if m.SerqPi != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.SerqPi))
	}
	if m.SerqCi != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.SerqCi))
	}
	if m.BsqPi != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.BsqPi))
	}
	if m.BsqCi != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.BsqCi))
	}
	if m.CryptoKeyIdx != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.CryptoKeyIdx))
	}
	if m.SerqBase != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.SerqBase))
	}
	if m.SesqBase != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.SesqBase))
	}
	if m.TnmdrAlloc != 0 {
		dAtA[i] = 0x69
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TnmdrAlloc))
		i += 8
	}
	if m.TnmprAlloc != 0 {
		dAtA[i] = 0x71
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TnmprAlloc))
		i += 8
	}
	if m.RnmdrFree != 0 {
		dAtA[i] = 0x79
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RnmdrFree))
		i += 8
	}
	if m.RnmprFree != 0 {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.RnmprFree))
		i += 8
	}
	if m.EncRequests != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.EncRequests))
		i += 8
	}
	if m.EncCompletions != 0 {
		dAtA[i] = 0x91
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.EncCompletions))
		i += 8
	}
	if m.EncFailures != 0 {
		dAtA[i] = 0x99
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.EncFailures))
		i += 8
	}
	if m.DecRequests != 0 {
		dAtA[i] = 0xa1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DecRequests))
		i += 8
	}
	if m.DecCompletions != 0 {
		dAtA[i] = 0xa9
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DecCompletions))
		i += 8
	}
	if m.DecFailures != 0 {
		dAtA[i] = 0xb1
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DecFailures))
		i += 8
	}
	if m.Salt != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.ExplicitIv))
	}
	if m.PreDebugStage0_7Thread != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.PreDebugStage0_7Thread))
	}
	if m.PostDebugStage0_7Thread != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.PostDebugStage0_7Thread))
	}
	if m.IsDecryptFlow {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.IsDecryptFlow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OtherFid != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.OtherFid))
	}
	if m.L7ProxyType != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.L7ProxyType))
	}
	if m.CryptoHmacKeyIdx != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.CryptoHmacKeyIdx))
	}
	if m.MacRequests != 0 {
		dAtA[i] = 0xf9
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MacRequests))
		i += 8
	}
	if m.MacCompletions != 0 {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MacCompletions))
		i += 8
	}
	if m.MacFailures != 0 {
		dAtA[i] = 0x89
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MacFailures))
		i += 8
	}
	if m.CpuId != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.CpuId))
	}
	return i, nil
}

func (m *TlsProxyCbRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTlsProxyCb2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TlsProxyCbStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TlsProxyCbHandle != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TlsProxyCbHandle))
		i += 8
	}
	return i, nil
}

func (m *TlsProxyCbResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.ApiStatus))
	}
	if m.TlsProxyCbStatus != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.TlsProxyCbStatus.Size()))
		n3, err := m.TlsProxyCbStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *TlsProxyCbResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTlsProxyCb2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TlsProxyCbDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n4, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *TlsProxyCbDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTlsProxyCb2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TlsProxyCbDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		dAtA6 := make([]byte, len(m.ApiStatus)*10)
		var j5 int
		for _, num := range m.ApiStatus {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *TlsProxyCbGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n7, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *TlsProxyCbGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTlsProxyCb2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TlsProxyCbStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TlsProxyCbGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.Spec.Size()))
		n8, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.Status.Size()))
		n9, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTlsProxyCb2(dAtA, i, uint64(m.Stats.Size()))
		n10, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *TlsProxyCbGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TlsProxyCbGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTlsProxyCb2(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTlsProxyCb2(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TlsProxyCbKeyHandle) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		n += m.KeyOrHandle.Size()
	}
	return n
}

func (m *TlsProxyCbKeyHandle_TlsProxyCbId) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovTlsProxyCb2(uint64(m.TlsProxyCbId))
	return n
}
func (m *TlsProxyCbKeyHandle_TlsProxyCbHandle) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *TlsProxyCbSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovTlsProxyCb2(uint64(l))
	}
	if m.NicDecHead != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.NicDecHead))
	}
	if m.NicDecTail != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.NicDecTail))
	}
	if m.Command != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.Command))
	}
	if m.DebugDol != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.DebugDol))
	}
	if m.SerqPi != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.SerqPi))
	}
	if m.SerqCi != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.SerqCi))
	}
	if m.BsqPi != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.BsqPi))
	}
	if m.BsqCi != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.BsqCi))
	}
	if m.CryptoKeyIdx != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.CryptoKeyIdx))
	}
	if m.SerqBase != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.SerqBase))
	}
	if m.SesqBase != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.SesqBase))
	}
	if m.TnmdrAlloc != 0 {
		n += 9
	}
	if m.TnmprAlloc != 0 {
		n += 9
	}
	if m.RnmdrFree != 0 {
		n += 9
	}
	if m.RnmprFree != 0 {
		n += 10
	}
	if m.EncRequests != 0 {
		n += 10
	}
	if m.EncCompletions != 0 {
		n += 10
	}
	if m.EncFailures != 0 {
		n += 10
	}
	if m.DecRequests != 0 {
		n += 10
	}
	if m.DecCompletions != 0 {
		n += 10
	}
	if m.DecFailures != 0 {
		n += 10
	}
	if m.Salt != 0 {
		n += 2 + sovTlsProxyCb2(uint64(m.Salt))
	}
	if m.ExplicitIv != 0 {
		n += 2 + sovTlsProxyCb2(uint64(m.ExplicitIv))
	}
	if m.PreDebugStage0_7Thread != 0 {
		n += 2 + sovTlsProxyCb2(uint64(m.PreDebugStage0_7Thread))
	}
	if m.PostDebugStage0_7Thread != 0 {
		n += 2 + sovTlsProxyCb2(uint64(m.PostDebugStage0_7Thread))
	}
	if m.IsDecryptFlow {
		n += 3
	}
	if m.OtherFid != 0 {
		n += 2 + sovTlsProxyCb2(uint64(m.OtherFid))
	}
	if m.L7ProxyType != 0 {
		n += 2 + sovTlsProxyCb2(uint64(m.L7ProxyType))
	}
	if m.CryptoHmacKeyIdx != 0 {
		n += 2 + sovTlsProxyCb2(uint64(m.CryptoHmacKeyIdx))
	}
	if m.MacRequests != 0 {
		n += 10
	}
	if m.MacCompletions != 0 {
		n += 10
	}
	if m.MacFailures != 0 {
		n += 10
	}
	if m.CpuId != 0 {
		n += 2 + sovTlsProxyCb2(uint64(m.CpuId))
	}
	return n
}

func (m *TlsProxyCbRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovTlsProxyCb2(uint64(l))
		}
	}
	return n
}

func (m *TlsProxyCbStatus) Size() (n int) {
	var l int
	_ = l
	if m.TlsProxyCbHandle != 0 {
		n += 9
	}
	return n
}

func (m *TlsProxyCbResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.ApiStatus))
	}
	if m.TlsProxyCbStatus != nil {
		l = m.TlsProxyCbStatus.Size()
		n += 1 + l + sovTlsProxyCb2(uint64(l))
	}
	return n
}

func (m *TlsProxyCbResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovTlsProxyCb2(uint64(l))
		}
	}
	return n
}

func (m *TlsProxyCbDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovTlsProxyCb2(uint64(l))
	}
	return n
}

func (m *TlsProxyCbDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovTlsProxyCb2(uint64(l))
		}
	}
	return n
}

func (m *TlsProxyCbDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.ApiStatus) > 0 {
		l = 0
		for _, e := range m.ApiStatus {
			l += sovTlsProxyCb2(uint64(e))
		}
		n += 1 + sovTlsProxyCb2(uint64(l)) + l
	}
	return n
}

func (m *TlsProxyCbGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovTlsProxyCb2(uint64(l))
	}
	return n
}

func (m *TlsProxyCbGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovTlsProxyCb2(uint64(l))
		}
	}
	return n
}

func (m *TlsProxyCbStats) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TlsProxyCbGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovTlsProxyCb2(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovTlsProxyCb2(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTlsProxyCb2(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovTlsProxyCb2(uint64(l))
	}
	return n
}

func (m *TlsProxyCbGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovTlsProxyCb2(uint64(l))
		}
	}
	return n
}

func sovTlsProxyCb2(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTlsProxyCb2(x uint64) (n int) {
	return sovTlsProxyCb2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TlsProxyCbKeyHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbKeyHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbKeyHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsProxyCbId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyOrHandle = &TlsProxyCbKeyHandle_TlsProxyCbId{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsProxyCbHandle", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.KeyOrHandle = &TlsProxyCbKeyHandle_TlsProxyCbHandle{v}
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TlsProxyCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicDecHead", wireType)
			}
			m.NicDecHead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NicDecHead |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NicDecTail", wireType)
			}
			m.NicDecTail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NicDecTail |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugDol", wireType)
			}
			m.DebugDol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebugDol |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqPi", wireType)
			}
			m.SerqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqCi", wireType)
			}
			m.SerqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsqPi", wireType)
			}
			m.BsqPi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsqPi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BsqCi", wireType)
			}
			m.BsqCi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BsqCi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptoKeyIdx", wireType)
			}
			m.CryptoKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CryptoKeyIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerqBase", wireType)
			}
			m.SerqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SerqBase |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SesqBase", wireType)
			}
			m.SesqBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SesqBase |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TnmdrAlloc", wireType)
			}
			m.TnmdrAlloc = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TnmdrAlloc = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TnmprAlloc", wireType)
			}
			m.TnmprAlloc = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TnmprAlloc = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RnmdrFree", wireType)
			}
			m.RnmdrFree = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.RnmdrFree = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RnmprFree", wireType)
			}
			m.RnmprFree = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.RnmprFree = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncRequests", wireType)
			}
			m.EncRequests = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.EncRequests = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncCompletions", wireType)
			}
			m.EncCompletions = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.EncCompletions = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 19:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncFailures", wireType)
			}
			m.EncFailures = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.EncFailures = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecRequests", wireType)
			}
			m.DecRequests = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DecRequests = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecCompletions", wireType)
			}
			m.DecCompletions = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DecCompletions = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 22:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecFailures", wireType)
			}
			m.DecFailures = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DecFailures = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplicitIv", wireType)
			}
			m.ExplicitIv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExplicitIv |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDebugStage0_7Thread", wireType)
			}
			m.PreDebugStage0_7Thread = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreDebugStage0_7Thread |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostDebugStage0_7Thread", wireType)
			}
			m.PostDebugStage0_7Thread = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostDebugStage0_7Thread |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDecryptFlow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDecryptFlow = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherFid", wireType)
			}
			m.OtherFid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherFid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L7ProxyType", wireType)
			}
			m.L7ProxyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L7ProxyType |= (AppRedirType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptoHmacKeyIdx", wireType)
			}
			m.CryptoHmacKeyIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CryptoHmacKeyIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacRequests", wireType)
			}
			m.MacRequests = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MacRequests = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 32:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacCompletions", wireType)
			}
			m.MacCompletions = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MacCompletions = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 33:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacFailures", wireType)
			}
			m.MacFailures = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MacFailures = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuId", wireType)
			}
			m.CpuId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TlsProxyCbSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsProxyCbHandle", wireType)
			}
			m.TlsProxyCbHandle = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsProxyCbHandle = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsProxyCbStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TlsProxyCbStatus == nil {
				m.TlsProxyCbStatus = &TlsProxyCbStatus{}
			}
			if err := m.TlsProxyCbStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TlsProxyCbResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TlsProxyCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TlsProxyCbDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ApiStatus
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTlsProxyCb2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ApiStatus(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ApiStatus = append(m.ApiStatus, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTlsProxyCb2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTlsProxyCb2
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ApiStatus
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTlsProxyCb2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ApiStatus(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ApiStatus = append(m.ApiStatus, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &TlsProxyCbKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &TlsProxyCbGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &TlsProxyCbSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &TlsProxyCbStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &TlsProxyCbStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TlsProxyCbGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TlsProxyCbGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TlsProxyCbGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &TlsProxyCbGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTlsProxyCb2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlsProxyCb2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTlsProxyCb2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTlsProxyCb2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTlsProxyCb2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTlsProxyCb2
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTlsProxyCb2
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTlsProxyCb2(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTlsProxyCb2 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTlsProxyCb2   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tls_proxy_cb2.proto", fileDescriptorTlsProxyCb2) }

var fileDescriptorTlsProxyCb2 = []byte{
	// 1097 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdb, 0x4e, 0x1b, 0x57,
	0x17, 0xce, 0x04, 0x62, 0xf0, 0xf2, 0x01, 0xb2, 0x09, 0x61, 0x63, 0x7e, 0xc0, 0xcc, 0xdf, 0xa6,
	0xbe, 0x09, 0x89, 0xcc, 0x05, 0x6d, 0xd5, 0x1b, 0x0e, 0xa2, 0x50, 0x94, 0x36, 0x9a, 0x50, 0xb5,
	0x42, 0xaa, 0x46, 0xe3, 0x3d, 0x0b, 0xbc, 0x95, 0xb1, 0x67, 0x67, 0xf6, 0x38, 0xc1, 0x77, 0x7d,
	0x85, 0xbe, 0x55, 0xa5, 0xde, 0xf4, 0x09, 0xaa, 0x8a, 0x17, 0x69, 0xb5, 0x0f, 0x9e, 0x19, 0x1b,
	0x03, 0x52, 0xc5, 0x15, 0x33, 0xeb, 0xfb, 0xd6, 0xb7, 0xd6, 0xac, 0x13, 0x86, 0xa5, 0x34, 0x92,
	0xbe, 0x48, 0xe2, 0xab, 0xa1, 0xcf, 0x3a, 0xed, 0x6d, 0x91, 0xc4, 0x69, 0x4c, 0xca, 0x99, 0xb1,
	0x51, 0x49, 0x87, 0x02, 0xa5, 0xb1, 0xbb, 0xbf, 0x3a, 0xb0, 0x74, 0x16, 0xc9, 0xb7, 0x0a, 0x39,
	0xe8, 0x9c, 0xe2, 0xf0, 0x38, 0xe8, 0x87, 0x11, 0x92, 0x2f, 0x60, 0xa1, 0x28, 0xe3, 0xf3, 0x90,
	0x3a, 0x4d, 0xa7, 0x55, 0x3b, 0x7e, 0xe4, 0x55, 0xd3, 0x8c, 0x7f, 0x12, 0x92, 0x57, 0xe3, 0xf1,
	0xfc, 0xae, 0xf6, 0xa7, 0x8f, 0x9b, 0x4e, 0xab, 0x74, 0xfc, 0xc8, 0x5b, 0xcc, 0xc9, 0x46, 0x79,
	0x7f, 0x01, 0x6a, 0xef, 0x71, 0xe8, 0xc7, 0x89, 0xa5, 0xba, 0x7f, 0x94, 0xa1, 0x9e, 0xa7, 0xf0,
	0x4e, 0x20, 0x23, 0xfb, 0x13, 0x1c, 0x1d, 0xbb, 0xd2, 0xde, 0xd8, 0xce, 0x42, 0x6d, 0x4f, 0x49,
	0xda, 0xab, 0xbc, 0xc7, 0xe1, 0x0f, 0x89, 0xfd, 0x82, 0x26, 0x54, 0xfb, 0x9c, 0xf9, 0x21, 0x32,
	0xbf, 0x8b, 0x41, 0xa8, 0x33, 0xaa, 0x79, 0xd0, 0xe7, 0xec, 0x10, 0xd9, 0x31, 0x06, 0x61, 0x91,
	0x91, 0x06, 0x3c, 0xa2, 0x33, 0x45, 0xc6, 0x59, 0xc0, 0x23, 0x42, 0x61, 0x8e, 0xc5, 0xbd, 0x5e,
	0xd0, 0x0f, 0xe9, 0xac, 0x06, 0x47, 0xaf, 0x64, 0x0d, 0xca, 0x21, 0x76, 0x06, 0x97, 0x7e, 0x18,
	0x47, 0xf4, 0x89, 0xc6, 0xe6, 0xb5, 0xe1, 0x30, 0x8e, 0xc8, 0x0a, 0xcc, 0x49, 0x4c, 0x3e, 0xf8,
	0x82, 0xd3, 0x92, 0x86, 0x4a, 0xea, 0xf5, 0x2d, 0xcf, 0x00, 0xc6, 0xe9, 0x5c, 0x0e, 0x1c, 0x70,
	0xb2, 0x0c, 0xa5, 0x8e, 0xd4, 0x0e, 0xf3, 0xda, 0xfe, 0xa4, 0x23, 0x15, 0xdf, 0x9a, 0x19, 0xa7,
	0xe5, 0xcc, 0x7c, 0xc0, 0xc9, 0x67, 0x50, 0x67, 0xc9, 0x50, 0xa4, 0xb1, 0xaf, 0xaa, 0xc4, 0xc3,
	0x2b, 0x0a, 0x1a, 0xae, 0x1a, 0xeb, 0x29, 0x0e, 0x4f, 0xc2, 0x2b, 0x95, 0xa2, 0x0e, 0xd6, 0x09,
	0x24, 0xd2, 0x8a, 0x49, 0x51, 0x19, 0xf6, 0x03, 0x89, 0x06, 0x94, 0x16, 0xac, 0x8e, 0x40, 0x69,
	0xc0, 0x4d, 0xa8, 0xa4, 0xfd, 0x5e, 0x98, 0xf8, 0x41, 0x14, 0xc5, 0x8c, 0xd6, 0x54, 0x2f, 0x3d,
	0xd0, 0xa6, 0x3d, 0x65, 0xb1, 0x04, 0x31, 0x22, 0xd4, 0x33, 0x82, 0xb0, 0x84, 0x75, 0x80, 0x44,
	0x2b, 0x5c, 0x24, 0x88, 0x74, 0x41, 0xe3, 0x65, 0x6d, 0x39, 0x4a, 0x10, 0x2d, 0x2c, 0x2c, 0xbc,
	0x98, 0xc1, 0xc2, 0xc0, 0x5b, 0x50, 0xc5, 0x3e, 0xf3, 0x13, 0xfc, 0x30, 0x40, 0x99, 0x4a, 0xfa,
	0x54, 0x13, 0x2a, 0xd8, 0x67, 0x9e, 0x35, 0xa9, 0xf9, 0x54, 0x14, 0x16, 0xf7, 0x44, 0x84, 0x29,
	0x8f, 0xfb, 0x92, 0x12, 0xcd, 0xaa, 0x63, 0x9f, 0x1d, 0xe4, 0xd6, 0x91, 0xd6, 0x45, 0xc0, 0xa3,
	0x41, 0x82, 0x92, 0x2e, 0x65, 0x5a, 0x47, 0xd6, 0xa4, 0x28, 0x6a, 0x06, 0xb2, 0x70, 0xcf, 0x0c,
	0x25, 0xc4, 0xb1, 0x70, 0x8a, 0x52, 0x0c, 0xb7, 0x6c, 0xc2, 0x85, 0x38, 0x19, 0x4e, 0x11, 0xb3,
	0x70, 0xcf, 0x33, 0xad, 0x2c, 0x1c, 0x81, 0x59, 0x19, 0x44, 0x29, 0x5d, 0xd1, 0x55, 0xd7, 0xcf,
	0xaa, 0xa0, 0x78, 0x25, 0x22, 0xce, 0x78, 0xea, 0xf3, 0x8f, 0x94, 0x36, 0x9d, 0xd6, 0xac, 0x07,
	0x23, 0xd3, 0xc9, 0x47, 0xf2, 0x25, 0xac, 0x8a, 0x04, 0x7d, 0x33, 0x73, 0x32, 0x0d, 0x2e, 0xf1,
	0xb5, 0xbf, 0xeb, 0xa7, 0xdd, 0x44, 0x8d, 0xf6, 0xaa, 0x56, 0x5a, 0x16, 0x09, 0x1e, 0x2a, 0xfc,
	0x9d, 0x86, 0x77, 0xcf, 0x34, 0x48, 0xbe, 0x86, 0x86, 0x88, 0x65, 0x7a, 0x8b, 0x6b, 0x43, 0xbb,
	0x3e, 0x57, 0x8c, 0x29, 0xbe, 0x2f, 0x60, 0x81, 0x4b, 0xb5, 0x20, 0x6a, 0xae, 0xfc, 0x8b, 0x28,
	0xfe, 0x44, 0xd7, 0x9a, 0x4e, 0x6b, 0xde, 0xab, 0x71, 0x79, 0x68, 0xac, 0x47, 0x51, 0xfc, 0x49,
	0x4d, 0x53, 0x9c, 0x76, 0x31, 0xf1, 0x2f, 0x78, 0x48, 0xff, 0x67, 0xa6, 0x49, 0x1b, 0x8e, 0x78,
	0x48, 0x76, 0xa1, 0x16, 0xed, 0xda, 0x03, 0xa1, 0x4e, 0x0f, 0x5d, 0x6f, 0x3a, 0xad, 0x7a, 0x7b,
	0x69, 0xdb, 0xdc, 0xa1, 0x3d, 0x21, 0x3c, 0x0c, 0x79, 0x72, 0x36, 0x14, 0xe8, 0x55, 0xa2, 0x5d,
	0xbd, 0xd5, 0xea, 0x85, 0xbc, 0x84, 0x25, 0x3b, 0xe6, 0xdd, 0x5e, 0xc0, 0xb2, 0x59, 0xdf, 0xd0,
	0xfa, 0x8b, 0x06, 0x3a, 0xee, 0x05, 0xcc, 0xce, 0xfb, 0x16, 0x54, 0x15, 0x2d, 0x6b, 0xe3, 0xa6,
	0x29, 0x7d, 0x2f, 0x18, 0x6b, 0xa3, 0xa2, 0x14, 0xdb, 0xd8, 0x34, 0x6d, 0xec, 0x05, 0x93, 0x6d,
	0x54, 0xc4, 0xac, 0x8d, 0x5b, 0x99, 0x56, 0xd6, 0xc6, 0x65, 0x28, 0x31, 0x31, 0x50, 0x87, 0xd1,
	0x35, 0xbb, 0xc9, 0xc4, 0xe0, 0x24, 0x74, 0x4f, 0xe1, 0x59, 0x7e, 0x9a, 0x6c, 0xe0, 0x37, 0xf2,
	0x92, 0xec, 0xc0, 0x9c, 0xcd, 0x8c, 0x3a, 0xcd, 0x99, 0x56, 0xa5, 0xbd, 0x3a, 0xf5, 0x98, 0xa9,
	0xf3, 0xe7, 0x8d, 0x98, 0xee, 0x1e, 0x2c, 0x16, 0xa0, 0x34, 0x48, 0x07, 0x52, 0x55, 0x65, 0xda,
	0xc1, 0x75, 0x74, 0x86, 0x37, 0xce, 0xad, 0xfb, 0x9b, 0x03, 0xa4, 0x98, 0x90, 0x14, 0x71, 0x5f,
	0x22, 0x79, 0x05, 0x10, 0x08, 0xae, 0xc6, 0x21, 0x1d, 0x48, 0xed, 0x5c, 0x6f, 0x2f, 0x66, 0x1d,
	0xe1, 0x26, 0x96, 0x57, 0x0e, 0x46, 0x8f, 0xe4, 0xbb, 0x89, 0xb0, 0xd6, 0xf3, 0xb1, 0x3e, 0xcc,
	0x6b, 0xd3, 0xbf, 0xc5, 0x88, 0x14, 0x72, 0x32, 0x16, 0xd7, 0x83, 0xe5, 0x9b, 0x29, 0xa9, 0x22,
	0x7d, 0x05, 0xf3, 0x89, 0x7d, 0xb5, 0x55, 0x5a, 0x9f, 0xaa, 0x3c, 0xf2, 0xf1, 0x32, 0xba, 0xfb,
	0x0b, 0xac, 0xe4, 0xf8, 0x21, 0x46, 0x98, 0xa2, 0xad, 0xfe, 0x43, 0xfc, 0x37, 0x71, 0xcf, 0xa1,
	0x71, 0x8b, 0xbc, 0xca, 0xfb, 0x9b, 0xc9, 0xe6, 0xba, 0x53, 0xb5, 0xc7, 0xfc, 0xf2, 0x2e, 0x7f,
	0x0f, 0x6b, 0x37, 0x39, 0x79, 0x51, 0x26, 0x5b, 0x35, 0x73, 0x4f, 0xab, 0xdc, 0xf3, 0xe2, 0x08,
	0x7e, 0x8b, 0xe9, 0x43, 0xd6, 0xe1, 0xac, 0x58, 0xe6, 0x5c, 0xdb, 0x34, 0x6f, 0xa2, 0x08, 0x9b,
	0x53, 0x85, 0x73, 0xa7, 0xbc, 0x02, 0x4f, 0x61, 0x61, 0x7c, 0x6c, 0xa4, 0xfb, 0x97, 0x53, 0x1c,
	0x12, 0xed, 0xf4, 0x5f, 0x47, 0xf7, 0x25, 0xcc, 0x4a, 0x81, 0xcc, 0xce, 0xea, 0x1d, 0x7b, 0xa7,
	0x69, 0x64, 0x07, 0x4a, 0x56, 0x7b, 0xe6, 0xfe, 0xe1, 0xb6, 0x54, 0xf2, 0x1a, 0x9e, 0xa8, 0x27,
	0xa9, 0x7f, 0x27, 0x54, 0xda, 0x8d, 0x5b, 0x7d, 0xa4, 0x67, 0x88, 0xee, 0xcf, 0x40, 0xa7, 0x7e,
	0x9f, 0x99, 0xa7, 0xc9, 0x3d, 0x68, 0xde, 0x5e, 0xcb, 0xc9, 0x55, 0x68, 0xff, 0xf3, 0x18, 0x20,
	0xe7, 0x90, 0x9f, 0x8a, 0x47, 0xe4, 0x20, 0xc1, 0x20, 0x45, 0xb2, 0x79, 0xcb, 0x5a, 0x8d, 0x9a,
	0xd9, 0x68, 0xde, 0xb9, 0x77, 0x6f, 0xe4, 0xa5, 0xfb, 0x68, 0x5c, 0xf8, 0x47, 0x11, 0x3e, 0x98,
	0x30, 0x2b, 0x0a, 0x9b, 0x85, 0x20, 0x9f, 0xdf, 0xbf, 0x51, 0x4a, 0xfe, 0xc5, 0x9d, 0xb4, 0x62,
	0x90, 0x73, 0xa8, 0x8d, 0x15, 0x92, 0xb8, 0xf7, 0x8c, 0xab, 0x92, 0xff, 0xff, 0x7d, 0x6d, 0xd0,
	0xda, 0xfb, 0xcf, 0x7f, 0xbf, 0xde, 0x70, 0xfe, 0xbc, 0xde, 0x70, 0xfe, 0xbe, 0xde, 0x70, 0xce,
	0xe7, 0xbb, 0x41, 0xa4, 0x7f, 0x6d, 0x77, 0x4a, 0xfa, 0xcf, 0xce, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xd0, 0x79, 0x53, 0x8a, 0xa3, 0x0b, 0x00, 0x00,
}
