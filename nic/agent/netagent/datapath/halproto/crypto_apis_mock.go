// Code generated by MockGen. DO NOT EDIT.
// Source: crypto_apis.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo is a mock of isCryptoAsymApiRespSetupPrivateKey_KeyInfo interface
type MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo struct {
	ctrl     *gomock.Controller
	recorder *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder
}

// MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder is the mock recorder for MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo
type MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder struct {
	mock *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo
}

// NewMockisCryptoAsymApiRespSetupPrivateKey_KeyInfo creates a new mock instance
func NewMockisCryptoAsymApiRespSetupPrivateKey_KeyInfo(ctrl *gomock.Controller) *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo {
	mock := &MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo{ctrl: ctrl}
	mock.recorder = &MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo) EXPECT() *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder {
	return m.recorder
}

// isCryptoAsymApiRespSetupPrivateKey_KeyInfo mocks base method
func (m *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo) isCryptoAsymApiRespSetupPrivateKey_KeyInfo() {
	m.ctrl.Call(m, "isCryptoAsymApiRespSetupPrivateKey_KeyInfo")
}

// isCryptoAsymApiRespSetupPrivateKey_KeyInfo indicates an expected call of isCryptoAsymApiRespSetupPrivateKey_KeyInfo
func (mr *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder) isCryptoAsymApiRespSetupPrivateKey_KeyInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCryptoAsymApiRespSetupPrivateKey_KeyInfo", reflect.TypeOf((*MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo)(nil).isCryptoAsymApiRespSetupPrivateKey_KeyInfo))
}

// MarshalTo mocks base method
func (m *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCryptoAsymApiRespSetupPrivateKey_KeyInfoMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCryptoAsymApiRespSetupPrivateKey_KeyInfo)(nil).Size))
}

// MockisCryptoApiRequest_CryptoApiReq is a mock of isCryptoApiRequest_CryptoApiReq interface
type MockisCryptoApiRequest_CryptoApiReq struct {
	ctrl     *gomock.Controller
	recorder *MockisCryptoApiRequest_CryptoApiReqMockRecorder
}

// MockisCryptoApiRequest_CryptoApiReqMockRecorder is the mock recorder for MockisCryptoApiRequest_CryptoApiReq
type MockisCryptoApiRequest_CryptoApiReqMockRecorder struct {
	mock *MockisCryptoApiRequest_CryptoApiReq
}

// NewMockisCryptoApiRequest_CryptoApiReq creates a new mock instance
func NewMockisCryptoApiRequest_CryptoApiReq(ctrl *gomock.Controller) *MockisCryptoApiRequest_CryptoApiReq {
	mock := &MockisCryptoApiRequest_CryptoApiReq{ctrl: ctrl}
	mock.recorder = &MockisCryptoApiRequest_CryptoApiReqMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCryptoApiRequest_CryptoApiReq) EXPECT() *MockisCryptoApiRequest_CryptoApiReqMockRecorder {
	return m.recorder
}

// isCryptoApiRequest_CryptoApiReq mocks base method
func (m *MockisCryptoApiRequest_CryptoApiReq) isCryptoApiRequest_CryptoApiReq() {
	m.ctrl.Call(m, "isCryptoApiRequest_CryptoApiReq")
}

// isCryptoApiRequest_CryptoApiReq indicates an expected call of isCryptoApiRequest_CryptoApiReq
func (mr *MockisCryptoApiRequest_CryptoApiReqMockRecorder) isCryptoApiRequest_CryptoApiReq() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCryptoApiRequest_CryptoApiReq", reflect.TypeOf((*MockisCryptoApiRequest_CryptoApiReq)(nil).isCryptoApiRequest_CryptoApiReq))
}

// MarshalTo mocks base method
func (m *MockisCryptoApiRequest_CryptoApiReq) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCryptoApiRequest_CryptoApiReqMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCryptoApiRequest_CryptoApiReq)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCryptoApiRequest_CryptoApiReq) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCryptoApiRequest_CryptoApiReqMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCryptoApiRequest_CryptoApiReq)(nil).Size))
}

// MockisCryptoApiResponse_CryptoApiResp is a mock of isCryptoApiResponse_CryptoApiResp interface
type MockisCryptoApiResponse_CryptoApiResp struct {
	ctrl     *gomock.Controller
	recorder *MockisCryptoApiResponse_CryptoApiRespMockRecorder
}

// MockisCryptoApiResponse_CryptoApiRespMockRecorder is the mock recorder for MockisCryptoApiResponse_CryptoApiResp
type MockisCryptoApiResponse_CryptoApiRespMockRecorder struct {
	mock *MockisCryptoApiResponse_CryptoApiResp
}

// NewMockisCryptoApiResponse_CryptoApiResp creates a new mock instance
func NewMockisCryptoApiResponse_CryptoApiResp(ctrl *gomock.Controller) *MockisCryptoApiResponse_CryptoApiResp {
	mock := &MockisCryptoApiResponse_CryptoApiResp{ctrl: ctrl}
	mock.recorder = &MockisCryptoApiResponse_CryptoApiRespMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisCryptoApiResponse_CryptoApiResp) EXPECT() *MockisCryptoApiResponse_CryptoApiRespMockRecorder {
	return m.recorder
}

// isCryptoApiResponse_CryptoApiResp mocks base method
func (m *MockisCryptoApiResponse_CryptoApiResp) isCryptoApiResponse_CryptoApiResp() {
	m.ctrl.Call(m, "isCryptoApiResponse_CryptoApiResp")
}

// isCryptoApiResponse_CryptoApiResp indicates an expected call of isCryptoApiResponse_CryptoApiResp
func (mr *MockisCryptoApiResponse_CryptoApiRespMockRecorder) isCryptoApiResponse_CryptoApiResp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isCryptoApiResponse_CryptoApiResp", reflect.TypeOf((*MockisCryptoApiResponse_CryptoApiResp)(nil).isCryptoApiResponse_CryptoApiResp))
}

// MarshalTo mocks base method
func (m *MockisCryptoApiResponse_CryptoApiResp) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisCryptoApiResponse_CryptoApiRespMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisCryptoApiResponse_CryptoApiResp)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisCryptoApiResponse_CryptoApiResp) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisCryptoApiResponse_CryptoApiRespMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisCryptoApiResponse_CryptoApiResp)(nil).Size))
}

// MockCryptoApisClient is a mock of CryptoApisClient interface
type MockCryptoApisClient struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoApisClientMockRecorder
}

// MockCryptoApisClientMockRecorder is the mock recorder for MockCryptoApisClient
type MockCryptoApisClientMockRecorder struct {
	mock *MockCryptoApisClient
}

// NewMockCryptoApisClient creates a new mock instance
func NewMockCryptoApisClient(ctrl *gomock.Controller) *MockCryptoApisClient {
	mock := &MockCryptoApisClient{ctrl: ctrl}
	mock.recorder = &MockCryptoApisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCryptoApisClient) EXPECT() *MockCryptoApisClientMockRecorder {
	return m.recorder
}

// CryptoApiInvoke mocks base method
func (m *MockCryptoApisClient) CryptoApiInvoke(ctx context.Context, in *CryptoApiRequestMsg, opts ...grpc.CallOption) (*CryptoApiResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CryptoApiInvoke", varargs...)
	ret0, _ := ret[0].(*CryptoApiResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoApiInvoke indicates an expected call of CryptoApiInvoke
func (mr *MockCryptoApisClientMockRecorder) CryptoApiInvoke(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoApiInvoke", reflect.TypeOf((*MockCryptoApisClient)(nil).CryptoApiInvoke), varargs...)
}

// MockCryptoApisServer is a mock of CryptoApisServer interface
type MockCryptoApisServer struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoApisServerMockRecorder
}

// MockCryptoApisServerMockRecorder is the mock recorder for MockCryptoApisServer
type MockCryptoApisServerMockRecorder struct {
	mock *MockCryptoApisServer
}

// NewMockCryptoApisServer creates a new mock instance
func NewMockCryptoApisServer(ctrl *gomock.Controller) *MockCryptoApisServer {
	mock := &MockCryptoApisServer{ctrl: ctrl}
	mock.recorder = &MockCryptoApisServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCryptoApisServer) EXPECT() *MockCryptoApisServerMockRecorder {
	return m.recorder
}

// CryptoApiInvoke mocks base method
func (m *MockCryptoApisServer) CryptoApiInvoke(arg0 context.Context, arg1 *CryptoApiRequestMsg) (*CryptoApiResponseMsg, error) {
	ret := m.ctrl.Call(m, "CryptoApiInvoke", arg0, arg1)
	ret0, _ := ret[0].(*CryptoApiResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CryptoApiInvoke indicates an expected call of CryptoApiInvoke
func (mr *MockCryptoApisServerMockRecorder) CryptoApiInvoke(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoApiInvoke", reflect.TypeOf((*MockCryptoApisServer)(nil).CryptoApiInvoke), arg0, arg1)
}
