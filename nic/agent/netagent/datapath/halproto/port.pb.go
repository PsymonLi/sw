// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: port.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Port breakout modes
type PortBreakoutMode int32

const (
	PortBreakoutMode_PORT_BREAKOUT_MODE_NONE  PortBreakoutMode = 0
	PortBreakoutMode_PORT_BREAKOUT_MODE_4x25G PortBreakoutMode = 1
	PortBreakoutMode_PORT_BREAKOUT_MODE_4x10G PortBreakoutMode = 2
	PortBreakoutMode_PORT_BREAKOUT_MODE_2x50G PortBreakoutMode = 3
)

var PortBreakoutMode_name = map[int32]string{
	0: "PORT_BREAKOUT_MODE_NONE",
	1: "PORT_BREAKOUT_MODE_4x25G",
	2: "PORT_BREAKOUT_MODE_4x10G",
	3: "PORT_BREAKOUT_MODE_2x50G",
}
var PortBreakoutMode_value = map[string]int32{
	"PORT_BREAKOUT_MODE_NONE":  0,
	"PORT_BREAKOUT_MODE_4x25G": 1,
	"PORT_BREAKOUT_MODE_4x10G": 2,
	"PORT_BREAKOUT_MODE_2x50G": 3,
}

func (x PortBreakoutMode) String() string {
	return proto.EnumName(PortBreakoutMode_name, int32(x))
}
func (PortBreakoutMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{0} }

// PortOperStatus reflects the current status of the port
type PortOperStatus int32

const (
	PortOperStatus_PORT_OPER_STATUS_NONE PortOperStatus = 0
	PortOperStatus_PORT_OPER_STATUS_UP   PortOperStatus = 1
	PortOperStatus_PORT_OPER_STATUS_DOWN PortOperStatus = 2
)

var PortOperStatus_name = map[int32]string{
	0: "PORT_OPER_STATUS_NONE",
	1: "PORT_OPER_STATUS_UP",
	2: "PORT_OPER_STATUS_DOWN",
}
var PortOperStatus_value = map[string]int32{
	"PORT_OPER_STATUS_NONE": 0,
	"PORT_OPER_STATUS_UP":   1,
	"PORT_OPER_STATUS_DOWN": 2,
}

func (x PortOperStatus) String() string {
	return proto.EnumName(PortOperStatus_name, int32(x))
}
func (PortOperStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{1} }

// PortAdminState specifies if the port is enabled (admin up) or disabled (admin down)
type PortAdminState int32

const (
	PortAdminState_PORT_ADMIN_STATE_NONE PortAdminState = 0
	PortAdminState_PORT_ADMIN_STATE_DOWN PortAdminState = 1
	PortAdminState_PORT_ADMIN_STATE_UP   PortAdminState = 2
)

var PortAdminState_name = map[int32]string{
	0: "PORT_ADMIN_STATE_NONE",
	1: "PORT_ADMIN_STATE_DOWN",
	2: "PORT_ADMIN_STATE_UP",
}
var PortAdminState_value = map[string]int32{
	"PORT_ADMIN_STATE_NONE": 0,
	"PORT_ADMIN_STATE_DOWN": 1,
	"PORT_ADMIN_STATE_UP":   2,
}

func (x PortAdminState) String() string {
	return proto.EnumName(PortAdminState_name, int32(x))
}
func (PortAdminState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{2} }

// PortType specifies the type of port
type PortType int32

const (
	PortType_PORT_TYPE_NONE PortType = 0
	PortType_PORT_TYPE_ETH  PortType = 1
	PortType_PORT_TYPE_MGMT PortType = 2
)

var PortType_name = map[int32]string{
	0: "PORT_TYPE_NONE",
	1: "PORT_TYPE_ETH",
	2: "PORT_TYPE_MGMT",
}
var PortType_value = map[string]int32{
	"PORT_TYPE_NONE": 0,
	"PORT_TYPE_ETH":  1,
	"PORT_TYPE_MGMT": 2,
}

func (x PortType) String() string {
	return proto.EnumName(PortType_name, int32(x))
}
func (PortType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{3} }

// PortSpeed specifies the speed of the port
type PortSpeed int32

const (
	PortSpeed_PORT_SPEED_NONE PortSpeed = 0
	PortSpeed_PORT_SPEED_1G   PortSpeed = 1
	PortSpeed_PORT_SPEED_10G  PortSpeed = 2
	PortSpeed_PORT_SPEED_25G  PortSpeed = 3
	PortSpeed_PORT_SPEED_40G  PortSpeed = 4
	PortSpeed_PORT_SPEED_50G  PortSpeed = 5
	PortSpeed_PORT_SPEED_100G PortSpeed = 6
)

var PortSpeed_name = map[int32]string{
	0: "PORT_SPEED_NONE",
	1: "PORT_SPEED_1G",
	2: "PORT_SPEED_10G",
	3: "PORT_SPEED_25G",
	4: "PORT_SPEED_40G",
	5: "PORT_SPEED_50G",
	6: "PORT_SPEED_100G",
}
var PortSpeed_value = map[string]int32{
	"PORT_SPEED_NONE": 0,
	"PORT_SPEED_1G":   1,
	"PORT_SPEED_10G":  2,
	"PORT_SPEED_25G":  3,
	"PORT_SPEED_40G":  4,
	"PORT_SPEED_50G":  5,
	"PORT_SPEED_100G": 6,
}

func (x PortSpeed) String() string {
	return proto.EnumName(PortSpeed_name, int32(x))
}
func (PortSpeed) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{4} }

type PortFecType int32

const (
	PortFecType_PORT_FEC_TYPE_NONE PortFecType = 0
	PortFecType_PORT_FEC_TYPE_FC   PortFecType = 1
	PortFecType_PORT_FEC_TYPE_RS   PortFecType = 2
)

var PortFecType_name = map[int32]string{
	0: "PORT_FEC_TYPE_NONE",
	1: "PORT_FEC_TYPE_FC",
	2: "PORT_FEC_TYPE_RS",
}
var PortFecType_value = map[string]int32{
	"PORT_FEC_TYPE_NONE": 0,
	"PORT_FEC_TYPE_FC":   1,
	"PORT_FEC_TYPE_RS":   2,
}

func (x PortFecType) String() string {
	return proto.EnumName(PortFecType_name, int32(x))
}
func (PortFecType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{5} }

// PortSpec message is used to do add/mod properties of a port
type PortSpec struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is the port number
	KeyOrHandle   *PortKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	PortType      PortType       `protobuf:"varint,3,opt,name=port_type,json=portType,proto3,enum=port.PortType" json:"port_type,omitempty" venice:immutable`
	AdminState    PortAdminState `protobuf:"varint,4,opt,name=admin_state,json=adminState,proto3,enum=port.PortAdminState" json:"admin_state,omitempty"`
	PortSpeed     PortSpeed      `protobuf:"varint,6,opt,name=port_speed,json=portSpeed,proto3,enum=port.PortSpeed" json:"port_speed,omitempty"`
	MacId         uint32         `protobuf:"varint,7,opt,name=mac_id,json=macId,proto3" json:"mac_id,omitempty" venice:immutable`
	MacCh         uint32         `protobuf:"varint,8,opt,name=mac_ch,json=macCh,proto3" json:"mac_ch,omitempty" venice:immutable`
	NumLanes      uint32         `protobuf:"varint,9,opt,name=num_lanes,json=numLanes,proto3" json:"num_lanes,omitempty" venice:immutable`
	FecType       PortFecType    `protobuf:"varint,10,opt,name=fec_type,json=fecType,proto3,enum=port.PortFecType" json:"fec_type,omitempty"`
	AutoNegEnable bool           `protobuf:"varint,11,opt,name=auto_neg_enable,json=autoNegEnable,proto3" json:"auto_neg_enable,omitempty"`
	DebounceTime  uint32         `protobuf:"varint,12,opt,name=debounce_time,json=debounceTime,proto3" json:"debounce_time,omitempty"`
	Mtu           uint32         `protobuf:"varint,13,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (m *PortSpec) Reset()                    { *m = PortSpec{} }
func (m *PortSpec) String() string            { return proto.CompactTextString(m) }
func (*PortSpec) ProtoMessage()               {}
func (*PortSpec) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{0} }

func (m *PortSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PortSpec) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortSpec) GetPortType() PortType {
	if m != nil {
		return m.PortType
	}
	return PortType_PORT_TYPE_NONE
}

func (m *PortSpec) GetAdminState() PortAdminState {
	if m != nil {
		return m.AdminState
	}
	return PortAdminState_PORT_ADMIN_STATE_NONE
}

func (m *PortSpec) GetPortSpeed() PortSpeed {
	if m != nil {
		return m.PortSpeed
	}
	return PortSpeed_PORT_SPEED_NONE
}

func (m *PortSpec) GetMacId() uint32 {
	if m != nil {
		return m.MacId
	}
	return 0
}

func (m *PortSpec) GetMacCh() uint32 {
	if m != nil {
		return m.MacCh
	}
	return 0
}

func (m *PortSpec) GetNumLanes() uint32 {
	if m != nil {
		return m.NumLanes
	}
	return 0
}

func (m *PortSpec) GetFecType() PortFecType {
	if m != nil {
		return m.FecType
	}
	return PortFecType_PORT_FEC_TYPE_NONE
}

func (m *PortSpec) GetAutoNegEnable() bool {
	if m != nil {
		return m.AutoNegEnable
	}
	return false
}

func (m *PortSpec) GetDebounceTime() uint32 {
	if m != nil {
		return m.DebounceTime
	}
	return 0
}

func (m *PortSpec) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

type PortStatus struct {
	OperStatus PortOperStatus `protobuf:"varint,1,opt,name=oper_status,json=operStatus,proto3,enum=port.PortOperStatus" json:"oper_status,omitempty"`
}

func (m *PortStatus) Reset()                    { *m = PortStatus{} }
func (m *PortStatus) String() string            { return proto.CompactTextString(m) }
func (*PortStatus) ProtoMessage()               {}
func (*PortStatus) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{1} }

func (m *PortStatus) GetOperStatus() PortOperStatus {
	if m != nil {
		return m.OperStatus
	}
	return PortOperStatus_PORT_OPER_STATUS_NONE
}

// ------------------------------------------------------------------------------
// PortRequestMsg is batched add or modify port request
// ------------------------------------------------------------------------------
type PortRequestMsg struct {
	Request []*PortSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortRequestMsg) Reset()                    { *m = PortRequestMsg{} }
func (m *PortRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortRequestMsg) ProtoMessage()               {}
func (*PortRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{2} }

func (m *PortRequestMsg) GetRequest() []*PortSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// PortResponse is response to PortSpec
type PortResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *PortStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *PortResponse) Reset()                    { *m = PortResponse{} }
func (m *PortResponse) String() string            { return proto.CompactTextString(m) }
func (*PortResponse) ProtoMessage()               {}
func (*PortResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{3} }

func (m *PortResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortResponse) GetStatus() *PortStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortResponseMsg is batched response to PortRequestMsg
// ------------------------------------------------------------------------------
type PortResponseMsg struct {
	Response []*PortResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortResponseMsg) Reset()                    { *m = PortResponseMsg{} }
func (m *PortResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortResponseMsg) ProtoMessage()               {}
func (*PortResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{4} }

func (m *PortResponseMsg) GetResponse() []*PortResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// PortDeleteRequest is used to delete a port
type PortDeleteRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is the port number
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *PortDeleteRequest) Reset()                    { *m = PortDeleteRequest{} }
func (m *PortDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteRequest) ProtoMessage()               {}
func (*PortDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{5} }

func (m *PortDeleteRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PortDeleteRequest) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortDeleteRequestMsg is used to delete a batch of ports
// ------------------------------------------------------------------------------
type PortDeleteRequestMsg struct {
	Request []*PortDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortDeleteRequestMsg) Reset()                    { *m = PortDeleteRequestMsg{} }
func (m *PortDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteRequestMsg) ProtoMessage()               {}
func (*PortDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{6} }

func (m *PortDeleteRequestMsg) GetRequest() []*PortDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortDeleteResponse is response to PortDeleteRequest
// ------------------------------------------------------------------------------
type PortDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *PortDeleteResponse) Reset()                    { *m = PortDeleteResponse{} }
func (m *PortDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteResponse) ProtoMessage()               {}
func (*PortDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{7} }

func (m *PortDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// ------------------------------------------------------------------------------
// PortDeleteResponseMsg is batched response to PortDeleteRequestMsg
// ------------------------------------------------------------------------------
type PortDeleteResponseMsg struct {
	Response []*PortDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortDeleteResponseMsg) Reset()                    { *m = PortDeleteResponseMsg{} }
func (m *PortDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteResponseMsg) ProtoMessage()               {}
func (*PortDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{8} }

func (m *PortDeleteResponseMsg) GetResponse() []*PortDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// PortStats captures all the statistics of given Port
type PortStats struct {
	MacStats *MacStats `protobuf:"bytes,1,opt,name=mac_stats,json=macStats" json:"mac_stats,omitempty"`
}

func (m *PortStats) Reset()                    { *m = PortStats{} }
func (m *PortStats) String() string            { return proto.CompactTextString(m) }
func (*PortStats) ProtoMessage()               {}
func (*PortStats) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{9} }

func (m *PortStats) GetMacStats() *MacStats {
	if m != nil {
		return m.MacStats
	}
	return nil
}

type MacStats struct {
	FramesRxOk            uint64 `protobuf:"varint,1,opt,name=frames_rx_ok,json=framesRxOk,proto3" json:"frames_rx_ok,omitempty"`
	FramesRxAll           uint64 `protobuf:"varint,2,opt,name=frames_rx_all,json=framesRxAll,proto3" json:"frames_rx_all,omitempty"`
	FramesRxBadFcs        uint64 `protobuf:"varint,3,opt,name=frames_rx_bad_fcs,json=framesRxBadFcs,proto3" json:"frames_rx_bad_fcs,omitempty"`
	FramesRxBadAll        uint64 `protobuf:"varint,4,opt,name=frames_rx_bad_all,json=framesRxBadAll,proto3" json:"frames_rx_bad_all,omitempty"`
	OctetsRxOk            uint64 `protobuf:"varint,5,opt,name=octets_rx_ok,json=octetsRxOk,proto3" json:"octets_rx_ok,omitempty"`
	OctetsRxAll           uint64 `protobuf:"varint,6,opt,name=octets_rx_all,json=octetsRxAll,proto3" json:"octets_rx_all,omitempty"`
	FramesRxUnicast       uint64 `protobuf:"varint,7,opt,name=frames_rx_unicast,json=framesRxUnicast,proto3" json:"frames_rx_unicast,omitempty"`
	FramesRxMulticast     uint64 `protobuf:"varint,8,opt,name=frames_rx_multicast,json=framesRxMulticast,proto3" json:"frames_rx_multicast,omitempty"`
	FramesRxBroadcast     uint64 `protobuf:"varint,9,opt,name=frames_rx_broadcast,json=framesRxBroadcast,proto3" json:"frames_rx_broadcast,omitempty"`
	FramesRxPause         uint64 `protobuf:"varint,10,opt,name=frames_rx_pause,json=framesRxPause,proto3" json:"frames_rx_pause,omitempty"`
	FramesRxBadLength     uint64 `protobuf:"varint,11,opt,name=frames_rx_bad_length,json=framesRxBadLength,proto3" json:"frames_rx_bad_length,omitempty"`
	FramesRxUndersized    uint64 `protobuf:"varint,12,opt,name=frames_rx_undersized,json=framesRxUndersized,proto3" json:"frames_rx_undersized,omitempty"`
	FramesRxOversized     uint64 `protobuf:"varint,13,opt,name=frames_rx_oversized,json=framesRxOversized,proto3" json:"frames_rx_oversized,omitempty"`
	FramesRxFragments     uint64 `protobuf:"varint,14,opt,name=frames_rx_fragments,json=framesRxFragments,proto3" json:"frames_rx_fragments,omitempty"`
	FramesRxJabber        uint64 `protobuf:"varint,15,opt,name=frames_rx_jabber,json=framesRxJabber,proto3" json:"frames_rx_jabber,omitempty"`
	FramesRxPripause      uint64 `protobuf:"varint,16,opt,name=frames_rx_pripause,json=framesRxPripause,proto3" json:"frames_rx_pripause,omitempty"`
	FramesRxStompedCrc    uint64 `protobuf:"varint,17,opt,name=frames_rx_stomped_crc,json=framesRxStompedCrc,proto3" json:"frames_rx_stomped_crc,omitempty"`
	FramesRxTooLong       uint64 `protobuf:"varint,18,opt,name=frames_rx_too_long,json=framesRxTooLong,proto3" json:"frames_rx_too_long,omitempty"`
	FramesRxVlanGood      uint64 `protobuf:"varint,19,opt,name=frames_rx_vlan_good,json=framesRxVlanGood,proto3" json:"frames_rx_vlan_good,omitempty"`
	FramesRxDropped       uint64 `protobuf:"varint,20,opt,name=frames_rx_dropped,json=framesRxDropped,proto3" json:"frames_rx_dropped,omitempty"`
	FramesRxLessThan_64B  uint64 `protobuf:"varint,21,opt,name=frames_rx_less_than_64b,json=framesRxLessThan64b,proto3" json:"frames_rx_less_than_64b,omitempty"`
	FramesRx_64B          uint64 `protobuf:"varint,22,opt,name=frames_rx_64b,json=framesRx64b,proto3" json:"frames_rx_64b,omitempty"`
	FramesRx_65B_127B     uint64 `protobuf:"varint,23,opt,name=frames_rx_65b_127b,json=framesRx65b127b,proto3" json:"frames_rx_65b_127b,omitempty"`
	FramesRx_128B_255B    uint64 `protobuf:"varint,24,opt,name=frames_rx_128b_255b,json=framesRx128b255b,proto3" json:"frames_rx_128b_255b,omitempty"`
	FramesRx_256B_511B    uint64 `protobuf:"varint,25,opt,name=frames_rx_256b_511b,json=framesRx256b511b,proto3" json:"frames_rx_256b_511b,omitempty"`
	FramesRx_512B_1023B   uint64 `protobuf:"varint,26,opt,name=frames_rx_512b_1023b,json=framesRx512b1023b,proto3" json:"frames_rx_512b_1023b,omitempty"`
	FramesRx_1024B_1518B  uint64 `protobuf:"varint,27,opt,name=frames_rx_1024b_1518b,json=framesRx1024b1518b,proto3" json:"frames_rx_1024b_1518b,omitempty"`
	FramesRx_1519B_2047B  uint64 `protobuf:"varint,28,opt,name=frames_rx_1519b_2047b,json=framesRx1519b2047b,proto3" json:"frames_rx_1519b_2047b,omitempty"`
	FramesRx_2048B_4095B  uint64 `protobuf:"varint,29,opt,name=frames_rx_2048b_4095b,json=framesRx2048b4095b,proto3" json:"frames_rx_2048b_4095b,omitempty"`
	FramesRx_4096B_8191B  uint64 `protobuf:"varint,30,opt,name=frames_rx_4096b_8191b,json=framesRx4096b8191b,proto3" json:"frames_rx_4096b_8191b,omitempty"`
	FramesRx_8192B_9215B  uint64 `protobuf:"varint,31,opt,name=frames_rx_8192b_9215b,json=framesRx8192b9215b,proto3" json:"frames_rx_8192b_9215b,omitempty"`
	FramesRxOther         uint64 `protobuf:"varint,32,opt,name=frames_rx_other,json=framesRxOther,proto3" json:"frames_rx_other,omitempty"`
	FramesTxOk            uint64 `protobuf:"varint,33,opt,name=frames_tx_ok,json=framesTxOk,proto3" json:"frames_tx_ok,omitempty"`
	FramesTxAll           uint64 `protobuf:"varint,34,opt,name=frames_tx_all,json=framesTxAll,proto3" json:"frames_tx_all,omitempty"`
	FramesTxBad           uint64 `protobuf:"varint,35,opt,name=frames_tx_bad,json=framesTxBad,proto3" json:"frames_tx_bad,omitempty"`
	OctetsTxOk            uint64 `protobuf:"varint,36,opt,name=octets_tx_ok,json=octetsTxOk,proto3" json:"octets_tx_ok,omitempty"`
	OctetsTxTotal         uint64 `protobuf:"varint,37,opt,name=octets_tx_total,json=octetsTxTotal,proto3" json:"octets_tx_total,omitempty"`
	FramesTxUnicast       uint64 `protobuf:"varint,38,opt,name=frames_tx_unicast,json=framesTxUnicast,proto3" json:"frames_tx_unicast,omitempty"`
	FramesTxMulticast     uint64 `protobuf:"varint,39,opt,name=frames_tx_multicast,json=framesTxMulticast,proto3" json:"frames_tx_multicast,omitempty"`
	FramesTxBroadcast     uint64 `protobuf:"varint,40,opt,name=frames_tx_broadcast,json=framesTxBroadcast,proto3" json:"frames_tx_broadcast,omitempty"`
	FramesTxPause         uint64 `protobuf:"varint,41,opt,name=frames_tx_pause,json=framesTxPause,proto3" json:"frames_tx_pause,omitempty"`
	FramesTxPripause      uint64 `protobuf:"varint,42,opt,name=frames_tx_pripause,json=framesTxPripause,proto3" json:"frames_tx_pripause,omitempty"`
	FramesTxVlan          uint64 `protobuf:"varint,43,opt,name=frames_tx_vlan,json=framesTxVlan,proto3" json:"frames_tx_vlan,omitempty"`
	FramesTxLessThan_64B  uint64 `protobuf:"varint,44,opt,name=frames_tx_less_than_64b,json=framesTxLessThan64b,proto3" json:"frames_tx_less_than_64b,omitempty"`
	FramesTx_64B          uint64 `protobuf:"varint,45,opt,name=frames_tx_64b,json=framesTx64b,proto3" json:"frames_tx_64b,omitempty"`
	FramesTx_65B_127B     uint64 `protobuf:"varint,46,opt,name=frames_tx_65b_127b,json=framesTx65b127b,proto3" json:"frames_tx_65b_127b,omitempty"`
	FramesTx_128B_255B    uint64 `protobuf:"varint,47,opt,name=frames_tx_128b_255b,json=framesTx128b255b,proto3" json:"frames_tx_128b_255b,omitempty"`
	FramesTx_256B_511B    uint64 `protobuf:"varint,48,opt,name=frames_tx_256b_511b,json=framesTx256b511b,proto3" json:"frames_tx_256b_511b,omitempty"`
	FramesTx_512B_1023B   uint64 `protobuf:"varint,49,opt,name=frames_tx_512b_1023b,json=framesTx512b1023b,proto3" json:"frames_tx_512b_1023b,omitempty"`
	FramesTx_1024B_1518B  uint64 `protobuf:"varint,50,opt,name=frames_tx_1024b_1518b,json=framesTx1024b1518b,proto3" json:"frames_tx_1024b_1518b,omitempty"`
	FramesTx_1519B_2047B  uint64 `protobuf:"varint,51,opt,name=frames_tx_1519b_2047b,json=framesTx1519b2047b,proto3" json:"frames_tx_1519b_2047b,omitempty"`
	FramesTx_2048B_4095B  uint64 `protobuf:"varint,52,opt,name=frames_tx_2048b_4095b,json=framesTx2048b4095b,proto3" json:"frames_tx_2048b_4095b,omitempty"`
	FramesTx_4096B_8191B  uint64 `protobuf:"varint,53,opt,name=frames_tx_4096b_8191b,json=framesTx4096b8191b,proto3" json:"frames_tx_4096b_8191b,omitempty"`
	FramesTx_8192B_9215B  uint64 `protobuf:"varint,54,opt,name=frames_tx_8192b_9215b,json=framesTx8192b9215b,proto3" json:"frames_tx_8192b_9215b,omitempty"`
	FramesTxOther         uint64 `protobuf:"varint,55,opt,name=frames_tx_other,json=framesTxOther,proto3" json:"frames_tx_other,omitempty"`
	FramesTxPri_0         uint64 `protobuf:"varint,56,opt,name=frames_tx_pri_0,json=framesTxPri0,proto3" json:"frames_tx_pri_0,omitempty"`
	FramesTxPri_1         uint64 `protobuf:"varint,57,opt,name=frames_tx_pri_1,json=framesTxPri1,proto3" json:"frames_tx_pri_1,omitempty"`
	FramesTxPri_2         uint64 `protobuf:"varint,58,opt,name=frames_tx_pri_2,json=framesTxPri2,proto3" json:"frames_tx_pri_2,omitempty"`
	FramesTxPri_3         uint64 `protobuf:"varint,59,opt,name=frames_tx_pri_3,json=framesTxPri3,proto3" json:"frames_tx_pri_3,omitempty"`
	FramesTxPri_4         uint64 `protobuf:"varint,60,opt,name=frames_tx_pri_4,json=framesTxPri4,proto3" json:"frames_tx_pri_4,omitempty"`
	FramesTxPri_5         uint64 `protobuf:"varint,61,opt,name=frames_tx_pri_5,json=framesTxPri5,proto3" json:"frames_tx_pri_5,omitempty"`
	FramesTxPri_6         uint64 `protobuf:"varint,62,opt,name=frames_tx_pri_6,json=framesTxPri6,proto3" json:"frames_tx_pri_6,omitempty"`
	FramesTxPri_7         uint64 `protobuf:"varint,63,opt,name=frames_tx_pri_7,json=framesTxPri7,proto3" json:"frames_tx_pri_7,omitempty"`
	FramesRxPri_0         uint64 `protobuf:"varint,64,opt,name=frames_rx_pri_0,json=framesRxPri0,proto3" json:"frames_rx_pri_0,omitempty"`
	FramesRxPri_1         uint64 `protobuf:"varint,65,opt,name=frames_rx_pri_1,json=framesRxPri1,proto3" json:"frames_rx_pri_1,omitempty"`
	FramesRxPri_2         uint64 `protobuf:"varint,66,opt,name=frames_rx_pri_2,json=framesRxPri2,proto3" json:"frames_rx_pri_2,omitempty"`
	FramesRxPri_3         uint64 `protobuf:"varint,67,opt,name=frames_rx_pri_3,json=framesRxPri3,proto3" json:"frames_rx_pri_3,omitempty"`
	FramesRxPri_4         uint64 `protobuf:"varint,68,opt,name=frames_rx_pri_4,json=framesRxPri4,proto3" json:"frames_rx_pri_4,omitempty"`
	FramesRxPri_5         uint64 `protobuf:"varint,69,opt,name=frames_rx_pri_5,json=framesRxPri5,proto3" json:"frames_rx_pri_5,omitempty"`
	FramesRxPri_6         uint64 `protobuf:"varint,70,opt,name=frames_rx_pri_6,json=framesRxPri6,proto3" json:"frames_rx_pri_6,omitempty"`
	FramesRxPri_7         uint64 `protobuf:"varint,71,opt,name=frames_rx_pri_7,json=framesRxPri7,proto3" json:"frames_rx_pri_7,omitempty"`
	TxPripause_0_1UsCount uint64 `protobuf:"varint,72,opt,name=tx_pripause_0_1us_count,json=txPripause01usCount,proto3" json:"tx_pripause_0_1us_count,omitempty"`
	TxPripause_1_1UsCount uint64 `protobuf:"varint,73,opt,name=tx_pripause_1_1us_count,json=txPripause11usCount,proto3" json:"tx_pripause_1_1us_count,omitempty"`
	TxPripause_2_1UsCount uint64 `protobuf:"varint,74,opt,name=tx_pripause_2_1us_count,json=txPripause21usCount,proto3" json:"tx_pripause_2_1us_count,omitempty"`
	TxPripause_3_1UsCount uint64 `protobuf:"varint,75,opt,name=tx_pripause_3_1us_count,json=txPripause31usCount,proto3" json:"tx_pripause_3_1us_count,omitempty"`
	TxPripause_4_1UsCount uint64 `protobuf:"varint,76,opt,name=tx_pripause_4_1us_count,json=txPripause41usCount,proto3" json:"tx_pripause_4_1us_count,omitempty"`
	TxPripause_5_1UsCount uint64 `protobuf:"varint,77,opt,name=tx_pripause_5_1us_count,json=txPripause51usCount,proto3" json:"tx_pripause_5_1us_count,omitempty"`
	TxPripause_6_1UsCount uint64 `protobuf:"varint,78,opt,name=tx_pripause_6_1us_count,json=txPripause61usCount,proto3" json:"tx_pripause_6_1us_count,omitempty"`
	TxPripause_7_1UsCount uint64 `protobuf:"varint,79,opt,name=tx_pripause_7_1us_count,json=txPripause71usCount,proto3" json:"tx_pripause_7_1us_count,omitempty"`
	RxPripause_0_1UsCount uint64 `protobuf:"varint,80,opt,name=rx_pripause_0_1us_count,json=rxPripause01usCount,proto3" json:"rx_pripause_0_1us_count,omitempty"`
	RxPripause_1_1UsCount uint64 `protobuf:"varint,81,opt,name=rx_pripause_1_1us_count,json=rxPripause11usCount,proto3" json:"rx_pripause_1_1us_count,omitempty"`
	RxPripause_2_1UsCount uint64 `protobuf:"varint,82,opt,name=rx_pripause_2_1us_count,json=rxPripause21usCount,proto3" json:"rx_pripause_2_1us_count,omitempty"`
	RxPripause_3_1UsCount uint64 `protobuf:"varint,83,opt,name=rx_pripause_3_1us_count,json=rxPripause31usCount,proto3" json:"rx_pripause_3_1us_count,omitempty"`
	RxPripause_4_1UsCount uint64 `protobuf:"varint,84,opt,name=rx_pripause_4_1us_count,json=rxPripause41usCount,proto3" json:"rx_pripause_4_1us_count,omitempty"`
	RxPripause_5_1UsCount uint64 `protobuf:"varint,85,opt,name=rx_pripause_5_1us_count,json=rxPripause51usCount,proto3" json:"rx_pripause_5_1us_count,omitempty"`
	RxPripause_6_1UsCount uint64 `protobuf:"varint,86,opt,name=rx_pripause_6_1us_count,json=rxPripause61usCount,proto3" json:"rx_pripause_6_1us_count,omitempty"`
	RxPripause_7_1UsCount uint64 `protobuf:"varint,87,opt,name=rx_pripause_7_1us_count,json=rxPripause71usCount,proto3" json:"rx_pripause_7_1us_count,omitempty"`
	RxPause_1UsCount      uint64 `protobuf:"varint,88,opt,name=rx_pause_1us_count,json=rxPause1usCount,proto3" json:"rx_pause_1us_count,omitempty"`
	FramesTxTruncated     uint64 `protobuf:"varint,89,opt,name=frames_tx_truncated,json=framesTxTruncated,proto3" json:"frames_tx_truncated,omitempty"`
}

func (m *MacStats) Reset()                    { *m = MacStats{} }
func (m *MacStats) String() string            { return proto.CompactTextString(m) }
func (*MacStats) ProtoMessage()               {}
func (*MacStats) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{10} }

func (m *MacStats) GetFramesRxOk() uint64 {
	if m != nil {
		return m.FramesRxOk
	}
	return 0
}

func (m *MacStats) GetFramesRxAll() uint64 {
	if m != nil {
		return m.FramesRxAll
	}
	return 0
}

func (m *MacStats) GetFramesRxBadFcs() uint64 {
	if m != nil {
		return m.FramesRxBadFcs
	}
	return 0
}

func (m *MacStats) GetFramesRxBadAll() uint64 {
	if m != nil {
		return m.FramesRxBadAll
	}
	return 0
}

func (m *MacStats) GetOctetsRxOk() uint64 {
	if m != nil {
		return m.OctetsRxOk
	}
	return 0
}

func (m *MacStats) GetOctetsRxAll() uint64 {
	if m != nil {
		return m.OctetsRxAll
	}
	return 0
}

func (m *MacStats) GetFramesRxUnicast() uint64 {
	if m != nil {
		return m.FramesRxUnicast
	}
	return 0
}

func (m *MacStats) GetFramesRxMulticast() uint64 {
	if m != nil {
		return m.FramesRxMulticast
	}
	return 0
}

func (m *MacStats) GetFramesRxBroadcast() uint64 {
	if m != nil {
		return m.FramesRxBroadcast
	}
	return 0
}

func (m *MacStats) GetFramesRxPause() uint64 {
	if m != nil {
		return m.FramesRxPause
	}
	return 0
}

func (m *MacStats) GetFramesRxBadLength() uint64 {
	if m != nil {
		return m.FramesRxBadLength
	}
	return 0
}

func (m *MacStats) GetFramesRxUndersized() uint64 {
	if m != nil {
		return m.FramesRxUndersized
	}
	return 0
}

func (m *MacStats) GetFramesRxOversized() uint64 {
	if m != nil {
		return m.FramesRxOversized
	}
	return 0
}

func (m *MacStats) GetFramesRxFragments() uint64 {
	if m != nil {
		return m.FramesRxFragments
	}
	return 0
}

func (m *MacStats) GetFramesRxJabber() uint64 {
	if m != nil {
		return m.FramesRxJabber
	}
	return 0
}

func (m *MacStats) GetFramesRxPripause() uint64 {
	if m != nil {
		return m.FramesRxPripause
	}
	return 0
}

func (m *MacStats) GetFramesRxStompedCrc() uint64 {
	if m != nil {
		return m.FramesRxStompedCrc
	}
	return 0
}

func (m *MacStats) GetFramesRxTooLong() uint64 {
	if m != nil {
		return m.FramesRxTooLong
	}
	return 0
}

func (m *MacStats) GetFramesRxVlanGood() uint64 {
	if m != nil {
		return m.FramesRxVlanGood
	}
	return 0
}

func (m *MacStats) GetFramesRxDropped() uint64 {
	if m != nil {
		return m.FramesRxDropped
	}
	return 0
}

func (m *MacStats) GetFramesRxLessThan_64B() uint64 {
	if m != nil {
		return m.FramesRxLessThan_64B
	}
	return 0
}

func (m *MacStats) GetFramesRx_64B() uint64 {
	if m != nil {
		return m.FramesRx_64B
	}
	return 0
}

func (m *MacStats) GetFramesRx_65B_127B() uint64 {
	if m != nil {
		return m.FramesRx_65B_127B
	}
	return 0
}

func (m *MacStats) GetFramesRx_128B_255B() uint64 {
	if m != nil {
		return m.FramesRx_128B_255B
	}
	return 0
}

func (m *MacStats) GetFramesRx_256B_511B() uint64 {
	if m != nil {
		return m.FramesRx_256B_511B
	}
	return 0
}

func (m *MacStats) GetFramesRx_512B_1023B() uint64 {
	if m != nil {
		return m.FramesRx_512B_1023B
	}
	return 0
}

func (m *MacStats) GetFramesRx_1024B_1518B() uint64 {
	if m != nil {
		return m.FramesRx_1024B_1518B
	}
	return 0
}

func (m *MacStats) GetFramesRx_1519B_2047B() uint64 {
	if m != nil {
		return m.FramesRx_1519B_2047B
	}
	return 0
}

func (m *MacStats) GetFramesRx_2048B_4095B() uint64 {
	if m != nil {
		return m.FramesRx_2048B_4095B
	}
	return 0
}

func (m *MacStats) GetFramesRx_4096B_8191B() uint64 {
	if m != nil {
		return m.FramesRx_4096B_8191B
	}
	return 0
}

func (m *MacStats) GetFramesRx_8192B_9215B() uint64 {
	if m != nil {
		return m.FramesRx_8192B_9215B
	}
	return 0
}

func (m *MacStats) GetFramesRxOther() uint64 {
	if m != nil {
		return m.FramesRxOther
	}
	return 0
}

func (m *MacStats) GetFramesTxOk() uint64 {
	if m != nil {
		return m.FramesTxOk
	}
	return 0
}

func (m *MacStats) GetFramesTxAll() uint64 {
	if m != nil {
		return m.FramesTxAll
	}
	return 0
}

func (m *MacStats) GetFramesTxBad() uint64 {
	if m != nil {
		return m.FramesTxBad
	}
	return 0
}

func (m *MacStats) GetOctetsTxOk() uint64 {
	if m != nil {
		return m.OctetsTxOk
	}
	return 0
}

func (m *MacStats) GetOctetsTxTotal() uint64 {
	if m != nil {
		return m.OctetsTxTotal
	}
	return 0
}

func (m *MacStats) GetFramesTxUnicast() uint64 {
	if m != nil {
		return m.FramesTxUnicast
	}
	return 0
}

func (m *MacStats) GetFramesTxMulticast() uint64 {
	if m != nil {
		return m.FramesTxMulticast
	}
	return 0
}

func (m *MacStats) GetFramesTxBroadcast() uint64 {
	if m != nil {
		return m.FramesTxBroadcast
	}
	return 0
}

func (m *MacStats) GetFramesTxPause() uint64 {
	if m != nil {
		return m.FramesTxPause
	}
	return 0
}

func (m *MacStats) GetFramesTxPripause() uint64 {
	if m != nil {
		return m.FramesTxPripause
	}
	return 0
}

func (m *MacStats) GetFramesTxVlan() uint64 {
	if m != nil {
		return m.FramesTxVlan
	}
	return 0
}

func (m *MacStats) GetFramesTxLessThan_64B() uint64 {
	if m != nil {
		return m.FramesTxLessThan_64B
	}
	return 0
}

func (m *MacStats) GetFramesTx_64B() uint64 {
	if m != nil {
		return m.FramesTx_64B
	}
	return 0
}

func (m *MacStats) GetFramesTx_65B_127B() uint64 {
	if m != nil {
		return m.FramesTx_65B_127B
	}
	return 0
}

func (m *MacStats) GetFramesTx_128B_255B() uint64 {
	if m != nil {
		return m.FramesTx_128B_255B
	}
	return 0
}

func (m *MacStats) GetFramesTx_256B_511B() uint64 {
	if m != nil {
		return m.FramesTx_256B_511B
	}
	return 0
}

func (m *MacStats) GetFramesTx_512B_1023B() uint64 {
	if m != nil {
		return m.FramesTx_512B_1023B
	}
	return 0
}

func (m *MacStats) GetFramesTx_1024B_1518B() uint64 {
	if m != nil {
		return m.FramesTx_1024B_1518B
	}
	return 0
}

func (m *MacStats) GetFramesTx_1519B_2047B() uint64 {
	if m != nil {
		return m.FramesTx_1519B_2047B
	}
	return 0
}

func (m *MacStats) GetFramesTx_2048B_4095B() uint64 {
	if m != nil {
		return m.FramesTx_2048B_4095B
	}
	return 0
}

func (m *MacStats) GetFramesTx_4096B_8191B() uint64 {
	if m != nil {
		return m.FramesTx_4096B_8191B
	}
	return 0
}

func (m *MacStats) GetFramesTx_8192B_9215B() uint64 {
	if m != nil {
		return m.FramesTx_8192B_9215B
	}
	return 0
}

func (m *MacStats) GetFramesTxOther() uint64 {
	if m != nil {
		return m.FramesTxOther
	}
	return 0
}

func (m *MacStats) GetFramesTxPri_0() uint64 {
	if m != nil {
		return m.FramesTxPri_0
	}
	return 0
}

func (m *MacStats) GetFramesTxPri_1() uint64 {
	if m != nil {
		return m.FramesTxPri_1
	}
	return 0
}

func (m *MacStats) GetFramesTxPri_2() uint64 {
	if m != nil {
		return m.FramesTxPri_2
	}
	return 0
}

func (m *MacStats) GetFramesTxPri_3() uint64 {
	if m != nil {
		return m.FramesTxPri_3
	}
	return 0
}

func (m *MacStats) GetFramesTxPri_4() uint64 {
	if m != nil {
		return m.FramesTxPri_4
	}
	return 0
}

func (m *MacStats) GetFramesTxPri_5() uint64 {
	if m != nil {
		return m.FramesTxPri_5
	}
	return 0
}

func (m *MacStats) GetFramesTxPri_6() uint64 {
	if m != nil {
		return m.FramesTxPri_6
	}
	return 0
}

func (m *MacStats) GetFramesTxPri_7() uint64 {
	if m != nil {
		return m.FramesTxPri_7
	}
	return 0
}

func (m *MacStats) GetFramesRxPri_0() uint64 {
	if m != nil {
		return m.FramesRxPri_0
	}
	return 0
}

func (m *MacStats) GetFramesRxPri_1() uint64 {
	if m != nil {
		return m.FramesRxPri_1
	}
	return 0
}

func (m *MacStats) GetFramesRxPri_2() uint64 {
	if m != nil {
		return m.FramesRxPri_2
	}
	return 0
}

func (m *MacStats) GetFramesRxPri_3() uint64 {
	if m != nil {
		return m.FramesRxPri_3
	}
	return 0
}

func (m *MacStats) GetFramesRxPri_4() uint64 {
	if m != nil {
		return m.FramesRxPri_4
	}
	return 0
}

func (m *MacStats) GetFramesRxPri_5() uint64 {
	if m != nil {
		return m.FramesRxPri_5
	}
	return 0
}

func (m *MacStats) GetFramesRxPri_6() uint64 {
	if m != nil {
		return m.FramesRxPri_6
	}
	return 0
}

func (m *MacStats) GetFramesRxPri_7() uint64 {
	if m != nil {
		return m.FramesRxPri_7
	}
	return 0
}

func (m *MacStats) GetTxPripause_0_1UsCount() uint64 {
	if m != nil {
		return m.TxPripause_0_1UsCount
	}
	return 0
}

func (m *MacStats) GetTxPripause_1_1UsCount() uint64 {
	if m != nil {
		return m.TxPripause_1_1UsCount
	}
	return 0
}

func (m *MacStats) GetTxPripause_2_1UsCount() uint64 {
	if m != nil {
		return m.TxPripause_2_1UsCount
	}
	return 0
}

func (m *MacStats) GetTxPripause_3_1UsCount() uint64 {
	if m != nil {
		return m.TxPripause_3_1UsCount
	}
	return 0
}

func (m *MacStats) GetTxPripause_4_1UsCount() uint64 {
	if m != nil {
		return m.TxPripause_4_1UsCount
	}
	return 0
}

func (m *MacStats) GetTxPripause_5_1UsCount() uint64 {
	if m != nil {
		return m.TxPripause_5_1UsCount
	}
	return 0
}

func (m *MacStats) GetTxPripause_6_1UsCount() uint64 {
	if m != nil {
		return m.TxPripause_6_1UsCount
	}
	return 0
}

func (m *MacStats) GetTxPripause_7_1UsCount() uint64 {
	if m != nil {
		return m.TxPripause_7_1UsCount
	}
	return 0
}

func (m *MacStats) GetRxPripause_0_1UsCount() uint64 {
	if m != nil {
		return m.RxPripause_0_1UsCount
	}
	return 0
}

func (m *MacStats) GetRxPripause_1_1UsCount() uint64 {
	if m != nil {
		return m.RxPripause_1_1UsCount
	}
	return 0
}

func (m *MacStats) GetRxPripause_2_1UsCount() uint64 {
	if m != nil {
		return m.RxPripause_2_1UsCount
	}
	return 0
}

func (m *MacStats) GetRxPripause_3_1UsCount() uint64 {
	if m != nil {
		return m.RxPripause_3_1UsCount
	}
	return 0
}

func (m *MacStats) GetRxPripause_4_1UsCount() uint64 {
	if m != nil {
		return m.RxPripause_4_1UsCount
	}
	return 0
}

func (m *MacStats) GetRxPripause_5_1UsCount() uint64 {
	if m != nil {
		return m.RxPripause_5_1UsCount
	}
	return 0
}

func (m *MacStats) GetRxPripause_6_1UsCount() uint64 {
	if m != nil {
		return m.RxPripause_6_1UsCount
	}
	return 0
}

func (m *MacStats) GetRxPripause_7_1UsCount() uint64 {
	if m != nil {
		return m.RxPripause_7_1UsCount
	}
	return 0
}

func (m *MacStats) GetRxPause_1UsCount() uint64 {
	if m != nil {
		return m.RxPause_1UsCount
	}
	return 0
}

func (m *MacStats) GetFramesTxTruncated() uint64 {
	if m != nil {
		return m.FramesTxTruncated
	}
	return 0
}

// PortGetRequest is used to get information about a port
type PortGetRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is the port number
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *PortGetRequest) Reset()                    { *m = PortGetRequest{} }
func (m *PortGetRequest) String() string            { return proto.CompactTextString(m) }
func (*PortGetRequest) ProtoMessage()               {}
func (*PortGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{11} }

func (m *PortGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PortGetRequest) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortGetRequestMsg is batched GET request for ports
// ------------------------------------------------------------------------------
type PortGetRequestMsg struct {
	Request []*PortGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortGetRequestMsg) Reset()                    { *m = PortGetRequestMsg{} }
func (m *PortGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortGetRequestMsg) ProtoMessage()               {}
func (*PortGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{12} }

func (m *PortGetRequestMsg) GetRequest() []*PortGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// PortGetResponse captures all the information about a port
// only if api_status indicates success, other fields are valid
type PortGetResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *PortSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *PortStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *PortStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *PortGetResponse) Reset()                    { *m = PortGetResponse{} }
func (m *PortGetResponse) String() string            { return proto.CompactTextString(m) }
func (*PortGetResponse) ProtoMessage()               {}
func (*PortGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{13} }

func (m *PortGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortGetResponse) GetSpec() *PortSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PortGetResponse) GetStatus() *PortStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PortGetResponse) GetStats() *PortStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortGetResponseMsg is the batched response to PortGetRequestMsg
// ------------------------------------------------------------------------------
type PortGetResponseMsg struct {
	Response []*PortGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortGetResponseMsg) Reset()                    { *m = PortGetResponseMsg{} }
func (m *PortGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortGetResponseMsg) ProtoMessage()               {}
func (*PortGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{14} }

func (m *PortGetResponseMsg) GetResponse() []*PortGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type PortInfoGetRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is the port number
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *PortInfoGetRequest) Reset()                    { *m = PortInfoGetRequest{} }
func (m *PortInfoGetRequest) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetRequest) ProtoMessage()               {}
func (*PortInfoGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{15} }

func (m *PortInfoGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PortInfoGetRequest) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type PortInfoGetRequestMsg struct {
	Request []*PortInfoGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortInfoGetRequestMsg) Reset()                    { *m = PortInfoGetRequestMsg{} }
func (m *PortInfoGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetRequestMsg) ProtoMessage()               {}
func (*PortInfoGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{16} }

func (m *PortInfoGetRequestMsg) GetRequest() []*PortInfoGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type PortInfoSpec struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// key_or_handle is the port number
	KeyOrHandle   *PortKeyHandle     `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	NumLanes      uint32             `protobuf:"varint,3,opt,name=num_lanes,json=numLanes,proto3" json:"num_lanes,omitempty"`
	BreakoutModes []PortBreakoutMode `protobuf:"varint,4,rep,packed,name=breakout_modes,json=breakoutModes,enum=port.PortBreakoutMode" json:"breakout_modes,omitempty"`
}

func (m *PortInfoSpec) Reset()                    { *m = PortInfoSpec{} }
func (m *PortInfoSpec) String() string            { return proto.CompactTextString(m) }
func (*PortInfoSpec) ProtoMessage()               {}
func (*PortInfoSpec) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{17} }

func (m *PortInfoSpec) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PortInfoSpec) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortInfoSpec) GetNumLanes() uint32 {
	if m != nil {
		return m.NumLanes
	}
	return 0
}

func (m *PortInfoSpec) GetBreakoutModes() []PortBreakoutMode {
	if m != nil {
		return m.BreakoutModes
	}
	return nil
}

type PortInfoGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *PortInfoSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *PortInfoGetResponse) Reset()                    { *m = PortInfoGetResponse{} }
func (m *PortInfoGetResponse) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetResponse) ProtoMessage()               {}
func (*PortInfoGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{18} }

func (m *PortInfoGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortInfoGetResponse) GetSpec() *PortInfoSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type PortInfoGetResponseMsg struct {
	Response []*PortInfoGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortInfoGetResponseMsg) Reset()                    { *m = PortInfoGetResponseMsg{} }
func (m *PortInfoGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetResponseMsg) ProtoMessage()               {}
func (*PortInfoGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{19} }

func (m *PortInfoGetResponseMsg) GetResponse() []*PortInfoGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*PortSpec)(nil), "port.PortSpec")
	proto.RegisterType((*PortStatus)(nil), "port.PortStatus")
	proto.RegisterType((*PortRequestMsg)(nil), "port.PortRequestMsg")
	proto.RegisterType((*PortResponse)(nil), "port.PortResponse")
	proto.RegisterType((*PortResponseMsg)(nil), "port.PortResponseMsg")
	proto.RegisterType((*PortDeleteRequest)(nil), "port.PortDeleteRequest")
	proto.RegisterType((*PortDeleteRequestMsg)(nil), "port.PortDeleteRequestMsg")
	proto.RegisterType((*PortDeleteResponse)(nil), "port.PortDeleteResponse")
	proto.RegisterType((*PortDeleteResponseMsg)(nil), "port.PortDeleteResponseMsg")
	proto.RegisterType((*PortStats)(nil), "port.PortStats")
	proto.RegisterType((*MacStats)(nil), "port.MacStats")
	proto.RegisterType((*PortGetRequest)(nil), "port.PortGetRequest")
	proto.RegisterType((*PortGetRequestMsg)(nil), "port.PortGetRequestMsg")
	proto.RegisterType((*PortGetResponse)(nil), "port.PortGetResponse")
	proto.RegisterType((*PortGetResponseMsg)(nil), "port.PortGetResponseMsg")
	proto.RegisterType((*PortInfoGetRequest)(nil), "port.PortInfoGetRequest")
	proto.RegisterType((*PortInfoGetRequestMsg)(nil), "port.PortInfoGetRequestMsg")
	proto.RegisterType((*PortInfoSpec)(nil), "port.PortInfoSpec")
	proto.RegisterType((*PortInfoGetResponse)(nil), "port.PortInfoGetResponse")
	proto.RegisterType((*PortInfoGetResponseMsg)(nil), "port.PortInfoGetResponseMsg")
	proto.RegisterEnum("port.PortBreakoutMode", PortBreakoutMode_name, PortBreakoutMode_value)
	proto.RegisterEnum("port.PortOperStatus", PortOperStatus_name, PortOperStatus_value)
	proto.RegisterEnum("port.PortAdminState", PortAdminState_name, PortAdminState_value)
	proto.RegisterEnum("port.PortType", PortType_name, PortType_value)
	proto.RegisterEnum("port.PortSpeed", PortSpeed_name, PortSpeed_value)
	proto.RegisterEnum("port.PortFecType", PortFecType_name, PortFecType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Port service

type PortClient interface {
	PortCreate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error)
	PortUpdate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error)
	PortDelete(ctx context.Context, in *PortDeleteRequestMsg, opts ...grpc.CallOption) (*PortDeleteResponseMsg, error)
	PortGet(ctx context.Context, in *PortGetRequestMsg, opts ...grpc.CallOption) (*PortGetResponseMsg, error)
	PortInfoGet(ctx context.Context, in *PortInfoGetRequestMsg, opts ...grpc.CallOption) (*PortInfoGetResponseMsg, error)
}

type portClient struct {
	cc *grpc.ClientConn
}

func NewPortClient(cc *grpc.ClientConn) PortClient {
	return &portClient{cc}
}

func (c *portClient) PortCreate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error) {
	out := new(PortResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortUpdate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error) {
	out := new(PortResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortDelete(ctx context.Context, in *PortDeleteRequestMsg, opts ...grpc.CallOption) (*PortDeleteResponseMsg, error) {
	out := new(PortDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortGet(ctx context.Context, in *PortGetRequestMsg, opts ...grpc.CallOption) (*PortGetResponseMsg, error) {
	out := new(PortGetResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortInfoGet(ctx context.Context, in *PortInfoGetRequestMsg, opts ...grpc.CallOption) (*PortInfoGetResponseMsg, error) {
	out := new(PortInfoGetResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortInfoGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Port service

type PortServer interface {
	PortCreate(context.Context, *PortRequestMsg) (*PortResponseMsg, error)
	PortUpdate(context.Context, *PortRequestMsg) (*PortResponseMsg, error)
	PortDelete(context.Context, *PortDeleteRequestMsg) (*PortDeleteResponseMsg, error)
	PortGet(context.Context, *PortGetRequestMsg) (*PortGetResponseMsg, error)
	PortInfoGet(context.Context, *PortInfoGetRequestMsg) (*PortInfoGetResponseMsg, error)
}

func RegisterPortServer(s *grpc.Server, srv PortServer) {
	s.RegisterService(&_Port_serviceDesc, srv)
}

func _Port_PortCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortCreate(ctx, req.(*PortRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortUpdate(ctx, req.(*PortRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortDelete(ctx, req.(*PortDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortGet(ctx, req.(*PortGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortInfoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortInfoGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortInfoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortInfoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortInfoGet(ctx, req.(*PortInfoGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Port_serviceDesc = grpc.ServiceDesc{
	ServiceName: "port.Port",
	HandlerType: (*PortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PortCreate",
			Handler:    _Port_PortCreate_Handler,
		},
		{
			MethodName: "PortUpdate",
			Handler:    _Port_PortUpdate_Handler,
		},
		{
			MethodName: "PortDelete",
			Handler:    _Port_PortDelete_Handler,
		},
		{
			MethodName: "PortGet",
			Handler:    _Port_PortGet_Handler,
		},
		{
			MethodName: "PortInfoGet",
			Handler:    _Port_PortInfoGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "port.proto",
}

func (m *PortSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.PortType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.PortType))
	}
	if m.AdminState != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.AdminState))
	}
	if m.PortSpeed != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.PortSpeed))
	}
	if m.MacId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.MacId))
	}
	if m.MacCh != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.MacCh))
	}
	if m.NumLanes != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.NumLanes))
	}
	if m.FecType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FecType))
	}
	if m.AutoNegEnable {
		dAtA[i] = 0x58
		i++
		if m.AutoNegEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DebounceTime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.DebounceTime))
	}
	if m.Mtu != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Mtu))
	}
	return i, nil
}

func (m *PortStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.OperStatus))
	}
	return i, nil
}

func (m *PortRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Status.Size()))
		n3, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *PortResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Meta.Size()))
		n4, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n5, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PortDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *PortDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MacStats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.MacStats.Size()))
		n6, err := m.MacStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *MacStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FramesRxOk != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxOk))
	}
	if m.FramesRxAll != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxAll))
	}
	if m.FramesRxBadFcs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxBadFcs))
	}
	if m.FramesRxBadAll != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxBadAll))
	}
	if m.OctetsRxOk != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.OctetsRxOk))
	}
	if m.OctetsRxAll != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.OctetsRxAll))
	}
	if m.FramesRxUnicast != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxUnicast))
	}
	if m.FramesRxMulticast != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxMulticast))
	}
	if m.FramesRxBroadcast != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxBroadcast))
	}
	if m.FramesRxPause != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPause))
	}
	if m.FramesRxBadLength != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxBadLength))
	}
	if m.FramesRxUndersized != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxUndersized))
	}
	if m.FramesRxOversized != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxOversized))
	}
	if m.FramesRxFragments != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxFragments))
	}
	if m.FramesRxJabber != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxJabber))
	}
	if m.FramesRxPripause != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPripause))
	}
	if m.FramesRxStompedCrc != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxStompedCrc))
	}
	if m.FramesRxTooLong != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxTooLong))
	}
	if m.FramesRxVlanGood != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxVlanGood))
	}
	if m.FramesRxDropped != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxDropped))
	}
	if m.FramesRxLessThan_64B != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxLessThan_64B))
	}
	if m.FramesRx_64B != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_64B))
	}
	if m.FramesRx_65B_127B != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_65B_127B))
	}
	if m.FramesRx_128B_255B != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_128B_255B))
	}
	if m.FramesRx_256B_511B != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_256B_511B))
	}
	if m.FramesRx_512B_1023B != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_512B_1023B))
	}
	if m.FramesRx_1024B_1518B != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_1024B_1518B))
	}
	if m.FramesRx_1519B_2047B != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_1519B_2047B))
	}
	if m.FramesRx_2048B_4095B != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_2048B_4095B))
	}
	if m.FramesRx_4096B_8191B != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_4096B_8191B))
	}
	if m.FramesRx_8192B_9215B != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRx_8192B_9215B))
	}
	if m.FramesRxOther != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxOther))
	}
	if m.FramesTxOk != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxOk))
	}
	if m.FramesTxAll != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxAll))
	}
	if m.FramesTxBad != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxBad))
	}
	if m.OctetsTxOk != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.OctetsTxOk))
	}
	if m.OctetsTxTotal != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.OctetsTxTotal))
	}
	if m.FramesTxUnicast != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxUnicast))
	}
	if m.FramesTxMulticast != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxMulticast))
	}
	if m.FramesTxBroadcast != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxBroadcast))
	}
	if m.FramesTxPause != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPause))
	}
	if m.FramesTxPripause != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPripause))
	}
	if m.FramesTxVlan != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxVlan))
	}
	if m.FramesTxLessThan_64B != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxLessThan_64B))
	}
	if m.FramesTx_64B != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_64B))
	}
	if m.FramesTx_65B_127B != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_65B_127B))
	}
	if m.FramesTx_128B_255B != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_128B_255B))
	}
	if m.FramesTx_256B_511B != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_256B_511B))
	}
	if m.FramesTx_512B_1023B != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_512B_1023B))
	}
	if m.FramesTx_1024B_1518B != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_1024B_1518B))
	}
	if m.FramesTx_1519B_2047B != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_1519B_2047B))
	}
	if m.FramesTx_2048B_4095B != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_2048B_4095B))
	}
	if m.FramesTx_4096B_8191B != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_4096B_8191B))
	}
	if m.FramesTx_8192B_9215B != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTx_8192B_9215B))
	}
	if m.FramesTxOther != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxOther))
	}
	if m.FramesTxPri_0 != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPri_0))
	}
	if m.FramesTxPri_1 != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPri_1))
	}
	if m.FramesTxPri_2 != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPri_2))
	}
	if m.FramesTxPri_3 != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPri_3))
	}
	if m.FramesTxPri_4 != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPri_4))
	}
	if m.FramesTxPri_5 != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPri_5))
	}
	if m.FramesTxPri_6 != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPri_6))
	}
	if m.FramesTxPri_7 != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxPri_7))
	}
	if m.FramesRxPri_0 != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPri_0))
	}
	if m.FramesRxPri_1 != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPri_1))
	}
	if m.FramesRxPri_2 != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPri_2))
	}
	if m.FramesRxPri_3 != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPri_3))
	}
	if m.FramesRxPri_4 != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPri_4))
	}
	if m.FramesRxPri_5 != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPri_5))
	}
	if m.FramesRxPri_6 != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPri_6))
	}
	if m.FramesRxPri_7 != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesRxPri_7))
	}
	if m.TxPripause_0_1UsCount != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.TxPripause_0_1UsCount))
	}
	if m.TxPripause_1_1UsCount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.TxPripause_1_1UsCount))
	}
	if m.TxPripause_2_1UsCount != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.TxPripause_2_1UsCount))
	}
	if m.TxPripause_3_1UsCount != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.TxPripause_3_1UsCount))
	}
	if m.TxPripause_4_1UsCount != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.TxPripause_4_1UsCount))
	}
	if m.TxPripause_5_1UsCount != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.TxPripause_5_1UsCount))
	}
	if m.TxPripause_6_1UsCount != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.TxPripause_6_1UsCount))
	}
	if m.TxPripause_7_1UsCount != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.TxPripause_7_1UsCount))
	}
	if m.RxPripause_0_1UsCount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.RxPripause_0_1UsCount))
	}
	if m.RxPripause_1_1UsCount != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.RxPripause_1_1UsCount))
	}
	if m.RxPripause_2_1UsCount != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.RxPripause_2_1UsCount))
	}
	if m.RxPripause_3_1UsCount != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.RxPripause_3_1UsCount))
	}
	if m.RxPripause_4_1UsCount != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.RxPripause_4_1UsCount))
	}
	if m.RxPripause_5_1UsCount != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.RxPripause_5_1UsCount))
	}
	if m.RxPripause_6_1UsCount != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.RxPripause_6_1UsCount))
	}
	if m.RxPripause_7_1UsCount != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.RxPripause_7_1UsCount))
	}
	if m.RxPause_1UsCount != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.RxPause_1UsCount))
	}
	if m.FramesTxTruncated != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FramesTxTruncated))
	}
	return i, nil
}

func (m *PortGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Meta.Size()))
		n7, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n8, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *PortGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Spec.Size()))
		n9, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Status.Size()))
		n10, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Stats.Size()))
		n11, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *PortGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortInfoGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Meta.Size()))
		n12, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n13, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *PortInfoGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortInfoSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Meta.Size()))
		n14, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n15, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.NumLanes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.NumLanes))
	}
	if len(m.BreakoutModes) > 0 {
		dAtA17 := make([]byte, len(m.BreakoutModes)*10)
		var j16 int
		for _, num := range m.BreakoutModes {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPort(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	return i, nil
}

func (m *PortInfoGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Spec.Size()))
		n18, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *PortInfoGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintPort(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PortSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.PortType != 0 {
		n += 1 + sovPort(uint64(m.PortType))
	}
	if m.AdminState != 0 {
		n += 1 + sovPort(uint64(m.AdminState))
	}
	if m.PortSpeed != 0 {
		n += 1 + sovPort(uint64(m.PortSpeed))
	}
	if m.MacId != 0 {
		n += 1 + sovPort(uint64(m.MacId))
	}
	if m.MacCh != 0 {
		n += 1 + sovPort(uint64(m.MacCh))
	}
	if m.NumLanes != 0 {
		n += 1 + sovPort(uint64(m.NumLanes))
	}
	if m.FecType != 0 {
		n += 1 + sovPort(uint64(m.FecType))
	}
	if m.AutoNegEnable {
		n += 2
	}
	if m.DebounceTime != 0 {
		n += 1 + sovPort(uint64(m.DebounceTime))
	}
	if m.Mtu != 0 {
		n += 1 + sovPort(uint64(m.Mtu))
	}
	return n
}

func (m *PortStatus) Size() (n int) {
	var l int
	_ = l
	if m.OperStatus != 0 {
		n += 1 + sovPort(uint64(m.OperStatus))
	}
	return n
}

func (m *PortRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	return n
}

func (m *PortDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortStats) Size() (n int) {
	var l int
	_ = l
	if m.MacStats != nil {
		l = m.MacStats.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *MacStats) Size() (n int) {
	var l int
	_ = l
	if m.FramesRxOk != 0 {
		n += 1 + sovPort(uint64(m.FramesRxOk))
	}
	if m.FramesRxAll != 0 {
		n += 1 + sovPort(uint64(m.FramesRxAll))
	}
	if m.FramesRxBadFcs != 0 {
		n += 1 + sovPort(uint64(m.FramesRxBadFcs))
	}
	if m.FramesRxBadAll != 0 {
		n += 1 + sovPort(uint64(m.FramesRxBadAll))
	}
	if m.OctetsRxOk != 0 {
		n += 1 + sovPort(uint64(m.OctetsRxOk))
	}
	if m.OctetsRxAll != 0 {
		n += 1 + sovPort(uint64(m.OctetsRxAll))
	}
	if m.FramesRxUnicast != 0 {
		n += 1 + sovPort(uint64(m.FramesRxUnicast))
	}
	if m.FramesRxMulticast != 0 {
		n += 1 + sovPort(uint64(m.FramesRxMulticast))
	}
	if m.FramesRxBroadcast != 0 {
		n += 1 + sovPort(uint64(m.FramesRxBroadcast))
	}
	if m.FramesRxPause != 0 {
		n += 1 + sovPort(uint64(m.FramesRxPause))
	}
	if m.FramesRxBadLength != 0 {
		n += 1 + sovPort(uint64(m.FramesRxBadLength))
	}
	if m.FramesRxUndersized != 0 {
		n += 1 + sovPort(uint64(m.FramesRxUndersized))
	}
	if m.FramesRxOversized != 0 {
		n += 1 + sovPort(uint64(m.FramesRxOversized))
	}
	if m.FramesRxFragments != 0 {
		n += 1 + sovPort(uint64(m.FramesRxFragments))
	}
	if m.FramesRxJabber != 0 {
		n += 1 + sovPort(uint64(m.FramesRxJabber))
	}
	if m.FramesRxPripause != 0 {
		n += 2 + sovPort(uint64(m.FramesRxPripause))
	}
	if m.FramesRxStompedCrc != 0 {
		n += 2 + sovPort(uint64(m.FramesRxStompedCrc))
	}
	if m.FramesRxTooLong != 0 {
		n += 2 + sovPort(uint64(m.FramesRxTooLong))
	}
	if m.FramesRxVlanGood != 0 {
		n += 2 + sovPort(uint64(m.FramesRxVlanGood))
	}
	if m.FramesRxDropped != 0 {
		n += 2 + sovPort(uint64(m.FramesRxDropped))
	}
	if m.FramesRxLessThan_64B != 0 {
		n += 2 + sovPort(uint64(m.FramesRxLessThan_64B))
	}
	if m.FramesRx_64B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_64B))
	}
	if m.FramesRx_65B_127B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_65B_127B))
	}
	if m.FramesRx_128B_255B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_128B_255B))
	}
	if m.FramesRx_256B_511B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_256B_511B))
	}
	if m.FramesRx_512B_1023B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_512B_1023B))
	}
	if m.FramesRx_1024B_1518B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_1024B_1518B))
	}
	if m.FramesRx_1519B_2047B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_1519B_2047B))
	}
	if m.FramesRx_2048B_4095B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_2048B_4095B))
	}
	if m.FramesRx_4096B_8191B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_4096B_8191B))
	}
	if m.FramesRx_8192B_9215B != 0 {
		n += 2 + sovPort(uint64(m.FramesRx_8192B_9215B))
	}
	if m.FramesRxOther != 0 {
		n += 2 + sovPort(uint64(m.FramesRxOther))
	}
	if m.FramesTxOk != 0 {
		n += 2 + sovPort(uint64(m.FramesTxOk))
	}
	if m.FramesTxAll != 0 {
		n += 2 + sovPort(uint64(m.FramesTxAll))
	}
	if m.FramesTxBad != 0 {
		n += 2 + sovPort(uint64(m.FramesTxBad))
	}
	if m.OctetsTxOk != 0 {
		n += 2 + sovPort(uint64(m.OctetsTxOk))
	}
	if m.OctetsTxTotal != 0 {
		n += 2 + sovPort(uint64(m.OctetsTxTotal))
	}
	if m.FramesTxUnicast != 0 {
		n += 2 + sovPort(uint64(m.FramesTxUnicast))
	}
	if m.FramesTxMulticast != 0 {
		n += 2 + sovPort(uint64(m.FramesTxMulticast))
	}
	if m.FramesTxBroadcast != 0 {
		n += 2 + sovPort(uint64(m.FramesTxBroadcast))
	}
	if m.FramesTxPause != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPause))
	}
	if m.FramesTxPripause != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPripause))
	}
	if m.FramesTxVlan != 0 {
		n += 2 + sovPort(uint64(m.FramesTxVlan))
	}
	if m.FramesTxLessThan_64B != 0 {
		n += 2 + sovPort(uint64(m.FramesTxLessThan_64B))
	}
	if m.FramesTx_64B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_64B))
	}
	if m.FramesTx_65B_127B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_65B_127B))
	}
	if m.FramesTx_128B_255B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_128B_255B))
	}
	if m.FramesTx_256B_511B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_256B_511B))
	}
	if m.FramesTx_512B_1023B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_512B_1023B))
	}
	if m.FramesTx_1024B_1518B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_1024B_1518B))
	}
	if m.FramesTx_1519B_2047B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_1519B_2047B))
	}
	if m.FramesTx_2048B_4095B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_2048B_4095B))
	}
	if m.FramesTx_4096B_8191B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_4096B_8191B))
	}
	if m.FramesTx_8192B_9215B != 0 {
		n += 2 + sovPort(uint64(m.FramesTx_8192B_9215B))
	}
	if m.FramesTxOther != 0 {
		n += 2 + sovPort(uint64(m.FramesTxOther))
	}
	if m.FramesTxPri_0 != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPri_0))
	}
	if m.FramesTxPri_1 != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPri_1))
	}
	if m.FramesTxPri_2 != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPri_2))
	}
	if m.FramesTxPri_3 != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPri_3))
	}
	if m.FramesTxPri_4 != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPri_4))
	}
	if m.FramesTxPri_5 != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPri_5))
	}
	if m.FramesTxPri_6 != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPri_6))
	}
	if m.FramesTxPri_7 != 0 {
		n += 2 + sovPort(uint64(m.FramesTxPri_7))
	}
	if m.FramesRxPri_0 != 0 {
		n += 2 + sovPort(uint64(m.FramesRxPri_0))
	}
	if m.FramesRxPri_1 != 0 {
		n += 2 + sovPort(uint64(m.FramesRxPri_1))
	}
	if m.FramesRxPri_2 != 0 {
		n += 2 + sovPort(uint64(m.FramesRxPri_2))
	}
	if m.FramesRxPri_3 != 0 {
		n += 2 + sovPort(uint64(m.FramesRxPri_3))
	}
	if m.FramesRxPri_4 != 0 {
		n += 2 + sovPort(uint64(m.FramesRxPri_4))
	}
	if m.FramesRxPri_5 != 0 {
		n += 2 + sovPort(uint64(m.FramesRxPri_5))
	}
	if m.FramesRxPri_6 != 0 {
		n += 2 + sovPort(uint64(m.FramesRxPri_6))
	}
	if m.FramesRxPri_7 != 0 {
		n += 2 + sovPort(uint64(m.FramesRxPri_7))
	}
	if m.TxPripause_0_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.TxPripause_0_1UsCount))
	}
	if m.TxPripause_1_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.TxPripause_1_1UsCount))
	}
	if m.TxPripause_2_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.TxPripause_2_1UsCount))
	}
	if m.TxPripause_3_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.TxPripause_3_1UsCount))
	}
	if m.TxPripause_4_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.TxPripause_4_1UsCount))
	}
	if m.TxPripause_5_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.TxPripause_5_1UsCount))
	}
	if m.TxPripause_6_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.TxPripause_6_1UsCount))
	}
	if m.TxPripause_7_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.TxPripause_7_1UsCount))
	}
	if m.RxPripause_0_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.RxPripause_0_1UsCount))
	}
	if m.RxPripause_1_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.RxPripause_1_1UsCount))
	}
	if m.RxPripause_2_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.RxPripause_2_1UsCount))
	}
	if m.RxPripause_3_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.RxPripause_3_1UsCount))
	}
	if m.RxPripause_4_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.RxPripause_4_1UsCount))
	}
	if m.RxPripause_5_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.RxPripause_5_1UsCount))
	}
	if m.RxPripause_6_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.RxPripause_6_1UsCount))
	}
	if m.RxPripause_7_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.RxPripause_7_1UsCount))
	}
	if m.RxPause_1UsCount != 0 {
		n += 2 + sovPort(uint64(m.RxPause_1UsCount))
	}
	if m.FramesTxTruncated != 0 {
		n += 2 + sovPort(uint64(m.FramesTxTruncated))
	}
	return n
}

func (m *PortGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortInfoGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortInfoGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortInfoSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.NumLanes != 0 {
		n += 1 + sovPort(uint64(m.NumLanes))
	}
	if len(m.BreakoutModes) > 0 {
		l = 0
		for _, e := range m.BreakoutModes {
			l += sovPort(uint64(e))
		}
		n += 1 + sovPort(uint64(l)) + l
	}
	return n
}

func (m *PortInfoGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortInfoGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func sovPort(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPort(x uint64) (n int) {
	return sovPort(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PortSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortType", wireType)
			}
			m.PortType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortType |= (PortType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminState", wireType)
			}
			m.AdminState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminState |= (PortAdminState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortSpeed", wireType)
			}
			m.PortSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortSpeed |= (PortSpeed(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacId", wireType)
			}
			m.MacId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacCh", wireType)
			}
			m.MacCh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacCh |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLanes", wireType)
			}
			m.NumLanes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLanes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FecType", wireType)
			}
			m.FecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FecType |= (PortFecType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoNegEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoNegEnable = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebounceTime", wireType)
			}
			m.DebounceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebounceTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			m.OperStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperStatus |= (PortOperStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &PortSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PortStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &PortResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &PortDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &PortDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MacStats == nil {
				m.MacStats = &MacStats{}
			}
			if err := m.MacStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxOk", wireType)
			}
			m.FramesRxOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxAll", wireType)
			}
			m.FramesRxAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxAll |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxBadFcs", wireType)
			}
			m.FramesRxBadFcs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxBadFcs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxBadAll", wireType)
			}
			m.FramesRxBadAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxBadAll |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OctetsRxOk", wireType)
			}
			m.OctetsRxOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OctetsRxOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OctetsRxAll", wireType)
			}
			m.OctetsRxAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OctetsRxAll |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxUnicast", wireType)
			}
			m.FramesRxUnicast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxUnicast |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxMulticast", wireType)
			}
			m.FramesRxMulticast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxMulticast |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxBroadcast", wireType)
			}
			m.FramesRxBroadcast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxBroadcast |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPause", wireType)
			}
			m.FramesRxPause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPause |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxBadLength", wireType)
			}
			m.FramesRxBadLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxBadLength |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxUndersized", wireType)
			}
			m.FramesRxUndersized = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxUndersized |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxOversized", wireType)
			}
			m.FramesRxOversized = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxOversized |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxFragments", wireType)
			}
			m.FramesRxFragments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxFragments |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxJabber", wireType)
			}
			m.FramesRxJabber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxJabber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPripause", wireType)
			}
			m.FramesRxPripause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPripause |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxStompedCrc", wireType)
			}
			m.FramesRxStompedCrc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxStompedCrc |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxTooLong", wireType)
			}
			m.FramesRxTooLong = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxTooLong |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxVlanGood", wireType)
			}
			m.FramesRxVlanGood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxVlanGood |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxDropped", wireType)
			}
			m.FramesRxDropped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxDropped |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxLessThan_64B", wireType)
			}
			m.FramesRxLessThan_64B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxLessThan_64B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_64B", wireType)
			}
			m.FramesRx_64B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_64B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_65B_127B", wireType)
			}
			m.FramesRx_65B_127B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_65B_127B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_128B_255B", wireType)
			}
			m.FramesRx_128B_255B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_128B_255B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_256B_511B", wireType)
			}
			m.FramesRx_256B_511B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_256B_511B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_512B_1023B", wireType)
			}
			m.FramesRx_512B_1023B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_512B_1023B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_1024B_1518B", wireType)
			}
			m.FramesRx_1024B_1518B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_1024B_1518B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_1519B_2047B", wireType)
			}
			m.FramesRx_1519B_2047B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_1519B_2047B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_2048B_4095B", wireType)
			}
			m.FramesRx_2048B_4095B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_2048B_4095B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_4096B_8191B", wireType)
			}
			m.FramesRx_4096B_8191B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_4096B_8191B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRx_8192B_9215B", wireType)
			}
			m.FramesRx_8192B_9215B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRx_8192B_9215B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxOther", wireType)
			}
			m.FramesRxOther = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxOther |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxOk", wireType)
			}
			m.FramesTxOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxAll", wireType)
			}
			m.FramesTxAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxAll |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxBad", wireType)
			}
			m.FramesTxBad = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxBad |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OctetsTxOk", wireType)
			}
			m.OctetsTxOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OctetsTxOk |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OctetsTxTotal", wireType)
			}
			m.OctetsTxTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OctetsTxTotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxUnicast", wireType)
			}
			m.FramesTxUnicast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxUnicast |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxMulticast", wireType)
			}
			m.FramesTxMulticast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxMulticast |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxBroadcast", wireType)
			}
			m.FramesTxBroadcast = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxBroadcast |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPause", wireType)
			}
			m.FramesTxPause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPause |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPripause", wireType)
			}
			m.FramesTxPripause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPripause |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxVlan", wireType)
			}
			m.FramesTxVlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxVlan |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxLessThan_64B", wireType)
			}
			m.FramesTxLessThan_64B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxLessThan_64B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_64B", wireType)
			}
			m.FramesTx_64B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_64B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_65B_127B", wireType)
			}
			m.FramesTx_65B_127B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_65B_127B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_128B_255B", wireType)
			}
			m.FramesTx_128B_255B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_128B_255B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_256B_511B", wireType)
			}
			m.FramesTx_256B_511B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_256B_511B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_512B_1023B", wireType)
			}
			m.FramesTx_512B_1023B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_512B_1023B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_1024B_1518B", wireType)
			}
			m.FramesTx_1024B_1518B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_1024B_1518B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_1519B_2047B", wireType)
			}
			m.FramesTx_1519B_2047B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_1519B_2047B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_2048B_4095B", wireType)
			}
			m.FramesTx_2048B_4095B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_2048B_4095B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_4096B_8191B", wireType)
			}
			m.FramesTx_4096B_8191B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_4096B_8191B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTx_8192B_9215B", wireType)
			}
			m.FramesTx_8192B_9215B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTx_8192B_9215B |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxOther", wireType)
			}
			m.FramesTxOther = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxOther |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_0", wireType)
			}
			m.FramesTxPri_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPri_0 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_1", wireType)
			}
			m.FramesTxPri_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPri_1 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_2", wireType)
			}
			m.FramesTxPri_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPri_2 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_3", wireType)
			}
			m.FramesTxPri_3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPri_3 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_4", wireType)
			}
			m.FramesTxPri_4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPri_4 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_5", wireType)
			}
			m.FramesTxPri_5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPri_5 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_6", wireType)
			}
			m.FramesTxPri_6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPri_6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxPri_7", wireType)
			}
			m.FramesTxPri_7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxPri_7 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_0", wireType)
			}
			m.FramesRxPri_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPri_0 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_1", wireType)
			}
			m.FramesRxPri_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPri_1 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 66:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_2", wireType)
			}
			m.FramesRxPri_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPri_2 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 67:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_3", wireType)
			}
			m.FramesRxPri_3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPri_3 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_4", wireType)
			}
			m.FramesRxPri_4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPri_4 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_5", wireType)
			}
			m.FramesRxPri_5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPri_5 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_6", wireType)
			}
			m.FramesRxPri_6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPri_6 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesRxPri_7", wireType)
			}
			m.FramesRxPri_7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesRxPri_7 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_0_1UsCount", wireType)
			}
			m.TxPripause_0_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPripause_0_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 73:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_1_1UsCount", wireType)
			}
			m.TxPripause_1_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPripause_1_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 74:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_2_1UsCount", wireType)
			}
			m.TxPripause_2_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPripause_2_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_3_1UsCount", wireType)
			}
			m.TxPripause_3_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPripause_3_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_4_1UsCount", wireType)
			}
			m.TxPripause_4_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPripause_4_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_5_1UsCount", wireType)
			}
			m.TxPripause_5_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPripause_5_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_6_1UsCount", wireType)
			}
			m.TxPripause_6_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPripause_6_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 79:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPripause_7_1UsCount", wireType)
			}
			m.TxPripause_7_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxPripause_7_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 80:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_0_1UsCount", wireType)
			}
			m.RxPripause_0_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPripause_0_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 81:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_1_1UsCount", wireType)
			}
			m.RxPripause_1_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPripause_1_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_2_1UsCount", wireType)
			}
			m.RxPripause_2_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPripause_2_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_3_1UsCount", wireType)
			}
			m.RxPripause_3_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPripause_3_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 84:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_4_1UsCount", wireType)
			}
			m.RxPripause_4_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPripause_4_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 85:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_5_1UsCount", wireType)
			}
			m.RxPripause_5_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPripause_5_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 86:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_6_1UsCount", wireType)
			}
			m.RxPripause_6_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPripause_6_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 87:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPripause_7_1UsCount", wireType)
			}
			m.RxPripause_7_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPripause_7_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 88:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxPause_1UsCount", wireType)
			}
			m.RxPause_1UsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxPause_1UsCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 89:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FramesTxTruncated", wireType)
			}
			m.FramesTxTruncated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FramesTxTruncated |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &PortGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PortSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PortStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &PortStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &PortGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &PortInfoGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLanes", wireType)
			}
			m.NumLanes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLanes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v PortBreakoutMode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (PortBreakoutMode(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BreakoutModes = append(m.BreakoutModes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPort
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v PortBreakoutMode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (PortBreakoutMode(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BreakoutModes = append(m.BreakoutModes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakoutModes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PortInfoSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &PortInfoGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPort(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPort
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPort
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPort
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPort(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPort = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPort   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("port.proto", fileDescriptorPort) }

var fileDescriptorPort = []byte{
	// 2297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0x8e, 0x6c, 0xc5, 0x91, 0xc7, 0x7f, 0xf4, 0xd8, 0x8e, 0x27, 0x4e, 0x9a, 0xb8, 0xda, 0x4d,
	0xea, 0x75, 0xb2, 0x5e, 0x91, 0x16, 0x65, 0x3b, 0xdb, 0xdd, 0xd6, 0x3f, 0xb2, 0xf2, 0x63, 0x59,
	0x5e, 0x9a, 0xde, 0xed, 0x16, 0x05, 0x08, 0x52, 0x1c, 0xdb, 0x5a, 0x4b, 0xa4, 0x4a, 0x8e, 0x82,
	0xb8, 0x17, 0x45, 0x5b, 0xa0, 0x17, 0x7d, 0x83, 0x7d, 0x98, 0x3e, 0x40, 0xaf, 0x8a, 0xde, 0x14,
	0x68, 0x6f, 0x82, 0x22, 0x7d, 0x83, 0x3c, 0x41, 0x31, 0x33, 0xa4, 0x38, 0x43, 0x8a, 0x5b, 0xa0,
	0x08, 0x9a, 0xab, 0x50, 0xe7, 0xfb, 0xbe, 0x33, 0x67, 0xe6, 0xcc, 0x39, 0x74, 0x0e, 0x01, 0xe8,
	0xfb, 0x01, 0xd9, 0xe8, 0x07, 0x3e, 0xf1, 0x61, 0x91, 0x3e, 0xaf, 0x4c, 0x91, 0xeb, 0x3e, 0x0e,
	0xb9, 0x69, 0xa5, 0x74, 0x75, 0xc9, 0x9f, 0xca, 0x7f, 0x2e, 0x82, 0xd2, 0x89, 0x1f, 0x90, 0xd3,
	0x3e, 0x6e, 0xc3, 0x87, 0xa0, 0xd8, 0xc3, 0xc4, 0x46, 0x85, 0xd5, 0xc2, 0xda, 0x94, 0x36, 0xbf,
	0xc1, 0x25, 0x2d, 0xe7, 0x3b, 0xdc, 0x26, 0x4d, 0x4c, 0x6c, 0x83, 0xc1, 0xb0, 0x0e, 0x66, 0xae,
	0xf0, 0xb5, 0xe5, 0x07, 0xd6, 0xa5, 0xed, 0xb9, 0x5d, 0x8c, 0xc6, 0x22, 0xfe, 0xd5, 0xe5, 0x06,
	0xf5, 0xf5, 0x12, 0x5f, 0x3f, 0x63, 0xc0, 0xde, 0xec, 0xbb, 0x37, 0x0f, 0xc0, 0x2b, 0xec, 0x75,
	0xda, 0xf8, 0xe9, 0x15, 0xbe, 0x36, 0xa6, 0xae, 0xf0, 0x75, 0x2b, 0xe0, 0x20, 0xdc, 0x05, 0x93,
	0x34, 0x32, 0x8b, 0xae, 0x82, 0xc6, 0x57, 0x0b, 0x6b, 0xb3, 0xda, 0xec, 0x06, 0x8b, 0x9b, 0x3a,
	0x31, 0xaf, 0xfb, 0x78, 0x6f, 0xf1, 0xdd, 0x9b, 0x07, 0x4a, 0xa4, 0xef, 0xf4, 0x7a, 0x03, 0x62,
	0x3b, 0x5d, 0x6c, 0x94, 0xfa, 0x11, 0x0e, 0x75, 0x30, 0x65, 0xbb, 0xbd, 0x8e, 0x67, 0x85, 0xc4,
	0x26, 0x18, 0x15, 0x99, 0x93, 0xc5, 0xc4, 0xc9, 0x2e, 0x05, 0x4f, 0x29, 0x66, 0x00, 0x7b, 0xf8,
	0x0c, 0x37, 0xf8, 0xf9, 0x58, 0x61, 0x1f, 0x63, 0x17, 0x4d, 0x30, 0xd5, 0x5c, 0xa2, 0x3a, 0xa5,
	0x66, 0x83, 0x05, 0xc7, 0x1e, 0xe1, 0x63, 0x30, 0xd1, 0xb3, 0xdb, 0x56, 0xc7, 0x45, 0xb7, 0x56,
	0x0b, 0x6b, 0x33, 0x39, 0x61, 0xdd, 0xec, 0xd9, 0xed, 0xe7, 0x43, 0x72, 0xfb, 0x12, 0x95, 0xfe,
	0x0b, 0x79, 0xff, 0x12, 0xaa, 0x60, 0xd2, 0x1b, 0xf4, 0xac, 0xae, 0xed, 0xe1, 0x10, 0x4d, 0xfe,
	0x00, 0xbf, 0xe4, 0x0d, 0x7a, 0x47, 0x94, 0x05, 0x9f, 0x80, 0xd2, 0x39, 0x6e, 0xf3, 0x53, 0x03,
	0x2c, 0xf4, 0xf9, 0x24, 0xf4, 0x43, 0xdc, 0xa6, 0x07, 0x63, 0xdc, 0x3a, 0xe7, 0x0f, 0xf0, 0x11,
	0x98, 0xb3, 0x07, 0xc4, 0xb7, 0x3c, 0x7c, 0x61, 0x61, 0x8f, 0xba, 0x42, 0x53, 0xab, 0x85, 0xb5,
	0x92, 0x31, 0x43, 0xcd, 0xc7, 0xf8, 0xa2, 0xce, 0x8c, 0xf0, 0x23, 0x30, 0xe3, 0x62, 0xc7, 0x1f,
	0x78, 0x6d, 0x6c, 0x91, 0x4e, 0x0f, 0xa3, 0x69, 0x1a, 0x8c, 0x31, 0x1d, 0x1b, 0xcd, 0x4e, 0x0f,
	0x43, 0x05, 0x8c, 0xf7, 0xc8, 0x00, 0xcd, 0x30, 0x88, 0x3e, 0x96, 0xf7, 0x01, 0x60, 0x27, 0x46,
	0x6c, 0x32, 0x08, 0x69, 0x3a, 0xfc, 0x3e, 0x0e, 0x58, 0x36, 0x06, 0x21, 0xbb, 0x46, 0x52, 0x3a,
	0x5a, 0x7d, 0x1c, 0x70, 0xaa, 0x01, 0xfc, 0xe1, 0x73, 0xf9, 0x29, 0x98, 0xa5, 0xa8, 0x81, 0x7f,
	0x3d, 0xc0, 0x21, 0x69, 0x86, 0x17, 0x70, 0x0d, 0xdc, 0x0a, 0xf8, 0x2f, 0x54, 0x58, 0x1d, 0x5f,
	0x9b, 0x12, 0x2f, 0x06, 0xbd, 0xa9, 0x46, 0x0c, 0x97, 0x7f, 0x57, 0x00, 0xd3, 0x5c, 0x1c, 0xf6,
	0x7d, 0x2f, 0xc4, 0xf0, 0x10, 0x00, 0xbb, 0xdf, 0x91, 0x43, 0x50, 0xa2, 0x9b, 0xbc, 0xdb, 0xef,
	0xf0, 0x25, 0xf7, 0x96, 0xde, 0xbd, 0x79, 0x30, 0x1f, 0x1d, 0x72, 0x42, 0x37, 0x26, 0xed, 0x98,
	0x01, 0xd7, 0xc0, 0x44, 0xe4, 0x83, 0xdf, 0x6e, 0x45, 0x88, 0x80, 0x93, 0x23, 0xbc, 0xbc, 0x0b,
	0xe6, 0xc4, 0x08, 0x68, 0xfc, 0x1b, 0xa0, 0x14, 0x44, 0x3f, 0xa3, 0x0d, 0xc0, 0x44, 0x1e, 0x13,
	0x8d, 0x21, 0xa7, 0xfc, 0xfb, 0x02, 0x98, 0xa7, 0xd0, 0x01, 0xee, 0x62, 0x82, 0xa3, 0x83, 0xf8,
	0xff, 0x96, 0x63, 0xf9, 0x39, 0x58, 0xcc, 0x84, 0x40, 0xf7, 0xa2, 0xa6, 0x73, 0xb1, 0x9c, 0x6c,
	0x45, 0x22, 0x27, 0x49, 0xf9, 0x15, 0x80, 0x22, 0xfa, 0x7e, 0x33, 0x53, 0x6e, 0x82, 0xa5, 0xac,
	0x77, 0x1a, 0x69, 0x35, 0x73, 0xea, 0x28, 0x1b, 0x6a, 0xe6, 0xec, 0xb7, 0xc1, 0x64, 0x9c, 0xd4,
	0x10, 0x3e, 0x06, 0x93, 0xb4, 0x78, 0xe9, 0xa2, 0x61, 0x74, 0xee, 0xd1, 0xd5, 0x6b, 0xda, 0x6d,
	0x46, 0x31, 0x4a, 0xbd, 0xe8, 0xa9, 0xfc, 0xcf, 0x07, 0xa0, 0x14, 0x9b, 0xe1, 0x2a, 0x98, 0x3e,
	0x0f, 0xec, 0x1e, 0x0e, 0xad, 0xe0, 0xb5, 0xe5, 0x5f, 0x31, 0x71, 0xd1, 0x00, 0xdc, 0x66, 0xbc,
	0x6e, 0x5d, 0xc1, 0x32, 0x98, 0x49, 0x18, 0x76, 0xb7, 0xcb, 0xf2, 0x54, 0x34, 0xa6, 0x62, 0xca,
	0x6e, 0xb7, 0x0b, 0x3f, 0x01, 0xf3, 0x09, 0xc7, 0xb1, 0x5d, 0xeb, 0xbc, 0x1d, 0xb2, 0xde, 0x58,
	0x34, 0x66, 0x63, 0xde, 0x9e, 0xed, 0x1e, 0xb6, 0xc3, 0x2c, 0x95, 0xba, 0x2c, 0x66, 0xa8, 0xd4,
	0xeb, 0x2a, 0x98, 0xf6, 0xdb, 0x04, 0x93, 0x38, 0xb6, 0x9b, 0x3c, 0x36, 0x6e, 0x8b, 0x63, 0x4b,
	0x18, 0xd4, 0xd1, 0x04, 0x8f, 0x2d, 0xa6, 0x50, 0x2f, 0xeb, 0xe2, 0x82, 0x03, 0xaf, 0xd3, 0xb6,
	0x43, 0xc2, 0x1a, 0x62, 0xd1, 0x98, 0x8b, 0x17, 0x3c, 0xe3, 0x66, 0xb8, 0x01, 0x16, 0x12, 0x6e,
	0x6f, 0xd0, 0x25, 0x9c, 0x5d, 0x62, 0xec, 0xf9, 0x98, 0xdd, 0x8c, 0x01, 0x99, 0xef, 0x04, 0xbe,
	0xed, 0x32, 0xfe, 0xa4, 0xcc, 0xdf, 0x8b, 0x01, 0xda, 0xd6, 0x12, 0x7e, 0xdf, 0x1e, 0x84, 0xbc,
	0x17, 0x16, 0x8d, 0x99, 0x98, 0x7b, 0x42, 0x8d, 0xf0, 0x33, 0xb0, 0x28, 0x1f, 0x52, 0x17, 0x7b,
	0x17, 0xe4, 0x92, 0xf5, 0x40, 0xd1, 0xb1, 0xed, 0x1e, 0x31, 0x00, 0x56, 0x44, 0xc1, 0xc0, 0x73,
	0x71, 0x10, 0x76, 0x7e, 0x83, 0x5d, 0xd6, 0x0e, 0x8b, 0x06, 0x4c, 0xf6, 0x19, 0x23, 0x72, 0xe8,
	0xfe, 0xab, 0x58, 0x30, 0x23, 0xaf, 0xd0, 0x7a, 0x35, 0x92, 0x7f, 0x1e, 0xd8, 0x17, 0x3d, 0xec,
	0x91, 0x10, 0xcd, 0xca, 0xfc, 0xc3, 0x18, 0x80, 0x6b, 0x40, 0x49, 0xf8, 0xdf, 0xd9, 0x8e, 0x83,
	0x03, 0x34, 0x27, 0xa7, 0xf9, 0x05, 0xb3, 0xc2, 0x27, 0x00, 0x0a, 0x87, 0x12, 0x74, 0xf8, 0xb9,
	0x28, 0x8c, 0xab, 0x0c, 0xcf, 0x25, 0xb2, 0x43, 0x15, 0x2c, 0x25, 0xec, 0x90, 0xf8, 0xbd, 0x3e,
	0x76, 0xad, 0x76, 0xd0, 0x46, 0xf3, 0xf2, 0x56, 0x4f, 0x39, 0xb4, 0x1f, 0xb4, 0xe1, 0x63, 0x71,
	0x01, 0xe2, 0xfb, 0x56, 0xd7, 0xf7, 0x2e, 0x10, 0x94, 0xaf, 0x80, 0xe9, 0xfb, 0x47, 0xbe, 0x77,
	0x01, 0x3f, 0x15, 0xf7, 0xf9, 0xaa, 0x6b, 0x7b, 0xd6, 0x85, 0xef, 0xbb, 0x68, 0x41, 0x0e, 0xe7,
	0xeb, 0xae, 0xed, 0x35, 0x7c, 0xdf, 0x95, 0x6f, 0x97, 0x1b, 0xf8, 0xfd, 0x3e, 0x76, 0xd1, 0xa2,
	0xec, 0xfa, 0x80, 0x9b, 0x61, 0x15, 0x2c, 0x27, 0xdc, 0x2e, 0x0e, 0x43, 0x8b, 0x5c, 0xda, 0x9e,
	0x55, 0xab, 0x3a, 0x68, 0x89, 0x29, 0x16, 0x62, 0xc5, 0x11, 0x0e, 0x43, 0xf3, 0xd2, 0xf6, 0x6a,
	0x55, 0x47, 0xae, 0x3f, 0xca, 0xbd, 0x2d, 0xd7, 0x1f, 0xe5, 0x48, 0x3b, 0xac, 0xe9, 0x8e, 0xa5,
	0x6a, 0x5b, 0x0e, 0x5a, 0x96, 0xc3, 0xa8, 0xe9, 0x0e, 0x35, 0xcb, 0x3b, 0x54, 0xb5, 0x6d, 0xc7,
	0xd2, 0x74, 0xdd, 0x41, 0x48, 0xde, 0x21, 0x05, 0xa8, 0x5d, 0xa6, 0x6b, 0x7a, 0xcd, 0xb1, 0x74,
	0x55, 0x75, 0xd0, 0x1d, 0x99, 0x4e, 0x01, 0x6a, 0x97, 0xaf, 0xae, 0xae, 0x6a, 0x8e, 0xa5, 0x56,
	0xb4, 0x4d, 0x07, 0xad, 0xc8, 0x17, 0x85, 0x22, 0x0c, 0x90, 0x13, 0xaa, 0x56, 0xb4, 0xaa, 0x63,
	0xa9, 0xba, 0xba, 0xed, 0xa0, 0xbb, 0x72, 0x42, 0x19, 0xc4, 0x90, 0x94, 0x44, 0x57, 0x77, 0x1c,
	0x4b, 0xab, 0x54, 0xb7, 0x1c, 0x74, 0x2f, 0x25, 0xa1, 0x10, 0x43, 0x64, 0x89, 0x56, 0xa9, 0x6e,
	0x3b, 0x56, 0xb5, 0xb2, 0xa3, 0x3b, 0xe8, 0x47, 0xb2, 0x84, 0x41, 0x0c, 0x91, 0x25, 0xd5, 0xca,
	0x4e, 0xcd, 0xb1, 0xb6, 0xd5, 0x1d, 0xd5, 0x41, 0xf7, 0x65, 0x09, 0x83, 0x18, 0x22, 0x4b, 0xb6,
	0xd5, 0x1d, 0xcd, 0xb1, 0x76, 0x34, 0x55, 0x77, 0xd0, 0x03, 0x59, 0xc2, 0x20, 0x86, 0xc8, 0x2d,
	0xc1, 0x27, 0x97, 0x38, 0x40, 0xab, 0x72, 0x4b, 0x68, 0x51, 0xa3, 0xd0, 0xa8, 0x09, 0x6b, 0x86,
	0x3f, 0x16, 0x1b, 0xb5, 0x29, 0x37, 0x6a, 0xc2, 0x9b, 0x61, 0x59, 0xbc, 0x28, 0x26, 0x6b, 0x86,
	0x12, 0xc7, 0xb1, 0x5d, 0xf4, 0x91, 0xcc, 0xd9, 0xb3, 0x5d, 0xa1, 0xed, 0xf2, 0x95, 0x3e, 0x16,
	0xdb, 0x2e, 0x5b, 0xe9, 0x11, 0x98, 0x4b, 0x18, 0xc4, 0x27, 0x76, 0x17, 0x3d, 0xe4, 0x31, 0xc7,
	0x24, 0x93, 0x1a, 0x85, 0xe2, 0x20, 0x49, 0xeb, 0x7d, 0x24, 0xde, 0x4a, 0x73, 0x44, 0xeb, 0x25,
	0x62, 0xeb, 0xfd, 0x89, 0x78, 0x6d, 0xcc, 0x91, 0xad, 0x97, 0x88, 0xad, 0x77, 0x4d, 0xe6, 0x8f,
	0x6a, 0xbd, 0x24, 0x6e, 0xbd, 0x9f, 0x88, 0xe7, 0x6c, 0x46, 0xad, 0x37, 0xe9, 0x46, 0x44, 0xe8,
	0x46, 0xeb, 0xe2, 0x6d, 0x37, 0x93, 0x6e, 0xf4, 0x31, 0x98, 0x4d, 0xd8, 0xb4, 0x5b, 0xa0, 0xc7,
	0x8c, 0x39, 0x1d, 0x33, 0x69, 0xa3, 0x10, 0x0a, 0x9f, 0xa4, 0x0b, 0xff, 0x89, 0x58, 0xf8, 0x66,
	0x4e, 0xe1, 0x13, 0x5e, 0xf8, 0x9f, 0xca, 0xb9, 0x92, 0x0b, 0x9f, 0x08, 0x85, 0xbf, 0x21, 0x1f,
	0x71, 0xb6, 0xf0, 0x89, 0x58, 0xf8, 0x9f, 0xc9, 0x7b, 0x1b, 0x51, 0xf8, 0x44, 0x2c, 0xfc, 0x8a,
	0x4c, 0x1f, 0x51, 0xf8, 0x44, 0x2a, 0x7c, 0x55, 0xce, 0xc8, 0xa8, 0xc2, 0x27, 0x72, 0xe1, 0x6b,
	0x62, 0xb1, 0x98, 0xa3, 0x0b, 0x9f, 0xc8, 0x85, 0xbf, 0x99, 0x92, 0x8c, 0x2a, 0x7c, 0x22, 0x17,
	0x7e, 0x55, 0x96, 0x8c, 0x2c, 0x7c, 0x22, 0x17, 0xbe, 0x2e, 0x4b, 0x46, 0x16, 0x3e, 0x91, 0x0b,
	0xbf, 0x26, 0x4b, 0x46, 0x16, 0x3e, 0x89, 0x0b, 0x7f, 0x4b, 0xbe, 0x90, 0xbc, 0xf0, 0x1f, 0x4a,
	0x17, 0x37, 0xe8, 0x58, 0x15, 0xb4, 0x2d, 0xdf, 0xb1, 0x93, 0xa0, 0x53, 0xc9, 0xd2, 0x54, 0xb4,
	0x93, 0xa1, 0xa9, 0x59, 0x9a, 0x86, 0x9e, 0x66, 0x68, 0x5a, 0x96, 0xb6, 0x89, 0x3e, 0xcf, 0xd0,
	0x36, 0xb3, 0xb4, 0x2a, 0xfa, 0x69, 0x86, 0x56, 0xcd, 0xd2, 0x74, 0xf4, 0x45, 0x86, 0xa6, 0x67,
	0x69, 0x35, 0xf4, 0x65, 0x86, 0x56, 0xcb, 0xd2, 0xb6, 0xd0, 0xcf, 0x32, 0xb4, 0x2d, 0x81, 0x16,
	0xc4, 0xe7, 0xf6, 0x73, 0x91, 0x66, 0xa4, 0xcf, 0x2d, 0x88, 0xcf, 0x6d, 0x37, 0x43, 0x53, 0xb3,
	0x34, 0x0d, 0xed, 0x65, 0x68, 0x5a, 0x96, 0xb6, 0x89, 0xf6, 0x33, 0xb4, 0xcd, 0x2c, 0xad, 0x8a,
	0x0e, 0x32, 0xb4, 0x6a, 0x96, 0xa6, 0xa3, 0x7a, 0x86, 0xa6, 0x67, 0x69, 0x35, 0x74, 0x98, 0xa1,
	0xd5, 0xb2, 0xb4, 0x2d, 0xd4, 0xc8, 0xd0, 0xb6, 0x68, 0xb3, 0x12, 0x3a, 0x9f, 0x55, 0xb1, 0xd4,
	0x41, 0x68, 0xb5, 0xfd, 0x81, 0x47, 0xd0, 0x33, 0xde, 0xac, 0xc8, 0xb0, 0xff, 0x55, 0xd4, 0x41,
	0xb8, 0x4f, 0xa1, 0xb4, 0x4a, 0x15, 0x54, 0xcf, 0xd3, 0x2a, 0x35, 0x4f, 0xa5, 0x09, 0xaa, 0x17,
	0x69, 0x95, 0x96, 0xa7, 0xda, 0x14, 0x54, 0x2f, 0xd3, 0xaa, 0xcd, 0x3c, 0x55, 0x55, 0x50, 0x1d,
	0xa5, 0x55, 0xd5, 0x3c, 0x95, 0x2e, 0xa8, 0x9a, 0x69, 0x95, 0x9e, 0xa7, 0xaa, 0x09, 0xaa, 0xe3,
	0xb4, 0xaa, 0x96, 0xa7, 0xda, 0x12, 0x54, 0xad, 0xb4, 0x6a, 0x4b, 0x54, 0x05, 0x39, 0xf9, 0x3a,
	0xe1, 0xaa, 0x60, 0x74, 0xbe, 0x82, 0x9c, 0x7c, 0x7d, 0x95, 0x56, 0xa9, 0x79, 0x2a, 0x31, 0x5f,
	0x46, 0x5a, 0xa5, 0xe5, 0xa9, 0xc4, 0x7c, 0x9d, 0xa6, 0x55, 0x9b, 0x79, 0x2a, 0x31, 0x5f, 0x66,
	0x5a, 0x55, 0xcd, 0x53, 0x89, 0xf9, 0x3a, 0x4b, 0xab, 0xf4, 0x3c, 0x95, 0x98, 0xaf, 0xaf, 0xd3,
	0xaa, 0x5a, 0x9e, 0x4a, 0xcc, 0xd7, 0x37, 0x69, 0x55, 0x92, 0xaf, 0xc7, 0x00, 0xc6, 0xff, 0xf9,
	0x13, 0x04, 0xbf, 0xe0, 0xaf, 0xec, 0x80, 0xff, 0x15, 0x32, 0x24, 0x4b, 0x7f, 0xe5, 0x90, 0x60,
	0xe0, 0xb5, 0x6d, 0x82, 0x5d, 0xf4, 0xad, 0xfc, 0x4e, 0x35, 0x63, 0xa0, 0xfc, 0x5b, 0x3e, 0x93,
	0x6a, 0x60, 0xf2, 0x61, 0xa6, 0x31, 0xfb, 0x7c, 0x20, 0x94, 0xac, 0xcf, 0xc7, 0x4a, 0xa9, 0x51,
	0x8c, 0x30, 0x5b, 0x4b, 0x98, 0xc9, 0x1c, 0xe6, 0xaf, 0x05, 0x3e, 0x9a, 0x62, 0xd8, 0x7b, 0x9e,
	0x8f, 0x95, 0x41, 0x31, 0xec, 0xe3, 0x76, 0xb4, 0xbd, 0xf4, 0x7c, 0x8e, 0x61, 0xc2, 0x0c, 0x6d,
	0xfc, 0x87, 0x67, 0x68, 0xf0, 0x21, 0xb8, 0xc9, 0x67, 0x2e, 0x45, 0x46, 0x9c, 0x93, 0x89, 0xa1,
	0xc1, 0xd1, 0x72, 0x83, 0x0f, 0x96, 0x84, 0xfd, 0xf0, 0x09, 0x55, 0x7a, 0xee, 0xb3, 0x94, 0x3a,
	0x97, 0xcc, 0xd0, 0xe7, 0x0f, 0x05, 0xee, 0xe9, 0xb9, 0x77, 0xee, 0x7f, 0xb0, 0x1c, 0xbf, 0xe4,
	0x83, 0x2c, 0x39, 0x06, 0xba, 0x21, 0x2d, 0x9d, 0x67, 0x61, 0x8e, 0x25, 0xb3, 0x93, 0x5c, 0xff,
	0x23, 0x1a, 0x84, 0x52, 0xfc, 0x03, 0x0c, 0xf3, 0xef, 0x8a, 0x83, 0xec, 0x71, 0x36, 0x20, 0x4e,
	0x46, 0xd6, 0x5f, 0x80, 0x59, 0x27, 0xc0, 0xf6, 0x95, 0x3f, 0x20, 0x56, 0xcf, 0x77, 0x31, 0x4d,
	0xf3, 0xf8, 0xda, 0xac, 0x76, 0x3b, 0xd9, 0xd6, 0x5e, 0x84, 0x37, 0x7d, 0x17, 0x1b, 0x33, 0x8e,
	0xf0, 0x2b, 0x2c, 0xff, 0xb1, 0x00, 0x16, 0xa4, 0xad, 0xbf, 0xe7, 0xab, 0xfc, 0x48, 0xba, 0xca,
	0x50, 0x3e, 0xeb, 0xe4, 0x3a, 0x97, 0x5b, 0xe0, 0xf6, 0x88, 0x30, 0x68, 0xc2, 0xf4, 0xcc, 0x0d,
	0xbc, 0x33, 0x22, 0x63, 0xe9, 0x5b, 0xb8, 0xfe, 0xa7, 0x02, 0x50, 0xd2, 0x9b, 0x87, 0x77, 0xc1,
	0xf2, 0x49, 0xcb, 0x30, 0xad, 0x3d, 0xa3, 0xbe, 0xfb, 0xb2, 0x75, 0x66, 0x5a, 0xcd, 0xd6, 0x41,
	0xdd, 0x3a, 0x6e, 0x1d, 0xd7, 0x95, 0x1b, 0xf0, 0x1e, 0x40, 0x23, 0xc0, 0xea, 0x6b, 0x4d, 0x6f,
	0x28, 0x85, 0x5c, 0x54, 0xad, 0x34, 0x94, 0xb1, 0x1c, 0x54, 0x7b, 0xad, 0x57, 0x1a, 0xca, 0xf8,
	0xba, 0xc5, 0x1b, 0x5e, 0x32, 0xa2, 0x87, 0x77, 0xc0, 0x12, 0xe3, 0xb7, 0x4e, 0xea, 0x86, 0x75,
	0x6a, 0xee, 0x9a, 0x67, 0xa7, 0x71, 0x18, 0xcb, 0x60, 0x21, 0x03, 0x9d, 0x9d, 0x28, 0x85, 0x91,
	0x9a, 0x83, 0xd6, 0x37, 0xc7, 0xca, 0x58, 0xbc, 0x40, 0xf2, 0x49, 0x66, 0x48, 0xde, 0x3d, 0x68,
	0x3e, 0x3f, 0x66, 0xec, 0xe1, 0x3e, 0x47, 0x41, 0xcc, 0x4f, 0x61, 0xb8, 0xb6, 0x08, 0x9d, 0x9d,
	0x28, 0x63, 0xeb, 0x75, 0xfe, 0x25, 0x8b, 0x7d, 0xf6, 0x80, 0x60, 0x96, 0x91, 0xcc, 0x6f, 0x4f,
	0x86, 0x3e, 0xe7, 0xc1, 0x4c, 0x62, 0xab, 0x9b, 0xcf, 0x94, 0x82, 0x4c, 0x6b, 0x36, 0x9a, 0xa6,
	0x32, 0xb6, 0xfe, 0x7d, 0x21, 0x1a, 0x08, 0xb3, 0x4f, 0x3f, 0x0b, 0x60, 0x8e, 0x31, 0x4e, 0x4f,
	0xea, 0xf5, 0x83, 0xb4, 0x27, 0x6e, 0x54, 0x1b, 0x82, 0xa7, 0xc8, 0xc4, 0x0e, 0x5c, 0xb6, 0xd1,
	0x14, 0x8d, 0xa7, 0x6c, 0xd5, 0x4a, 0x43, 0x29, 0xa6, 0x6c, 0x34, 0x1d, 0x37, 0x53, 0xeb, 0xaa,
	0x95, 0x4a, 0x43, 0x99, 0x58, 0xff, 0x0a, 0x4c, 0x09, 0x1f, 0x79, 0xe0, 0x6d, 0x00, 0x19, 0xe7,
	0xb0, 0xbe, 0x2f, 0x6d, 0x74, 0x11, 0x28, 0xb2, 0xfd, 0x70, 0x5f, 0x29, 0x64, 0xad, 0xc6, 0xa9,
	0x32, 0xa6, 0xfd, 0x7d, 0x0c, 0x14, 0xa9, 0x4f, 0xf8, 0x39, 0xff, 0x92, 0xb3, 0x1f, 0x60, 0x9a,
	0x9a, 0x45, 0xf1, 0x73, 0x45, 0xdc, 0x97, 0x56, 0x96, 0xb2, 0x1f, 0x31, 0x9a, 0xe1, 0x45, 0xf9,
	0x46, 0x2c, 0x3e, 0xeb, 0xbb, 0xff, 0x83, 0xb8, 0xc1, 0xc5, 0x7c, 0x40, 0x0f, 0x57, 0x72, 0xbe,
	0x2e, 0x50, 0x17, 0x77, 0xf3, 0xc6, 0xf9, 0xdc, 0xd1, 0x97, 0xe0, 0x56, 0xd4, 0xf1, 0xe1, 0xf2,
	0xa8, 0x17, 0x23, 0x75, 0x81, 0x46, 0xbe, 0x19, 0xb8, 0xfe, 0x05, 0x3f, 0xde, 0xa8, 0x5e, 0xe1,
	0xdd, 0xbc, 0xa6, 0x4b, 0xfd, 0xdc, 0xcb, 0xad, 0x6f, 0xe6, 0x6b, 0x6f, 0xe5, 0x2f, 0x6f, 0xef,
	0x17, 0xfe, 0xf6, 0xf6, 0x7e, 0xe1, 0x5f, 0x6f, 0xef, 0x17, 0xbe, 0xff, 0xf7, 0xfd, 0x1b, 0xbf,
	0x2c, 0x5d, 0xda, 0x5d, 0xf6, 0xcd, 0xd5, 0x99, 0x60, 0xff, 0x6c, 0xfe, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x11, 0xb9, 0x74, 0xfe, 0xa5, 0x1d, 0x00, 0x00,
}
