// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: port.proto

package halproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import delphi "github.com/pensando/sw/nic/delphi/proto/delphi"

import strconv "strconv"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Port breakout modes
type PortBreakoutMode int32

const (
	PortBreakoutMode_PORT_BREAKOUT_MODE_NONE  PortBreakoutMode = 0
	PortBreakoutMode_PORT_BREAKOUT_MODE_4x25G PortBreakoutMode = 1
	PortBreakoutMode_PORT_BREAKOUT_MODE_4x10G PortBreakoutMode = 2
	PortBreakoutMode_PORT_BREAKOUT_MODE_2x50G PortBreakoutMode = 3
)

var PortBreakoutMode_name = map[int32]string{
	0: "PORT_BREAKOUT_MODE_NONE",
	1: "PORT_BREAKOUT_MODE_4x25G",
	2: "PORT_BREAKOUT_MODE_4x10G",
	3: "PORT_BREAKOUT_MODE_2x50G",
}
var PortBreakoutMode_value = map[string]int32{
	"PORT_BREAKOUT_MODE_NONE":  0,
	"PORT_BREAKOUT_MODE_4x25G": 1,
	"PORT_BREAKOUT_MODE_4x10G": 2,
	"PORT_BREAKOUT_MODE_2x50G": 3,
}

func (x PortBreakoutMode) String() string {
	return proto.EnumName(PortBreakoutMode_name, int32(x))
}
func (PortBreakoutMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{0} }

// PortOperStatus reflects the current status of the port
type PortOperStatus int32

const (
	PortOperStatus_PORT_OPER_STATUS_NONE PortOperStatus = 0
	PortOperStatus_PORT_OPER_STATUS_UP   PortOperStatus = 1
	PortOperStatus_PORT_OPER_STATUS_DOWN PortOperStatus = 2
)

var PortOperStatus_name = map[int32]string{
	0: "PORT_OPER_STATUS_NONE",
	1: "PORT_OPER_STATUS_UP",
	2: "PORT_OPER_STATUS_DOWN",
}
var PortOperStatus_value = map[string]int32{
	"PORT_OPER_STATUS_NONE": 0,
	"PORT_OPER_STATUS_UP":   1,
	"PORT_OPER_STATUS_DOWN": 2,
}

func (PortOperStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{1} }

// PortAdminState specifies if the port is enabled (admin up) or disabled (admin down)
type PortAdminState int32

const (
	PortAdminState_PORT_ADMIN_STATE_NONE PortAdminState = 0
	PortAdminState_PORT_ADMIN_STATE_DOWN PortAdminState = 1
	PortAdminState_PORT_ADMIN_STATE_UP   PortAdminState = 2
)

var PortAdminState_name = map[int32]string{
	0: "PORT_ADMIN_STATE_NONE",
	1: "PORT_ADMIN_STATE_DOWN",
	2: "PORT_ADMIN_STATE_UP",
}
var PortAdminState_value = map[string]int32{
	"PORT_ADMIN_STATE_NONE": 0,
	"PORT_ADMIN_STATE_DOWN": 1,
	"PORT_ADMIN_STATE_UP":   2,
}

func (x PortAdminState) String() string {
	return proto.EnumName(PortAdminState_name, int32(x))
}
func (PortAdminState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{2} }

// PortType specifies the type of port
type PortType int32

const (
	PortType_PORT_TYPE_NONE PortType = 0
	PortType_PORT_TYPE_ETH  PortType = 1
	PortType_PORT_TYPE_MGMT PortType = 2
)

var PortType_name = map[int32]string{
	0: "PORT_TYPE_NONE",
	1: "PORT_TYPE_ETH",
	2: "PORT_TYPE_MGMT",
}
var PortType_value = map[string]int32{
	"PORT_TYPE_NONE": 0,
	"PORT_TYPE_ETH":  1,
	"PORT_TYPE_MGMT": 2,
}

func (x PortType) String() string {
	return proto.EnumName(PortType_name, int32(x))
}
func (PortType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{3} }

// PortSpeed specifies the speed of the port
type PortSpeed int32

const (
	PortSpeed_PORT_SPEED_NONE PortSpeed = 0
	PortSpeed_PORT_SPEED_1G   PortSpeed = 1
	PortSpeed_PORT_SPEED_10G  PortSpeed = 2
	PortSpeed_PORT_SPEED_25G  PortSpeed = 3
	PortSpeed_PORT_SPEED_40G  PortSpeed = 4
	PortSpeed_PORT_SPEED_50G  PortSpeed = 5
	PortSpeed_PORT_SPEED_100G PortSpeed = 6
)

var PortSpeed_name = map[int32]string{
	0: "PORT_SPEED_NONE",
	1: "PORT_SPEED_1G",
	2: "PORT_SPEED_10G",
	3: "PORT_SPEED_25G",
	4: "PORT_SPEED_40G",
	5: "PORT_SPEED_50G",
	6: "PORT_SPEED_100G",
}
var PortSpeed_value = map[string]int32{
	"PORT_SPEED_NONE": 0,
	"PORT_SPEED_1G":   1,
	"PORT_SPEED_10G":  2,
	"PORT_SPEED_25G":  3,
	"PORT_SPEED_40G":  4,
	"PORT_SPEED_50G":  5,
	"PORT_SPEED_100G": 6,
}

func (x PortSpeed) String() string {
	return proto.EnumName(PortSpeed_name, int32(x))
}
func (PortSpeed) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{4} }

type PortFecType int32

const (
	PortFecType_PORT_FEC_TYPE_NONE PortFecType = 0
	PortFecType_PORT_FEC_TYPE_FC   PortFecType = 1
	PortFecType_PORT_FEC_TYPE_RS   PortFecType = 2
)

var PortFecType_name = map[int32]string{
	0: "PORT_FEC_TYPE_NONE",
	1: "PORT_FEC_TYPE_FC",
	2: "PORT_FEC_TYPE_RS",
}
var PortFecType_value = map[string]int32{
	"PORT_FEC_TYPE_NONE": 0,
	"PORT_FEC_TYPE_FC":   1,
	"PORT_FEC_TYPE_RS":   2,
}

func (x PortFecType) String() string {
	return proto.EnumName(PortFecType_name, int32(x))
}
func (PortFecType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{5} }

type PortXcvrState int32

const (
	PortXcvrState_XCVR_STATE_REMOVED        PortXcvrState = 0
	PortXcvrState_XCVR_STATE_INSERTED       PortXcvrState = 1
	PortXcvrState_XCVR_STATE_PENDING        PortXcvrState = 2
	PortXcvrState_XCVR_STATE_SPROM_READ     PortXcvrState = 3
	PortXcvrState_XCVR_STATE_SPROM_READ_ERR PortXcvrState = 4
)

var PortXcvrState_name = map[int32]string{
	0: "XCVR_STATE_REMOVED",
	1: "XCVR_STATE_INSERTED",
	2: "XCVR_STATE_PENDING",
	3: "XCVR_STATE_SPROM_READ",
	4: "XCVR_STATE_SPROM_READ_ERR",
}
var PortXcvrState_value = map[string]int32{
	"XCVR_STATE_REMOVED":        0,
	"XCVR_STATE_INSERTED":       1,
	"XCVR_STATE_PENDING":        2,
	"XCVR_STATE_SPROM_READ":     3,
	"XCVR_STATE_SPROM_READ_ERR": 4,
}

func (x PortXcvrState) String() string {
	return proto.EnumName(PortXcvrState_name, int32(x))
}
func (PortXcvrState) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{6} }

type PortXcvrPid int32

const (
	PortXcvrPid_XCVR_PID_UNKNOWN       PortXcvrPid = 0
	PortXcvrPid_XCVR_PID_SFP_10G_CR    PortXcvrPid = 1
	PortXcvrPid_XCVR_PID_QSFP_100G_CR4 PortXcvrPid = 2
)

var PortXcvrPid_name = map[int32]string{
	0: "XCVR_PID_UNKNOWN",
	1: "XCVR_PID_SFP_10G_CR",
	2: "XCVR_PID_QSFP_100G_CR4",
}
var PortXcvrPid_value = map[string]int32{
	"XCVR_PID_UNKNOWN":       0,
	"XCVR_PID_SFP_10G_CR":    1,
	"XCVR_PID_QSFP_100G_CR4": 2,
}

func (x PortXcvrPid) String() string {
	return proto.EnumName(PortXcvrPid_name, int32(x))
}
func (PortXcvrPid) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{7} }

type PortPauseType int32

const (
	PortPauseType_PORT_PAUSE_TYPE_NONE PortPauseType = 0
	PortPauseType_PORT_PAUSE_TYPE_LINK PortPauseType = 1
	PortPauseType_PORT_PAUSE_TYPE_PFC  PortPauseType = 2
)

var PortPauseType_name = map[int32]string{
	0: "PORT_PAUSE_TYPE_NONE",
	1: "PORT_PAUSE_TYPE_LINK",
	2: "PORT_PAUSE_TYPE_PFC",
}
var PortPauseType_value = map[string]int32{
	"PORT_PAUSE_TYPE_NONE": 0,
	"PORT_PAUSE_TYPE_LINK": 1,
	"PORT_PAUSE_TYPE_PFC":  2,
}

func (x PortPauseType) String() string {
	return proto.EnumName(PortPauseType_name, int32(x))
}
func (PortPauseType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{8} }

// ------------------------------------------------------------------------------
// MacStats consists of MacStatsType and count
// ------------------------------------------------------------------------------
type MacStatsType int32

const (
	MacStatsType_FRAMES_RX_OK            MacStatsType = 0
	MacStatsType_FRAMES_RX_ALL           MacStatsType = 1
	MacStatsType_FRAMES_RX_BAD_FCS       MacStatsType = 2
	MacStatsType_FRAMES_RX_BAD_ALL       MacStatsType = 3
	MacStatsType_OCTETS_RX_OK            MacStatsType = 4
	MacStatsType_OCTETS_RX_ALL           MacStatsType = 5
	MacStatsType_FRAMES_RX_UNICAST       MacStatsType = 6
	MacStatsType_FRAMES_RX_MULTICAST     MacStatsType = 7
	MacStatsType_FRAMES_RX_BROADCAST     MacStatsType = 8
	MacStatsType_FRAMES_RX_PAUSE         MacStatsType = 9
	MacStatsType_FRAMES_RX_BAD_LENGTH    MacStatsType = 10
	MacStatsType_FRAMES_RX_UNDERSIZED    MacStatsType = 11
	MacStatsType_FRAMES_RX_OVERSIZED     MacStatsType = 12
	MacStatsType_FRAMES_RX_FRAGMENTS     MacStatsType = 13
	MacStatsType_FRAMES_RX_JABBER        MacStatsType = 14
	MacStatsType_FRAMES_RX_PRIPAUSE      MacStatsType = 15
	MacStatsType_FRAMES_RX_STOMPED_CRC   MacStatsType = 16
	MacStatsType_FRAMES_RX_TOO_LONG      MacStatsType = 17
	MacStatsType_FRAMES_RX_VLAN_GOOD     MacStatsType = 18
	MacStatsType_FRAMES_RX_DROPPED       MacStatsType = 19
	MacStatsType_FRAMES_RX_LESS_THAN_64B MacStatsType = 20
	MacStatsType_FRAMES_RX_64B           MacStatsType = 21
	MacStatsType_FRAMES_RX_65B_127B      MacStatsType = 22
	MacStatsType_FRAMES_RX_128B_255B     MacStatsType = 23
	MacStatsType_FRAMES_RX_256B_511B     MacStatsType = 24
	MacStatsType_FRAMES_RX_512B_1023B    MacStatsType = 25
	MacStatsType_FRAMES_RX_1024B_1518B   MacStatsType = 26
	MacStatsType_FRAMES_RX_1519B_2047B   MacStatsType = 27
	MacStatsType_FRAMES_RX_2048B_4095B   MacStatsType = 28
	MacStatsType_FRAMES_RX_4096B_8191B   MacStatsType = 29
	MacStatsType_FRAMES_RX_8192B_9215B   MacStatsType = 30
	MacStatsType_FRAMES_RX_OTHER         MacStatsType = 31
	MacStatsType_FRAMES_TX_OK            MacStatsType = 32
	MacStatsType_FRAMES_TX_ALL           MacStatsType = 33
	MacStatsType_FRAMES_TX_BAD           MacStatsType = 34
	MacStatsType_OCTETS_TX_OK            MacStatsType = 35
	MacStatsType_OCTETS_TX_TOTAL         MacStatsType = 36
	MacStatsType_FRAMES_TX_UNICAST       MacStatsType = 37
	MacStatsType_FRAMES_TX_MULTICAST     MacStatsType = 38
	MacStatsType_FRAMES_TX_BROADCAST     MacStatsType = 39
	MacStatsType_FRAMES_TX_PAUSE         MacStatsType = 40
	MacStatsType_FRAMES_TX_PRIPAUSE      MacStatsType = 41
	MacStatsType_FRAMES_TX_VLAN          MacStatsType = 42
	MacStatsType_FRAMES_TX_LESS_THAN_64B MacStatsType = 43
	MacStatsType_FRAMES_TX_64B           MacStatsType = 44
	MacStatsType_FRAMES_TX_65B_127B      MacStatsType = 45
	MacStatsType_FRAMES_TX_128B_255B     MacStatsType = 46
	MacStatsType_FRAMES_TX_256B_511B     MacStatsType = 47
	MacStatsType_FRAMES_TX_512B_1023B    MacStatsType = 48
	MacStatsType_FRAMES_TX_1024B_1518B   MacStatsType = 49
	MacStatsType_FRAMES_TX_1519B_2047B   MacStatsType = 50
	MacStatsType_FRAMES_TX_2048B_4095B   MacStatsType = 51
	MacStatsType_FRAMES_TX_4096B_8191B   MacStatsType = 52
	MacStatsType_FRAMES_TX_8192B_9215B   MacStatsType = 53
	MacStatsType_FRAMES_TX_OTHER         MacStatsType = 54
	MacStatsType_FRAMES_TX_PRI_0         MacStatsType = 55
	MacStatsType_FRAMES_TX_PRI_1         MacStatsType = 56
	MacStatsType_FRAMES_TX_PRI_2         MacStatsType = 57
	MacStatsType_FRAMES_TX_PRI_3         MacStatsType = 58
	MacStatsType_FRAMES_TX_PRI_4         MacStatsType = 59
	MacStatsType_FRAMES_TX_PRI_5         MacStatsType = 60
	MacStatsType_FRAMES_TX_PRI_6         MacStatsType = 61
	MacStatsType_FRAMES_TX_PRI_7         MacStatsType = 62
	MacStatsType_FRAMES_RX_PRI_0         MacStatsType = 63
	MacStatsType_FRAMES_RX_PRI_1         MacStatsType = 64
	MacStatsType_FRAMES_RX_PRI_2         MacStatsType = 65
	MacStatsType_FRAMES_RX_PRI_3         MacStatsType = 66
	MacStatsType_FRAMES_RX_PRI_4         MacStatsType = 67
	MacStatsType_FRAMES_RX_PRI_5         MacStatsType = 68
	MacStatsType_FRAMES_RX_PRI_6         MacStatsType = 69
	MacStatsType_FRAMES_RX_PRI_7         MacStatsType = 70
	MacStatsType_TX_PRIPAUSE_0_1US_COUNT MacStatsType = 71
	MacStatsType_TX_PRIPAUSE_1_1US_COUNT MacStatsType = 72
	MacStatsType_TX_PRIPAUSE_2_1US_COUNT MacStatsType = 73
	MacStatsType_TX_PRIPAUSE_3_1US_COUNT MacStatsType = 74
	MacStatsType_TX_PRIPAUSE_4_1US_COUNT MacStatsType = 75
	MacStatsType_TX_PRIPAUSE_5_1US_COUNT MacStatsType = 76
	MacStatsType_TX_PRIPAUSE_6_1US_COUNT MacStatsType = 77
	MacStatsType_TX_PRIPAUSE_7_1US_COUNT MacStatsType = 78
	MacStatsType_RX_PRIPAUSE_0_1US_COUNT MacStatsType = 79
	MacStatsType_RX_PRIPAUSE_1_1US_COUNT MacStatsType = 80
	MacStatsType_RX_PRIPAUSE_2_1US_COUNT MacStatsType = 81
	MacStatsType_RX_PRIPAUSE_3_1US_COUNT MacStatsType = 82
	MacStatsType_RX_PRIPAUSE_4_1US_COUNT MacStatsType = 83
	MacStatsType_RX_PRIPAUSE_5_1US_COUNT MacStatsType = 84
	MacStatsType_RX_PRIPAUSE_6_1US_COUNT MacStatsType = 85
	MacStatsType_RX_PRIPAUSE_7_1US_COUNT MacStatsType = 86
	MacStatsType_RX_PAUSE_1US_COUNT      MacStatsType = 87
	MacStatsType_FRAMES_TX_TRUNCATED     MacStatsType = 88
)

var MacStatsType_name = map[int32]string{
	0:  "FRAMES_RX_OK",
	1:  "FRAMES_RX_ALL",
	2:  "FRAMES_RX_BAD_FCS",
	3:  "FRAMES_RX_BAD_ALL",
	4:  "OCTETS_RX_OK",
	5:  "OCTETS_RX_ALL",
	6:  "FRAMES_RX_UNICAST",
	7:  "FRAMES_RX_MULTICAST",
	8:  "FRAMES_RX_BROADCAST",
	9:  "FRAMES_RX_PAUSE",
	10: "FRAMES_RX_BAD_LENGTH",
	11: "FRAMES_RX_UNDERSIZED",
	12: "FRAMES_RX_OVERSIZED",
	13: "FRAMES_RX_FRAGMENTS",
	14: "FRAMES_RX_JABBER",
	15: "FRAMES_RX_PRIPAUSE",
	16: "FRAMES_RX_STOMPED_CRC",
	17: "FRAMES_RX_TOO_LONG",
	18: "FRAMES_RX_VLAN_GOOD",
	19: "FRAMES_RX_DROPPED",
	20: "FRAMES_RX_LESS_THAN_64B",
	21: "FRAMES_RX_64B",
	22: "FRAMES_RX_65B_127B",
	23: "FRAMES_RX_128B_255B",
	24: "FRAMES_RX_256B_511B",
	25: "FRAMES_RX_512B_1023B",
	26: "FRAMES_RX_1024B_1518B",
	27: "FRAMES_RX_1519B_2047B",
	28: "FRAMES_RX_2048B_4095B",
	29: "FRAMES_RX_4096B_8191B",
	30: "FRAMES_RX_8192B_9215B",
	31: "FRAMES_RX_OTHER",
	32: "FRAMES_TX_OK",
	33: "FRAMES_TX_ALL",
	34: "FRAMES_TX_BAD",
	35: "OCTETS_TX_OK",
	36: "OCTETS_TX_TOTAL",
	37: "FRAMES_TX_UNICAST",
	38: "FRAMES_TX_MULTICAST",
	39: "FRAMES_TX_BROADCAST",
	40: "FRAMES_TX_PAUSE",
	41: "FRAMES_TX_PRIPAUSE",
	42: "FRAMES_TX_VLAN",
	43: "FRAMES_TX_LESS_THAN_64B",
	44: "FRAMES_TX_64B",
	45: "FRAMES_TX_65B_127B",
	46: "FRAMES_TX_128B_255B",
	47: "FRAMES_TX_256B_511B",
	48: "FRAMES_TX_512B_1023B",
	49: "FRAMES_TX_1024B_1518B",
	50: "FRAMES_TX_1519B_2047B",
	51: "FRAMES_TX_2048B_4095B",
	52: "FRAMES_TX_4096B_8191B",
	53: "FRAMES_TX_8192B_9215B",
	54: "FRAMES_TX_OTHER",
	55: "FRAMES_TX_PRI_0",
	56: "FRAMES_TX_PRI_1",
	57: "FRAMES_TX_PRI_2",
	58: "FRAMES_TX_PRI_3",
	59: "FRAMES_TX_PRI_4",
	60: "FRAMES_TX_PRI_5",
	61: "FRAMES_TX_PRI_6",
	62: "FRAMES_TX_PRI_7",
	63: "FRAMES_RX_PRI_0",
	64: "FRAMES_RX_PRI_1",
	65: "FRAMES_RX_PRI_2",
	66: "FRAMES_RX_PRI_3",
	67: "FRAMES_RX_PRI_4",
	68: "FRAMES_RX_PRI_5",
	69: "FRAMES_RX_PRI_6",
	70: "FRAMES_RX_PRI_7",
	71: "TX_PRIPAUSE_0_1US_COUNT",
	72: "TX_PRIPAUSE_1_1US_COUNT",
	73: "TX_PRIPAUSE_2_1US_COUNT",
	74: "TX_PRIPAUSE_3_1US_COUNT",
	75: "TX_PRIPAUSE_4_1US_COUNT",
	76: "TX_PRIPAUSE_5_1US_COUNT",
	77: "TX_PRIPAUSE_6_1US_COUNT",
	78: "TX_PRIPAUSE_7_1US_COUNT",
	79: "RX_PRIPAUSE_0_1US_COUNT",
	80: "RX_PRIPAUSE_1_1US_COUNT",
	81: "RX_PRIPAUSE_2_1US_COUNT",
	82: "RX_PRIPAUSE_3_1US_COUNT",
	83: "RX_PRIPAUSE_4_1US_COUNT",
	84: "RX_PRIPAUSE_5_1US_COUNT",
	85: "RX_PRIPAUSE_6_1US_COUNT",
	86: "RX_PRIPAUSE_7_1US_COUNT",
	87: "RX_PAUSE_1US_COUNT",
	88: "FRAMES_TX_TRUNCATED",
}
var MacStatsType_value = map[string]int32{
	"FRAMES_RX_OK":            0,
	"FRAMES_RX_ALL":           1,
	"FRAMES_RX_BAD_FCS":       2,
	"FRAMES_RX_BAD_ALL":       3,
	"OCTETS_RX_OK":            4,
	"OCTETS_RX_ALL":           5,
	"FRAMES_RX_UNICAST":       6,
	"FRAMES_RX_MULTICAST":     7,
	"FRAMES_RX_BROADCAST":     8,
	"FRAMES_RX_PAUSE":         9,
	"FRAMES_RX_BAD_LENGTH":    10,
	"FRAMES_RX_UNDERSIZED":    11,
	"FRAMES_RX_OVERSIZED":     12,
	"FRAMES_RX_FRAGMENTS":     13,
	"FRAMES_RX_JABBER":        14,
	"FRAMES_RX_PRIPAUSE":      15,
	"FRAMES_RX_STOMPED_CRC":   16,
	"FRAMES_RX_TOO_LONG":      17,
	"FRAMES_RX_VLAN_GOOD":     18,
	"FRAMES_RX_DROPPED":       19,
	"FRAMES_RX_LESS_THAN_64B": 20,
	"FRAMES_RX_64B":           21,
	"FRAMES_RX_65B_127B":      22,
	"FRAMES_RX_128B_255B":     23,
	"FRAMES_RX_256B_511B":     24,
	"FRAMES_RX_512B_1023B":    25,
	"FRAMES_RX_1024B_1518B":   26,
	"FRAMES_RX_1519B_2047B":   27,
	"FRAMES_RX_2048B_4095B":   28,
	"FRAMES_RX_4096B_8191B":   29,
	"FRAMES_RX_8192B_9215B":   30,
	"FRAMES_RX_OTHER":         31,
	"FRAMES_TX_OK":            32,
	"FRAMES_TX_ALL":           33,
	"FRAMES_TX_BAD":           34,
	"OCTETS_TX_OK":            35,
	"OCTETS_TX_TOTAL":         36,
	"FRAMES_TX_UNICAST":       37,
	"FRAMES_TX_MULTICAST":     38,
	"FRAMES_TX_BROADCAST":     39,
	"FRAMES_TX_PAUSE":         40,
	"FRAMES_TX_PRIPAUSE":      41,
	"FRAMES_TX_VLAN":          42,
	"FRAMES_TX_LESS_THAN_64B": 43,
	"FRAMES_TX_64B":           44,
	"FRAMES_TX_65B_127B":      45,
	"FRAMES_TX_128B_255B":     46,
	"FRAMES_TX_256B_511B":     47,
	"FRAMES_TX_512B_1023B":    48,
	"FRAMES_TX_1024B_1518B":   49,
	"FRAMES_TX_1519B_2047B":   50,
	"FRAMES_TX_2048B_4095B":   51,
	"FRAMES_TX_4096B_8191B":   52,
	"FRAMES_TX_8192B_9215B":   53,
	"FRAMES_TX_OTHER":         54,
	"FRAMES_TX_PRI_0":         55,
	"FRAMES_TX_PRI_1":         56,
	"FRAMES_TX_PRI_2":         57,
	"FRAMES_TX_PRI_3":         58,
	"FRAMES_TX_PRI_4":         59,
	"FRAMES_TX_PRI_5":         60,
	"FRAMES_TX_PRI_6":         61,
	"FRAMES_TX_PRI_7":         62,
	"FRAMES_RX_PRI_0":         63,
	"FRAMES_RX_PRI_1":         64,
	"FRAMES_RX_PRI_2":         65,
	"FRAMES_RX_PRI_3":         66,
	"FRAMES_RX_PRI_4":         67,
	"FRAMES_RX_PRI_5":         68,
	"FRAMES_RX_PRI_6":         69,
	"FRAMES_RX_PRI_7":         70,
	"TX_PRIPAUSE_0_1US_COUNT": 71,
	"TX_PRIPAUSE_1_1US_COUNT": 72,
	"TX_PRIPAUSE_2_1US_COUNT": 73,
	"TX_PRIPAUSE_3_1US_COUNT": 74,
	"TX_PRIPAUSE_4_1US_COUNT": 75,
	"TX_PRIPAUSE_5_1US_COUNT": 76,
	"TX_PRIPAUSE_6_1US_COUNT": 77,
	"TX_PRIPAUSE_7_1US_COUNT": 78,
	"RX_PRIPAUSE_0_1US_COUNT": 79,
	"RX_PRIPAUSE_1_1US_COUNT": 80,
	"RX_PRIPAUSE_2_1US_COUNT": 81,
	"RX_PRIPAUSE_3_1US_COUNT": 82,
	"RX_PRIPAUSE_4_1US_COUNT": 83,
	"RX_PRIPAUSE_5_1US_COUNT": 84,
	"RX_PRIPAUSE_6_1US_COUNT": 85,
	"RX_PRIPAUSE_7_1US_COUNT": 86,
	"RX_PAUSE_1US_COUNT":      87,
	"FRAMES_TX_TRUNCATED":     88,
}

func (x MacStatsType) String() string {
	return proto.EnumName(MacStatsType_name, int32(x))
}
func (MacStatsType) EnumDescriptor() ([]byte, []int) { return fileDescriptorPort, []int{9} }

type PortXcvrStatus struct {
	Port  int32         `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	State PortXcvrState `protobuf:"varint,2,opt,name=state,proto3,enum=port.PortXcvrState" json:"state,omitempty"`
	Pid   PortXcvrPid   `protobuf:"varint,3,opt,name=pid,proto3,enum=port.PortXcvrPid" json:"pid,omitempty"`
}

func (m *PortXcvrStatus) Reset()                    { *m = PortXcvrStatus{} }
func (m *PortXcvrStatus) String() string            { return proto.CompactTextString(m) }
func (*PortXcvrStatus) ProtoMessage()               {}
func (*PortXcvrStatus) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{0} }

func (m *PortXcvrStatus) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PortXcvrStatus) GetState() PortXcvrState {
	if m != nil {
		return m.State
	}
	return PortXcvrState_XCVR_STATE_REMOVED
}

func (m *PortXcvrStatus) GetPid() PortXcvrPid {
	if m != nil {
		return m.Pid
	}
	return PortXcvrPid_XCVR_PID_UNKNOWN
}

// PortSpec message is used to do add/mod properties of a port
type PortSpec struct {
	Meta *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	// key_or_handle is the port number
	KeyOrHandle   *PortKeyHandle `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	PortType      PortType       `protobuf:"varint,3,opt,name=port_type,json=portType,proto3,enum=port.PortType" json:"port_type,omitempty" venice:immutable`
	AdminState    PortAdminState `protobuf:"varint,4,opt,name=admin_state,json=adminState,proto3,enum=port.PortAdminState" json:"admin_state,omitempty"`
	PortSpeed     PortSpeed      `protobuf:"varint,5,opt,name=port_speed,json=portSpeed,proto3,enum=port.PortSpeed" json:"port_speed,omitempty"`
	MacId         uint32         `protobuf:"varint,6,opt,name=mac_id,json=macId,proto3" json:"mac_id,omitempty" venice:immutable`
	MacCh         uint32         `protobuf:"varint,7,opt,name=mac_ch,json=macCh,proto3" json:"mac_ch,omitempty" venice:immutable`
	NumLanes      uint32         `protobuf:"varint,8,opt,name=num_lanes,json=numLanes,proto3" json:"num_lanes,omitempty" venice:immutable`
	FecType       PortFecType    `protobuf:"varint,9,opt,name=fec_type,json=fecType,proto3,enum=port.PortFecType" json:"fec_type,omitempty"`
	AutoNegEnable bool           `protobuf:"varint,10,opt,name=auto_neg_enable,json=autoNegEnable,proto3" json:"auto_neg_enable,omitempty"`
	DebounceTime  uint32         `protobuf:"varint,11,opt,name=debounce_time,json=debounceTime,proto3" json:"debounce_time,omitempty"`
	Mtu           uint32         `protobuf:"varint,12,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Pause         PortPauseType  `protobuf:"varint,13,opt,name=pause,proto3,enum=port.PortPauseType" json:"pause,omitempty"`
	MacStatsReset bool           `protobuf:"varint,14,opt,name=mac_stats_reset,json=macStatsReset,proto3" json:"mac_stats_reset,omitempty"`
}

func (m *PortSpec) Reset()                    { *m = PortSpec{} }
func (m *PortSpec) String() string            { return proto.CompactTextString(m) }
func (*PortSpec) ProtoMessage()               {}
func (*PortSpec) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{1} }

func (m *PortSpec) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PortSpec) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortSpec) GetPortType() PortType {
	if m != nil {
		return m.PortType
	}
	return PortType_PORT_TYPE_NONE
}

func (m *PortSpec) GetAdminState() PortAdminState {
	if m != nil {
		return m.AdminState
	}
	return PortAdminState_PORT_ADMIN_STATE_NONE
}

func (m *PortSpec) GetPortSpeed() PortSpeed {
	if m != nil {
		return m.PortSpeed
	}
	return PortSpeed_PORT_SPEED_NONE
}

func (m *PortSpec) GetMacId() uint32 {
	if m != nil {
		return m.MacId
	}
	return 0
}

func (m *PortSpec) GetMacCh() uint32 {
	if m != nil {
		return m.MacCh
	}
	return 0
}

func (m *PortSpec) GetNumLanes() uint32 {
	if m != nil {
		return m.NumLanes
	}
	return 0
}

func (m *PortSpec) GetFecType() PortFecType {
	if m != nil {
		return m.FecType
	}
	return PortFecType_PORT_FEC_TYPE_NONE
}

func (m *PortSpec) GetAutoNegEnable() bool {
	if m != nil {
		return m.AutoNegEnable
	}
	return false
}

func (m *PortSpec) GetDebounceTime() uint32 {
	if m != nil {
		return m.DebounceTime
	}
	return 0
}

func (m *PortSpec) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *PortSpec) GetPause() PortPauseType {
	if m != nil {
		return m.Pause
	}
	return PortPauseType_PORT_PAUSE_TYPE_NONE
}

func (m *PortSpec) GetMacStatsReset() bool {
	if m != nil {
		return m.MacStatsReset
	}
	return false
}

type PortStatus struct {
	Meta        *delphi.ObjectMeta `protobuf:"bytes,1,opt,name=Meta" json:"Meta,omitempty"`
	KeyOrHandle *PortKeyHandle     `protobuf:"bytes,2,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	OperStatus  PortOperStatus     `protobuf:"varint,3,opt,name=oper_status,json=operStatus,proto3,enum=port.PortOperStatus" json:"oper_status,omitempty"`
	XcvrStatus  *PortXcvrStatus    `protobuf:"bytes,4,opt,name=xcvr_status,json=xcvrStatus" json:"xcvr_status,omitempty"`
	PortSpeed   PortSpeed          `protobuf:"varint,5,opt,name=port_speed,json=portSpeed,proto3,enum=port.PortSpeed" json:"port_speed,omitempty"`
}

func (m *PortStatus) Reset()                    { *m = PortStatus{} }
func (m *PortStatus) String() string            { return proto.CompactTextString(m) }
func (*PortStatus) ProtoMessage()               {}
func (*PortStatus) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{2} }

func (m *PortStatus) GetMeta() *delphi.ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PortStatus) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortStatus) GetOperStatus() PortOperStatus {
	if m != nil {
		return m.OperStatus
	}
	return PortOperStatus_PORT_OPER_STATUS_NONE
}

func (m *PortStatus) GetXcvrStatus() *PortXcvrStatus {
	if m != nil {
		return m.XcvrStatus
	}
	return nil
}

func (m *PortStatus) GetPortSpeed() PortSpeed {
	if m != nil {
		return m.PortSpeed
	}
	return PortSpeed_PORT_SPEED_NONE
}

// ------------------------------------------------------------------------------
// PortRequestMsg is batched add or modify port request
// ------------------------------------------------------------------------------
type PortRequestMsg struct {
	Request []*PortSpec `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortRequestMsg) Reset()                    { *m = PortRequestMsg{} }
func (m *PortRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortRequestMsg) ProtoMessage()               {}
func (*PortRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{3} }

func (m *PortRequestMsg) GetRequest() []*PortSpec {
	if m != nil {
		return m.Request
	}
	return nil
}

// PortResponse is response to PortSpec
type PortResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Status    *PortStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *PortResponse) Reset()                    { *m = PortResponse{} }
func (m *PortResponse) String() string            { return proto.CompactTextString(m) }
func (*PortResponse) ProtoMessage()               {}
func (*PortResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{4} }

func (m *PortResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortResponse) GetStatus() *PortStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortResponseMsg is batched response to PortRequestMsg
// ------------------------------------------------------------------------------
type PortResponseMsg struct {
	Response []*PortResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortResponseMsg) Reset()                    { *m = PortResponseMsg{} }
func (m *PortResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortResponseMsg) ProtoMessage()               {}
func (*PortResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{5} }

func (m *PortResponseMsg) GetResponse() []*PortResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// PortDeleteRequest is used to delete a port
type PortDeleteRequest struct {
	// key_or_handle is the port number
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *PortDeleteRequest) Reset()                    { *m = PortDeleteRequest{} }
func (m *PortDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteRequest) ProtoMessage()               {}
func (*PortDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{6} }

func (m *PortDeleteRequest) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortDeleteRequestMsg is used to delete a batch of ports
// ------------------------------------------------------------------------------
type PortDeleteRequestMsg struct {
	Request []*PortDeleteRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortDeleteRequestMsg) Reset()                    { *m = PortDeleteRequestMsg{} }
func (m *PortDeleteRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteRequestMsg) ProtoMessage()               {}
func (*PortDeleteRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{7} }

func (m *PortDeleteRequestMsg) GetRequest() []*PortDeleteRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortDeleteResponse is response to PortDeleteRequest
// ------------------------------------------------------------------------------
type PortDeleteResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *PortDeleteResponse) Reset()                    { *m = PortDeleteResponse{} }
func (m *PortDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteResponse) ProtoMessage()               {}
func (*PortDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{8} }

func (m *PortDeleteResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

// ------------------------------------------------------------------------------
// PortDeleteResponseMsg is batched response to PortDeleteRequestMsg
// ------------------------------------------------------------------------------
type PortDeleteResponseMsg struct {
	Response []*PortDeleteResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortDeleteResponseMsg) Reset()                    { *m = PortDeleteResponseMsg{} }
func (m *PortDeleteResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortDeleteResponseMsg) ProtoMessage()               {}
func (*PortDeleteResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{9} }

func (m *PortDeleteResponseMsg) GetResponse() []*PortDeleteResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type MacStats struct {
	Type  MacStatsType `protobuf:"varint,1,opt,name=type,proto3,enum=port.MacStatsType" json:"type,omitempty"`
	Count uint64       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *MacStats) Reset()                    { *m = MacStats{} }
func (m *MacStats) String() string            { return proto.CompactTextString(m) }
func (*MacStats) ProtoMessage()               {}
func (*MacStats) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{10} }

func (m *MacStats) GetType() MacStatsType {
	if m != nil {
		return m.Type
	}
	return MacStatsType_FRAMES_RX_OK
}

func (m *MacStats) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// PortStats captures all the statistics of given Port
type PortStats struct {
	MacStats []*MacStats `protobuf:"bytes,1,rep,name=mac_stats,json=macStats" json:"mac_stats,omitempty"`
}

func (m *PortStats) Reset()                    { *m = PortStats{} }
func (m *PortStats) String() string            { return proto.CompactTextString(m) }
func (*PortStats) ProtoMessage()               {}
func (*PortStats) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{11} }

func (m *PortStats) GetMacStats() []*MacStats {
	if m != nil {
		return m.MacStats
	}
	return nil
}

// PortGetRequest is used to get information about a port
type PortGetRequest struct {
	// key_or_handle is the port number
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *PortGetRequest) Reset()                    { *m = PortGetRequest{} }
func (m *PortGetRequest) String() string            { return proto.CompactTextString(m) }
func (*PortGetRequest) ProtoMessage()               {}
func (*PortGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{12} }

func (m *PortGetRequest) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortGetRequestMsg is batched GET request for ports
// ------------------------------------------------------------------------------
type PortGetRequestMsg struct {
	Request []*PortGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortGetRequestMsg) Reset()                    { *m = PortGetRequestMsg{} }
func (m *PortGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortGetRequestMsg) ProtoMessage()               {}
func (*PortGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{13} }

func (m *PortGetRequestMsg) GetRequest() []*PortGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// PortGetResponse captures all the information about a port
// only if api_status indicates success, other fields are valid
type PortGetResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *PortSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status    *PortStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Stats     *PortStats  `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *PortGetResponse) Reset()                    { *m = PortGetResponse{} }
func (m *PortGetResponse) String() string            { return proto.CompactTextString(m) }
func (*PortGetResponse) ProtoMessage()               {}
func (*PortGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{14} }

func (m *PortGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortGetResponse) GetSpec() *PortSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PortGetResponse) GetStatus() *PortStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PortGetResponse) GetStats() *PortStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// ------------------------------------------------------------------------------
// PortGetResponseMsg is the batched response to PortGetRequestMsg
// ------------------------------------------------------------------------------
type PortGetResponseMsg struct {
	Response []*PortGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortGetResponseMsg) Reset()                    { *m = PortGetResponseMsg{} }
func (m *PortGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortGetResponseMsg) ProtoMessage()               {}
func (*PortGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{15} }

func (m *PortGetResponseMsg) GetResponse() []*PortGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type PortInfoGetRequest struct {
	// key_or_handle is the port number
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
}

func (m *PortInfoGetRequest) Reset()                    { *m = PortInfoGetRequest{} }
func (m *PortInfoGetRequest) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetRequest) ProtoMessage()               {}
func (*PortInfoGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{16} }

func (m *PortInfoGetRequest) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

type PortInfoGetRequestMsg struct {
	Request []*PortInfoGetRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
}

func (m *PortInfoGetRequestMsg) Reset()                    { *m = PortInfoGetRequestMsg{} }
func (m *PortInfoGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetRequestMsg) ProtoMessage()               {}
func (*PortInfoGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{17} }

func (m *PortInfoGetRequestMsg) GetRequest() []*PortInfoGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type PortInfoSpec struct {
	// key_or_handle is the port number
	KeyOrHandle   *PortKeyHandle     `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	PortType      PortType           `protobuf:"varint,3,opt,name=port_type,json=portType,proto3,enum=port.PortType" json:"port_type,omitempty"`
	NumLanes      uint32             `protobuf:"varint,4,opt,name=num_lanes,json=numLanes,proto3" json:"num_lanes,omitempty"`
	BreakoutModes []PortBreakoutMode `protobuf:"varint,5,rep,packed,name=breakout_modes,json=breakoutModes,enum=port.PortBreakoutMode" json:"breakout_modes,omitempty"`
}

func (m *PortInfoSpec) Reset()                    { *m = PortInfoSpec{} }
func (m *PortInfoSpec) String() string            { return proto.CompactTextString(m) }
func (*PortInfoSpec) ProtoMessage()               {}
func (*PortInfoSpec) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{18} }

func (m *PortInfoSpec) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortInfoSpec) GetPortType() PortType {
	if m != nil {
		return m.PortType
	}
	return PortType_PORT_TYPE_NONE
}

func (m *PortInfoSpec) GetNumLanes() uint32 {
	if m != nil {
		return m.NumLanes
	}
	return 0
}

func (m *PortInfoSpec) GetBreakoutModes() []PortBreakoutMode {
	if m != nil {
		return m.BreakoutModes
	}
	return nil
}

type PortInfoGetResponse struct {
	ApiStatus ApiStatus     `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Spec      *PortInfoSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *PortInfoGetResponse) Reset()                    { *m = PortInfoGetResponse{} }
func (m *PortInfoGetResponse) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetResponse) ProtoMessage()               {}
func (*PortInfoGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{19} }

func (m *PortInfoGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *PortInfoGetResponse) GetSpec() *PortInfoSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type PortInfoGetResponseMsg struct {
	Response []*PortInfoGetResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (m *PortInfoGetResponseMsg) Reset()                    { *m = PortInfoGetResponseMsg{} }
func (m *PortInfoGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*PortInfoGetResponseMsg) ProtoMessage()               {}
func (*PortInfoGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{20} }

func (m *PortInfoGetResponseMsg) GetResponse() []*PortInfoGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// ------------------------------------------------------------------------------
// port related events
// ------------------------------------------------------------------------------
type PortEvent struct {
	KeyOrHandle *PortKeyHandle `protobuf:"bytes,1,opt,name=key_or_handle,json=keyOrHandle" json:"key_or_handle,omitempty" venice:key`
	OperStatus  PortOperStatus `protobuf:"varint,2,opt,name=oper_status,json=operStatus,proto3,enum=port.PortOperStatus" json:"oper_status,omitempty"`
	AdminStatus PortAdminState `protobuf:"varint,3,opt,name=admin_status,json=adminStatus,proto3,enum=port.PortAdminState" json:"admin_status,omitempty"`
	Msg         string         `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *PortEvent) Reset()                    { *m = PortEvent{} }
func (m *PortEvent) String() string            { return proto.CompactTextString(m) }
func (*PortEvent) ProtoMessage()               {}
func (*PortEvent) Descriptor() ([]byte, []int) { return fileDescriptorPort, []int{21} }

func (m *PortEvent) GetKeyOrHandle() *PortKeyHandle {
	if m != nil {
		return m.KeyOrHandle
	}
	return nil
}

func (m *PortEvent) GetOperStatus() PortOperStatus {
	if m != nil {
		return m.OperStatus
	}
	return PortOperStatus_PORT_OPER_STATUS_NONE
}

func (m *PortEvent) GetAdminStatus() PortAdminState {
	if m != nil {
		return m.AdminStatus
	}
	return PortAdminState_PORT_ADMIN_STATE_NONE
}

func (m *PortEvent) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*PortXcvrStatus)(nil), "port.PortXcvrStatus")
	proto.RegisterType((*PortSpec)(nil), "port.PortSpec")
	proto.RegisterType((*PortStatus)(nil), "port.PortStatus")
	proto.RegisterType((*PortRequestMsg)(nil), "port.PortRequestMsg")
	proto.RegisterType((*PortResponse)(nil), "port.PortResponse")
	proto.RegisterType((*PortResponseMsg)(nil), "port.PortResponseMsg")
	proto.RegisterType((*PortDeleteRequest)(nil), "port.PortDeleteRequest")
	proto.RegisterType((*PortDeleteRequestMsg)(nil), "port.PortDeleteRequestMsg")
	proto.RegisterType((*PortDeleteResponse)(nil), "port.PortDeleteResponse")
	proto.RegisterType((*PortDeleteResponseMsg)(nil), "port.PortDeleteResponseMsg")
	proto.RegisterType((*MacStats)(nil), "port.MacStats")
	proto.RegisterType((*PortStats)(nil), "port.PortStats")
	proto.RegisterType((*PortGetRequest)(nil), "port.PortGetRequest")
	proto.RegisterType((*PortGetRequestMsg)(nil), "port.PortGetRequestMsg")
	proto.RegisterType((*PortGetResponse)(nil), "port.PortGetResponse")
	proto.RegisterType((*PortGetResponseMsg)(nil), "port.PortGetResponseMsg")
	proto.RegisterType((*PortInfoGetRequest)(nil), "port.PortInfoGetRequest")
	proto.RegisterType((*PortInfoGetRequestMsg)(nil), "port.PortInfoGetRequestMsg")
	proto.RegisterType((*PortInfoSpec)(nil), "port.PortInfoSpec")
	proto.RegisterType((*PortInfoGetResponse)(nil), "port.PortInfoGetResponse")
	proto.RegisterType((*PortInfoGetResponseMsg)(nil), "port.PortInfoGetResponseMsg")
	proto.RegisterType((*PortEvent)(nil), "port.PortEvent")
	proto.RegisterEnum("port.PortBreakoutMode", PortBreakoutMode_name, PortBreakoutMode_value)
	proto.RegisterEnum("port.PortOperStatus", PortOperStatus_name, PortOperStatus_value)
	proto.RegisterEnum("port.PortAdminState", PortAdminState_name, PortAdminState_value)
	proto.RegisterEnum("port.PortType", PortType_name, PortType_value)
	proto.RegisterEnum("port.PortSpeed", PortSpeed_name, PortSpeed_value)
	proto.RegisterEnum("port.PortFecType", PortFecType_name, PortFecType_value)
	proto.RegisterEnum("port.PortXcvrState", PortXcvrState_name, PortXcvrState_value)
	proto.RegisterEnum("port.PortXcvrPid", PortXcvrPid_name, PortXcvrPid_value)
	proto.RegisterEnum("port.PortPauseType", PortPauseType_name, PortPauseType_value)
	proto.RegisterEnum("port.MacStatsType", MacStatsType_name, MacStatsType_value)
}
func (x PortOperStatus) String() string {
	s, ok := PortOperStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Port service

type PortClient interface {
	PortCreate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error)
	PortUpdate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error)
	PortDelete(ctx context.Context, in *PortDeleteRequestMsg, opts ...grpc.CallOption) (*PortDeleteResponseMsg, error)
	PortGet(ctx context.Context, in *PortGetRequestMsg, opts ...grpc.CallOption) (*PortGetResponseMsg, error)
	PortInfoGet(ctx context.Context, in *PortInfoGetRequestMsg, opts ...grpc.CallOption) (*PortInfoGetResponseMsg, error)
}

type portClient struct {
	cc *grpc.ClientConn
}

func NewPortClient(cc *grpc.ClientConn) PortClient {
	return &portClient{cc}
}

func (c *portClient) PortCreate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error) {
	out := new(PortResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortUpdate(ctx context.Context, in *PortRequestMsg, opts ...grpc.CallOption) (*PortResponseMsg, error) {
	out := new(PortResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortDelete(ctx context.Context, in *PortDeleteRequestMsg, opts ...grpc.CallOption) (*PortDeleteResponseMsg, error) {
	out := new(PortDeleteResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortGet(ctx context.Context, in *PortGetRequestMsg, opts ...grpc.CallOption) (*PortGetResponseMsg, error) {
	out := new(PortGetResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) PortInfoGet(ctx context.Context, in *PortInfoGetRequestMsg, opts ...grpc.CallOption) (*PortInfoGetResponseMsg, error) {
	out := new(PortInfoGetResponseMsg)
	err := grpc.Invoke(ctx, "/port.Port/PortInfoGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Port service

type PortServer interface {
	PortCreate(context.Context, *PortRequestMsg) (*PortResponseMsg, error)
	PortUpdate(context.Context, *PortRequestMsg) (*PortResponseMsg, error)
	PortDelete(context.Context, *PortDeleteRequestMsg) (*PortDeleteResponseMsg, error)
	PortGet(context.Context, *PortGetRequestMsg) (*PortGetResponseMsg, error)
	PortInfoGet(context.Context, *PortInfoGetRequestMsg) (*PortInfoGetResponseMsg, error)
}

func RegisterPortServer(s *grpc.Server, srv PortServer) {
	s.RegisterService(&_Port_serviceDesc, srv)
}

func _Port_PortCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortCreate(ctx, req.(*PortRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortUpdate(ctx, req.(*PortRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortDeleteRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortDelete(ctx, req.(*PortDeleteRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortGet(ctx, req.(*PortGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_PortInfoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortInfoGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).PortInfoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.Port/PortInfoGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).PortInfoGet(ctx, req.(*PortInfoGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Port_serviceDesc = grpc.ServiceDesc{
	ServiceName: "port.Port",
	HandlerType: (*PortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PortCreate",
			Handler:    _Port_PortCreate_Handler,
		},
		{
			MethodName: "PortUpdate",
			Handler:    _Port_PortUpdate_Handler,
		},
		{
			MethodName: "PortDelete",
			Handler:    _Port_PortDelete_Handler,
		},
		{
			MethodName: "PortGet",
			Handler:    _Port_PortGet_Handler,
		},
		{
			MethodName: "PortInfoGet",
			Handler:    _Port_PortInfoGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "port.proto",
}

func (m *PortXcvrStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortXcvrStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Port != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Port))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.State))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Pid))
	}
	return i, nil
}

func (m *PortSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n2, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.PortType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.PortType))
	}
	if m.AdminState != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.AdminState))
	}
	if m.PortSpeed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.PortSpeed))
	}
	if m.MacId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.MacId))
	}
	if m.MacCh != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.MacCh))
	}
	if m.NumLanes != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.NumLanes))
	}
	if m.FecType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.FecType))
	}
	if m.AutoNegEnable {
		dAtA[i] = 0x50
		i++
		if m.AutoNegEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DebounceTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.DebounceTime))
	}
	if m.Mtu != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Mtu))
	}
	if m.Pause != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Pause))
	}
	if m.MacStatsReset {
		dAtA[i] = 0x70
		i++
		if m.MacStatsReset {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PortStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Meta.Size()))
		n3, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.KeyOrHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n4, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.OperStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.OperStatus))
	}
	if m.XcvrStatus != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.XcvrStatus.Size()))
		n5, err := m.XcvrStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.PortSpeed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.PortSpeed))
	}
	return i, nil
}

func (m *PortRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Status.Size()))
		n6, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *PortResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n7, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *PortDeleteRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortDeleteRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *PortDeleteResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortDeleteResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MacStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MacStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Type))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *PortStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MacStats) > 0 {
		for _, msg := range m.MacStats {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n8, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *PortGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Spec.Size()))
		n9, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Status.Size()))
		n10, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Stats.Size()))
		n11, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *PortGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortInfoGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n12, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *PortInfoGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, msg := range m.Request {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortInfoSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n13, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.PortType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.PortType))
	}
	if m.NumLanes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.NumLanes))
	}
	if len(m.BreakoutModes) > 0 {
		dAtA15 := make([]byte, len(m.BreakoutModes)*10)
		var j14 int
		for _, num := range m.BreakoutModes {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPort(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	return i, nil
}

func (m *PortInfoGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.Spec.Size()))
		n16, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *PortInfoGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortInfoGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, msg := range m.Response {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPort(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PortEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.KeyOrHandle.Size()))
		n17, err := m.KeyOrHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.OperStatus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.OperStatus))
	}
	if m.AdminStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPort(dAtA, i, uint64(m.AdminStatus))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPort(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func encodeVarintPort(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PortXcvrStatus) Size() (n int) {
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovPort(uint64(m.Port))
	}
	if m.State != 0 {
		n += 1 + sovPort(uint64(m.State))
	}
	if m.Pid != 0 {
		n += 1 + sovPort(uint64(m.Pid))
	}
	return n
}

func (m *PortSpec) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.PortType != 0 {
		n += 1 + sovPort(uint64(m.PortType))
	}
	if m.AdminState != 0 {
		n += 1 + sovPort(uint64(m.AdminState))
	}
	if m.PortSpeed != 0 {
		n += 1 + sovPort(uint64(m.PortSpeed))
	}
	if m.MacId != 0 {
		n += 1 + sovPort(uint64(m.MacId))
	}
	if m.MacCh != 0 {
		n += 1 + sovPort(uint64(m.MacCh))
	}
	if m.NumLanes != 0 {
		n += 1 + sovPort(uint64(m.NumLanes))
	}
	if m.FecType != 0 {
		n += 1 + sovPort(uint64(m.FecType))
	}
	if m.AutoNegEnable {
		n += 2
	}
	if m.DebounceTime != 0 {
		n += 1 + sovPort(uint64(m.DebounceTime))
	}
	if m.Mtu != 0 {
		n += 1 + sovPort(uint64(m.Mtu))
	}
	if m.Pause != 0 {
		n += 1 + sovPort(uint64(m.Pause))
	}
	if m.MacStatsReset {
		n += 2
	}
	return n
}

func (m *PortStatus) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.OperStatus != 0 {
		n += 1 + sovPort(uint64(m.OperStatus))
	}
	if m.XcvrStatus != nil {
		l = m.XcvrStatus.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.PortSpeed != 0 {
		n += 1 + sovPort(uint64(m.PortSpeed))
	}
	return n
}

func (m *PortRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortDeleteRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortDeleteRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	return n
}

func (m *PortDeleteResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *MacStats) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPort(uint64(m.Type))
	}
	if m.Count != 0 {
		n += 1 + sovPort(uint64(m.Count))
	}
	return n
}

func (m *PortStats) Size() (n int) {
	var l int
	_ = l
	if len(m.MacStats) > 0 {
		for _, e := range m.MacStats {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortInfoGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortInfoGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortInfoSpec) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.PortType != 0 {
		n += 1 + sovPort(uint64(m.PortType))
	}
	if m.NumLanes != 0 {
		n += 1 + sovPort(uint64(m.NumLanes))
	}
	if len(m.BreakoutModes) > 0 {
		l = 0
		for _, e := range m.BreakoutModes {
			l += sovPort(uint64(e))
		}
		n += 1 + sovPort(uint64(l)) + l
	}
	return n
}

func (m *PortInfoGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovPort(uint64(m.ApiStatus))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func (m *PortInfoGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Response) > 0 {
		for _, e := range m.Response {
			l = e.Size()
			n += 1 + l + sovPort(uint64(l))
		}
	}
	return n
}

func (m *PortEvent) Size() (n int) {
	var l int
	_ = l
	if m.KeyOrHandle != nil {
		l = m.KeyOrHandle.Size()
		n += 1 + l + sovPort(uint64(l))
	}
	if m.OperStatus != 0 {
		n += 1 + sovPort(uint64(m.OperStatus))
	}
	if m.AdminStatus != 0 {
		n += 1 + sovPort(uint64(m.AdminStatus))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPort(uint64(l))
	}
	return n
}

func sovPort(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPort(x uint64) (n int) {
	return sovPort(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PortXcvrStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortXcvrStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortXcvrStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (PortXcvrState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (PortXcvrPid(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortType", wireType)
			}
			m.PortType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortType |= (PortType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminState", wireType)
			}
			m.AdminState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminState |= (PortAdminState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortSpeed", wireType)
			}
			m.PortSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortSpeed |= (PortSpeed(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacId", wireType)
			}
			m.MacId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacCh", wireType)
			}
			m.MacCh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacCh |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLanes", wireType)
			}
			m.NumLanes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLanes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FecType", wireType)
			}
			m.FecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FecType |= (PortFecType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoNegEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoNegEnable = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebounceTime", wireType)
			}
			m.DebounceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebounceTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtu", wireType)
			}
			m.Mtu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtu |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pause", wireType)
			}
			m.Pause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pause |= (PortPauseType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacStatsReset", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MacStatsReset = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &delphi.ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			m.OperStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperStatus |= (PortOperStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XcvrStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XcvrStatus == nil {
				m.XcvrStatus = &PortXcvrStatus{}
			}
			if err := m.XcvrStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortSpeed", wireType)
			}
			m.PortSpeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortSpeed |= (PortSpeed(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &PortSpec{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PortStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &PortResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortDeleteRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortDeleteRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortDeleteRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &PortDeleteRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortDeleteResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortDeleteResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortDeleteResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &PortDeleteResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MacStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MacStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MacStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MacStatsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacStats = append(m.MacStats, &MacStats{})
			if err := m.MacStats[len(m.MacStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &PortGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PortSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PortStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &PortStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &PortGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &PortInfoGetRequest{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortType", wireType)
			}
			m.PortType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortType |= (PortType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLanes", wireType)
			}
			m.NumLanes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLanes |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v PortBreakoutMode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (PortBreakoutMode(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BreakoutModes = append(m.BreakoutModes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPort
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPort
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v PortBreakoutMode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPort
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (PortBreakoutMode(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BreakoutModes = append(m.BreakoutModes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BreakoutModes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PortInfoSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortInfoGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortInfoGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortInfoGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = append(m.Response, &PortInfoGetResponse{})
			if err := m.Response[len(m.Response)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPort
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyOrHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyOrHandle == nil {
				m.KeyOrHandle = &PortKeyHandle{}
			}
			if err := m.KeyOrHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperStatus", wireType)
			}
			m.OperStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperStatus |= (PortOperStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminStatus", wireType)
			}
			m.AdminStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminStatus |= (PortAdminState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPort
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPort
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPort(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPort
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPort(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPort
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPort
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPort
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPort
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPort(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPort = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPort   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("port.proto", fileDescriptorPort) }

var fileDescriptorPort = []byte{
	// 2217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcd, 0x73, 0xdb, 0xc6,
	0x15, 0x0f, 0x28, 0x4a, 0xa6, 0x96, 0xfa, 0x58, 0xc1, 0x92, 0x4c, 0xcb, 0x89, 0xac, 0x32, 0x8d,
	0xab, 0xd0, 0xa9, 0x4a, 0x40, 0xa4, 0x3e, 0x9c, 0x26, 0x2d, 0x40, 0x42, 0x14, 0x2d, 0x92, 0xa0,
	0x97, 0xa0, 0xed, 0xba, 0x99, 0xd9, 0xa1, 0xc8, 0xb5, 0xc5, 0x4a, 0xfc, 0x28, 0x01, 0x7a, 0xac,
	0x5b, 0x2e, 0x3d, 0xf4, 0xda, 0x43, 0xdb, 0x5b, 0x2f, 0x39, 0xf4, 0xd8, 0x3f, 0xa3, 0xa7, 0x4e,
	0x0f, 0xed, 0xd5, 0xd3, 0xf1, 0x9f, 0xe0, 0x99, 0xde, 0x3b, 0xbb, 0x0b, 0x12, 0xbb, 0x80, 0x94,
	0xb4, 0x19, 0x4d, 0x4f, 0x02, 0x7f, 0xbf, 0xf7, 0xde, 0xbe, 0x7d, 0xef, 0xb7, 0x8b, 0xc5, 0x0a,
	0x80, 0xe1, 0x60, 0xe4, 0xed, 0x0c, 0x47, 0x03, 0x6f, 0xa0, 0xc6, 0xe9, 0xf3, 0x46, 0xd2, 0xbb,
	0x1c, 0x12, 0x97, 0x43, 0x1b, 0x89, 0xf3, 0x33, 0xff, 0x69, 0xa1, 0x43, 0x2e, 0x86, 0x67, 0x5d,
	0xfe, 0x2b, 0xed, 0x81, 0xa5, 0xfa, 0x60, 0xe4, 0x3d, 0x6f, 0xbf, 0x1e, 0x35, 0xbc, 0x96, 0x37,
	0x76, 0x55, 0x15, 0x30, 0xf7, 0x94, 0xb2, 0xa5, 0x6c, 0xcf, 0x22, 0xf6, 0xac, 0x7e, 0x0a, 0x66,
	0x5d, 0xaf, 0xe5, 0x91, 0x54, 0x6c, 0x4b, 0xd9, 0x5e, 0xd2, 0x6f, 0xef, 0xb0, 0xc1, 0x44, 0x47,
	0x82, 0xb8, 0x85, 0xfa, 0x31, 0x98, 0x19, 0x76, 0x3b, 0xa9, 0x19, 0x66, 0xb8, 0x22, 0x1b, 0xd6,
	0xbb, 0x1d, 0x44, 0xd9, 0xf4, 0xef, 0x67, 0x41, 0x82, 0x82, 0x8d, 0x21, 0x69, 0xab, 0x0f, 0x40,
	0xbc, 0x4a, 0xbc, 0x16, 0x1b, 0x30, 0xa9, 0xab, 0x3b, 0x7e, 0x7e, 0xf6, 0xe9, 0xaf, 0x48, 0xdb,
	0xa3, 0x0c, 0x62, 0xbc, 0x6a, 0x81, 0xc5, 0x73, 0x72, 0x89, 0x07, 0x23, 0x7c, 0xd6, 0xea, 0x77,
	0x2e, 0x78, 0x32, 0x49, 0x7d, 0x65, 0xe7, 0xfc, 0x8c, 0x8d, 0x70, 0x42, 0x2e, 0x8f, 0x19, 0x61,
	0x2e, 0xbd, 0x7f, 0x7b, 0x1f, 0xbc, 0x26, 0xfd, 0x6e, 0x9b, 0x3c, 0x3a, 0x27, 0x97, 0x28, 0x79,
	0x4e, 0x2e, 0xed, 0x11, 0x27, 0x55, 0x03, 0xcc, 0xd3, 0xa4, 0x30, 0xad, 0x8e, 0x9f, 0xe6, 0x52,
	0x90, 0xa6, 0x73, 0x39, 0x24, 0xe6, 0xea, 0xfb, 0xb7, 0xf7, 0xa1, 0xef, 0xdf, 0xed, 0xf5, 0xc6,
	0x5e, 0xeb, 0xf4, 0x82, 0xa0, 0xc4, 0xd0, 0xe7, 0xd5, 0x3c, 0x48, 0xb6, 0x3a, 0xbd, 0x6e, 0x1f,
	0xf3, 0xa2, 0xc4, 0x59, 0x90, 0xd5, 0x20, 0x88, 0x41, 0x49, 0x5e, 0x15, 0xd0, 0x9a, 0x3e, 0xab,
	0x3b, 0xbc, 0x49, 0xd8, 0x1d, 0x12, 0xd2, 0x49, 0xcd, 0x32, 0xaf, 0xe5, 0xc0, 0xab, 0x41, 0x61,
	0xc4, 0x92, 0x63, 0x8f, 0xea, 0x43, 0x30, 0xd7, 0x6b, 0xb5, 0x71, 0xb7, 0x93, 0x9a, 0xdb, 0x52,
	0xb6, 0x17, 0xaf, 0x49, 0x6b, 0xb6, 0xd7, 0x6a, 0x97, 0xa7, 0xc6, 0xed, 0xb3, 0xd4, 0xad, 0xef,
	0x30, 0x2e, 0x9c, 0xa9, 0x1a, 0x98, 0xef, 0x8f, 0x7b, 0xf8, 0xa2, 0xd5, 0x27, 0x6e, 0x2a, 0xf1,
	0x2d, 0xf6, 0x89, 0xfe, 0xb8, 0x57, 0xa1, 0x56, 0xea, 0x67, 0x20, 0xf1, 0x92, 0xb4, 0x79, 0xd5,
	0xe6, 0xc3, 0xcd, 0x3d, 0x22, 0x6d, 0x5a, 0x18, 0x74, 0xeb, 0x25, 0x7f, 0x50, 0x1f, 0x80, 0xe5,
	0xd6, 0xd8, 0x1b, 0xe0, 0x3e, 0x79, 0x85, 0x49, 0x9f, 0x86, 0x4a, 0x81, 0x2d, 0x65, 0x3b, 0x81,
	0x16, 0x29, 0x5c, 0x23, 0xaf, 0x2c, 0x06, 0xaa, 0x1f, 0x83, 0xc5, 0x0e, 0x39, 0x1d, 0x8c, 0xfb,
	0x6d, 0x82, 0xbd, 0x6e, 0x8f, 0xa4, 0x92, 0x34, 0x19, 0xb4, 0x30, 0x01, 0x9d, 0x6e, 0x8f, 0xa8,
	0x10, 0xcc, 0xf4, 0xbc, 0x71, 0x6a, 0x81, 0x51, 0xf4, 0x91, 0xea, 0x71, 0xd8, 0x1a, 0xbb, 0x24,
	0xb5, 0x18, 0xd6, 0x63, 0x9d, 0xc2, 0x2c, 0x17, 0x6e, 0x41, 0x33, 0xa1, 0x75, 0xa1, 0x9d, 0x72,
	0xf1, 0x88, 0xb8, 0xc4, 0x4b, 0x2d, 0xf1, 0x4c, 0x7a, 0xad, 0x36, 0xed, 0x8b, 0x8b, 0x28, 0xf8,
	0x28, 0xfe, 0xf5, 0x1f, 0xd2, 0x4a, 0xfa, 0x4f, 0x31, 0x00, 0x58, 0x2f, 0xf8, 0x5a, 0xf8, 0x3f,
	0x4b, 0x33, 0x0f, 0x92, 0x83, 0x21, 0x19, 0xb1, 0x64, 0xc7, 0xae, 0x2f, 0x4e, 0x41, 0x57, 0xf6,
	0x90, 0xf8, 0xab, 0x14, 0x81, 0xc1, 0xf4, 0x99, 0xba, 0xbd, 0x69, 0xbf, 0x9e, 0xba, 0xc5, 0xd9,
	0xd8, 0xab, 0xd1, 0x35, 0x4a, 0xdd, 0xde, 0x04, 0x0b, 0xfd, 0x7f, 0x94, 0xa3, 0x5f, 0xa1, 0x47,
	0x7c, 0xc3, 0x40, 0xe4, 0xd7, 0x63, 0xe2, 0x7a, 0x55, 0xf7, 0x95, 0xba, 0x0d, 0x6e, 0x8d, 0xf8,
	0xaf, 0x94, 0xb2, 0x35, 0xb3, 0x9d, 0x14, 0x97, 0x13, 0x5d, 0xe0, 0x68, 0x42, 0xa7, 0xbf, 0x56,
	0xc0, 0x02, 0x77, 0x76, 0x87, 0x83, 0xbe, 0x4b, 0xd4, 0x23, 0x00, 0x5a, 0xc3, 0xee, 0x24, 0x71,
	0x85, 0xa5, 0x00, 0x77, 0xf8, 0xbe, 0x65, 0x0c, 0xbb, 0x3c, 0x51, 0x73, 0xed, 0xfd, 0xdb, 0xfb,
	0x2b, 0x7e, 0xcd, 0x02, 0x73, 0x34, 0xdf, 0x9a, 0x58, 0xa8, 0xdb, 0x60, 0xce, 0x8f, 0xc1, 0x0b,
	0x0f, 0x85, 0x0c, 0xb8, 0xb1, 0xcf, 0xa7, 0x0d, 0xb0, 0x2c, 0x66, 0x40, 0xf3, 0xdf, 0x01, 0x89,
	0x91, 0xff, 0xd3, 0x9f, 0x80, 0x1a, 0xb8, 0x4f, 0x0c, 0xd1, 0xd4, 0x26, 0xfd, 0x02, 0xac, 0x50,
	0xa6, 0x48, 0x2e, 0x88, 0x47, 0xfc, 0x3a, 0x44, 0x15, 0xa0, 0x7c, 0x1f, 0x05, 0xa4, 0xcb, 0x60,
	0x35, 0x12, 0x9b, 0xe6, 0xa8, 0x85, 0x6b, 0x7c, 0x27, 0x48, 0x51, 0x32, 0x0e, 0x8a, 0xfd, 0x15,
	0x50, 0x45, 0xf6, 0x66, 0x2b, 0x9e, 0xae, 0x82, 0xb5, 0x68, 0x74, 0x9a, 0x69, 0x2e, 0x52, 0xcd,
	0x54, 0x34, 0xd5, 0x48, 0x4d, 0x8f, 0x41, 0xa2, 0xea, 0x2f, 0x47, 0xba, 0xe8, 0xd8, 0x2e, 0xc3,
	0x93, 0xf3, 0x7b, 0x31, 0x61, 0xd9, 0xd2, 0x66, 0xbc, 0xba, 0x0a, 0x66, 0xdb, 0x83, 0x71, 0xdf,
	0x63, 0x3d, 0x8f, 0x23, 0xfe, 0x23, 0x7d, 0x00, 0xe6, 0x27, 0x6d, 0x77, 0xd5, 0x87, 0x60, 0x7e,
	0xba, 0xf8, 0x65, 0x71, 0x4e, 0xe2, 0xa1, 0xc4, 0x64, 0x1b, 0x48, 0x3f, 0xe3, 0xca, 0x2e, 0x11,
	0xef, 0x86, 0x9b, 0x5a, 0xe0, 0x82, 0x09, 0x02, 0x73, 0xd5, 0x85, 0x3a, 0x2a, 0x2c, 0xd8, 0xc0,
	0x32, 0x68, 0xe7, 0xdf, 0x14, 0xae, 0x5c, 0xc6, 0xdd, 0xf0, 0xf2, 0x49, 0x83, 0xb8, 0x3b, 0x24,
	0x6d, 0x7f, 0xf1, 0x84, 0x97, 0x2f, 0xe3, 0x84, 0x25, 0x36, 0xf3, 0xed, 0x4b, 0x4c, 0xfd, 0x84,
	0x1f, 0x16, 0x26, 0x1b, 0xd1, 0xb2, 0x6c, 0xe8, 0xf2, 0x83, 0x82, 0x9b, 0x2e, 0x71, 0x7d, 0x0a,
	0xf3, 0xe1, 0x42, 0x0f, 0xcb, 0x67, 0x2d, 0x54, 0x97, 0x88, 0x76, 0x7e, 0xc9, 0x03, 0x95, 0xfb,
	0x2f, 0x07, 0x37, 0xdf, 0xbb, 0x13, 0xae, 0x73, 0x39, 0x38, 0x4d, 0x54, 0x0f, 0xf7, 0x4f, 0x90,
	0xb9, 0x6c, 0x1d, 0xf4, 0xf0, 0xad, 0xbf, 0xff, 0x51, 0x9e, 0x1d, 0x7d, 0x6e, 0x26, 0x49, 0x2a,
	0xf3, 0xef, 0x38, 0xd2, 0x08, 0x87, 0x97, 0x7b, 0xe2, 0xbb, 0x3f, 0xce, 0xde, 0xa9, 0xc1, 0x5b,
	0xfe, 0x0b, 0xb0, 0x74, 0x3a, 0x22, 0xad, 0xf3, 0xc1, 0xd8, 0xc3, 0xbd, 0x41, 0x87, 0xb8, 0xa9,
	0xd9, 0xad, 0x99, 0xed, 0x25, 0x7d, 0x3d, 0x08, 0x67, 0xfa, 0x7c, 0x75, 0xd0, 0x21, 0x68, 0xf1,
	0x54, 0xf8, 0xe5, 0xa6, 0x7f, 0xa3, 0x80, 0xdb, 0x52, 0x01, 0x6e, 0x58, 0xa8, 0x0f, 0x24, 0xa1,
	0xaa, 0x72, 0xc5, 0x03, 0xb1, 0xa6, 0x6d, 0xb0, 0x7e, 0x45, 0x1a, 0xb4, 0x6d, 0xf9, 0x88, 0xbe,
	0xee, 0x5e, 0xd1, 0xb7, 0x88, 0xc6, 0xfe, 0xa1, 0xf0, 0x6d, 0xc5, 0x7a, 0x4d, 0xfa, 0x37, 0xa5,
	0xad, 0xf0, 0xeb, 0x3e, 0xf6, 0x5f, 0xbe, 0xee, 0xf7, 0xc1, 0x42, 0x70, 0xfa, 0xbc, 0xea, 0x98,
	0x20, 0x1c, 0x3f, 0x93, 0xd3, 0xe3, 0xe7, 0xd8, 0x65, 0xe7, 0x28, 0xf7, 0x15, 0xeb, 0xf9, 0x3c,
	0xa2, 0x8f, 0x99, 0xdf, 0x2a, 0x00, 0x86, 0x7b, 0xaa, 0xde, 0x03, 0x77, 0xea, 0x36, 0x72, 0xb0,
	0x89, 0x2c, 0xe3, 0xc4, 0x6e, 0x3a, 0xb8, 0x6a, 0x17, 0x2d, 0x5c, 0xb3, 0x6b, 0x16, 0xfc, 0x40,
	0xfd, 0x10, 0xa4, 0xae, 0x20, 0x73, 0x6f, 0xf4, 0x7c, 0x09, 0x2a, 0xd7, 0xb2, 0x5a, 0xb6, 0x04,
	0x63, 0xd7, 0xb0, 0xfa, 0x9b, 0x7c, 0xb6, 0x04, 0x67, 0x32, 0x5d, 0xbe, 0xfd, 0x06, 0x93, 0x56,
	0xef, 0x82, 0x35, 0x66, 0x6f, 0xd7, 0x2d, 0x84, 0x1b, 0x8e, 0xe1, 0x34, 0x1b, 0x93, 0x34, 0xee,
	0x80, 0xdb, 0x11, 0xaa, 0x59, 0x87, 0xca, 0x95, 0x3e, 0x45, 0xfb, 0x59, 0x0d, 0xc6, 0x36, 0x12,
	0x7f, 0xfe, 0x66, 0xf3, 0x83, 0xbf, 0x7c, 0xb3, 0xa9, 0x64, 0x30, 0x1f, 0x2a, 0xa8, 0xd3, 0xd4,
	0xcd, 0x28, 0x56, 0xcb, 0x35, 0xe6, 0x37, 0x9d, 0xf1, 0x55, 0x14, 0x8b, 0xa8, 0x4c, 0xb3, 0x10,
	0xa9, 0x66, 0x1d, 0xc6, 0x32, 0x16, 0xff, 0xbc, 0x61, 0xeb, 0x4d, 0x05, 0x4b, 0xcc, 0xc8, 0xf9,
	0x45, 0x7d, 0x1a, 0x73, 0x05, 0x2c, 0x06, 0x98, 0xe5, 0x1c, 0x43, 0x45, 0x36, 0xab, 0x96, 0xaa,
	0x0e, 0x8c, 0x65, 0xfe, 0xe8, 0xab, 0x8e, 0x7f, 0x0e, 0xdc, 0x06, 0xcb, 0xcc, 0xa2, 0x51, 0xb7,
	0xac, 0x62, 0x38, 0x12, 0x07, 0xb5, 0x92, 0x10, 0xc9, 0x87, 0x58, 0xe9, 0x65, 0x8c, 0x36, 0x6b,
	0x26, 0x84, 0xe5, 0xb2, 0x25, 0x18, 0x0f, 0x61, 0xb4, 0x31, 0xb3, 0xa1, 0x71, 0xb5, 0x6c, 0xb6,
	0x04, 0xe7, 0x32, 0x4f, 0x40, 0x52, 0x38, 0xf8, 0xab, 0xeb, 0x40, 0x65, 0x36, 0x47, 0x56, 0x41,
	0x9a, 0xe8, 0x2a, 0x80, 0x32, 0x7e, 0x54, 0x80, 0x4a, 0x14, 0x45, 0x0d, 0x18, 0xcb, 0xfc, 0x4e,
	0x01, 0x8b, 0xd2, 0x27, 0x25, 0x8d, 0xfa, 0xbc, 0xf0, 0x14, 0xf9, 0x95, 0x45, 0x56, 0xd5, 0x7e,
	0x6a, 0x15, 0x79, 0xf7, 0x05, 0xbc, 0x5c, 0x6b, 0x58, 0xc8, 0xb1, 0x8a, 0x50, 0x09, 0x39, 0xd4,
	0xad, 0x5a, 0xb1, 0x5c, 0xa3, 0xd3, 0xbf, 0x0b, 0xd6, 0x04, 0xbc, 0x51, 0x47, 0x76, 0x15, 0x23,
	0xcb, 0x28, 0xc2, 0x19, 0xf5, 0x23, 0x70, 0xf7, 0x4a, 0x0a, 0x5b, 0x08, 0xc1, 0x78, 0xe6, 0x39,
	0x9f, 0xa7, 0xff, 0xf5, 0x4a, 0x33, 0x67, 0xd6, 0xf5, 0x72, 0x11, 0x37, 0x6b, 0x27, 0x35, 0xaa,
	0x83, 0x20, 0x1f, 0x8a, 0x36, 0x8e, 0xea, 0xb4, 0xe6, 0xb8, 0x80, 0xa0, 0xa2, 0x6e, 0x80, 0xf5,
	0x29, 0xf1, 0x84, 0x33, 0x8c, 0xca, 0xc1, 0x58, 0xe6, 0x2b, 0x3e, 0xdb, 0xe9, 0x07, 0x8b, 0x9a,
	0x02, 0xab, 0xac, 0x2a, 0x75, 0xa3, 0xd9, 0xb0, 0xa4, 0x2a, 0x5e, 0xc1, 0x54, 0xca, 0xb5, 0x13,
	0x41, 0x81, 0x02, 0x53, 0x3f, 0x2a, 0xc0, 0x58, 0xe6, 0xdf, 0x10, 0x2c, 0x88, 0x67, 0x26, 0x15,
	0x82, 0x85, 0x23, 0x64, 0x54, 0xad, 0x06, 0x46, 0xcf, 0xb1, 0x7d, 0xc2, 0xa5, 0x13, 0x20, 0x46,
	0xa5, 0x02, 0x15, 0x75, 0x0d, 0xac, 0x04, 0x90, 0x69, 0x14, 0xf1, 0x51, 0xa1, 0x01, 0x63, 0x51,
	0x98, 0x5a, 0xcf, 0xd0, 0x90, 0x76, 0xc1, 0xb1, 0x9c, 0x49, 0xc8, 0x38, 0x0d, 0x19, 0x20, 0xd4,
	0x68, 0x56, 0xf6, 0x6d, 0xd6, 0xca, 0x05, 0xa3, 0xe1, 0xc0, 0x39, 0x9a, 0x78, 0x00, 0x57, 0x9b,
	0x15, 0x87, 0x13, 0xb7, 0x64, 0xc2, 0x44, 0xb6, 0x51, 0x64, 0x44, 0x82, 0xca, 0x30, 0x20, 0xd8,
	0x7c, 0xe1, 0x3c, 0xad, 0x8c, 0x9c, 0x59, 0xc5, 0xaa, 0x95, 0x9c, 0x63, 0x08, 0x64, 0xa6, 0x59,
	0x2b, 0x5a, 0xa8, 0x51, 0x7e, 0x61, 0x15, 0x61, 0x52, 0x1e, 0xc1, 0x7e, 0x3a, 0x21, 0x16, 0x64,
	0xe2, 0x08, 0x19, 0xa5, 0xaa, 0x55, 0x73, 0x1a, 0x70, 0x91, 0x76, 0x3d, 0x20, 0x1e, 0x1b, 0xa6,
	0x69, 0x21, 0xb8, 0x44, 0xc5, 0x26, 0x24, 0x84, 0xca, 0x3c, 0xa7, 0x65, 0x2a, 0xb6, 0x00, 0x6f,
	0x38, 0x76, 0xb5, 0x6e, 0x15, 0x71, 0x01, 0x15, 0x20, 0x94, 0x5d, 0x1c, 0xdb, 0xc6, 0x15, 0xbb,
	0x56, 0x82, 0x2b, 0xf2, 0xc8, 0x4f, 0x2b, 0x46, 0x0d, 0x97, 0x6c, 0xbb, 0x08, 0x55, 0xb9, 0x7a,
	0x45, 0x64, 0xd7, 0xeb, 0x56, 0x11, 0xde, 0xa6, 0x5b, 0x74, 0x00, 0x57, 0xac, 0x46, 0x03, 0x3b,
	0xc7, 0x46, 0x0d, 0xef, 0xe5, 0x4c, 0xb8, 0x2a, 0xf7, 0x95, 0x42, 0x6b, 0xf2, 0xb8, 0x7b, 0x79,
	0x13, 0x6b, 0xfa, 0xbe, 0x09, 0xd7, 0xe5, 0x71, 0x35, 0xfd, 0xc0, 0xc4, 0x7a, 0x3e, 0x6f, 0xc2,
	0x3b, 0x32, 0xa1, 0xe7, 0xf7, 0x4c, 0x9c, 0xd7, 0x34, 0x13, 0xa6, 0xe4, 0xb2, 0xe6, 0x35, 0xdd,
	0xc4, 0x5a, 0x56, 0xdf, 0x35, 0xe1, 0x5d, 0x79, 0xda, 0x5a, 0x56, 0xcf, 0x99, 0x58, 0xcb, 0x6b,
	0x07, 0x26, 0xdc, 0x08, 0x51, 0x79, 0xed, 0xd0, 0xc4, 0x7a, 0x36, 0xb7, 0x6f, 0xc2, 0x7b, 0x32,
	0xa5, 0x67, 0x73, 0x07, 0x26, 0xce, 0x65, 0x0f, 0xf3, 0x26, 0xfc, 0x50, 0xa6, 0x72, 0xd9, 0xc3,
	0x3d, 0x13, 0x1f, 0x68, 0x87, 0x9a, 0x09, 0x3f, 0x92, 0xa9, 0x03, 0xed, 0x50, 0x37, 0xf1, 0xa1,
	0xae, 0xe5, 0x4d, 0xb8, 0x29, 0xcb, 0xc4, 0x76, 0x8e, 0x2d, 0x04, 0xef, 0x0b, 0xe2, 0x77, 0x98,
	0x52, 0xb7, 0x84, 0x22, 0x39, 0x5c, 0xa9, 0x3f, 0x90, 0x21, 0xd3, 0x28, 0xc2, 0xb4, 0xa0, 0x70,
	0xee, 0xf7, 0x31, 0x0d, 0x1f, 0x20, 0x8e, 0xed, 0x18, 0x15, 0xf8, 0x43, 0xa1, 0x4b, 0x4e, 0xa0,
	0xf1, 0x4f, 0x84, 0x22, 0x3a, 0xa2, 0xc6, 0x1f, 0xc8, 0x44, 0xa0, 0xf1, 0x1f, 0x09, 0xc9, 0x3b,
	0x13, 0x8d, 0x6f, 0x0b, 0xcd, 0x73, 0x04, 0x9d, 0x7d, 0x4a, 0xf7, 0xea, 0x00, 0xa7, 0xa2, 0x81,
	0x19, 0x41, 0x18, 0x4e, 0x58, 0x18, 0x0f, 0xe5, 0x09, 0x52, 0xe8, 0x33, 0x39, 0xf6, 0x54, 0x18,
	0x3f, 0x96, 0x33, 0x0c, 0x84, 0xb1, 0x23, 0x13, 0x81, 0x30, 0x7e, 0x22, 0x08, 0xc3, 0x91, 0x84,
	0x91, 0x15, 0x9a, 0xe5, 0xc8, 0xc2, 0xd0, 0x42, 0x94, 0x20, 0x0c, 0x5d, 0xa6, 0x44, 0x61, 0xec,
	0xca, 0x94, 0x28, 0x8c, 0x9c, 0x4c, 0x89, 0xc2, 0xc8, 0xcb, 0xb5, 0xe5, 0xc2, 0xd8, 0x0b, 0x15,
	0x1c, 0x95, 0x71, 0x16, 0xee, 0x47, 0x41, 0x0d, 0x1e, 0x44, 0x41, 0x1d, 0x1e, 0x46, 0xc1, 0x5d,
	0xf8, 0x28, 0x0a, 0xe6, 0xe0, 0xe7, 0x51, 0x30, 0x0f, 0x7f, 0x1a, 0x05, 0xf7, 0xe0, 0x17, 0x51,
	0x70, 0x1f, 0x7e, 0x19, 0xda, 0xfc, 0x58, 0x9e, 0x3f, 0x8b, 0x82, 0x1a, 0xfc, 0x79, 0x14, 0xd4,
	0xa1, 0x11, 0x05, 0x77, 0xa1, 0x19, 0x05, 0x73, 0xb0, 0x10, 0x05, 0xf3, 0xb0, 0x18, 0x05, 0xf7,
	0xa0, 0x15, 0x05, 0xf7, 0xe1, 0x11, 0xd5, 0x9f, 0x20, 0x52, 0x9c, 0xc5, 0x5a, 0xb3, 0x81, 0x0b,
	0x76, 0xb3, 0xe6, 0xc0, 0x52, 0x98, 0xd4, 0x04, 0xf2, 0x38, 0x4c, 0xea, 0x02, 0x59, 0x0e, 0x93,
	0xbb, 0x02, 0xf9, 0x38, 0x4c, 0xe6, 0x04, 0xf2, 0x24, 0x4c, 0xe6, 0x05, 0xb2, 0x12, 0x26, 0xf7,
	0x04, 0xb2, 0x1a, 0x26, 0xf7, 0x05, 0xb2, 0x46, 0x49, 0x74, 0xcd, 0x3c, 0xed, 0x30, 0x29, 0xce,
	0xb3, 0x1e, 0x26, 0xc5, 0x79, 0x3e, 0x09, 0x93, 0xe2, 0x3c, 0x51, 0x98, 0x14, 0xe7, 0xd9, 0x08,
	0x93, 0xe2, 0x3c, 0x9d, 0x30, 0x29, 0xce, 0xb3, 0x19, 0x26, 0xc5, 0x79, 0x3e, 0xa5, 0xfb, 0xc3,
	0xe4, 0x6d, 0x2b, 0xe0, 0xcf, 0xe4, 0x6d, 0xc0, 0x41, 0xcd, 0x5a, 0xc1, 0xa0, 0x27, 0xb0, 0xe7,
	0xfa, 0x3f, 0x63, 0x20, 0x4e, 0x8f, 0x35, 0xea, 0xe7, 0xfc, 0x22, 0xb5, 0x30, 0x22, 0xf4, 0x24,
	0xb7, 0x2a, 0xde, 0xa8, 0x4d, 0xbe, 0xa1, 0x37, 0xd6, 0xa2, 0xf7, 0x6c, 0x55, 0xf7, 0x55, 0xfa,
	0x83, 0x89, 0x73, 0x73, 0xd8, 0xf9, 0x1e, 0xce, 0x25, 0xee, 0xcc, 0xef, 0x9a, 0xd4, 0x8d, 0x6b,
	0x2e, 0xca, 0x68, 0x88, 0x7b, 0xd7, 0xdd, 0x4c, 0xf1, 0x40, 0x5f, 0x82, 0x5b, 0xfe, 0xad, 0x83,
	0x7a, 0xe7, 0xaa, 0xcb, 0x19, 0x1a, 0x22, 0x75, 0xe5, 0xed, 0x04, 0xf7, 0x7f, 0xcc, 0xcf, 0x8e,
	0xfe, 0x57, 0xa5, 0x7a, 0xef, 0xba, 0x0b, 0x02, 0x1a, 0xe7, 0xc3, 0x6b, 0xbf, 0x42, 0x59, 0x2c,
	0x73, 0xfd, 0xaf, 0xef, 0x36, 0x95, 0xbf, 0xbf, 0xdb, 0x54, 0xfe, 0xf5, 0x6e, 0x53, 0x79, 0x91,
	0x38, 0x6b, 0x5d, 0xb0, 0xff, 0xdf, 0x9c, 0xce, 0xb1, 0x3f, 0xbb, 0xff, 0x09, 0x00, 0x00, 0xff,
	0xff, 0xe7, 0x76, 0xc6, 0x59, 0xff, 0x19, 0x00, 0x00,
}
