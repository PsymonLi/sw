// Code generated by MockGen. DO NOT EDIT.
// Source: telemetry.pb.go

// Package halproto is a generated GoMock package.
package halproto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockisMirrorSessionSpec_Destination is a mock of isMirrorSessionSpec_Destination interface
type MockisMirrorSessionSpec_Destination struct {
	ctrl     *gomock.Controller
	recorder *MockisMirrorSessionSpec_DestinationMockRecorder
}

// MockisMirrorSessionSpec_DestinationMockRecorder is the mock recorder for MockisMirrorSessionSpec_Destination
type MockisMirrorSessionSpec_DestinationMockRecorder struct {
	mock *MockisMirrorSessionSpec_Destination
}

// NewMockisMirrorSessionSpec_Destination creates a new mock instance
func NewMockisMirrorSessionSpec_Destination(ctrl *gomock.Controller) *MockisMirrorSessionSpec_Destination {
	mock := &MockisMirrorSessionSpec_Destination{ctrl: ctrl}
	mock.recorder = &MockisMirrorSessionSpec_DestinationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisMirrorSessionSpec_Destination) EXPECT() *MockisMirrorSessionSpec_DestinationMockRecorder {
	return m.recorder
}

// isMirrorSessionSpec_Destination mocks base method
func (m *MockisMirrorSessionSpec_Destination) isMirrorSessionSpec_Destination() {
	m.ctrl.Call(m, "isMirrorSessionSpec_Destination")
}

// isMirrorSessionSpec_Destination indicates an expected call of isMirrorSessionSpec_Destination
func (mr *MockisMirrorSessionSpec_DestinationMockRecorder) isMirrorSessionSpec_Destination() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isMirrorSessionSpec_Destination", reflect.TypeOf((*MockisMirrorSessionSpec_Destination)(nil).isMirrorSessionSpec_Destination))
}

// MarshalTo mocks base method
func (m *MockisMirrorSessionSpec_Destination) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisMirrorSessionSpec_DestinationMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisMirrorSessionSpec_Destination)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisMirrorSessionSpec_Destination) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisMirrorSessionSpec_DestinationMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisMirrorSessionSpec_Destination)(nil).Size))
}

// MockTelemetryClient is a mock of TelemetryClient interface
type MockTelemetryClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryClientMockRecorder
}

// MockTelemetryClientMockRecorder is the mock recorder for MockTelemetryClient
type MockTelemetryClientMockRecorder struct {
	mock *MockTelemetryClient
}

// NewMockTelemetryClient creates a new mock instance
func NewMockTelemetryClient(ctrl *gomock.Controller) *MockTelemetryClient {
	mock := &MockTelemetryClient{ctrl: ctrl}
	mock.recorder = &MockTelemetryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTelemetryClient) EXPECT() *MockTelemetryClientMockRecorder {
	return m.recorder
}

// CollectorCreate mocks base method
func (m *MockTelemetryClient) CollectorCreate(ctx context.Context, in *CollectorRequestMsg, opts ...grpc.CallOption) (*CollectorResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectorCreate", varargs...)
	ret0, _ := ret[0].(*CollectorResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectorCreate indicates an expected call of CollectorCreate
func (mr *MockTelemetryClientMockRecorder) CollectorCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectorCreate", reflect.TypeOf((*MockTelemetryClient)(nil).CollectorCreate), varargs...)
}

// CollectorUpdate mocks base method
func (m *MockTelemetryClient) CollectorUpdate(ctx context.Context, in *CollectorRequestMsg, opts ...grpc.CallOption) (*CollectorResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectorUpdate", varargs...)
	ret0, _ := ret[0].(*CollectorResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectorUpdate indicates an expected call of CollectorUpdate
func (mr *MockTelemetryClientMockRecorder) CollectorUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectorUpdate", reflect.TypeOf((*MockTelemetryClient)(nil).CollectorUpdate), varargs...)
}

// CollectorDelete mocks base method
func (m *MockTelemetryClient) CollectorDelete(ctx context.Context, in *CollectorDeleteRequestMsg, opts ...grpc.CallOption) (*CollectorDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectorDelete", varargs...)
	ret0, _ := ret[0].(*CollectorDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectorDelete indicates an expected call of CollectorDelete
func (mr *MockTelemetryClientMockRecorder) CollectorDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectorDelete", reflect.TypeOf((*MockTelemetryClient)(nil).CollectorDelete), varargs...)
}

// CollectorGet mocks base method
func (m *MockTelemetryClient) CollectorGet(ctx context.Context, in *CollectorGetRequestMsg, opts ...grpc.CallOption) (*CollectorGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectorGet", varargs...)
	ret0, _ := ret[0].(*CollectorGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectorGet indicates an expected call of CollectorGet
func (mr *MockTelemetryClientMockRecorder) CollectorGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectorGet", reflect.TypeOf((*MockTelemetryClient)(nil).CollectorGet), varargs...)
}

// FlowMonitorRuleCreate mocks base method
func (m *MockTelemetryClient) FlowMonitorRuleCreate(ctx context.Context, in *FlowMonitorRuleRequestMsg, opts ...grpc.CallOption) (*FlowMonitorRuleResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlowMonitorRuleCreate", varargs...)
	ret0, _ := ret[0].(*FlowMonitorRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowMonitorRuleCreate indicates an expected call of FlowMonitorRuleCreate
func (mr *MockTelemetryClientMockRecorder) FlowMonitorRuleCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowMonitorRuleCreate", reflect.TypeOf((*MockTelemetryClient)(nil).FlowMonitorRuleCreate), varargs...)
}

// FlowMonitorRuleUpdate mocks base method
func (m *MockTelemetryClient) FlowMonitorRuleUpdate(ctx context.Context, in *FlowMonitorRuleRequestMsg, opts ...grpc.CallOption) (*FlowMonitorRuleResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlowMonitorRuleUpdate", varargs...)
	ret0, _ := ret[0].(*FlowMonitorRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowMonitorRuleUpdate indicates an expected call of FlowMonitorRuleUpdate
func (mr *MockTelemetryClientMockRecorder) FlowMonitorRuleUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowMonitorRuleUpdate", reflect.TypeOf((*MockTelemetryClient)(nil).FlowMonitorRuleUpdate), varargs...)
}

// FlowMonitorRuleDelete mocks base method
func (m *MockTelemetryClient) FlowMonitorRuleDelete(ctx context.Context, in *FlowMonitorRuleDeleteRequestMsg, opts ...grpc.CallOption) (*FlowMonitorRuleDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlowMonitorRuleDelete", varargs...)
	ret0, _ := ret[0].(*FlowMonitorRuleDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowMonitorRuleDelete indicates an expected call of FlowMonitorRuleDelete
func (mr *MockTelemetryClientMockRecorder) FlowMonitorRuleDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowMonitorRuleDelete", reflect.TypeOf((*MockTelemetryClient)(nil).FlowMonitorRuleDelete), varargs...)
}

// FlowMonitorRuleGet mocks base method
func (m *MockTelemetryClient) FlowMonitorRuleGet(ctx context.Context, in *FlowMonitorRuleGetRequestMsg, opts ...grpc.CallOption) (*FlowMonitorRuleGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FlowMonitorRuleGet", varargs...)
	ret0, _ := ret[0].(*FlowMonitorRuleGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowMonitorRuleGet indicates an expected call of FlowMonitorRuleGet
func (mr *MockTelemetryClientMockRecorder) FlowMonitorRuleGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowMonitorRuleGet", reflect.TypeOf((*MockTelemetryClient)(nil).FlowMonitorRuleGet), varargs...)
}

// DropMonitorRuleCreate mocks base method
func (m *MockTelemetryClient) DropMonitorRuleCreate(ctx context.Context, in *DropMonitorRuleRequestMsg, opts ...grpc.CallOption) (*DropMonitorRuleResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropMonitorRuleCreate", varargs...)
	ret0, _ := ret[0].(*DropMonitorRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMonitorRuleCreate indicates an expected call of DropMonitorRuleCreate
func (mr *MockTelemetryClientMockRecorder) DropMonitorRuleCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMonitorRuleCreate", reflect.TypeOf((*MockTelemetryClient)(nil).DropMonitorRuleCreate), varargs...)
}

// DropMonitorRuleUpdate mocks base method
func (m *MockTelemetryClient) DropMonitorRuleUpdate(ctx context.Context, in *DropMonitorRuleRequestMsg, opts ...grpc.CallOption) (*DropMonitorRuleResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropMonitorRuleUpdate", varargs...)
	ret0, _ := ret[0].(*DropMonitorRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMonitorRuleUpdate indicates an expected call of DropMonitorRuleUpdate
func (mr *MockTelemetryClientMockRecorder) DropMonitorRuleUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMonitorRuleUpdate", reflect.TypeOf((*MockTelemetryClient)(nil).DropMonitorRuleUpdate), varargs...)
}

// DropMonitorRuleDelete mocks base method
func (m *MockTelemetryClient) DropMonitorRuleDelete(ctx context.Context, in *DropMonitorRuleDeleteRequestMsg, opts ...grpc.CallOption) (*DropMonitorRuleDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropMonitorRuleDelete", varargs...)
	ret0, _ := ret[0].(*DropMonitorRuleDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMonitorRuleDelete indicates an expected call of DropMonitorRuleDelete
func (mr *MockTelemetryClientMockRecorder) DropMonitorRuleDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMonitorRuleDelete", reflect.TypeOf((*MockTelemetryClient)(nil).DropMonitorRuleDelete), varargs...)
}

// DropMonitorRuleGet mocks base method
func (m *MockTelemetryClient) DropMonitorRuleGet(ctx context.Context, in *DropMonitorRuleGetRequestMsg, opts ...grpc.CallOption) (*DropMonitorRuleGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropMonitorRuleGet", varargs...)
	ret0, _ := ret[0].(*DropMonitorRuleGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMonitorRuleGet indicates an expected call of DropMonitorRuleGet
func (mr *MockTelemetryClientMockRecorder) DropMonitorRuleGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMonitorRuleGet", reflect.TypeOf((*MockTelemetryClient)(nil).DropMonitorRuleGet), varargs...)
}

// MirrorSessionCreate mocks base method
func (m *MockTelemetryClient) MirrorSessionCreate(ctx context.Context, in *MirrorSessionRequestMsg, opts ...grpc.CallOption) (*MirrorSessionResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MirrorSessionCreate", varargs...)
	ret0, _ := ret[0].(*MirrorSessionResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MirrorSessionCreate indicates an expected call of MirrorSessionCreate
func (mr *MockTelemetryClientMockRecorder) MirrorSessionCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorSessionCreate", reflect.TypeOf((*MockTelemetryClient)(nil).MirrorSessionCreate), varargs...)
}

// MirrorSessionUpdate mocks base method
func (m *MockTelemetryClient) MirrorSessionUpdate(ctx context.Context, in *MirrorSessionRequestMsg, opts ...grpc.CallOption) (*MirrorSessionResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MirrorSessionUpdate", varargs...)
	ret0, _ := ret[0].(*MirrorSessionResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MirrorSessionUpdate indicates an expected call of MirrorSessionUpdate
func (mr *MockTelemetryClientMockRecorder) MirrorSessionUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorSessionUpdate", reflect.TypeOf((*MockTelemetryClient)(nil).MirrorSessionUpdate), varargs...)
}

// MirrorSessionDelete mocks base method
func (m *MockTelemetryClient) MirrorSessionDelete(ctx context.Context, in *MirrorSessionDeleteRequestMsg, opts ...grpc.CallOption) (*MirrorSessionDeleteResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MirrorSessionDelete", varargs...)
	ret0, _ := ret[0].(*MirrorSessionDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MirrorSessionDelete indicates an expected call of MirrorSessionDelete
func (mr *MockTelemetryClientMockRecorder) MirrorSessionDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorSessionDelete", reflect.TypeOf((*MockTelemetryClient)(nil).MirrorSessionDelete), varargs...)
}

// MirrorSessionGet mocks base method
func (m *MockTelemetryClient) MirrorSessionGet(ctx context.Context, in *MirrorSessionGetRequestMsg, opts ...grpc.CallOption) (*MirrorSessionGetResponseMsg, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MirrorSessionGet", varargs...)
	ret0, _ := ret[0].(*MirrorSessionGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MirrorSessionGet indicates an expected call of MirrorSessionGet
func (mr *MockTelemetryClientMockRecorder) MirrorSessionGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorSessionGet", reflect.TypeOf((*MockTelemetryClient)(nil).MirrorSessionGet), varargs...)
}

// MockTelemetryServer is a mock of TelemetryServer interface
type MockTelemetryServer struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryServerMockRecorder
}

// MockTelemetryServerMockRecorder is the mock recorder for MockTelemetryServer
type MockTelemetryServerMockRecorder struct {
	mock *MockTelemetryServer
}

// NewMockTelemetryServer creates a new mock instance
func NewMockTelemetryServer(ctrl *gomock.Controller) *MockTelemetryServer {
	mock := &MockTelemetryServer{ctrl: ctrl}
	mock.recorder = &MockTelemetryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTelemetryServer) EXPECT() *MockTelemetryServerMockRecorder {
	return m.recorder
}

// CollectorCreate mocks base method
func (m *MockTelemetryServer) CollectorCreate(arg0 context.Context, arg1 *CollectorRequestMsg) (*CollectorResponseMsg, error) {
	ret := m.ctrl.Call(m, "CollectorCreate", arg0, arg1)
	ret0, _ := ret[0].(*CollectorResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectorCreate indicates an expected call of CollectorCreate
func (mr *MockTelemetryServerMockRecorder) CollectorCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectorCreate", reflect.TypeOf((*MockTelemetryServer)(nil).CollectorCreate), arg0, arg1)
}

// CollectorUpdate mocks base method
func (m *MockTelemetryServer) CollectorUpdate(arg0 context.Context, arg1 *CollectorRequestMsg) (*CollectorResponseMsg, error) {
	ret := m.ctrl.Call(m, "CollectorUpdate", arg0, arg1)
	ret0, _ := ret[0].(*CollectorResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectorUpdate indicates an expected call of CollectorUpdate
func (mr *MockTelemetryServerMockRecorder) CollectorUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectorUpdate", reflect.TypeOf((*MockTelemetryServer)(nil).CollectorUpdate), arg0, arg1)
}

// CollectorDelete mocks base method
func (m *MockTelemetryServer) CollectorDelete(arg0 context.Context, arg1 *CollectorDeleteRequestMsg) (*CollectorDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "CollectorDelete", arg0, arg1)
	ret0, _ := ret[0].(*CollectorDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectorDelete indicates an expected call of CollectorDelete
func (mr *MockTelemetryServerMockRecorder) CollectorDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectorDelete", reflect.TypeOf((*MockTelemetryServer)(nil).CollectorDelete), arg0, arg1)
}

// CollectorGet mocks base method
func (m *MockTelemetryServer) CollectorGet(arg0 context.Context, arg1 *CollectorGetRequestMsg) (*CollectorGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "CollectorGet", arg0, arg1)
	ret0, _ := ret[0].(*CollectorGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectorGet indicates an expected call of CollectorGet
func (mr *MockTelemetryServerMockRecorder) CollectorGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectorGet", reflect.TypeOf((*MockTelemetryServer)(nil).CollectorGet), arg0, arg1)
}

// FlowMonitorRuleCreate mocks base method
func (m *MockTelemetryServer) FlowMonitorRuleCreate(arg0 context.Context, arg1 *FlowMonitorRuleRequestMsg) (*FlowMonitorRuleResponseMsg, error) {
	ret := m.ctrl.Call(m, "FlowMonitorRuleCreate", arg0, arg1)
	ret0, _ := ret[0].(*FlowMonitorRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowMonitorRuleCreate indicates an expected call of FlowMonitorRuleCreate
func (mr *MockTelemetryServerMockRecorder) FlowMonitorRuleCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowMonitorRuleCreate", reflect.TypeOf((*MockTelemetryServer)(nil).FlowMonitorRuleCreate), arg0, arg1)
}

// FlowMonitorRuleUpdate mocks base method
func (m *MockTelemetryServer) FlowMonitorRuleUpdate(arg0 context.Context, arg1 *FlowMonitorRuleRequestMsg) (*FlowMonitorRuleResponseMsg, error) {
	ret := m.ctrl.Call(m, "FlowMonitorRuleUpdate", arg0, arg1)
	ret0, _ := ret[0].(*FlowMonitorRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowMonitorRuleUpdate indicates an expected call of FlowMonitorRuleUpdate
func (mr *MockTelemetryServerMockRecorder) FlowMonitorRuleUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowMonitorRuleUpdate", reflect.TypeOf((*MockTelemetryServer)(nil).FlowMonitorRuleUpdate), arg0, arg1)
}

// FlowMonitorRuleDelete mocks base method
func (m *MockTelemetryServer) FlowMonitorRuleDelete(arg0 context.Context, arg1 *FlowMonitorRuleDeleteRequestMsg) (*FlowMonitorRuleDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "FlowMonitorRuleDelete", arg0, arg1)
	ret0, _ := ret[0].(*FlowMonitorRuleDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowMonitorRuleDelete indicates an expected call of FlowMonitorRuleDelete
func (mr *MockTelemetryServerMockRecorder) FlowMonitorRuleDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowMonitorRuleDelete", reflect.TypeOf((*MockTelemetryServer)(nil).FlowMonitorRuleDelete), arg0, arg1)
}

// FlowMonitorRuleGet mocks base method
func (m *MockTelemetryServer) FlowMonitorRuleGet(arg0 context.Context, arg1 *FlowMonitorRuleGetRequestMsg) (*FlowMonitorRuleGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "FlowMonitorRuleGet", arg0, arg1)
	ret0, _ := ret[0].(*FlowMonitorRuleGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlowMonitorRuleGet indicates an expected call of FlowMonitorRuleGet
func (mr *MockTelemetryServerMockRecorder) FlowMonitorRuleGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowMonitorRuleGet", reflect.TypeOf((*MockTelemetryServer)(nil).FlowMonitorRuleGet), arg0, arg1)
}

// DropMonitorRuleCreate mocks base method
func (m *MockTelemetryServer) DropMonitorRuleCreate(arg0 context.Context, arg1 *DropMonitorRuleRequestMsg) (*DropMonitorRuleResponseMsg, error) {
	ret := m.ctrl.Call(m, "DropMonitorRuleCreate", arg0, arg1)
	ret0, _ := ret[0].(*DropMonitorRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMonitorRuleCreate indicates an expected call of DropMonitorRuleCreate
func (mr *MockTelemetryServerMockRecorder) DropMonitorRuleCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMonitorRuleCreate", reflect.TypeOf((*MockTelemetryServer)(nil).DropMonitorRuleCreate), arg0, arg1)
}

// DropMonitorRuleUpdate mocks base method
func (m *MockTelemetryServer) DropMonitorRuleUpdate(arg0 context.Context, arg1 *DropMonitorRuleRequestMsg) (*DropMonitorRuleResponseMsg, error) {
	ret := m.ctrl.Call(m, "DropMonitorRuleUpdate", arg0, arg1)
	ret0, _ := ret[0].(*DropMonitorRuleResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMonitorRuleUpdate indicates an expected call of DropMonitorRuleUpdate
func (mr *MockTelemetryServerMockRecorder) DropMonitorRuleUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMonitorRuleUpdate", reflect.TypeOf((*MockTelemetryServer)(nil).DropMonitorRuleUpdate), arg0, arg1)
}

// DropMonitorRuleDelete mocks base method
func (m *MockTelemetryServer) DropMonitorRuleDelete(arg0 context.Context, arg1 *DropMonitorRuleDeleteRequestMsg) (*DropMonitorRuleDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "DropMonitorRuleDelete", arg0, arg1)
	ret0, _ := ret[0].(*DropMonitorRuleDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMonitorRuleDelete indicates an expected call of DropMonitorRuleDelete
func (mr *MockTelemetryServerMockRecorder) DropMonitorRuleDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMonitorRuleDelete", reflect.TypeOf((*MockTelemetryServer)(nil).DropMonitorRuleDelete), arg0, arg1)
}

// DropMonitorRuleGet mocks base method
func (m *MockTelemetryServer) DropMonitorRuleGet(arg0 context.Context, arg1 *DropMonitorRuleGetRequestMsg) (*DropMonitorRuleGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "DropMonitorRuleGet", arg0, arg1)
	ret0, _ := ret[0].(*DropMonitorRuleGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DropMonitorRuleGet indicates an expected call of DropMonitorRuleGet
func (mr *MockTelemetryServerMockRecorder) DropMonitorRuleGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropMonitorRuleGet", reflect.TypeOf((*MockTelemetryServer)(nil).DropMonitorRuleGet), arg0, arg1)
}

// MirrorSessionCreate mocks base method
func (m *MockTelemetryServer) MirrorSessionCreate(arg0 context.Context, arg1 *MirrorSessionRequestMsg) (*MirrorSessionResponseMsg, error) {
	ret := m.ctrl.Call(m, "MirrorSessionCreate", arg0, arg1)
	ret0, _ := ret[0].(*MirrorSessionResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MirrorSessionCreate indicates an expected call of MirrorSessionCreate
func (mr *MockTelemetryServerMockRecorder) MirrorSessionCreate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorSessionCreate", reflect.TypeOf((*MockTelemetryServer)(nil).MirrorSessionCreate), arg0, arg1)
}

// MirrorSessionUpdate mocks base method
func (m *MockTelemetryServer) MirrorSessionUpdate(arg0 context.Context, arg1 *MirrorSessionRequestMsg) (*MirrorSessionResponseMsg, error) {
	ret := m.ctrl.Call(m, "MirrorSessionUpdate", arg0, arg1)
	ret0, _ := ret[0].(*MirrorSessionResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MirrorSessionUpdate indicates an expected call of MirrorSessionUpdate
func (mr *MockTelemetryServerMockRecorder) MirrorSessionUpdate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorSessionUpdate", reflect.TypeOf((*MockTelemetryServer)(nil).MirrorSessionUpdate), arg0, arg1)
}

// MirrorSessionDelete mocks base method
func (m *MockTelemetryServer) MirrorSessionDelete(arg0 context.Context, arg1 *MirrorSessionDeleteRequestMsg) (*MirrorSessionDeleteResponseMsg, error) {
	ret := m.ctrl.Call(m, "MirrorSessionDelete", arg0, arg1)
	ret0, _ := ret[0].(*MirrorSessionDeleteResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MirrorSessionDelete indicates an expected call of MirrorSessionDelete
func (mr *MockTelemetryServerMockRecorder) MirrorSessionDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorSessionDelete", reflect.TypeOf((*MockTelemetryServer)(nil).MirrorSessionDelete), arg0, arg1)
}

// MirrorSessionGet mocks base method
func (m *MockTelemetryServer) MirrorSessionGet(arg0 context.Context, arg1 *MirrorSessionGetRequestMsg) (*MirrorSessionGetResponseMsg, error) {
	ret := m.ctrl.Call(m, "MirrorSessionGet", arg0, arg1)
	ret0, _ := ret[0].(*MirrorSessionGetResponseMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MirrorSessionGet indicates an expected call of MirrorSessionGet
func (mr *MockTelemetryServerMockRecorder) MirrorSessionGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MirrorSessionGet", reflect.TypeOf((*MockTelemetryServer)(nil).MirrorSessionGet), arg0, arg1)
}
