// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nic.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NIC boots in classic mode first and may later transition to flow mode
type DeviceMode int32

const (
	DeviceMode_DEVICE_MODE_NONE             DeviceMode = 0
	DeviceMode_DEVICE_MODE_MANAGED_SWITCH   DeviceMode = 1
	DeviceMode_DEVICE_MODE_MANAGED_HOST_PIN DeviceMode = 2
	DeviceMode_DEVICE_MODE_STANDALONE       DeviceMode = 3
)

var DeviceMode_name = map[int32]string{
	0: "DEVICE_MODE_NONE",
	1: "DEVICE_MODE_MANAGED_SWITCH",
	2: "DEVICE_MODE_MANAGED_HOST_PIN",
	3: "DEVICE_MODE_STANDALONE",
}
var DeviceMode_value = map[string]int32{
	"DEVICE_MODE_NONE":             0,
	"DEVICE_MODE_MANAGED_SWITCH":   1,
	"DEVICE_MODE_MANAGED_HOST_PIN": 2,
	"DEVICE_MODE_STANDALONE":       3,
}

func (x DeviceMode) String() string {
	return proto.EnumName(DeviceMode_name, int32(x))
}
func (DeviceMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorNic, []int{0} }

// Global config object for NIC
type Device struct {
	DeviceMode DeviceMode `protobuf:"varint,1,opt,name=device_mode,json=deviceMode,proto3,enum=device.DeviceMode" json:"device_mode,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{0} }

func (m *Device) GetDeviceMode() DeviceMode {
	if m != nil {
		return m.DeviceMode
	}
	return DeviceMode_DEVICE_MODE_NONE
}

func init() {
	proto.RegisterType((*Device)(nil), "device.Device")
	proto.RegisterEnum("device.DeviceMode", DeviceMode_name, DeviceMode_value)
}
func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceMode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.DeviceMode))
	}
	return i, nil
}

func encodeVarintNic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Device) Size() (n int) {
	var l int
	_ = l
	if m.DeviceMode != 0 {
		n += 1 + sovNic(uint64(m.DeviceMode))
	}
	return n
}

func sovNic(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNic(x uint64) (n int) {
	return sovNic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceMode", wireType)
			}
			m.DeviceMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceMode |= (DeviceMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNic   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nic.proto", fileDescriptorNic) }

var fileDescriptorNic = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0xcb, 0x4c, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0x49, 0x2d, 0xcb, 0x4c, 0x4e, 0x55, 0xb2, 0xe5,
	0x62, 0x73, 0x01, 0xb3, 0x84, 0x8c, 0xb9, 0xb8, 0x21, 0x62, 0xf1, 0xb9, 0xf9, 0x29, 0xa9, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x42, 0x7a, 0x10, 0x31, 0x3d, 0x88, 0x22, 0xdf, 0xfc, 0x94,
	0xd4, 0x20, 0xae, 0x14, 0x38, 0x5b, 0xab, 0x81, 0x91, 0x8b, 0x0b, 0x21, 0x25, 0x24, 0xc2, 0x25,
	0xe0, 0xe2, 0x1a, 0xe6, 0xe9, 0xec, 0x1a, 0xef, 0xeb, 0xef, 0xe2, 0x1a, 0xef, 0xe7, 0xef, 0xe7,
	0x2a, 0xc0, 0x20, 0x24, 0xc7, 0x25, 0x85, 0x2c, 0xea, 0xeb, 0xe8, 0xe7, 0xe8, 0xee, 0xea, 0x12,
	0x1f, 0x1c, 0xee, 0x19, 0xe2, 0xec, 0x21, 0xc0, 0x28, 0xa4, 0xc0, 0x25, 0x83, 0x4d, 0xde, 0xc3,
	0x3f, 0x38, 0x24, 0x3e, 0xc0, 0xd3, 0x4f, 0x80, 0x49, 0x48, 0x8a, 0x4b, 0x0c, 0x59, 0x45, 0x70,
	0x88, 0xa3, 0x9f, 0x8b, 0xa3, 0x0f, 0xc8, 0x74, 0x66, 0x27, 0xa9, 0x13, 0x8f, 0xe4, 0x18, 0x2f,
	0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x8e, 0x8c, 0xc4,
	0x1c, 0xb0, 0x2f, 0x93, 0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xea, 0x41, 0x63,
	0x92, 0xf9, 0x00, 0x00, 0x00,
}
