// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nic.proto

package halproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NIC boots in classic mode first and may later transition to flow mode
type DeviceMode int32

const (
	DeviceMode_DEVICE_MODE_NONE             DeviceMode = 0
	DeviceMode_DEVICE_MODE_MANAGED_SWITCH   DeviceMode = 1
	DeviceMode_DEVICE_MODE_MANAGED_HOST_PIN DeviceMode = 2
	DeviceMode_DEVICE_MODE_STANDALONE       DeviceMode = 3
)

var DeviceMode_name = map[int32]string{
	0: "DEVICE_MODE_NONE",
	1: "DEVICE_MODE_MANAGED_SWITCH",
	2: "DEVICE_MODE_MANAGED_HOST_PIN",
	3: "DEVICE_MODE_STANDALONE",
}
var DeviceMode_value = map[string]int32{
	"DEVICE_MODE_NONE":             0,
	"DEVICE_MODE_MANAGED_SWITCH":   1,
	"DEVICE_MODE_MANAGED_HOST_PIN": 2,
	"DEVICE_MODE_STANDALONE":       3,
}

func (x DeviceMode) String() string {
	return proto.EnumName(DeviceMode_name, int32(x))
}
func (DeviceMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorNic, []int{0} }

// Global config object for NIC
type DeviceSpec struct {
	DeviceMode          DeviceMode `protobuf:"varint,1,opt,name=device_mode,json=deviceMode,proto3,enum=device.DeviceMode" json:"device_mode,omitempty"`
	AllowDynamicPinning bool       `protobuf:"varint,2,opt,name=allow_dynamic_pinning,json=allowDynamicPinning,proto3" json:"allow_dynamic_pinning,omitempty"`
}

func (m *DeviceSpec) Reset()                    { *m = DeviceSpec{} }
func (m *DeviceSpec) String() string            { return proto.CompactTextString(m) }
func (*DeviceSpec) ProtoMessage()               {}
func (*DeviceSpec) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{0} }

func (m *DeviceSpec) GetDeviceMode() DeviceMode {
	if m != nil {
		return m.DeviceMode
	}
	return DeviceMode_DEVICE_MODE_NONE
}

func (m *DeviceSpec) GetAllowDynamicPinning() bool {
	if m != nil {
		return m.AllowDynamicPinning
	}
	return false
}

type DeviceRequest struct {
	Device *DeviceSpec `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
}

func (m *DeviceRequest) Reset()                    { *m = DeviceRequest{} }
func (m *DeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeviceRequest) ProtoMessage()               {}
func (*DeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{1} }

func (m *DeviceRequest) GetDevice() *DeviceSpec {
	if m != nil {
		return m.Device
	}
	return nil
}

type DeviceRequestMsg struct {
	Request *DeviceRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *DeviceRequestMsg) Reset()                    { *m = DeviceRequestMsg{} }
func (m *DeviceRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*DeviceRequestMsg) ProtoMessage()               {}
func (*DeviceRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{2} }

func (m *DeviceRequestMsg) GetRequest() *DeviceRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type DeviceResponse struct {
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
}

func (m *DeviceResponse) Reset()                    { *m = DeviceResponse{} }
func (m *DeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceResponse) ProtoMessage()               {}
func (*DeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{3} }

func (m *DeviceResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

type DeviceResponseMsg struct {
	Response *DeviceResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *DeviceResponseMsg) Reset()                    { *m = DeviceResponseMsg{} }
func (m *DeviceResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*DeviceResponseMsg) ProtoMessage()               {}
func (*DeviceResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{4} }

func (m *DeviceResponseMsg) GetResponse() *DeviceResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type DeviceGetRequest struct {
	Meta *ObjectMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
}

func (m *DeviceGetRequest) Reset()                    { *m = DeviceGetRequest{} }
func (m *DeviceGetRequest) String() string            { return proto.CompactTextString(m) }
func (*DeviceGetRequest) ProtoMessage()               {}
func (*DeviceGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{5} }

func (m *DeviceGetRequest) GetMeta() *ObjectMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type DeviceGetRequestMsg struct {
	Request *DeviceGetRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *DeviceGetRequestMsg) Reset()                    { *m = DeviceGetRequestMsg{} }
func (m *DeviceGetRequestMsg) String() string            { return proto.CompactTextString(m) }
func (*DeviceGetRequestMsg) ProtoMessage()               {}
func (*DeviceGetRequestMsg) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{6} }

func (m *DeviceGetRequestMsg) GetRequest() *DeviceGetRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type DeviceGetResponse struct {
	ApiStatus ApiStatus   `protobuf:"varint,1,opt,name=api_status,json=apiStatus,proto3,enum=types.ApiStatus" json:"api_status,omitempty" venice:api_status`
	Device    *DeviceSpec `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
}

func (m *DeviceGetResponse) Reset()                    { *m = DeviceGetResponse{} }
func (m *DeviceGetResponse) String() string            { return proto.CompactTextString(m) }
func (*DeviceGetResponse) ProtoMessage()               {}
func (*DeviceGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{7} }

func (m *DeviceGetResponse) GetApiStatus() ApiStatus {
	if m != nil {
		return m.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (m *DeviceGetResponse) GetDevice() *DeviceSpec {
	if m != nil {
		return m.Device
	}
	return nil
}

type DeviceGetResponseMsg struct {
	Response *DeviceGetResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *DeviceGetResponseMsg) Reset()                    { *m = DeviceGetResponseMsg{} }
func (m *DeviceGetResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*DeviceGetResponseMsg) ProtoMessage()               {}
func (*DeviceGetResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorNic, []int{8} }

func (m *DeviceGetResponseMsg) GetResponse() *DeviceGetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*DeviceSpec)(nil), "device.DeviceSpec")
	proto.RegisterType((*DeviceRequest)(nil), "device.DeviceRequest")
	proto.RegisterType((*DeviceRequestMsg)(nil), "device.DeviceRequestMsg")
	proto.RegisterType((*DeviceResponse)(nil), "device.DeviceResponse")
	proto.RegisterType((*DeviceResponseMsg)(nil), "device.DeviceResponseMsg")
	proto.RegisterType((*DeviceGetRequest)(nil), "device.DeviceGetRequest")
	proto.RegisterType((*DeviceGetRequestMsg)(nil), "device.DeviceGetRequestMsg")
	proto.RegisterType((*DeviceGetResponse)(nil), "device.DeviceGetResponse")
	proto.RegisterType((*DeviceGetResponseMsg)(nil), "device.DeviceGetResponseMsg")
	proto.RegisterEnum("device.DeviceMode", DeviceMode_name, DeviceMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nic service

type NicClient interface {
	DeviceCreate(ctx context.Context, in *DeviceRequestMsg, opts ...grpc.CallOption) (*DeviceResponseMsg, error)
	DeviceUpdate(ctx context.Context, in *DeviceRequestMsg, opts ...grpc.CallOption) (*DeviceResponseMsg, error)
	DeviceGet(ctx context.Context, in *DeviceGetRequestMsg, opts ...grpc.CallOption) (*DeviceGetResponseMsg, error)
}

type nicClient struct {
	cc *grpc.ClientConn
}

func NewNicClient(cc *grpc.ClientConn) NicClient {
	return &nicClient{cc}
}

func (c *nicClient) DeviceCreate(ctx context.Context, in *DeviceRequestMsg, opts ...grpc.CallOption) (*DeviceResponseMsg, error) {
	out := new(DeviceResponseMsg)
	err := grpc.Invoke(ctx, "/device.Nic/DeviceCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nicClient) DeviceUpdate(ctx context.Context, in *DeviceRequestMsg, opts ...grpc.CallOption) (*DeviceResponseMsg, error) {
	out := new(DeviceResponseMsg)
	err := grpc.Invoke(ctx, "/device.Nic/DeviceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nicClient) DeviceGet(ctx context.Context, in *DeviceGetRequestMsg, opts ...grpc.CallOption) (*DeviceGetResponseMsg, error) {
	out := new(DeviceGetResponseMsg)
	err := grpc.Invoke(ctx, "/device.Nic/DeviceGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nic service

type NicServer interface {
	DeviceCreate(context.Context, *DeviceRequestMsg) (*DeviceResponseMsg, error)
	DeviceUpdate(context.Context, *DeviceRequestMsg) (*DeviceResponseMsg, error)
	DeviceGet(context.Context, *DeviceGetRequestMsg) (*DeviceGetResponseMsg, error)
}

func RegisterNicServer(s *grpc.Server, srv NicServer) {
	s.RegisterService(&_Nic_serviceDesc, srv)
}

func _Nic_DeviceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NicServer).DeviceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Nic/DeviceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NicServer).DeviceCreate(ctx, req.(*DeviceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nic_DeviceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NicServer).DeviceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Nic/DeviceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NicServer).DeviceUpdate(ctx, req.(*DeviceRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nic_DeviceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGetRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NicServer).DeviceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.Nic/DeviceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NicServer).DeviceGet(ctx, req.(*DeviceGetRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "device.Nic",
	HandlerType: (*NicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceCreate",
			Handler:    _Nic_DeviceCreate_Handler,
		},
		{
			MethodName: "DeviceUpdate",
			Handler:    _Nic_DeviceUpdate_Handler,
		},
		{
			MethodName: "DeviceGet",
			Handler:    _Nic_DeviceGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nic.proto",
}

func (m *DeviceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceMode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.DeviceMode))
	}
	if m.AllowDynamicPinning {
		dAtA[i] = 0x10
		i++
		if m.AllowDynamicPinning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Device != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.Device.Size()))
		n1, err := m.Device.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *DeviceRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.Request.Size()))
		n2, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *DeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.ApiStatus))
	}
	return i, nil
}

func (m *DeviceResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.Response.Size()))
		n3, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *DeviceGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.Meta.Size()))
		n4, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *DeviceGetRequestMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceGetRequestMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.Request.Size()))
		n5, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *DeviceGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ApiStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.ApiStatus))
	}
	if m.Device != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.Device.Size()))
		n6, err := m.Device.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *DeviceGetResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceGetResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNic(dAtA, i, uint64(m.Response.Size()))
		n7, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintNic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DeviceSpec) Size() (n int) {
	var l int
	_ = l
	if m.DeviceMode != 0 {
		n += 1 + sovNic(uint64(m.DeviceMode))
	}
	if m.AllowDynamicPinning {
		n += 2
	}
	return n
}

func (m *DeviceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovNic(uint64(l))
	}
	return n
}

func (m *DeviceRequestMsg) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovNic(uint64(l))
	}
	return n
}

func (m *DeviceResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNic(uint64(m.ApiStatus))
	}
	return n
}

func (m *DeviceResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovNic(uint64(l))
	}
	return n
}

func (m *DeviceGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovNic(uint64(l))
	}
	return n
}

func (m *DeviceGetRequestMsg) Size() (n int) {
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovNic(uint64(l))
	}
	return n
}

func (m *DeviceGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.ApiStatus != 0 {
		n += 1 + sovNic(uint64(m.ApiStatus))
	}
	if m.Device != nil {
		l = m.Device.Size()
		n += 1 + l + sovNic(uint64(l))
	}
	return n
}

func (m *DeviceGetResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovNic(uint64(l))
	}
	return n
}

func sovNic(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNic(x uint64) (n int) {
	return sovNic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceMode", wireType)
			}
			m.DeviceMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceMode |= (DeviceMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDynamicPinning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowDynamicPinning = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceSpec{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &DeviceRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &DeviceResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &ObjectMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceGetRequestMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceGetRequestMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceGetRequestMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &DeviceGetRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiStatus", wireType)
			}
			m.ApiStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiStatus |= (ApiStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Device == nil {
				m.Device = &DeviceSpec{}
			}
			if err := m.Device.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceGetResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceGetResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceGetResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &DeviceGetResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNic   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nic.proto", fileDescriptorNic) }

var fileDescriptorNic = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xa4, 0x9f, 0xfa, 0x25, 0x37, 0x50, 0x39, 0xd3, 0xa6, 0x4a, 0x4d, 0x65, 0x22, 0x4b,
	0x48, 0x55, 0x17, 0x41, 0x4a, 0xc5, 0x02, 0x58, 0xb9, 0xb1, 0x49, 0x22, 0x61, 0xa7, 0xb2, 0xc3,
	0x8f, 0xd8, 0x58, 0xae, 0x3d, 0x0a, 0x46, 0x89, 0x6d, 0xe2, 0x49, 0x51, 0x77, 0xec, 0x78, 0x05,
	0x1e, 0x89, 0x25, 0x2f, 0x00, 0x42, 0xe1, 0x0d, 0x78, 0x02, 0xe4, 0x99, 0x71, 0x7e, 0xdc, 0x54,
	0x2c, 0x60, 0x65, 0xcf, 0x3d, 0x67, 0xce, 0x9c, 0x7b, 0xe6, 0x6a, 0xa0, 0x1a, 0x85, 0x7e, 0x3b,
	0x99, 0xc5, 0x34, 0xc6, 0xbb, 0x01, 0xb9, 0x0a, 0x7d, 0x22, 0xd7, 0xe8, 0x75, 0x42, 0x52, 0x5e,
	0x54, 0xe7, 0x00, 0x3a, 0x2b, 0x3b, 0x09, 0xf1, 0xf1, 0x19, 0xd4, 0x38, 0xc9, 0x9d, 0xc6, 0x01,
	0x69, 0xa2, 0x16, 0x3a, 0xd9, 0xeb, 0xe0, 0x36, 0xaf, 0xb5, 0x39, 0xd1, 0x8c, 0x03, 0x62, 0x43,
	0xb0, 0xfc, 0xc7, 0x1d, 0x68, 0x78, 0x93, 0x49, 0xfc, 0xc1, 0x0d, 0xae, 0x23, 0x6f, 0x1a, 0xfa,
	0x6e, 0x12, 0x46, 0x51, 0x18, 0x8d, 0x9b, 0xe5, 0x16, 0x3a, 0xa9, 0xd8, 0xfb, 0x0c, 0xd4, 0x39,
	0x76, 0xc1, 0x21, 0xf5, 0x29, 0xdc, 0xe5, 0x6a, 0x36, 0x79, 0x3f, 0x27, 0x29, 0xc5, 0xa7, 0x20,
	0xec, 0xb1, 0x43, 0x6b, 0xc5, 0x43, 0x33, 0x77, 0xb6, 0x60, 0xa8, 0x5d, 0x90, 0x36, 0x36, 0x9b,
	0xe9, 0x18, 0x3f, 0x84, 0xff, 0x67, 0x7c, 0x25, 0x04, 0x1a, 0x9b, 0x02, 0x82, 0x6a, 0xe7, 0x2c,
	0xf5, 0x35, 0xec, 0xe5, 0x48, 0x9a, 0xc4, 0x51, 0x4a, 0xf0, 0x33, 0x00, 0x2f, 0x09, 0xdd, 0x94,
	0x7a, 0x74, 0x9e, 0x8a, 0xde, 0xa5, 0x36, 0x0f, 0x4b, 0x4b, 0x42, 0x87, 0xd5, 0xcf, 0x1b, 0xbf,
	0xbe, 0xdf, 0xaf, 0x5f, 0x91, 0x28, 0xf4, 0xc9, 0x93, 0x15, 0xdd, 0xae, 0x7a, 0x39, 0x43, 0xed,
	0x41, 0x7d, 0x53, 0x39, 0xf3, 0xd7, 0x81, 0xca, 0x4c, 0x2c, 0x85, 0xc1, 0xc3, 0xa2, 0x41, 0x8e,
	0xda, 0x4b, 0x9e, 0xfa, 0x38, 0xef, 0xb3, 0x47, 0x68, 0x9e, 0xd3, 0x03, 0xf8, 0x6f, 0x4a, 0xa8,
	0x27, 0x34, 0xea, 0xc2, 0xde, 0xf0, 0xf2, 0x1d, 0xf1, 0xa9, 0x49, 0xa8, 0x67, 0x33, 0x58, 0x1d,
	0xc0, 0x7e, 0x71, 0x2b, 0x77, 0x51, 0x48, 0xa9, 0xb9, 0x69, 0x62, 0xc5, 0x5e, 0x05, 0xf5, 0x09,
	0xe5, 0xfd, 0x30, 0xf4, 0xdf, 0x86, 0xb5, 0x76, 0xef, 0xe5, 0x3f, 0xde, 0xbb, 0x09, 0x07, 0x37,
	0x8c, 0x64, 0x5d, 0x3d, 0xba, 0x91, 0xed, 0xd1, 0x96, 0xb6, 0x8a, 0xf1, 0x9e, 0x7e, 0x44, 0xf9,
	0xec, 0xb3, 0x31, 0x3e, 0x00, 0x49, 0x37, 0x5e, 0x0e, 0xba, 0x86, 0x6b, 0x0e, 0x75, 0xc3, 0xb5,
	0x86, 0x96, 0x21, 0x95, 0xb0, 0x02, 0xf2, 0x7a, 0xd5, 0xd4, 0x2c, 0xad, 0x67, 0xe8, 0xae, 0xf3,
	0x6a, 0x30, 0xea, 0xf6, 0x25, 0x84, 0x5b, 0x70, 0xbc, 0x0d, 0xef, 0x0f, 0x9d, 0x91, 0x7b, 0x31,
	0xb0, 0xa4, 0x32, 0x96, 0xe1, 0x70, 0x9d, 0xe1, 0x8c, 0x34, 0x4b, 0xd7, 0x9e, 0x67, 0xea, 0x3b,
	0x9d, 0x6f, 0x08, 0x76, 0xac, 0xd0, 0xc7, 0x06, 0xdc, 0xe1, 0x4e, 0xba, 0x33, 0xe2, 0x51, 0x82,
	0x9b, 0x5b, 0x87, 0xd7, 0x4c, 0xc7, 0xf2, 0xd1, 0xf6, 0xa9, 0x31, 0xd3, 0xb1, 0x5a, 0x5a, 0xc9,
	0xbc, 0x48, 0x82, 0xbf, 0x90, 0xe9, 0x43, 0x75, 0x99, 0x1b, 0xbe, 0x77, 0xdb, 0x84, 0x64, 0x32,
	0xc7, 0xb7, 0xe6, 0xcc, 0x94, 0xce, 0xe5, 0x2f, 0x0b, 0x05, 0x7d, 0x5d, 0x28, 0xe8, 0xc7, 0x42,
	0x41, 0x9f, 0x7f, 0x2a, 0xa5, 0x37, 0x95, 0xb7, 0xde, 0x84, 0xbd, 0x3c, 0x97, 0xbb, 0xec, 0x73,
	0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xd0, 0xb1, 0x2b, 0xa2, 0x04, 0x00, 0x00,
}
